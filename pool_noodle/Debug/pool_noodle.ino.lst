
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 65 c9 00 00 1d c9 00 00     ... ....e.......
      10:	1d c9 00 00 1d c9 00 00 1d c9 00 00 1d c9 00 00     ................
      20:	1d c9 00 00 1d c9 00 00 1d c9 00 00 65 c9 00 00     ............e...
      30:	65 c9 00 00 1d c9 00 00 91 dd 00 00 95 de 00 00     e...............
      40:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      50:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      60:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      70:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      80:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      90:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      a0:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      b0:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      c0:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      d0:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      e0:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
      f0:	65 c9 00 00 ed e1 00 00 65 c9 00 00 19 e3 00 00     e.......e.......
     100:	65 c9 00 00 45 e4 00 00 65 c9 00 00 65 c9 00 00     e...E...e...e...
     110:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
     120:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
     130:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
     140:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
     150:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
     160:	65 c9 00 00 ad cd 00 00 65 c9 00 00 65 c9 00 00     e.......e...e...
     170:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
     180:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
     190:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
     1a0:	65 c9 00 00 65 c9 00 00 65 c9 00 00 65 c9 00 00     e...e...e...e...
     1b0:	65 c9 00 00 65 c9 00 00 65 c9 00 00                 e...e...e...

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00c fbcc 	bl	c96c <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00c fc20 	bl	cb18 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00c fb91 	bl	ca08 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00c fb82 	bl	ca08 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00f f884 	bl	f414 <__libc_init_array>

	startup_late_hook();
     30c:	f00c fb34 	bl	c978 <startup_late_hook>
	main();
     310:	f00d fdc8 	bl	dea4 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c74 	.word	0x1fff8c74
     33c:	00012a98 	.word	0x00012a98
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c74 	.word	0x1fff8c74
     348:	1fffb460 	.word	0x1fffb460
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e4e9084 	.word	0x5e4e9084
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c74 	.word	0x1fff8c74
     42c:	00000000 	.word	0x00000000
     430:	00012a9c 	.word	0x00012a9c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c78 	.word	0x1fff8c78
     460:	00012a9c 	.word	0x00012a9c
     464:	1fff8c74 	.word	0x1fff8c74
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.16]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     490:	3980      	subs	r1, #128	; 0x80
     492:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     494:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     496:	004b      	lsls	r3, r1, #1
     498:	7844      	ldrb	r4, [r0, #1]
     49a:	7882      	ldrb	r2, [r0, #2]
     49c:	b2c9      	uxtb	r1, r1
     49e:	b2db      	uxtb	r3, r3
     4a0:	1a61      	subs	r1, r4, r1
     4a2:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4a4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     4a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4ac:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     4ae:	7083      	strb	r3, [r0, #2]
}
     4b0:	bc10      	pop	{r4}
     4b2:	4770      	bx	lr

000004b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     4b4:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4b6:	4c1d      	ldr	r4, [pc, #116]	; (52c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x78>)
     4b8:	b083      	sub	sp, #12
     4ba:	6824      	ldr	r4, [r4, #0]
     4bc:	9401      	str	r4, [sp, #4]
	return ret;
     4be:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     4c0:	28ff      	cmp	r0, #255	; 0xff
     4c2:	bf98      	it	ls
     4c4:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     4c6:	f44f 748c 	mov.w	r4, #280	; 0x118
     4ca:	eba5 0303 	sub.w	r3, r5, r3
     4ce:	fb04 f303 	mul.w	r3, r4, r3
     4d2:	bf98      	it	ls
     4d4:	b280      	uxthls	r0, r0
     4d6:	fb00 f003 	mul.w	r0, r0, r3
     4da:	f3c0 400e 	ubfx	r0, r0, #16, #15
     4de:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e2:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4e4:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e8:	d503      	bpl.n	4f2 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x3e>
     4ea:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4ee:	3307      	adds	r3, #7
     4f0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f2:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     4f4:	4e0e      	ldr	r6, [pc, #56]	; (530 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f6:	4c0f      	ldr	r4, [pc, #60]	; (534 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4f8:	5d76      	ldrb	r6, [r6, r5]
     4fa:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     4fe:	f3c3 0546 	ubfx	r5, r3, #1, #7
     502:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     506:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     508:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     50a:	bf4a      	itet	mi
     50c:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     50e:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     510:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     512:	1a52      	subs	r2, r2, r1
     514:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     518:	b292      	uxth	r2, r2
     51a:	b2a3      	uxth	r3, r4
     51c:	fb02 3303 	mla	r3, r2, r3, r3
     520:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     524:	b280      	uxth	r0, r0
     526:	b003      	add	sp, #12
     528:	bc70      	pop	{r4, r5, r6}
     52a:	4770      	bx	lr
     52c:	1fffb19c 	.word	0x1fffb19c
     530:	00011854 	.word	0x00011854
     534:	0001111c 	.word	0x0001111c

00000538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     538:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     53a:	4c1e      	ldr	r4, [pc, #120]	; (5b4 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x7c>)
     53c:	b083      	sub	sp, #12
     53e:	6824      	ldr	r4, [r4, #0]
     540:	9401      	str	r4, [sp, #4]
	return ret;
     542:	9d01      	ldr	r5, [sp, #4]
     544:	28ff      	cmp	r0, #255	; 0xff
     546:	bf98      	it	ls
     548:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     54a:	f44f 748c 	mov.w	r4, #280	; 0x118
     54e:	eba5 0303 	sub.w	r3, r5, r3
     552:	fb04 f303 	mul.w	r3, r4, r3
     556:	bf98      	it	ls
     558:	b280      	uxthls	r0, r0
     55a:	fb00 f003 	mul.w	r0, r0, r3
     55e:	f3c0 400e 	ubfx	r0, r0, #16, #15
     562:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     566:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     568:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     56a:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     56e:	d503      	bpl.n	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x40>
     570:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     574:	3307      	adds	r3, #7
     576:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     578:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     57a:	4e0f      	ldr	r6, [pc, #60]	; (5b8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     57c:	4c0f      	ldr	r4, [pc, #60]	; (5bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     57e:	5d76      	ldrb	r6, [r6, r5]
     580:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     584:	f3c3 0546 	ubfx	r5, r3, #1, #7
     588:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     58c:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     58e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     590:	bf4a      	itet	mi
     592:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     594:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     596:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     598:	1a52      	subs	r2, r2, r1
     59a:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     59e:	b292      	uxth	r2, r2
     5a0:	b2a3      	uxth	r3, r4
     5a2:	fb02 3303 	mla	r3, r2, r3, r3
     5a6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     5aa:	b280      	uxth	r0, r0
     5ac:	b003      	add	sp, #12
     5ae:	bc70      	pop	{r4, r5, r6}
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	1fffb19c 	.word	0x1fffb19c
     5b8:	00011854 	.word	0x00011854
     5bc:	0001111c 	.word	0x0001111c

000005c0 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     5c0:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c2:	4b18      	ldr	r3, [pc, #96]	; (624 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x64>)
     5c4:	b083      	sub	sp, #12
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	9301      	str	r3, [sp, #4]
	return ret;
     5ca:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     5cc:	f44f 738c 	mov.w	r3, #280	; 0x118
     5d0:	fb03 f606 	mul.w	r6, r3, r6
     5d4:	fb00 f006 	mul.w	r0, r0, r6
     5d8:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     5da:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     5dc:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     5e0:	d503      	bpl.n	5ea <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x2a>
     5e2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     5e6:	3307      	adds	r3, #7
     5e8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5ea:	0a18      	lsrs	r0, r3, #8
     5ec:	4d0e      	ldr	r5, [pc, #56]	; (628 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x68>)
    uint8_t  m   = slope[section];
     5ee:	4c0f      	ldr	r4, [pc, #60]	; (62c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5f0:	5c24      	ldrb	r4, [r4, r0]
     5f2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     5f6:	f3c3 0546 	ubfx	r5, r3, #1, #7
     5fa:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     5fe:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     600:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     602:	bf48      	it	mi
     604:	4264      	negmi	r4, r4
     606:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     608:	1a53      	subs	r3, r2, r1
     60a:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     60e:	b29a      	uxth	r2, r3
     610:	b2a3      	uxth	r3, r4
     612:	fb02 3303 	mla	r3, r2, r3, r3
     616:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     61a:	b280      	uxth	r0, r0
     61c:	b003      	add	sp, #12
     61e:	bc70      	pop	{r4, r5, r6}
     620:	4770      	bx	lr
     622:	bf00      	nop
     624:	1fffb19c 	.word	0x1fffb19c
     628:	0001111c 	.word	0x0001111c
     62c:	00011854 	.word	0x00011854

00000630 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     630:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     632:	2101      	movs	r1, #1
     634:	4604      	mov	r4, r0
     636:	200e      	movs	r0, #14
     638:	f00c f9f8 	bl	ca2c <pinMode>
     63c:	2007      	movs	r0, #7
     63e:	2101      	movs	r1, #1
     640:	f00c f9f4 	bl	ca2c <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     644:	69a0      	ldr	r0, [r4, #24]
     646:	b158      	cbz	r0, 660 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     648:	6803      	ldr	r3, [r0, #0]
     64a:	4a07      	ldr	r2, [pc, #28]	; (668 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     64c:	685b      	ldr	r3, [r3, #4]
     64e:	4293      	cmp	r3, r2
     650:	d107      	bne.n	662 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     652:	6842      	ldr	r2, [r0, #4]
     654:	7b01      	ldrb	r1, [r0, #12]
     656:	7813      	ldrb	r3, [r2, #0]
     658:	ea23 0301 	bic.w	r3, r3, r1
     65c:	7013      	strb	r3, [r2, #0]
     65e:	bd10      	pop	{r4, pc}
     660:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     666:	4718      	bx	r3
     668:	00000481 	.word	0x00000481

0000066c <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     66c:	b5f0      	push	{r4, r5, r6, r7, lr}
     66e:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     670:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     672:	6805      	ldr	r5, [r0, #0]
     674:	f88d 3004 	strb.w	r3, [sp, #4]
     678:	f88d 3005 	strb.w	r3, [sp, #5]
     67c:	f88d 3006 	strb.w	r3, [sp, #6]
     680:	682e      	ldr	r6, [r5, #0]
     682:	4a37      	ldr	r2, [pc, #220]	; (760 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     684:	f88d 3008 	strb.w	r3, [sp, #8]
     688:	4296      	cmp	r6, r2
     68a:	f88d 3009 	strb.w	r3, [sp, #9]
     68e:	f88d 300a 	strb.w	r3, [sp, #10]
     692:	d15f      	bne.n	754 <CLEDController::clearLeds(int)+0xe8>
     694:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     696:	9104      	str	r1, [sp, #16]
     698:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     69a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     69c:	a801      	add	r0, sp, #4
     69e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6a0:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     6a4:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     6a8:	f88d 3020 	strb.w	r3, [sp, #32]
     6ac:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6ae:	d015      	beq.n	6dc <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6b0:	f88d 301d 	strb.w	r3, [sp, #29]
     6b4:	f88d 301c 	strb.w	r3, [sp, #28]
     6b8:	f88d 301b 	strb.w	r3, [sp, #27]
     6bc:	f88d 301a 	strb.w	r3, [sp, #26]
     6c0:	f88d 3019 	strb.w	r3, [sp, #25]
     6c4:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6c8:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6ca:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d0:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6d2:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d4:	a903      	add	r1, sp, #12
     6d6:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     6d8:	b00b      	add	sp, #44	; 0x2c
     6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6dc:	4a21      	ldr	r2, [pc, #132]	; (764 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6de:	7813      	ldrb	r3, [r2, #0]
     6e0:	3301      	adds	r3, #1
     6e2:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6e6:	f013 0f01 	tst.w	r3, #1
     6ea:	bf14      	ite	ne
     6ec:	2180      	movne	r1, #128	; 0x80
     6ee:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6f0:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6f2:	079a      	lsls	r2, r3, #30
     6f4:	bf44      	itt	mi
     6f6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     6fa:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     6fc:	075b      	lsls	r3, r3, #29
     6fe:	bf48      	it	mi
     700:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     704:	3110      	adds	r1, #16
     706:	2200      	movs	r2, #0
     708:	b2c9      	uxtb	r1, r1
     70a:	f10d 031b 	add.w	r3, sp, #27
     70e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     712:	f44f 7e80 	mov.w	lr, #256	; 0x100
     716:	b1aa      	cbz	r2, 744 <CLEDController::clearLeds(int)+0xd8>
     718:	fb9e f2f2 	sdiv	r2, lr, r2
     71c:	b2d2      	uxtb	r2, r2
     71e:	1c50      	adds	r0, r2, #1
     720:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     722:	fb00 1501 	mla	r5, r0, r1, r1
     726:	122d      	asrs	r5, r5, #8
     728:	7018      	strb	r0, [r3, #0]
     72a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     72c:	b105      	cbz	r5, 730 <CLEDController::clearLeds(int)+0xc4>
     72e:	3e01      	subs	r6, #1
     730:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     734:	b100      	cbz	r0, 738 <CLEDController::clearLeds(int)+0xcc>
     736:	701a      	strb	r2, [r3, #0]
     738:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     73a:	429f      	cmp	r7, r3
     73c:	d008      	beq.n	750 <CLEDController::clearLeds(int)+0xe4>
     73e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     740:	2a00      	cmp	r2, #0
     742:	d1e9      	bne.n	718 <CLEDController::clearLeds(int)+0xac>
     744:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     746:	f803 2c03 	strb.w	r2, [r3, #-3]
     74a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     74c:	429f      	cmp	r7, r3
     74e:	d1f6      	bne.n	73e <CLEDController::clearLeds(int)+0xd2>
     750:	6825      	ldr	r5, [r4, #0]
     752:	e7b9      	b.n	6c8 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     754:	460a      	mov	r2, r1
     756:	ab02      	add	r3, sp, #8
     758:	a901      	add	r1, sp, #4
     75a:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     75c:	b00b      	add	sp, #44	; 0x2c
     75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     760:	000008b1 	.word	0x000008b1
     764:	1fff8c90 	.word	0x1fff8c90

00000768 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.36]>:
    return result;
}

/// beatsin8 generates an 8-bit sine wave at a given BPM,
///           that oscillates within a given range.
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,
     768:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     76a:	4c1e      	ldr	r4, [pc, #120]	; (7e4 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.36]+0x7c>)
     76c:	b083      	sub	sp, #12
     76e:	6824      	ldr	r4, [r4, #0]
     770:	9401      	str	r4, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     772:	28ff      	cmp	r0, #255	; 0xff
	return ret;
     774:	9d01      	ldr	r5, [sp, #4]
     776:	bf98      	it	ls
     778:	0200      	lslls	r0, r0, #8
///           that oscillates within a given range.
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,
                            uint32_t timebase = 0, uint8_t phase_offset = 0)
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
     77a:	f44f 748c 	mov.w	r4, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     77e:	bf98      	it	ls
     780:	b280      	uxthls	r0, r0
///           that oscillates within a given range.
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,
                            uint32_t timebase = 0, uint8_t phase_offset = 0)
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
     782:	fb04 f405 	mul.w	r4, r4, r5
     786:	fb00 f004 	mul.w	r0, r0, r4
     78a:	eb03 6010 	add.w	r0, r3, r0, lsr #24
     78e:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
     790:	0658      	lsls	r0, r3, #25
     792:	d521      	bpl.n	7d8 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.36]+0x70>
        offset = (uint8_t)255 - offset;
     794:	43dd      	mvns	r5, r3
     796:	b2ed      	uxtb	r5, r5
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
     798:	f005 000f 	and.w	r0, r5, #15
    if( theta & 0x40) secoffset++;
     79c:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
     79e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
     7a2:	4c11      	ldr	r4, [pc, #68]	; (7e8 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.36]+0x80>)
     7a4:	112d      	asrs	r5, r5, #4
     7a6:	006d      	lsls	r5, r5, #1
     7a8:	1966      	adds	r6, r4, r5
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
     7aa:	5d65      	ldrb	r5, [r4, r5]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
     7ac:	7874      	ldrb	r4, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
     7ae:	fb14 f400 	smulbb	r4, r4, r0
     7b2:	eb05 1424 	add.w	r4, r5, r4, asr #4
    if( theta & 0x80 ) y = -y;
     7b6:	061b      	lsls	r3, r3, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
     7b8:	b2e4      	uxtb	r4, r4
    if( theta & 0x80 ) y = -y;
     7ba:	bf48      	it	mi
     7bc:	4264      	negmi	r4, r4
     7be:	b264      	sxtb	r4, r4
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    return result;
     7c0:	1a50      	subs	r0, r2, r1
     7c2:	3c80      	subs	r4, #128	; 0x80
     7c4:	b2c0      	uxtb	r0, r0
     7c6:	b2e3      	uxtb	r3, r4
     7c8:	fb00 3303 	mla	r3, r0, r3, r3
     7cc:	eb01 2023 	add.w	r0, r1, r3, asr #8
     7d0:	b2c0      	uxtb	r0, r0
}
     7d2:	b003      	add	sp, #12
     7d4:	bc70      	pop	{r4, r5, r6}
     7d6:	4770      	bx	lr
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
     7d8:	f003 053f 	and.w	r5, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
     7dc:	f003 000f 	and.w	r0, r3, #15
     7e0:	e7df      	b.n	7a2 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.36]+0x3a>
     7e2:	bf00      	nop
     7e4:	1fffb19c 	.word	0x1fffb19c
     7e8:	000112bc 	.word	0x000112bc

000007ec <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ee:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7f0:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     7f2:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     7f4:	789b      	ldrb	r3, [r3, #2]
     7f6:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7f8:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     7fa:	9101      	str	r1, [sp, #4]
     7fc:	9202      	str	r2, [sp, #8]
     7fe:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     800:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     804:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     808:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     80c:	d017      	beq.n	83e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     80e:	2300      	movs	r3, #0
     810:	f88d 3015 	strb.w	r3, [sp, #21]
     814:	f88d 3014 	strb.w	r3, [sp, #20]
     818:	f88d 3013 	strb.w	r3, [sp, #19]
     81c:	f88d 3012 	strb.w	r3, [sp, #18]
     820:	f88d 3011 	strb.w	r3, [sp, #17]
     824:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     828:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     82a:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     82c:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     82e:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     830:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     834:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     836:	a901      	add	r1, sp, #4
     838:	4798      	blx	r3
  }
     83a:	b009      	add	sp, #36	; 0x24
     83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     83e:	4a1b      	ldr	r2, [pc, #108]	; (8ac <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     840:	7813      	ldrb	r3, [r2, #0]
     842:	3301      	adds	r3, #1
     844:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     848:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     84c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     84e:	bf14      	ite	ne
     850:	2280      	movne	r2, #128	; 0x80
     852:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     854:	0799      	lsls	r1, r3, #30
     856:	bf44      	itt	mi
     858:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     85c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     85e:	075b      	lsls	r3, r3, #29
     860:	bf48      	it	mi
     862:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     866:	3210      	adds	r2, #16
     868:	b2d2      	uxtb	r2, r2
     86a:	f10d 0313 	add.w	r3, sp, #19
     86e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     872:	f44f 7e80 	mov.w	lr, #256	; 0x100
     876:	b1ac      	cbz	r4, 8a4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     878:	fb9e f4f4 	sdiv	r4, lr, r4
     87c:	b2e4      	uxtb	r4, r4
     87e:	1c61      	adds	r1, r4, #1
     880:	b2c9      	uxtb	r1, r1
     882:	fb01 2502 	mla	r5, r1, r2, r2
     886:	122d      	asrs	r5, r5, #8
     888:	7019      	strb	r1, [r3, #0]
     88a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     88c:	b105      	cbz	r5, 890 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     88e:	3e01      	subs	r6, #1
     890:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     894:	b101      	cbz	r1, 898 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     896:	701c      	strb	r4, [r3, #0]
     898:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     89a:	42bb      	cmp	r3, r7
     89c:	d0c4      	beq.n	828 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     89e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     8a0:	2c00      	cmp	r4, #0
     8a2:	d1e9      	bne.n	878 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     8a4:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     8a6:	f803 4c03 	strb.w	r4, [r3, #-3]
     8aa:	e7f5      	b.n	898 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     8ac:	1fff8c90 	.word	0x1fff8c90

000008b0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b2:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8b4:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     8b6:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     8b8:	789b      	ldrb	r3, [r3, #2]
     8ba:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8bc:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     8be:	9101      	str	r1, [sp, #4]
     8c0:	9202      	str	r2, [sp, #8]
     8c2:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8c4:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     8c8:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     8cc:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8d0:	d016      	beq.n	900 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     8d2:	2300      	movs	r3, #0
     8d4:	f88d 3015 	strb.w	r3, [sp, #21]
     8d8:	f88d 3014 	strb.w	r3, [sp, #20]
     8dc:	f88d 3013 	strb.w	r3, [sp, #19]
     8e0:	f88d 3012 	strb.w	r3, [sp, #18]
     8e4:	f88d 3011 	strb.w	r3, [sp, #17]
     8e8:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8ec:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     8ee:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8f0:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     8f2:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     8f6:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8f8:	a901      	add	r1, sp, #4
     8fa:	4790      	blx	r2
  }
     8fc:	b009      	add	sp, #36	; 0x24
     8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     900:	4a1b      	ldr	r2, [pc, #108]	; (970 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     902:	7813      	ldrb	r3, [r2, #0]
     904:	3301      	adds	r3, #1
     906:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     90a:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     90e:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     910:	bf14      	ite	ne
     912:	2280      	movne	r2, #128	; 0x80
     914:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     916:	0799      	lsls	r1, r3, #30
     918:	bf44      	itt	mi
     91a:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     91e:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     920:	075b      	lsls	r3, r3, #29
     922:	bf48      	it	mi
     924:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     928:	3210      	adds	r2, #16
     92a:	b2d2      	uxtb	r2, r2
     92c:	f10d 0313 	add.w	r3, sp, #19
     930:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     934:	f44f 7e80 	mov.w	lr, #256	; 0x100
     938:	b1ac      	cbz	r4, 966 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     93a:	fb9e f4f4 	sdiv	r4, lr, r4
     93e:	b2e4      	uxtb	r4, r4
     940:	1c61      	adds	r1, r4, #1
     942:	b2c9      	uxtb	r1, r1
     944:	fb01 2502 	mla	r5, r1, r2, r2
     948:	122d      	asrs	r5, r5, #8
     94a:	7019      	strb	r1, [r3, #0]
     94c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     94e:	b105      	cbz	r5, 952 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     950:	3e01      	subs	r6, #1
     952:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     956:	b101      	cbz	r1, 95a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     958:	701c      	strb	r4, [r3, #0]
     95a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     95c:	42bb      	cmp	r3, r7
     95e:	d0c5      	beq.n	8ec <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     960:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     962:	2c00      	cmp	r4, #0
     964:	d1e9      	bne.n	93a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     966:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     968:	f803 4c03 	strb.w	r4, [r3, #-3]
     96c:	e7f5      	b.n	95a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     96e:	bf00      	nop
     970:	1fff8c90 	.word	0x1fff8c90

00000974 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     974:	b570      	push	{r4, r5, r6, lr}
     976:	4604      	mov	r4, r0
     978:	4608      	mov	r0, r1
     97a:	460d      	mov	r5, r1
     97c:	f00e fe60 	bl	f640 <strlen>
     980:	6823      	ldr	r3, [r4, #0]
     982:	4602      	mov	r2, r0
     984:	4629      	mov	r1, r5
     986:	4620      	mov	r0, r4
     988:	685b      	ldr	r3, [r3, #4]
     98a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     98e:	4718      	bx	r3

00000990 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     990:	b538      	push	{r3, r4, r5, lr}
     992:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     994:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     996:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     998:	f00e fe52 	bl	f640 <strlen>
     99c:	6823      	ldr	r3, [r4, #0]
     99e:	4602      	mov	r2, r0
     9a0:	4629      	mov	r1, r5
     9a2:	685b      	ldr	r3, [r3, #4]
     9a4:	4620      	mov	r0, r4
     9a6:	4798      	blx	r3
     9a8:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9aa:	4620      	mov	r0, r4
     9ac:	f00d fa82 	bl	deb4 <Print::println()>
     9b0:	4428      	add	r0, r5
     9b2:	bd38      	pop	{r3, r4, r5, pc}

000009b4 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9b8:	780d      	ldrb	r5, [r1, #0]
     9ba:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     9bc:	784d      	ldrb	r5, [r1, #1]
     9be:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     9c0:	7889      	ldrb	r1, [r1, #2]
     9c2:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9c4:	7811      	ldrb	r1, [r2, #0]
     9c6:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     9c8:	7851      	ldrb	r1, [r2, #1]
     9ca:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     9cc:	7892      	ldrb	r2, [r2, #2]
     9ce:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9d0:	781a      	ldrb	r2, [r3, #0]
     9d2:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     9d4:	785a      	ldrb	r2, [r3, #1]
     9d6:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     9d8:	789b      	ldrb	r3, [r3, #2]
     9da:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     9de:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9e0:	f89a b000 	ldrb.w	fp, [sl]
     9e4:	f880 b009 	strb.w	fp, [r0, #9]
     9e8:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     9ec:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     9f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     9f4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     9f6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     9f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
     9fa:	9911      	ldr	r1, [sp, #68]	; 0x44
     9fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
     9fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     a00:	f89a b001 	ldrb.w	fp, [sl, #1]
     a04:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     a08:	f89a a002 	ldrb.w	sl, [sl, #2]
     a0c:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a10:	f899 a000 	ldrb.w	sl, [r9]
     a14:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     a18:	f899 a001 	ldrb.w	sl, [r9, #1]
     a1c:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     a20:	f899 9002 	ldrb.w	r9, [r9, #2]
     a24:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a28:	f898 9000 	ldrb.w	r9, [r8]
     a2c:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     a30:	f898 9001 	ldrb.w	r9, [r8, #1]
     a34:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     a38:	f898 8002 	ldrb.w	r8, [r8, #2]
     a3c:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a40:	f89c 8000 	ldrb.w	r8, [ip]
     a44:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     a48:	f89c 8001 	ldrb.w	r8, [ip, #1]
     a4c:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     a50:	f89c c002 	ldrb.w	ip, [ip, #2]
     a54:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a58:	f89e c000 	ldrb.w	ip, [lr]
     a5c:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     a60:	f89e c001 	ldrb.w	ip, [lr, #1]
     a64:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     a68:	f89e e002 	ldrb.w	lr, [lr, #2]
     a6c:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a70:	f897 e000 	ldrb.w	lr, [r7]
     a74:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     a78:	f897 e001 	ldrb.w	lr, [r7, #1]
     a7c:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     a80:	78bf      	ldrb	r7, [r7, #2]
     a82:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a84:	7837      	ldrb	r7, [r6, #0]
     a86:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     a88:	7877      	ldrb	r7, [r6, #1]
     a8a:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     a8c:	78b6      	ldrb	r6, [r6, #2]
     a8e:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a90:	782e      	ldrb	r6, [r5, #0]
     a92:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     a94:	786e      	ldrb	r6, [r5, #1]
     a96:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     a98:	78ad      	ldrb	r5, [r5, #2]
     a9a:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a9e:	780d      	ldrb	r5, [r1, #0]
     aa0:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     aa4:	784d      	ldrb	r5, [r1, #1]
     aa6:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     aaa:	7889      	ldrb	r1, [r1, #2]
     aac:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ab0:	7811      	ldrb	r1, [r2, #0]
     ab2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     ab6:	7851      	ldrb	r1, [r2, #1]
     ab8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     abc:	7892      	ldrb	r2, [r2, #2]
     abe:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     ac4:	7812      	ldrb	r2, [r2, #0]
     ac6:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     aca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     acc:	7852      	ldrb	r2, [r2, #1]
     ace:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     ad2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     ad4:	7892      	ldrb	r2, [r2, #2]
     ad6:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ada:	9a14      	ldr	r2, [sp, #80]	; 0x50
     adc:	7812      	ldrb	r2, [r2, #0]
     ade:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     ae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
     ae4:	7852      	ldrb	r2, [r2, #1]
     ae6:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
     aec:	7892      	ldrb	r2, [r2, #2]
     aee:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     af2:	781a      	ldrb	r2, [r3, #0]
     af4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     af8:	785a      	ldrb	r2, [r3, #1]
     afa:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     afe:	789b      	ldrb	r3, [r3, #2]
     b00:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000b08 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     b0e:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     b10:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     b12:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     b16:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b18:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b1a:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b1c:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b1e:	d1f8      	bne.n	b12 <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b20:	680b      	ldr	r3, [r1, #0]
     b22:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     b24:	ea4f 6813 	mov.w	r8, r3, lsr #24
     b28:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b2c:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b30:	f04f 33ff 	mov.w	r3, #4294967295
     b34:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b36:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b38:	9305      	str	r3, [sp, #20]
     b3a:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b3c:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b40:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b42:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     b46:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b4a:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b4e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b50:	b2f9      	uxtb	r1, r7
     b52:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b56:	9103      	str	r1, [sp, #12]
     b58:	b2e9      	uxtb	r1, r5
     b5a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b5c:	fa5f f18c 	uxtb.w	r1, ip
     b60:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b62:	9907      	ldr	r1, [sp, #28]
     b64:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b66:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b68:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b6c:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b70:	d80c      	bhi.n	b8c <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b72:	9905      	ldr	r1, [sp, #20]
     b74:	458c      	cmp	ip, r1
     b76:	dc07      	bgt.n	b88 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     b78:	290f      	cmp	r1, #15
     b7a:	d005      	beq.n	b88 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     b7c:	3101      	adds	r1, #1
     b7e:	b2c9      	uxtb	r1, r1
     b80:	428b      	cmp	r3, r1
     b82:	9102      	str	r1, [sp, #8]
     b84:	bf38      	it	cc
     b86:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b88:	b259      	sxtb	r1, r3
     b8a:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b8c:	a909      	add	r1, sp, #36	; 0x24
     b8e:	9100      	str	r1, [sp, #0]
     b90:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b92:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     b96:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     b9a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b9e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     ba2:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     ba6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     baa:	f00a fedb 	bl	b964 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     bae:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     bb0:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bb4:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     bb8:	46d1      	mov	r9, sl
     bba:	d1bf      	bne.n	b3c <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     bbc:	9806      	ldr	r0, [sp, #24]
     bbe:	b00b      	add	sp, #44	; 0x2c
     bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000bc4 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     bc4:	4b48      	ldr	r3, [pc, #288]	; (ce8 <updatePaletteIndex(LEDStruct&)+0x124>)
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	2b00      	cmp	r3, #0
     bca:	f000 808b 	beq.w	ce4 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     bce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bd2:	b09b      	sub	sp, #108	; 0x6c
     bd4:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     bd8:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     bda:	2300      	movs	r3, #0
     bdc:	4a43      	ldr	r2, [pc, #268]	; (cec <updatePaletteIndex(LEDStruct&)+0x128>)
     bde:	9307      	str	r3, [sp, #28]
     be0:	f8df 910c 	ldr.w	r9, [pc, #268]	; cf0 <updatePaletteIndex(LEDStruct&)+0x12c>
     be4:	9009      	str	r0, [sp, #36]	; 0x24
     be6:	f200 2327 	addw	r3, r0, #551	; 0x227
     bea:	9208      	str	r2, [sp, #32]
     bec:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     bee:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     bf0:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     bf4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     bf6:	3701      	adds	r7, #1
        } while ( u.index != 255);
     bf8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     bfa:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     bfc:	d1f8      	bne.n	bf0 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     bfe:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     c02:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c04:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c08:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c0c:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c0e:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     c12:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     c16:	2400      	movs	r4, #0
     c18:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c1a:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c1e:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     c22:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c26:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     c2a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     c2c:	b2f1      	uxtb	r1, r6
     c2e:	f3c5 6507 	ubfx	r5, r5, #24, #8
     c32:	9103      	str	r1, [sp, #12]
     c34:	b2e9      	uxtb	r1, r5
     c36:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     c38:	fa5f f18c 	uxtb.w	r1, ip
     c3c:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     c3e:	9906      	ldr	r1, [sp, #24]
     c40:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c42:	aa0c      	add	r2, sp, #48	; 0x30
     c44:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     c46:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c4a:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     c4e:	d80c      	bhi.n	c6a <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     c50:	9905      	ldr	r1, [sp, #20]
     c52:	458c      	cmp	ip, r1
     c54:	dc07      	bgt.n	c66 <updatePaletteIndex(LEDStruct&)+0xa2>
     c56:	290f      	cmp	r1, #15
     c58:	d005      	beq.n	c66 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     c5a:	3101      	adds	r1, #1
     c5c:	b2c9      	uxtb	r1, r1
     c5e:	428b      	cmp	r3, r1
     c60:	9102      	str	r1, [sp, #8]
     c62:	bf38      	it	cc
     c64:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     c66:	b259      	sxtb	r1, r3
     c68:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c6a:	a90d      	add	r1, sp, #52	; 0x34
     c6c:	9100      	str	r1, [sp, #0]
     c6e:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c70:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     c74:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     c78:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c7c:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     c80:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     c84:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     c88:	f00a fe6c 	bl	b964 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     c8c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c8e:	46d3      	mov	fp, sl
        g = rhs.g;
     c90:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     c94:	f8dd 8010 	ldr.w	r8, [sp, #16]
     c98:	d1bf      	bne.n	c1a <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     c9c:	aa0e      	add	r2, sp, #56	; 0x38
     c9e:	4293      	cmp	r3, r2
     ca0:	d018      	beq.n	cd4 <updatePaletteIndex(LEDStruct&)+0x110>
     ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ca4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     ca6:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     caa:	e001      	b.n	cb0 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     cac:	42a3      	cmp	r3, r4
     cae:	d011      	beq.n	cd4 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     cb0:	f812 1b01 	ldrb.w	r1, [r2], #1
     cb4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     cb8:	4288      	cmp	r0, r1
     cba:	d0f7      	beq.n	cac <updatePaletteIndex(LEDStruct&)+0xe8>
     cbc:	4b0a      	ldr	r3, [pc, #40]	; (ce8 <updatePaletteIndex(LEDStruct&)+0x124>)
     cbe:	9a07      	ldr	r2, [sp, #28]
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	3201      	adds	r2, #1
     cc4:	4293      	cmp	r3, r2
     cc6:	9207      	str	r2, [sp, #28]
     cc8:	dd09      	ble.n	cde <updatePaletteIndex(LEDStruct&)+0x11a>
     cca:	9b08      	ldr	r3, [sp, #32]
     ccc:	f853 9f04 	ldr.w	r9, [r3, #4]!
     cd0:	9308      	str	r3, [sp, #32]
     cd2:	e78c      	b.n	bee <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cd6:	f89d 201c 	ldrb.w	r2, [sp, #28]
     cda:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     cde:	b01b      	add	sp, #108	; 0x6c
     ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ce4:	4770      	bx	lr
     ce6:	bf00      	nop
     ce8:	1fff8758 	.word	0x1fff8758
     cec:	000116b0 	.word	0x000116b0
     cf0:	00012254 	.word	0x00012254

00000cf4 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     cf8:	4d42      	ldr	r5, [pc, #264]	; (e04 <initialize()+0x110>)
		}
	}
}

// Initialization function
void initialize() {
     cfa:	b082      	sub	sp, #8
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     cfc:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     cfe:	2400      	movs	r4, #0
     d00:	4628      	mov	r0, r5
     d02:	2196      	movs	r1, #150	; 0x96
     d04:	f88d 4004 	strb.w	r4, [sp, #4]
     d08:	f88d 4005 	strb.w	r4, [sp, #5]
     d0c:	f88d 4006 	strb.w	r4, [sp, #6]
     d10:	f00a fdf8 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     d14:	493c      	ldr	r1, [pc, #240]	; (e08 <initialize()+0x114>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     d16:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     d1a:	f505 70e4 	add.w	r0, r5, #456	; 0x1c8
     d1e:	f7ff fef3 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     d22:	493a      	ldr	r1, [pc, #232]	; (e0c <initialize()+0x118>)
     d24:	f505 70fc 	add.w	r0, r5, #504	; 0x1f8
     d28:	f7ff feee 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     d2c:	4628      	mov	r0, r5
     d2e:	f7ff ff49 	bl	bc4 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     d32:	4b37      	ldr	r3, [pc, #220]	; (e10 <initialize()+0x11c>)
     d34:	4a37      	ldr	r2, [pc, #220]	; (e14 <initialize()+0x120>)
     d36:	7818      	ldrb	r0, [r3, #0]
     d38:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
     d3c:	4623      	mov	r3, r4
     d3e:	e001      	b.n	d44 <initialize()+0x50>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     d40:	2b22      	cmp	r3, #34	; 0x22
     d42:	d008      	beq.n	d56 <initialize()+0x62>
		if (leds.mode_name == ModeList[i]) {
     d44:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     d48:	4281      	cmp	r1, r0
     d4a:	b2dc      	uxtb	r4, r3
     d4c:	f103 0301 	add.w	r3, r3, #1
     d50:	d1f6      	bne.n	d40 <initialize()+0x4c>
			leds.mode_number = i;
     d52:	f885 422b 	strb.w	r4, [r5, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d56:	4e30      	ldr	r6, [pc, #192]	; (e18 <initialize()+0x124>)
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; e2c <initialize()+0x138>
	curr_over_leds.array_type		= CURR_OVERLAY;
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d5c:	4f2f      	ldr	r7, [pc, #188]	; (e1c <initialize()+0x128>)
     d5e:	2400      	movs	r4, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d60:	aa01      	add	r2, sp, #4
     d62:	4630      	mov	r0, r6
     d64:	2196      	movs	r1, #150	; 0x96
     d66:	f88d 4004 	strb.w	r4, [sp, #4]
     d6a:	f88d 4005 	strb.w	r4, [sp, #5]
     d6e:	f88d 4006 	strb.w	r4, [sp, #6]
     d72:	f00a fdc7 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     d76:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     d78:	f506 70e4 	add.w	r0, r6, #456	; 0x1c8
     d7c:	4928      	ldr	r1, [pc, #160]	; (e20 <initialize()+0x12c>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     d7e:	f886 31c6 	strb.w	r3, [r6, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     d82:	f7ff fec1 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     d86:	4927      	ldr	r1, [pc, #156]	; (e24 <initialize()+0x130>)
     d88:	f506 70fc 	add.w	r0, r6, #504	; 0x1f8
     d8c:	f7ff febc 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     d90:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
     d94:	f886 322b 	strb.w	r3, [r6, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     d98:	4630      	mov	r0, r6
     d9a:	f7ff ff13 	bl	bc4 <updatePaletteIndex(LEDStruct&)>

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d9e:	aa01      	add	r2, sp, #4
     da0:	4640      	mov	r0, r8
     da2:	2196      	movs	r1, #150	; 0x96
     da4:	f88d 4004 	strb.w	r4, [sp, #4]
     da8:	f88d 4005 	strb.w	r4, [sp, #5]
     dac:	f88d 4006 	strb.w	r4, [sp, #6]
     db0:	f00a fda8 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
	curr_over_leds.array_type		= CURR_OVERLAY;
     db4:	2302      	movs	r3, #2
	curr_over_leds.current_palette	= cequal_gp;
     db6:	f508 70e4 	add.w	r0, r8, #456	; 0x1c8
     dba:	491b      	ldr	r1, [pc, #108]	; (e28 <initialize()+0x134>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_over_leds.array_type		= CURR_OVERLAY;
     dbc:	f888 31c6 	strb.w	r3, [r8, #454]	; 0x1c6
	curr_over_leds.current_palette	= cequal_gp;
     dc0:	f7ff fea2 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	curr_over_leds.target_palette	= cequal_gp;
     dc4:	f508 70fc 	add.w	r0, r8, #504	; 0x1f8
     dc8:	4917      	ldr	r1, [pc, #92]	; (e28 <initialize()+0x134>)
     dca:	f7ff fe9d 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     dce:	aa01      	add	r2, sp, #4
     dd0:	4638      	mov	r0, r7
     dd2:	2196      	movs	r1, #150	; 0x96
     dd4:	f88d 4004 	strb.w	r4, [sp, #4]
     dd8:	f88d 4005 	strb.w	r4, [sp, #5]
     ddc:	f88d 4006 	strb.w	r4, [sp, #6]
     de0:	f00a fd90 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
	next_over_leds.array_type = NEXT_OVERLAY;
     de4:	2303      	movs	r3, #3
	next_over_leds.current_palette = cequal_gp;
     de6:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
     dea:	490f      	ldr	r1, [pc, #60]	; (e28 <initialize()+0x134>)
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
	next_over_leds.array_type = NEXT_OVERLAY;
     dec:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
	next_over_leds.current_palette = cequal_gp;
     df0:	f7ff fe8a 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	next_over_leds.target_palette = cequal_gp;
     df4:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
     df8:	490b      	ldr	r1, [pc, #44]	; (e28 <initialize()+0x134>)
     dfa:	f7ff fe85 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
}
     dfe:	b002      	add	sp, #8
     e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e04:	1fffa700 	.word	0x1fffa700
     e08:	000126a0 	.word	0x000126a0
     e0c:	00011cf8 	.word	0x00011cf8
     e10:	1fff8751 	.word	0x1fff8751
     e14:	1fff8727 	.word	0x1fff8727
     e18:	1fff8cb8 	.word	0x1fff8cb8
     e1c:	1fff9ea0 	.word	0x1fff9ea0
     e20:	00012470 	.word	0x00012470
     e24:	00012430 	.word	0x00012430
     e28:	00012518 	.word	0x00012518
     e2c:	1fff962c 	.word	0x1fff962c

00000e30 <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     e30:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e32:	2112      	movs	r1, #18
     e34:	b082      	sub	sp, #8
     e36:	4834      	ldr	r0, [pc, #208]	; (f08 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e38:	4c34      	ldr	r4, [pc, #208]	; (f0c <global_debug()+0xdc>)
     e3a:	f00c fe37 	bl	daac <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     e3e:	4b34      	ldr	r3, [pc, #208]	; (f10 <global_debug()+0xe0>)
     e40:	4620      	mov	r0, r4
     e42:	7819      	ldrb	r1, [r3, #0]
     e44:	f00d f886 	bl	df54 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e48:	4620      	mov	r0, r4
     e4a:	f00d f833 	bl	deb4 <Print::println()>
     e4e:	2111      	movs	r1, #17
     e50:	4830      	ldr	r0, [pc, #192]	; (f14 <global_debug()+0xe4>)
     e52:	f00c fe2b 	bl	daac <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     e56:	4b30      	ldr	r3, [pc, #192]	; (f18 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e58:	4620      	mov	r0, r4
     e5a:	7819      	ldrb	r1, [r3, #0]
     e5c:	f00d f87a 	bl	df54 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e60:	4620      	mov	r0, r4
     e62:	f00d f827 	bl	deb4 <Print::println()>
     e66:	2115      	movs	r1, #21
     e68:	482c      	ldr	r0, [pc, #176]	; (f1c <global_debug()+0xec>)
     e6a:	f00c fe1f 	bl	daac <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     e6e:	4b2c      	ldr	r3, [pc, #176]	; (f20 <global_debug()+0xf0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e70:	4620      	mov	r0, r4
     e72:	7819      	ldrb	r1, [r3, #0]
     e74:	f00d f86e 	bl	df54 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e78:	4620      	mov	r0, r4
     e7a:	f00d f81b 	bl	deb4 <Print::println()>
     e7e:	2111      	movs	r1, #17
     e80:	4828      	ldr	r0, [pc, #160]	; (f24 <global_debug()+0xf4>)
     e82:	f00c fe13 	bl	daac <usb_serial_write>
	Serial.print("(T) Mode Timer:\t\t");
	Serial.println(mode_change_time);
     e86:	4b28      	ldr	r3, [pc, #160]	; (f28 <global_debug()+0xf8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e88:	4620      	mov	r0, r4
     e8a:	8819      	ldrh	r1, [r3, #0]
     e8c:	f00d f862 	bl	df54 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e90:	4620      	mov	r0, r4
     e92:	f00d f80f 	bl	deb4 <Print::println()>
     e96:	2114      	movs	r1, #20
     e98:	4824      	ldr	r0, [pc, #144]	; (f2c <global_debug()+0xfc>)
     e9a:	f00c fe07 	bl	daac <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     e9e:	4b24      	ldr	r3, [pc, #144]	; (f30 <global_debug()+0x100>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ea0:	4620      	mov	r0, r4
     ea2:	8819      	ldrh	r1, [r3, #0]
     ea4:	f00d f856 	bl	df54 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ea8:	4620      	mov	r0, r4
     eaa:	f00d f803 	bl	deb4 <Print::println()>
     eae:	210f      	movs	r1, #15
     eb0:	4820      	ldr	r0, [pc, #128]	; (f34 <global_debug()+0x104>)
     eb2:	f00c fdfb 	bl	daac <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     eb6:	4b20      	ldr	r3, [pc, #128]	; (f38 <global_debug()+0x108>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     eb8:	4620      	mov	r0, r4
     eba:	8819      	ldrh	r1, [r3, #0]
     ebc:	f00d f84a 	bl	df54 <Print::print(long)>
     ec0:	2102      	movs	r1, #2
     ec2:	481e      	ldr	r0, [pc, #120]	; (f3c <global_debug()+0x10c>)
     ec4:	f00c fdf2 	bl	daac <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     ec8:	4b1d      	ldr	r3, [pc, #116]	; (f40 <global_debug()+0x110>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     eca:	220a      	movs	r2, #10
     ecc:	7819      	ldrb	r1, [r3, #0]
     ece:	4620      	mov	r0, r4
     ed0:	2300      	movs	r3, #0
     ed2:	f00c ffff 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ed6:	2101      	movs	r1, #1
     ed8:	481a      	ldr	r0, [pc, #104]	; (f44 <global_debug()+0x114>)
     eda:	f00c fde7 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ede:	4620      	mov	r0, r4
     ee0:	f00c ffe8 	bl	deb4 <Print::println()>
     ee4:	210e      	movs	r1, #14
     ee6:	4818      	ldr	r0, [pc, #96]	; (f48 <global_debug()+0x118>)
     ee8:	f00c fde0 	bl	daac <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eec:	4b17      	ldr	r3, [pc, #92]	; (f4c <global_debug()+0x11c>)
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	9301      	str	r3, [sp, #4]
	return ret;
     ef2:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     ef4:	2300      	movs	r3, #0
     ef6:	220a      	movs	r2, #10
     ef8:	4620      	mov	r0, r4
     efa:	f00c ffeb 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     efe:	4620      	mov	r0, r4
     f00:	f00c ffd8 	bl	deb4 <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     f04:	b002      	add	sp, #8
     f06:	bd10      	pop	{r4, pc}
     f08:	0000f888 	.word	0x0000f888
     f0c:	1fff8790 	.word	0x1fff8790
     f10:	1fff8787 	.word	0x1fff8787
     f14:	0000f89c 	.word	0x0000f89c
     f18:	1fff8752 	.word	0x1fff8752
     f1c:	0000f8b0 	.word	0x0000f8b0
     f20:	1fff8722 	.word	0x1fff8722
     f24:	0000f8c8 	.word	0x0000f8c8
     f28:	1fff8720 	.word	0x1fff8720
     f2c:	0000f8dc 	.word	0x0000f8dc
     f30:	1fff8cb4 	.word	0x1fff8cb4
     f34:	0000f8f4 	.word	0x0000f8f4
     f38:	1fff9626 	.word	0x1fff9626
     f3c:	0000f904 	.word	0x0000f904
     f40:	1fff9581 	.word	0x1fff9581
     f44:	0000f908 	.word	0x0000f908
     f48:	0000f90c 	.word	0x0000f90c
     f4c:	1fffb19c 	.word	0x1fffb19c

00000f50 <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f50:	491e      	ldr	r1, [pc, #120]	; (fcc <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     f52:	481f      	ldr	r0, [pc, #124]	; (fd0 <begin_transition()+0x80>)
     f54:	880b      	ldrh	r3, [r1, #0]
     f56:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f5e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     f62:	3319      	adds	r3, #25
     f64:	b29b      	uxth	r3, r3
     f66:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f6a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     f6e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f72:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f76:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f78:	b2db      	uxtb	r3, r3
     f7a:	b292      	uxth	r2, r2
     f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     f80:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f82:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f84:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     f88:	4e12      	ldr	r6, [pc, #72]	; (fd4 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     f8a:	4d13      	ldr	r5, [pc, #76]	; (fd8 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f8c:	5cf3      	ldrb	r3, [r6, r3]
     f8e:	4c13      	ldr	r4, [pc, #76]	; (fdc <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f90:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     f92:	b2ff      	uxtb	r7, r7
     f94:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     f98:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     f9a:	123f      	asrs	r7, r7, #8
     f9c:	3703      	adds	r7, #3
	switch (transition_type) {
     f9e:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fa0:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fa2:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fa4:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     fa6:	d00c      	beq.n	fc2 <begin_transition()+0x72>
     fa8:	d306      	bcc.n	fb8 <begin_transition()+0x68>
     faa:	2b02      	cmp	r3, #2
     fac:	d102      	bne.n	fb4 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     fae:	4b0c      	ldr	r3, [pc, #48]	; (fe0 <begin_transition()+0x90>)
     fb0:	2200      	movs	r2, #0
     fb2:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fb4:	bcf0      	pop	{r4, r5, r6, r7}
     fb6:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     fb8:	4b0a      	ldr	r3, [pc, #40]	; (fe4 <begin_transition()+0x94>)
     fba:	2200      	movs	r2, #0
     fbc:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fbe:	bcf0      	pop	{r4, r5, r6, r7}
     fc0:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     fc2:	4b07      	ldr	r3, [pc, #28]	; (fe0 <begin_transition()+0x90>)
     fc4:	224a      	movs	r2, #74	; 0x4a
     fc6:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fc8:	bcf0      	pop	{r4, r5, r6, r7}
     fca:	4770      	bx	lr
     fcc:	1fff8788 	.word	0x1fff8788
     fd0:	1fff9524 	.word	0x1fff9524
     fd4:	1fff8724 	.word	0x1fff8724
     fd8:	1fff9e8d 	.word	0x1fff9e8d
     fdc:	1fff9538 	.word	0x1fff9538
     fe0:	1fff9560 	.word	0x1fff9560
     fe4:	1fff8cb6 	.word	0x1fff8cb6

00000fe8 <LEDStruct::operator=(LEDStruct const&)>:
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fea:	1cca      	adds	r2, r1, #3
     fec:	4604      	mov	r4, r0
     fee:	1cc3      	adds	r3, r0, #3
     ff0:	460d      	mov	r5, r1
     ff2:	f200 10c5 	addw	r0, r0, #453	; 0x1c5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ff6:	f812 1c03 	ldrb.w	r1, [r2, #-3]
     ffa:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
     ffe:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    1002:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    1006:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    100a:	f803 1c01 	strb.w	r1, [r3, #-1]
    100e:	3303      	adds	r3, #3
    1010:	4298      	cmp	r0, r3
    1012:	f102 0203 	add.w	r2, r2, #3
    1016:	d1ee      	bne.n	ff6 <LEDStruct::operator=(LEDStruct const&)+0xe>
    1018:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    101c:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
    1020:	f895 31c3 	ldrb.w	r3, [r5, #451]	; 0x1c3
    1024:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
    1028:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    102c:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
    1030:	f895 11c5 	ldrb.w	r1, [r5, #453]	; 0x1c5
    1034:	f895 21c6 	ldrb.w	r2, [r5, #454]	; 0x1c6
    1038:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
    103c:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
    1040:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
    1044:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    1048:	2230      	movs	r2, #48	; 0x30
    104a:	f505 71e4 	add.w	r1, r5, #456	; 0x1c8
    104e:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
    1052:	f00e fa07 	bl	f464 <memmove>
    1056:	2230      	movs	r2, #48	; 0x30
    1058:	f505 71fc 	add.w	r1, r5, #504	; 0x1f8
    105c:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    1060:	f00e fa00 	bl	f464 <memmove>
    1064:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
    1068:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
    106c:	f895 3229 	ldrb.w	r3, [r5, #553]	; 0x229
    1070:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    1074:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
    1078:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    107c:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
    1080:	f884 322b 	strb.w	r3, [r4, #555]	; 0x22b
    1084:	f895 122c 	ldrb.w	r1, [r5, #556]	; 0x22c
    1088:	f895 222d 	ldrb.w	r2, [r5, #557]	; 0x22d
    108c:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
    1090:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    1094:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    1098:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
    109c:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    10a0:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    10a4:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    10a8:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    10ac:	f895 3231 	ldrb.w	r3, [r5, #561]	; 0x231
    10b0:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
    10b4:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
    10b8:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    10bc:	f895 3233 	ldrb.w	r3, [r5, #563]	; 0x233
    10c0:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    10c4:	f895 2235 	ldrb.w	r2, [r5, #565]	; 0x235
    10c8:	f895 3236 	ldrb.w	r3, [r5, #566]	; 0x236
    10cc:	f895 1234 	ldrb.w	r1, [r5, #564]	; 0x234
    10d0:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    10d4:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    10d8:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
    10dc:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
    10e0:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    10e4:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
    10e8:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    10ec:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
    10f0:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    10f4:	f895 323a 	ldrb.w	r3, [r5, #570]	; 0x23a
    10f8:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
    10fc:	f205 223e 	addw	r2, r5, #574	; 0x23e
    1100:	f204 233e 	addw	r3, r4, #574	; 0x23e
    1104:	f204 207a 	addw	r0, r4, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1108:	f812 1c03 	ldrb.w	r1, [r2, #-3]
    110c:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
    1110:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    1114:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    1118:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    111c:	f803 1c01 	strb.w	r1, [r3, #-1]
    1120:	3303      	adds	r3, #3
    1122:	4298      	cmp	r0, r3
    1124:	f102 0203 	add.w	r2, r2, #3
    1128:	d1ee      	bne.n	1108 <LEDStruct::operator=(LEDStruct const&)+0x120>
    112a:	f895 3277 	ldrb.w	r3, [r5, #631]	; 0x277
    112e:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
    1132:	f895 3278 	ldrb.w	r3, [r5, #632]	; 0x278
    1136:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    113a:	f895 3279 	ldrb.w	r3, [r5, #633]	; 0x279
    113e:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    1142:	f895 327a 	ldrb.w	r3, [r5, #634]	; 0x27a
    1146:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
    114a:	f895 327b 	ldrb.w	r3, [r5, #635]	; 0x27b
    114e:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
    1152:	f895 327c 	ldrb.w	r3, [r5, #636]	; 0x27c
    1156:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
    115a:	f895 327d 	ldrb.w	r3, [r5, #637]	; 0x27d
    115e:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
    1162:	f895 327e 	ldrb.w	r3, [r5, #638]	; 0x27e
    1166:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
    116a:	f895 327f 	ldrb.w	r3, [r5, #639]	; 0x27f
    116e:	f884 327f 	strb.w	r3, [r4, #639]	; 0x27f
    1172:	f205 227f 	addw	r2, r5, #639	; 0x27f
    1176:	f504 7320 	add.w	r3, r4, #640	; 0x280
    117a:	f204 20cb 	addw	r0, r4, #715	; 0x2cb
    117e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1182:	f803 1b01 	strb.w	r1, [r3], #1
    1186:	4283      	cmp	r3, r0
    1188:	d1f9      	bne.n	117e <LEDStruct::operator=(LEDStruct const&)+0x196>
    118a:	f205 22ca 	addw	r2, r5, #714	; 0x2ca
    118e:	f204 3016 	addw	r0, r4, #790	; 0x316
    1192:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1196:	f803 1b01 	strb.w	r1, [r3], #1
    119a:	4283      	cmp	r3, r0
    119c:	d1f9      	bne.n	1192 <LEDStruct::operator=(LEDStruct const&)+0x1aa>
    119e:	f895 3316 	ldrb.w	r3, [r5, #790]	; 0x316
    11a2:	f884 3316 	strb.w	r3, [r4, #790]	; 0x316
    11a6:	f895 3317 	ldrb.w	r3, [r5, #791]	; 0x317
    11aa:	f884 3317 	strb.w	r3, [r4, #791]	; 0x317
    11ae:	f895 2318 	ldrb.w	r2, [r5, #792]	; 0x318
    11b2:	f895 3319 	ldrb.w	r3, [r5, #793]	; 0x319
    11b6:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
    11ba:	f884 2318 	strb.w	r2, [r4, #792]	; 0x318
    11be:	f895 331a 	ldrb.w	r3, [r5, #794]	; 0x31a
    11c2:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
    11c6:	f895 331b 	ldrb.w	r3, [r5, #795]	; 0x31b
    11ca:	f884 331b 	strb.w	r3, [r4, #795]	; 0x31b
    11ce:	f8b5 131c 	ldrh.w	r1, [r5, #796]	; 0x31c
    11d2:	f8b5 231e 	ldrh.w	r2, [r5, #798]	; 0x31e
    11d6:	f8b5 3320 	ldrh.w	r3, [r5, #800]	; 0x320
    11da:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
    11de:	f8a4 131c 	strh.w	r1, [r4, #796]	; 0x31c
    11e2:	f8a4 231e 	strh.w	r2, [r4, #798]	; 0x31e
    11e6:	f895 3322 	ldrb.w	r3, [r5, #802]	; 0x322
    11ea:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
    11ee:	f895 3323 	ldrb.w	r3, [r5, #803]	; 0x323
    11f2:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
    11f6:	f895 3324 	ldrb.w	r3, [r5, #804]	; 0x324
    11fa:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
    11fe:	f895 3325 	ldrb.w	r3, [r5, #805]	; 0x325
    1202:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
    1206:	f895 3326 	ldrb.w	r3, [r5, #806]	; 0x326
    120a:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
    120e:	f895 3327 	ldrb.w	r3, [r5, #807]	; 0x327
    1212:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
    1216:	f8b5 3328 	ldrh.w	r3, [r5, #808]	; 0x328
    121a:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    121e:	f8b5 032a 	ldrh.w	r0, [r5, #810]	; 0x32a
    1222:	f8b5 132c 	ldrh.w	r1, [r5, #812]	; 0x32c
    1226:	f8b5 232e 	ldrh.w	r2, [r5, #814]	; 0x32e
    122a:	f8b5 3330 	ldrh.w	r3, [r5, #816]	; 0x330
    122e:	f8b5 7332 	ldrh.w	r7, [r5, #818]	; 0x332
    1232:	f8b5 6334 	ldrh.w	r6, [r5, #820]	; 0x334
    1236:	f8a4 032a 	strh.w	r0, [r4, #810]	; 0x32a
    123a:	f8b5 0336 	ldrh.w	r0, [r5, #822]	; 0x336
    123e:	f8a4 132c 	strh.w	r1, [r4, #812]	; 0x32c
    1242:	f8b5 1338 	ldrh.w	r1, [r5, #824]	; 0x338
    1246:	f8a4 232e 	strh.w	r2, [r4, #814]	; 0x32e
    124a:	f8b5 233a 	ldrh.w	r2, [r5, #826]	; 0x33a
    124e:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    1252:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    1256:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    125a:	f8a4 1338 	strh.w	r1, [r4, #824]	; 0x338
    125e:	f8a4 233a 	strh.w	r2, [r4, #826]	; 0x33a
    1262:	f8a4 7332 	strh.w	r7, [r4, #818]	; 0x332
    1266:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
    126a:	f8a4 0336 	strh.w	r0, [r4, #822]	; 0x336
    126e:	f895 333e 	ldrb.w	r3, [r5, #830]	; 0x33e
    1272:	f884 333e 	strb.w	r3, [r4, #830]	; 0x33e
    1276:	f895 333f 	ldrb.w	r3, [r5, #831]	; 0x33f
    127a:	f884 333f 	strb.w	r3, [r4, #831]	; 0x33f
    127e:	f895 3340 	ldrb.w	r3, [r5, #832]	; 0x340
    1282:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
    1286:	f895 3341 	ldrb.w	r3, [r5, #833]	; 0x341
    128a:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
    128e:	f895 3342 	ldrb.w	r3, [r5, #834]	; 0x342
    1292:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
    1296:	f895 3343 	ldrb.w	r3, [r5, #835]	; 0x343
    129a:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
    129e:	f895 3344 	ldrb.w	r3, [r5, #836]	; 0x344
    12a2:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
    12a6:	f895 3345 	ldrb.w	r3, [r5, #837]	; 0x345
    12aa:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
    12ae:	f895 3346 	ldrb.w	r3, [r5, #838]	; 0x346
    12b2:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    12b6:	f895 3347 	ldrb.w	r3, [r5, #839]	; 0x347
    12ba:	f884 3347 	strb.w	r3, [r4, #839]	; 0x347
    12be:	f895 3348 	ldrb.w	r3, [r5, #840]	; 0x348
    12c2:	f884 3348 	strb.w	r3, [r4, #840]	; 0x348
    12c6:	f895 3349 	ldrb.w	r3, [r5, #841]	; 0x349
    12ca:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349
    12ce:	f895 334a 	ldrb.w	r3, [r5, #842]	; 0x34a
    12d2:	f884 334a 	strb.w	r3, [r4, #842]	; 0x34a
    12d6:	f895 334b 	ldrb.w	r3, [r5, #843]	; 0x34b
    12da:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
    12de:	f895 334c 	ldrb.w	r3, [r5, #844]	; 0x34c
    12e2:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    12e6:	f895 334d 	ldrb.w	r3, [r5, #845]	; 0x34d
    12ea:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
    12ee:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    12f2:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    12f6:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
    12fa:	f884 334f 	strb.w	r3, [r4, #847]	; 0x34f
    12fe:	f895 3350 	ldrb.w	r3, [r5, #848]	; 0x350
    1302:	f884 3350 	strb.w	r3, [r4, #848]	; 0x350
    1306:	f895 3351 	ldrb.w	r3, [r5, #849]	; 0x351
    130a:	f884 3351 	strb.w	r3, [r4, #849]	; 0x351
    130e:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    1312:	f884 3352 	strb.w	r3, [r4, #850]	; 0x352
    1316:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    131a:	f884 3353 	strb.w	r3, [r4, #851]	; 0x353
    131e:	f895 1354 	ldrb.w	r1, [r5, #852]	; 0x354
    1322:	f8d5 2358 	ldr.w	r2, [r5, #856]	; 0x358
    1326:	f895 335c 	ldrb.w	r3, [r5, #860]	; 0x35c
    132a:	f884 335c 	strb.w	r3, [r4, #860]	; 0x35c
    132e:	f884 1354 	strb.w	r1, [r4, #852]	; 0x354
    1332:	f8c4 2358 	str.w	r2, [r4, #856]	; 0x358
    1336:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
    133a:	f884 335d 	strb.w	r3, [r4, #861]	; 0x35d
    133e:	f504 7258 	add.w	r2, r4, #864	; 0x360
    1342:	f505 7157 	add.w	r1, r5, #860	; 0x35c
    1346:	f504 638a 	add.w	r3, r4, #1104	; 0x450
    134a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    134e:	f842 0b04 	str.w	r0, [r2], #4
    1352:	4293      	cmp	r3, r2
    1354:	d1f9      	bne.n	134a <LEDStruct::operator=(LEDStruct const&)+0x362>
    1356:	f205 424c 	addw	r2, r5, #1100	; 0x44c
    135a:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
    135e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1362:	f843 1b04 	str.w	r1, [r3], #4
    1366:	4283      	cmp	r3, r0
    1368:	d1f9      	bne.n	135e <LEDStruct::operator=(LEDStruct const&)+0x376>
    136a:	f205 523f 	addw	r2, r5, #1343	; 0x53f
    136e:	f204 507c 	addw	r0, r4, #1404	; 0x57c
    1372:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1376:	f803 1b01 	strb.w	r1, [r3], #1
    137a:	4283      	cmp	r3, r0
    137c:	d1f9      	bne.n	1372 <LEDStruct::operator=(LEDStruct const&)+0x38a>
    137e:	f505 61af 	add.w	r1, r5, #1400	; 0x578
    1382:	f204 626c 	addw	r2, r4, #1644	; 0x66c
    1386:	f851 0f04 	ldr.w	r0, [r1, #4]!
    138a:	f843 0b04 	str.w	r0, [r3], #4
    138e:	429a      	cmp	r2, r3
    1390:	d1f9      	bne.n	1386 <LEDStruct::operator=(LEDStruct const&)+0x39e>
    1392:	4613      	mov	r3, r2
    1394:	f204 705c 	addw	r0, r4, #1884	; 0x75c
    1398:	f505 62cd 	add.w	r2, r5, #1640	; 0x668
    139c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13a0:	f843 1b04 	str.w	r1, [r3], #4
    13a4:	4298      	cmp	r0, r3
    13a6:	d1f9      	bne.n	139c <LEDStruct::operator=(LEDStruct const&)+0x3b4>
    13a8:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    13ac:	f884 375c 	strb.w	r3, [r4, #1884]	; 0x75c
    13b0:	f895 375d 	ldrb.w	r3, [r5, #1885]	; 0x75d
    13b4:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    13b8:	f895 375e 	ldrb.w	r3, [r5, #1886]	; 0x75e
    13bc:	f884 375e 	strb.w	r3, [r4, #1886]	; 0x75e
    13c0:	f8b5 1760 	ldrh.w	r1, [r5, #1888]	; 0x760
    13c4:	f8b5 2762 	ldrh.w	r2, [r5, #1890]	; 0x762
    13c8:	f8b5 3764 	ldrh.w	r3, [r5, #1892]	; 0x764
    13cc:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764
    13d0:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
    13d4:	f8a4 2762 	strh.w	r2, [r4, #1890]	; 0x762
    13d8:	f895 3766 	ldrb.w	r3, [r5, #1894]	; 0x766
    13dc:	f884 3766 	strb.w	r3, [r4, #1894]	; 0x766
    13e0:	f895 3767 	ldrb.w	r3, [r5, #1895]	; 0x767
    13e4:	f884 3767 	strb.w	r3, [r4, #1895]	; 0x767
    13e8:	f895 3768 	ldrb.w	r3, [r5, #1896]	; 0x768
    13ec:	f884 3768 	strb.w	r3, [r4, #1896]	; 0x768
    13f0:	f895 3769 	ldrb.w	r3, [r5, #1897]	; 0x769
    13f4:	f884 3769 	strb.w	r3, [r4, #1897]	; 0x769
    13f8:	f895 376a 	ldrb.w	r3, [r5, #1898]	; 0x76a
    13fc:	f884 376a 	strb.w	r3, [r4, #1898]	; 0x76a
    1400:	f505 61ed 	add.w	r1, r5, #1896	; 0x768
    1404:	f204 736c 	addw	r3, r4, #1900	; 0x76c
    1408:	f204 728c 	addw	r2, r4, #1932	; 0x78c
    140c:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1410:	f843 0b04 	str.w	r0, [r3], #4
    1414:	429a      	cmp	r2, r3
    1416:	d1f9      	bne.n	140c <LEDStruct::operator=(LEDStruct const&)+0x424>
    1418:	f505 61f1 	add.w	r1, r5, #1928	; 0x788
    141c:	f204 73ac 	addw	r3, r4, #1964	; 0x7ac
    1420:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1424:	f842 0b04 	str.w	r0, [r2], #4
    1428:	4293      	cmp	r3, r2
    142a:	d1f9      	bne.n	1420 <LEDStruct::operator=(LEDStruct const&)+0x438>
    142c:	f505 62f5 	add.w	r2, r5, #1960	; 0x7a8
    1430:	f204 70cc 	addw	r0, r4, #1996	; 0x7cc
    1434:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1438:	f843 1b04 	str.w	r1, [r3], #4
    143c:	4283      	cmp	r3, r0
    143e:	d1f9      	bne.n	1434 <LEDStruct::operator=(LEDStruct const&)+0x44c>
    1440:	f505 62f9 	add.w	r2, r5, #1992	; 0x7c8
    1444:	f204 70ec 	addw	r0, r4, #2028	; 0x7ec
    1448:	f852 1f04 	ldr.w	r1, [r2, #4]!
    144c:	f843 1b04 	str.w	r1, [r3], #4
    1450:	4283      	cmp	r3, r0
    1452:	d1f9      	bne.n	1448 <LEDStruct::operator=(LEDStruct const&)+0x460>
    1454:	f505 62fd 	add.w	r2, r5, #2024	; 0x7e8
    1458:	f604 000c 	addw	r0, r4, #2060	; 0x80c
    145c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1460:	f843 1b04 	str.w	r1, [r3], #4
    1464:	4283      	cmp	r3, r0
    1466:	d1f9      	bne.n	145c <LEDStruct::operator=(LEDStruct const&)+0x474>
    1468:	f605 0208 	addw	r2, r5, #2056	; 0x808
    146c:	f604 002c 	addw	r0, r4, #2092	; 0x82c
    1470:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1474:	f843 1b04 	str.w	r1, [r3], #4
    1478:	4283      	cmp	r3, r0
    147a:	d1f9      	bne.n	1470 <LEDStruct::operator=(LEDStruct const&)+0x488>
    147c:	f8b5 382c 	ldrh.w	r3, [r5, #2092]	; 0x82c
    1480:	f8a4 382c 	strh.w	r3, [r4, #2092]	; 0x82c
    1484:	f895 382e 	ldrb.w	r3, [r5, #2094]	; 0x82e
    1488:	f884 382e 	strb.w	r3, [r4, #2094]	; 0x82e
    148c:	f8b5 1830 	ldrh.w	r1, [r5, #2096]	; 0x830
    1490:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    1494:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
    1498:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    149c:	f8a4 1830 	strh.w	r1, [r4, #2096]	; 0x830
    14a0:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
    14a4:	f895 383c 	ldrb.w	r3, [r5, #2108]	; 0x83c
    14a8:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    14ac:	f895 383d 	ldrb.w	r3, [r5, #2109]	; 0x83d
    14b0:	f884 383d 	strb.w	r3, [r4, #2109]	; 0x83d
    14b4:	f895 383e 	ldrb.w	r3, [r5, #2110]	; 0x83e
    14b8:	f884 383e 	strb.w	r3, [r4, #2110]	; 0x83e
    14bc:	f895 383f 	ldrb.w	r3, [r5, #2111]	; 0x83f
    14c0:	f884 383f 	strb.w	r3, [r4, #2111]	; 0x83f
    14c4:	f895 3840 	ldrb.w	r3, [r5, #2112]	; 0x840
    14c8:	f884 3840 	strb.w	r3, [r4, #2112]	; 0x840
    14cc:	f895 0841 	ldrb.w	r0, [r5, #2113]	; 0x841
    14d0:	f8d5 3848 	ldr.w	r3, [r5, #2120]	; 0x848
    14d4:	f895 1842 	ldrb.w	r1, [r5, #2114]	; 0x842
    14d8:	f8d5 2844 	ldr.w	r2, [r5, #2116]	; 0x844
    14dc:	f8c4 2844 	str.w	r2, [r4, #2116]	; 0x844
    14e0:	f884 0841 	strb.w	r0, [r4, #2113]	; 0x841
    14e4:	f884 1842 	strb.w	r1, [r4, #2114]	; 0x842
    14e8:	f8c4 3848 	str.w	r3, [r4, #2120]	; 0x848
    14ec:	f895 384c 	ldrb.w	r3, [r5, #2124]	; 0x84c
    14f0:	f884 384c 	strb.w	r3, [r4, #2124]	; 0x84c
    14f4:	f895 384d 	ldrb.w	r3, [r5, #2125]	; 0x84d
    14f8:	f884 384d 	strb.w	r3, [r4, #2125]	; 0x84d
    14fc:	f895 384e 	ldrb.w	r3, [r5, #2126]	; 0x84e
    1500:	f884 384e 	strb.w	r3, [r4, #2126]	; 0x84e
    1504:	f895 384f 	ldrb.w	r3, [r5, #2127]	; 0x84f
    1508:	f884 384f 	strb.w	r3, [r4, #2127]	; 0x84f
    150c:	f895 3850 	ldrb.w	r3, [r5, #2128]	; 0x850
    1510:	f884 3850 	strb.w	r3, [r4, #2128]	; 0x850
    1514:	f895 3851 	ldrb.w	r3, [r5, #2129]	; 0x851
    1518:	f884 3851 	strb.w	r3, [r4, #2129]	; 0x851
    151c:	f895 3852 	ldrb.w	r3, [r5, #2130]	; 0x852
    1520:	f884 3852 	strb.w	r3, [r4, #2130]	; 0x852
    1524:	f895 3853 	ldrb.w	r3, [r5, #2131]	; 0x853
    1528:	f884 3853 	strb.w	r3, [r4, #2131]	; 0x853
    152c:	f895 3854 	ldrb.w	r3, [r5, #2132]	; 0x854
    1530:	f884 3854 	strb.w	r3, [r4, #2132]	; 0x854
    1534:	f895 3855 	ldrb.w	r3, [r5, #2133]	; 0x855
    1538:	f884 3855 	strb.w	r3, [r4, #2133]	; 0x855
    153c:	f895 3856 	ldrb.w	r3, [r5, #2134]	; 0x856
    1540:	f884 3856 	strb.w	r3, [r4, #2134]	; 0x856
    1544:	f895 3857 	ldrb.w	r3, [r5, #2135]	; 0x857
    1548:	f884 3857 	strb.w	r3, [r4, #2135]	; 0x857
    154c:	f895 3858 	ldrb.w	r3, [r5, #2136]	; 0x858
    1550:	f884 3858 	strb.w	r3, [r4, #2136]	; 0x858
    1554:	f895 3859 	ldrb.w	r3, [r5, #2137]	; 0x859
    1558:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
    155c:	f895 385a 	ldrb.w	r3, [r5, #2138]	; 0x85a
    1560:	f884 385a 	strb.w	r3, [r4, #2138]	; 0x85a
    1564:	f895 385b 	ldrb.w	r3, [r5, #2139]	; 0x85b
    1568:	f884 385b 	strb.w	r3, [r4, #2139]	; 0x85b
    156c:	4620      	mov	r0, r4
    156e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001570 <finish_transition()>:

void finish_transition() {
    1570:	b530      	push	{r4, r5, lr}
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1572:	4d1d      	ldr	r5, [pc, #116]	; (15e8 <finish_transition()+0x78>)
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    1574:	4c1d      	ldr	r4, [pc, #116]	; (15ec <finish_transition()+0x7c>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
    1576:	b083      	sub	sp, #12
	in_transition = 0;
    1578:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    157a:	4628      	mov	r0, r5
    157c:	aa01      	add	r2, sp, #4
    157e:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    1580:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1582:	f88d 3004 	strb.w	r3, [sp, #4]
    1586:	f88d 3005 	strb.w	r3, [sp, #5]
    158a:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    158e:	f00a f9b9 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds = next_leds;
    1592:	4628      	mov	r0, r5
    1594:	4916      	ldr	r1, [pc, #88]	; (15f0 <finish_transition()+0x80>)
    1596:	f7ff fd27 	bl	fe8 <LEDStruct::operator=(LEDStruct const&)>
	if (curr_leds.use_overlay) { curr_over_leds = next_over_leds; curr_over_leds.array_type = CURR_OVERLAY; }
    159a:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    159e:	b13b      	cbz	r3, 15b0 <finish_transition()+0x40>
    15a0:	4c14      	ldr	r4, [pc, #80]	; (15f4 <finish_transition()+0x84>)
    15a2:	4915      	ldr	r1, [pc, #84]	; (15f8 <finish_transition()+0x88>)
    15a4:	4620      	mov	r0, r4
    15a6:	f7ff fd1f 	bl	fe8 <LEDStruct::operator=(LEDStruct const&)>
    15aa:	2302      	movs	r3, #2
    15ac:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
    15b0:	2400      	movs	r4, #0
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    15b2:	aa01      	add	r2, sp, #4
    15b4:	2196      	movs	r1, #150	; 0x96
    15b6:	480e      	ldr	r0, [pc, #56]	; (15f0 <finish_transition()+0x80>)
    15b8:	f88d 4004 	strb.w	r4, [sp, #4]
    15bc:	f88d 4005 	strb.w	r4, [sp, #5]
    15c0:	f88d 4006 	strb.w	r4, [sp, #6]
    15c4:	f00a f99e 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
    15c8:	aa01      	add	r2, sp, #4
    15ca:	2196      	movs	r1, #150	; 0x96
    15cc:	480a      	ldr	r0, [pc, #40]	; (15f8 <finish_transition()+0x88>)
    15ce:	f88d 4004 	strb.w	r4, [sp, #4]
    15d2:	f88d 4005 	strb.w	r4, [sp, #5]
    15d6:	f88d 4006 	strb.w	r4, [sp, #6]
    15da:	f00a f993 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    15de:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
}
    15e2:	b003      	add	sp, #12
    15e4:	bd30      	pop	{r4, r5, pc}
    15e6:	bf00      	nop
    15e8:	1fffa700 	.word	0x1fffa700
    15ec:	1fff9524 	.word	0x1fff9524
    15f0:	1fff8cb8 	.word	0x1fff8cb8
    15f4:	1fff962c 	.word	0x1fff962c
    15f8:	1fff9ea0 	.word	0x1fff9ea0

000015fc <blending()>:

void blending() {
    15fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1600:	4d2f      	ldr	r5, [pc, #188]	; (16c0 <blending()+0xc4>)
    1602:	4e30      	ldr	r6, [pc, #192]	; (16c4 <blending()+0xc8>)
    1604:	4c30      	ldr	r4, [pc, #192]	; (16c8 <blending()+0xcc>)
    1606:	4f31      	ldr	r7, [pc, #196]	; (16cc <blending()+0xd0>)
    1608:	b085      	sub	sp, #20
    160a:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    160e:	4632      	mov	r2, r6
    1610:	4629      	mov	r1, r5
    1612:	783b      	ldrb	r3, [r7, #0]
    1614:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 16cc <blending()+0xd0>
    1618:	a803      	add	r0, sp, #12
    161a:	3503      	adds	r5, #3
    161c:	f00a fa64 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1620:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1624:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1628:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    162c:	7021      	strb	r1, [r4, #0]
    162e:	4545      	cmp	r5, r8
        g = rhs.g;
    1630:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1632:	70a3      	strb	r3, [r4, #2]
    1634:	f106 0603 	add.w	r6, r6, #3
    1638:	f104 0403 	add.w	r4, r4, #3
    163c:	d1e7      	bne.n	160e <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    163e:	4e24      	ldr	r6, [pc, #144]	; (16d0 <blending()+0xd4>)
    1640:	6833      	ldr	r3, [r6, #0]
    1642:	07db      	lsls	r3, r3, #31
    1644:	d51f      	bpl.n	1686 <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1646:	4d23      	ldr	r5, [pc, #140]	; (16d4 <blending()+0xd8>)
    1648:	4c23      	ldr	r4, [pc, #140]	; (16d8 <blending()+0xdc>)
    164a:	682b      	ldr	r3, [r5, #0]
    164c:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    164e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1652:	9b03      	ldr	r3, [sp, #12]
    1654:	1a5b      	subs	r3, r3, r1
    1656:	4293      	cmp	r3, r2
    1658:	d30c      	bcc.n	1674 <blending()+0x78>
    165a:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    165c:	682a      	ldr	r2, [r5, #0]
    165e:	9202      	str	r2, [sp, #8]
    1660:	3301      	adds	r3, #1
	return ret;
    1662:	9a02      	ldr	r2, [sp, #8]
    1664:	6022      	str	r2, [r4, #0]
    1666:	b2db      	uxtb	r3, r3
    1668:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    166a:	2bff      	cmp	r3, #255	; 0xff
    166c:	d006      	beq.n	167c <blending()+0x80>
		finish_transition();
	}
}
    166e:	b005      	add	sp, #20
    1670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1674:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    1678:	2bff      	cmp	r3, #255	; 0xff
    167a:	d1f8      	bne.n	166e <blending()+0x72>
		finish_transition();
    167c:	f7ff ff78 	bl	1570 <finish_transition()>
	}
}
    1680:	b005      	add	sp, #20
    1682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1686:	4630      	mov	r0, r6
    1688:	f00b f978 	bl	c97c <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    168c:	4d11      	ldr	r5, [pc, #68]	; (16d4 <blending()+0xd8>)
    168e:	b950      	cbnz	r0, 16a6 <blending()+0xaa>
    1690:	4c11      	ldr	r4, [pc, #68]	; (16d8 <blending()+0xdc>)
    1692:	682b      	ldr	r3, [r5, #0]
    1694:	9303      	str	r3, [sp, #12]
    1696:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    169a:	9b03      	ldr	r3, [sp, #12]
    169c:	1a5b      	subs	r3, r3, r1
    169e:	4293      	cmp	r3, r2
    16a0:	d2db      	bcs.n	165a <blending()+0x5e>
    16a2:	783b      	ldrb	r3, [r7, #0]
    16a4:	e7e1      	b.n	166a <blending()+0x6e>
    16a6:	4b0d      	ldr	r3, [pc, #52]	; (16dc <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16a8:	682a      	ldr	r2, [r5, #0]
    16aa:	781b      	ldrb	r3, [r3, #0]
    16ac:	4c0a      	ldr	r4, [pc, #40]	; (16d8 <blending()+0xdc>)
    16ae:	9201      	str	r2, [sp, #4]
	return ret;
    16b0:	9a01      	ldr	r2, [sp, #4]
    16b2:	6022      	str	r2, [r4, #0]
    16b4:	009b      	lsls	r3, r3, #2
    16b6:	4630      	mov	r0, r6
    16b8:	6063      	str	r3, [r4, #4]
    16ba:	f00b f965 	bl	c988 <__cxa_guard_release>
    16be:	e7e8      	b.n	1692 <blending()+0x96>
    16c0:	1fffa700 	.word	0x1fffa700
    16c4:	1fff8cb8 	.word	0x1fff8cb8
    16c8:	1fffaf5c 	.word	0x1fffaf5c
    16cc:	1fff8cb6 	.word	0x1fff8cb6
    16d0:	1fff9618 	.word	0x1fff9618
    16d4:	1fffb19c 	.word	0x1fffb19c
    16d8:	1fff9528 	.word	0x1fff9528
    16dc:	1fff9e8d 	.word	0x1fff9e8d

000016e0 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    16e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    16e4:	4e94      	ldr	r6, [pc, #592]	; (1938 <wipedown()+0x258>)
    16e6:	f896 c000 	ldrb.w	ip, [r6]
    16ea:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    16ee:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    16f0:	2b00      	cmp	r3, #0
    16f2:	f000 811e 	beq.w	1932 <wipedown()+0x252>
    16f6:	f103 3bff 	add.w	fp, r3, #4294967295
    16fa:	fa1f fb8b 	uxth.w	fp, fp
    16fe:	488f      	ldr	r0, [pc, #572]	; (193c <wipedown()+0x25c>)
    1700:	498f      	ldr	r1, [pc, #572]	; (1940 <wipedown()+0x260>)
    1702:	f10b 0b01 	add.w	fp, fp, #1
    1706:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    170a:	4483      	add	fp, r0
    170c:	4602      	mov	r2, r0
    170e:	460d      	mov	r5, r1
    1710:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1712:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    1714:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1718:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    171c:	7027      	strb	r7, [r4, #0]
    171e:	3203      	adds	r2, #3
    1720:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1724:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    1728:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    172c:	f884 a001 	strb.w	sl, [r4, #1]
    1730:	455a      	cmp	r2, fp
        b = rhs.b;
    1732:	f884 9002 	strb.w	r9, [r4, #2]
    1736:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    173a:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    173e:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    1742:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    1746:	f104 0403 	add.w	r4, r4, #3
    174a:	f1a1 0103 	sub.w	r1, r1, #3
    174e:	d1e0      	bne.n	1712 <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1750:	2b4a      	cmp	r3, #74	; 0x4a
    1752:	d827      	bhi.n	17a4 <wipedown()+0xc4>
    1754:	487b      	ldr	r0, [pc, #492]	; (1944 <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    1756:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    175a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    175e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1762:	eb00 0801 	add.w	r8, r0, r1
    1766:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    176a:	3301      	adds	r3, #1
    176c:	186f      	adds	r7, r5, r1
    176e:	f810 b001 	ldrb.w	fp, [r0, r1]
    1772:	f805 b001 	strb.w	fp, [r5, r1]
    1776:	18ac      	adds	r4, r5, r2
    1778:	b29b      	uxth	r3, r3
        g = rhs.g;
    177a:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    177e:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1782:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1786:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    178a:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    178e:	f887 a001 	strb.w	sl, [r7, #1]
    1792:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1794:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1798:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    179c:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    17a0:	70a1      	strb	r1, [r4, #2]
    17a2:	d1d8      	bne.n	1756 <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    17a4:	f10c 3aff 	add.w	sl, ip, #4294967295
    17a8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    17ac:	2480      	movs	r4, #128	; 0x80
    17ae:	eb05 0b0a 	add.w	fp, r5, sl
    17b2:	4659      	mov	r1, fp
    17b4:	4623      	mov	r3, r4
    17b6:	a803      	add	r0, sp, #12
    17b8:	aa02      	add	r2, sp, #8
    17ba:	2700      	movs	r7, #0
    17bc:	f88d 4009 	strb.w	r4, [sp, #9]
    17c0:	f88d 400a 	strb.w	r4, [sp, #10]
    17c4:	f88d 7008 	strb.w	r7, [sp, #8]
    17c8:	f00a f98e 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    17cc:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    17d4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    17d8:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17dc:	f805 300a 	strb.w	r3, [r5, sl]
    17e0:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    17e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    17e8:	eb05 0908 	add.w	r9, r5, r8
    17ec:	4649      	mov	r1, r9
    17ee:	4623      	mov	r3, r4
        g = rhs.g;
    17f0:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    17f4:	f88b 0002 	strb.w	r0, [fp, #2]
    17f8:	aa02      	add	r2, sp, #8
    17fa:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    17fc:	f88d 7008 	strb.w	r7, [sp, #8]
    1800:	f88d 4009 	strb.w	r4, [sp, #9]
    1804:	f88d 400a 	strb.w	r4, [sp, #10]
    1808:	f00a f96e 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    180c:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    180e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1812:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1816:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    181a:	f89d 000d 	ldrb.w	r0, [sp, #13]
    181e:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1822:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    1826:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    182a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    182e:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1832:	eb05 0e0c 	add.w	lr, r5, ip
    1836:	1868      	adds	r0, r5, r1
    1838:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos < ONE_SIDE - 1) {
    183a:	2a49      	cmp	r2, #73	; 0x49
    183c:	f805 300c 	strb.w	r3, [r5, ip]
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1840:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1940 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    1844:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1848:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    184c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1938 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1850:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    1852:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    1854:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
    1856:	d92e      	bls.n	18b6 <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1858:	4f3b      	ldr	r7, [pc, #236]	; (1948 <wipedown()+0x268>)
    185a:	683b      	ldr	r3, [r7, #0]
    185c:	07db      	lsls	r3, r3, #31
    185e:	d517      	bpl.n	1890 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1860:	4d3a      	ldr	r5, [pc, #232]	; (194c <wipedown()+0x26c>)
    1862:	4c3b      	ldr	r4, [pc, #236]	; (1950 <wipedown()+0x270>)
    1864:	682b      	ldr	r3, [r5, #0]
    1866:	9303      	str	r3, [sp, #12]
    1868:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    186c:	9b03      	ldr	r3, [sp, #12]
    186e:	1a5b      	subs	r3, r3, r1
    1870:	4293      	cmp	r3, r2
    1872:	7833      	ldrb	r3, [r6, #0]
    1874:	d306      	bcc.n	1884 <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1876:	682a      	ldr	r2, [r5, #0]
    1878:	9202      	str	r2, [sp, #8]
    187a:	3b01      	subs	r3, #1
	return ret;
    187c:	9a02      	ldr	r2, [sp, #8]
    187e:	6022      	str	r2, [r4, #0]
    1880:	b2db      	uxtb	r3, r3
    1882:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    1884:	b90b      	cbnz	r3, 188a <wipedown()+0x1aa>
		finish_transition();
    1886:	f7ff fe73 	bl	1570 <finish_transition()>
	}
}
    188a:	b005      	add	sp, #20
    188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1890:	4638      	mov	r0, r7
    1892:	f00b f873 	bl	c97c <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1896:	4d2d      	ldr	r5, [pc, #180]	; (194c <wipedown()+0x26c>)
    1898:	2800      	cmp	r0, #0
    189a:	d0e2      	beq.n	1862 <wipedown()+0x182>
    189c:	4b2d      	ldr	r3, [pc, #180]	; (1954 <wipedown()+0x274>)
    189e:	682a      	ldr	r2, [r5, #0]
    18a0:	781b      	ldrb	r3, [r3, #0]
    18a2:	4c2b      	ldr	r4, [pc, #172]	; (1950 <wipedown()+0x270>)
    18a4:	9201      	str	r2, [sp, #4]
	return ret;
    18a6:	9a01      	ldr	r2, [sp, #4]
    18a8:	6022      	str	r2, [r4, #0]
    18aa:	009b      	lsls	r3, r3, #2
    18ac:	4638      	mov	r0, r7
    18ae:	6063      	str	r3, [r4, #4]
    18b0:	f00b f86a 	bl	c988 <__cxa_guard_release>
    18b4:	e7d6      	b.n	1864 <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    18b6:	1c55      	adds	r5, r2, #1
    18b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    18bc:	eb08 0a05 	add.w	sl, r8, r5
    18c0:	4651      	mov	r1, sl
    18c2:	4623      	mov	r3, r4
    18c4:	aa02      	add	r2, sp, #8
    18c6:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18c8:	f88d 7008 	strb.w	r7, [sp, #8]
    18cc:	f88d 4009 	strb.w	r4, [sp, #9]
    18d0:	f88d 400a 	strb.w	r4, [sp, #10]
    18d4:	f00a f908 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    18d8:	f899 3000 	ldrb.w	r3, [r9]
    18dc:	f88d 7008 	strb.w	r7, [sp, #8]
    18e0:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    18e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    18e8:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18ec:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    18f0:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    18f4:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18f8:	f808 c005 	strb.w	ip, [r8, r5]
    18fc:	aa02      	add	r2, sp, #8
    18fe:	4623      	mov	r3, r4
    1900:	4649      	mov	r1, r9
    1902:	a803      	add	r0, sp, #12
        g = rhs.g;
    1904:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    1908:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    190c:	f88d 4009 	strb.w	r4, [sp, #9]
    1910:	f88d 400a 	strb.w	r4, [sp, #10]
    1914:	f00a f8e8 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1918:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    191c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1920:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1924:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    1928:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    192c:	f889 3002 	strb.w	r3, [r9, #2]
    1930:	e792      	b.n	1858 <wipedown()+0x178>
    1932:	4d03      	ldr	r5, [pc, #12]	; (1940 <wipedown()+0x260>)
    1934:	e70e      	b.n	1754 <wipedown()+0x74>
    1936:	bf00      	nop
    1938:	1fff9560 	.word	0x1fff9560
    193c:	1fffa700 	.word	0x1fffa700
    1940:	1fffaf5c 	.word	0x1fffaf5c
    1944:	1fff8cb8 	.word	0x1fff8cb8
    1948:	1fff961c 	.word	0x1fff961c
    194c:	1fffb19c 	.word	0x1fffb19c
    1950:	1fff953c 	.word	0x1fff953c
    1954:	1fff9e8d 	.word	0x1fff9e8d

00001958 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    195c:	4ba2      	ldr	r3, [pc, #648]	; (1be8 <wipeup()+0x290>)
    195e:	781d      	ldrb	r5, [r3, #0]
    1960:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1962:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1964:	2b00      	cmp	r3, #0
    1966:	f000 8130 	beq.w	1bca <wipeup()+0x272>
    196a:	f103 3bff 	add.w	fp, r3, #4294967295
    196e:	fa1f fb8b 	uxth.w	fp, fp
    1972:	489e      	ldr	r0, [pc, #632]	; (1bec <wipeup()+0x294>)
    1974:	499e      	ldr	r1, [pc, #632]	; (1bf0 <wipeup()+0x298>)
    1976:	f10b 0b01 	add.w	fp, fp, #1
    197a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    197e:	4483      	add	fp, r0
    1980:	4602      	mov	r2, r0
    1982:	460c      	mov	r4, r1
    1984:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1986:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    198a:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    198e:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1992:	f886 e000 	strb.w	lr, [r6]
    1996:	3203      	adds	r2, #3
    1998:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    199c:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    19a0:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19a4:	f886 a001 	strb.w	sl, [r6, #1]
    19a8:	455a      	cmp	r2, fp
        b = rhs.b;
    19aa:	f886 9002 	strb.w	r9, [r6, #2]
    19ae:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19b2:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    19b6:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    19ba:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    19be:	f106 0603 	add.w	r6, r6, #3
    19c2:	f1a1 0103 	sub.w	r1, r1, #3
    19c6:	d1de      	bne.n	1986 <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    19c8:	2b4a      	cmp	r3, #74	; 0x4a
    19ca:	d828      	bhi.n	1a1e <wipeup()+0xc6>
    19cc:	4889      	ldr	r0, [pc, #548]	; (1bf4 <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    19ce:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    19d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    19da:	eb00 0801 	add.w	r8, r0, r1
    19de:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    19e2:	3301      	adds	r3, #1
    19e4:	eb04 0e01 	add.w	lr, r4, r1
    19e8:	f810 b001 	ldrb.w	fp, [r0, r1]
    19ec:	f804 b001 	strb.w	fp, [r4, r1]
    19f0:	18a6      	adds	r6, r4, r2
    19f2:	b29b      	uxth	r3, r3
        g = rhs.g;
    19f4:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    19f8:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19fc:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a00:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    1a04:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1a08:	f88e a001 	strb.w	sl, [lr, #1]
    1a0c:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1a0e:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a12:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    1a16:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    1a1a:	70b1      	strb	r1, [r6, #2]
    1a1c:	d1d7      	bne.n	19ce <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    1a1e:	2d00      	cmp	r5, #0
    1a20:	f040 808f 	bne.w	1b42 <wipeup()+0x1ea>
    1a24:	f10d 0a0c 	add.w	sl, sp, #12
    1a28:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1a2c:	4b6e      	ldr	r3, [pc, #440]	; (1be8 <wipeup()+0x290>)
    1a2e:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1a30:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a34:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1a38:	1c5a      	adds	r2, r3, #1
    1a3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a3e:	eb04 0e03 	add.w	lr, r4, r3
    1a42:	1825      	adds	r5, r4, r0
    1a44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a48:	2680      	movs	r6, #128	; 0x80
    1a4a:	eb04 0902 	add.w	r9, r4, r2
    1a4e:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a50:	22ff      	movs	r2, #255	; 0xff
    1a52:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a54:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    1a58:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1a5c:	f88e 2002 	strb.w	r2, [lr, #2]
    1a60:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a62:	5422      	strb	r2, [r4, r0]
    1a64:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1a66:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1a68:	70aa      	strb	r2, [r5, #2]
    1a6a:	4650      	mov	r0, sl
    1a6c:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a6e:	f88d 6009 	strb.w	r6, [sp, #9]
    1a72:	f88d 600a 	strb.w	r6, [sp, #10]
    1a76:	f88d 8008 	strb.w	r8, [sp, #8]
    1a7a:	f00a f835 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1a7e:	4b5a      	ldr	r3, [pc, #360]	; (1be8 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a80:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1a84:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1a86:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a8a:	f88d 8008 	strb.w	r8, [sp, #8]
    1a8e:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1a92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1a96:	eb04 0805 	add.w	r8, r4, r5
    1a9a:	4633      	mov	r3, r6
    1a9c:	f88d 6009 	strb.w	r6, [sp, #9]
    1aa0:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1aa4:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1aa8:	55e1      	strb	r1, [r4, r7]
    1aaa:	465a      	mov	r2, fp
    1aac:	4650      	mov	r0, sl
    1aae:	4641      	mov	r1, r8
        g = rhs.g;
    1ab0:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1ab4:	f889 6002 	strb.w	r6, [r9, #2]
    1ab8:	f00a f816 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1abc:	4b4e      	ldr	r3, [pc, #312]	; (1bf8 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1abe:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1ac2:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1ac4:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1ac8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1acc:	5560      	strb	r0, [r4, r5]
    1ace:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1ad0:	4845      	ldr	r0, [pc, #276]	; (1be8 <wipeup()+0x290>)
        g = rhs.g;
    1ad2:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1ad6:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1ada:	d520      	bpl.n	1b1e <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1adc:	4d47      	ldr	r5, [pc, #284]	; (1bfc <wipeup()+0x2a4>)
    1ade:	4c48      	ldr	r4, [pc, #288]	; (1c00 <wipeup()+0x2a8>)
    1ae0:	682b      	ldr	r3, [r5, #0]
    1ae2:	9303      	str	r3, [sp, #12]
    1ae4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1ae8:	9b03      	ldr	r3, [sp, #12]
    1aea:	1a5b      	subs	r3, r3, r1
    1aec:	4293      	cmp	r3, r2
    1aee:	d30e      	bcc.n	1b0e <wipeup()+0x1b6>
    1af0:	4b3d      	ldr	r3, [pc, #244]	; (1be8 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1af2:	682a      	ldr	r2, [r5, #0]
    1af4:	781b      	ldrb	r3, [r3, #0]
    1af6:	9202      	str	r2, [sp, #8]
	return ret;
    1af8:	9a02      	ldr	r2, [sp, #8]
    1afa:	6022      	str	r2, [r4, #0]
    1afc:	3301      	adds	r3, #1
    1afe:	4a3a      	ldr	r2, [pc, #232]	; (1be8 <wipeup()+0x290>)
    1b00:	b2db      	uxtb	r3, r3
    1b02:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1b04:	2b4a      	cmp	r3, #74	; 0x4a
    1b06:	d005      	beq.n	1b14 <wipeup()+0x1bc>
		finish_transition();
	}
}
    1b08:	b005      	add	sp, #20
    1b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b0e:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1b10:	2b4a      	cmp	r3, #74	; 0x4a
    1b12:	d1f9      	bne.n	1b08 <wipeup()+0x1b0>
		finish_transition();
    1b14:	f7ff fd2c 	bl	1570 <finish_transition()>
	}
}
    1b18:	b005      	add	sp, #20
    1b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1b1e:	4836      	ldr	r0, [pc, #216]	; (1bf8 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b20:	4d36      	ldr	r5, [pc, #216]	; (1bfc <wipeup()+0x2a4>)
    1b22:	f00a ff2b 	bl	c97c <__cxa_guard_acquire>
    1b26:	2800      	cmp	r0, #0
    1b28:	d151      	bne.n	1bce <wipeup()+0x276>
    1b2a:	4c35      	ldr	r4, [pc, #212]	; (1c00 <wipeup()+0x2a8>)
    1b2c:	682b      	ldr	r3, [r5, #0]
    1b2e:	9303      	str	r3, [sp, #12]
    1b30:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1b34:	9b03      	ldr	r3, [sp, #12]
    1b36:	1a5b      	subs	r3, r3, r1
    1b38:	4293      	cmp	r3, r2
    1b3a:	d2d9      	bcs.n	1af0 <wipeup()+0x198>
    1b3c:	4b2a      	ldr	r3, [pc, #168]	; (1be8 <wipeup()+0x290>)
    1b3e:	781b      	ldrb	r3, [r3, #0]
    1b40:	e7e0      	b.n	1b04 <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1b42:	3d01      	subs	r5, #1
    1b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b48:	2680      	movs	r6, #128	; 0x80
    1b4a:	eb04 0905 	add.w	r9, r4, r5
    1b4e:	f10d 0a0c 	add.w	sl, sp, #12
    1b52:	f10d 0b08 	add.w	fp, sp, #8
    1b56:	f04f 0800 	mov.w	r8, #0
    1b5a:	4649      	mov	r1, r9
    1b5c:	4633      	mov	r3, r6
    1b5e:	4650      	mov	r0, sl
    1b60:	465a      	mov	r2, fp
    1b62:	f88d 8008 	strb.w	r8, [sp, #8]
    1b66:	f88d 6009 	strb.w	r6, [sp, #9]
    1b6a:	f88d 600a 	strb.w	r6, [sp, #10]
    1b6e:	f009 ffbb 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1b72:	4b1d      	ldr	r3, [pc, #116]	; (1be8 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b74:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1b78:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1b7a:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1b7e:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b82:	f88d 8008 	strb.w	r8, [sp, #8]
    1b86:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1b8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b8e:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b92:	5562      	strb	r2, [r4, r5]
    1b94:	461f      	mov	r7, r3
    1b96:	4641      	mov	r1, r8
    1b98:	4633      	mov	r3, r6
    1b9a:	465a      	mov	r2, fp
    1b9c:	4650      	mov	r0, sl
        g = rhs.g;
    1b9e:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1ba2:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1ba6:	f88d 6009 	strb.w	r6, [sp, #9]
    1baa:	f88d 600a 	strb.w	r6, [sp, #10]
    1bae:	f009 ff9b 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1bb2:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1bb6:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1bba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1bbe:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1bc0:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1bc4:	f888 3002 	strb.w	r3, [r8, #2]
    1bc8:	e730      	b.n	1a2c <wipeup()+0xd4>
    1bca:	4c09      	ldr	r4, [pc, #36]	; (1bf0 <wipeup()+0x298>)
    1bcc:	e6fe      	b.n	19cc <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1bce:	4b0d      	ldr	r3, [pc, #52]	; (1c04 <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bd0:	682a      	ldr	r2, [r5, #0]
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	4c0a      	ldr	r4, [pc, #40]	; (1c00 <wipeup()+0x2a8>)
    1bd6:	9201      	str	r2, [sp, #4]
	return ret;
    1bd8:	9a01      	ldr	r2, [sp, #4]
    1bda:	6022      	str	r2, [r4, #0]
    1bdc:	009b      	lsls	r3, r3, #2
    1bde:	4806      	ldr	r0, [pc, #24]	; (1bf8 <wipeup()+0x2a0>)
    1be0:	6063      	str	r3, [r4, #4]
    1be2:	f00a fed1 	bl	c988 <__cxa_guard_release>
    1be6:	e7a1      	b.n	1b2c <wipeup()+0x1d4>
    1be8:	1fff9560 	.word	0x1fff9560
    1bec:	1fff8cb8 	.word	0x1fff8cb8
    1bf0:	1fffaf5c 	.word	0x1fffaf5c
    1bf4:	1fffa700 	.word	0x1fffa700
    1bf8:	1fff9620 	.word	0x1fff9620
    1bfc:	1fffb19c 	.word	0x1fffb19c
    1c00:	1fff9e90 	.word	0x1fff9e90
    1c04:	1fff9e8d 	.word	0x1fff9e8d

00001c08 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1c08:	2801      	cmp	r0, #1
    1c0a:	d006      	beq.n	1c1a <switch_transition(TransitionType)+0x12>
    1c0c:	d303      	bcc.n	1c16 <switch_transition(TransitionType)+0xe>
    1c0e:	2802      	cmp	r0, #2
    1c10:	d101      	bne.n	1c16 <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1c12:	f7ff bea1 	b.w	1958 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1c16:	f7ff bcf1 	b.w	15fc <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1c1a:	f7ff bd61 	b.w	16e0 <wipedown()>
    1c1e:	bf00      	nop

00001c20 <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    1c20:	b510      	push	{r4, lr}
    1c22:	2110      	movs	r1, #16
    1c24:	4604      	mov	r4, r0
    1c26:	4894      	ldr	r0, [pc, #592]	; (1e78 <print_palette(unsigned char)+0x258>)
    1c28:	f00b ff40 	bl	daac <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1c2c:	4621      	mov	r1, r4
    1c2e:	2300      	movs	r3, #0
    1c30:	220a      	movs	r2, #10
    1c32:	4892      	ldr	r0, [pc, #584]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1c34:	f00c f94e 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c38:	2102      	movs	r1, #2
    1c3a:	4891      	ldr	r0, [pc, #580]	; (1e80 <print_palette(unsigned char)+0x260>)
    1c3c:	f00b ff36 	bl	daac <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1c40:	2c5c      	cmp	r4, #92	; 0x5c
    1c42:	f200 8281 	bhi.w	2148 <print_palette(unsigned char)+0x528>
    1c46:	e8df f014 	tbh	[pc, r4, lsl #1]
    1c4a:	027a      	.short	0x027a
    1c4c:	02700275 	.word	0x02700275
    1c50:	0266026b 	.word	0x0266026b
    1c54:	025c0261 	.word	0x025c0261
    1c58:	02520257 	.word	0x02520257
    1c5c:	0248024d 	.word	0x0248024d
    1c60:	023e0243 	.word	0x023e0243
    1c64:	02340239 	.word	0x02340239
    1c68:	022a022f 	.word	0x022a022f
    1c6c:	02200225 	.word	0x02200225
    1c70:	0216021b 	.word	0x0216021b
    1c74:	020c0211 	.word	0x020c0211
    1c78:	02020207 	.word	0x02020207
    1c7c:	01f801fd 	.word	0x01f801fd
    1c80:	01ee01f3 	.word	0x01ee01f3
    1c84:	01e401e9 	.word	0x01e401e9
    1c88:	01da01df 	.word	0x01da01df
    1c8c:	01d001d5 	.word	0x01d001d5
    1c90:	01c601cb 	.word	0x01c601cb
    1c94:	01bc01c1 	.word	0x01bc01c1
    1c98:	01b201b7 	.word	0x01b201b7
    1c9c:	01a801ad 	.word	0x01a801ad
    1ca0:	019e01a3 	.word	0x019e01a3
    1ca4:	01940199 	.word	0x01940199
    1ca8:	018a018f 	.word	0x018a018f
    1cac:	01800185 	.word	0x01800185
    1cb0:	0176017b 	.word	0x0176017b
    1cb4:	016c0171 	.word	0x016c0171
    1cb8:	01110167 	.word	0x01110167
    1cbc:	0107010c 	.word	0x0107010c
    1cc0:	00fd0102 	.word	0x00fd0102
    1cc4:	00f300f8 	.word	0x00f300f8
    1cc8:	00e900ee 	.word	0x00e900ee
    1ccc:	00df00e4 	.word	0x00df00e4
    1cd0:	00d500da 	.word	0x00d500da
    1cd4:	00cb00d0 	.word	0x00cb00d0
    1cd8:	00c100c6 	.word	0x00c100c6
    1cdc:	00b700bc 	.word	0x00b700bc
    1ce0:	00ad00b2 	.word	0x00ad00b2
    1ce4:	00a300a8 	.word	0x00a300a8
    1ce8:	0099009e 	.word	0x0099009e
    1cec:	008f0094 	.word	0x008f0094
    1cf0:	0085008a 	.word	0x0085008a
    1cf4:	007b0080 	.word	0x007b0080
    1cf8:	00710076 	.word	0x00710076
    1cfc:	0067006c 	.word	0x0067006c
    1d00:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1d04:	495f      	ldr	r1, [pc, #380]	; (1e84 <print_palette(unsigned char)+0x264>)
    1d06:	485d      	ldr	r0, [pc, #372]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d08:	f7fe fe42 	bl	990 <Print::println(char const*)>
    1d0c:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1d0e:	495e      	ldr	r1, [pc, #376]	; (1e88 <print_palette(unsigned char)+0x268>)
    1d10:	485a      	ldr	r0, [pc, #360]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d12:	f7fe fe3d 	bl	990 <Print::println(char const*)>
    1d16:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1d18:	495c      	ldr	r1, [pc, #368]	; (1e8c <print_palette(unsigned char)+0x26c>)
    1d1a:	4858      	ldr	r0, [pc, #352]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d1c:	f7fe fe38 	bl	990 <Print::println(char const*)>
    1d20:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1d22:	495b      	ldr	r1, [pc, #364]	; (1e90 <print_palette(unsigned char)+0x270>)
    1d24:	4855      	ldr	r0, [pc, #340]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d26:	f7fe fe33 	bl	990 <Print::println(char const*)>
    1d2a:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1d2c:	4959      	ldr	r1, [pc, #356]	; (1e94 <print_palette(unsigned char)+0x274>)
    1d2e:	4853      	ldr	r0, [pc, #332]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d30:	f7fe fe2e 	bl	990 <Print::println(char const*)>
    1d34:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1d36:	4958      	ldr	r1, [pc, #352]	; (1e98 <print_palette(unsigned char)+0x278>)
    1d38:	4850      	ldr	r0, [pc, #320]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d3a:	f7fe fe29 	bl	990 <Print::println(char const*)>
    1d3e:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1d40:	4956      	ldr	r1, [pc, #344]	; (1e9c <print_palette(unsigned char)+0x27c>)
    1d42:	484e      	ldr	r0, [pc, #312]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d44:	f7fe fe24 	bl	990 <Print::println(char const*)>
    1d48:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1d4a:	4955      	ldr	r1, [pc, #340]	; (1ea0 <print_palette(unsigned char)+0x280>)
    1d4c:	484b      	ldr	r0, [pc, #300]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d4e:	f7fe fe1f 	bl	990 <Print::println(char const*)>
    1d52:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1d54:	4953      	ldr	r1, [pc, #332]	; (1ea4 <print_palette(unsigned char)+0x284>)
    1d56:	4849      	ldr	r0, [pc, #292]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d58:	f7fe fe1a 	bl	990 <Print::println(char const*)>
    1d5c:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1d5e:	4952      	ldr	r1, [pc, #328]	; (1ea8 <print_palette(unsigned char)+0x288>)
    1d60:	4846      	ldr	r0, [pc, #280]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d62:	f7fe fe15 	bl	990 <Print::println(char const*)>
    1d66:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1d68:	4950      	ldr	r1, [pc, #320]	; (1eac <print_palette(unsigned char)+0x28c>)
    1d6a:	4844      	ldr	r0, [pc, #272]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d6c:	f7fe fe10 	bl	990 <Print::println(char const*)>
    1d70:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1d72:	494f      	ldr	r1, [pc, #316]	; (1eb0 <print_palette(unsigned char)+0x290>)
    1d74:	4841      	ldr	r0, [pc, #260]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d76:	f7fe fe0b 	bl	990 <Print::println(char const*)>
    1d7a:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1d7c:	494d      	ldr	r1, [pc, #308]	; (1eb4 <print_palette(unsigned char)+0x294>)
    1d7e:	483f      	ldr	r0, [pc, #252]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d80:	f7fe fe06 	bl	990 <Print::println(char const*)>
    1d84:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1d86:	494c      	ldr	r1, [pc, #304]	; (1eb8 <print_palette(unsigned char)+0x298>)
    1d88:	483c      	ldr	r0, [pc, #240]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d8a:	f7fe fe01 	bl	990 <Print::println(char const*)>
    1d8e:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1d90:	494a      	ldr	r1, [pc, #296]	; (1ebc <print_palette(unsigned char)+0x29c>)
    1d92:	483a      	ldr	r0, [pc, #232]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d94:	f7fe fdfc 	bl	990 <Print::println(char const*)>
    1d98:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1d9a:	4949      	ldr	r1, [pc, #292]	; (1ec0 <print_palette(unsigned char)+0x2a0>)
    1d9c:	4837      	ldr	r0, [pc, #220]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1d9e:	f7fe fdf7 	bl	990 <Print::println(char const*)>
    1da2:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1da4:	4947      	ldr	r1, [pc, #284]	; (1ec4 <print_palette(unsigned char)+0x2a4>)
    1da6:	4835      	ldr	r0, [pc, #212]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1da8:	f7fe fdf2 	bl	990 <Print::println(char const*)>
    1dac:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1dae:	4946      	ldr	r1, [pc, #280]	; (1ec8 <print_palette(unsigned char)+0x2a8>)
    1db0:	4832      	ldr	r0, [pc, #200]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1db2:	f7fe fded 	bl	990 <Print::println(char const*)>
    1db6:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1db8:	4944      	ldr	r1, [pc, #272]	; (1ecc <print_palette(unsigned char)+0x2ac>)
    1dba:	4830      	ldr	r0, [pc, #192]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1dbc:	f7fe fde8 	bl	990 <Print::println(char const*)>
    1dc0:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1dc2:	4943      	ldr	r1, [pc, #268]	; (1ed0 <print_palette(unsigned char)+0x2b0>)
    1dc4:	482d      	ldr	r0, [pc, #180]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1dc6:	f7fe fde3 	bl	990 <Print::println(char const*)>
    1dca:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1dcc:	4941      	ldr	r1, [pc, #260]	; (1ed4 <print_palette(unsigned char)+0x2b4>)
    1dce:	482b      	ldr	r0, [pc, #172]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1dd0:	f7fe fdde 	bl	990 <Print::println(char const*)>
    1dd4:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1dd6:	4940      	ldr	r1, [pc, #256]	; (1ed8 <print_palette(unsigned char)+0x2b8>)
    1dd8:	4828      	ldr	r0, [pc, #160]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1dda:	f7fe fdd9 	bl	990 <Print::println(char const*)>
    1dde:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1de0:	493e      	ldr	r1, [pc, #248]	; (1edc <print_palette(unsigned char)+0x2bc>)
    1de2:	4826      	ldr	r0, [pc, #152]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1de4:	f7fe fdd4 	bl	990 <Print::println(char const*)>
    1de8:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1dea:	493d      	ldr	r1, [pc, #244]	; (1ee0 <print_palette(unsigned char)+0x2c0>)
    1dec:	4823      	ldr	r0, [pc, #140]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1dee:	f7fe fdcf 	bl	990 <Print::println(char const*)>
    1df2:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1df4:	493b      	ldr	r1, [pc, #236]	; (1ee4 <print_palette(unsigned char)+0x2c4>)
    1df6:	4821      	ldr	r0, [pc, #132]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1df8:	f7fe fdca 	bl	990 <Print::println(char const*)>
    1dfc:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1dfe:	493a      	ldr	r1, [pc, #232]	; (1ee8 <print_palette(unsigned char)+0x2c8>)
    1e00:	481e      	ldr	r0, [pc, #120]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e02:	f7fe fdc5 	bl	990 <Print::println(char const*)>
    1e06:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1e08:	4938      	ldr	r1, [pc, #224]	; (1eec <print_palette(unsigned char)+0x2cc>)
    1e0a:	481c      	ldr	r0, [pc, #112]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e0c:	f7fe fdc0 	bl	990 <Print::println(char const*)>
    1e10:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1e12:	4937      	ldr	r1, [pc, #220]	; (1ef0 <print_palette(unsigned char)+0x2d0>)
    1e14:	4819      	ldr	r0, [pc, #100]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e16:	f7fe fdbb 	bl	990 <Print::println(char const*)>
    1e1a:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1e1c:	4935      	ldr	r1, [pc, #212]	; (1ef4 <print_palette(unsigned char)+0x2d4>)
    1e1e:	4817      	ldr	r0, [pc, #92]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e20:	f7fe fdb6 	bl	990 <Print::println(char const*)>
    1e24:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1e26:	4934      	ldr	r1, [pc, #208]	; (1ef8 <print_palette(unsigned char)+0x2d8>)
    1e28:	4814      	ldr	r0, [pc, #80]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e2a:	f7fe fdb1 	bl	990 <Print::println(char const*)>
    1e2e:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1e30:	4932      	ldr	r1, [pc, #200]	; (1efc <print_palette(unsigned char)+0x2dc>)
    1e32:	4812      	ldr	r0, [pc, #72]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e34:	f7fe fdac 	bl	990 <Print::println(char const*)>
    1e38:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1e3a:	4931      	ldr	r1, [pc, #196]	; (1f00 <print_palette(unsigned char)+0x2e0>)
    1e3c:	480f      	ldr	r0, [pc, #60]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e3e:	f7fe fda7 	bl	990 <Print::println(char const*)>
    1e42:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1e44:	492f      	ldr	r1, [pc, #188]	; (1f04 <print_palette(unsigned char)+0x2e4>)
    1e46:	480d      	ldr	r0, [pc, #52]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e48:	f7fe fda2 	bl	990 <Print::println(char const*)>
    1e4c:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1e4e:	492e      	ldr	r1, [pc, #184]	; (1f08 <print_palette(unsigned char)+0x2e8>)
    1e50:	480a      	ldr	r0, [pc, #40]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e52:	f7fe fd9d 	bl	990 <Print::println(char const*)>
    1e56:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1e58:	492c      	ldr	r1, [pc, #176]	; (1f0c <print_palette(unsigned char)+0x2ec>)
    1e5a:	4808      	ldr	r0, [pc, #32]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e5c:	f7fe fd98 	bl	990 <Print::println(char const*)>
    1e60:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1e62:	492b      	ldr	r1, [pc, #172]	; (1f10 <print_palette(unsigned char)+0x2f0>)
    1e64:	4805      	ldr	r0, [pc, #20]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e66:	f7fe fd93 	bl	990 <Print::println(char const*)>
    1e6a:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1e6c:	4929      	ldr	r1, [pc, #164]	; (1f14 <print_palette(unsigned char)+0x2f4>)
    1e6e:	4803      	ldr	r0, [pc, #12]	; (1e7c <print_palette(unsigned char)+0x25c>)
    1e70:	f7fe fd8e 	bl	990 <Print::println(char const*)>
    1e74:	bd10      	pop	{r4, pc}
    1e76:	bf00      	nop
    1e78:	0000f91c 	.word	0x0000f91c
    1e7c:	1fff8790 	.word	0x1fff8790
    1e80:	0000f930 	.word	0x0000f930
    1e84:	0000fec4 	.word	0x0000fec4
    1e88:	0000feb8 	.word	0x0000feb8
    1e8c:	0000fea8 	.word	0x0000fea8
    1e90:	0000fe98 	.word	0x0000fe98
    1e94:	0000fe84 	.word	0x0000fe84
    1e98:	0000fe6c 	.word	0x0000fe6c
    1e9c:	0000fe54 	.word	0x0000fe54
    1ea0:	0000fe44 	.word	0x0000fe44
    1ea4:	0000fe2c 	.word	0x0000fe2c
    1ea8:	0000fe20 	.word	0x0000fe20
    1eac:	0000fe14 	.word	0x0000fe14
    1eb0:	0000fdfc 	.word	0x0000fdfc
    1eb4:	0000fdf0 	.word	0x0000fdf0
    1eb8:	0000fde4 	.word	0x0000fde4
    1ebc:	0000fdd8 	.word	0x0000fdd8
    1ec0:	0000fdcc 	.word	0x0000fdcc
    1ec4:	0000fdbc 	.word	0x0000fdbc
    1ec8:	0000fdb0 	.word	0x0000fdb0
    1ecc:	0000fd9c 	.word	0x0000fd9c
    1ed0:	0000fd90 	.word	0x0000fd90
    1ed4:	0000fd80 	.word	0x0000fd80
    1ed8:	0000fd74 	.word	0x0000fd74
    1edc:	0000fd68 	.word	0x0000fd68
    1ee0:	0000fd60 	.word	0x0000fd60
    1ee4:	0000fd4c 	.word	0x0000fd4c
    1ee8:	0000fd3c 	.word	0x0000fd3c
    1eec:	0000fd28 	.word	0x0000fd28
    1ef0:	0000fd1c 	.word	0x0000fd1c
    1ef4:	0000fd10 	.word	0x0000fd10
    1ef8:	0000fd04 	.word	0x0000fd04
    1efc:	0000fcf4 	.word	0x0000fcf4
    1f00:	0000fce0 	.word	0x0000fce0
    1f04:	0000fcd4 	.word	0x0000fcd4
    1f08:	0000fcc4 	.word	0x0000fcc4
    1f0c:	0000fcb8 	.word	0x0000fcb8
    1f10:	0000fca8 	.word	0x0000fca8
    1f14:	0000fc9c 	.word	0x0000fc9c
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1f18:	498e      	ldr	r1, [pc, #568]	; (2154 <print_palette(unsigned char)+0x534>)
    1f1a:	488f      	ldr	r0, [pc, #572]	; (2158 <print_palette(unsigned char)+0x538>)
    1f1c:	f7fe fd38 	bl	990 <Print::println(char const*)>
    1f20:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1f22:	498e      	ldr	r1, [pc, #568]	; (215c <print_palette(unsigned char)+0x53c>)
    1f24:	488c      	ldr	r0, [pc, #560]	; (2158 <print_palette(unsigned char)+0x538>)
    1f26:	f7fe fd33 	bl	990 <Print::println(char const*)>
    1f2a:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1f2c:	498c      	ldr	r1, [pc, #560]	; (2160 <print_palette(unsigned char)+0x540>)
    1f2e:	488a      	ldr	r0, [pc, #552]	; (2158 <print_palette(unsigned char)+0x538>)
    1f30:	f7fe fd2e 	bl	990 <Print::println(char const*)>
    1f34:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1f36:	498b      	ldr	r1, [pc, #556]	; (2164 <print_palette(unsigned char)+0x544>)
    1f38:	4887      	ldr	r0, [pc, #540]	; (2158 <print_palette(unsigned char)+0x538>)
    1f3a:	f7fe fd29 	bl	990 <Print::println(char const*)>
    1f3e:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1f40:	4989      	ldr	r1, [pc, #548]	; (2168 <print_palette(unsigned char)+0x548>)
    1f42:	4885      	ldr	r0, [pc, #532]	; (2158 <print_palette(unsigned char)+0x538>)
    1f44:	f7fe fd24 	bl	990 <Print::println(char const*)>
    1f48:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1f4a:	4988      	ldr	r1, [pc, #544]	; (216c <print_palette(unsigned char)+0x54c>)
    1f4c:	4882      	ldr	r0, [pc, #520]	; (2158 <print_palette(unsigned char)+0x538>)
    1f4e:	f7fe fd1f 	bl	990 <Print::println(char const*)>
    1f52:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1f54:	4986      	ldr	r1, [pc, #536]	; (2170 <print_palette(unsigned char)+0x550>)
    1f56:	4880      	ldr	r0, [pc, #512]	; (2158 <print_palette(unsigned char)+0x538>)
    1f58:	f7fe fd1a 	bl	990 <Print::println(char const*)>
    1f5c:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1f5e:	4985      	ldr	r1, [pc, #532]	; (2174 <print_palette(unsigned char)+0x554>)
    1f60:	487d      	ldr	r0, [pc, #500]	; (2158 <print_palette(unsigned char)+0x538>)
    1f62:	f7fe fd15 	bl	990 <Print::println(char const*)>
    1f66:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1f68:	4983      	ldr	r1, [pc, #524]	; (2178 <print_palette(unsigned char)+0x558>)
    1f6a:	487b      	ldr	r0, [pc, #492]	; (2158 <print_palette(unsigned char)+0x538>)
    1f6c:	f7fe fd10 	bl	990 <Print::println(char const*)>
    1f70:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1f72:	4982      	ldr	r1, [pc, #520]	; (217c <print_palette(unsigned char)+0x55c>)
    1f74:	4878      	ldr	r0, [pc, #480]	; (2158 <print_palette(unsigned char)+0x538>)
    1f76:	f7fe fd0b 	bl	990 <Print::println(char const*)>
    1f7a:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1f7c:	4980      	ldr	r1, [pc, #512]	; (2180 <print_palette(unsigned char)+0x560>)
    1f7e:	4876      	ldr	r0, [pc, #472]	; (2158 <print_palette(unsigned char)+0x538>)
    1f80:	f7fe fd06 	bl	990 <Print::println(char const*)>
    1f84:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1f86:	497f      	ldr	r1, [pc, #508]	; (2184 <print_palette(unsigned char)+0x564>)
    1f88:	4873      	ldr	r0, [pc, #460]	; (2158 <print_palette(unsigned char)+0x538>)
    1f8a:	f7fe fd01 	bl	990 <Print::println(char const*)>
    1f8e:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1f90:	497d      	ldr	r1, [pc, #500]	; (2188 <print_palette(unsigned char)+0x568>)
    1f92:	4871      	ldr	r0, [pc, #452]	; (2158 <print_palette(unsigned char)+0x538>)
    1f94:	f7fe fcfc 	bl	990 <Print::println(char const*)>
    1f98:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1f9a:	497c      	ldr	r1, [pc, #496]	; (218c <print_palette(unsigned char)+0x56c>)
    1f9c:	486e      	ldr	r0, [pc, #440]	; (2158 <print_palette(unsigned char)+0x538>)
    1f9e:	f7fe fcf7 	bl	990 <Print::println(char const*)>
    1fa2:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1fa4:	497a      	ldr	r1, [pc, #488]	; (2190 <print_palette(unsigned char)+0x570>)
    1fa6:	486c      	ldr	r0, [pc, #432]	; (2158 <print_palette(unsigned char)+0x538>)
    1fa8:	f7fe fcf2 	bl	990 <Print::println(char const*)>
    1fac:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1fae:	4979      	ldr	r1, [pc, #484]	; (2194 <print_palette(unsigned char)+0x574>)
    1fb0:	4869      	ldr	r0, [pc, #420]	; (2158 <print_palette(unsigned char)+0x538>)
    1fb2:	f7fe fced 	bl	990 <Print::println(char const*)>
    1fb6:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1fb8:	4977      	ldr	r1, [pc, #476]	; (2198 <print_palette(unsigned char)+0x578>)
    1fba:	4867      	ldr	r0, [pc, #412]	; (2158 <print_palette(unsigned char)+0x538>)
    1fbc:	f7fe fce8 	bl	990 <Print::println(char const*)>
    1fc0:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1fc2:	4976      	ldr	r1, [pc, #472]	; (219c <print_palette(unsigned char)+0x57c>)
    1fc4:	4864      	ldr	r0, [pc, #400]	; (2158 <print_palette(unsigned char)+0x538>)
    1fc6:	f7fe fce3 	bl	990 <Print::println(char const*)>
    1fca:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1fcc:	4974      	ldr	r1, [pc, #464]	; (21a0 <print_palette(unsigned char)+0x580>)
    1fce:	4862      	ldr	r0, [pc, #392]	; (2158 <print_palette(unsigned char)+0x538>)
    1fd0:	f7fe fcde 	bl	990 <Print::println(char const*)>
    1fd4:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1fd6:	4973      	ldr	r1, [pc, #460]	; (21a4 <print_palette(unsigned char)+0x584>)
    1fd8:	485f      	ldr	r0, [pc, #380]	; (2158 <print_palette(unsigned char)+0x538>)
    1fda:	f7fe fcd9 	bl	990 <Print::println(char const*)>
    1fde:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1fe0:	4971      	ldr	r1, [pc, #452]	; (21a8 <print_palette(unsigned char)+0x588>)
    1fe2:	485d      	ldr	r0, [pc, #372]	; (2158 <print_palette(unsigned char)+0x538>)
    1fe4:	f7fe fcd4 	bl	990 <Print::println(char const*)>
    1fe8:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1fea:	4970      	ldr	r1, [pc, #448]	; (21ac <print_palette(unsigned char)+0x58c>)
    1fec:	485a      	ldr	r0, [pc, #360]	; (2158 <print_palette(unsigned char)+0x538>)
    1fee:	f7fe fccf 	bl	990 <Print::println(char const*)>
    1ff2:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1ff4:	496e      	ldr	r1, [pc, #440]	; (21b0 <print_palette(unsigned char)+0x590>)
    1ff6:	4858      	ldr	r0, [pc, #352]	; (2158 <print_palette(unsigned char)+0x538>)
    1ff8:	f7fe fcca 	bl	990 <Print::println(char const*)>
    1ffc:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1ffe:	496d      	ldr	r1, [pc, #436]	; (21b4 <print_palette(unsigned char)+0x594>)
    2000:	4855      	ldr	r0, [pc, #340]	; (2158 <print_palette(unsigned char)+0x538>)
    2002:	f7fe fcc5 	bl	990 <Print::println(char const*)>
    2006:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    2008:	496b      	ldr	r1, [pc, #428]	; (21b8 <print_palette(unsigned char)+0x598>)
    200a:	4853      	ldr	r0, [pc, #332]	; (2158 <print_palette(unsigned char)+0x538>)
    200c:	f7fe fcc0 	bl	990 <Print::println(char const*)>
    2010:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    2012:	496a      	ldr	r1, [pc, #424]	; (21bc <print_palette(unsigned char)+0x59c>)
    2014:	4850      	ldr	r0, [pc, #320]	; (2158 <print_palette(unsigned char)+0x538>)
    2016:	f7fe fcbb 	bl	990 <Print::println(char const*)>
    201a:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    201c:	4968      	ldr	r1, [pc, #416]	; (21c0 <print_palette(unsigned char)+0x5a0>)
    201e:	484e      	ldr	r0, [pc, #312]	; (2158 <print_palette(unsigned char)+0x538>)
    2020:	f7fe fcb6 	bl	990 <Print::println(char const*)>
    2024:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    2026:	4967      	ldr	r1, [pc, #412]	; (21c4 <print_palette(unsigned char)+0x5a4>)
    2028:	484b      	ldr	r0, [pc, #300]	; (2158 <print_palette(unsigned char)+0x538>)
    202a:	f7fe fcb1 	bl	990 <Print::println(char const*)>
    202e:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    2030:	4965      	ldr	r1, [pc, #404]	; (21c8 <print_palette(unsigned char)+0x5a8>)
    2032:	4849      	ldr	r0, [pc, #292]	; (2158 <print_palette(unsigned char)+0x538>)
    2034:	f7fe fcac 	bl	990 <Print::println(char const*)>
    2038:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    203a:	4964      	ldr	r1, [pc, #400]	; (21cc <print_palette(unsigned char)+0x5ac>)
    203c:	4846      	ldr	r0, [pc, #280]	; (2158 <print_palette(unsigned char)+0x538>)
    203e:	f7fe fca7 	bl	990 <Print::println(char const*)>
    2042:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    2044:	4962      	ldr	r1, [pc, #392]	; (21d0 <print_palette(unsigned char)+0x5b0>)
    2046:	4844      	ldr	r0, [pc, #272]	; (2158 <print_palette(unsigned char)+0x538>)
    2048:	f7fe fca2 	bl	990 <Print::println(char const*)>
    204c:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    204e:	4961      	ldr	r1, [pc, #388]	; (21d4 <print_palette(unsigned char)+0x5b4>)
    2050:	4841      	ldr	r0, [pc, #260]	; (2158 <print_palette(unsigned char)+0x538>)
    2052:	f7fe fc9d 	bl	990 <Print::println(char const*)>
    2056:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    2058:	495f      	ldr	r1, [pc, #380]	; (21d8 <print_palette(unsigned char)+0x5b8>)
    205a:	483f      	ldr	r0, [pc, #252]	; (2158 <print_palette(unsigned char)+0x538>)
    205c:	f7fe fc98 	bl	990 <Print::println(char const*)>
    2060:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    2062:	495e      	ldr	r1, [pc, #376]	; (21dc <print_palette(unsigned char)+0x5bc>)
    2064:	483c      	ldr	r0, [pc, #240]	; (2158 <print_palette(unsigned char)+0x538>)
    2066:	f7fe fc93 	bl	990 <Print::println(char const*)>
    206a:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    206c:	495c      	ldr	r1, [pc, #368]	; (21e0 <print_palette(unsigned char)+0x5c0>)
    206e:	483a      	ldr	r0, [pc, #232]	; (2158 <print_palette(unsigned char)+0x538>)
    2070:	f7fe fc8e 	bl	990 <Print::println(char const*)>
    2074:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    2076:	495b      	ldr	r1, [pc, #364]	; (21e4 <print_palette(unsigned char)+0x5c4>)
    2078:	4837      	ldr	r0, [pc, #220]	; (2158 <print_palette(unsigned char)+0x538>)
    207a:	f7fe fc89 	bl	990 <Print::println(char const*)>
    207e:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    2080:	4959      	ldr	r1, [pc, #356]	; (21e8 <print_palette(unsigned char)+0x5c8>)
    2082:	4835      	ldr	r0, [pc, #212]	; (2158 <print_palette(unsigned char)+0x538>)
    2084:	f7fe fc84 	bl	990 <Print::println(char const*)>
    2088:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    208a:	4958      	ldr	r1, [pc, #352]	; (21ec <print_palette(unsigned char)+0x5cc>)
    208c:	4832      	ldr	r0, [pc, #200]	; (2158 <print_palette(unsigned char)+0x538>)
    208e:	f7fe fc7f 	bl	990 <Print::println(char const*)>
    2092:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    2094:	4956      	ldr	r1, [pc, #344]	; (21f0 <print_palette(unsigned char)+0x5d0>)
    2096:	4830      	ldr	r0, [pc, #192]	; (2158 <print_palette(unsigned char)+0x538>)
    2098:	f7fe fc7a 	bl	990 <Print::println(char const*)>
    209c:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    209e:	4955      	ldr	r1, [pc, #340]	; (21f4 <print_palette(unsigned char)+0x5d4>)
    20a0:	482d      	ldr	r0, [pc, #180]	; (2158 <print_palette(unsigned char)+0x538>)
    20a2:	f7fe fc75 	bl	990 <Print::println(char const*)>
    20a6:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    20a8:	4953      	ldr	r1, [pc, #332]	; (21f8 <print_palette(unsigned char)+0x5d8>)
    20aa:	482b      	ldr	r0, [pc, #172]	; (2158 <print_palette(unsigned char)+0x538>)
    20ac:	f7fe fc70 	bl	990 <Print::println(char const*)>
    20b0:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    20b2:	4952      	ldr	r1, [pc, #328]	; (21fc <print_palette(unsigned char)+0x5dc>)
    20b4:	4828      	ldr	r0, [pc, #160]	; (2158 <print_palette(unsigned char)+0x538>)
    20b6:	f7fe fc6b 	bl	990 <Print::println(char const*)>
    20ba:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    20bc:	4950      	ldr	r1, [pc, #320]	; (2200 <print_palette(unsigned char)+0x5e0>)
    20be:	4826      	ldr	r0, [pc, #152]	; (2158 <print_palette(unsigned char)+0x538>)
    20c0:	f7fe fc66 	bl	990 <Print::println(char const*)>
    20c4:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    20c6:	494f      	ldr	r1, [pc, #316]	; (2204 <print_palette(unsigned char)+0x5e4>)
    20c8:	4823      	ldr	r0, [pc, #140]	; (2158 <print_palette(unsigned char)+0x538>)
    20ca:	f7fe fc61 	bl	990 <Print::println(char const*)>
    20ce:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    20d0:	494d      	ldr	r1, [pc, #308]	; (2208 <print_palette(unsigned char)+0x5e8>)
    20d2:	4821      	ldr	r0, [pc, #132]	; (2158 <print_palette(unsigned char)+0x538>)
    20d4:	f7fe fc5c 	bl	990 <Print::println(char const*)>
    20d8:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    20da:	494c      	ldr	r1, [pc, #304]	; (220c <print_palette(unsigned char)+0x5ec>)
    20dc:	481e      	ldr	r0, [pc, #120]	; (2158 <print_palette(unsigned char)+0x538>)
    20de:	f7fe fc57 	bl	990 <Print::println(char const*)>
    20e2:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    20e4:	494a      	ldr	r1, [pc, #296]	; (2210 <print_palette(unsigned char)+0x5f0>)
    20e6:	481c      	ldr	r0, [pc, #112]	; (2158 <print_palette(unsigned char)+0x538>)
    20e8:	f7fe fc52 	bl	990 <Print::println(char const*)>
    20ec:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    20ee:	4949      	ldr	r1, [pc, #292]	; (2214 <print_palette(unsigned char)+0x5f4>)
    20f0:	4819      	ldr	r0, [pc, #100]	; (2158 <print_palette(unsigned char)+0x538>)
    20f2:	f7fe fc4d 	bl	990 <Print::println(char const*)>
    20f6:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    20f8:	4947      	ldr	r1, [pc, #284]	; (2218 <print_palette(unsigned char)+0x5f8>)
    20fa:	4817      	ldr	r0, [pc, #92]	; (2158 <print_palette(unsigned char)+0x538>)
    20fc:	f7fe fc48 	bl	990 <Print::println(char const*)>
    2100:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    2102:	4946      	ldr	r1, [pc, #280]	; (221c <print_palette(unsigned char)+0x5fc>)
    2104:	4814      	ldr	r0, [pc, #80]	; (2158 <print_palette(unsigned char)+0x538>)
    2106:	f7fe fc43 	bl	990 <Print::println(char const*)>
    210a:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    210c:	4944      	ldr	r1, [pc, #272]	; (2220 <print_palette(unsigned char)+0x600>)
    210e:	4812      	ldr	r0, [pc, #72]	; (2158 <print_palette(unsigned char)+0x538>)
    2110:	f7fe fc3e 	bl	990 <Print::println(char const*)>
    2114:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    2116:	4943      	ldr	r1, [pc, #268]	; (2224 <print_palette(unsigned char)+0x604>)
    2118:	480f      	ldr	r0, [pc, #60]	; (2158 <print_palette(unsigned char)+0x538>)
    211a:	f7fe fc39 	bl	990 <Print::println(char const*)>
    211e:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    2120:	4941      	ldr	r1, [pc, #260]	; (2228 <print_palette(unsigned char)+0x608>)
    2122:	480d      	ldr	r0, [pc, #52]	; (2158 <print_palette(unsigned char)+0x538>)
    2124:	f7fe fc34 	bl	990 <Print::println(char const*)>
    2128:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    212a:	4940      	ldr	r1, [pc, #256]	; (222c <print_palette(unsigned char)+0x60c>)
    212c:	480a      	ldr	r0, [pc, #40]	; (2158 <print_palette(unsigned char)+0x538>)
    212e:	f7fe fc2f 	bl	990 <Print::println(char const*)>
    2132:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    2134:	493e      	ldr	r1, [pc, #248]	; (2230 <print_palette(unsigned char)+0x610>)
    2136:	4808      	ldr	r0, [pc, #32]	; (2158 <print_palette(unsigned char)+0x538>)
    2138:	f7fe fc2a 	bl	990 <Print::println(char const*)>
    213c:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    213e:	493d      	ldr	r1, [pc, #244]	; (2234 <print_palette(unsigned char)+0x614>)
    2140:	4805      	ldr	r0, [pc, #20]	; (2158 <print_palette(unsigned char)+0x538>)
    2142:	f7fe fc25 	bl	990 <Print::println(char const*)>
    2146:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    2148:	493b      	ldr	r1, [pc, #236]	; (2238 <print_palette(unsigned char)+0x618>)
    214a:	4803      	ldr	r0, [pc, #12]	; (2158 <print_palette(unsigned char)+0x538>)
    214c:	f7fe fc20 	bl	990 <Print::println(char const*)>
    2150:	bd10      	pop	{r4, pc}
    2152:	bf00      	nop
    2154:	0000fc88 	.word	0x0000fc88
    2158:	1fff8790 	.word	0x1fff8790
    215c:	0000fc78 	.word	0x0000fc78
    2160:	0000fc6c 	.word	0x0000fc6c
    2164:	0000fc60 	.word	0x0000fc60
    2168:	0000fc54 	.word	0x0000fc54
    216c:	0000fc40 	.word	0x0000fc40
    2170:	0000fc34 	.word	0x0000fc34
    2174:	0000fc28 	.word	0x0000fc28
    2178:	0000fc1c 	.word	0x0000fc1c
    217c:	0000fc04 	.word	0x0000fc04
    2180:	0000fbfc 	.word	0x0000fbfc
    2184:	0000fc94 	.word	0x0000fc94
    2188:	0000fbf0 	.word	0x0000fbf0
    218c:	0000fbe4 	.word	0x0000fbe4
    2190:	0000fbd0 	.word	0x0000fbd0
    2194:	0000fbbc 	.word	0x0000fbbc
    2198:	0000fbac 	.word	0x0000fbac
    219c:	0000fba0 	.word	0x0000fba0
    21a0:	0000fb94 	.word	0x0000fb94
    21a4:	0000fb88 	.word	0x0000fb88
    21a8:	0000fb7c 	.word	0x0000fb7c
    21ac:	0000fb70 	.word	0x0000fb70
    21b0:	0000fb64 	.word	0x0000fb64
    21b4:	0000fb58 	.word	0x0000fb58
    21b8:	0000fb4c 	.word	0x0000fb4c
    21bc:	0000fb40 	.word	0x0000fb40
    21c0:	0000fb34 	.word	0x0000fb34
    21c4:	0000fb28 	.word	0x0000fb28
    21c8:	0000fb18 	.word	0x0000fb18
    21cc:	0000fb04 	.word	0x0000fb04
    21d0:	0000fae8 	.word	0x0000fae8
    21d4:	0000fad0 	.word	0x0000fad0
    21d8:	0000fab4 	.word	0x0000fab4
    21dc:	0000faa4 	.word	0x0000faa4
    21e0:	0000fa94 	.word	0x0000fa94
    21e4:	0000fa80 	.word	0x0000fa80
    21e8:	0000fa70 	.word	0x0000fa70
    21ec:	0000fa68 	.word	0x0000fa68
    21f0:	0000fa60 	.word	0x0000fa60
    21f4:	0000fa48 	.word	0x0000fa48
    21f8:	0000fa38 	.word	0x0000fa38
    21fc:	0000fa30 	.word	0x0000fa30
    2200:	0000fa20 	.word	0x0000fa20
    2204:	0000fa10 	.word	0x0000fa10
    2208:	0000fa00 	.word	0x0000fa00
    220c:	0000f9ec 	.word	0x0000f9ec
    2210:	0000f9d8 	.word	0x0000f9d8
    2214:	0000f9c4 	.word	0x0000f9c4
    2218:	0000f9ac 	.word	0x0000f9ac
    221c:	0000f994 	.word	0x0000f994
    2220:	0000f984 	.word	0x0000f984
    2224:	0000f970 	.word	0x0000f970
    2228:	0000f95c 	.word	0x0000f95c
    222c:	0000f94c 	.word	0x0000f94c
    2230:	0000f940 	.word	0x0000f940
    2234:	0000f934 	.word	0x0000f934
    2238:	0000fedc 	.word	0x0000fedc

0000223c <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    223c:	b538      	push	{r3, r4, r5, lr}
    223e:	2100      	movs	r1, #0
    2240:	4604      	mov	r4, r0
    2242:	4894      	ldr	r0, [pc, #592]	; (2494 <LEDDebug(LEDStruct&)+0x258>)
    2244:	f00b fc32 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2248:	4893      	ldr	r0, [pc, #588]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    224a:	f00b fe33 	bl	deb4 <Print::println()>
    224e:	2122      	movs	r1, #34	; 0x22
    2250:	4892      	ldr	r0, [pc, #584]	; (249c <LEDDebug(LEDStruct&)+0x260>)
    2252:	f00b fc2b 	bl	daac <usb_serial_write>
    2256:	4890      	ldr	r0, [pc, #576]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2258:	f00b fe2c 	bl	deb4 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    225c:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    2260:	2b00      	cmp	r3, #0
    2262:	f000 80b7 	beq.w	23d4 <LEDDebug(LEDStruct&)+0x198>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2266:	2b01      	cmp	r3, #1
    2268:	f000 8695 	beq.w	2f96 <LEDDebug(LEDStruct&)+0xd5a>
    226c:	2113      	movs	r1, #19
    226e:	488c      	ldr	r0, [pc, #560]	; (24a0 <LEDDebug(LEDStruct&)+0x264>)
    2270:	f00b fc1c 	bl	daac <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    2274:	4b8b      	ldr	r3, [pc, #556]	; (24a4 <LEDDebug(LEDStruct&)+0x268>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2276:	4888      	ldr	r0, [pc, #544]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2278:	7819      	ldrb	r1, [r3, #0]
    227a:	220a      	movs	r2, #10
    227c:	2300      	movs	r3, #0
    227e:	f00b fe29 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2282:	2103      	movs	r1, #3
    2284:	4888      	ldr	r0, [pc, #544]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    2286:	f00b fc11 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    228a:	4883      	ldr	r0, [pc, #524]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    228c:	f00b fe12 	bl	deb4 <Print::println()>
    2290:	2113      	movs	r1, #19
    2292:	4886      	ldr	r0, [pc, #536]	; (24ac <LEDDebug(LEDStruct&)+0x270>)
    2294:	f00b fc0a 	bl	daac <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2298:	220a      	movs	r2, #10
    229a:	2300      	movs	r3, #0
    229c:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    22a0:	487d      	ldr	r0, [pc, #500]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    22a2:	f00b fe17 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    22a6:	2103      	movs	r1, #3
    22a8:	487f      	ldr	r0, [pc, #508]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    22aa:	f00b fbff 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22ae:	487a      	ldr	r0, [pc, #488]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    22b0:	f00b fe00 	bl	deb4 <Print::println()>
    22b4:	2111      	movs	r1, #17
    22b6:	487e      	ldr	r0, [pc, #504]	; (24b0 <LEDDebug(LEDStruct&)+0x274>)
    22b8:	f00b fbf8 	bl	daac <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22bc:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    22c0:	4875      	ldr	r0, [pc, #468]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    22c2:	f00b fe47 	bl	df54 <Print::print(long)>
    22c6:	2103      	movs	r1, #3
    22c8:	4877      	ldr	r0, [pc, #476]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    22ca:	f00b fbef 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22ce:	4872      	ldr	r0, [pc, #456]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    22d0:	f00b fdf0 	bl	deb4 <Print::println()>
    22d4:	2111      	movs	r1, #17
    22d6:	4877      	ldr	r0, [pc, #476]	; (24b4 <LEDDebug(LEDStruct&)+0x278>)
    22d8:	f00b fbe8 	bl	daac <usb_serial_write>
	Serial.println("\t||");
	Serial.print("|| (N) this_dir:\t");
	Serial.print(leds.this_dir);
	Serial.println("\t||");
	Serial.print("|| (F) blending:\t");
	if (leds.current_blending == LINEARBLEND) { Serial.print("LINEAR"); }
    22dc:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    22e0:	2b01      	cmp	r3, #1
    22e2:	bf0b      	itete	eq
    22e4:	2106      	moveq	r1, #6
    22e6:	2107      	movne	r1, #7
    22e8:	4873      	ldreq	r0, [pc, #460]	; (24b8 <LEDDebug(LEDStruct&)+0x27c>)
    22ea:	4874      	ldrne	r0, [pc, #464]	; (24bc <LEDDebug(LEDStruct&)+0x280>)
    22ec:	f00b fbde 	bl	daac <usb_serial_write>
    22f0:	2103      	movs	r1, #3
    22f2:	486d      	ldr	r0, [pc, #436]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    22f4:	f00b fbda 	bl	daac <usb_serial_write>
    22f8:	4867      	ldr	r0, [pc, #412]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    22fa:	f00b fddb 	bl	deb4 <Print::println()>
    22fe:	2114      	movs	r1, #20
    2300:	486f      	ldr	r0, [pc, #444]	; (24c0 <LEDDebug(LEDStruct&)+0x284>)
    2302:	f00b fbd3 	bl	daac <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2306:	2300      	movs	r3, #0
    2308:	220a      	movs	r2, #10
    230a:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    230e:	4862      	ldr	r0, [pc, #392]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2310:	f00b fde0 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2314:	2103      	movs	r1, #3
    2316:	4864      	ldr	r0, [pc, #400]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    2318:	f00b fbc8 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    231c:	485e      	ldr	r0, [pc, #376]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    231e:	f00b fdc9 	bl	deb4 <Print::println()>
    2322:	2115      	movs	r1, #21
    2324:	4867      	ldr	r0, [pc, #412]	; (24c4 <LEDDebug(LEDStruct&)+0x288>)
    2326:	f00b fbc1 	bl	daac <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    232a:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    232e:	485a      	ldr	r0, [pc, #360]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2330:	f00b fe10 	bl	df54 <Print::print(long)>
    2334:	2103      	movs	r1, #3
    2336:	485c      	ldr	r0, [pc, #368]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    2338:	f00b fbb8 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    233c:	4856      	ldr	r0, [pc, #344]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    233e:	f00b fdb9 	bl	deb4 <Print::println()>
    2342:	2111      	movs	r1, #17
    2344:	4860      	ldr	r0, [pc, #384]	; (24c8 <LEDDebug(LEDStruct&)+0x28c>)
    2346:	f00b fbb1 	bl	daac <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    234a:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    234e:	4852      	ldr	r0, [pc, #328]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2350:	f00b fe00 	bl	df54 <Print::print(long)>
    2354:	2103      	movs	r1, #3
    2356:	4854      	ldr	r0, [pc, #336]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    2358:	f00b fba8 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    235c:	484e      	ldr	r0, [pc, #312]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    235e:	f00b fda9 	bl	deb4 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2362:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    2366:	bb83      	cbnz	r3, 23ca <LEDDebug(LEDStruct&)+0x18e>
    2368:	2122      	movs	r1, #34	; 0x22
    236a:	484c      	ldr	r0, [pc, #304]	; (249c <LEDDebug(LEDStruct&)+0x260>)
    236c:	f00b fb9e 	bl	daac <usb_serial_write>
    2370:	4849      	ldr	r0, [pc, #292]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2372:	f00b fd9f 	bl	deb4 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    2376:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    237a:	2b22      	cmp	r3, #34	; 0x22
    237c:	f200 85fd 	bhi.w	2f7a <LEDDebug(LEDStruct&)+0xd3e>
    2380:	e8df f013 	tbh	[pc, r3, lsl #1]
    2384:	05fb00b4 	.word	0x05fb00b4
    2388:	05fb05fb 	.word	0x05fb05fb
    238c:	05fb05fb 	.word	0x05fb05fb
    2390:	012a05fb 	.word	0x012a05fb
    2394:	05fb05fb 	.word	0x05fb05fb
    2398:	05fb05fb 	.word	0x05fb05fb
    239c:	05fb0185 	.word	0x05fb0185
    23a0:	05fb05fb 	.word	0x05fb05fb
    23a4:	05fb05fb 	.word	0x05fb05fb
    23a8:	01a50193 	.word	0x01a50193
    23ac:	01a901a7 	.word	0x01a901a7
    23b0:	026f01ee 	.word	0x026f01ee
    23b4:	03aa034e 	.word	0x03aa034e
    23b8:	05fb03ef 	.word	0x05fb03ef
    23bc:	0484042e 	.word	0x0484042e
    23c0:	054804f0 	.word	0x054804f0
    23c4:	05e0058b 	.word	0x05e0058b
    23c8:	0030      	.short	0x0030
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    23ca:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    23ce:	f7ff fc27 	bl	1c20 <print_palette(unsigned char)>
    23d2:	e7c9      	b.n	2368 <LEDDebug(LEDStruct&)+0x12c>
    23d4:	2122      	movs	r1, #34	; 0x22
    23d6:	483d      	ldr	r0, [pc, #244]	; (24cc <LEDDebug(LEDStruct&)+0x290>)
    23d8:	f00b fb68 	bl	daac <usb_serial_write>
    23dc:	482e      	ldr	r0, [pc, #184]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    23de:	f00b fd69 	bl	deb4 <Print::println()>
    23e2:	e743      	b.n	226c <LEDDebug(LEDStruct&)+0x30>
			Serial.print(leds.plasma_range2);
			Serial.println("\t||");
			break;

		case OUTWARD:
			Serial.println("==============OUTWARD=============");
    23e4:	493a      	ldr	r1, [pc, #232]	; (24d0 <LEDDebug(LEDStruct&)+0x294>)
    23e6:	482c      	ldr	r0, [pc, #176]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    23e8:	f7fe fad2 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23ec:	4939      	ldr	r1, [pc, #228]	; (24d4 <LEDDebug(LEDStruct&)+0x298>)
    23ee:	482a      	ldr	r0, [pc, #168]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    23f0:	f7fe fac0 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23f4:	2300      	movs	r3, #0
    23f6:	220a      	movs	r2, #10
    23f8:	f894 1857 	ldrb.w	r1, [r4, #2135]	; 0x857
    23fc:	4826      	ldr	r0, [pc, #152]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    23fe:	f00b fd69 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) out_fade:\t");
			Serial.print(leds.out_fade);
			Serial.println("\t||");
    2402:	4929      	ldr	r1, [pc, #164]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    2404:	4824      	ldr	r0, [pc, #144]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2406:	f7fe fac3 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    240a:	4933      	ldr	r1, [pc, #204]	; (24d8 <LEDDebug(LEDStruct&)+0x29c>)
    240c:	4822      	ldr	r0, [pc, #136]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    240e:	f7fe fab1 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2412:	2300      	movs	r3, #0
    2414:	220a      	movs	r2, #10
    2416:	f894 1853 	ldrb.w	r1, [r4, #2131]	; 0x853
    241a:	481f      	ldr	r0, [pc, #124]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    241c:	f00b fd5a 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) out_beat1:\t");
			Serial.print(leds.out_beat1);
			Serial.println("\t||");
    2420:	4921      	ldr	r1, [pc, #132]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    2422:	481d      	ldr	r0, [pc, #116]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2424:	f7fe fab4 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2428:	492c      	ldr	r1, [pc, #176]	; (24dc <LEDDebug(LEDStruct&)+0x2a0>)
    242a:	481b      	ldr	r0, [pc, #108]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    242c:	f7fe faa2 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2430:	2300      	movs	r3, #0
    2432:	220a      	movs	r2, #10
    2434:	f894 1854 	ldrb.w	r1, [r4, #2132]	; 0x854
    2438:	4817      	ldr	r0, [pc, #92]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    243a:	f00b fd4b 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) out_beat2:\t");
			Serial.print(leds.out_beat2);
			Serial.println("\t||");
    243e:	491a      	ldr	r1, [pc, #104]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    2440:	4815      	ldr	r0, [pc, #84]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2442:	f7fe faa5 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2446:	4926      	ldr	r1, [pc, #152]	; (24e0 <LEDDebug(LEDStruct&)+0x2a4>)
    2448:	4813      	ldr	r0, [pc, #76]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    244a:	f7fe fa93 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    244e:	2300      	movs	r3, #0
    2450:	220a      	movs	r2, #10
    2452:	f894 1855 	ldrb.w	r1, [r4, #2133]	; 0x855
    2456:	4810      	ldr	r0, [pc, #64]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2458:	f00b fd3c 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) out_min1:\t");
			Serial.print(leds.out_min1);
			Serial.println("\t||");
    245c:	4912      	ldr	r1, [pc, #72]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    245e:	480e      	ldr	r0, [pc, #56]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2460:	f7fe fa96 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2464:	491f      	ldr	r1, [pc, #124]	; (24e4 <LEDDebug(LEDStruct&)+0x2a8>)
    2466:	480c      	ldr	r0, [pc, #48]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2468:	f7fe fa84 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    246c:	f894 1856 	ldrb.w	r1, [r4, #2134]	; 0x856
    2470:	4809      	ldr	r0, [pc, #36]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    2472:	2300      	movs	r3, #0
    2474:	220a      	movs	r2, #10
    2476:	f00b fd2d 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) wave_beat:\t");
			Serial.print(leds.wave_beat);
			Serial.println("\t||");
			Serial.print("|| (b) wave_speed:\t");
			Serial.print(leds.wave_speed);
			Serial.println("\t||");
    247a:	490b      	ldr	r1, [pc, #44]	; (24a8 <LEDDebug(LEDStruct&)+0x26c>)
    247c:	4806      	ldr	r0, [pc, #24]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
    247e:	f7fe fa87 	bl	990 <Print::println(char const*)>
    2482:	2123      	movs	r1, #35	; 0x23
    2484:	4818      	ldr	r0, [pc, #96]	; (24e8 <LEDDebug(LEDStruct&)+0x2ac>)
    2486:	f00b fb11 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    248a:	4803      	ldr	r0, [pc, #12]	; (2498 <LEDDebug(LEDStruct&)+0x25c>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    248c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2490:	f00b bd10 	b.w	deb4 <Print::println()>
    2494:	000100b0 	.word	0x000100b0
    2498:	1fff8790 	.word	0x1fff8790
    249c:	0000fef4 	.word	0x0000fef4
    24a0:	0000ff60 	.word	0x0000ff60
    24a4:	1fff8723 	.word	0x1fff8723
    24a8:	0000ff74 	.word	0x0000ff74
    24ac:	0000ff78 	.word	0x0000ff78
    24b0:	0000ff8c 	.word	0x0000ff8c
    24b4:	0000ffa0 	.word	0x0000ffa0
    24b8:	0000ffb4 	.word	0x0000ffb4
    24bc:	0000ffbc 	.word	0x0000ffbc
    24c0:	0000ffc4 	.word	0x0000ffc4
    24c4:	0000ffdc 	.word	0x0000ffdc
    24c8:	0000fff4 	.word	0x0000fff4
    24cc:	0000ff18 	.word	0x0000ff18
    24d0:	00010a54 	.word	0x00010a54
    24d4:	00010a78 	.word	0x00010a78
    24d8:	00010a8c 	.word	0x00010a8c
    24dc:	00010aa0 	.word	0x00010aa0
    24e0:	00010ab4 	.word	0x00010ab4
    24e4:	00010ac8 	.word	0x00010ac8
    24e8:	00010b4c 	.word	0x00010b4c
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    24ec:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    24f0:	2b04      	cmp	r3, #4
    24f2:	f000 8621 	beq.w	3138 <LEDDebug(LEDStruct&)+0xefc>
			else if(leds.mode_name == MULTI_JUGGLE)	{ Serial.println("===========MULTI JUGGLE==========="); }
    24f6:	2b06      	cmp	r3, #6
    24f8:	bf0c      	ite	eq
    24fa:	4983      	ldreq	r1, [pc, #524]	; (2708 <LEDDebug(LEDStruct&)+0x4cc>)
			else									{ Serial.println("==============JUGGLE=============="); } // 34 characters
    24fc:	4983      	ldrne	r1, [pc, #524]	; (270c <LEDDebug(LEDStruct&)+0x4d0>)
    24fe:	4884      	ldr	r0, [pc, #528]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2500:	f7fe fa46 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2504:	4983      	ldr	r1, [pc, #524]	; (2714 <LEDDebug(LEDStruct&)+0x4d8>)
    2506:	4882      	ldr	r0, [pc, #520]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2508:	f7fe fa34 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    250c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2510:	487f      	ldr	r0, [pc, #508]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2512:	f00b fd1f 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2516:	4980      	ldr	r1, [pc, #512]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    2518:	487d      	ldr	r0, [pc, #500]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    251a:	f7fe fa39 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    251e:	497f      	ldr	r1, [pc, #508]	; (271c <LEDDebug(LEDStruct&)+0x4e0>)
    2520:	487b      	ldr	r0, [pc, #492]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2522:	f7fe fa27 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2526:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    252a:	4879      	ldr	r0, [pc, #484]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    252c:	f00b fd12 	bl	df54 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    2530:	4979      	ldr	r1, [pc, #484]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    2532:	4877      	ldr	r0, [pc, #476]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2534:	f7fe fa2c 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2538:	4979      	ldr	r1, [pc, #484]	; (2720 <LEDDebug(LEDStruct&)+0x4e4>)
    253a:	4875      	ldr	r0, [pc, #468]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    253c:	f7fe fa1a 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2540:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    2544:	4872      	ldr	r0, [pc, #456]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2546:	f00b fd05 	bl	df54 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    254a:	4973      	ldr	r1, [pc, #460]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    254c:	4870      	ldr	r0, [pc, #448]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    254e:	f7fe fa1f 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2552:	4974      	ldr	r1, [pc, #464]	; (2724 <LEDDebug(LEDStruct&)+0x4e8>)
    2554:	486e      	ldr	r0, [pc, #440]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2556:	f7fe fa0d 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    255a:	2300      	movs	r3, #0
    255c:	220a      	movs	r2, #10
    255e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2562:	486b      	ldr	r0, [pc, #428]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2564:	f00b fcb6 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    2568:	496b      	ldr	r1, [pc, #428]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    256a:	4869      	ldr	r0, [pc, #420]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    256c:	f7fe fa10 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2570:	496d      	ldr	r1, [pc, #436]	; (2728 <LEDDebug(LEDStruct&)+0x4ec>)
    2572:	4867      	ldr	r0, [pc, #412]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2574:	f7fe f9fe 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2578:	2300      	movs	r3, #0
    257a:	220a      	movs	r2, #10
    257c:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2580:	4863      	ldr	r0, [pc, #396]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2582:	f00b fca7 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2586:	4964      	ldr	r1, [pc, #400]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    2588:	4861      	ldr	r0, [pc, #388]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    258a:	f7fe fa01 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    258e:	4967      	ldr	r1, [pc, #412]	; (272c <LEDDebug(LEDStruct&)+0x4f0>)
    2590:	485f      	ldr	r0, [pc, #380]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2592:	f7fe f9ef 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2596:	2300      	movs	r3, #0
    2598:	220a      	movs	r2, #10
    259a:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    259e:	485c      	ldr	r0, [pc, #368]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    25a0:	f00b fc98 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    25a4:	495c      	ldr	r1, [pc, #368]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    25a6:	485a      	ldr	r0, [pc, #360]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    25a8:	f7fe f9f2 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25ac:	4960      	ldr	r1, [pc, #384]	; (2730 <LEDDebug(LEDStruct&)+0x4f4>)
    25ae:	4858      	ldr	r0, [pc, #352]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    25b0:	f7fe f9e0 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25b4:	2300      	movs	r3, #0
    25b6:	220a      	movs	r2, #10
    25b8:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    25bc:	4854      	ldr	r0, [pc, #336]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    25be:	f00b fc89 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    25c2:	4955      	ldr	r1, [pc, #340]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    25c4:	4852      	ldr	r0, [pc, #328]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    25c6:	f7fe f9e3 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25ca:	495a      	ldr	r1, [pc, #360]	; (2734 <LEDDebug(LEDStruct&)+0x4f8>)
    25cc:	4850      	ldr	r0, [pc, #320]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    25ce:	f7fe f9d1 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25d2:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    25d6:	e072      	b.n	26be <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
    25d8:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    25dc:	2b08      	cmp	r3, #8
    25de:	f000 858c 	beq.w	30fa <LEDDebug(LEDStruct&)+0xebe>
    25e2:	2b0a      	cmp	r3, #10
    25e4:	f000 85ae 	beq.w	3144 <LEDDebug(LEDStruct&)+0xf08>
    25e8:	2b07      	cmp	r3, #7
    25ea:	d103      	bne.n	25f4 <LEDDebug(LEDStruct&)+0x3b8>
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
    25ec:	4952      	ldr	r1, [pc, #328]	; (2738 <LEDDebug(LEDStruct&)+0x4fc>)
    25ee:	4848      	ldr	r0, [pc, #288]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    25f0:	f7fe f9ce 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25f4:	4947      	ldr	r1, [pc, #284]	; (2714 <LEDDebug(LEDStruct&)+0x4d8>)
    25f6:	4846      	ldr	r0, [pc, #280]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    25f8:	f7fe f9bc 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25fc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2600:	4843      	ldr	r0, [pc, #268]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2602:	f00b fca7 	bl	df54 <Print::print(long)>
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
				default: break;
			}
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2606:	4944      	ldr	r1, [pc, #272]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    2608:	4841      	ldr	r0, [pc, #260]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    260a:	f7fe f9c1 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    260e:	494b      	ldr	r1, [pc, #300]	; (273c <LEDDebug(LEDStruct&)+0x500>)
    2610:	483f      	ldr	r0, [pc, #252]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2612:	f7fe f9af 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2616:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    261a:	483d      	ldr	r0, [pc, #244]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    261c:	f00b fc9a 	bl	df54 <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    2620:	493d      	ldr	r1, [pc, #244]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    2622:	483b      	ldr	r0, [pc, #236]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2624:	f7fe f9b4 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2628:	4945      	ldr	r1, [pc, #276]	; (2740 <LEDDebug(LEDStruct&)+0x504>)
    262a:	4839      	ldr	r0, [pc, #228]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    262c:	f7fe f9a2 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2630:	2300      	movs	r3, #0
    2632:	220a      	movs	r2, #10
    2634:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2638:	4835      	ldr	r0, [pc, #212]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    263a:	f00b fc4b 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    263e:	4936      	ldr	r1, [pc, #216]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    2640:	4833      	ldr	r0, [pc, #204]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2642:	f7fe f9a5 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2646:	493f      	ldr	r1, [pc, #252]	; (2744 <LEDDebug(LEDStruct&)+0x508>)
    2648:	4831      	ldr	r0, [pc, #196]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    264a:	f7fe f993 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    264e:	2300      	movs	r3, #0
    2650:	220a      	movs	r2, #10
    2652:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    2656:	482e      	ldr	r0, [pc, #184]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2658:	f00b fc3c 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rot:\t\t");
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
    265c:	492e      	ldr	r1, [pc, #184]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    265e:	482c      	ldr	r0, [pc, #176]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2660:	f7fe f996 	bl	990 <Print::println(char const*)>
			if (leds.mode_name == RAINBOW_MARCH_BEAT) {
    2664:	f894 522c 	ldrb.w	r5, [r4, #556]	; 0x22c
    2668:	2d0a      	cmp	r5, #10
    266a:	f47f af0a 	bne.w	2482 <LEDDebug(LEDStruct&)+0x246>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    266e:	4936      	ldr	r1, [pc, #216]	; (2748 <LEDDebug(LEDStruct&)+0x50c>)
    2670:	4827      	ldr	r0, [pc, #156]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2672:	f7fe f97f 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2676:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    267a:	4825      	ldr	r0, [pc, #148]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    267c:	462a      	mov	r2, r5
    267e:	2300      	movs	r3, #0
    2680:	f00b fc28 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (e) juggle_beat:\t");
				Serial.print(leds.juggle_beat);
				Serial.println("\t||");
    2684:	4924      	ldr	r1, [pc, #144]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    2686:	4822      	ldr	r0, [pc, #136]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    2688:	f7fe f982 	bl	990 <Print::println(char const*)>
    268c:	e6f9      	b.n	2482 <LEDDebug(LEDStruct&)+0x246>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
    268e:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2692:	3b0c      	subs	r3, #12
    2694:	2b05      	cmp	r3, #5
    2696:	f200 8488 	bhi.w	2faa <LEDDebug(LEDStruct&)+0xd6e>
    269a:	e8df f013 	tbh	[pc, r3, lsl #1]
    269e:	0534      	.short	0x0534
    26a0:	05480482 	.word	0x05480482
    26a4:	053e0543 	.word	0x053e0543
    26a8:	0539      	.short	0x0539
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    26aa:	4928      	ldr	r1, [pc, #160]	; (274c <LEDDebug(LEDStruct&)+0x510>)
    26ac:	4818      	ldr	r0, [pc, #96]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    26ae:	f7fe f96f 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26b2:	4918      	ldr	r1, [pc, #96]	; (2714 <LEDDebug(LEDStruct&)+0x4d8>)
    26b4:	4816      	ldr	r0, [pc, #88]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    26b6:	f7fe f95d 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    26ba:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    26be:	4814      	ldr	r0, [pc, #80]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    26c0:	f00b fc48 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    26c4:	4914      	ldr	r1, [pc, #80]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    26c6:	4812      	ldr	r0, [pc, #72]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    26c8:	f7fe f962 	bl	990 <Print::println(char const*)>
			break;
    26cc:	e6d9      	b.n	2482 <LEDDebug(LEDStruct&)+0x246>

		case PRIDE:
			Serial.println("==============PRIDE===============");
    26ce:	4920      	ldr	r1, [pc, #128]	; (2750 <LEDDebug(LEDStruct&)+0x514>)
    26d0:	e7ec      	b.n	26ac <LEDDebug(LEDStruct&)+0x470>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    26d2:	4920      	ldr	r1, [pc, #128]	; (2754 <LEDDebug(LEDStruct&)+0x518>)
    26d4:	e7ea      	b.n	26ac <LEDDebug(LEDStruct&)+0x470>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    26d6:	4920      	ldr	r1, [pc, #128]	; (2758 <LEDDebug(LEDStruct&)+0x51c>)
    26d8:	480d      	ldr	r0, [pc, #52]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    26da:	f7fe f959 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26de:	490d      	ldr	r1, [pc, #52]	; (2714 <LEDDebug(LEDStruct&)+0x4d8>)
    26e0:	480b      	ldr	r0, [pc, #44]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    26e2:	f7fe f947 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    26e6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    26ea:	4809      	ldr	r0, [pc, #36]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    26ec:	f00b fc32 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    26f0:	4909      	ldr	r1, [pc, #36]	; (2718 <LEDDebug(LEDStruct&)+0x4dc>)
    26f2:	4807      	ldr	r0, [pc, #28]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    26f4:	f7fe f94c 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26f8:	4918      	ldr	r1, [pc, #96]	; (275c <LEDDebug(LEDStruct&)+0x520>)
    26fa:	4805      	ldr	r0, [pc, #20]	; (2710 <LEDDebug(LEDStruct&)+0x4d4>)
    26fc:	f7fe f93a 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2700:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2704:	e6b4      	b.n	2470 <LEDDebug(LEDStruct&)+0x234>
    2706:	bf00      	nop
    2708:	0001002c 	.word	0x0001002c
    270c:	00010050 	.word	0x00010050
    2710:	1fff8790 	.word	0x1fff8790
    2714:	00010074 	.word	0x00010074
    2718:	0000ff74 	.word	0x0000ff74
    271c:	0001008c 	.word	0x0001008c
    2720:	000100a0 	.word	0x000100a0
    2724:	000100b4 	.word	0x000100b4
    2728:	000100c8 	.word	0x000100c8
    272c:	000100d8 	.word	0x000100d8
    2730:	000100e8 	.word	0x000100e8
    2734:	000100f8 	.word	0x000100f8
    2738:	00010110 	.word	0x00010110
    273c:	0001017c 	.word	0x0001017c
    2740:	0001018c 	.word	0x0001018c
    2744:	0001019c 	.word	0x0001019c
    2748:	000101ac 	.word	0x000101ac
    274c:	00010310 	.word	0x00010310
    2750:	00010334 	.word	0x00010334
    2754:	00010358 	.word	0x00010358
    2758:	0001037c 	.word	0x0001037c
    275c:	000103a0 	.word	0x000103a0
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    2760:	4997      	ldr	r1, [pc, #604]	; (29c0 <LEDDebug(LEDStruct&)+0x784>)
    2762:	4898      	ldr	r0, [pc, #608]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2764:	f7fe f914 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2768:	4997      	ldr	r1, [pc, #604]	; (29c8 <LEDDebug(LEDStruct&)+0x78c>)
    276a:	4896      	ldr	r0, [pc, #600]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    276c:	f7fe f902 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2770:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2774:	4893      	ldr	r0, [pc, #588]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2776:	f00b fbed 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    277a:	4994      	ldr	r1, [pc, #592]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    277c:	4891      	ldr	r0, [pc, #580]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    277e:	f7fe f907 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2782:	4993      	ldr	r1, [pc, #588]	; (29d0 <LEDDebug(LEDStruct&)+0x794>)
    2784:	488f      	ldr	r0, [pc, #572]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2786:	f7fe f8f5 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    278a:	2300      	movs	r3, #0
    278c:	220a      	movs	r2, #10
    278e:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2792:	488c      	ldr	r0, [pc, #560]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2794:	f00b fb9e 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2798:	498c      	ldr	r1, [pc, #560]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    279a:	488a      	ldr	r0, [pc, #552]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    279c:	f7fe f8f8 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27a0:	498c      	ldr	r1, [pc, #560]	; (29d4 <LEDDebug(LEDStruct&)+0x798>)
    27a2:	4888      	ldr	r0, [pc, #544]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27a4:	f7fe f8e6 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27a8:	2300      	movs	r3, #0
    27aa:	220a      	movs	r2, #10
    27ac:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    27b0:	4884      	ldr	r0, [pc, #528]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27b2:	f00b fb8f 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    27b6:	4985      	ldr	r1, [pc, #532]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    27b8:	4882      	ldr	r0, [pc, #520]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27ba:	f7fe f8e9 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27be:	4986      	ldr	r1, [pc, #536]	; (29d8 <LEDDebug(LEDStruct&)+0x79c>)
    27c0:	4880      	ldr	r0, [pc, #512]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27c2:	f7fe f8d7 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27c6:	2300      	movs	r3, #0
    27c8:	220a      	movs	r2, #10
    27ca:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    27ce:	487d      	ldr	r0, [pc, #500]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27d0:	f00b fb80 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    27d4:	497d      	ldr	r1, [pc, #500]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    27d6:	487b      	ldr	r0, [pc, #492]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27d8:	f7fe f8da 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27dc:	497f      	ldr	r1, [pc, #508]	; (29dc <LEDDebug(LEDStruct&)+0x7a0>)
    27de:	4879      	ldr	r0, [pc, #484]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27e0:	f7fe f8c8 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27e4:	2300      	movs	r3, #0
    27e6:	220a      	movs	r2, #10
    27e8:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    27ec:	4875      	ldr	r0, [pc, #468]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27ee:	f00b fb71 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    27f2:	4976      	ldr	r1, [pc, #472]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    27f4:	4873      	ldr	r0, [pc, #460]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27f6:	f7fe f8cb 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27fa:	4979      	ldr	r1, [pc, #484]	; (29e0 <LEDDebug(LEDStruct&)+0x7a4>)
    27fc:	4871      	ldr	r0, [pc, #452]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    27fe:	f7fe f8b9 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2802:	2300      	movs	r3, #0
    2804:	220a      	movs	r2, #10
    2806:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    280a:	486e      	ldr	r0, [pc, #440]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    280c:	f00b fb62 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2810:	496e      	ldr	r1, [pc, #440]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    2812:	486c      	ldr	r0, [pc, #432]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2814:	f7fe f8bc 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2818:	4972      	ldr	r1, [pc, #456]	; (29e4 <LEDDebug(LEDStruct&)+0x7a8>)
    281a:	486a      	ldr	r0, [pc, #424]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    281c:	f7fe f8aa 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2820:	2300      	movs	r3, #0
    2822:	220a      	movs	r2, #10
    2824:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2828:	4866      	ldr	r0, [pc, #408]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    282a:	f00b fb53 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    282e:	4967      	ldr	r1, [pc, #412]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    2830:	4864      	ldr	r0, [pc, #400]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2832:	f7fe f8ad 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2836:	496c      	ldr	r1, [pc, #432]	; (29e8 <LEDDebug(LEDStruct&)+0x7ac>)
    2838:	4862      	ldr	r0, [pc, #392]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    283a:	f7fe f89b 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    283e:	2300      	movs	r3, #0
    2840:	220a      	movs	r2, #10
    2842:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    2846:	485f      	ldr	r0, [pc, #380]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2848:	f00b fb44 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    284c:	495f      	ldr	r1, [pc, #380]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    284e:	485d      	ldr	r0, [pc, #372]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2850:	f7fe f89e 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2854:	4965      	ldr	r1, [pc, #404]	; (29ec <LEDDebug(LEDStruct&)+0x7b0>)
    2856:	485b      	ldr	r0, [pc, #364]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2858:	f7fe f88c 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    285c:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    2860:	e606      	b.n	2470 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    2862:	4963      	ldr	r1, [pc, #396]	; (29f0 <LEDDebug(LEDStruct&)+0x7b4>)
    2864:	4857      	ldr	r0, [pc, #348]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2866:	f7fe f893 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    286a:	4957      	ldr	r1, [pc, #348]	; (29c8 <LEDDebug(LEDStruct&)+0x78c>)
    286c:	4855      	ldr	r0, [pc, #340]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    286e:	f7fe f881 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2872:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2876:	4853      	ldr	r0, [pc, #332]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2878:	f00b fb6c 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    287c:	4953      	ldr	r1, [pc, #332]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    287e:	4851      	ldr	r0, [pc, #324]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2880:	f7fe f886 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2884:	495b      	ldr	r1, [pc, #364]	; (29f4 <LEDDebug(LEDStruct&)+0x7b8>)
    2886:	484f      	ldr	r0, [pc, #316]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2888:	f7fe f874 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    288c:	2300      	movs	r3, #0
    288e:	220a      	movs	r2, #10
    2890:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    2894:	484b      	ldr	r0, [pc, #300]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2896:	f00b fb1d 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    289a:	494c      	ldr	r1, [pc, #304]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    289c:	4849      	ldr	r0, [pc, #292]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    289e:	f7fe f877 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28a2:	4955      	ldr	r1, [pc, #340]	; (29f8 <LEDDebug(LEDStruct&)+0x7bc>)
    28a4:	4847      	ldr	r0, [pc, #284]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    28a6:	f7fe f865 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28aa:	2300      	movs	r3, #0
    28ac:	220a      	movs	r2, #10
    28ae:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    28b2:	4844      	ldr	r0, [pc, #272]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    28b4:	f00b fb0e 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    28b8:	4944      	ldr	r1, [pc, #272]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    28ba:	4842      	ldr	r0, [pc, #264]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    28bc:	f7fe f868 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28c0:	494e      	ldr	r1, [pc, #312]	; (29fc <LEDDebug(LEDStruct&)+0x7c0>)
    28c2:	4840      	ldr	r0, [pc, #256]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    28c4:	f7fe f856 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28c8:	2300      	movs	r3, #0
    28ca:	220a      	movs	r2, #10
    28cc:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    28d0:	483c      	ldr	r0, [pc, #240]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    28d2:	f00b faff 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    28d6:	493d      	ldr	r1, [pc, #244]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    28d8:	483a      	ldr	r0, [pc, #232]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    28da:	f7fe f859 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28de:	4948      	ldr	r1, [pc, #288]	; (2a00 <LEDDebug(LEDStruct&)+0x7c4>)
    28e0:	4838      	ldr	r0, [pc, #224]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    28e2:	f7fe f847 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28e6:	2300      	movs	r3, #0
    28e8:	220a      	movs	r2, #10
    28ea:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    28ee:	4835      	ldr	r0, [pc, #212]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    28f0:	f00b faf0 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    28f4:	4935      	ldr	r1, [pc, #212]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    28f6:	4833      	ldr	r0, [pc, #204]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    28f8:	f7fe f84a 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28fc:	4941      	ldr	r1, [pc, #260]	; (2a04 <LEDDebug(LEDStruct&)+0x7c8>)
    28fe:	4831      	ldr	r0, [pc, #196]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2900:	f7fe f838 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2904:	2300      	movs	r3, #0
    2906:	220a      	movs	r2, #10
    2908:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    290c:	482d      	ldr	r0, [pc, #180]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    290e:	f00b fae1 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2912:	492e      	ldr	r1, [pc, #184]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    2914:	482b      	ldr	r0, [pc, #172]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2916:	f7fe f83b 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    291a:	493b      	ldr	r1, [pc, #236]	; (2a08 <LEDDebug(LEDStruct&)+0x7cc>)
    291c:	4829      	ldr	r0, [pc, #164]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    291e:	f7fe f829 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2922:	2300      	movs	r3, #0
    2924:	220a      	movs	r2, #10
    2926:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    292a:	4826      	ldr	r0, [pc, #152]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    292c:	f00b fad2 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    2930:	4926      	ldr	r1, [pc, #152]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    2932:	4824      	ldr	r0, [pc, #144]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2934:	f7fe f82c 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2938:	4934      	ldr	r1, [pc, #208]	; (2a0c <LEDDebug(LEDStruct&)+0x7d0>)
    293a:	4822      	ldr	r0, [pc, #136]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    293c:	f7fe f81a 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2940:	2300      	movs	r3, #0
    2942:	220a      	movs	r2, #10
    2944:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2948:	481e      	ldr	r0, [pc, #120]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    294a:	f00b fac3 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    294e:	491f      	ldr	r1, [pc, #124]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    2950:	481c      	ldr	r0, [pc, #112]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2952:	f7fe f81d 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2956:	492e      	ldr	r1, [pc, #184]	; (2a10 <LEDDebug(LEDStruct&)+0x7d4>)
    2958:	481a      	ldr	r0, [pc, #104]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    295a:	f7fe f80b 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    295e:	2300      	movs	r3, #0
    2960:	220a      	movs	r2, #10
    2962:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    2966:	4817      	ldr	r0, [pc, #92]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2968:	f00b fab4 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    296c:	4917      	ldr	r1, [pc, #92]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    296e:	4815      	ldr	r0, [pc, #84]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2970:	f7fe f80e 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2974:	4927      	ldr	r1, [pc, #156]	; (2a14 <LEDDebug(LEDStruct&)+0x7d8>)
    2976:	4813      	ldr	r0, [pc, #76]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2978:	f7fd fffc 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    297c:	2300      	movs	r3, #0
    297e:	220a      	movs	r2, #10
    2980:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    2984:	480f      	ldr	r0, [pc, #60]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2986:	f00b faa5 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    298a:	4910      	ldr	r1, [pc, #64]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    298c:	480d      	ldr	r0, [pc, #52]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    298e:	f7fd ffff 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2992:	4921      	ldr	r1, [pc, #132]	; (2a18 <LEDDebug(LEDStruct&)+0x7dc>)
    2994:	480b      	ldr	r0, [pc, #44]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    2996:	f7fd ffed 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    299a:	2300      	movs	r3, #0
    299c:	220a      	movs	r2, #10
    299e:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    29a2:	4808      	ldr	r0, [pc, #32]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    29a4:	f00b fa96 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    29a8:	4908      	ldr	r1, [pc, #32]	; (29cc <LEDDebug(LEDStruct&)+0x790>)
    29aa:	4806      	ldr	r0, [pc, #24]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    29ac:	f7fd fff0 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29b0:	491a      	ldr	r1, [pc, #104]	; (2a1c <LEDDebug(LEDStruct&)+0x7e0>)
    29b2:	4804      	ldr	r0, [pc, #16]	; (29c4 <LEDDebug(LEDStruct&)+0x788>)
    29b4:	f7fd ffde 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29b8:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    29bc:	e558      	b.n	2470 <LEDDebug(LEDStruct&)+0x234>
    29be:	bf00      	nop
    29c0:	00010488 	.word	0x00010488
    29c4:	1fff8790 	.word	0x1fff8790
    29c8:	00010074 	.word	0x00010074
    29cc:	0000ff74 	.word	0x0000ff74
    29d0:	000104ac 	.word	0x000104ac
    29d4:	000104c0 	.word	0x000104c0
    29d8:	000104d4 	.word	0x000104d4
    29dc:	000104e8 	.word	0x000104e8
    29e0:	000104fc 	.word	0x000104fc
    29e4:	00010510 	.word	0x00010510
    29e8:	00010524 	.word	0x00010524
    29ec:	00010538 	.word	0x00010538
    29f0:	0001054c 	.word	0x0001054c
    29f4:	00010570 	.word	0x00010570
    29f8:	00010584 	.word	0x00010584
    29fc:	00010598 	.word	0x00010598
    2a00:	000105ac 	.word	0x000105ac
    2a04:	000105c0 	.word	0x000105c0
    2a08:	000105d4 	.word	0x000105d4
    2a0c:	000105e8 	.word	0x000105e8
    2a10:	000105fc 	.word	0x000105fc
    2a14:	00010610 	.word	0x00010610
    2a18:	00010624 	.word	0x00010624
    2a1c:	00010638 	.word	0x00010638
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    2a20:	49af      	ldr	r1, [pc, #700]	; (2ce0 <LEDDebug(LEDStruct&)+0xaa4>)
    2a22:	48b0      	ldr	r0, [pc, #704]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a24:	f7fd ffb4 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a28:	49af      	ldr	r1, [pc, #700]	; (2ce8 <LEDDebug(LEDStruct&)+0xaac>)
    2a2a:	48ae      	ldr	r0, [pc, #696]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a2c:	f7fd ffa2 	bl	974 <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    2a30:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    2a34:	2b01      	cmp	r3, #1
    2a36:	f000 8356 	beq.w	30e6 <LEDDebug(LEDStruct&)+0xeaa>
    2a3a:	f0c0 8389 	bcc.w	3150 <LEDDebug(LEDStruct&)+0xf14>
    2a3e:	2b02      	cmp	r3, #2
    2a40:	d107      	bne.n	2a52 <LEDDebug(LEDStruct&)+0x816>
    2a42:	49aa      	ldr	r1, [pc, #680]	; (2cec <LEDDebug(LEDStruct&)+0xab0>)
    2a44:	48a7      	ldr	r0, [pc, #668]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a46:	f7fd ff95 	bl	974 <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    2a4a:	49a9      	ldr	r1, [pc, #676]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2a4c:	48a5      	ldr	r0, [pc, #660]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a4e:	f7fd ff9f 	bl	990 <Print::println(char const*)>
    2a52:	49a8      	ldr	r1, [pc, #672]	; (2cf4 <LEDDebug(LEDStruct&)+0xab8>)
    2a54:	48a3      	ldr	r0, [pc, #652]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a56:	f7fd ff8d 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a5a:	2300      	movs	r3, #0
    2a5c:	220a      	movs	r2, #10
    2a5e:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    2a62:	48a0      	ldr	r0, [pc, #640]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a64:	f00b fa36 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    2a68:	49a1      	ldr	r1, [pc, #644]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2a6a:	489e      	ldr	r0, [pc, #632]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a6c:	f7fd ff90 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a70:	49a1      	ldr	r1, [pc, #644]	; (2cf8 <LEDDebug(LEDStruct&)+0xabc>)
    2a72:	489c      	ldr	r0, [pc, #624]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a74:	f7fd ff7e 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a78:	2300      	movs	r3, #0
    2a7a:	220a      	movs	r2, #10
    2a7c:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    2a80:	4898      	ldr	r0, [pc, #608]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a82:	f00b fa27 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    2a86:	499a      	ldr	r1, [pc, #616]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2a88:	4896      	ldr	r0, [pc, #600]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a8a:	f7fd ff81 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a8e:	499b      	ldr	r1, [pc, #620]	; (2cfc <LEDDebug(LEDStruct&)+0xac0>)
    2a90:	4894      	ldr	r0, [pc, #592]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a92:	f7fd ff6f 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a96:	2300      	movs	r3, #0
    2a98:	220a      	movs	r2, #10
    2a9a:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    2a9e:	4891      	ldr	r0, [pc, #580]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2aa0:	f00b fa18 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    2aa4:	4992      	ldr	r1, [pc, #584]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2aa6:	488f      	ldr	r0, [pc, #572]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2aa8:	f7fd ff72 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aac:	4994      	ldr	r1, [pc, #592]	; (2d00 <LEDDebug(LEDStruct&)+0xac4>)
    2aae:	488d      	ldr	r0, [pc, #564]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ab0:	f7fd ff60 	bl	974 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2ab4:	2300      	movs	r3, #0
    2ab6:	220a      	movs	r2, #10
    2ab8:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    2abc:	4889      	ldr	r0, [pc, #548]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2abe:	f00b fa09 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    2ac2:	498b      	ldr	r1, [pc, #556]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2ac4:	4887      	ldr	r0, [pc, #540]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ac6:	f7fd ff63 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aca:	498e      	ldr	r1, [pc, #568]	; (2d04 <LEDDebug(LEDStruct&)+0xac8>)
    2acc:	4885      	ldr	r0, [pc, #532]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ace:	f7fd ff51 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ad2:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    2ad6:	e5f2      	b.n	26be <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    2ad8:	498b      	ldr	r1, [pc, #556]	; (2d08 <LEDDebug(LEDStruct&)+0xacc>)
    2ada:	4882      	ldr	r0, [pc, #520]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2adc:	f7fd ff58 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ae0:	498a      	ldr	r1, [pc, #552]	; (2d0c <LEDDebug(LEDStruct&)+0xad0>)
    2ae2:	4880      	ldr	r0, [pc, #512]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ae4:	f7fd ff46 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ae8:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    2aec:	487d      	ldr	r0, [pc, #500]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2aee:	f00b fa31 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    2af2:	497f      	ldr	r1, [pc, #508]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2af4:	487b      	ldr	r0, [pc, #492]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2af6:	f7fd ff4b 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2afa:	4985      	ldr	r1, [pc, #532]	; (2d10 <LEDDebug(LEDStruct&)+0xad4>)
    2afc:	4879      	ldr	r0, [pc, #484]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2afe:	f7fd ff39 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b02:	2300      	movs	r3, #0
    2b04:	220a      	movs	r2, #10
    2b06:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    2b0a:	4876      	ldr	r0, [pc, #472]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b0c:	f00b f9e2 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    2b10:	4977      	ldr	r1, [pc, #476]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2b12:	4874      	ldr	r0, [pc, #464]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b14:	f7fd ff3c 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b18:	497e      	ldr	r1, [pc, #504]	; (2d14 <LEDDebug(LEDStruct&)+0xad8>)
    2b1a:	4872      	ldr	r0, [pc, #456]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b1c:	f7fd ff2a 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b20:	2300      	movs	r3, #0
    2b22:	220a      	movs	r2, #10
    2b24:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2b28:	486e      	ldr	r0, [pc, #440]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b2a:	f00b f9d3 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2b2e:	4970      	ldr	r1, [pc, #448]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2b30:	486c      	ldr	r0, [pc, #432]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b32:	f7fd ff2d 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b36:	4978      	ldr	r1, [pc, #480]	; (2d18 <LEDDebug(LEDStruct&)+0xadc>)
    2b38:	486a      	ldr	r0, [pc, #424]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b3a:	f7fd ff1b 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b3e:	2300      	movs	r3, #0
    2b40:	220a      	movs	r2, #10
    2b42:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2b46:	4867      	ldr	r0, [pc, #412]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b48:	f00b f9c4 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2b4c:	4968      	ldr	r1, [pc, #416]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2b4e:	4865      	ldr	r0, [pc, #404]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b50:	f7fd ff1e 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b54:	4971      	ldr	r1, [pc, #452]	; (2d1c <LEDDebug(LEDStruct&)+0xae0>)
    2b56:	4863      	ldr	r0, [pc, #396]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b58:	f7fd ff0c 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b5c:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2b60:	e486      	b.n	2470 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2b62:	496f      	ldr	r1, [pc, #444]	; (2d20 <LEDDebug(LEDStruct&)+0xae4>)
    2b64:	485f      	ldr	r0, [pc, #380]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b66:	f7fd ff13 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b6a:	496e      	ldr	r1, [pc, #440]	; (2d24 <LEDDebug(LEDStruct&)+0xae8>)
    2b6c:	485d      	ldr	r0, [pc, #372]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b6e:	f7fd ff01 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b72:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2b76:	485b      	ldr	r0, [pc, #364]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b78:	f00b f9ec 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2b7c:	495c      	ldr	r1, [pc, #368]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2b7e:	4859      	ldr	r0, [pc, #356]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b80:	f7fd ff06 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b84:	4968      	ldr	r1, [pc, #416]	; (2d28 <LEDDebug(LEDStruct&)+0xaec>)
    2b86:	4857      	ldr	r0, [pc, #348]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b88:	f7fd fef4 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b8c:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    2b90:	4854      	ldr	r0, [pc, #336]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b92:	f00b f9df 	bl	df54 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    2b96:	4956      	ldr	r1, [pc, #344]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2b98:	4852      	ldr	r0, [pc, #328]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b9a:	f7fd fef9 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b9e:	4963      	ldr	r1, [pc, #396]	; (2d2c <LEDDebug(LEDStruct&)+0xaf0>)
    2ba0:	4850      	ldr	r0, [pc, #320]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ba2:	f7fd fee7 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ba6:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    2baa:	484e      	ldr	r0, [pc, #312]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bac:	f00b f9d2 	bl	df54 <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2bb0:	494f      	ldr	r1, [pc, #316]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2bb2:	484c      	ldr	r0, [pc, #304]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bb4:	f7fd feec 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bb8:	495d      	ldr	r1, [pc, #372]	; (2d30 <LEDDebug(LEDStruct&)+0xaf4>)
    2bba:	484a      	ldr	r0, [pc, #296]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bbc:	f7fd feda 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bc0:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    2bc4:	4847      	ldr	r0, [pc, #284]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bc6:	f00b f9c5 	bl	df54 <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    2bca:	4949      	ldr	r1, [pc, #292]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2bcc:	4845      	ldr	r0, [pc, #276]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bce:	f7fd fedf 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bd2:	4958      	ldr	r1, [pc, #352]	; (2d34 <LEDDebug(LEDStruct&)+0xaf8>)
    2bd4:	4843      	ldr	r0, [pc, #268]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bd6:	f7fd fecd 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bda:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    2bde:	e447      	b.n	2470 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2be0:	4955      	ldr	r1, [pc, #340]	; (2d38 <LEDDebug(LEDStruct&)+0xafc>)
    2be2:	4840      	ldr	r0, [pc, #256]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2be4:	f7fd fed4 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2be8:	4954      	ldr	r1, [pc, #336]	; (2d3c <LEDDebug(LEDStruct&)+0xb00>)
    2bea:	483e      	ldr	r0, [pc, #248]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bec:	f7fd fec2 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bf0:	2300      	movs	r3, #0
    2bf2:	220a      	movs	r2, #10
    2bf4:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2bf8:	483a      	ldr	r0, [pc, #232]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bfa:	f00b f96b 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2bfe:	493c      	ldr	r1, [pc, #240]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2c00:	4838      	ldr	r0, [pc, #224]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c02:	f7fd fec5 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c06:	494e      	ldr	r1, [pc, #312]	; (2d40 <LEDDebug(LEDStruct&)+0xb04>)
    2c08:	4836      	ldr	r0, [pc, #216]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c0a:	f7fd feb3 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c0e:	2300      	movs	r3, #0
    2c10:	220a      	movs	r2, #10
    2c12:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    2c16:	4833      	ldr	r0, [pc, #204]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c18:	f00b f95c 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2c1c:	4934      	ldr	r1, [pc, #208]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2c1e:	4831      	ldr	r0, [pc, #196]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c20:	f7fd feb6 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c24:	4947      	ldr	r1, [pc, #284]	; (2d44 <LEDDebug(LEDStruct&)+0xb08>)
    2c26:	482f      	ldr	r0, [pc, #188]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c28:	f7fd fea4 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c2c:	2300      	movs	r3, #0
    2c2e:	220a      	movs	r2, #10
    2c30:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2c34:	482b      	ldr	r0, [pc, #172]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c36:	f00b f94d 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2c3a:	492d      	ldr	r1, [pc, #180]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2c3c:	4829      	ldr	r0, [pc, #164]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c3e:	f7fd fea7 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c42:	4941      	ldr	r1, [pc, #260]	; (2d48 <LEDDebug(LEDStruct&)+0xb0c>)
    2c44:	4827      	ldr	r0, [pc, #156]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c46:	f7fd fe95 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c4a:	2300      	movs	r3, #0
    2c4c:	220a      	movs	r2, #10
    2c4e:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2c52:	4824      	ldr	r0, [pc, #144]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c54:	f00b f93e 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2c58:	4925      	ldr	r1, [pc, #148]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2c5a:	4822      	ldr	r0, [pc, #136]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c5c:	f7fd fe98 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c60:	493a      	ldr	r1, [pc, #232]	; (2d4c <LEDDebug(LEDStruct&)+0xb10>)
    2c62:	4820      	ldr	r0, [pc, #128]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c64:	f7fd fe86 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c68:	2300      	movs	r3, #0
    2c6a:	220a      	movs	r2, #10
    2c6c:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2c70:	481c      	ldr	r0, [pc, #112]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c72:	f00b f92f 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    2c76:	491e      	ldr	r1, [pc, #120]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2c78:	481a      	ldr	r0, [pc, #104]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c7a:	f7fd fe89 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c7e:	4934      	ldr	r1, [pc, #208]	; (2d50 <LEDDebug(LEDStruct&)+0xb14>)
    2c80:	4818      	ldr	r0, [pc, #96]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c82:	f7fd fe77 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c86:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2c8a:	e518      	b.n	26be <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2c8c:	4931      	ldr	r1, [pc, #196]	; (2d54 <LEDDebug(LEDStruct&)+0xb18>)
    2c8e:	4815      	ldr	r0, [pc, #84]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c90:	f7fd fe7e 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c94:	4930      	ldr	r1, [pc, #192]	; (2d58 <LEDDebug(LEDStruct&)+0xb1c>)
    2c96:	4813      	ldr	r0, [pc, #76]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c98:	f7fd fe6c 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c9c:	2300      	movs	r3, #0
    2c9e:	220a      	movs	r2, #10
    2ca0:	f894 1769 	ldrb.w	r1, [r4, #1897]	; 0x769
    2ca4:	480f      	ldr	r0, [pc, #60]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ca6:	f00b f915 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2caa:	4911      	ldr	r1, [pc, #68]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2cac:	480d      	ldr	r0, [pc, #52]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2cae:	f7fd fe6f 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2cb2:	492a      	ldr	r1, [pc, #168]	; (2d5c <LEDDebug(LEDStruct&)+0xb20>)
    2cb4:	480b      	ldr	r0, [pc, #44]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2cb6:	f7fd fe5d 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2cba:	2300      	movs	r3, #0
    2cbc:	220a      	movs	r2, #10
    2cbe:	f894 176a 	ldrb.w	r1, [r4, #1898]	; 0x76a
    2cc2:	4808      	ldr	r0, [pc, #32]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2cc4:	f00b f906 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2cc8:	4909      	ldr	r1, [pc, #36]	; (2cf0 <LEDDebug(LEDStruct&)+0xab4>)
    2cca:	4806      	ldr	r0, [pc, #24]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ccc:	f7fd fe60 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2cd0:	4923      	ldr	r1, [pc, #140]	; (2d60 <LEDDebug(LEDStruct&)+0xb24>)
    2cd2:	4804      	ldr	r0, [pc, #16]	; (2ce4 <LEDDebug(LEDStruct&)+0xaa8>)
    2cd4:	f7fd fe4e 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2cd8:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2cdc:	e4ef      	b.n	26be <LEDDebug(LEDStruct&)+0x482>
    2cde:	bf00      	nop
    2ce0:	000103b8 	.word	0x000103b8
    2ce4:	1fff8790 	.word	0x1fff8790
    2ce8:	000103dc 	.word	0x000103dc
    2cec:	000103f0 	.word	0x000103f0
    2cf0:	0000ff74 	.word	0x0000ff74
    2cf4:	0001040c 	.word	0x0001040c
    2cf8:	00010424 	.word	0x00010424
    2cfc:	0001043c 	.word	0x0001043c
    2d00:	00010454 	.word	0x00010454
    2d04:	00010470 	.word	0x00010470
    2d08:	0001064c 	.word	0x0001064c
    2d0c:	00010670 	.word	0x00010670
    2d10:	00010688 	.word	0x00010688
    2d14:	0001069c 	.word	0x0001069c
    2d18:	000106b4 	.word	0x000106b4
    2d1c:	000106cc 	.word	0x000106cc
    2d20:	000106e4 	.word	0x000106e4
    2d24:	00010074 	.word	0x00010074
    2d28:	00010708 	.word	0x00010708
    2d2c:	00010720 	.word	0x00010720
    2d30:	00010738 	.word	0x00010738
    2d34:	0001074c 	.word	0x0001074c
    2d38:	00010760 	.word	0x00010760
    2d3c:	00010784 	.word	0x00010784
    2d40:	0001079c 	.word	0x0001079c
    2d44:	000107b4 	.word	0x000107b4
    2d48:	000107cc 	.word	0x000107cc
    2d4c:	000107e4 	.word	0x000107e4
    2d50:	000107f8 	.word	0x000107f8
    2d54:	00010810 	.word	0x00010810
    2d58:	00010834 	.word	0x00010834
    2d5c:	00010844 	.word	0x00010844
    2d60:	00010860 	.word	0x00010860
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case LIGHTSABER:
			Serial.println("============LIGHTSABER============");
    2d64:	49af      	ldr	r1, [pc, #700]	; (3024 <LEDDebug(LEDStruct&)+0xde8>)
    2d66:	48b0      	ldr	r0, [pc, #704]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2d68:	f7fd fe12 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d6c:	49af      	ldr	r1, [pc, #700]	; (302c <LEDDebug(LEDStruct&)+0xdf0>)
    2d6e:	48ae      	ldr	r0, [pc, #696]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2d70:	f7fd fe00 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d74:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2d78:	48ab      	ldr	r0, [pc, #684]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2d7a:	f00b f8eb 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) use_palette:\t");
			Serial.print(leds.use_palette);
			Serial.println("\t||");
    2d7e:	49ac      	ldr	r1, [pc, #688]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2d80:	48a9      	ldr	r0, [pc, #676]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2d82:	f7fd fe05 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d86:	49ab      	ldr	r1, [pc, #684]	; (3034 <LEDDebug(LEDStruct&)+0xdf8>)
    2d88:	48a7      	ldr	r0, [pc, #668]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2d8a:	f7fd fdf3 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d8e:	2300      	movs	r3, #0
    2d90:	220a      	movs	r2, #10
    2d92:	f894 182e 	ldrb.w	r1, [r4, #2094]	; 0x82e
    2d96:	48a4      	ldr	r0, [pc, #656]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2d98:	f00b f89c 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) blade_color:\t");
			Serial.print(leds.blade_color);
			Serial.println("\t||");
    2d9c:	49a4      	ldr	r1, [pc, #656]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2d9e:	48a2      	ldr	r0, [pc, #648]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2da0:	f7fd fdf6 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2da4:	49a4      	ldr	r1, [pc, #656]	; (3038 <LEDDebug(LEDStruct&)+0xdfc>)
    2da6:	48a0      	ldr	r0, [pc, #640]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2da8:	f7fd fde4 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2dac:	2300      	movs	r3, #0
    2dae:	220a      	movs	r2, #10
    2db0:	f894 183d 	ldrb.w	r1, [r4, #2109]	; 0x83d
    2db4:	489c      	ldr	r0, [pc, #624]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2db6:	f00b f88d 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) delta_bright:\t");
			Serial.print(leds.delta_bright);
			Serial.println("\t||");
    2dba:	499d      	ldr	r1, [pc, #628]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2dbc:	489a      	ldr	r0, [pc, #616]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2dbe:	f7fd fde7 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2dc2:	499e      	ldr	r1, [pc, #632]	; (303c <LEDDebug(LEDStruct&)+0xe00>)
    2dc4:	4898      	ldr	r0, [pc, #608]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2dc6:	f7fd fdd5 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2dca:	f8b4 1830 	ldrh.w	r1, [r4, #2096]	; 0x830
    2dce:	4896      	ldr	r0, [pc, #600]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2dd0:	f00b f8c0 	bl	df54 <Print::print(long)>
			Serial.print("|| (d) hold_time:\t");
			Serial.print(leds.hold_time);
			Serial.println("\t||");
    2dd4:	4996      	ldr	r1, [pc, #600]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2dd6:	4894      	ldr	r0, [pc, #592]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2dd8:	f7fd fdda 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ddc:	4998      	ldr	r1, [pc, #608]	; (3040 <LEDDebug(LEDStruct&)+0xe04>)
    2dde:	4892      	ldr	r0, [pc, #584]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2de0:	f7fd fdc8 	bl	974 <Print::write(char const*)>
			Serial.print("|| saber_stage:\t\t");
			switch (leds.saber_stage) {
    2de4:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    2de8:	2b01      	cmp	r3, #1
    2dea:	f000 8181 	beq.w	30f0 <LEDDebug(LEDStruct&)+0xeb4>
    2dee:	f0c0 81b1 	bcc.w	3154 <LEDDebug(LEDStruct&)+0xf18>
    2df2:	2b02      	cmp	r3, #2
    2df4:	d103      	bne.n	2dfe <LEDDebug(LEDStruct&)+0xbc2>
    2df6:	4993      	ldr	r1, [pc, #588]	; (3044 <LEDDebug(LEDStruct&)+0xe08>)
    2df8:	488b      	ldr	r0, [pc, #556]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2dfa:	f7fd fdbb 	bl	974 <Print::write(char const*)>
				case UP: Serial.print("UP"); break;
				case DOWN: Serial.print("DOWN"); break;
				case WAIT: Serial.print("WAIT"); break;
			}
			Serial.println("\t||");
    2dfe:	498c      	ldr	r1, [pc, #560]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2e00:	4889      	ldr	r0, [pc, #548]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e02:	f7fd fdc5 	bl	990 <Print::println(char const*)>
    2e06:	4990      	ldr	r1, [pc, #576]	; (3048 <LEDDebug(LEDStruct&)+0xe0c>)
    2e08:	4887      	ldr	r0, [pc, #540]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e0a:	f7fd fdb3 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2e0e:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    2e12:	e454      	b.n	26be <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.tip_pos);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    2e14:	498d      	ldr	r1, [pc, #564]	; (304c <LEDDebug(LEDStruct&)+0xe10>)
    2e16:	4884      	ldr	r0, [pc, #528]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e18:	f7fd fdba 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e1c:	498c      	ldr	r1, [pc, #560]	; (3050 <LEDDebug(LEDStruct&)+0xe14>)
    2e1e:	4882      	ldr	r0, [pc, #520]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e20:	f7fd fda8 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2e24:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2e28:	487f      	ldr	r0, [pc, #508]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e2a:	f00b f893 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2e2e:	4980      	ldr	r1, [pc, #512]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2e30:	487d      	ldr	r0, [pc, #500]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e32:	f7fd fdad 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e36:	4987      	ldr	r1, [pc, #540]	; (3054 <LEDDebug(LEDStruct&)+0xe18>)
    2e38:	487b      	ldr	r0, [pc, #492]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e3a:	f7fd fd9b 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e3e:	2300      	movs	r3, #0
    2e40:	220a      	movs	r2, #10
    2e42:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    2e46:	4878      	ldr	r0, [pc, #480]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e48:	f00b f844 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    2e4c:	4978      	ldr	r1, [pc, #480]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2e4e:	4876      	ldr	r0, [pc, #472]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e50:	f7fd fd9e 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e54:	4980      	ldr	r1, [pc, #512]	; (3058 <LEDDebug(LEDStruct&)+0xe1c>)
    2e56:	4874      	ldr	r0, [pc, #464]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e58:	f7fd fd8c 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e5c:	2300      	movs	r3, #0
    2e5e:	220a      	movs	r2, #10
    2e60:	f894 1840 	ldrb.w	r1, [r4, #2112]	; 0x840
    2e64:	4870      	ldr	r0, [pc, #448]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e66:	f00b f835 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    2e6a:	4971      	ldr	r1, [pc, #452]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2e6c:	486e      	ldr	r0, [pc, #440]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e6e:	f7fd fd8f 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e72:	497a      	ldr	r1, [pc, #488]	; (305c <LEDDebug(LEDStruct&)+0xe20>)
    2e74:	486c      	ldr	r0, [pc, #432]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e76:	f7fd fd7d 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2e7a:	f894 1841 	ldrb.w	r1, [r4, #2113]	; 0x841
    2e7e:	486a      	ldr	r0, [pc, #424]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e80:	f00b f868 	bl	df54 <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    2e84:	496a      	ldr	r1, [pc, #424]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2e86:	4868      	ldr	r0, [pc, #416]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e88:	f7fd fd82 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e8c:	4974      	ldr	r1, [pc, #464]	; (3060 <LEDDebug(LEDStruct&)+0xe24>)
    2e8e:	4866      	ldr	r0, [pc, #408]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e90:	f7fd fd70 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2e94:	f894 1842 	ldrb.w	r1, [r4, #2114]	; 0x842
    2e98:	e411      	b.n	26be <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		case PLASMA:
			Serial.println("=============PLASMA===============");
    2e9a:	4972      	ldr	r1, [pc, #456]	; (3064 <LEDDebug(LEDStruct&)+0xe28>)
    2e9c:	4862      	ldr	r0, [pc, #392]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2e9e:	f7fd fd77 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ea2:	496b      	ldr	r1, [pc, #428]	; (3050 <LEDDebug(LEDStruct&)+0xe14>)
    2ea4:	4860      	ldr	r0, [pc, #384]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2ea6:	f7fd fd65 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2eaa:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2eae:	485e      	ldr	r0, [pc, #376]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2eb0:	f00b f850 	bl	df54 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2eb4:	495e      	ldr	r1, [pc, #376]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2eb6:	485c      	ldr	r0, [pc, #368]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2eb8:	f7fd fd6a 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ebc:	496a      	ldr	r1, [pc, #424]	; (3068 <LEDDebug(LEDStruct&)+0xe2c>)
    2ebe:	485a      	ldr	r0, [pc, #360]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2ec0:	f7fd fd58 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ec4:	2300      	movs	r3, #0
    2ec6:	220a      	movs	r2, #10
    2ec8:	f894 184c 	ldrb.w	r1, [r4, #2124]	; 0x84c
    2ecc:	4856      	ldr	r0, [pc, #344]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2ece:	f00b f801 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) plasma_beat1:\t");
			Serial.print(leds.plasma_beat1);
			Serial.println("\t||");
    2ed2:	4957      	ldr	r1, [pc, #348]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2ed4:	4854      	ldr	r0, [pc, #336]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2ed6:	f7fd fd5b 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2eda:	4964      	ldr	r1, [pc, #400]	; (306c <LEDDebug(LEDStruct&)+0xe30>)
    2edc:	4852      	ldr	r0, [pc, #328]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2ede:	f7fd fd49 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ee2:	2300      	movs	r3, #0
    2ee4:	220a      	movs	r2, #10
    2ee6:	f894 184d 	ldrb.w	r1, [r4, #2125]	; 0x84d
    2eea:	484f      	ldr	r0, [pc, #316]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2eec:	f00a fff2 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) plasma_beat2:\t");
			Serial.print(leds.plasma_beat2);
			Serial.println("\t||");
    2ef0:	494f      	ldr	r1, [pc, #316]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2ef2:	484d      	ldr	r0, [pc, #308]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2ef4:	f7fd fd4c 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ef8:	495d      	ldr	r1, [pc, #372]	; (3070 <LEDDebug(LEDStruct&)+0xe34>)
    2efa:	484b      	ldr	r0, [pc, #300]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2efc:	f7fd fd3a 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f00:	2300      	movs	r3, #0
    2f02:	220a      	movs	r2, #10
    2f04:	f894 184e 	ldrb.w	r1, [r4, #2126]	; 0x84e
    2f08:	4847      	ldr	r0, [pc, #284]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f0a:	f00a ffe3 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) plasma_beat3:\t");
			Serial.print(leds.plasma_beat3);
			Serial.println("\t||");
    2f0e:	4948      	ldr	r1, [pc, #288]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2f10:	4845      	ldr	r0, [pc, #276]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f12:	f7fd fd3d 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f16:	4957      	ldr	r1, [pc, #348]	; (3074 <LEDDebug(LEDStruct&)+0xe38>)
    2f18:	4843      	ldr	r0, [pc, #268]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f1a:	f7fd fd2b 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f1e:	2300      	movs	r3, #0
    2f20:	220a      	movs	r2, #10
    2f22:	f894 1851 	ldrb.w	r1, [r4, #2129]	; 0x851
    2f26:	4840      	ldr	r0, [pc, #256]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f28:	f00a ffd4 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) plasma_range1:\t");
			Serial.print(leds.plasma_range1);
			Serial.println("\t||");
    2f2c:	4940      	ldr	r1, [pc, #256]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2f2e:	483e      	ldr	r0, [pc, #248]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f30:	f7fd fd2e 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f34:	4950      	ldr	r1, [pc, #320]	; (3078 <LEDDebug(LEDStruct&)+0xe3c>)
    2f36:	483c      	ldr	r0, [pc, #240]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f38:	f7fd fd1c 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f3c:	f894 1852 	ldrb.w	r1, [r4, #2130]	; 0x852
    2f40:	f7ff ba96 	b.w	2470 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.out_min2);
			Serial.println("\t||");
			break;

		case WAVES:
			Serial.println("==============WAVES===============");
    2f44:	494d      	ldr	r1, [pc, #308]	; (307c <LEDDebug(LEDStruct&)+0xe40>)
    2f46:	4838      	ldr	r0, [pc, #224]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f48:	f7fd fd22 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f4c:	494c      	ldr	r1, [pc, #304]	; (3080 <LEDDebug(LEDStruct&)+0xe44>)
    2f4e:	4836      	ldr	r0, [pc, #216]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f50:	f7fd fd10 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f54:	2300      	movs	r3, #0
    2f56:	220a      	movs	r2, #10
    2f58:	f894 1859 	ldrb.w	r1, [r4, #2137]	; 0x859
    2f5c:	4832      	ldr	r0, [pc, #200]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f5e:	f00a ffb9 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) wave_beat:\t");
			Serial.print(leds.wave_beat);
			Serial.println("\t||");
    2f62:	4933      	ldr	r1, [pc, #204]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2f64:	4830      	ldr	r0, [pc, #192]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f66:	f7fd fd13 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f6a:	4946      	ldr	r1, [pc, #280]	; (3084 <LEDDebug(LEDStruct&)+0xe48>)
    2f6c:	482e      	ldr	r0, [pc, #184]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f6e:	f7fd fd01 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f72:	f894 185a 	ldrb.w	r1, [r4, #2138]	; 0x85a
    2f76:	f7ff ba7b 	b.w	2470 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.wave_speed);
			Serial.println("\t||");
			break;

		default:
			Serial.println("");
    2f7a:	4943      	ldr	r1, [pc, #268]	; (3088 <LEDDebug(LEDStruct&)+0xe4c>)
    2f7c:	482a      	ldr	r0, [pc, #168]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f7e:	f7fd fd07 	bl	990 <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2f82:	4942      	ldr	r1, [pc, #264]	; (308c <LEDDebug(LEDStruct&)+0xe50>)
    2f84:	4828      	ldr	r0, [pc, #160]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f86:	f7fd fd03 	bl	990 <Print::println(char const*)>
			Serial.println("");
    2f8a:	493f      	ldr	r1, [pc, #252]	; (3088 <LEDDebug(LEDStruct&)+0xe4c>)
    2f8c:	4826      	ldr	r0, [pc, #152]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f8e:	f7fd fcff 	bl	990 <Print::println(char const*)>
			break;
    2f92:	f7ff ba76 	b.w	2482 <LEDDebug(LEDStruct&)+0x246>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2f96:	493e      	ldr	r1, [pc, #248]	; (3090 <LEDDebug(LEDStruct&)+0xe54>)
    2f98:	4823      	ldr	r0, [pc, #140]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2f9a:	f7fd fcf9 	bl	990 <Print::println(char const*)>
    2f9e:	f7ff b965 	b.w	226c <LEDDebug(LEDStruct&)+0x30>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2fa2:	493c      	ldr	r1, [pc, #240]	; (3094 <LEDDebug(LEDStruct&)+0xe58>)
    2fa4:	4820      	ldr	r0, [pc, #128]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2fa6:	f7fd fcf3 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2faa:	493b      	ldr	r1, [pc, #236]	; (3098 <LEDDebug(LEDStruct&)+0xe5c>)
    2fac:	481e      	ldr	r0, [pc, #120]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2fae:	f7fd fce1 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2fb2:	2300      	movs	r3, #0
    2fb4:	220a      	movs	r2, #10
    2fb6:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2fba:	481b      	ldr	r0, [pc, #108]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2fbc:	f00a ff8a 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				default: break;
			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2fc0:	491b      	ldr	r1, [pc, #108]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2fc2:	4819      	ldr	r0, [pc, #100]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2fc4:	f7fd fce4 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2fc8:	4934      	ldr	r1, [pc, #208]	; (309c <LEDDebug(LEDStruct&)+0xe60>)
    2fca:	4817      	ldr	r0, [pc, #92]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2fcc:	f7fd fcd2 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2fd0:	2300      	movs	r3, #0
    2fd2:	220a      	movs	r2, #10
    2fd4:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2fd8:	4813      	ldr	r0, [pc, #76]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2fda:	f00a ff7b 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2fde:	4914      	ldr	r1, [pc, #80]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    2fe0:	4811      	ldr	r0, [pc, #68]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2fe2:	f7fd fcd5 	bl	990 <Print::println(char const*)>
			if (!leds.fire_sync) {
    2fe6:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    2fea:	2d00      	cmp	r5, #0
    2fec:	d05c      	beq.n	30a8 <LEDDebug(LEDStruct&)+0xe6c>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2fee:	492c      	ldr	r1, [pc, #176]	; (30a0 <LEDDebug(LEDStruct&)+0xe64>)
    2ff0:	480d      	ldr	r0, [pc, #52]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2ff2:	f7fd fcbf 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ff6:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    2ffa:	480b      	ldr	r0, [pc, #44]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    2ffc:	f00a ffaa 	bl	df54 <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    3000:	490b      	ldr	r1, [pc, #44]	; (3030 <LEDDebug(LEDStruct&)+0xdf4>)
    3002:	4809      	ldr	r0, [pc, #36]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    3004:	f7fd fcc4 	bl	990 <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    3008:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    300c:	3b10      	subs	r3, #16
    300e:	2b01      	cmp	r3, #1
    3010:	f63f aa37 	bhi.w	2482 <LEDDebug(LEDStruct&)+0x246>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3014:	4923      	ldr	r1, [pc, #140]	; (30a4 <LEDDebug(LEDStruct&)+0xe68>)
    3016:	4804      	ldr	r0, [pc, #16]	; (3028 <LEDDebug(LEDStruct&)+0xdec>)
    3018:	f7fd fcac 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    301c:	f894 131b 	ldrb.w	r1, [r4, #795]	; 0x31b
    3020:	f7ff ba26 	b.w	2470 <LEDDebug(LEDStruct&)+0x234>
    3024:	00010878 	.word	0x00010878
    3028:	1fff8790 	.word	0x1fff8790
    302c:	0001089c 	.word	0x0001089c
    3030:	0000ff74 	.word	0x0000ff74
    3034:	000108b4 	.word	0x000108b4
    3038:	000108cc 	.word	0x000108cc
    303c:	000108e4 	.word	0x000108e4
    3040:	000108f8 	.word	0x000108f8
    3044:	0001090c 	.word	0x0001090c
    3048:	0001091c 	.word	0x0001091c
    304c:	0001092c 	.word	0x0001092c
    3050:	00010074 	.word	0x00010074
    3054:	00010950 	.word	0x00010950
    3058:	00010968 	.word	0x00010968
    305c:	00010984 	.word	0x00010984
    3060:	000109a0 	.word	0x000109a0
    3064:	000109b8 	.word	0x000109b8
    3068:	000109dc 	.word	0x000109dc
    306c:	000109f4 	.word	0x000109f4
    3070:	00010a0c 	.word	0x00010a0c
    3074:	00010a24 	.word	0x00010a24
    3078:	00010a3c 	.word	0x00010a3c
    307c:	00010adc 	.word	0x00010adc
    3080:	00010b00 	.word	0x00010b00
    3084:	00010b14 	.word	0x00010b14
    3088:	000100b0 	.word	0x000100b0
    308c:	00010b28 	.word	0x00010b28
    3090:	0000ff3c 	.word	0x0000ff3c
    3094:	00010230 	.word	0x00010230
    3098:	0001029c 	.word	0x0001029c
    309c:	000102b0 	.word	0x000102b0
    30a0:	000102ec 	.word	0x000102ec
    30a4:	000102fc 	.word	0x000102fc
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    30a8:	492d      	ldr	r1, [pc, #180]	; (3160 <LEDDebug(LEDStruct&)+0xf24>)
    30aa:	482e      	ldr	r0, [pc, #184]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    30ac:	f7fd fc62 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    30b0:	462b      	mov	r3, r5
    30b2:	220a      	movs	r2, #10
    30b4:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    30b8:	482a      	ldr	r0, [pc, #168]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    30ba:	f00a ff0b 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    30be:	492a      	ldr	r1, [pc, #168]	; (3168 <LEDDebug(LEDStruct&)+0xf2c>)
    30c0:	4828      	ldr	r0, [pc, #160]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    30c2:	f7fd fc65 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    30c6:	4929      	ldr	r1, [pc, #164]	; (316c <LEDDebug(LEDStruct&)+0xf30>)
    30c8:	4826      	ldr	r0, [pc, #152]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    30ca:	f7fd fc53 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    30ce:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    30d2:	4824      	ldr	r0, [pc, #144]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    30d4:	462b      	mov	r3, r5
    30d6:	220a      	movs	r2, #10
    30d8:	f00a fefc 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    30dc:	4922      	ldr	r1, [pc, #136]	; (3168 <LEDDebug(LEDStruct&)+0xf2c>)
    30de:	4821      	ldr	r0, [pc, #132]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    30e0:	f7fd fc56 	bl	990 <Print::println(char const*)>
    30e4:	e783      	b.n	2fee <LEDDebug(LEDStruct&)+0xdb2>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    30e6:	4922      	ldr	r1, [pc, #136]	; (3170 <LEDDebug(LEDStruct&)+0xf34>)
    30e8:	481e      	ldr	r0, [pc, #120]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    30ea:	f7fd fc51 	bl	990 <Print::println(char const*)>
    30ee:	e4b0      	b.n	2a52 <LEDDebug(LEDStruct&)+0x816>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    30f0:	4920      	ldr	r1, [pc, #128]	; (3174 <LEDDebug(LEDStruct&)+0xf38>)
    30f2:	481c      	ldr	r0, [pc, #112]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    30f4:	f7fd fc3e 	bl	974 <Print::write(char const*)>
    30f8:	e681      	b.n	2dfe <LEDDebug(LEDStruct&)+0xbc2>
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
    30fa:	491f      	ldr	r1, [pc, #124]	; (3178 <LEDDebug(LEDStruct&)+0xf3c>)
    30fc:	4819      	ldr	r0, [pc, #100]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    30fe:	f7fd fc47 	bl	990 <Print::println(char const*)>
    3102:	f7ff ba77 	b.w	25f4 <LEDDebug(LEDStruct&)+0x3b8>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    3106:	491d      	ldr	r1, [pc, #116]	; (317c <LEDDebug(LEDStruct&)+0xf40>)
    3108:	4816      	ldr	r0, [pc, #88]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    310a:	f7fd fc41 	bl	990 <Print::println(char const*)>
    310e:	e74c      	b.n	2faa <LEDDebug(LEDStruct&)+0xd6e>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    3110:	491b      	ldr	r1, [pc, #108]	; (3180 <LEDDebug(LEDStruct&)+0xf44>)
    3112:	4814      	ldr	r0, [pc, #80]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    3114:	f7fd fc3c 	bl	990 <Print::println(char const*)>
    3118:	e747      	b.n	2faa <LEDDebug(LEDStruct&)+0xd6e>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    311a:	491a      	ldr	r1, [pc, #104]	; (3184 <LEDDebug(LEDStruct&)+0xf48>)
    311c:	4811      	ldr	r0, [pc, #68]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    311e:	f7fd fc37 	bl	990 <Print::println(char const*)>
    3122:	e742      	b.n	2faa <LEDDebug(LEDStruct&)+0xd6e>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    3124:	4918      	ldr	r1, [pc, #96]	; (3188 <LEDDebug(LEDStruct&)+0xf4c>)
    3126:	480f      	ldr	r0, [pc, #60]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    3128:	f7fd fc32 	bl	990 <Print::println(char const*)>
    312c:	e73d      	b.n	2faa <LEDDebug(LEDStruct&)+0xd6e>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    312e:	4917      	ldr	r1, [pc, #92]	; (318c <LEDDebug(LEDStruct&)+0xf50>)
    3130:	480c      	ldr	r0, [pc, #48]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    3132:	f7fd fc2d 	bl	990 <Print::println(char const*)>
    3136:	e738      	b.n	2faa <LEDDebug(LEDStruct&)+0xd6e>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    3138:	4915      	ldr	r1, [pc, #84]	; (3190 <LEDDebug(LEDStruct&)+0xf54>)
    313a:	480a      	ldr	r0, [pc, #40]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    313c:	f7fd fc28 	bl	990 <Print::println(char const*)>
    3140:	f7ff b9e0 	b.w	2504 <LEDDebug(LEDStruct&)+0x2c8>

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
    3144:	4913      	ldr	r1, [pc, #76]	; (3194 <LEDDebug(LEDStruct&)+0xf58>)
    3146:	4807      	ldr	r0, [pc, #28]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    3148:	f7fd fc22 	bl	990 <Print::println(char const*)>
    314c:	f7ff ba52 	b.w	25f4 <LEDDebug(LEDStruct&)+0x3b8>
    3150:	4911      	ldr	r1, [pc, #68]	; (3198 <LEDDebug(LEDStruct&)+0xf5c>)
    3152:	e477      	b.n	2a44 <LEDDebug(LEDStruct&)+0x808>
    3154:	4911      	ldr	r1, [pc, #68]	; (319c <LEDDebug(LEDStruct&)+0xf60>)
    3156:	4803      	ldr	r0, [pc, #12]	; (3164 <LEDDebug(LEDStruct&)+0xf28>)
    3158:	f7fd fc0c 	bl	974 <Print::write(char const*)>
    315c:	e64f      	b.n	2dfe <LEDDebug(LEDStruct&)+0xbc2>
    315e:	bf00      	nop
    3160:	000102c4 	.word	0x000102c4
    3164:	1fff8790 	.word	0x1fff8790
    3168:	0000ff74 	.word	0x0000ff74
    316c:	000102d8 	.word	0x000102d8
    3170:	00010400 	.word	0x00010400
    3174:	00010914 	.word	0x00010914
    3178:	00010134 	.word	0x00010134
    317c:	0001020c 	.word	0x0001020c
    3180:	000101e8 	.word	0x000101e8
    3184:	000101c4 	.word	0x000101c4
    3188:	00010278 	.word	0x00010278
    318c:	00010254 	.word	0x00010254
    3190:	00010008 	.word	0x00010008
    3194:	00010158 	.word	0x00010158
    3198:	000103f8 	.word	0x000103f8
    319c:	000103fc 	.word	0x000103fc

000031a0 <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    31a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31a4:	b08d      	sub	sp, #52	; 0x34
    31a6:	2134      	movs	r1, #52	; 0x34
    31a8:	4605      	mov	r5, r0
    31aa:	9009      	str	r0, [sp, #36]	; 0x24
    31ac:	4846      	ldr	r0, [pc, #280]	; (32c8 <change_palette(LEDStruct&) [clone .part.11]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    31ae:	4c47      	ldr	r4, [pc, #284]	; (32cc <change_palette(LEDStruct&) [clone .part.11]+0x12c>)
    31b0:	f00a fc7c 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    31b4:	4846      	ldr	r0, [pc, #280]	; (32d0 <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    31b6:	f00a fe7d 	bl	deb4 <Print::println()>
    31ba:	2133      	movs	r1, #51	; 0x33
    31bc:	4845      	ldr	r0, [pc, #276]	; (32d4 <change_palette(LEDStruct&) [clone .part.11]+0x134>)
    31be:	f00a fc75 	bl	daac <usb_serial_write>
    31c2:	4843      	ldr	r0, [pc, #268]	; (32d0 <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    31c4:	f00a fe76 	bl	deb4 <Print::println()>
    31c8:	2133      	movs	r1, #51	; 0x33
    31ca:	4843      	ldr	r0, [pc, #268]	; (32d8 <change_palette(LEDStruct&) [clone .part.11]+0x138>)
    31cc:	f00a fc6e 	bl	daac <usb_serial_write>
    31d0:	483f      	ldr	r0, [pc, #252]	; (32d0 <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    31d2:	f00a fe6f 	bl	deb4 <Print::println()>
    31d6:	4841      	ldr	r0, [pc, #260]	; (32dc <change_palette(LEDStruct&) [clone .part.11]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    31d8:	4a41      	ldr	r2, [pc, #260]	; (32e0 <change_palette(LEDStruct&) [clone .part.11]+0x140>)
    31da:	8803      	ldrh	r3, [r0, #0]
    31dc:	7811      	ldrb	r1, [r2, #0]
    31de:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    31e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    31e6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    31ea:	3319      	adds	r3, #25
    31ec:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31ee:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    31f2:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31f4:	fb12 f201 	smulbb	r2, r2, r1
    31f8:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31fa:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    31fc:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    3200:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    3204:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    3206:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    320a:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    320c:	3701      	adds	r7, #1
        } while ( u.index != 255);
    320e:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3210:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    3212:	d1f8      	bne.n	3206 <change_palette(LEDStruct&) [clone .part.11]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3214:	f8d8 3000 	ldr.w	r3, [r8]
    3218:	9a09      	ldr	r2, [sp, #36]	; 0x24
    321a:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    321c:	ea4f 6913 	mov.w	r9, r3, lsr #24
    3220:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    3224:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    3228:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    322c:	f04f 33ff 	mov.w	r3, #4294967295
    3230:	9207      	str	r2, [sp, #28]
    3232:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    3234:	2400      	movs	r4, #0
    3236:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3238:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    323c:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    323e:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    3242:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3246:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    324a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    324c:	b2f9      	uxtb	r1, r7
    324e:	f3c5 6507 	ubfx	r5, r5, #24, #8
    3252:	9104      	str	r1, [sp, #16]
    3254:	b2e9      	uxtb	r1, r5
    3256:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    3258:	fa5f f18c 	uxtb.w	r1, ip
    325c:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    325e:	9908      	ldr	r1, [sp, #32]
    3260:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3262:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    3264:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3268:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    326c:	d80c      	bhi.n	3288 <change_palette(LEDStruct&) [clone .part.11]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    326e:	9906      	ldr	r1, [sp, #24]
    3270:	458c      	cmp	ip, r1
    3272:	dc07      	bgt.n	3284 <change_palette(LEDStruct&) [clone .part.11]+0xe4>
    3274:	290f      	cmp	r1, #15
    3276:	d005      	beq.n	3284 <change_palette(LEDStruct&) [clone .part.11]+0xe4>
                    istart8 = lastSlotUsed + 1;
    3278:	3101      	adds	r1, #1
    327a:	b2c9      	uxtb	r1, r1
    327c:	428b      	cmp	r3, r1
    327e:	9103      	str	r1, [sp, #12]
    3280:	bf38      	it	cc
    3282:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    3284:	b259      	sxtb	r1, r3
    3286:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3288:	a90b      	add	r1, sp, #44	; 0x2c
    328a:	9100      	str	r1, [sp, #0]
    328c:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    328e:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    3292:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    3296:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    329a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    329e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    32a2:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    32a6:	f008 fb5d 	bl	b964 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    32aa:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    32ac:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    32b0:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    32b4:	46ca      	mov	sl, r9
    32b6:	d1bf      	bne.n	3238 <change_palette(LEDStruct&) [clone .part.11]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    32b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32ba:	f893 0229 	ldrb.w	r0, [r3, #553]	; 0x229
    32be:	f7fe fcaf 	bl	1c20 <print_palette(unsigned char)>
	}
}
    32c2:	b00d      	add	sp, #52	; 0x34
    32c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32c8:	00010b70 	.word	0x00010b70
    32cc:	000116b0 	.word	0x000116b0
    32d0:	1fff8790 	.word	0x1fff8790
    32d4:	00010ba8 	.word	0x00010ba8
    32d8:	00010bdc 	.word	0x00010bdc
    32dc:	1fff8788 	.word	0x1fff8788
    32e0:	1fff8758 	.word	0x1fff8758

000032e4 <juggle_update(LEDStruct&)>:
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    32e4:	4b24      	ldr	r3, [pc, #144]	; (3378 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    32e6:	4a25      	ldr	r2, [pc, #148]	; (337c <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    32e8:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    32ea:	2100      	movs	r1, #0
    32ec:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    32ee:	2b07      	cmp	r3, #7
    32f0:	d809      	bhi.n	3306 <juggle_update(LEDStruct&)+0x22>
    32f2:	e8df f003 	tbb	[pc, r3]
    32f6:	1c13      	.short	0x1c13
    32f8:	04342e25 	.word	0x04342e25
    32fc:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    32fe:	4b20      	ldr	r3, [pc, #128]	; (3380 <juggle_update(LEDStruct&)+0x9c>)
    3300:	881b      	ldrh	r3, [r3, #0]
    3302:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3306:	f7fe bf99 	b.w	223c <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    330a:	4b1d      	ldr	r3, [pc, #116]	; (3380 <juggle_update(LEDStruct&)+0x9c>)
    330c:	881b      	ldrh	r3, [r3, #0]
    330e:	3300      	adds	r3, #0
    3310:	bf18      	it	ne
    3312:	2301      	movne	r3, #1
    3314:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    3318:	f7fe bf90 	b.w	223c <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    331c:	4b18      	ldr	r3, [pc, #96]	; (3380 <juggle_update(LEDStruct&)+0x9c>)
    331e:	881b      	ldrh	r3, [r3, #0]
    3320:	3300      	adds	r3, #0
    3322:	bf18      	it	ne
    3324:	2301      	movne	r3, #1
    3326:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    332a:	f7fe bf87 	b.w	223c <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    332e:	4b14      	ldr	r3, [pc, #80]	; (3380 <juggle_update(LEDStruct&)+0x9c>)
    3330:	881b      	ldrh	r3, [r3, #0]
    3332:	3300      	adds	r3, #0
    3334:	bf18      	it	ne
    3336:	2301      	movne	r3, #1
    3338:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    333c:	f7fe bf7e 	b.w	223c <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    3340:	4b0f      	ldr	r3, [pc, #60]	; (3380 <juggle_update(LEDStruct&)+0x9c>)
    3342:	881b      	ldrh	r3, [r3, #0]
    3344:	3300      	adds	r3, #0
    3346:	bf18      	it	ne
    3348:	2301      	movne	r3, #1
    334a:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    334e:	f7fe bf75 	b.w	223c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    3352:	4b0b      	ldr	r3, [pc, #44]	; (3380 <juggle_update(LEDStruct&)+0x9c>)
    3354:	881b      	ldrh	r3, [r3, #0]
    3356:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    335a:	f7fe bf6f 	b.w	223c <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    335e:	4b08      	ldr	r3, [pc, #32]	; (3380 <juggle_update(LEDStruct&)+0x9c>)
    3360:	881b      	ldrh	r3, [r3, #0]
    3362:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3366:	f7fe bf69 	b.w	223c <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    336a:	4b05      	ldr	r3, [pc, #20]	; (3380 <juggle_update(LEDStruct&)+0x9c>)
    336c:	881b      	ldrh	r3, [r3, #0]
    336e:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3372:	f7fe bf63 	b.w	223c <LEDDebug(LEDStruct&)>
    3376:	bf00      	nop
    3378:	1fff9e8c 	.word	0x1fff9e8c
    337c:	1fff9625 	.word	0x1fff9625
    3380:	1fff9526 	.word	0x1fff9526

00003384 <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    3384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3388:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    338c:	b089      	sub	sp, #36	; 0x24
    338e:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3390:	2b00      	cmp	r3, #0
    3392:	f040 809d 	bne.w	34d0 <juggle(LEDStruct&)+0x14c>
    3396:	4ed4      	ldr	r6, [pc, #848]	; (36e8 <juggle(LEDStruct&)+0x364>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3398:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    339c:	8833      	ldrh	r3, [r6, #0]
    339e:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    33a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    33a6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    33aa:	3019      	adds	r0, #25
    33ac:	b280      	uxth	r0, r0
    33ae:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    33b2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    33b6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    33ba:	3519      	adds	r5, #25
    33bc:	b2ad      	uxth	r5, r5
    33be:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    33c2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    33c6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    33ca:	3319      	adds	r3, #25
    33cc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    33d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    33d4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    33d8:	3319      	adds	r3, #25
    33da:	b29b      	uxth	r3, r3
    33dc:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    33e0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    33e4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    33e8:	3119      	adds	r1, #25
    33ea:	b289      	uxth	r1, r1
    33ec:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    33f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    33f4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    33f8:	3219      	adds	r2, #25
    33fa:	b292      	uxth	r2, r2
    33fc:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3400:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3404:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3408:	f10e 0e19 	add.w	lr, lr, #25
    340c:	fa1f fe8e 	uxth.w	lr, lr
    3410:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3414:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3418:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    341c:	f10c 0c19 	add.w	ip, ip, #25
    3420:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3424:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3428:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    342c:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3430:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3434:	b2ff      	uxtb	r7, r7
    3436:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    343a:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    343e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3442:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    3446:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    3448:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    344a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    344e:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3452:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3456:	ea4f 2e27 	mov.w	lr, r7, asr #8
    345a:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    345e:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3460:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3464:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    346c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3470:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3472:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    3476:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    347a:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    347e:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3480:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3484:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3488:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    348c:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3490:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3492:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3496:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    349a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    349e:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    34a2:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    34a4:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    34a6:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    34aa:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    34ae:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    34b2:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    34b6:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    34ba:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    34be:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    34c2:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    34c6:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    34ca:	2b00      	cmp	r3, #0
    34cc:	f040 8177 	bne.w	37be <juggle(LEDStruct&)+0x43a>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    34d0:	4b86      	ldr	r3, [pc, #536]	; (36ec <juggle(LEDStruct&)+0x368>)
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	2b00      	cmp	r3, #0
    34d6:	f040 817d 	bne.w	37d4 <juggle(LEDStruct&)+0x450>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    34da:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    34de:	b1d3      	cbz	r3, 3516 <juggle(LEDStruct&)+0x192>
    34e0:	4b83      	ldr	r3, [pc, #524]	; (36f0 <juggle(LEDStruct&)+0x36c>)
    34e2:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    34e6:	2200      	movs	r2, #0
    34e8:	f103 0027 	add.w	r0, r3, #39	; 0x27
    34ec:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    34f0:	e001      	b.n	34f6 <juggle(LEDStruct&)+0x172>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    34f2:	4283      	cmp	r3, r0
    34f4:	d00f      	beq.n	3516 <juggle(LEDStruct&)+0x192>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    34f6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    34fa:	428a      	cmp	r2, r1
    34fc:	d1f9      	bne.n	34f2 <juggle(LEDStruct&)+0x16e>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    34fe:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    3502:	4a7c      	ldr	r2, [pc, #496]	; (36f4 <juggle(LEDStruct&)+0x370>)
    3504:	fba2 2303 	umull	r2, r3, r2, r3
    3508:	08db      	lsrs	r3, r3, #3
    350a:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    350c:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    350e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3512:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3516:	2196      	movs	r1, #150	; 0x96
    3518:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    351c:	4620      	mov	r0, r4
    351e:	f008 fab3 	bl	ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    3522:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    3526:	2900      	cmp	r1, #0
    3528:	f040 80ec 	bne.w	3704 <juggle(LEDStruct&)+0x380>
		if (leds.juggle_phased) {
    352c:	f894 7236 	ldrb.w	r7, [r4, #566]	; 0x236
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3530:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    3534:	2f00      	cmp	r7, #0
    3536:	f000 81ac 	beq.w	3892 <juggle(LEDStruct&)+0x50e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    353a:	2b00      	cmp	r3, #0
    353c:	f000 8273 	beq.w	3a26 <juggle(LEDStruct&)+0x6a2>
    3540:	486d      	ldr	r0, [pc, #436]	; (36f8 <juggle(LEDStruct&)+0x374>)
    3542:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3546:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 36fc <juggle(LEDStruct&)+0x378>
    354a:	9003      	str	r0, [sp, #12]
    354c:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 3700 <juggle(LEDStruct&)+0x37c>
    3550:	460f      	mov	r7, r1
    3552:	f10d 0a1c 	add.w	sl, sp, #28
    3556:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    355a:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    355e:	e05d      	b.n	361c <juggle(LEDStruct&)+0x298>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3560:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3564:	443b      	add	r3, r7
    3566:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3568:	f8d9 1000 	ldr.w	r1, [r9]
    356c:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    356e:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3570:	9904      	ldr	r1, [sp, #16]
    3572:	bf98      	it	ls
    3574:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3576:	f44f 708c 	mov.w	r0, #280	; 0x118
    357a:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    357e:	bf98      	it	ls
    3580:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3582:	fb03 f301 	mul.w	r3, r3, r1
    3586:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3588:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    358a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    358e:	d503      	bpl.n	3598 <juggle(LEDStruct&)+0x214>
    3590:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3594:	3107      	adds	r1, #7
    3596:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3598:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    359a:	9e03      	ldr	r6, [sp, #12]
    359c:	5c36      	ldrb	r6, [r6, r0]
    359e:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    35a2:	f3c1 0146 	ubfx	r1, r1, #1, #7
    35a6:	fb06 0101 	mla	r1, r6, r1, r0
    35aa:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    35ac:	041e      	lsls	r6, r3, #16
    35ae:	bf48      	it	mi
    35b0:	4249      	negmi	r1, r1
    35b2:	b20e      	sxth	r6, r1
    35b4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    35b8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    35bc:	9100      	str	r1, [sp, #0]
    35be:	4650      	mov	r0, sl
    35c0:	4641      	mov	r1, r8
    35c2:	f008 fac1 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    35c6:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    35ca:	2296      	movs	r2, #150	; 0x96
    35cc:	b29b      	uxth	r3, r3
    35ce:	fb02 f303 	mul.w	r3, r2, r3
    35d2:	0c1b      	lsrs	r3, r3, #16
    35d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    35d8:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    35da:	5ce2      	ldrb	r2, [r4, r3]
    35dc:	f89d 001c 	ldrb.w	r0, [sp, #28]
    35e0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35e4:	54e2      	strb	r2, [r4, r3]
    35e6:	f89d 301d 	ldrb.w	r3, [sp, #29]
    35ea:	784a      	ldrb	r2, [r1, #1]
    35ec:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35f0:	704a      	strb	r2, [r1, #1]
    35f2:	788b      	ldrb	r3, [r1, #2]
    35f4:	f89d 201e 	ldrb.w	r2, [sp, #30]
    35f8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    35fc:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    35fe:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3602:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3606:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    360a:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    360c:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    360e:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3610:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3612:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3614:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3618:	f240 8205 	bls.w	3a26 <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    361c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3620:	2900      	cmp	r1, #0
    3622:	d19d      	bne.n	3560 <juggle(LEDStruct&)+0x1dc>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3624:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3628:	443b      	add	r3, r7
    362a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    362c:	f8d9 1000 	ldr.w	r1, [r9]
    3630:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3632:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3634:	9905      	ldr	r1, [sp, #20]
    3636:	bf98      	it	ls
    3638:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    363a:	f44f 708c 	mov.w	r0, #280	; 0x118
    363e:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3642:	bf98      	it	ls
    3644:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3646:	fb03 f301 	mul.w	r3, r3, r1
    364a:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    364c:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    364e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3652:	d503      	bpl.n	365c <juggle(LEDStruct&)+0x2d8>
    3654:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3658:	3107      	adds	r1, #7
    365a:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    365c:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    365e:	9e03      	ldr	r6, [sp, #12]
    3660:	5c36      	ldrb	r6, [r6, r0]
    3662:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    3666:	f3c1 0146 	ubfx	r1, r1, #1, #7
    366a:	fb06 0101 	mla	r1, r6, r1, r0
    366e:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3670:	041e      	lsls	r6, r3, #16
    3672:	bf48      	it	mi
    3674:	4249      	negmi	r1, r1
    3676:	b20e      	sxth	r6, r1
    3678:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    367c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3680:	9100      	str	r1, [sp, #0]
    3682:	4650      	mov	r0, sl
    3684:	4641      	mov	r1, r8
    3686:	f008 fa5f 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    368a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    368e:	b29b      	uxth	r3, r3
    3690:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3694:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3698:	0c1b      	lsrs	r3, r3, #16
    369a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    369e:	18e1      	adds	r1, r4, r3
    36a0:	5ce2      	ldrb	r2, [r4, r3]
    36a2:	f89d 001c 	ldrb.w	r0, [sp, #28]
    36a6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    36aa:	54e2      	strb	r2, [r4, r3]
    36ac:	f89d 301d 	ldrb.w	r3, [sp, #29]
    36b0:	784a      	ldrb	r2, [r1, #1]
    36b2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    36b6:	704a      	strb	r2, [r1, #1]
    36b8:	788b      	ldrb	r3, [r1, #2]
    36ba:	f89d 201e 	ldrb.w	r2, [sp, #30]
    36be:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    36c2:	708b      	strb	r3, [r1, #2]
    36c4:	4622      	mov	r2, r4
    36c6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    36c8:	7819      	ldrb	r1, [r3, #0]
    36ca:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    36ce:	7859      	ldrb	r1, [r3, #1]
    36d0:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    36d4:	7899      	ldrb	r1, [r3, #2]
    36d6:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    36da:	3303      	adds	r3, #3
LEDStruct curr_over_leds;
LEDStruct next_over_leds;

// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    36dc:	429d      	cmp	r5, r3
    36de:	f1a2 0203 	sub.w	r2, r2, #3
    36e2:	d1f1      	bne.n	36c8 <juggle(LEDStruct&)+0x344>
    36e4:	e78b      	b.n	35fe <juggle(LEDStruct&)+0x27a>
    36e6:	bf00      	nop
    36e8:	1fff8788 	.word	0x1fff8788
    36ec:	1fff9625 	.word	0x1fff9625
    36f0:	1fff875f 	.word	0x1fff875f
    36f4:	cccccccd 	.word	0xcccccccd
    36f8:	00011854 	.word	0x00011854
    36fc:	1fffb19c 	.word	0x1fffb19c
    3700:	0001111c 	.word	0x0001111c
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    3704:	f894 6236 	ldrb.w	r6, [r4, #566]	; 0x236
    3708:	2e00      	cmp	r6, #0
    370a:	d067      	beq.n	37dc <juggle(LEDStruct&)+0x458>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    370c:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3710:	2b00      	cmp	r3, #0
    3712:	f000 8188 	beq.w	3a26 <juggle(LEDStruct&)+0x6a2>
    3716:	2500      	movs	r5, #0
    3718:	f10d 0a1c 	add.w	sl, sp, #28
    371c:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3720:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    3724:	e039      	b.n	379a <juggle(LEDStruct&)+0x416>
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3726:	fb06 f305 	mul.w	r3, r6, r5
    372a:	2900      	cmp	r1, #0
    372c:	f000 81b5 	beq.w	3a9a <juggle(LEDStruct&)+0x716>
    3730:	2295      	movs	r2, #149	; 0x95
    3732:	2100      	movs	r1, #0
    3734:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3738:	f7fc febc 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    373c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3740:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3744:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3748:	9100      	str	r1, [sp, #0]
    374a:	4607      	mov	r7, r0
    374c:	4641      	mov	r1, r8
    374e:	4650      	mov	r0, sl
    3750:	f008 f9fa 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3754:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3758:	18e1      	adds	r1, r4, r3
    375a:	5ce2      	ldrb	r2, [r4, r3]
    375c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3760:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3764:	54e2      	strb	r2, [r4, r3]
    3766:	784a      	ldrb	r2, [r1, #1]
    3768:	f89d 301d 	ldrb.w	r3, [sp, #29]
    376c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3770:	704a      	strb	r2, [r1, #1]
    3772:	788b      	ldrb	r3, [r1, #2]
    3774:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3778:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    377c:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    377e:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3782:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3786:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    378a:	3501      	adds	r5, #1
    378c:	b2ed      	uxtb	r5, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    378e:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3790:	42aa      	cmp	r2, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3792:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3796:	f240 8146 	bls.w	3a26 <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    379a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    379e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    37a2:	2b00      	cmp	r3, #0
    37a4:	d1bf      	bne.n	3726 <juggle(LEDStruct&)+0x3a2>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    37a6:	2900      	cmp	r1, #0
    37a8:	f000 81b8 	beq.w	3b1c <juggle(LEDStruct&)+0x798>
    37ac:	4619      	mov	r1, r3
    37ae:	2295      	movs	r2, #149	; 0x95
    37b0:	fb06 f305 	mul.w	r3, r6, r5
    37b4:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    37b8:	f7fc febe 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    37bc:	e7be      	b.n	373c <juggle(LEDStruct&)+0x3b8>
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    37be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    37c2:	fa02 f300 	lsl.w	r3, r2, r0
    37c6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    37ca:	4bd0      	ldr	r3, [pc, #832]	; (3b0c <juggle(LEDStruct&)+0x788>)
    37cc:	781b      	ldrb	r3, [r3, #0]
    37ce:	2b00      	cmp	r3, #0
    37d0:	f43f ae83 	beq.w	34da <juggle(LEDStruct&)+0x156>
    37d4:	4620      	mov	r0, r4
    37d6:	f7ff fd85 	bl	32e4 <juggle_update(LEDStruct&)>
    37da:	e67e      	b.n	34da <juggle(LEDStruct&)+0x156>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    37dc:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    37e0:	2900      	cmp	r1, #0
    37e2:	f000 8120 	beq.w	3a26 <juggle(LEDStruct&)+0x6a2>
    37e6:	f10d 0a1c 	add.w	sl, sp, #28
    37ea:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    37ee:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    37f2:	e03c      	b.n	386e <juggle(LEDStruct&)+0x4ea>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    37f4:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    37f8:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    37fc:	4431      	add	r1, r6
    37fe:	2b00      	cmp	r3, #0
    3800:	f000 8114 	beq.w	3a2c <juggle(LEDStruct&)+0x6a8>
    3804:	2300      	movs	r3, #0
    3806:	4408      	add	r0, r1
    3808:	2295      	movs	r2, #149	; 0x95
    380a:	4619      	mov	r1, r3
    380c:	f7fc fe52 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3810:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3814:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3818:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    381c:	9100      	str	r1, [sp, #0]
    381e:	4607      	mov	r7, r0
    3820:	4641      	mov	r1, r8
    3822:	4650      	mov	r0, sl
    3824:	f008 f990 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3828:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    382c:	18e1      	adds	r1, r4, r3
    382e:	5ce2      	ldrb	r2, [r4, r3]
    3830:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3834:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3838:	54e2      	strb	r2, [r4, r3]
    383a:	784a      	ldrb	r2, [r1, #1]
    383c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3840:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3844:	704a      	strb	r2, [r1, #1]
    3846:	788b      	ldrb	r3, [r1, #2]
    3848:	f89d 201e 	ldrb.w	r2, [sp, #30]
    384c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3850:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3852:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3856:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    385a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    385e:	3601      	adds	r6, #1
    3860:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3862:	4413      	add	r3, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3864:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3866:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    386a:	f240 80dc 	bls.w	3a26 <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    386e:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    3872:	2b00      	cmp	r3, #0
    3874:	d1be      	bne.n	37f4 <juggle(LEDStruct&)+0x470>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3876:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    387a:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    387e:	4431      	add	r1, r6
    3880:	4408      	add	r0, r1
    3882:	2a00      	cmp	r2, #0
    3884:	f000 8185 	beq.w	3b92 <juggle(LEDStruct&)+0x80e>
    3888:	4619      	mov	r1, r3
    388a:	2295      	movs	r2, #149	; 0x95
    388c:	f7fc fe54 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    3890:	e7be      	b.n	3810 <juggle(LEDStruct&)+0x48c>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3892:	2b00      	cmp	r3, #0
    3894:	f000 80c7 	beq.w	3a26 <juggle(LEDStruct&)+0x6a2>
    3898:	4b9d      	ldr	r3, [pc, #628]	; (3b10 <juggle(LEDStruct&)+0x78c>)
    389a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    389e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3b14 <juggle(LEDStruct&)+0x790>
    38a2:	9303      	str	r3, [sp, #12]
    38a4:	f8df b270 	ldr.w	fp, [pc, #624]	; 3b18 <juggle(LEDStruct&)+0x794>
    38a8:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    38ac:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    38b0:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    38b4:	e057      	b.n	3966 <juggle(LEDStruct&)+0x5e2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    38b6:	f8d9 3000 	ldr.w	r3, [r9]
    38ba:	9306      	str	r3, [sp, #24]
	return ret;
    38bc:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    38be:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    38c2:	fb0a f303 	mul.w	r3, sl, r3
    38c6:	0209      	lsls	r1, r1, #8
    38c8:	fb03 f301 	mul.w	r3, r3, r1
    38cc:	0379      	lsls	r1, r7, #13
    38ce:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    38d2:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    38d4:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    38d6:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    38da:	d503      	bpl.n	38e4 <juggle(LEDStruct&)+0x560>
    38dc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    38e0:	3307      	adds	r3, #7
    38e2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    38e4:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38e6:	9e03      	ldr	r6, [sp, #12]
    38e8:	5c36      	ldrb	r6, [r6, r0]
    38ea:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    38ee:	f3c3 0346 	ubfx	r3, r3, #1, #7
    38f2:	fb06 0303 	mla	r3, r6, r3, r0
    38f6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    38f8:	040e      	lsls	r6, r1, #16
    38fa:	bf48      	it	mi
    38fc:	425b      	negmi	r3, r3
    38fe:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3902:	b21e      	sxth	r6, r3
    3904:	a805      	add	r0, sp, #20
    3906:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    390a:	9100      	str	r1, [sp, #0]
    390c:	4641      	mov	r1, r8
    390e:	f008 f91b 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3912:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3916:	2296      	movs	r2, #150	; 0x96
    3918:	b29b      	uxth	r3, r3
    391a:	fb02 f303 	mul.w	r3, r2, r3
    391e:	0c1b      	lsrs	r3, r3, #16
    3920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3924:	18e1      	adds	r1, r4, r3
    3926:	5ce2      	ldrb	r2, [r4, r3]
    3928:	f89d 0014 	ldrb.w	r0, [sp, #20]
    392c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3930:	54e2      	strb	r2, [r4, r3]
    3932:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3936:	784a      	ldrb	r2, [r1, #1]
    3938:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    393c:	704a      	strb	r2, [r1, #1]
    393e:	788b      	ldrb	r3, [r1, #2]
    3940:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3944:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3948:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    394a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    394e:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3952:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3956:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3958:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    395a:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    395c:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    395e:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3960:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3964:	d95f      	bls.n	3a26 <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3966:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    396a:	2b00      	cmp	r3, #0
    396c:	d1a3      	bne.n	38b6 <juggle(LEDStruct&)+0x532>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    396e:	f8d9 3000 	ldr.w	r3, [r9]
    3972:	9307      	str	r3, [sp, #28]
	return ret;
    3974:	9907      	ldr	r1, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3976:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    397a:	fb0a f101 	mul.w	r1, sl, r1
    397e:	021b      	lsls	r3, r3, #8
    3980:	fb03 f301 	mul.w	r3, r3, r1
    3984:	0379      	lsls	r1, r7, #13
    3986:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    398a:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    398c:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    398e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3992:	d503      	bpl.n	399c <juggle(LEDStruct&)+0x618>
    3994:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3998:	3307      	adds	r3, #7
    399a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    399c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    399e:	9e03      	ldr	r6, [sp, #12]
    39a0:	5c36      	ldrb	r6, [r6, r0]
    39a2:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    39a6:	f3c3 0346 	ubfx	r3, r3, #1, #7
    39aa:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    39ae:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39b0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    39b2:	bf48      	it	mi
    39b4:	425b      	negmi	r3, r3
    39b6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    39ba:	b21e      	sxth	r6, r3
    39bc:	a805      	add	r0, sp, #20
    39be:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    39c2:	9100      	str	r1, [sp, #0]
    39c4:	4641      	mov	r1, r8
    39c6:	f008 f8bf 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    39ca:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    39ce:	b29b      	uxth	r3, r3
    39d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    39d4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    39d8:	0c1b      	lsrs	r3, r3, #16
    39da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    39de:	18e1      	adds	r1, r4, r3
    39e0:	5ce2      	ldrb	r2, [r4, r3]
    39e2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    39e6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    39ea:	54e2      	strb	r2, [r4, r3]
    39ec:	f89d 3015 	ldrb.w	r3, [sp, #21]
    39f0:	784a      	ldrb	r2, [r1, #1]
    39f2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    39f6:	704a      	strb	r2, [r1, #1]
    39f8:	788b      	ldrb	r3, [r1, #2]
    39fa:	f89d 2016 	ldrb.w	r2, [sp, #22]
    39fe:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a02:	708b      	strb	r3, [r1, #2]
    3a04:	4622      	mov	r2, r4
    3a06:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a08:	7819      	ldrb	r1, [r3, #0]
    3a0a:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3a0e:	7859      	ldrb	r1, [r3, #1]
    3a10:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3a14:	7899      	ldrb	r1, [r3, #2]
    3a16:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3a1a:	3303      	adds	r3, #3
    3a1c:	42ab      	cmp	r3, r5
    3a1e:	f1a2 0203 	sub.w	r2, r2, #3
    3a22:	d1f1      	bne.n	3a08 <juggle(LEDStruct&)+0x684>
    3a24:	e791      	b.n	394a <juggle(LEDStruct&)+0x5c6>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    3a26:	b009      	add	sp, #36	; 0x24
    3a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3a2c:	4408      	add	r0, r1
    3a2e:	224a      	movs	r2, #74	; 0x4a
    3a30:	4619      	mov	r1, r3
    3a32:	f7fc fd3f 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    3a36:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3a3a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3a3e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3a42:	9100      	str	r1, [sp, #0]
    3a44:	4607      	mov	r7, r0
    3a46:	4641      	mov	r1, r8
    3a48:	4650      	mov	r0, sl
    3a4a:	f008 f87d 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3a4e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3a52:	18e1      	adds	r1, r4, r3
    3a54:	5ce2      	ldrb	r2, [r4, r3]
    3a56:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3a5a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3a5e:	54e2      	strb	r2, [r4, r3]
    3a60:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3a64:	784a      	ldrb	r2, [r1, #1]
    3a66:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a6a:	704a      	strb	r2, [r1, #1]
    3a6c:	788b      	ldrb	r3, [r1, #2]
    3a6e:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3a72:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a76:	708b      	strb	r3, [r1, #2]
    3a78:	4622      	mov	r2, r4
    3a7a:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a7c:	7819      	ldrb	r1, [r3, #0]
    3a7e:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3a82:	7859      	ldrb	r1, [r3, #1]
    3a84:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3a88:	7899      	ldrb	r1, [r3, #2]
    3a8a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3a8e:	3303      	adds	r3, #3
    3a90:	42ab      	cmp	r3, r5
    3a92:	f1a2 0203 	sub.w	r2, r2, #3
    3a96:	d1f1      	bne.n	3a7c <juggle(LEDStruct&)+0x6f8>
    3a98:	e6db      	b.n	3852 <juggle(LEDStruct&)+0x4ce>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3a9a:	224a      	movs	r2, #74	; 0x4a
    3a9c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3aa0:	f7fc fd08 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    3aa4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3aa8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3aac:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3ab0:	9100      	str	r1, [sp, #0]
    3ab2:	4607      	mov	r7, r0
    3ab4:	4641      	mov	r1, r8
    3ab6:	4650      	mov	r0, sl
    3ab8:	f008 f846 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3abc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3ac0:	18e1      	adds	r1, r4, r3
    3ac2:	5ce2      	ldrb	r2, [r4, r3]
    3ac4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3ac8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3acc:	54e2      	strb	r2, [r4, r3]
    3ace:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3ad2:	784a      	ldrb	r2, [r1, #1]
    3ad4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ad8:	704a      	strb	r2, [r1, #1]
    3ada:	788b      	ldrb	r3, [r1, #2]
    3adc:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3ae0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ae4:	708b      	strb	r3, [r1, #2]
    3ae6:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3aea:	4623      	mov	r3, r4
    3aec:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3aee:	7819      	ldrb	r1, [r3, #0]
    3af0:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3af4:	7859      	ldrb	r1, [r3, #1]
    3af6:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3afa:	7899      	ldrb	r1, [r3, #2]
    3afc:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3b00:	3303      	adds	r3, #3
    3b02:	4283      	cmp	r3, r0
    3b04:	f1a2 0203 	sub.w	r2, r2, #3
    3b08:	d1f1      	bne.n	3aee <juggle(LEDStruct&)+0x76a>
    3b0a:	e638      	b.n	377e <juggle(LEDStruct&)+0x3fa>
    3b0c:	1fff9625 	.word	0x1fff9625
    3b10:	00011854 	.word	0x00011854
    3b14:	1fffb19c 	.word	0x1fffb19c
    3b18:	0001111c 	.word	0x0001111c
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3b1c:	fb06 f305 	mul.w	r3, r6, r5
    3b20:	224a      	movs	r2, #74	; 0x4a
    3b22:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3b26:	f7fc fd07 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    3b2a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3b2e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3b32:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3b36:	9100      	str	r1, [sp, #0]
    3b38:	4607      	mov	r7, r0
    3b3a:	4641      	mov	r1, r8
    3b3c:	4650      	mov	r0, sl
    3b3e:	f008 f803 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b42:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3b46:	18e1      	adds	r1, r4, r3
    3b48:	5ce2      	ldrb	r2, [r4, r3]
    3b4a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3b4e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b52:	54e2      	strb	r2, [r4, r3]
    3b54:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3b58:	784a      	ldrb	r2, [r1, #1]
    3b5a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3b5e:	704a      	strb	r2, [r1, #1]
    3b60:	788b      	ldrb	r3, [r1, #2]
    3b62:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3b66:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3b6a:	708b      	strb	r3, [r1, #2]
    3b6c:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3b70:	4623      	mov	r3, r4
    3b72:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b74:	7819      	ldrb	r1, [r3, #0]
    3b76:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3b7a:	7859      	ldrb	r1, [r3, #1]
    3b7c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3b80:	7899      	ldrb	r1, [r3, #2]
    3b82:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3b86:	3303      	adds	r3, #3
    3b88:	4283      	cmp	r3, r0
    3b8a:	f1a2 0203 	sub.w	r2, r2, #3
    3b8e:	d1f1      	bne.n	3b74 <juggle(LEDStruct&)+0x7f0>
    3b90:	e5f5      	b.n	377e <juggle(LEDStruct&)+0x3fa>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3b92:	4613      	mov	r3, r2
    3b94:	4611      	mov	r1, r2
    3b96:	224a      	movs	r2, #74	; 0x4a
    3b98:	f7fc fcce 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    3b9c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3ba0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3ba4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3ba8:	9100      	str	r1, [sp, #0]
    3baa:	4607      	mov	r7, r0
    3bac:	4641      	mov	r1, r8
    3bae:	4650      	mov	r0, sl
    3bb0:	f007 ffca 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3bb4:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3bb8:	18e1      	adds	r1, r4, r3
    3bba:	5ce2      	ldrb	r2, [r4, r3]
    3bbc:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3bc0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3bc4:	54e2      	strb	r2, [r4, r3]
    3bc6:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3bca:	784a      	ldrb	r2, [r1, #1]
    3bcc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3bd0:	704a      	strb	r2, [r1, #1]
    3bd2:	788b      	ldrb	r3, [r1, #2]
    3bd4:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3bd8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3bdc:	708b      	strb	r3, [r1, #2]
    3bde:	4622      	mov	r2, r4
    3be0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3be2:	7819      	ldrb	r1, [r3, #0]
    3be4:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3be8:	7859      	ldrb	r1, [r3, #1]
    3bea:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3bee:	7899      	ldrb	r1, [r3, #2]
    3bf0:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3bf4:	3303      	adds	r3, #3
    3bf6:	42ab      	cmp	r3, r5
    3bf8:	f1a2 0203 	sub.w	r2, r2, #3
    3bfc:	d1f1      	bne.n	3be2 <juggle(LEDStruct&)+0x85e>
    3bfe:	e628      	b.n	3852 <juggle(LEDStruct&)+0x4ce>

00003c00 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3c04:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    3c08:	b08d      	sub	sp, #52	; 0x34
    3c0a:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3c0c:	2b00      	cmp	r3, #0
    3c0e:	f040 809d 	bne.w	3d4c <juggle_half(LEDStruct&)+0x14c>
    3c12:	4ec6      	ldr	r6, [pc, #792]	; (3f2c <juggle_half(LEDStruct&)+0x32c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3c14:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3c18:	8833      	ldrh	r3, [r6, #0]
    3c1a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3c1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3c22:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3c26:	3019      	adds	r0, #25
    3c28:	b280      	uxth	r0, r0
    3c2a:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3c2e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    3c32:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3c36:	3519      	adds	r5, #25
    3c38:	b2ad      	uxth	r5, r5
    3c3a:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    3c3e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3c42:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3c46:	3319      	adds	r3, #25
    3c48:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3c4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3c50:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3c54:	3319      	adds	r3, #25
    3c56:	b29b      	uxth	r3, r3
    3c58:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3c5c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3c60:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3c64:	3119      	adds	r1, #25
    3c66:	b289      	uxth	r1, r1
    3c68:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3c6c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3c70:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c74:	3219      	adds	r2, #25
    3c76:	b292      	uxth	r2, r2
    3c78:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3c7c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3c80:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3c84:	f10e 0e19 	add.w	lr, lr, #25
    3c88:	fa1f fe8e 	uxth.w	lr, lr
    3c8c:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3c90:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3c94:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3c98:	f10c 0c19 	add.w	ip, ip, #25
    3c9c:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ca0:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ca4:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    3ca8:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cac:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3cb0:	b2ff      	uxtb	r7, r7
    3cb2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3cb6:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    3cba:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3cbe:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    3cc2:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    3cc4:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3cc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3cca:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3cce:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3cd2:	ea4f 2e27 	mov.w	lr, r7, asr #8
    3cd6:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    3cda:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cdc:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3ce0:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3ce4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ce8:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3cec:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3cee:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    3cf2:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3cf6:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3cfa:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cfc:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3d00:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3d04:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3d08:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3d0c:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3d0e:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3d12:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3d16:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3d1a:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3d1e:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3d20:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3d22:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3d26:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3d2a:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d2e:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3d32:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3d36:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3d3a:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3d3e:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3d42:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3d46:	2b00      	cmp	r3, #0
    3d48:	f040 82b3 	bne.w	42b2 <juggle_half(LEDStruct&)+0x6b2>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3d4c:	4b78      	ldr	r3, [pc, #480]	; (3f30 <juggle_half(LEDStruct&)+0x330>)
    3d4e:	781b      	ldrb	r3, [r3, #0]
    3d50:	2b00      	cmp	r3, #0
    3d52:	f040 82b9 	bne.w	42c8 <juggle_half(LEDStruct&)+0x6c8>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    3d56:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3d5a:	b113      	cbz	r3, 3d62 <juggle_half(LEDStruct&)+0x162>
    3d5c:	2300      	movs	r3, #0
    3d5e:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3d62:	2196      	movs	r1, #150	; 0x96
    3d64:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3d68:	4620      	mov	r0, r4
    3d6a:	f007 fe8d 	bl	ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3d6e:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d72:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    3d76:	2f00      	cmp	r7, #0
    3d78:	f040 81af 	bne.w	40da <juggle_half(LEDStruct&)+0x4da>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d7c:	2900      	cmp	r1, #0
    3d7e:	f000 8378 	beq.w	4472 <juggle_half(LEDStruct&)+0x872>
    3d82:	4b6c      	ldr	r3, [pc, #432]	; (3f34 <juggle_half(LEDStruct&)+0x334>)
    3d84:	9302      	str	r3, [sp, #8]
    3d86:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3d8a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 3f38 <juggle_half(LEDStruct&)+0x338>
    3d8e:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3f3c <juggle_half(LEDStruct&)+0x33c>
    3d92:	ab0b      	add	r3, sp, #44	; 0x2c
    3d94:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    3d98:	9303      	str	r3, [sp, #12]
    3d9a:	f04f 0a26 	mov.w	sl, #38	; 0x26
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3d9e:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3da2:	b2be      	uxth	r6, r7
    3da4:	198b      	adds	r3, r1, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3da6:	f8d8 1000 	ldr.w	r1, [r8]
    3daa:	9107      	str	r1, [sp, #28]
    3dac:	4403      	add	r3, r0

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3dae:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3db0:	9907      	ldr	r1, [sp, #28]
    3db2:	bf98      	it	ls
    3db4:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3db6:	f44f 708c 	mov.w	r0, #280	; 0x118
    3dba:	bf98      	it	ls
    3dbc:	b29b      	uxthls	r3, r3
    3dbe:	fb00 f101 	mul.w	r1, r0, r1
    3dc2:	fb03 f301 	mul.w	r3, r3, r1
    3dc6:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3dca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3dce:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3dd0:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3dd2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3dd6:	d503      	bpl.n	3de0 <juggle_half(LEDStruct&)+0x1e0>
    3dd8:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3ddc:	3107      	adds	r1, #7
    3dde:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3de0:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3de4:	f3c1 0046 	ubfx	r0, r1, #1, #7
    3de8:	9902      	ldr	r1, [sp, #8]
    3dea:	f81b 500e 	ldrb.w	r5, [fp, lr]
    3dee:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    3df2:	fb05 1100 	mla	r1, r5, r0, r1
    3df6:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3df8:	0418      	lsls	r0, r3, #16
    3dfa:	bf4c      	ite	mi
    3dfc:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3dfe:	b20d      	sxthpl	r5, r1
    3e00:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3e04:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3e08:	9803      	ldr	r0, [sp, #12]
    3e0a:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3e0c:	bf48      	it	mi
    3e0e:	b22d      	sxthmi	r5, r5
    3e10:	4649      	mov	r1, r9
    3e12:	f007 fe99 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3e16:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3e1a:	b29b      	uxth	r3, r3
    3e1c:	fb0a f303 	mul.w	r3, sl, r3
    3e20:	0c1b      	lsrs	r3, r3, #16
    3e22:	3325      	adds	r3, #37	; 0x25
    3e24:	b29b      	uxth	r3, r3
    3e26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e2a:	18e1      	adds	r1, r4, r3
    3e2c:	5ce2      	ldrb	r2, [r4, r3]
    3e2e:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3e32:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3e36:	54e2      	strb	r2, [r4, r3]
    3e38:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3e3c:	784a      	ldrb	r2, [r1, #1]
    3e3e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3e42:	704a      	strb	r2, [r1, #1]
    3e44:	788b      	ldrb	r3, [r1, #2]
    3e46:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3e4a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3e4e:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e50:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3e54:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3e58:	4416      	add	r6, r2
    3e5a:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e5c:	f8d8 3000 	ldr.w	r3, [r8]
    3e60:	9306      	str	r3, [sp, #24]
    3e62:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3e64:	9b06      	ldr	r3, [sp, #24]
    3e66:	bf98      	it	ls
    3e68:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3e6a:	f44f 728c 	mov.w	r2, #280	; 0x118
    3e6e:	bf98      	it	ls
    3e70:	b2b6      	uxthls	r6, r6
    3e72:	fb02 f303 	mul.w	r3, r2, r3
    3e76:	fb06 f303 	mul.w	r3, r6, r3
    3e7a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e82:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e84:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e88:	d503      	bpl.n	3e92 <juggle_half(LEDStruct&)+0x292>
    3e8a:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3e8e:	3207      	adds	r2, #7
    3e90:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e92:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e94:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3e98:	9a02      	ldr	r2, [sp, #8]
    3e9a:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3e9e:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    3ea2:	9803      	ldr	r0, [sp, #12]
    3ea4:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3ea8:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3eaa:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3eac:	bf48      	it	mi
    3eae:	4255      	negmi	r5, r2
    3eb0:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3eb4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3eb8:	bf54      	ite	pl
    3eba:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3ebc:	b22d      	sxthmi	r5, r5
    3ebe:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3ec2:	9100      	str	r1, [sp, #0]
    3ec4:	4649      	mov	r1, r9
    3ec6:	f007 fe3f 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3eca:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3ece:	b29b      	uxth	r3, r3
    3ed0:	fb0a f303 	mul.w	r3, sl, r3
    3ed4:	0c1b      	lsrs	r3, r3, #16
    3ed6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3eda:	18e1      	adds	r1, r4, r3
    3edc:	5ce2      	ldrb	r2, [r4, r3]
    3ede:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3ee2:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3ee6:	54e2      	strb	r2, [r4, r3]
    3ee8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3eec:	784a      	ldrb	r2, [r1, #1]
    3eee:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ef2:	704a      	strb	r2, [r1, #1]
    3ef4:	788b      	ldrb	r3, [r1, #2]
    3ef6:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3efa:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3efe:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    3f00:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3f04:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f08:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3f0c:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3f0e:	440a      	add	r2, r1
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f10:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3f12:	b2d2      	uxtb	r2, r2
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f14:	42bb      	cmp	r3, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3f16:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f1a:	4619      	mov	r1, r3
    3f1c:	f63f af3f 	bhi.w	3d9e <juggle_half(LEDStruct&)+0x19e>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    3f20:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3f24:	2a00      	cmp	r2, #0
    3f26:	f000 81b0 	beq.w	428a <juggle_half(LEDStruct&)+0x68a>
    3f2a:	e009      	b.n	3f40 <juggle_half(LEDStruct&)+0x340>
    3f2c:	1fff8788 	.word	0x1fff8788
    3f30:	1fff9625 	.word	0x1fff9625
    3f34:	0001111c 	.word	0x0001111c
    3f38:	1fffb19c 	.word	0x1fffb19c
    3f3c:	00011854 	.word	0x00011854
		if (leds.this_dir) {
    3f40:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3f44:	2f00      	cmp	r7, #0
    3f46:	f040 81cb 	bne.w	42e0 <juggle_half(LEDStruct&)+0x6e0>
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	f000 80c2 	beq.w	40d4 <juggle_half(LEDStruct&)+0x4d4>
    3f50:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3f54:	f44f 7a8c 	mov.w	sl, #280	; 0x118
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3f58:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3f5c:	3301      	adds	r3, #1
    3f5e:	440b      	add	r3, r1
    3f60:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f62:	f8d8 1000 	ldr.w	r1, [r8]
    3f66:	910b      	str	r1, [sp, #44]	; 0x2c
    3f68:	4433      	add	r3, r6
    3f6a:	b29b      	uxth	r3, r3
    3f6c:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3f70:	bf9c      	itt	ls
    3f72:	021b      	lslls	r3, r3, #8
    3f74:	b29b      	uxthls	r3, r3
    3f76:	fb0a f101 	mul.w	r1, sl, r1
    3f7a:	fb03 f301 	mul.w	r3, r3, r1
    3f7e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3f82:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3f86:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f88:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3f8a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f8e:	d503      	bpl.n	3f98 <juggle_half(LEDStruct&)+0x398>
    3f90:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3f94:	3107      	adds	r1, #7
    3f96:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f98:	f3c1 0e46 	ubfx	lr, r1, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3f9c:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f9e:	9902      	ldr	r1, [sp, #8]
    3fa0:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3fa4:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    3fa8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3fac:	fb05 050e 	mla	r5, r5, lr, r0
    3fb0:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3fb2:	0418      	lsls	r0, r3, #16
    3fb4:	bf48      	it	mi
    3fb6:	426d      	negmi	r5, r5
    3fb8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3fbc:	9100      	str	r1, [sp, #0]
    3fbe:	a809      	add	r0, sp, #36	; 0x24
    3fc0:	4649      	mov	r1, r9
    3fc2:	b22d      	sxth	r5, r5
    3fc4:	f007 fdc0 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3fc8:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3fcc:	2226      	movs	r2, #38	; 0x26
    3fce:	b29b      	uxth	r3, r3
    3fd0:	fb02 f303 	mul.w	r3, r2, r3
    3fd4:	0c1b      	lsrs	r3, r3, #16
    3fd6:	3370      	adds	r3, #112	; 0x70
    3fd8:	b29b      	uxth	r3, r3
    3fda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3fde:	18e1      	adds	r1, r4, r3
    3fe0:	5ce2      	ldrb	r2, [r4, r3]
    3fe2:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3fe6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3fea:	54e2      	strb	r2, [r4, r3]
    3fec:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3ff0:	784a      	ldrb	r2, [r1, #1]
    3ff2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ff6:	704a      	strb	r2, [r1, #1]
    3ff8:	788b      	ldrb	r3, [r1, #2]
    3ffa:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3ffe:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4002:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    4004:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    4008:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    400c:	4413      	add	r3, r2
    400e:	3301      	adds	r3, #1
    4010:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4012:	f8d8 3000 	ldr.w	r3, [r8]
    4016:	930a      	str	r3, [sp, #40]	; 0x28
    4018:	b2b6      	uxth	r6, r6
    401a:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    401c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    401e:	bf9c      	itt	ls
    4020:	0236      	lslls	r6, r6, #8
    4022:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4024:	fb0a f202 	mul.w	r2, sl, r2
    4028:	fb06 f202 	mul.w	r2, r6, r2
    402c:	f3c2 420e 	ubfx	r2, r2, #16, #15
    4030:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4034:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4036:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    403a:	d503      	bpl.n	4044 <juggle_half(LEDStruct&)+0x444>
    403c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4040:	3307      	adds	r3, #7
    4042:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4044:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4046:	f3c3 0146 	ubfx	r1, r3, #1, #7
    404a:	9b02      	ldr	r3, [sp, #8]
    404c:	f81b 5000 	ldrb.w	r5, [fp, r0]
    4050:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    4054:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    4058:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    405a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    405c:	bf48      	it	mi
    405e:	425b      	negmi	r3, r3
    4060:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4064:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4068:	b21d      	sxth	r5, r3
    406a:	a809      	add	r0, sp, #36	; 0x24
    406c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4070:	9100      	str	r1, [sp, #0]
    4072:	4649      	mov	r1, r9
    4074:	f007 fd68 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4078:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    407c:	b29b      	uxth	r3, r3
    407e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    4082:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4086:	0c1b      	lsrs	r3, r3, #16
    4088:	334b      	adds	r3, #75	; 0x4b
    408a:	b29b      	uxth	r3, r3
    408c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4090:	18e1      	adds	r1, r4, r3
    4092:	5ce2      	ldrb	r2, [r4, r3]
    4094:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    4098:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    409c:	54e2      	strb	r2, [r4, r3]
    409e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    40a2:	784a      	ldrb	r2, [r1, #1]
    40a4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    40a8:	704a      	strb	r2, [r1, #1]
    40aa:	788b      	ldrb	r3, [r1, #2]
    40ac:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    40b0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    40b4:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    40b6:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    40ba:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40be:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    40c2:	3701      	adds	r7, #1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    40c4:	440a      	add	r2, r1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40c6:	b2ff      	uxtb	r7, r7
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    40c8:	b2d2      	uxtb	r2, r2
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40ca:	42bb      	cmp	r3, r7
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    40cc:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40d0:	f63f af42 	bhi.w	3f58 <juggle_half(LEDStruct&)+0x358>
		}
	}
	else {
		strip_sync(leds);
	}
}
    40d4:	b00d      	add	sp, #52	; 0x34
    40d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40da:	2900      	cmp	r1, #0
    40dc:	f000 81c9 	beq.w	4472 <juggle_half(LEDStruct&)+0x872>
    40e0:	4b7b      	ldr	r3, [pc, #492]	; (42d0 <juggle_half(LEDStruct&)+0x6d0>)
    40e2:	9302      	str	r3, [sp, #8]
    40e4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    40e8:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 42d8 <juggle_half(LEDStruct&)+0x6d8>
    40ec:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 42dc <juggle_half(LEDStruct&)+0x6dc>
    40f0:	ab0b      	add	r3, sp, #44	; 0x2c
    40f2:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    40f6:	2700      	movs	r7, #0
    40f8:	9303      	str	r3, [sp, #12]
    40fa:	f04f 0a26 	mov.w	sl, #38	; 0x26
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    40fe:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    4102:	b2be      	uxth	r6, r7
    4104:	198b      	adds	r3, r1, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4106:	f8d8 1000 	ldr.w	r1, [r8]
    410a:	9105      	str	r1, [sp, #20]
    410c:	4403      	add	r3, r0
    410e:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    4110:	9905      	ldr	r1, [sp, #20]
    4112:	bf98      	it	ls
    4114:	021b      	lslls	r3, r3, #8
    4116:	f44f 708c 	mov.w	r0, #280	; 0x118
    411a:	bf98      	it	ls
    411c:	b29b      	uxthls	r3, r3
    411e:	fb00 f101 	mul.w	r1, r0, r1
    4122:	fb03 f301 	mul.w	r3, r3, r1
    4126:	f3c3 430e 	ubfx	r3, r3, #16, #15
    412a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    412e:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4130:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4134:	d503      	bpl.n	413e <juggle_half(LEDStruct&)+0x53e>
    4136:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    413a:	3107      	adds	r1, #7
    413c:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    413e:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4142:	f3c1 0046 	ubfx	r0, r1, #1, #7
    4146:	9902      	ldr	r1, [sp, #8]
    4148:	f81b 500e 	ldrb.w	r5, [fp, lr]
    414c:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    4150:	fb05 1100 	mla	r1, r5, r0, r1
    4154:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    4156:	0418      	lsls	r0, r3, #16
    4158:	bf4c      	ite	mi
    415a:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    415c:	b20d      	sxthpl	r5, r1
    415e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4162:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4166:	9803      	ldr	r0, [sp, #12]
    4168:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    416a:	bf48      	it	mi
    416c:	b22d      	sxthmi	r5, r5
    416e:	4649      	mov	r1, r9
    4170:	f007 fcea 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4174:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    4178:	b29b      	uxth	r3, r3
    417a:	fb0a f303 	mul.w	r3, sl, r3
    417e:	0c1b      	lsrs	r3, r3, #16
    4180:	3325      	adds	r3, #37	; 0x25
    4182:	b29b      	uxth	r3, r3
    4184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4188:	18e1      	adds	r1, r4, r3
    418a:	5ce2      	ldrb	r2, [r4, r3]
    418c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4190:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4194:	54e2      	strb	r2, [r4, r3]
    4196:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    419a:	784a      	ldrb	r2, [r1, #1]
    419c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    41a0:	704a      	strb	r2, [r1, #1]
    41a2:	788b      	ldrb	r3, [r1, #2]
    41a4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    41a8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    41ac:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    41ae:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    41b2:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    41b6:	4416      	add	r6, r2
    41b8:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    41ba:	f8d8 3000 	ldr.w	r3, [r8]
    41be:	9304      	str	r3, [sp, #16]
    41c0:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    41c2:	9b04      	ldr	r3, [sp, #16]
    41c4:	bf98      	it	ls
    41c6:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    41c8:	f44f 728c 	mov.w	r2, #280	; 0x118
    41cc:	bf98      	it	ls
    41ce:	b2b6      	uxthls	r6, r6
    41d0:	fb02 f303 	mul.w	r3, r2, r3
    41d4:	fb06 f303 	mul.w	r3, r6, r3
    41d8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    41dc:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    41e0:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    41e2:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    41e4:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    41e8:	d503      	bpl.n	41f2 <juggle_half(LEDStruct&)+0x5f2>
    41ea:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    41ee:	3207      	adds	r2, #7
    41f0:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    41f2:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    41f4:	f3c2 0146 	ubfx	r1, r2, #1, #7
    41f8:	9a02      	ldr	r2, [sp, #8]
    41fa:	f81b 5000 	ldrb.w	r5, [fp, r0]
    41fe:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    4202:	9803      	ldr	r0, [sp, #12]
    4204:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    4208:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    420a:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    420c:	bf48      	it	mi
    420e:	4255      	negmi	r5, r2
    4210:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4214:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4218:	bf54      	ite	pl
    421a:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    421c:	b22d      	sxthmi	r5, r5
    421e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4222:	9100      	str	r1, [sp, #0]
    4224:	4649      	mov	r1, r9
    4226:	f007 fc8f 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    422a:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    422e:	b29b      	uxth	r3, r3
    4230:	fb0a f303 	mul.w	r3, sl, r3
    4234:	0c1b      	lsrs	r3, r3, #16
    4236:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    423a:	18e1      	adds	r1, r4, r3
    423c:	5ce2      	ldrb	r2, [r4, r3]
    423e:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4242:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4246:	54e2      	strb	r2, [r4, r3]
    4248:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    424c:	784a      	ldrb	r2, [r1, #1]
    424e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4252:	704a      	strb	r2, [r1, #1]
    4254:	788b      	ldrb	r3, [r1, #2]
    4256:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    425a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    425e:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    4260:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    4264:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4268:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    426c:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    426e:	440a      	add	r2, r1

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4270:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    4272:	b2d2      	uxtb	r2, r2

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4274:	42bb      	cmp	r3, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    4276:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    427a:	4619      	mov	r1, r3
    427c:	f63f af3f 	bhi.w	40fe <juggle_half(LEDStruct&)+0x4fe>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    4280:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    4284:	2a00      	cmp	r2, #0
    4286:	f47f ae5b 	bne.w	3f40 <juggle_half(LEDStruct&)+0x340>
    428a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    428e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4290:	7822      	ldrb	r2, [r4, #0]
    4292:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4296:	7862      	ldrb	r2, [r4, #1]
    4298:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    429c:	78a2      	ldrb	r2, [r4, #2]
    429e:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    42a2:	3403      	adds	r4, #3
    42a4:	42a1      	cmp	r1, r4
    42a6:	f1a3 0303 	sub.w	r3, r3, #3
    42aa:	d1f1      	bne.n	4290 <juggle_half(LEDStruct&)+0x690>
		}
	}
	else {
		strip_sync(leds);
	}
}
    42ac:	b00d      	add	sp, #52	; 0x34
    42ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    42b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    42b6:	fa02 f300 	lsl.w	r3, r2, r0
    42ba:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    42be:	4b05      	ldr	r3, [pc, #20]	; (42d4 <juggle_half(LEDStruct&)+0x6d4>)
    42c0:	781b      	ldrb	r3, [r3, #0]
    42c2:	2b00      	cmp	r3, #0
    42c4:	f43f ad47 	beq.w	3d56 <juggle_half(LEDStruct&)+0x156>
    42c8:	4620      	mov	r0, r4
    42ca:	f7ff f80b 	bl	32e4 <juggle_update(LEDStruct&)>
    42ce:	e542      	b.n	3d56 <juggle_half(LEDStruct&)+0x156>
    42d0:	0001111c 	.word	0x0001111c
    42d4:	1fff9625 	.word	0x1fff9625
    42d8:	1fffb19c 	.word	0x1fffb19c
    42dc:	00011854 	.word	0x00011854
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    42e0:	2b00      	cmp	r3, #0
    42e2:	f43f aef7 	beq.w	40d4 <juggle_half(LEDStruct&)+0x4d4>
    42e6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    42ea:	2700      	movs	r7, #0
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    42ec:	f44f 7a8c 	mov.w	sl, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    42f0:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    42f4:	3301      	adds	r3, #1
    42f6:	440b      	add	r3, r1
    42f8:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42fa:	f8d8 1000 	ldr.w	r1, [r8]
    42fe:	9109      	str	r1, [sp, #36]	; 0x24
    4300:	4433      	add	r3, r6
    4302:	b29b      	uxth	r3, r3
    4304:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    4306:	9909      	ldr	r1, [sp, #36]	; 0x24
    4308:	bf9c      	itt	ls
    430a:	021b      	lslls	r3, r3, #8
    430c:	b29b      	uxthls	r3, r3
    430e:	fb0a f101 	mul.w	r1, sl, r1
    4312:	fb03 f301 	mul.w	r3, r3, r1
    4316:	f3c3 430e 	ubfx	r3, r3, #16, #15
    431a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    431e:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4320:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4324:	d503      	bpl.n	432e <juggle_half(LEDStruct&)+0x72e>
    4326:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    432a:	3107      	adds	r1, #7
    432c:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    432e:	f3c1 0e46 	ubfx	lr, r1, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4332:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4334:	9902      	ldr	r1, [sp, #8]
    4336:	f81b 5000 	ldrb.w	r5, [fp, r0]
    433a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    433e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4342:	fb05 050e 	mla	r5, r5, lr, r0
    4346:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    4348:	0418      	lsls	r0, r3, #16
    434a:	bf48      	it	mi
    434c:	426d      	negmi	r5, r5
    434e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4352:	9803      	ldr	r0, [sp, #12]
    4354:	9100      	str	r1, [sp, #0]
    4356:	b22d      	sxth	r5, r5
    4358:	4649      	mov	r1, r9
    435a:	f007 fbf5 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    435e:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    4362:	2226      	movs	r2, #38	; 0x26
    4364:	b29b      	uxth	r3, r3
    4366:	fb02 f303 	mul.w	r3, r2, r3
    436a:	0c1b      	lsrs	r3, r3, #16
    436c:	3370      	adds	r3, #112	; 0x70
    436e:	b29b      	uxth	r3, r3
    4370:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4374:	18e1      	adds	r1, r4, r3
    4376:	5ce2      	ldrb	r2, [r4, r3]
    4378:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    437c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4380:	54e2      	strb	r2, [r4, r3]
    4382:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    4386:	784a      	ldrb	r2, [r1, #1]
    4388:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    438c:	704a      	strb	r2, [r1, #1]
    438e:	788b      	ldrb	r3, [r1, #2]
    4390:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    4394:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4398:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    439a:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    439e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    43a2:	4413      	add	r3, r2
    43a4:	3301      	adds	r3, #1
    43a6:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43a8:	f8d8 3000 	ldr.w	r3, [r8]
    43ac:	9308      	str	r3, [sp, #32]
    43ae:	b2b6      	uxth	r6, r6
    43b0:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    43b2:	9b08      	ldr	r3, [sp, #32]
    43b4:	bf9c      	itt	ls
    43b6:	0236      	lslls	r6, r6, #8
    43b8:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    43ba:	fb0a f303 	mul.w	r3, sl, r3
    43be:	fb06 f303 	mul.w	r3, r6, r3
    43c2:	f3c3 430e 	ubfx	r3, r3, #16, #15
    43c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    43ca:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    43cc:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    43ce:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    43d2:	d503      	bpl.n	43dc <juggle_half(LEDStruct&)+0x7dc>
    43d4:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    43d8:	3207      	adds	r2, #7
    43da:	b292      	uxth	r2, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    43dc:	9802      	ldr	r0, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    43de:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    43e0:	f3c2 0246 	ubfx	r2, r2, #1, #7
    43e4:	f81b 5001 	ldrb.w	r5, [fp, r1]
    43e8:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
    43ec:	9803      	ldr	r0, [sp, #12]
    43ee:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    43f2:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    43f4:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    43f6:	bf48      	it	mi
    43f8:	426d      	negmi	r5, r5
    43fa:	b22d      	sxth	r5, r5
    43fc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4400:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4404:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4408:	9100      	str	r1, [sp, #0]
    440a:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    440e:	4649      	mov	r1, r9
    4410:	b2ad      	uxth	r5, r5
    4412:	f007 fb99 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4416:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    441a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    441e:	0c1b      	lsrs	r3, r3, #16
    4420:	334b      	adds	r3, #75	; 0x4b
    4422:	b29b      	uxth	r3, r3
    4424:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4428:	18e1      	adds	r1, r4, r3
    442a:	5ce2      	ldrb	r2, [r4, r3]
    442c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4430:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4434:	54e2      	strb	r2, [r4, r3]
    4436:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    443a:	784a      	ldrb	r2, [r1, #1]
    443c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4440:	704a      	strb	r2, [r1, #1]
    4442:	788b      	ldrb	r3, [r1, #2]
    4444:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    4448:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    444c:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    444e:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    4452:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4456:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    445a:	3701      	adds	r7, #1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    445c:	440a      	add	r2, r1
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    445e:	b2ff      	uxtb	r7, r7
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    4460:	b2d2      	uxtb	r2, r2
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4462:	42bb      	cmp	r3, r7
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    4464:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4468:	f63f af42 	bhi.w	42f0 <juggle_half(LEDStruct&)+0x6f0>
		}
	}
	else {
		strip_sync(leds);
	}
}
    446c:	b00d      	add	sp, #52	; 0x34
    446e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    4472:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4476:	2b00      	cmp	r3, #0
    4478:	f43f af07 	beq.w	428a <juggle_half(LEDStruct&)+0x68a>
    447c:	e62a      	b.n	40d4 <juggle_half(LEDStruct&)+0x4d4>
    447e:	bf00      	nop

00004480 <multi_juggle(LEDStruct&)>:
}




void multi_juggle(LEDStruct& leds) {
    4480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    4484:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
}




void multi_juggle(LEDStruct& leds) {
    4488:	b085      	sub	sp, #20
    448a:	4605      	mov	r5, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    448c:	2b00      	cmp	r3, #0
    448e:	f040 809e 	bne.w	45ce <multi_juggle(LEDStruct&)+0x14e>
    4492:	4ea4      	ldr	r6, [pc, #656]	; (4724 <multi_juggle(LEDStruct&)+0x2a4>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4494:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    4498:	8833      	ldrh	r3, [r6, #0]
    449a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    449e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    44a2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    44a6:	3019      	adds	r0, #25
    44a8:	b280      	uxth	r0, r0
    44aa:	eb00 2440 	add.w	r4, r0, r0, lsl #9
    44ae:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    44b2:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    44b6:	3419      	adds	r4, #25
    44b8:	b2a4      	uxth	r4, r4
    44ba:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    44be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    44c2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    44c6:	3319      	adds	r3, #25
    44c8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    44cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    44d0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    44d4:	3319      	adds	r3, #25
    44d6:	b29b      	uxth	r3, r3
    44d8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    44dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    44e0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    44e4:	3119      	adds	r1, #25
    44e6:	b289      	uxth	r1, r1
    44e8:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    44ec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    44f0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    44f4:	3219      	adds	r2, #25
    44f6:	b292      	uxth	r2, r2
    44f8:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    44fc:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4500:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4504:	f10e 0e19 	add.w	lr, lr, #25
    4508:	fa1f fe8e 	uxth.w	lr, lr
    450c:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    4510:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    4514:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    4518:	f10c 0c19 	add.w	ip, ip, #25
    451c:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4520:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4524:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    4528:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    452c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4530:	b2ff      	uxtb	r7, r7
    4532:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4536:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    453a:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    453e:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    4540:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4542:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4546:	ea4f 2927 	mov.w	r9, r7, asr #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    454a:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    454e:	f108 0819 	add.w	r8, r8, #25
	leds.juggle_beat		 = jb;
    4552:	118f      	asrs	r7, r1, #6
	leds.juggle_fade		 = jf;
    4554:	eb03 0343 	add.w	r3, r3, r3, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4558:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    455c:	fa1f f888 	uxth.w	r8, r8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4560:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4564:	f109 0101 	add.w	r1, r9, #1
    4568:	eb04 2414 	add.w	r4, r4, r4, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    456c:	111a      	asrs	r2, r3, #4
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    456e:	f3c4 14c0 	ubfx	r4, r4, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4572:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4576:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    457a:	f3c0 1ec0 	ubfx	lr, r0, #7, #1
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    457e:	f885 1230 	strb.w	r1, [r5, #560]	; 0x230
	leds.juggle_beat		 = jb;
    4582:	f107 0008 	add.w	r0, r7, #8
    4586:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_fade		 = jf;
    458a:	f102 0720 	add.w	r7, r2, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    458e:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4590:	f3cc 12c0 	ubfx	r2, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    4594:	f885 4236 	strb.w	r4, [r5, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4598:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    459c:	f885 0231 	strb.w	r0, [r5, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    45a0:	240f      	movs	r4, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    45a2:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    45a4:	f885 e235 	strb.w	lr, [r5, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    45a8:	f885 7232 	strb.w	r7, [r5, #562]	; 0x232
	leds.juggle_diff		 = jd;
    45ac:	f885 3233 	strb.w	r3, [r5, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    45b0:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    45b4:	f885 11c4 	strb.w	r1, [r5, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    45b8:	f885 2234 	strb.w	r2, [r5, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    45bc:	f885 022e 	strb.w	r0, [r5, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    45c0:	f885 022a 	strb.w	r0, [r5, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    45c4:	f885 41c3 	strb.w	r4, [r5, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    45c8:	2a00      	cmp	r2, #0
    45ca:	f040 809c 	bne.w	4706 <multi_juggle(LEDStruct&)+0x286>


void multi_juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    45ce:	4b56      	ldr	r3, [pc, #344]	; (4728 <multi_juggle(LEDStruct&)+0x2a8>)
    45d0:	781b      	ldrb	r3, [r3, #0]
    45d2:	2b00      	cmp	r3, #0
    45d4:	f040 80a1 	bne.w	471a <multi_juggle(LEDStruct&)+0x29a>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    45d8:	f895 3234 	ldrb.w	r3, [r5, #564]	; 0x234
    45dc:	b113      	cbz	r3, 45e4 <multi_juggle(LEDStruct&)+0x164>
    45de:	2300      	movs	r3, #0
    45e0:	f885 322f 	strb.w	r3, [r5, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    45e4:	f895 2232 	ldrb.w	r2, [r5, #562]	; 0x232
    45e8:	2196      	movs	r1, #150	; 0x96
    45ea:	4628      	mov	r0, r5
    45ec:	f007 fa4c 	bl	ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Use juggle_numdots to determine how many divisions
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    45f0:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    45f4:	2b00      	cmp	r3, #0
    45f6:	d072      	beq.n	46de <multi_juggle(LEDStruct&)+0x25e>
    45f8:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
    45fc:	f8df b130 	ldr.w	fp, [pc, #304]	; 4730 <multi_juggle(LEDStruct&)+0x2b0>
    4600:	f8df a130 	ldr.w	sl, [pc, #304]	; 4734 <multi_juggle(LEDStruct&)+0x2b4>
    4604:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
    4608:	2100      	movs	r1, #0
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    460a:	f44f 798c 	mov.w	r9, #280	; 0x118
    460e:	4618      	mov	r0, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4610:	f8db 3000 	ldr.w	r3, [fp]
    4614:	9303      	str	r3, [sp, #12]
	return ret;
    4616:	9c03      	ldr	r4, [sp, #12]
		leds.led_data[beatsin16(leds.juggle_beat, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    4618:	f895 3231 	ldrb.w	r3, [r5, #561]	; 0x231
    461c:	fb09 f404 	mul.w	r4, r9, r4
    4620:	021b      	lsls	r3, r3, #8
    4622:	fb03 f304 	mul.w	r3, r3, r4
    4626:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    462a:	1c4c      	adds	r4, r1, #1
    462c:	264b      	movs	r6, #75	; 0x4b
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    462e:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    4632:	fb96 f0f0 	sdiv	r0, r6, r0
    4636:	fb11 f600 	smulbb	r6, r1, r0
    463a:	fb14 f100 	smulbb	r1, r4, r0
    463e:	b2b6      	uxth	r6, r6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4640:	f3ce 00ca 	ubfx	r0, lr, #3, #11
    4644:	b289      	uxth	r1, r1
    if( theta & 0x4000 ) offset = 2047 - offset;
    4646:	d003      	beq.n	4650 <multi_juggle(LEDStruct&)+0x1d0>
    4648:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    464c:	3007      	adds	r0, #7
    464e:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4650:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4654:	4f35      	ldr	r7, [pc, #212]	; (472c <multi_juggle(LEDStruct&)+0x2ac>)
    4656:	f81a 300c 	ldrb.w	r3, [sl, ip]
    465a:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
    465e:	f3c0 0046 	ubfx	r0, r0, #1, #7
    4662:	fb03 c000 	mla	r0, r3, r0, ip
    4666:	b283      	uxth	r3, r0

    if( theta & 0x8000 ) y = -y;
    4668:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    466c:	bf18      	it	ne
    466e:	425b      	negne	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4670:	43f0      	mvns	r0, r6
    4672:	b21b      	sxth	r3, r3
    4674:	4401      	add	r1, r0
    4676:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    467a:	b29b      	uxth	r3, r3
    467c:	b289      	uxth	r1, r1
    467e:	fb01 3103 	mla	r1, r1, r3, r3
    4682:	f895 0228 	ldrb.w	r0, [r5, #552]	; 0x228
    4686:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    468a:	9000      	str	r0, [sp, #0]
    468c:	eb06 4611 	add.w	r6, r6, r1, lsr #16
    4690:	a802      	add	r0, sp, #8
    4692:	4641      	mov	r1, r8
    4694:	b2b6      	uxth	r6, r6
    4696:	f007 fa57 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    469a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    469e:	18e9      	adds	r1, r5, r3
    46a0:	5cea      	ldrb	r2, [r5, r3]
    46a2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    46a6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    46aa:	54ea      	strb	r2, [r5, r3]
    46ac:	f89d 3009 	ldrb.w	r3, [sp, #9]
    46b0:	784a      	ldrb	r2, [r1, #1]
    46b2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    46b6:	704a      	strb	r2, [r1, #1]
    46b8:	788b      	ldrb	r3, [r1, #2]
    46ba:	f89d 200a 	ldrb.w	r2, [sp, #10]
    46be:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    46c2:	708b      	strb	r3, [r1, #2]
		leds.juggle_index += leds.juggle_diff;
    46c4:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    46c8:	f895 2233 	ldrb.w	r2, [r5, #563]	; 0x233

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Use juggle_numdots to determine how many divisions
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    46cc:	f895 0230 	ldrb.w	r0, [r5, #560]	; 0x230
		leds.led_data[beatsin16(leds.juggle_beat, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		leds.juggle_index += leds.juggle_diff;
    46d0:	441a      	add	r2, r3

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Use juggle_numdots to determine how many divisions
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    46d2:	b2e1      	uxtb	r1, r4
		leds.led_data[beatsin16(leds.juggle_beat, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		leds.juggle_index += leds.juggle_diff;
    46d4:	b2d2      	uxtb	r2, r2

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Use juggle_numdots to determine how many divisions
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    46d6:	4288      	cmp	r0, r1
		leds.led_data[beatsin16(leds.juggle_beat, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		leds.juggle_index += leds.juggle_diff;
    46d8:	f885 222f 	strb.w	r2, [r5, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Use juggle_numdots to determine how many divisions
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    46dc:	d898      	bhi.n	4610 <multi_juggle(LEDStruct&)+0x190>
    46de:	f105 01e1 	add.w	r1, r5, #225	; 0xe1
    46e2:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    46e4:	781a      	ldrb	r2, [r3, #0]
    46e6:	f885 21bf 	strb.w	r2, [r5, #447]	; 0x1bf
        g = rhs.g;
    46ea:	785a      	ldrb	r2, [r3, #1]
    46ec:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    46f0:	789a      	ldrb	r2, [r3, #2]
    46f2:	f885 21c1 	strb.w	r2, [r5, #449]	; 0x1c1
    46f6:	3303      	adds	r3, #3
    46f8:	4299      	cmp	r1, r3
    46fa:	f1a5 0503 	sub.w	r5, r5, #3
    46fe:	d1f1      	bne.n	46e4 <multi_juggle(LEDStruct&)+0x264>
		leds.led_data[beatsin16(leds.juggle_beat, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
}
    4700:	b005      	add	sp, #20
    4702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    4706:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    470a:	4083      	lsls	r3, r0
    470c:	f885 3233 	strb.w	r3, [r5, #563]	; 0x233


void multi_juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    4710:	4b05      	ldr	r3, [pc, #20]	; (4728 <multi_juggle(LEDStruct&)+0x2a8>)
    4712:	781b      	ldrb	r3, [r3, #0]
    4714:	2b00      	cmp	r3, #0
    4716:	f43f af5f 	beq.w	45d8 <multi_juggle(LEDStruct&)+0x158>
    471a:	4628      	mov	r0, r5
    471c:	f7fe fde2 	bl	32e4 <juggle_update(LEDStruct&)>
    4720:	e75a      	b.n	45d8 <multi_juggle(LEDStruct&)+0x158>
    4722:	bf00      	nop
    4724:	1fff8788 	.word	0x1fff8788
    4728:	1fff9625 	.word	0x1fff9625
    472c:	0001111c 	.word	0x0001111c
    4730:	1fffb19c 	.word	0x1fffb19c
    4734:	00011854 	.word	0x00011854

00004738 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4738:	4b1a      	ldr	r3, [pc, #104]	; (47a4 <rainbow_update(LEDStruct&)+0x6c>)
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    473a:	4a1b      	ldr	r2, [pc, #108]	; (47a8 <rainbow_update(LEDStruct&)+0x70>)
	switch (update_var) {
    473c:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    473e:	2100      	movs	r1, #0
    4740:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4742:	2b04      	cmp	r3, #4
    4744:	d808      	bhi.n	4758 <rainbow_update(LEDStruct&)+0x20>
    4746:	e8df f003 	tbb	[pc, r3]
    474a:	1e0f      	.short	0x1e0f
    474c:	2703      	.short	0x2703
    474e:	09          	.byte	0x09
    474f:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    4750:	4b16      	ldr	r3, [pc, #88]	; (47ac <rainbow_update(LEDStruct&)+0x74>)
    4752:	881b      	ldrh	r3, [r3, #0]
    4754:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4758:	f7fd bd70 	b.w	223c <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
    475c:	4b13      	ldr	r3, [pc, #76]	; (47ac <rainbow_update(LEDStruct&)+0x74>)
    475e:	881b      	ldrh	r3, [r3, #0]
    4760:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		default:	break;
	}
	LEDDebug(leds);
    4764:	f7fd bd6a 	b.w	223c <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    4768:	4b10      	ldr	r3, [pc, #64]	; (47ac <rainbow_update(LEDStruct&)+0x74>)
    476a:	881b      	ldrh	r3, [r3, #0]
    476c:	2b00      	cmp	r3, #0
    476e:	bf14      	ite	ne
    4770:	2301      	movne	r3, #1
    4772:	2300      	moveq	r3, #0
    4774:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4778:	bf14      	ite	ne
    477a:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    477c:	234b      	moveq	r3, #75	; 0x4b
    477e:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4782:	f7fd bd5b 	b.w	223c <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    4786:	4b09      	ldr	r3, [pc, #36]	; (47ac <rainbow_update(LEDStruct&)+0x74>)
    4788:	881b      	ldrh	r3, [r3, #0]
    478a:	3300      	adds	r3, #0
    478c:	bf18      	it	ne
    478e:	2301      	movne	r3, #1
    4790:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4794:	f7fd bd52 	b.w	223c <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    4798:	4b04      	ldr	r3, [pc, #16]	; (47ac <rainbow_update(LEDStruct&)+0x74>)
    479a:	881b      	ldrh	r3, [r3, #0]
    479c:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    47a0:	f7fd bd4c 	b.w	223c <LEDDebug(LEDStruct&)>
    47a4:	1fff9e8c 	.word	0x1fff9e8c
    47a8:	1fff9625 	.word	0x1fff9625
    47ac:	1fff9526 	.word	0x1fff9526

000047b0 <rainbow_march(LEDStruct&)>:
}



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    47b0:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    47b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47b8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    47ba:	2b00      	cmp	r3, #0
    47bc:	d15c      	bne.n	4878 <rainbow_march(LEDStruct&)+0xc8>
    47be:	4869      	ldr	r0, [pc, #420]	; (4964 <rainbow_march(LEDStruct&)+0x1b4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    47c0:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    47c4:	8803      	ldrh	r3, [r0, #0]
    47c6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    47ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    47ce:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    47d2:	3319      	adds	r3, #25
    47d4:	b29b      	uxth	r3, r3
    47d6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    47da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    47de:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    47e2:	3219      	adds	r2, #25
    47e4:	b292      	uxth	r2, r2
    47e6:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    47ea:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    47ee:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    47f2:	3119      	adds	r1, #25
    47f4:	b289      	uxth	r1, r1
    47f6:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    47fa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    47fe:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4802:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4806:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4808:	3619      	adds	r6, #25
    480a:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    480c:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4810:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4814:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4818:	b2ed      	uxtb	r5, r5
    481a:	121b      	asrs	r3, r3, #8
    481c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4820:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    4822:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4826:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    482a:	11ed      	asrs	r5, r5, #7
    482c:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    482e:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4832:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4834:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4836:	2607      	movs	r6, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4838:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    483a:	4573      	cmp	r3, lr
    483c:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    483e:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    4842:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    4846:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    484a:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    484e:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4852:	f000 8085 	beq.w	4960 <rainbow_march(LEDStruct&)+0x1b0>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4856:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    485a:	b2d2      	uxtb	r2, r2
    485c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4860:	1212      	asrs	r2, r2, #8
    4862:	4472      	add	r2, lr
    4864:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    4866:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    486a:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    486e:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    4872:	4620      	mov	r0, r4
    4874:	f7fd fce2 	bl	223c <LEDDebug(LEDStruct&)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4878:	4b3b      	ldr	r3, [pc, #236]	; (4968 <rainbow_march(LEDStruct&)+0x1b8>)
    487a:	781b      	ldrb	r3, [r3, #0]
    487c:	2b00      	cmp	r3, #0
    487e:	d16b      	bne.n	4958 <rainbow_march(LEDStruct&)+0x1a8>

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4880:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4884:	bb43      	cbnz	r3, 48d8 <rainbow_march(LEDStruct&)+0x128>
    4886:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    488a:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    488e:	441a      	add	r2, r3

	if (!leds.rainbow_split) {
    4890:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4894:	b2d2      	uxtb	r2, r2
    4896:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    489a:	bb4b      	cbnz	r3, 48f0 <rainbow_march(LEDStruct&)+0x140>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    489c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    48a0:	2b00      	cmp	r3, #0
    48a2:	d151      	bne.n	4948 <rainbow_march(LEDStruct&)+0x198>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    48a4:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    48a8:	214b      	movs	r1, #75	; 0x4b
    48aa:	4620      	mov	r0, r4
    48ac:	f007 f83a 	bl	b924 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    48b0:	4620      	mov	r0, r4
    48b2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    48b6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48b8:	7802      	ldrb	r2, [r0, #0]
    48ba:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    48be:	7842      	ldrb	r2, [r0, #1]
    48c0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    48c4:	7882      	ldrb	r2, [r0, #2]
    48c6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    48ca:	3003      	adds	r0, #3
    48cc:	4288      	cmp	r0, r1
    48ce:	f1a3 0303 	sub.w	r3, r3, #3
    48d2:	d1f1      	bne.n	48b8 <rainbow_march(LEDStruct&)+0x108>
    48d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    48d8:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    48dc:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    48e0:	1a9a      	subs	r2, r3, r2

	if (!leds.rainbow_split) {
    48e2:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    48e6:	b2d2      	uxtb	r2, r2
    48e8:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    48ec:	2b00      	cmp	r3, #0
    48ee:	d0d5      	beq.n	489c <rainbow_march(LEDStruct&)+0xec>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    48f0:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    48f4:	2125      	movs	r1, #37	; 0x25
    48f6:	4620      	mov	r0, r4
    48f8:	f007 f814 	bl	b924 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    48fc:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4900:	4623      	mov	r3, r4
    4902:	4621      	mov	r1, r4
    4904:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4906:	7810      	ldrb	r0, [r2, #0]
    4908:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    490c:	7850      	ldrb	r0, [r2, #1]
    490e:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4912:	7890      	ldrb	r0, [r2, #2]
    4914:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4918:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    491a:	42aa      	cmp	r2, r5
    491c:	f1a1 0103 	sub.w	r1, r1, #3
    4920:	d1f1      	bne.n	4906 <rainbow_march(LEDStruct&)+0x156>
    4922:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4926:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4928:	7802      	ldrb	r2, [r0, #0]
    492a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    492e:	7842      	ldrb	r2, [r0, #1]
    4930:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4934:	7882      	ldrb	r2, [r0, #2]
    4936:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    493a:	3003      	adds	r0, #3
    493c:	4288      	cmp	r0, r1
    493e:	f1a3 0303 	sub.w	r3, r3, #3
    4942:	d1f1      	bne.n	4928 <rainbow_march(LEDStruct&)+0x178>
    4944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4948:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    494c:	4620      	mov	r0, r4
    494e:	2196      	movs	r1, #150	; 0x96
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    4950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4954:	f006 bfe6 	b.w	b924 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4958:	4620      	mov	r0, r4
    495a:	f7ff feed 	bl	4738 <rainbow_update(LEDStruct&)>
    495e:	e78f      	b.n	4880 <rainbow_march(LEDStruct&)+0xd0>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4960:	461a      	mov	r2, r3
    4962:	e780      	b.n	4866 <rainbow_march(LEDStruct&)+0xb6>
    4964:	1fff8788 	.word	0x1fff8788
    4968:	1fff9625 	.word	0x1fff9625

0000496c <rainbow_march_beat(LEDStruct&)>:
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    496c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    4970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4974:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4976:	2b00      	cmp	r3, #0
    4978:	d15c      	bne.n	4a34 <rainbow_march_beat(LEDStruct&)+0xc8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    497a:	4871      	ldr	r0, [pc, #452]	; (4b40 <rainbow_march_beat(LEDStruct&)+0x1d4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    497c:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4980:	8803      	ldrh	r3, [r0, #0]
    4982:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4986:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    498a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    498e:	3319      	adds	r3, #25
    4990:	b29b      	uxth	r3, r3
    4992:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4996:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    499a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    499e:	3219      	adds	r2, #25
    49a0:	b292      	uxth	r2, r2
    49a2:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    49a6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    49aa:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    49ae:	3119      	adds	r1, #25
    49b0:	b289      	uxth	r1, r1
    49b2:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    49b6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    49ba:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49be:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    49c2:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49c4:	3619      	adds	r6, #25
    49c6:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    49c8:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49cc:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    49d0:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    49d4:	b2ed      	uxtb	r5, r5
    49d6:	121b      	asrs	r3, r3, #8
    49d8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    49dc:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    49de:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49e2:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    49e6:	11ed      	asrs	r5, r5, #7
    49e8:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    49ea:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49ee:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    49f0:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    49f2:	2607      	movs	r6, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    49f4:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    49f6:	4573      	cmp	r3, lr
    49f8:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    49fa:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    49fe:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    4a02:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4a06:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4a0a:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4a0e:	f000 8094 	beq.w	4b3a <rainbow_march_beat(LEDStruct&)+0x1ce>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a12:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4a16:	b2d2      	uxtb	r2, r2
    4a18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4a1c:	1212      	asrs	r2, r2, #8
    4a1e:	4472      	add	r2, lr
    4a20:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    4a22:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    4a26:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    4a2a:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    4a2e:	4620      	mov	r0, r4
    4a30:	f7fd fc04 	bl	223c <LEDDebug(LEDStruct&)>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4a34:	4b43      	ldr	r3, [pc, #268]	; (4b44 <rainbow_march_beat(LEDStruct&)+0x1d8>)
    4a36:	781b      	ldrb	r3, [r3, #0]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d17a      	bne.n	4b32 <rainbow_march_beat(LEDStruct&)+0x1c6>

	if (leds.this_dir == 0) {
    4a3c:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4a40:	bb7b      	cbnz	r3, 4aa2 <rainbow_march_beat(LEDStruct&)+0x136>
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    4a42:	4619      	mov	r1, r3
    4a44:	2205      	movs	r2, #5
    4a46:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    4a4a:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    4a4e:	f7fb fe8b 	bl	768 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.36]>
    4a52:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    4a56:	442b      	add	r3, r5
    4a58:	4418      	add	r0, r3
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4a5a:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    4a5e:	b2c2      	uxtb	r2, r0
    4a60:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4a64:	bb8b      	cbnz	r3, 4aca <rainbow_march_beat(LEDStruct&)+0x15e>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4a66:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d159      	bne.n	4b22 <rainbow_march_beat(LEDStruct&)+0x1b6>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4a6e:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4a72:	214b      	movs	r1, #75	; 0x4b
    4a74:	4620      	mov	r0, r4
    4a76:	f006 ff55 	bl	b924 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4a7a:	4620      	mov	r0, r4
    4a7c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4a80:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a82:	781a      	ldrb	r2, [r3, #0]
    4a84:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4a88:	785a      	ldrb	r2, [r3, #1]
    4a8a:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    4a8e:	789a      	ldrb	r2, [r3, #2]
    4a90:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    4a94:	3303      	adds	r3, #3
    4a96:	428b      	cmp	r3, r1
    4a98:	f1a0 0003 	sub.w	r0, r0, #3
    4a9c:	d1f1      	bne.n	4a82 <rainbow_march_beat(LEDStruct&)+0x116>
    4a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    4aa2:	2300      	movs	r3, #0
    4aa4:	4619      	mov	r1, r3
    4aa6:	2205      	movs	r2, #5
    4aa8:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    4aac:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    4ab0:	f7fb fe5a 	bl	768 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.36]>
    4ab4:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    4ab8:	1b5b      	subs	r3, r3, r5
    4aba:	1a18      	subs	r0, r3, r0
	}

	if (!leds.rainbow_split) {
    4abc:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    4ac0:	b2c2      	uxtb	r2, r0
    4ac2:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}

	if (!leds.rainbow_split) {
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d0cd      	beq.n	4a66 <rainbow_march_beat(LEDStruct&)+0xfa>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4aca:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4ace:	2125      	movs	r1, #37	; 0x25
    4ad0:	4620      	mov	r0, r4
    4ad2:	f006 ff27 	bl	b924 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4ad6:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4ada:	4623      	mov	r3, r4
    4adc:	4621      	mov	r1, r4
    4ade:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ae0:	7810      	ldrb	r0, [r2, #0]
    4ae2:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    4ae6:	7850      	ldrb	r0, [r2, #1]
    4ae8:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4aec:	7890      	ldrb	r0, [r2, #2]
    4aee:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4af2:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    4af4:	42aa      	cmp	r2, r5
    4af6:	f1a1 0103 	sub.w	r1, r1, #3
    4afa:	d1f1      	bne.n	4ae0 <rainbow_march_beat(LEDStruct&)+0x174>
    4afc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4b00:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b02:	7802      	ldrb	r2, [r0, #0]
    4b04:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4b08:	7842      	ldrb	r2, [r0, #1]
    4b0a:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4b0e:	7882      	ldrb	r2, [r0, #2]
    4b10:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4b14:	3003      	adds	r0, #3
    4b16:	4288      	cmp	r0, r1
    4b18:	f1a3 0303 	sub.w	r3, r3, #3
    4b1c:	d1f1      	bne.n	4b02 <rainbow_march_beat(LEDStruct&)+0x196>
    4b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4b22:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4b26:	4620      	mov	r0, r4
    4b28:	2196      	movs	r1, #150	; 0x96
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    4b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4b2e:	f006 bef9 	b.w	b924 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4b32:	4620      	mov	r0, r4
    4b34:	f7ff fe00 	bl	4738 <rainbow_update(LEDStruct&)>
    4b38:	e780      	b.n	4a3c <rainbow_march_beat(LEDStruct&)+0xd0>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4b3a:	461a      	mov	r2, r3
    4b3c:	e771      	b.n	4a22 <rainbow_march_beat(LEDStruct&)+0xb6>
    4b3e:	bf00      	nop
    4b40:	1fff8788 	.word	0x1fff8788
    4b44:	1fff9625 	.word	0x1fff9625

00004b48 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4b48:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4b4a:	f890 422c 	ldrb.w	r4, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4b4e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    4b52:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    4b56:	250c      	movs	r5, #12
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    4b58:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4b5a:	3c10      	subs	r4, #16
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    4b5c:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4b60:	42bc      	cmp	r4, r7
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
    4b62:	f04f 050f 	mov.w	r5, #15
    4b66:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    4b6a:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4b6e:	f89d 5014 	ldrb.w	r5, [sp, #20]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4b72:	d93d      	bls.n	4bf0 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
	else														 { leds.use_palette = 0; }
    4b74:	2300      	movs	r3, #0
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    4b76:	244b      	movs	r4, #75	; 0x4b
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4b78:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    4b7c:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4b80:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4b84:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4b88:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }
    4b8c:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    4b90:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
    4b94:	f880 4316 	strb.w	r4, [r0, #790]	; 0x316
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b98:	4c1f      	ldr	r4, [pc, #124]	; (4c18 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    4b9a:	8823      	ldrh	r3, [r4, #0]
    4b9c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4ba0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4ba4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4ba8:	3319      	adds	r3, #25
    4baa:	b29b      	uxth	r3, r3
    4bac:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4bb0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4bb4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4bb8:	3219      	adds	r2, #25
    4bba:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bbc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4bc0:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    4bc4:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    4bc6:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4bc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    4bcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4bd0:	3d0a      	subs	r5, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    4bd2:	3e0a      	subs	r6, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4bd4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    4bd8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4bdc:	eb05 2323 	add.w	r3, r5, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    4be0:	eb06 2121 	add.w	r1, r6, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4be4:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4be8:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    4bea:	f880 127f 	strb.w	r1, [r0, #639]	; 0x27f
}
    4bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4bf0:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4bf4:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    4bf8:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4bfc:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4c00:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4c04:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    4c08:	b112      	cbz	r2, 4c10 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc8>
    4c0a:	2225      	movs	r2, #37	; 0x25
    4c0c:	f880 2317 	strb.w	r2, [r0, #791]	; 0x317
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
    4c10:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    4c14:	e7c0      	b.n	4b98 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    4c16:	bf00      	nop
    4c18:	1fff8788 	.word	0x1fff8788

00004c1c <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4c1c:	4b19      	ldr	r3, [pc, #100]	; (4c84 <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4c1e:	4a1a      	ldr	r2, [pc, #104]	; (4c88 <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    4c20:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4c22:	2100      	movs	r1, #0
    4c24:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4c26:	2b05      	cmp	r3, #5
    4c28:	d808      	bhi.n	4c3c <fire_update(LEDStruct&)+0x20>
    4c2a:	e8df f003 	tbb	[pc, r3]
    4c2e:	150f      	.short	0x150f
    4c30:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    4c34:	4b15      	ldr	r3, [pc, #84]	; (4c8c <fire_update(LEDStruct&)+0x70>)
    4c36:	881b      	ldrh	r3, [r3, #0]
    4c38:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4c3c:	f7fd bafe 	b.w	223c <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    4c40:	4b12      	ldr	r3, [pc, #72]	; (4c8c <fire_update(LEDStruct&)+0x70>)
    4c42:	881b      	ldrh	r3, [r3, #0]
    4c44:	f880 331b 	strb.w	r3, [r0, #795]	; 0x31b
		default:	break;
	}
	LEDDebug(leds);
    4c48:	f7fd baf8 	b.w	223c <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    4c4c:	4b0f      	ldr	r3, [pc, #60]	; (4c8c <fire_update(LEDStruct&)+0x70>)
    4c4e:	881b      	ldrh	r3, [r3, #0]
    4c50:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4c54:	f7fd baf2 	b.w	223c <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    4c58:	4b0c      	ldr	r3, [pc, #48]	; (4c8c <fire_update(LEDStruct&)+0x70>)
    4c5a:	881b      	ldrh	r3, [r3, #0]
    4c5c:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4c60:	f7fd baec 	b.w	223c <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    4c64:	4b09      	ldr	r3, [pc, #36]	; (4c8c <fire_update(LEDStruct&)+0x70>)
    4c66:	881b      	ldrh	r3, [r3, #0]
    4c68:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4c6c:	f7fd bae6 	b.w	223c <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    4c70:	4b06      	ldr	r3, [pc, #24]	; (4c8c <fire_update(LEDStruct&)+0x70>)
    4c72:	881b      	ldrh	r3, [r3, #0]
    4c74:	3300      	adds	r3, #0
    4c76:	bf18      	it	ne
    4c78:	2301      	movne	r3, #1
    4c7a:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4c7e:	f7fd badd 	b.w	223c <LEDDebug(LEDStruct&)>
    4c82:	bf00      	nop
    4c84:	1fff9e8c 	.word	0x1fff9e8c
    4c88:	1fff9625 	.word	0x1fff9625
    4c8c:	1fff9526 	.word	0x1fff9526

00004c90 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    4c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4c94:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4c98:	4dc5      	ldr	r5, [pc, #788]	; (4fb0 <fire(LEDStruct&)+0x320>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    4c9a:	b087      	sub	sp, #28
    4c9c:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	f000 8210 	beq.w	50c4 <fire(LEDStruct&)+0x434>
	if (keyboard_update) { fire_update(leds); }
    4ca4:	4bc3      	ldr	r3, [pc, #780]	; (4fb4 <fire(LEDStruct&)+0x324>)
    4ca6:	781b      	ldrb	r3, [r3, #0]
    4ca8:	2b00      	cmp	r3, #0
    4caa:	f040 8207 	bne.w	50bc <fire(LEDStruct&)+0x42c>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4cae:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	f000 82ba 	beq.w	522c <fire(LEDStruct&)+0x59c>
    4cb8:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4cbc:	882a      	ldrh	r2, [r5, #0]
    4cbe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4cc2:	004f      	lsls	r7, r1, #1
    4cc4:	f203 2e7f 	addw	lr, r3, #639	; 0x27f
    4cc8:	fb97 f7f3 	sdiv	r7, r7, r3
    4ccc:	3702      	adds	r7, #2
    4cce:	b2ff      	uxtb	r7, r7
    4cd0:	44a6      	add	lr, r4
    4cd2:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4cd6:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4cda:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4cde:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4ce2:	3219      	adds	r2, #25
    4ce4:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ce6:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4cea:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4cee:	b2c9      	uxtb	r1, r1
    4cf0:	fb11 f107 	smulbb	r1, r1, r7
    4cf4:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4cf8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4cfc:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4cfe:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4d00:	d1e9      	bne.n	4cd6 <fire(LEDStruct&)+0x46>
    4d02:	802a      	strh	r2, [r5, #0]
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4d04:	1edf      	subs	r7, r3, #3
    4d06:	2f01      	cmp	r7, #1
    4d08:	dd16      	ble.n	4d38 <fire(LEDStruct&)+0xa8>
    4d0a:	f503 701f 	add.w	r0, r3, #636	; 0x27c
    4d0e:	f203 2e7e 	addw	lr, r3, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4d12:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 4fb8 <fire(LEDStruct&)+0x328>
    4d16:	4420      	add	r0, r4
    4d18:	44a6      	add	lr, r4
    4d1a:	f504 7820 	add.w	r8, r4, #640	; 0x280
    4d1e:	7801      	ldrb	r1, [r0, #0]
    4d20:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    4d24:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    4d28:	fb8c 9601 	smull	r9, r6, ip, r1
    4d2c:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4d30:	4540      	cmp	r0, r8
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4d32:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4d36:	d1f2      	bne.n	4d1e <fire(LEDStruct&)+0x8e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d38:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4d3c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4d40:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4d44:	3219      	adds	r2, #25
    4d46:	b292      	uxth	r2, r2
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    4d48:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    4d4c:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    4d50:	802a      	strh	r2, [r5, #0]
    4d52:	b2c9      	uxtb	r1, r1
    4d54:	428e      	cmp	r6, r1
    4d56:	4896      	ldr	r0, [pc, #600]	; (4fb0 <fire(LEDStruct&)+0x320>)
    4d58:	d926      	bls.n	4da8 <fire(LEDStruct&)+0x118>
    4d5a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4d5e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4d62:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4d66:	3219      	adds	r2, #25
    4d68:	b292      	uxth	r2, r2
    4d6a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4d6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4d72:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4d76:	3619      	adds	r6, #25
    4d78:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d7a:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    4d7e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4d82:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4d84:	b2d2      	uxtb	r2, r2
    4d86:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    4d8a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4d8e:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4d92:	ebc1 114e 	rsb	r1, r1, lr, lsl #5
    4d96:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d98:	8006      	strh	r6, [r0, #0]
    4d9a:	3960      	subs	r1, #96	; 0x60
    4d9c:	f892 0280 	ldrb.w	r0, [r2, #640]	; 0x280
    4da0:	fa80 f051 	uqadd8	r0, r0, r1
    4da4:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    4da8:	f894 c318 	ldrb.w	ip, [r4, #792]	; 0x318
    4dac:	f1bc 0f00 	cmp.w	ip, #0
    4db0:	d17a      	bne.n	4ea8 <fire(LEDStruct&)+0x218>
		for (int i = 0; i < leds.heat_length; i++) {
    4db2:	2b00      	cmp	r3, #0
    4db4:	f000 822f 	beq.w	5216 <fire(LEDStruct&)+0x586>
    4db8:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    4dbc:	882a      	ldrh	r2, [r5, #0]
    4dbe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4dc2:	004e      	lsls	r6, r1, #1
    4dc4:	f203 2eca 	addw	lr, r3, #714	; 0x2ca
    4dc8:	fb96 f6f3 	sdiv	r6, r6, r3
    4dcc:	3602      	adds	r6, #2
    4dce:	b2f6      	uxtb	r6, r6
    4dd0:	44a6      	add	lr, r4
    4dd2:	f204 20ca 	addw	r0, r4, #714	; 0x2ca
    4dd6:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4dda:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4dde:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4de2:	3219      	adds	r2, #25
    4de4:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4de6:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4dea:	f810 8f01 	ldrb.w	r8, [r0, #1]!
    4dee:	b2c9      	uxtb	r1, r1
    4df0:	fb11 f106 	smulbb	r1, r1, r6
    4df4:	eba8 2111 	sub.w	r1, r8, r1, lsr #8
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4df8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4dfc:	4570      	cmp	r0, lr
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4dfe:	7001      	strb	r1, [r0, #0]
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4e00:	d1e9      	bne.n	4dd6 <fire(LEDStruct&)+0x146>
    4e02:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e04:	2f01      	cmp	r7, #1
    4e06:	dd16      	ble.n	4e36 <fire(LEDStruct&)+0x1a6>
    4e08:	f203 20c7 	addw	r0, r3, #711	; 0x2c7
    4e0c:	f203 27c9 	addw	r7, r3, #713	; 0x2c9
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4e10:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 4fb8 <fire(LEDStruct&)+0x328>
    4e14:	4420      	add	r0, r4
    4e16:	4427      	add	r7, r4
    4e18:	f204 28cb 	addw	r8, r4, #715	; 0x2cb
    4e1c:	7801      	ldrb	r1, [r0, #0]
    4e1e:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    4e22:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    4e26:	fb8e 9601 	smull	r9, r6, lr, r1
    4e2a:	eba6 71e1 	sub.w	r1, r6, r1, asr #31

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e2e:	4580      	cmp	r8, r0
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4e30:	f807 1d01 	strb.w	r1, [r7, #-1]!

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e34:	d1f2      	bne.n	4e1c <fire(LEDStruct&)+0x18c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e36:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4e3a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4e3e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4e42:	3219      	adds	r2, #25
    4e44:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
    4e46:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    4e4a:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4e4e:	802a      	strh	r2, [r5, #0]
    4e50:	b2c9      	uxtb	r1, r1
    4e52:	428e      	cmp	r6, r1
    4e54:	4856      	ldr	r0, [pc, #344]	; (4fb0 <fire(LEDStruct&)+0x320>)
    4e56:	d927      	bls.n	4ea8 <fire(LEDStruct&)+0x218>
    4e58:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4e5c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4e60:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4e64:	3219      	adds	r2, #25
    4e66:	b292      	uxth	r2, r2
    4e68:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    4e6c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4e70:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4e74:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e76:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e7a:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4e7c:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e7e:	eb05 2115 	add.w	r1, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4e82:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4e86:	b2c9      	uxtb	r1, r1
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4e88:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4e8c:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    4e90:	ebc1 1146 	rsb	r1, r1, r6, lsl #5
    4e94:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e98:	8005      	strh	r5, [r0, #0]
    4e9a:	1209      	asrs	r1, r1, #8
    4e9c:	3960      	subs	r1, #96	; 0x60
    4e9e:	4630      	mov	r0, r6
    4ea0:	fa80 f051 	uqadd8	r0, r0, r1
    4ea4:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    4ea8:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4eac:	2a00      	cmp	r2, #0
    4eae:	d15e      	bne.n	4f6e <fire(LEDStruct&)+0x2de>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	f000 80d3 	beq.w	505c <fire(LEDStruct&)+0x3cc>
    4eb6:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4eba:	4690      	mov	r8, r2
    4ebc:	46b9      	mov	r9, r7
    4ebe:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    4ec0:	3b01      	subs	r3, #1
    4ec2:	ebc8 0503 	rsb	r5, r8, r3
    4ec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4eca:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4ece:	4630      	mov	r0, r6
    4ed0:	f006 fe18 	bl	bb04 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ed4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4ed8:	5563      	strb	r3, [r4, r5]
    4eda:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4edc:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4ee0:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4ee4:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4ee6:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4ee8:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4eec:	f108 0801 	add.w	r8, r8, #1
    4ef0:	4543      	cmp	r3, r8
    4ef2:	dce5      	bgt.n	4ec0 <fire(LEDStruct&)+0x230>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4ef4:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4ef8:	b30a      	cbz	r2, 4f3e <fire(LEDStruct&)+0x2ae>
		if (leds.this_dir) {
    4efa:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4efe:	2a00      	cmp	r2, #0
    4f00:	f040 8149 	bne.w	5196 <fire(LEDStruct&)+0x506>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4f04:	4690      	mov	r8, r2
    4f06:	2b00      	cmp	r3, #0
    4f08:	f000 818a 	beq.w	5220 <fire(LEDStruct&)+0x590>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    4f0c:	eb08 0503 	add.w	r5, r8, r3
    4f10:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4f14:	4630      	mov	r0, r6
    4f16:	f006 fdf5 	bl	bb04 <HeatColor(unsigned char)>
    4f1a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f1e:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4f22:	54e2      	strb	r2, [r4, r3]
    4f24:	4423      	add	r3, r4
        g = rhs.g;
    4f26:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    4f2a:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4f2e:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    4f30:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4f32:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4f36:	f108 0801 	add.w	r8, r8, #1
    4f3a:	4543      	cmp	r3, r8
    4f3c:	dce6      	bgt.n	4f0c <fire(LEDStruct&)+0x27c>
    4f3e:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4f42:	2a00      	cmp	r2, #0
    4f44:	d03a      	beq.n	4fbc <fire(LEDStruct&)+0x32c>
    4f46:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4f4a:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f4c:	7822      	ldrb	r2, [r4, #0]
    4f4e:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4f52:	7862      	ldrb	r2, [r4, #1]
    4f54:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4f58:	78a2      	ldrb	r2, [r4, #2]
    4f5a:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4f5e:	3403      	adds	r4, #3
    4f60:	42a1      	cmp	r1, r4
    4f62:	f1a3 0303 	sub.w	r3, r3, #3
    4f66:	d1f1      	bne.n	4f4c <fire(LEDStruct&)+0x2bc>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4f68:	b007      	add	sp, #28
    4f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    4f6e:	2b00      	cmp	r3, #0
    4f70:	f000 8153 	beq.w	521a <fire(LEDStruct&)+0x58a>
    4f74:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4f78:	46b9      	mov	r9, r7
    4f7a:	4625      	mov	r5, r4
    4f7c:	f04f 0800 	mov.w	r8, #0
    4f80:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4f82:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4f86:	4630      	mov	r0, r6
    4f88:	f006 fdbc 	bl	bb04 <HeatColor(unsigned char)>
    4f8c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f90:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4f94:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f98:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    4f9a:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4f9c:	70ab      	strb	r3, [r5, #2]
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    4f9e:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4fa2:	f108 0801 	add.w	r8, r8, #1
    4fa6:	4543      	cmp	r3, r8
    4fa8:	f105 0503 	add.w	r5, r5, #3
    4fac:	dce9      	bgt.n	4f82 <fire(LEDStruct&)+0x2f2>
    4fae:	e7a1      	b.n	4ef4 <fire(LEDStruct&)+0x264>
    4fb0:	1fff8788 	.word	0x1fff8788
    4fb4:	1fff9625 	.word	0x1fff9625
    4fb8:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    4fbc:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4fc0:	2a00      	cmp	r2, #0
    4fc2:	d056      	beq.n	5072 <fire(LEDStruct&)+0x3e2>
			for (int j = 0; j < leds.heat_length; j++) {
    4fc4:	2b00      	cmp	r3, #0
    4fc6:	d0cf      	beq.n	4f68 <fire(LEDStruct&)+0x2d8>
    4fc8:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4fcc:	46b9      	mov	r9, r7
    4fce:	4625      	mov	r5, r4
    4fd0:	f04f 0800 	mov.w	r8, #0
    4fd4:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    4fd6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4fda:	4630      	mov	r0, r6
    4fdc:	f006 fd92 	bl	bb04 <HeatColor(unsigned char)>
    4fe0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4fe4:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4fe8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4fec:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    4ff0:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    4ff4:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4ff8:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4ffc:	f108 0801 	add.w	r8, r8, #1
    5000:	4543      	cmp	r3, r8
    5002:	f1a5 0503 	sub.w	r5, r5, #3
    5006:	dce6      	bgt.n	4fd6 <fire(LEDStruct&)+0x346>
		else {
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    5008:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    500c:	2a00      	cmp	r2, #0
    500e:	d0ab      	beq.n	4f68 <fire(LEDStruct&)+0x2d8>
			if (leds.this_dir) {
    5010:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    5014:	2a00      	cmp	r2, #0
    5016:	f000 80dd 	beq.w	51d4 <fire(LEDStruct&)+0x544>
				for (int j = 0; j < leds.heat_length; j++) {
    501a:	2b00      	cmp	r3, #0
    501c:	d0a4      	beq.n	4f68 <fire(LEDStruct&)+0x2d8>
    501e:	4625      	mov	r5, r4
    5020:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    5024:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5028:	4630      	mov	r0, r6
    502a:	f006 fd6b 	bl	bb04 <HeatColor(unsigned char)>
    502e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5032:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    5036:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    503a:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    503e:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    5042:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    5046:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    504a:	f108 0801 	add.w	r8, r8, #1
    504e:	4543      	cmp	r3, r8
    5050:	f105 0503 	add.w	r5, r5, #3
    5054:	dce6      	bgt.n	5024 <fire(LEDStruct&)+0x394>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    5056:	b007      	add	sp, #28
    5058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    505c:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    5060:	2b00      	cmp	r3, #0
    5062:	f040 80dd 	bne.w	5220 <fire(LEDStruct&)+0x590>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    5066:	f1bc 0f00 	cmp.w	ip, #0
    506a:	f47f af6c 	bne.w	4f46 <fire(LEDStruct&)+0x2b6>
    506e:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    5072:	2b00      	cmp	r3, #0
    5074:	f43f af78 	beq.w	4f68 <fire(LEDStruct&)+0x2d8>
    5078:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    507c:	46b9      	mov	r9, r7
    507e:	f04f 0800 	mov.w	r8, #0
    5082:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    5084:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    5088:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    508c:	354b      	adds	r5, #75	; 0x4b
    508e:	4445      	add	r5, r8
    5090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5094:	4630      	mov	r0, r6
    5096:	f006 fd35 	bl	bb04 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    509a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    509e:	5563      	strb	r3, [r4, r5]
    50a0:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    50a2:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    50a6:	f89d 2015 	ldrb.w	r2, [sp, #21]
    50aa:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    50ac:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    50ae:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    50b2:	f108 0801 	add.w	r8, r8, #1
    50b6:	4543      	cmp	r3, r8
    50b8:	dce4      	bgt.n	5084 <fire(LEDStruct&)+0x3f4>
    50ba:	e7a5      	b.n	5008 <fire(LEDStruct&)+0x378>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    50bc:	4620      	mov	r0, r4
    50be:	f7ff fdad 	bl	4c1c <fire_update(LEDStruct&)>
    50c2:	e5f4      	b.n	4cae <fire(LEDStruct&)+0x1e>
    50c4:	882b      	ldrh	r3, [r5, #0]
    50c6:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    50ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    50ce:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    50d2:	3119      	adds	r1, #25
    50d4:	b289      	uxth	r1, r1
    50d6:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    50da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    50de:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    50e2:	3219      	adds	r2, #25
    50e4:	b292      	uxth	r2, r2
    50e6:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    50ea:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    50ee:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    50f2:	f10e 0e19 	add.w	lr, lr, #25
    50f6:	fa1f fe8e 	uxth.w	lr, lr
    50fa:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    50fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    5102:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5106:	3619      	adds	r6, #25
    5108:	b2b6      	uxth	r6, r6
    510a:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    510e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5112:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5116:	3319      	adds	r3, #25
    5118:	b29b      	uxth	r3, r3
    511a:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    511e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5122:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    5126:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    512a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    512e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    5132:	b2f6      	uxtb	r6, r6
    5134:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5138:	3719      	adds	r7, #25
    513a:	b2db      	uxtb	r3, r3
    513c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    5140:	b2bf      	uxth	r7, r7
    5142:	11b6      	asrs	r6, r6, #6
    5144:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    5148:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    514c:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    5150:	119b      	asrs	r3, r3, #6
    5152:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5156:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    515a:	333c      	adds	r3, #60	; 0x3c
    515c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    5160:	f3c6 1681 	ubfx	r6, r6, #6, #2
    5164:	fa5f f883 	uxtb.w	r8, r3
    5168:	fa5f fc8c 	uxtb.w	ip, ip
    516c:	3601      	adds	r6, #1
    516e:	f10e 0314 	add.w	r3, lr, #20
    5172:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5176:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    517a:	f8cd c000 	str.w	ip, [sp]
    517e:	f8cd 8004 	str.w	r8, [sp, #4]
    5182:	9602      	str	r6, [sp, #8]
    5184:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    5188:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    518c:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    518e:	802f      	strh	r7, [r5, #0]
    5190:	f7ff fcda 	bl	4b48 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    5194:	e586      	b.n	4ca4 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    5196:	2b00      	cmp	r3, #0
    5198:	d042      	beq.n	5220 <fire(LEDStruct&)+0x590>
    519a:	4625      	mov	r5, r4
    519c:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    51a0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    51a4:	4630      	mov	r0, r6
    51a6:	f006 fcad 	bl	bb04 <HeatColor(unsigned char)>
    51aa:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    51ae:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    51b2:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    51b6:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    51ba:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    51be:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    51c2:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    51c6:	f108 0801 	add.w	r8, r8, #1
    51ca:	4543      	cmp	r3, r8
    51cc:	f1a5 0503 	sub.w	r5, r5, #3
    51d0:	dce6      	bgt.n	51a0 <fire(LEDStruct&)+0x510>
    51d2:	e6b4      	b.n	4f3e <fire(LEDStruct&)+0x2ae>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    51d4:	4690      	mov	r8, r2
    51d6:	2b00      	cmp	r3, #0
    51d8:	f43f aec6 	beq.w	4f68 <fire(LEDStruct&)+0x2d8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    51dc:	334b      	adds	r3, #75	; 0x4b
    51de:	ebc8 0503 	rsb	r5, r8, r3
    51e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    51e6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    51ea:	4630      	mov	r0, r6
    51ec:	f006 fc8a 	bl	bb04 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    51f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    51f4:	5563      	strb	r3, [r4, r5]
    51f6:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    51f8:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    51fc:	f89d 2015 	ldrb.w	r2, [sp, #21]
    5200:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    5202:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    5204:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5208:	f108 0801 	add.w	r8, r8, #1
    520c:	4543      	cmp	r3, r8
    520e:	dce5      	bgt.n	51dc <fire(LEDStruct&)+0x54c>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    5210:	b007      	add	sp, #28
    5212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5216:	882a      	ldrh	r2, [r5, #0]
    5218:	e5f4      	b.n	4e04 <fire(LEDStruct&)+0x174>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    521a:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    521e:	b13b      	cbz	r3, 5230 <fire(LEDStruct&)+0x5a0>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    5220:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    5224:	2b00      	cmp	r3, #0
    5226:	f47f ae8e 	bne.w	4f46 <fire(LEDStruct&)+0x2b6>
    522a:	e69d      	b.n	4f68 <fire(LEDStruct&)+0x2d8>
    522c:	882a      	ldrh	r2, [r5, #0]
    522e:	e569      	b.n	4d04 <fire(LEDStruct&)+0x74>
    5230:	f1bc 0f00 	cmp.w	ip, #0
    5234:	f47f ae87 	bne.w	4f46 <fire(LEDStruct&)+0x2b6>
    5238:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    523c:	e6c2      	b.n	4fc4 <fire(LEDStruct&)+0x334>
    523e:	bf00      	nop

00005240 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    5240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    5244:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    5248:	4dd0      	ldr	r5, [pc, #832]	; (558c <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    524a:	b087      	sub	sp, #28
    524c:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    524e:	2b00      	cmp	r3, #0
    5250:	f000 81da 	beq.w	5608 <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    5254:	4bce      	ldr	r3, [pc, #824]	; (5590 <torch(LEDStruct&)+0x350>)
    5256:	781b      	ldrb	r3, [r3, #0]
    5258:	2b00      	cmp	r3, #0
    525a:	f040 8242 	bne.w	56e2 <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    525e:	f894 c316 	ldrb.w	ip, [r4, #790]	; 0x316
    5262:	4663      	mov	r3, ip
    5264:	f1bc 0f00 	cmp.w	ip, #0
    5268:	f000 823f 	beq.w	56ea <torch(LEDStruct&)+0x4aa>
    526c:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    5270:	882a      	ldrh	r2, [r5, #0]
    5272:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5276:	004f      	lsls	r7, r1, #1
    5278:	f20c 2e7f 	addw	lr, ip, #639	; 0x27f
    527c:	fb97 f7fc 	sdiv	r7, r7, ip
    5280:	3702      	adds	r7, #2
    5282:	b2ff      	uxtb	r7, r7
    5284:	44a6      	add	lr, r4
    5286:	f204 267f 	addw	r6, r4, #639	; 0x27f
    528a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    528e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5292:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5296:	3219      	adds	r2, #25
    5298:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    529a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    529e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    52a2:	b2c9      	uxtb	r1, r1
    52a4:	fb11 f107 	smulbb	r1, r1, r7
    52a8:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    52ac:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    52b0:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    52b2:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    52b4:	d1e9      	bne.n	528a <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    52b6:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    52ba:	802a      	strh	r2, [r5, #0]
    52bc:	2e00      	cmp	r6, #0
    52be:	f000 816b 	beq.w	5598 <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    52c2:	f1ac 0703 	sub.w	r7, ip, #3
    52c6:	2f01      	cmp	r7, #1
    52c8:	f04f 0901 	mov.w	r9, #1
    52cc:	dd1a      	ble.n	5304 <torch(LEDStruct&)+0xc4>
    52ce:	f50c 701f 	add.w	r0, ip, #636	; 0x27c
    52d2:	f20c 267e 	addw	r6, ip, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    52d6:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 5594 <torch(LEDStruct&)+0x354>
    52da:	4420      	add	r0, r4
    52dc:	4426      	add	r6, r4
    52de:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    52e2:	7801      	ldrb	r1, [r0, #0]
    52e4:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    52e8:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    52ec:	fb88 ba01 	smull	fp, sl, r8, r1
    52f0:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    52f4:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    52f6:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    52fa:	d1f2      	bne.n	52e2 <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    52fc:	f1b9 0f00 	cmp.w	r9, #0
    5300:	f000 812c 	beq.w	555c <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5304:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    5308:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    530c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5310:	3219      	adds	r2, #25
    5312:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    5314:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    5318:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    531c:	802a      	strh	r2, [r5, #0]
    531e:	b2c0      	uxtb	r0, r0
    5320:	4286      	cmp	r6, r0
    5322:	499a      	ldr	r1, [pc, #616]	; (558c <torch(LEDStruct&)+0x34c>)
    5324:	d928      	bls.n	5378 <torch(LEDStruct&)+0x138>
    5326:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    532a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    532e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5332:	3219      	adds	r2, #25
    5334:	b292      	uxth	r2, r2
    5336:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    533a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    533e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5342:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5344:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5348:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    534a:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    534c:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5350:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    5354:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    5356:	eb04 2222 	add.w	r2, r4, r2, asr #8
    535a:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    535e:	800e      	strh	r6, [r1, #0]
    5360:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    5364:	f892 6280 	ldrb.w	r6, [r2, #640]	; 0x280
    5368:	1200      	asrs	r0, r0, #8
    536a:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    536e:	4630      	mov	r0, r6
    5370:	fa80 f051 	uqadd8	r0, r0, r1
    5374:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}
	if (!leds.fire_sync) {
    5378:	f1b9 0f00 	cmp.w	r9, #0
    537c:	d112      	bne.n	53a4 <torch(LEDStruct&)+0x164>
    537e:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    5380:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    5384:	4981      	ldr	r1, [pc, #516]	; (558c <torch(LEDStruct&)+0x34c>)
    5386:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    538a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    538e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5392:	3219      	adds	r2, #25
    5394:	b292      	uxth	r2, r2
    5396:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    539a:	b2c0      	uxtb	r0, r0
    539c:	4286      	cmp	r6, r0
    539e:	802a      	strh	r2, [r5, #0]
    53a0:	f200 80af 	bhi.w	5502 <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    53a4:	f1bc 0f00 	cmp.w	ip, #0
    53a8:	f000 81a4 	beq.w	56f4 <torch(LEDStruct&)+0x4b4>
    53ac:	f204 277f 	addw	r7, r4, #639	; 0x27f
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    53b0:	2600      	movs	r6, #0
    53b2:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    53b6:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    53ba:	199d      	adds	r5, r3, r6
    53bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    53c0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    53c4:	4648      	mov	r0, r9
    53c6:	f006 fb9d 	bl	bb04 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    53ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
    53ce:	5563      	strb	r3, [r4, r5]
    53d0:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    53d2:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    53d6:	f89d 2015 	ldrb.w	r2, [sp, #21]
    53da:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    53dc:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    53de:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    53e2:	3601      	adds	r6, #1
    53e4:	42b3      	cmp	r3, r6
    53e6:	dce6      	bgt.n	53b6 <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    53e8:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    53ec:	2e00      	cmp	r6, #0
    53ee:	d175      	bne.n	54dc <torch(LEDStruct&)+0x29c>
    53f0:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    53f4:	2b00      	cmp	r3, #0
    53f6:	f000 8183 	beq.w	5700 <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    53fa:	334a      	adds	r3, #74	; 0x4a
    53fc:	1b9d      	subs	r5, r3, r6
    53fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5402:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5406:	4648      	mov	r0, r9
    5408:	f006 fb7c 	bl	bb04 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    540c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5410:	5563      	strb	r3, [r4, r5]
    5412:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    5414:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5418:	f89d 2015 	ldrb.w	r2, [sp, #21]
    541c:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    541e:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5420:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5424:	3601      	adds	r6, #1
    5426:	42b3      	cmp	r3, r6
    5428:	dce7      	bgt.n	53fa <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    542a:	2b4b      	cmp	r3, #75	; 0x4b
    542c:	d047      	beq.n	54be <torch(LEDStruct&)+0x27e>
    542e:	f10d 0914 	add.w	r9, sp, #20
    5432:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    5436:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5438:	4626      	mov	r6, r4
    543a:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    543c:	f04f 0a01 	mov.w	sl, #1
    5440:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    5444:	f8cd a000 	str.w	sl, [sp]
    5448:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    544c:	fb98 f3f3 	sdiv	r3, r8, r3
    5450:	441a      	add	r2, r3
    5452:	b2d2      	uxtb	r2, r2
    5454:	23ff      	movs	r3, #255	; 0xff
    5456:	4659      	mov	r1, fp
    5458:	4648      	mov	r0, r9
    545a:	f006 fb75 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    545e:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    5462:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    5466:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    546a:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    546c:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    546e:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    5470:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    5474:	f894 2316 	ldrb.w	r2, [r4, #790]	; 0x316
    5478:	fb98 f8f2 	sdiv	r8, r8, r2
    547c:	eb08 0203 	add.w	r2, r8, r3
    5480:	b2d2      	uxtb	r2, r2
    5482:	23ff      	movs	r3, #255	; 0xff
    5484:	4659      	mov	r1, fp
    5486:	f8cd a000 	str.w	sl, [sp]
    548a:	4648      	mov	r0, r9
    548c:	f006 fb5c 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5490:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    5494:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5498:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    549c:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    54a0:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    54a4:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    54a8:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    54ac:	3501      	adds	r5, #1
    54ae:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    54b2:	42aa      	cmp	r2, r5
    54b4:	f106 0603 	add.w	r6, r6, #3
    54b8:	f1a7 0703 	sub.w	r7, r7, #3
    54bc:	dcc0      	bgt.n	5440 <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    54be:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    54c2:	2b00      	cmp	r3, #0
    54c4:	f040 8096 	bne.w	55f4 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    54c8:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    54cc:	f894 231b 	ldrb.w	r2, [r4, #795]	; 0x31b
    54d0:	1a9b      	subs	r3, r3, r2
    54d2:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
}
    54d6:	b007      	add	sp, #28
    54d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54dc:	4621      	mov	r1, r4
    54de:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    54e2:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    54e4:	7810      	ldrb	r0, [r2, #0]
    54e6:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    54ea:	7850      	ldrb	r0, [r2, #1]
    54ec:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    54f0:	7890      	ldrb	r0, [r2, #2]
    54f2:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    54f6:	3203      	adds	r2, #3
    54f8:	4295      	cmp	r5, r2
    54fa:	f1a1 0103 	sub.w	r1, r1, #3
    54fe:	d1f1      	bne.n	54e4 <torch(LEDStruct&)+0x2a4>
    5500:	e793      	b.n	542a <torch(LEDStruct&)+0x1ea>
    5502:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    5506:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    550a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    550e:	3219      	adds	r2, #25
    5510:	b292      	uxth	r2, r2
    5512:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    5516:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    551a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    551e:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5520:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5524:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5526:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5528:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    552c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    5530:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    5532:	eb04 2222 	add.w	r2, r4, r2, asr #8
    5536:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    553a:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    553e:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5542:	800d      	strh	r5, [r1, #0]
    5544:	1201      	asrs	r1, r0, #8
    5546:	3960      	subs	r1, #96	; 0x60
    5548:	4630      	mov	r0, r6
    554a:	fa80 f051 	uqadd8	r0, r0, r1
    554e:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    5552:	f1bc 0f00 	cmp.w	ip, #0
    5556:	f47f af29 	bne.w	53ac <torch(LEDStruct&)+0x16c>
    555a:	e0cf      	b.n	56fc <torch(LEDStruct&)+0x4bc>
    555c:	f20c 26c7 	addw	r6, ip, #711	; 0x2c7
    5560:	f20c 2ec9 	addw	lr, ip, #713	; 0x2c9
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    5564:	f8df 802c 	ldr.w	r8, [pc, #44]	; 5594 <torch(LEDStruct&)+0x354>
    5568:	4426      	add	r6, r4
    556a:	44a6      	add	lr, r4
    556c:	7831      	ldrb	r1, [r6, #0]
    556e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    5572:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5576:	fb88 a001 	smull	sl, r0, r8, r1
    557a:	3f01      	subs	r7, #1
    557c:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    5580:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    5582:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    5586:	d1f1      	bne.n	556c <torch(LEDStruct&)+0x32c>
    5588:	e6bc      	b.n	5304 <torch(LEDStruct&)+0xc4>
    558a:	bf00      	nop
    558c:	1fff8788 	.word	0x1fff8788
    5590:	1fff9625 	.word	0x1fff9625
    5594:	55555556 	.word	0x55555556
    5598:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    559c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    55a0:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    55a4:	fb9e fefc 	sdiv	lr, lr, ip
    55a8:	f10e 0e02 	add.w	lr, lr, #2
    55ac:	fa5f fe8e 	uxtb.w	lr, lr
    55b0:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    55b4:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    55b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    55bc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    55c0:	3219      	adds	r2, #25
    55c2:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    55c4:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    55c8:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    55cc:	b2c9      	uxtb	r1, r1
    55ce:	fb11 f10e 	smulbb	r1, r1, lr
    55d2:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    55d6:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    55d8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    55dc:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    55de:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    55e0:	dbe8      	blt.n	55b4 <torch(LEDStruct&)+0x374>
    55e2:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    55e4:	f1ac 0703 	sub.w	r7, ip, #3
    55e8:	2f01      	cmp	r7, #1
    55ea:	f04f 0900 	mov.w	r9, #0
    55ee:	f73f ae6e 	bgt.w	52ce <torch(LEDStruct&)+0x8e>
    55f2:	e687      	b.n	5304 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    55f4:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    55f8:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    55fc:	4413      	add	r3, r2
    55fe:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
	else			   { leds.torch_index -= leds.torch_diff; }
}
    5602:	b007      	add	sp, #28
    5604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5608:	882b      	ldrh	r3, [r5, #0]
    560a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    560e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5612:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5616:	3119      	adds	r1, #25
    5618:	b289      	uxth	r1, r1
    561a:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    561e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5622:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5626:	3219      	adds	r2, #25
    5628:	b292      	uxth	r2, r2
    562a:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    562e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    5632:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5636:	f10e 0e19 	add.w	lr, lr, #25
    563a:	fa1f fe8e 	uxth.w	lr, lr
    563e:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    5642:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    5646:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    564a:	3619      	adds	r6, #25
    564c:	b2b6      	uxth	r6, r6
    564e:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    5652:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5656:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    565a:	3319      	adds	r3, #25
    565c:	b29b      	uxth	r3, r3
    565e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    5662:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5666:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    566a:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    566e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5672:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    5676:	b2f6      	uxtb	r6, r6
    5678:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    567c:	3719      	adds	r7, #25
    567e:	b2db      	uxtb	r3, r3
    5680:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    5684:	b2bf      	uxth	r7, r7
    5686:	11b6      	asrs	r6, r6, #6
    5688:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    568c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    5690:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    5694:	119b      	asrs	r3, r3, #6
    5696:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    569a:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    569e:	333c      	adds	r3, #60	; 0x3c
    56a0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    56a4:	f3c6 1681 	ubfx	r6, r6, #6, #2
    56a8:	fa5f fc8c 	uxtb.w	ip, ip
    56ac:	fa5f f883 	uxtb.w	r8, r3
    56b0:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    56b4:	f10e 0314 	add.w	r3, lr, #20
    56b8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    56bc:	3601      	adds	r6, #1
    56be:	f8cd c000 	str.w	ip, [sp]
    56c2:	f8cd 8004 	str.w	r8, [sp, #4]
    56c6:	9602      	str	r6, [sp, #8]
    56c8:	b2db      	uxtb	r3, r3
    56ca:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    56ce:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    56d2:	802f      	strh	r7, [r5, #0]
    56d4:	f7ff fa38 	bl	4b48 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    56d8:	4b0b      	ldr	r3, [pc, #44]	; (5708 <torch(LEDStruct&)+0x4c8>)
    56da:	781b      	ldrb	r3, [r3, #0]
    56dc:	2b00      	cmp	r3, #0
    56de:	f43f adbe 	beq.w	525e <torch(LEDStruct&)+0x1e>
    56e2:	4620      	mov	r0, r4
    56e4:	f7ff fa9a 	bl	4c1c <fire_update(LEDStruct&)>
    56e8:	e5b9      	b.n	525e <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    56ea:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    56ee:	b14a      	cbz	r2, 5704 <torch(LEDStruct&)+0x4c4>
    56f0:	882a      	ldrh	r2, [r5, #0]
    56f2:	e5e6      	b.n	52c2 <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    56f4:	f1b9 0f00 	cmp.w	r9, #0
    56f8:	f47f aef0 	bne.w	54dc <torch(LEDStruct&)+0x29c>
    56fc:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5700:	2300      	movs	r3, #0
    5702:	e696      	b.n	5432 <torch(LEDStruct&)+0x1f2>
    5704:	882a      	ldrh	r2, [r5, #0]
    5706:	e76d      	b.n	55e4 <torch(LEDStruct&)+0x3a4>
    5708:	1fff9625 	.word	0x1fff9625

0000570c <confetti_update(LEDStruct&)>:
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    570c:	4b0e      	ldr	r3, [pc, #56]	; (5748 <confetti_update(LEDStruct&)+0x3c>)
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    570e:	4a0f      	ldr	r2, [pc, #60]	; (574c <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    5710:	781b      	ldrb	r3, [r3, #0]
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5712:	2100      	movs	r1, #0
    5714:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5716:	b13b      	cbz	r3, 5728 <confetti_update(LEDStruct&)+0x1c>
    5718:	2b01      	cmp	r3, #1
    571a:	d103      	bne.n	5724 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    571c:	4b0c      	ldr	r3, [pc, #48]	; (5750 <confetti_update(LEDStruct&)+0x44>)
    571e:	881b      	ldrh	r3, [r3, #0]
    5720:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    5724:	f7fc bd8a 	b.w	223c <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    5728:	4b09      	ldr	r3, [pc, #36]	; (5750 <confetti_update(LEDStruct&)+0x44>)
    572a:	881b      	ldrh	r3, [r3, #0]
    572c:	2b00      	cmp	r3, #0
    572e:	bf14      	ite	ne
    5730:	2301      	movne	r3, #1
    5732:	2300      	moveq	r3, #0
    5734:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5738:	bf14      	ite	ne
    573a:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    573c:	234b      	moveq	r3, #75	; 0x4b
    573e:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    5742:	f7fc bd7b 	b.w	223c <LEDDebug(LEDStruct&)>
    5746:	bf00      	nop
    5748:	1fff9e8c 	.word	0x1fff9e8c
    574c:	1fff9625 	.word	0x1fff9625
    5750:	1fff9526 	.word	0x1fff9526

00005754 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    5754:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    5756:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    575a:	4e4b      	ldr	r6, [pc, #300]	; (5888 <confetti(LEDStruct&)+0x134>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    575c:	b085      	sub	sp, #20
    575e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    5760:	bb8b      	cbnz	r3, 57c6 <confetti(LEDStruct&)+0x72>
    5762:	8833      	ldrh	r3, [r6, #0]
    5764:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5768:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    576c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5770:	3319      	adds	r3, #25
    5772:	b29b      	uxth	r3, r3
    5774:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    5778:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    577c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5780:	3119      	adds	r1, #25
    5782:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5784:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5788:	b2d2      	uxtb	r2, r2
    578a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    578e:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5790:	eb03 2313 	add.w	r3, r3, r3, lsr #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    5794:	2001      	movs	r0, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5796:	3206      	adds	r2, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5798:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.mode_type			= CONFETTI;
    579c:	2715      	movs	r7, #21
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    579e:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    57a0:	8031      	strh	r1, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    57a2:	b2d2      	uxtb	r2, r2

	leds.use_full_range		= ufr;
    57a4:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    57a8:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
    57ac:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    57b0:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    57b4:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    57b8:	2b00      	cmp	r3, #0
    57ba:	d15c      	bne.n	5876 <confetti(LEDStruct&)+0x122>
	else					 { leds.strip_range = ONE_SIDE; }
    57bc:	234b      	movs	r3, #75	; 0x4b
    57be:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	leds.confetti_fade		= cf;
    57c2:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    57c6:	4b31      	ldr	r3, [pc, #196]	; (588c <confetti(LEDStruct&)+0x138>)
    57c8:	781b      	ldrb	r3, [r3, #0]
    57ca:	2b00      	cmp	r3, #0
    57cc:	d157      	bne.n	587e <confetti(LEDStruct&)+0x12a>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    57ce:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    57d2:	4620      	mov	r0, r4
    57d4:	2196      	movs	r1, #150	; 0x96
    57d6:	f006 f957 	bl	ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    57da:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    57dc:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    57e0:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    57e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    57e8:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    57ec:	3319      	adds	r3, #25
    57ee:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    57f0:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    57f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    57f8:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    57fc:	3719      	adds	r7, #25
    57fe:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    5800:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5804:	fb03 f305 	mul.w	r3, r3, r5
    5808:	2101      	movs	r1, #1
    580a:	0c1d      	lsrs	r5, r3, #16
    580c:	9100      	str	r1, [sp, #0]
    580e:	a803      	add	r0, sp, #12
    5810:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    5814:	b2d2      	uxtb	r2, r2
    5816:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5818:	8037      	strh	r7, [r6, #0]
    581a:	f006 f995 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    581e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5822:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    5824:	5ce2      	ldrb	r2, [r4, r3]
    5826:	f89d 000c 	ldrb.w	r0, [sp, #12]
    582a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    582e:	54e2      	strb	r2, [r4, r3]
    5830:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5834:	784a      	ldrb	r2, [r1, #1]
    5836:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    583a:	704a      	strb	r2, [r1, #1]
    583c:	788b      	ldrb	r3, [r1, #2]
    583e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5842:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5846:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    5848:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    584c:	b98b      	cbnz	r3, 5872 <confetti(LEDStruct&)+0x11e>
    584e:	4620      	mov	r0, r4
    5850:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5854:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5856:	781a      	ldrb	r2, [r3, #0]
    5858:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    585c:	785a      	ldrb	r2, [r3, #1]
    585e:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    5862:	789a      	ldrb	r2, [r3, #2]
    5864:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    5868:	3303      	adds	r3, #3
    586a:	428b      	cmp	r3, r1
    586c:	f1a0 0003 	sub.w	r0, r0, #3
    5870:	d1f1      	bne.n	5856 <confetti(LEDStruct&)+0x102>
}
    5872:	b005      	add	sp, #20
    5874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5876:	2396      	movs	r3, #150	; 0x96
    5878:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    587c:	e7a1      	b.n	57c2 <confetti(LEDStruct&)+0x6e>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    587e:	4620      	mov	r0, r4
    5880:	f7ff ff44 	bl	570c <confetti_update(LEDStruct&)>
    5884:	e7a3      	b.n	57ce <confetti(LEDStruct&)+0x7a>
    5886:	bf00      	nop
    5888:	1fff8788 	.word	0x1fff8788
    588c:	1fff9625 	.word	0x1fff9625

00005890 <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5890:	4b24      	ldr	r3, [pc, #144]	; (5924 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5892:	4a25      	ldr	r2, [pc, #148]	; (5928 <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    5894:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5896:	2100      	movs	r1, #0
    5898:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    589a:	2b09      	cmp	r3, #9
    589c:	d80a      	bhi.n	58b4 <one_sin_update(LEDStruct&)+0x24>
    589e:	e8df f003 	tbb	[pc, r3]
    58a2:	1e10      	.short	0x1e10
    58a4:	322d2823 	.word	0x322d2823
    58a8:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    58ac:	4b1f      	ldr	r3, [pc, #124]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    58ae:	881b      	ldrh	r3, [r3, #0]
    58b0:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    58b4:	f7fc bcc2 	b.w	223c <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    58b8:	4b1c      	ldr	r3, [pc, #112]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    58ba:	881b      	ldrh	r3, [r3, #0]
    58bc:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    58c0:	e7f8      	b.n	58b4 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    58c2:	4b1a      	ldr	r3, [pc, #104]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    58c4:	881b      	ldrh	r3, [r3, #0]
    58c6:	2b00      	cmp	r3, #0
    58c8:	bf14      	ite	ne
    58ca:	2301      	movne	r3, #1
    58cc:	2300      	moveq	r3, #0
    58ce:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    58d2:	bf14      	ite	ne
    58d4:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    58d6:	234b      	moveq	r3, #75	; 0x4b
    58d8:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    58dc:	e7ea      	b.n	58b4 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    58de:	4b13      	ldr	r3, [pc, #76]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    58e0:	881b      	ldrh	r3, [r3, #0]
    58e2:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    58e6:	e7e5      	b.n	58b4 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    58e8:	4b10      	ldr	r3, [pc, #64]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    58ea:	881b      	ldrh	r3, [r3, #0]
    58ec:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    58f0:	e7e0      	b.n	58b4 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    58f2:	4b0e      	ldr	r3, [pc, #56]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    58f4:	881b      	ldrh	r3, [r3, #0]
    58f6:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    58fa:	e7db      	b.n	58b4 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    58fc:	4b0b      	ldr	r3, [pc, #44]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    58fe:	881b      	ldrh	r3, [r3, #0]
    5900:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5904:	e7d6      	b.n	58b4 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    5906:	4b09      	ldr	r3, [pc, #36]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    5908:	881b      	ldrh	r3, [r3, #0]
    590a:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    590e:	e7d1      	b.n	58b4 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    5910:	4b06      	ldr	r3, [pc, #24]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    5912:	881b      	ldrh	r3, [r3, #0]
    5914:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    5918:	e7cc      	b.n	58b4 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    591a:	4b04      	ldr	r3, [pc, #16]	; (592c <one_sin_update(LEDStruct&)+0x9c>)
    591c:	881b      	ldrh	r3, [r3, #0]
    591e:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    5922:	e7c7      	b.n	58b4 <one_sin_update(LEDStruct&)+0x24>
    5924:	1fff9e8c 	.word	0x1fff9e8c
    5928:	1fff9625 	.word	0x1fff9625
    592c:	1fff9526 	.word	0x1fff9526

00005930 <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    5930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    5934:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    5938:	b085      	sub	sp, #20
    593a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    593c:	2b00      	cmp	r3, #0
    593e:	f040 80be 	bne.w	5abe <one_sin(LEDStruct&)+0x18e>
    5942:	f8df c32c 	ldr.w	ip, [pc, #812]	; 5c70 <one_sin(LEDStruct&)+0x340>
    5946:	f8bc 3000 	ldrh.w	r3, [ip]
    594a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    594e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    5952:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5956:	3619      	adds	r6, #25
    5958:	b2b6      	uxth	r6, r6
    595a:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    595e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    5962:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5966:	3119      	adds	r1, #25
    5968:	b289      	uxth	r1, r1
    596a:	eb01 2541 	add.w	r5, r1, r1, lsl #9
    596e:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    5972:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5976:	3519      	adds	r5, #25
    5978:	b2ad      	uxth	r5, r5
    597a:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    597e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5982:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5986:	3319      	adds	r3, #25
    5988:	b29b      	uxth	r3, r3
    598a:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    598e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    5992:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5996:	3719      	adds	r7, #25
    5998:	b2bf      	uxth	r7, r7
    599a:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    599e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    59a2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    59a6:	3019      	adds	r0, #25
    59a8:	b280      	uxth	r0, r0
    59aa:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    59ae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    59b2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    59b6:	3219      	adds	r2, #25
    59b8:	b292      	uxth	r2, r2
    59ba:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    59be:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    59c2:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    59c6:	f10e 0e19 	add.w	lr, lr, #25
    59ca:	fa1f fe8e 	uxth.w	lr, lr
    59ce:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    59d2:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    59d6:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    59da:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    59de:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    59e2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    59e6:	f108 0819 	add.w	r8, r8, #25
    59ea:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    59ee:	b2db      	uxtb	r3, r3
    59f0:	b2c9      	uxtb	r1, r1
    59f2:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    59f4:	eb08 2918 	add.w	r9, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    59f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    59fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5a00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5a04:	ea4f 1aa2 	mov.w	sl, r2, asr #6
    5a08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a0c:	fa5f f289 	uxtb.w	r2, r9
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a10:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a14:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a16:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a1a:	119b      	asrs	r3, r3, #6
    5a1c:	3101      	adds	r1, #1
    5a1e:	f3c5 1542 	ubfx	r5, r5, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a26:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    5a2a:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a2e:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a30:	f103 0964 	add.w	r9, r3, #100	; 0x64
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a34:	f8ac 8000 	strh.w	r8, [ip]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a38:	f10a 0314 	add.w	r3, sl, #20
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a3c:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a40:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a48:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a4c:	fa5f fa81 	uxtb.w	sl, r1
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    5a50:	f04f 0816 	mov.w	r8, #22
    5a54:	1d69      	adds	r1, r5, #5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a56:	f3c2 1cc7 	ubfx	ip, r2, #7, #8
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    5a5a:	2501      	movs	r5, #1
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5a5c:	220f      	movs	r2, #15

	leds.use_full_range = ufr;
    5a5e:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a62:	fa5f f989 	uxtb.w	r9, r9
    5a66:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a68:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a6c:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a6e:	fa5f fe8e 	uxtb.w	lr, lr
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    5a72:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
    5a76:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    5a7a:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5a7e:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5a82:	2e00      	cmp	r6, #0
    5a84:	f040 80e8 	bne.w	5c58 <one_sin(LEDStruct&)+0x328>
	else { leds.strip_range = ONE_SIDE; }
    5a88:	224b      	movs	r2, #75	; 0x4b
    5a8a:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    5a8e:	4d76      	ldr	r5, [pc, #472]	; (5c68 <one_sin(LEDStruct&)+0x338>)

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    5a90:	f884 a33f 	strb.w	sl, [r4, #831]	; 0x33f
	leds.sin_speed		= ss + (saf/5);
    5a94:	fba5 2503 	umull	r2, r5, r5, r3
    5a98:	eb01 0295 	add.w	r2, r1, r5, lsr #2
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5a9c:	2100      	movs	r1, #0
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    5a9e:	f884 9341 	strb.w	r9, [r4, #833]	; 0x341
	leds.sin_rot		= sr;
    5aa2:	f884 7342 	strb.w	r7, [r4, #834]	; 0x342
	leds.sin_phase		= sp;
    5aa6:	f884 0346 	strb.w	r0, [r4, #838]	; 0x346
	leds.sin_all_freq	= saf;
    5aaa:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
	leds.bg_clr			= bc;
    5aae:	f884 e34f 	strb.w	lr, [r4, #847]	; 0x34f
	leds.bg_bri			= bb;
    5ab2:	f884 c350 	strb.w	ip, [r4, #848]	; 0x350
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    5ab6:	f884 2340 	strb.w	r2, [r4, #832]	; 0x340
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5aba:	f884 1345 	strb.w	r1, [r4, #837]	; 0x345
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    5abe:	4b6b      	ldr	r3, [pc, #428]	; (5c6c <one_sin(LEDStruct&)+0x33c>)
    5ac0:	781b      	ldrb	r3, [r3, #0]
    5ac2:	2b00      	cmp	r3, #0
    5ac4:	f040 80cc 	bne.w	5c60 <one_sin(LEDStruct&)+0x330>

	leds.sin_start += leds.sin_inc;
    5ac8:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    5acc:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    5ad0:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    5ad4:	440b      	add	r3, r1
    5ad6:	b2db      	uxtb	r3, r3
    5ad8:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
	leds.sin_index = leds.sin_start;
    5adc:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
	if (leds.this_dir) {
    5ae0:	2a00      	cmp	r2, #0
    5ae2:	f000 80b1 	beq.w	5c48 <one_sin(LEDStruct&)+0x318>
		leds.sin_phase += leds.sin_speed;
    5ae6:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    5aea:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    5aee:	4413      	add	r3, r2
    5af0:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5af4:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5af8:	2b00      	cmp	r3, #0
    5afa:	f000 808e 	beq.w	5c1a <one_sin(LEDStruct&)+0x2ea>
    5afe:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    5b02:	4625      	mov	r5, r4
    5b04:	1c67      	adds	r7, r4, #1
    5b06:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5b08:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5b0c:	e05c      	b.n	5bc8 <one_sin(LEDStruct&)+0x298>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5b0e:	2900      	cmp	r1, #0
        in = 255 - in;
    5b10:	bfbc      	itt	lt
    5b12:	43d2      	mvnlt	r2, r2
    5b14:	b2d2      	uxtblt	r2, r2
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5b16:	0052      	lsls	r2, r2, #1
    5b18:	b2d2      	uxtb	r2, r2
    5b1a:	1c53      	adds	r3, r2, #1
    5b1c:	fb03 f202 	mul.w	r2, r3, r2
    5b20:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5b22:	fb02 f303 	mul.w	r3, r2, r3
    5b26:	121b      	asrs	r3, r3, #8
    5b28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5b2c:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    5b30:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5b32:	05d3      	lsls	r3, r2, #23
    5b34:	bf54      	ite	pl
    5b36:	fa5f fb82 	uxtbpl.w	fp, r2
    5b3a:	f04f 0bff 	movmi.w	fp, #255	; 0xff
    5b3e:	ebc0 0b0b 	rsb	fp, r0, fp
    5b42:	fa5f fb8b 	uxtb.w	fp, fp
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    5b46:	f894 2350 	ldrb.w	r2, [r4, #848]	; 0x350
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5b4a:	f894 334f 	ldrb.w	r3, [r4, #847]	; 0x34f
    5b4e:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5b52:	4629      	mov	r1, r5
    5b54:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5b56:	f88d 300c 	strb.w	r3, [sp, #12]
    5b5a:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5b5e:	f006 f9f1 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    5b62:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    5b66:	f894 233f 	ldrb.w	r2, [r4, #831]	; 0x33f
    5b6a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    5b6e:	9100      	str	r1, [sp, #0]
    5b70:	fb02 320a 	mla	r2, r2, sl, r3
    5b74:	b2d2      	uxtb	r2, r2
    5b76:	465b      	mov	r3, fp
    5b78:	4649      	mov	r1, r9
    5b7a:	a803      	add	r0, sp, #12
    5b7c:	f005 ffe4 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5b80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    5b84:	f89d 200c 	ldrb.w	r2, [sp, #12]
    5b88:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5b8c:	f807 3c01 	strb.w	r3, [r7, #-1]
    5b90:	786a      	ldrb	r2, [r5, #1]
    5b92:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5b96:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5b9a:	706a      	strb	r2, [r5, #1]
    5b9c:	78ab      	ldrb	r3, [r5, #2]
    5b9e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5ba2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5ba6:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    5ba8:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    5bac:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5bb0:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    5bb4:	3601      	adds	r6, #1
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    5bb6:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5bb8:	42b2      	cmp	r2, r6
    5bba:	f105 0503 	add.w	r5, r5, #3
    5bbe:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    5bc2:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5bc6:	dd28      	ble.n	5c1a <one_sin(LEDStruct&)+0x2ea>
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    5bc8:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    5bcc:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    5bd0:	fa5f fa86 	uxtb.w	sl, r6
    5bd4:	fb03 220a 	mla	r2, r3, sl, r2
    5bd8:	b2d2      	uxtb	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5bda:	b251      	sxtb	r1, r2
    5bdc:	2900      	cmp	r1, #0
        in = 255 - in;
    5bde:	bfba      	itte	lt
    5be0:	43d3      	mvnlt	r3, r2
    5be2:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5be4:	4613      	movge	r3, r2
    5be6:	005b      	lsls	r3, r3, #1
    5be8:	b2db      	uxtb	r3, r3
    5bea:	1c58      	adds	r0, r3, #1
    5bec:	fb00 f303 	mul.w	r3, r0, r3
    5bf0:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5bf2:	fb03 f000 	mul.w	r0, r3, r0
    5bf6:	1200      	asrs	r0, r0, #8
    5bf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5bfc:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    5c00:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5c02:	05d8      	lsls	r0, r3, #23
    5c04:	f894 0341 	ldrb.w	r0, [r4, #833]	; 0x341

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5c08:	bf54      	ite	pl
    5c0a:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5c0c:	23ff      	movmi	r3, #255	; 0xff
    5c0e:	4298      	cmp	r0, r3
    5c10:	f4ff af7d 	bcc.w	5b0e <one_sin(LEDStruct&)+0x1de>
    5c14:	f04f 0b00 	mov.w	fp, #0
    5c18:	e795      	b.n	5b46 <one_sin(LEDStruct&)+0x216>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    5c1a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5c1e:	b983      	cbnz	r3, 5c42 <one_sin(LEDStruct&)+0x312>
    5c20:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5c24:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5c26:	7822      	ldrb	r2, [r4, #0]
    5c28:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    5c2c:	7862      	ldrb	r2, [r4, #1]
    5c2e:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    5c32:	78a2      	ldrb	r2, [r4, #2]
    5c34:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    5c38:	3403      	adds	r4, #3
    5c3a:	42a1      	cmp	r1, r4
    5c3c:	f1a3 0303 	sub.w	r3, r3, #3
    5c40:	d1f1      	bne.n	5c26 <one_sin(LEDStruct&)+0x2f6>
}
    5c42:	b005      	add	sp, #20
    5c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    5c48:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
    5c4c:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    5c50:	1a9b      	subs	r3, r3, r2
    5c52:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    5c56:	e74d      	b.n	5af4 <one_sin(LEDStruct&)+0x1c4>
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5c58:	2296      	movs	r2, #150	; 0x96
    5c5a:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c
    5c5e:	e716      	b.n	5a8e <one_sin(LEDStruct&)+0x15e>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    5c60:	4620      	mov	r0, r4
    5c62:	f7ff fe15 	bl	5890 <one_sin_update(LEDStruct&)>
    5c66:	e72f      	b.n	5ac8 <one_sin(LEDStruct&)+0x198>
    5c68:	cccccccd 	.word	0xcccccccd
    5c6c:	1fff9625 	.word	0x1fff9625
    5c70:	1fff8788 	.word	0x1fff8788

00005c74 <fireworks_update(LEDStruct&)>:

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    5c74:	b510      	push	{r4, lr}
	keyboard_update = 0;
	switch (update_var) {
    5c76:	4b0f      	ldr	r3, [pc, #60]	; (5cb4 <fireworks_update(LEDStruct&)+0x40>)
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    5c78:	4a0f      	ldr	r2, [pc, #60]	; (5cb8 <fireworks_update(LEDStruct&)+0x44>)
	switch (update_var) {
    5c7a:	781b      	ldrb	r3, [r3, #0]
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    5c7c:	2100      	movs	r1, #0

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    5c7e:	b082      	sub	sp, #8
    5c80:	4604      	mov	r4, r0
	keyboard_update = 0;
    5c82:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5c84:	b98b      	cbnz	r3, 5caa <fireworks_update(LEDStruct&)+0x36>
		case 0:	leds.use_overlay = (bool)update_arg;	
    5c86:	4a0d      	ldr	r2, [pc, #52]	; (5cbc <fireworks_update(LEDStruct&)+0x48>)
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    5c88:	480d      	ldr	r0, [pc, #52]	; (5cc0 <fireworks_update(LEDStruct&)+0x4c>)
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:	leds.use_overlay = (bool)update_arg;	
    5c8a:	8812      	ldrh	r2, [r2, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    5c8c:	f88d 3004 	strb.w	r3, [sp, #4]
    5c90:	1a52      	subs	r2, r2, r1
    5c92:	bf18      	it	ne
    5c94:	2201      	movne	r2, #1
    5c96:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    5c9a:	2196      	movs	r1, #150	; 0x96
    5c9c:	aa01      	add	r2, sp, #4
    5c9e:	f88d 3005 	strb.w	r3, [sp, #5]
    5ca2:	f88d 3006 	strb.w	r3, [sp, #6]
    5ca6:	f005 fe2d 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
			break; //a
		default:	break;
	}
	LEDDebug(leds);
    5caa:	4620      	mov	r0, r4
    5cac:	f7fc fac6 	bl	223c <LEDDebug(LEDStruct&)>
}
    5cb0:	b002      	add	sp, #8
    5cb2:	bd10      	pop	{r4, pc}
    5cb4:	1fff9e8c 	.word	0x1fff9e8c
    5cb8:	1fff9625 	.word	0x1fff9625
    5cbc:	1fff9526 	.word	0x1fff9526
    5cc0:	1fff962c 	.word	0x1fff962c

00005cc4 <prepare_for_explosion(LEDStruct&)>:

void prepare_for_explosion(LEDStruct& leds) {
    5cc4:	b570      	push	{r4, r5, r6, lr}
    5cc6:	4604      	mov	r4, r0
    5cc8:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    5cca:	4d1b      	ldr	r5, [pc, #108]	; (5d38 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    5ccc:	2002      	movs	r0, #2
    5cce:	f006 fda7 	bl	c820 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5cd2:	882b      	ldrh	r3, [r5, #0]
    5cd4:	4418      	add	r0, r3
    5cd6:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    5cda:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5cde:	f243 6319 	movw	r3, #13849	; 0x3619
    5ce2:	4418      	add	r0, r3
    5ce4:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5ce6:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5cea:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    5cee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    5cf2:	b2d2      	uxtb	r2, r2
    5cf4:	4403      	add	r3, r0
    5cf6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5cfa:	b29b      	uxth	r3, r3
    5cfc:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    5cfe:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    5d00:	eb03 2113 	add.w	r1, r3, r3, lsr #8
	LEDDebug(leds);
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    5d04:	321b      	adds	r2, #27
    5d06:	f884 2351 	strb.w	r2, [r4, #849]	; 0x351
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    5d0a:	f884 1352 	strb.w	r1, [r4, #850]	; 0x352
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    5d0e:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    5d12:	f884 6353 	strb.w	r6, [r4, #851]	; 0x353
	leds.exploded = false;
    5d16:	f884 635c 	strb.w	r6, [r4, #860]	; 0x35c
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5d1a:	4620      	mov	r0, r4
    5d1c:	aa01      	add	r2, sp, #4
    5d1e:	2196      	movs	r1, #150	; 0x96
    5d20:	802b      	strh	r3, [r5, #0]
    5d22:	f88d 6004 	strb.w	r6, [sp, #4]
    5d26:	f88d 6005 	strb.w	r6, [sp, #5]
    5d2a:	f88d 6006 	strb.w	r6, [sp, #6]
    5d2e:	f005 fde9 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
}
    5d32:	b002      	add	sp, #8
    5d34:	bd70      	pop	{r4, r5, r6, pc}
    5d36:	bf00      	nop
    5d38:	1fff8788 	.word	0x1fff8788

00005d3c <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    5d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    5d40:	f890 335c 	ldrb.w	r3, [r0, #860]	; 0x35c
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    5d44:	b087      	sub	sp, #28
    5d46:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    5d48:	2b00      	cmp	r3, #0
    5d4a:	f000 8089 	beq.w	5e60 <fadeup(LEDStruct&)+0x124>
    5d4e:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
    5d52:	9303      	str	r3, [sp, #12]
    5d54:	4606      	mov	r6, r0
    5d56:	4618      	mov	r0, r3
    5d58:	4b5d      	ldr	r3, [pc, #372]	; (5ed0 <fadeup(LEDStruct&)+0x194>)
    5d5a:	881b      	ldrh	r3, [r3, #0]
    5d5c:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    5d60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5d64:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5d68:	3419      	adds	r4, #25
    5d6a:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d6c:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d70:	b2db      	uxtb	r3, r3
    5d72:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    5d76:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    5d7a:	ea4f 2929 	mov.w	r9, r9, asr #8
    5d7e:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    5d82:	2301      	movs	r3, #1
    5d84:	fa5f f989 	uxtb.w	r9, r9
    5d88:	f886 3354 	strb.w	r3, [r6, #852]	; 0x354
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    5d8c:	f886 935d 	strb.w	r9, [r6, #861]	; 0x35d
    5d90:	f009 f8dc 	bl	ef4c <__aeabi_ui2f>
    5d94:	f506 7b57 	add.w	fp, r6, #860	; 0x35c
    5d98:	f506 6aaf 	add.w	sl, r6, #1400	; 0x578
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5d9c:	465b      	mov	r3, fp
    5d9e:	f206 484c 	addw	r8, r6, #1100	; 0x44c
    5da2:	f206 573f 	addw	r7, r6, #1343	; 0x53f
    5da6:	46d3      	mov	fp, sl
    5da8:	9001      	str	r0, [sp, #4]
    5daa:	f506 66cd 	add.w	r6, r6, #1640	; 0x668
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    5dae:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5db0:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5db2:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    5db6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5dba:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5dbe:	3419      	adds	r4, #25
    5dc0:	b2a4      	uxth	r4, r4
    5dc2:	2373      	movs	r3, #115	; 0x73
    5dc4:	fb03 f004 	mul.w	r0, r3, r4
    5dc8:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    5dca:	9b01      	ldr	r3, [sp, #4]
    5dcc:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5dd0:	300a      	adds	r0, #10
    5dd2:	b280      	uxth	r0, r0
    5dd4:	f009 f8ba 	bl	ef4c <__aeabi_ui2f>
    5dd8:	493e      	ldr	r1, [pc, #248]	; (5ed4 <fadeup(LEDStruct&)+0x198>)
    5dda:	f009 f9c3 	bl	f164 <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5dde:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    5de2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    5de6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5dea:	3319      	adds	r3, #25
    5dec:	b29b      	uxth	r3, r3
    5dee:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    5df2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5df6:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5dfa:	3419      	adds	r4, #25
    5dfc:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5dfe:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    5e02:	b2c9      	uxtb	r1, r1
    5e04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5e08:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5e0c:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    5e0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    5e12:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5e14:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    5e18:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    5e1c:	b2c8      	uxtb	r0, r1
    5e1e:	f009 f895 	bl	ef4c <__aeabi_ui2f>
    5e22:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5e24:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    5e26:	4a2c      	ldr	r2, [pc, #176]	; (5ed8 <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    5e28:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5e2c:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    5e2e:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5e32:	d8be      	bhi.n	5db2 <fadeup(LEDStruct&)+0x76>
    5e34:	9a03      	ldr	r2, [sp, #12]
    5e36:	9e02      	ldr	r6, [sp, #8]
    5e38:	4f25      	ldr	r7, [pc, #148]	; (5ed0 <fadeup(LEDStruct&)+0x194>)
    5e3a:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    5e3e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    5e42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5e46:	18f5      	adds	r5, r6, r3
    5e48:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    5e4a:	22ff      	movs	r2, #255	; 0xff
    5e4c:	803c      	strh	r4, [r7, #0]
    5e4e:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    5e50:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    5e52:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    5e54:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    5e56:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    5e58:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    5e5a:	b007      	add	sp, #28
    5e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    5e60:	9d02      	ldr	r5, [sp, #8]
    5e62:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    5e66:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5e6a:	f895 2352 	ldrb.w	r2, [r5, #850]	; 0x352
    5e6e:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    5e72:	3305      	adds	r3, #5
    5e74:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    5e76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    5e7a:	f885 3353 	strb.w	r3, [r5, #851]	; 0x353
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5e7e:	4429      	add	r1, r5
    5e80:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5e82:	24ff      	movs	r4, #255	; 0xff
    5e84:	f88d 3016 	strb.w	r3, [sp, #22]
    5e88:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5e8c:	f006 f85a 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    5e90:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5e94:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    5e98:	f895 2353 	ldrb.w	r2, [r5, #851]	; 0x353
    5e9c:	f88d 3014 	strb.w	r3, [sp, #20]
    5ea0:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    5ea4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5ea8:	a805      	add	r0, sp, #20
    5eaa:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5eac:	f88d 4015 	strb.w	r4, [sp, #21]
    5eb0:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5eb4:	f006 f846 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    5eb8:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    5ebc:	2bff      	cmp	r3, #255	; 0xff
    5ebe:	d1cc      	bne.n	5e5a <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    5ec0:	9a02      	ldr	r2, [sp, #8]
    5ec2:	2301      	movs	r3, #1
    5ec4:	f882 335c 	strb.w	r3, [r2, #860]	; 0x35c
		}
	}
}
    5ec8:	b007      	add	sp, #28
    5eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ece:	bf00      	nop
    5ed0:	1fff8788 	.word	0x1fff8788
    5ed4:	42c80000 	.word	0x42c80000
    5ed8:	437f0000 	.word	0x437f0000

00005edc <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    5edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5ee0:	4b65      	ldr	r3, [pc, #404]	; (6078 <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    5ee2:	4605      	mov	r5, r0
    5ee4:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5ee6:	781a      	ldrb	r2, [r3, #0]
    5ee8:	2196      	movs	r1, #150	; 0x96
    5eea:	f005 fdcd 	bl	ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5eee:	f895 435d 	ldrb.w	r4, [r5, #861]	; 0x35d
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    5ef2:	2600      	movs	r6, #0
    5ef4:	f885 675c 	strb.w	r6, [r5, #1884]	; 0x75c
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5ef8:	2c00      	cmp	r4, #0
    5efa:	d07e      	beq.n	5ffa <explosion(LEDStruct&)+0x11e>
    5efc:	f8df 9190 	ldr.w	r9, [pc, #400]	; 6090 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5f00:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5f04:	e03b      	b.n	5f7e <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    5f06:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
    5f0a:	4650      	mov	r0, sl
    5f0c:	f008 ff6e 	bl	edec <__addsf3>
    5f10:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    5f12:	2100      	movs	r1, #0
    5f14:	4638      	mov	r0, r7
    5f16:	f009 fa0f 	bl	f338 <__aeabi_fcmplt>
    5f1a:	4958      	ldr	r1, [pc, #352]	; (607c <explosion(LEDStruct&)+0x1a0>)
    5f1c:	2800      	cmp	r0, #0
    5f1e:	d168      	bne.n	5ff2 <explosion(LEDStruct&)+0x116>
    5f20:	4638      	mov	r0, r7
    5f22:	f009 fa27 	bl	f374 <__aeabi_fcmpgt>
    5f26:	b100      	cbz	r0, 5f2a <explosion(LEDStruct&)+0x4e>
    5f28:	4f54      	ldr	r7, [pc, #336]	; (607c <explosion(LEDStruct&)+0x1a0>)
    5f2a:	f8c4 7360 	str.w	r7, [r4, #864]	; 0x360
		leds.spark_vel[x] *= gravity;
    5f2e:	4651      	mov	r1, sl
    5f30:	f8d9 0000 	ldr.w	r0, [r9]
    5f34:	f009 f862 	bl	effc <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    5f38:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    5f3c:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    5f40:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    5f44:	f009 f85a 	bl	effc <__aeabi_fmul>
    5f48:	4601      	mov	r1, r0
    5f4a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    5f4e:	f008 ff4b 	bl	ede8 <__aeabi_fsub>
    5f52:	f8d4 166c 	ldr.w	r1, [r4, #1644]	; 0x66c
    5f56:	f009 f851 	bl	effc <__aeabi_fmul>
    5f5a:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    5f5e:	f009 fa39 	bl	f3d4 <__aeabi_f2uiz>
    5f62:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    5f66:	b2c0      	uxtb	r0, r0
    5f68:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5f6a:	f106 0601 	add.w	r6, r6, #1
    5f6e:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    5f72:	bf38      	it	cc
    5f74:	f885 075c 	strbcc.w	r0, [r5, #1884]	; 0x75c
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5f78:	b2f6      	uxtb	r6, r6
    5f7a:	42b3      	cmp	r3, r6
    5f7c:	d93b      	bls.n	5ff6 <explosion(LEDStruct&)+0x11a>
    5f7e:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    5f82:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    5f86:	f009 f9ff 	bl	f388 <__aeabi_f2iz>
    5f8a:	4607      	mov	r7, r0
    5f8c:	f8d4 066c 	ldr.w	r0, [r4, #1644]	; 0x66c
    5f90:	f009 fa20 	bl	f3d4 <__aeabi_f2uiz>
    5f94:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    5f98:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5f9c:	a901      	add	r1, sp, #4
    5f9e:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5fa0:	f88d 3000 	strb.w	r3, [sp]
    5fa4:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5fa8:	f005 ffcc 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5fac:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    5fb0:	1829      	adds	r1, r5, r0
    5fb2:	5c2b      	ldrb	r3, [r5, r0]
    5fb4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5fb8:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5fbc:	542b      	strb	r3, [r5, r0]
    5fbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5fc2:	784a      	ldrb	r2, [r1, #1]
    5fc4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5fc8:	704a      	strb	r2, [r1, #1]
    5fca:	788b      	ldrb	r3, [r1, #2]
    5fcc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5fd0:	fa83 f352 	uqadd8	r3, r3, r2

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    5fd4:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    5fd6:	708b      	strb	r3, [r1, #2]
    5fd8:	f892 3540 	ldrb.w	r3, [r2, #1344]	; 0x540
    5fdc:	f8d4 a450 	ldr.w	sl, [r4, #1104]	; 0x450
    5fe0:	2b00      	cmp	r3, #0
    5fe2:	d190      	bne.n	5f06 <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    5fe4:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    5fe8:	4651      	mov	r1, sl
    5fea:	f008 fefd 	bl	ede8 <__aeabi_fsub>
    5fee:	4607      	mov	r7, r0
    5ff0:	e78f      	b.n	5f12 <explosion(LEDStruct&)+0x36>

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    5ff2:	2700      	movs	r7, #0
    5ff4:	e799      	b.n	5f2a <explosion(LEDStruct&)+0x4e>
    5ff6:	f895 475c 	ldrb.w	r4, [r5, #1884]	; 0x75c
    5ffa:	462a      	mov	r2, r5
    5ffc:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    6000:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6002:	7819      	ldrb	r1, [r3, #0]
    6004:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    6008:	7859      	ldrb	r1, [r3, #1]
    600a:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    600e:	7899      	ldrb	r1, [r3, #2]
    6010:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    6014:	3303      	adds	r3, #3
    6016:	4283      	cmp	r3, r0
    6018:	f1a2 0203 	sub.w	r2, r2, #3
    601c:	d1f1      	bne.n	6002 <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    601e:	bb44      	cbnz	r4, 6072 <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    6020:	aa01      	add	r2, sp, #4
    6022:	2196      	movs	r1, #150	; 0x96
    6024:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    6026:	f88d 4004 	strb.w	r4, [sp, #4]
    602a:	f88d 4005 	strb.w	r4, [sp, #5]
    602e:	f88d 4006 	strb.w	r4, [sp, #6]
    6032:	f005 fc67 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6036:	4812      	ldr	r0, [pc, #72]	; (6080 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6038:	4c12      	ldr	r4, [pc, #72]	; (6084 <explosion(LEDStruct&)+0x1a8>)
    603a:	8803      	ldrh	r3, [r0, #0]
    603c:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    603e:	4912      	ldr	r1, [pc, #72]	; (6088 <explosion(LEDStruct&)+0x1ac>)
    6040:	4a12      	ldr	r2, [pc, #72]	; (608c <explosion(LEDStruct&)+0x1b0>)
    6042:	9401      	str	r4, [sp, #4]
    6044:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    6048:	8809      	ldrh	r1, [r1, #0]
    604a:	8812      	ldrh	r2, [r2, #0]
    604c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6050:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6054:	440a      	add	r2, r1
    6056:	3319      	adds	r3, #25
    6058:	b29b      	uxth	r3, r3
    605a:	b292      	uxth	r2, r2
	return ret;
    605c:	9901      	ldr	r1, [sp, #4]
    605e:	8003      	strh	r3, [r0, #0]
    6060:	fb03 f302 	mul.w	r3, r3, r2
    6064:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    6068:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    606a:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    606e:	f885 2354 	strb.w	r2, [r5, #852]	; 0x354
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    6072:	b002      	add	sp, #8
    6074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6078:	1fff8750 	.word	0x1fff8750
    607c:	42940000 	.word	0x42940000
    6080:	1fff8788 	.word	0x1fff8788
    6084:	1fffb19c 	.word	0x1fffb19c
    6088:	1fff8756 	.word	0x1fff8756
    608c:	1fff8754 	.word	0x1fff8754
    6090:	1fff875c 	.word	0x1fff875c

00006094 <fireworks_render(LEDStruct&)>:


void fireworks_render(LEDStruct& leds) {
    6094:	b510      	push	{r4, lr}
	switch (leds.current_stage) {
    6096:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
    609a:	2b01      	cmp	r3, #1
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks_render(LEDStruct& leds) {
    609c:	b082      	sub	sp, #8
	switch (leds.current_stage) {
    609e:	d01c      	beq.n	60da <fireworks_render(LEDStruct&)+0x46>
    60a0:	d317      	bcc.n	60d2 <fireworks_render(LEDStruct&)+0x3e>
    60a2:	2b02      	cmp	r3, #2
    60a4:	d113      	bne.n	60ce <fireworks_render(LEDStruct&)+0x3a>
    60a6:	2300      	movs	r3, #0
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    60a8:	aa01      	add	r2, sp, #4
    60aa:	2196      	movs	r1, #150	; 0x96
    60ac:	4604      	mov	r4, r0
    60ae:	f88d 3004 	strb.w	r3, [sp, #4]
    60b2:	f88d 3005 	strb.w	r3, [sp, #5]
    60b6:	f88d 3006 	strb.w	r3, [sp, #6]
    60ba:	f005 fc23 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    60be:	4a0b      	ldr	r2, [pc, #44]	; (60ec <fireworks_render(LEDStruct&)+0x58>)
			if (millis() >= leds.next_explosion_time) {
    60c0:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    60c4:	6812      	ldr	r2, [r2, #0]
    60c6:	9201      	str	r2, [sp, #4]
	return ret;
    60c8:	9a01      	ldr	r2, [sp, #4]
    60ca:	429a      	cmp	r2, r3
    60cc:	d209      	bcs.n	60e2 <fireworks_render(LEDStruct&)+0x4e>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    60ce:	b002      	add	sp, #8
    60d0:	bd10      	pop	{r4, pc}
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    60d2:	f7ff fe33 	bl	5d3c <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    60d6:	b002      	add	sp, #8
    60d8:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    60da:	f7ff feff 	bl	5edc <explosion(LEDStruct&)>
			break;
	}
}
    60de:	b002      	add	sp, #8
    60e0:	bd10      	pop	{r4, pc}
void fireworks_render(LEDStruct& leds) {
	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    60e2:	4620      	mov	r0, r4
    60e4:	f7ff fdee 	bl	5cc4 <prepare_for_explosion(LEDStruct&)>
    60e8:	e7f1      	b.n	60ce <fireworks_render(LEDStruct&)+0x3a>
    60ea:	bf00      	nop
    60ec:	1fffb19c 	.word	0x1fffb19c

000060f0 <fireworks(LEDStruct&)>:
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    60f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    60f2:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    60f6:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    60f8:	b9fb      	cbnz	r3, 613a <fireworks(LEDStruct&)+0x4a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    60fa:	493e      	ldr	r1, [pc, #248]	; (61f4 <fireworks(LEDStruct&)+0x104>)
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIREWORKS;
	leds.use_palette		= 0;
    60fc:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    6100:	880b      	ldrh	r3, [r1, #0]
    6102:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6106:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    610a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    610e:	3319      	adds	r3, #25
    6110:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6112:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6116:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    611a:	2701      	movs	r7, #1
	leds.mode_type			= FIREWORKS;
    611c:	2618      	movs	r6, #24
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    611e:	250f      	movs	r5, #15

	leds.current_stage		= WAITING;
    6120:	2002      	movs	r0, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6122:	800b      	strh	r3, [r1, #0]

	leds.use_overlay		= uo;
    6124:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    6128:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
	leds.mode_type			= FIREWORKS;
    612c:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    6130:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.current_stage		= WAITING;
    6134:	f884 0354 	strb.w	r0, [r4, #852]	; 0x354

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
    6138:	b972      	cbnz	r2, 6158 <fireworks(LEDStruct&)+0x68>
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    613a:	4b2f      	ldr	r3, [pc, #188]	; (61f8 <fireworks(LEDStruct&)+0x108>)
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	b993      	cbnz	r3, 6166 <fireworks(LEDStruct&)+0x76>

	fireworks_render(leds);
    6140:	4620      	mov	r0, r4
    6142:	f7ff ffa7 	bl	6094 <fireworks_render(LEDStruct&)>

	if (leds.use_overlay) {
    6146:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
    614a:	b123      	cbz	r3, 6156 <fireworks(LEDStruct&)+0x66>
		if (leds.array_type == CURRENT) { 
    614c:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    6150:	b16b      	cbz	r3, 616e <fireworks(LEDStruct&)+0x7e>
			fireworks_render(curr_over_leds); 
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
				leds.led_data[i] += curr_over_leds.led_data[i];
			}
		}
		else if (leds.array_type == NEXT) {	
    6152:	2b01      	cmp	r3, #1
    6154:	d02c      	beq.n	61b0 <fireworks(LEDStruct&)+0xc0>
    6156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	leds.delay_time			= 15;

	leds.current_stage		= WAITING;

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
    6158:	4b28      	ldr	r3, [pc, #160]	; (61fc <fireworks(LEDStruct&)+0x10c>)
    615a:	f883 0354 	strb.w	r0, [r3, #852]	; 0x354
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    615e:	4b26      	ldr	r3, [pc, #152]	; (61f8 <fireworks(LEDStruct&)+0x108>)
    6160:	781b      	ldrb	r3, [r3, #0]
    6162:	2b00      	cmp	r3, #0
    6164:	d0ec      	beq.n	6140 <fireworks(LEDStruct&)+0x50>
    6166:	4620      	mov	r0, r4
    6168:	f7ff fd84 	bl	5c74 <fireworks_update(LEDStruct&)>
    616c:	e7e8      	b.n	6140 <fireworks(LEDStruct&)+0x50>

	fireworks_render(leds);

	if (leds.use_overlay) {
		if (leds.array_type == CURRENT) { 
			fireworks_render(curr_over_leds); 
    616e:	4824      	ldr	r0, [pc, #144]	; (6200 <fireworks(LEDStruct&)+0x110>)
    6170:	f7ff ff90 	bl	6094 <fireworks_render(LEDStruct&)>
    6174:	4b22      	ldr	r3, [pc, #136]	; (6200 <fireworks(LEDStruct&)+0x110>)
    6176:	4620      	mov	r0, r4
    6178:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    617c:	3401      	adds	r4, #1
    617e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    6182:	7819      	ldrb	r1, [r3, #0]
    6184:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    6188:	f804 2c01 	strb.w	r2, [r4, #-1]
    618c:	7841      	ldrb	r1, [r0, #1]
    618e:	785a      	ldrb	r2, [r3, #1]
    6190:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    6194:	7041      	strb	r1, [r0, #1]
    6196:	7882      	ldrb	r2, [r0, #2]
    6198:	7899      	ldrb	r1, [r3, #2]
    619a:	fa82 f251 	uqadd8	r2, r2, r1
    619e:	3303      	adds	r3, #3
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
    61a0:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    61a2:	7082      	strb	r2, [r0, #2]
    61a4:	f104 0403 	add.w	r4, r4, #3
    61a8:	f100 0003 	add.w	r0, r0, #3
    61ac:	d1e7      	bne.n	617e <fireworks(LEDStruct&)+0x8e>
    61ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				leds.led_data[i] += curr_over_leds.led_data[i];
			}
		}
		else if (leds.array_type == NEXT) {	
			fireworks_render(next_over_leds); 
    61b0:	4812      	ldr	r0, [pc, #72]	; (61fc <fireworks(LEDStruct&)+0x10c>)
    61b2:	f7ff ff6f 	bl	6094 <fireworks_render(LEDStruct&)>
    61b6:	4b11      	ldr	r3, [pc, #68]	; (61fc <fireworks(LEDStruct&)+0x10c>)
    61b8:	4620      	mov	r0, r4
    61ba:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    61be:	3401      	adds	r4, #1
    61c0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    61c4:	7819      	ldrb	r1, [r3, #0]
    61c6:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    61ca:	f804 2c01 	strb.w	r2, [r4, #-1]
    61ce:	7841      	ldrb	r1, [r0, #1]
    61d0:	785a      	ldrb	r2, [r3, #1]
    61d2:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    61d6:	7041      	strb	r1, [r0, #1]
    61d8:	7882      	ldrb	r2, [r0, #2]
    61da:	7899      	ldrb	r1, [r3, #2]
    61dc:	fa82 f251 	uqadd8	r2, r2, r1
    61e0:	3303      	adds	r3, #3
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
    61e2:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    61e4:	7082      	strb	r2, [r0, #2]
    61e6:	f104 0403 	add.w	r4, r4, #3
    61ea:	f100 0003 	add.w	r0, r0, #3
    61ee:	d1e7      	bne.n	61c0 <fireworks(LEDStruct&)+0xd0>
    61f0:	e7b1      	b.n	6156 <fireworks(LEDStruct&)+0x66>
    61f2:	bf00      	nop
    61f4:	1fff8788 	.word	0x1fff8788
    61f8:	1fff9625 	.word	0x1fff9625
    61fc:	1fff9ea0 	.word	0x1fff9ea0
    6200:	1fff962c 	.word	0x1fff962c

00006204 <shooting_pole_update(LEDStruct&)>:
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    6204:	4b18      	ldr	r3, [pc, #96]	; (6268 <shooting_pole_update(LEDStruct&)+0x64>)
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    6206:	4a19      	ldr	r2, [pc, #100]	; (626c <shooting_pole_update(LEDStruct&)+0x68>)
	switch (update_var) {
    6208:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    620a:	2100      	movs	r1, #0
    620c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    620e:	2b04      	cmp	r3, #4
    6210:	d80d      	bhi.n	622e <shooting_pole_update(LEDStruct&)+0x2a>
    6212:	e8df f003 	tbb	[pc, r3]
    6216:	1403      	.short	0x1403
    6218:	201a      	.short	0x201a
    621a:	0e          	.byte	0x0e
    621b:	00          	.byte	0x00

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
    621c:	4b14      	ldr	r3, [pc, #80]	; (6270 <shooting_pole_update(LEDStruct&)+0x6c>)
    621e:	781b      	ldrb	r3, [r3, #0]
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
    6220:	2b09      	cmp	r3, #9
    6222:	d91e      	bls.n	6262 <shooting_pole_update(LEDStruct&)+0x5e>
    6224:	2b41      	cmp	r3, #65	; 0x41
    6226:	bfa8      	it	ge
    6228:	2341      	movge	r3, #65	; 0x41
    622a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    622e:	f7fc b805 	b.w	223c <LEDDebug(LEDStruct&)>
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
    6232:	4b0f      	ldr	r3, [pc, #60]	; (6270 <shooting_pole_update(LEDStruct&)+0x6c>)
    6234:	881b      	ldrh	r3, [r3, #0]
    6236:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
		default:	break;
	}
	LEDDebug(leds);
    623a:	f7fb bfff 	b.w	223c <LEDDebug(LEDStruct&)>

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
    623e:	4b0c      	ldr	r3, [pc, #48]	; (6270 <shooting_pole_update(LEDStruct&)+0x6c>)
    6240:	881b      	ldrh	r3, [r3, #0]
    6242:	f880 375e 	strb.w	r3, [r0, #1886]	; 0x75e
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    6246:	f7fb bff9 	b.w	223c <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
    624a:	4b09      	ldr	r3, [pc, #36]	; (6270 <shooting_pole_update(LEDStruct&)+0x6c>)
    624c:	881b      	ldrh	r3, [r3, #0]
    624e:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    6252:	f7fb bff3 	b.w	223c <LEDDebug(LEDStruct&)>
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
    6256:	4b06      	ldr	r3, [pc, #24]	; (6270 <shooting_pole_update(LEDStruct&)+0x6c>)
    6258:	881b      	ldrh	r3, [r3, #0]
    625a:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    625e:	f7fb bfed 	b.w	223c <LEDDebug(LEDStruct&)>
    6262:	230a      	movs	r3, #10
    6264:	e7e1      	b.n	622a <shooting_pole_update(LEDStruct&)+0x26>
    6266:	bf00      	nop
    6268:	1fff9e8c 	.word	0x1fff9e8c
    626c:	1fff9625 	.word	0x1fff9625
    6270:	1fff9526 	.word	0x1fff9526

00006274 <shooting_pole(LEDStruct&)>:
}

void shooting_pole(LEDStruct& leds) {
    6274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    6278:	f890 622e 	ldrb.w	r6, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
    627c:	b087      	sub	sp, #28
    627e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    6280:	2e00      	cmp	r6, #0
    6282:	f000 80f7 	beq.w	6474 <shooting_pole(LEDStruct&)+0x200>
	if (keyboard_update) { shooting_pole_update(leds); }
    6286:	4bbc      	ldr	r3, [pc, #752]	; (6578 <shooting_pole(LEDStruct&)+0x304>)
    6288:	781b      	ldrb	r3, [r3, #0]
    628a:	2b00      	cmp	r3, #0
    628c:	f040 8161 	bne.w	6552 <shooting_pole(LEDStruct&)+0x2de>

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    6290:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    6294:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    6298:	b311      	cbz	r1, 62e0 <shooting_pole(LEDStruct&)+0x6c>
    629a:	4626      	mov	r6, r4
    629c:	2500      	movs	r5, #0
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
    629e:	f04f 0801 	mov.w	r8, #1
    62a2:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    62a6:	f8cd 8000 	str.w	r8, [sp]
    62aa:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    62ae:	fb92 f2f1 	sdiv	r2, r2, r1
    62b2:	441a      	add	r2, r3
    62b4:	b2d2      	uxtb	r2, r2
    62b6:	23ff      	movs	r3, #255	; 0xff
    62b8:	4639      	mov	r1, r7
    62ba:	a805      	add	r0, sp, #20
    62bc:	f005 fc44 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    62c0:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    62c4:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    62c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    62cc:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    62ce:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    62d0:	70b3      	strb	r3, [r6, #2]
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    62d2:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    62d6:	3501      	adds	r5, #1
    62d8:	42a9      	cmp	r1, r5
    62da:	f106 0603 	add.w	r6, r6, #3
    62de:	dce0      	bgt.n	62a2 <shooting_pole(LEDStruct&)+0x2e>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
    62e0:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    62e4:	2b00      	cmp	r3, #0
    62e6:	f000 80bd 	beq.w	6464 <shooting_pole(LEDStruct&)+0x1f0>
    62ea:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    62ee:	f894 375e 	ldrb.w	r3, [r4, #1886]	; 0x75e
    62f2:	4413      	add	r3, r2
    62f4:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
	else { leds.pole_index -= leds.pole_diff; }

	// Fade juggle LEDs
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
    62f8:	294a      	cmp	r1, #74	; 0x4a
    62fa:	f300 812e 	bgt.w	655a <shooting_pole(LEDStruct&)+0x2e6>
    62fe:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    6302:	18a3      	adds	r3, r4, r2
    6304:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    6308:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    g = (((uint16_t)g) * scale_fixed) >> 8;
    630c:	7858      	ldrb	r0, [r3, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    630e:	781e      	ldrb	r6, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    6310:	f893 e002 	ldrb.w	lr, [r3, #2]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    6314:	43c9      	mvns	r1, r1
    6316:	b2c9      	uxtb	r1, r1
    6318:	1c4a      	adds	r2, r1, #1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    631a:	fb02 f100 	mul.w	r1, r2, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    631e:	fb02 f606 	mul.w	r6, r2, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    6322:	fb02 f20e 	mul.w	r2, r2, lr
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    6326:	1230      	asrs	r0, r6, #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    6328:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    632a:	1212      	asrs	r2, r2, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    632c:	7018      	strb	r0, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    632e:	7059      	strb	r1, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    6330:	709a      	strb	r2, [r3, #2]
    6332:	3303      	adds	r3, #3
    6334:	42ab      	cmp	r3, r5
    6336:	d1e7      	bne.n	6308 <shooting_pole(LEDStruct&)+0x94>
    6338:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    633c:	f8df 824c 	ldr.w	r8, [pc, #588]	; 658c <shooting_pole(LEDStruct&)+0x318>

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    6340:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    6344:	f8d8 2000 	ldr.w	r2, [r8]
    6348:	9205      	str	r2, [sp, #20]
	return ret;
    634a:	9805      	ldr	r0, [sp, #20]
    634c:	f44f 728c 	mov.w	r2, #280	; 0x118
    6350:	fb02 f200 	mul.w	r2, r2, r0
    6354:	021b      	lsls	r3, r3, #8
    6356:	fb03 f202 	mul.w	r2, r3, r2
    635a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    635e:	f5a2 4280 	sub.w	r2, r2, #16384	; 0x4000
    6362:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6364:	0450      	lsls	r0, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6366:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    636a:	d503      	bpl.n	6374 <shooting_pole(LEDStruct&)+0x100>
    636c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6370:	3307      	adds	r3, #7
    6372:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6374:	0a18      	lsrs	r0, r3, #8
    6376:	f8df e218 	ldr.w	lr, [pc, #536]	; 6590 <shooting_pole(LEDStruct&)+0x31c>
    uint8_t  m   = slope[section];
    637a:	4e80      	ldr	r6, [pc, #512]	; (657c <shooting_pole(LEDStruct&)+0x308>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    637c:	5c36      	ldrb	r6, [r6, r0]
    637e:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
    6382:	f3c3 0346 	ubfx	r3, r3, #1, #7
    6386:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    638a:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    638c:	b29e      	uxth	r6, r3

    if( theta & 0x8000 ) y = -y;
    638e:	bf48      	it	mi
    6390:	4276      	negmi	r6, r6
    6392:	b236      	sxth	r6, r6
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
    6394:	f1c1 034a 	rsb	r3, r1, #74	; 0x4a
    6398:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
    639c:	b29b      	uxth	r3, r3
    639e:	b2b6      	uxth	r6, r6
    63a0:	fb03 6606 	mla	r6, r3, r6, r6
    63a4:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    63a8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    63ac:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    63b0:	9000      	str	r0, [sp, #0]
    63b2:	eb01 4616 	add.w	r6, r1, r6, lsr #16
    63b6:	a804      	add	r0, sp, #16
    63b8:	4639      	mov	r1, r7
    63ba:	b2b6      	uxth	r6, r6
    63bc:	f005 fbc4 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    63c0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    63c4:	18e1      	adds	r1, r4, r3
    63c6:	5ce2      	ldrb	r2, [r4, r3]
    63c8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    63cc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    63d0:	54e2      	strb	r2, [r4, r3]
    63d2:	f89d 3011 	ldrb.w	r3, [sp, #17]
    63d6:	784a      	ldrb	r2, [r1, #1]
    63d8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    63dc:	704a      	strb	r2, [r1, #1]
    63de:	788b      	ldrb	r3, [r1, #2]
    63e0:	f89d 2012 	ldrb.w	r2, [sp, #18]
    63e4:	fa83 f352 	uqadd8	r3, r3, r2

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    63e8:	4f65      	ldr	r7, [pc, #404]	; (6580 <shooting_pole(LEDStruct&)+0x30c>)
        b = qadd8( b, rhs.b);
    63ea:	708b      	strb	r3, [r1, #2]
    63ec:	683b      	ldr	r3, [r7, #0]
    63ee:	07db      	lsls	r3, r3, #31
    63f0:	d51b      	bpl.n	642a <shooting_pole(LEDStruct&)+0x1b6>
    63f2:	4e64      	ldr	r6, [pc, #400]	; (6584 <shooting_pole(LEDStruct&)+0x310>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    63f4:	f8d8 3000 	ldr.w	r3, [r8]
    63f8:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    63fa:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    63fe:	9b04      	ldr	r3, [sp, #16]
    6400:	1a5b      	subs	r3, r3, r1
    6402:	429a      	cmp	r2, r3
    6404:	d921      	bls.n	644a <shooting_pole(LEDStruct&)+0x1d6>
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    6406:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6408:	781a      	ldrb	r2, [r3, #0]
    640a:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    640e:	785a      	ldrb	r2, [r3, #1]
    6410:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    6414:	789a      	ldrb	r2, [r3, #2]
    6416:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    641a:	3303      	adds	r3, #3
    641c:	429d      	cmp	r5, r3
    641e:	f1a4 0403 	sub.w	r4, r4, #3
    6422:	d1f1      	bne.n	6408 <shooting_pole(LEDStruct&)+0x194>

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }

	strip_sync(leds);
}
    6424:	b007      	add	sp, #28
    6426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    642a:	4638      	mov	r0, r7
    642c:	f006 faa6 	bl	c97c <__cxa_guard_acquire>
    6430:	2800      	cmp	r0, #0
    6432:	f040 8095 	bne.w	6560 <shooting_pole(LEDStruct&)+0x2ec>
    6436:	4e53      	ldr	r6, [pc, #332]	; (6584 <shooting_pole(LEDStruct&)+0x310>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6438:	f8d8 3000 	ldr.w	r3, [r8]
    643c:	9304      	str	r3, [sp, #16]
    643e:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    6442:	9b04      	ldr	r3, [sp, #16]
    6444:	1a5b      	subs	r3, r3, r1
    6446:	4293      	cmp	r3, r2
    6448:	d3dd      	bcc.n	6406 <shooting_pole(LEDStruct&)+0x192>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    644a:	f8d8 1000 	ldr.w	r1, [r8]
    644e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    6452:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    6456:	9103      	str	r1, [sp, #12]
	return ret;
    6458:	9903      	ldr	r1, [sp, #12]
    645a:	6031      	str	r1, [r6, #0]
    645c:	4413      	add	r3, r2
    645e:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    6462:	e7d0      	b.n	6406 <shooting_pole(LEDStruct&)+0x192>
	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
	else { leds.pole_index -= leds.pole_diff; }
    6464:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    6468:	f894 275e 	ldrb.w	r2, [r4, #1886]	; 0x75e
    646c:	1a9b      	subs	r3, r3, r2
    646e:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    6472:	e741      	b.n	62f8 <shooting_pole(LEDStruct&)+0x84>
    6474:	4f44      	ldr	r7, [pc, #272]	; (6588 <shooting_pole(LEDStruct&)+0x314>)
    6476:	883b      	ldrh	r3, [r7, #0]
    6478:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    647c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6480:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6484:	3319      	adds	r3, #25
    6486:	b29b      	uxth	r3, r3
    6488:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    648c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6490:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6494:	3219      	adds	r2, #25
    6496:	b292      	uxth	r2, r2
    6498:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    649c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    64a0:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    64a4:	f10e 0e19 	add.w	lr, lr, #25
    64a8:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    64ac:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    64b0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
    64b4:	2146      	movs	r1, #70	; 0x46
    64b6:	2032      	movs	r0, #50	; 0x32
    64b8:	b2dd      	uxtb	r5, r3
    64ba:	eb0e 281e 	add.w	r8, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    64be:	f8a7 e000 	strh.w	lr, [r7]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    64c2:	fa5f f982 	uxtb.w	r9, r2
    64c6:	f007 fe03 	bl	e0d0 <random(long, long)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    64ca:	883b      	ldrh	r3, [r7, #0]
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
    64cc:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
    64d0:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    64d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
    64d8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    64dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    64e0:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    64e2:	fa5f f888 	uxtb.w	r8, r8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    64e6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    64ea:	f1c3 0339 	rsb	r3, r3, #57	; 0x39
    64ee:	b2db      	uxtb	r3, r3
    64f0:	3019      	adds	r0, #25
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    64f2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    64f6:	b280      	uxth	r0, r0
    64f8:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
    64fc:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    6500:	4b1d      	ldr	r3, [pc, #116]	; (6578 <shooting_pole(LEDStruct&)+0x304>)

void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
    6502:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    6506:	eb09 0289 	add.w	r2, r9, r9, lsl #2
	leds.juggle_fade = jf;
    650a:	ea4f 11e8 	mov.w	r1, r8, asr #7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    650e:	eb00 2e10 	add.w	lr, r0, r0, lsr #8
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    6512:	1215      	asrs	r5, r2, #8
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    6514:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    6518:	f101 021e 	add.w	r2, r1, #30
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    651c:	781b      	ldrb	r3, [r3, #0]
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    651e:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    6522:	1c69      	adds	r1, r5, #1


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
    6524:	f04f 0c19 	mov.w	ip, #25

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    6528:	f10e 0501 	add.w	r5, lr, #1
void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;
    652c:	220f      	movs	r2, #15
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
    652e:	f04f 0e01 	mov.w	lr, #1
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    6532:	f884 175e 	strb.w	r1, [r4, #1886]	; 0x75e
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6536:	8038      	strh	r0, [r7, #0]
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    6538:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
    653c:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    6540:	f884 e22a 	strb.w	lr, [r4, #554]	; 0x22a
	leds.mode_type			= SHOOTING_POLE;
    6544:	f884 c22d 	strb.w	ip, [r4, #557]	; 0x22d
	leds.use_full_range		= 0;
	leds.delay_time			= 15;
    6548:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    654c:	2b00      	cmp	r3, #0
    654e:	f43f ae9f 	beq.w	6290 <shooting_pole(LEDStruct&)+0x1c>
    6552:	4620      	mov	r0, r4
    6554:	f7ff fe56 	bl	6204 <shooting_pole_update(LEDStruct&)>
    6558:	e69a      	b.n	6290 <shooting_pole(LEDStruct&)+0x1c>
    655a:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    655e:	e6ed      	b.n	633c <shooting_pole(LEDStruct&)+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6560:	f8d8 3000 	ldr.w	r3, [r8]
    6564:	4e07      	ldr	r6, [pc, #28]	; (6584 <shooting_pole(LEDStruct&)+0x310>)
    6566:	9302      	str	r3, [sp, #8]
	return ret;
    6568:	9b02      	ldr	r3, [sp, #8]
    656a:	6033      	str	r3, [r6, #0]
    656c:	2332      	movs	r3, #50	; 0x32

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    656e:	4638      	mov	r0, r7
    6570:	6073      	str	r3, [r6, #4]
    6572:	f006 fa09 	bl	c988 <__cxa_guard_release>
    6576:	e75f      	b.n	6438 <shooting_pole(LEDStruct&)+0x1c4>
    6578:	1fff9625 	.word	0x1fff9625
    657c:	00011854 	.word	0x00011854
    6580:	1fff9614 	.word	0x1fff9614
    6584:	1fff9530 	.word	0x1fff9530
    6588:	1fff8788 	.word	0x1fff8788
    658c:	1fffb19c 	.word	0x1fffb19c
    6590:	0001111c 	.word	0x0001111c

00006594 <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    6594:	4b2a      	ldr	r3, [pc, #168]	; (6640 <two_sin_update(LEDStruct&)+0xac>)
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    6596:	4a2b      	ldr	r2, [pc, #172]	; (6644 <two_sin_update(LEDStruct&)+0xb0>)
	switch (update_var) {
    6598:	781b      	ldrb	r3, [r3, #0]
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    659a:	2100      	movs	r1, #0
    659c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    659e:	2b0b      	cmp	r3, #11
    65a0:	d80b      	bhi.n	65ba <two_sin_update(LEDStruct&)+0x26>
    65a2:	e8df f003 	tbb	[pc, r3]
    65a6:	1f11      	.short	0x1f11
    65a8:	332e2924 	.word	0x332e2924
    65ac:	06423d38 	.word	0x06423d38
    65b0:	0c47      	.short	0x0c47
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
    65b2:	4b25      	ldr	r3, [pc, #148]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    65b4:	881b      	ldrh	r3, [r3, #0]
    65b6:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    65ba:	f7fb be3f 	b.w	223c <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
    65be:	4b22      	ldr	r3, [pc, #136]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    65c0:	881b      	ldrh	r3, [r3, #0]
    65c2:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    65c6:	e7f8      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>

void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    65c8:	4b1f      	ldr	r3, [pc, #124]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    65ca:	881b      	ldrh	r3, [r3, #0]
    65cc:	2b00      	cmp	r3, #0
    65ce:	bf14      	ite	ne
    65d0:	2301      	movne	r3, #1
    65d2:	2300      	moveq	r3, #0
    65d4:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    65d8:	bf14      	ite	ne
    65da:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    65dc:	234b      	moveq	r3, #75	; 0x4b
    65de:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    65e2:	e7ea      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
			break;
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    65e4:	4b18      	ldr	r3, [pc, #96]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    65e6:	881b      	ldrh	r3, [r3, #0]
    65e8:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
    65ec:	e7e5      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    65ee:	4b16      	ldr	r3, [pc, #88]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    65f0:	881b      	ldrh	r3, [r3, #0]
    65f2:	f880 334d 	strb.w	r3, [r0, #845]	; 0x34d
    65f6:	e7e0      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    65f8:	4b13      	ldr	r3, [pc, #76]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    65fa:	881b      	ldrh	r3, [r3, #0]
    65fc:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    6600:	e7db      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    6602:	4b11      	ldr	r3, [pc, #68]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    6604:	881b      	ldrh	r3, [r3, #0]
    6606:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
    660a:	e7d6      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    660c:	4b0e      	ldr	r3, [pc, #56]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    660e:	881b      	ldrh	r3, [r3, #0]
    6610:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    6614:	e7d1      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    6616:	4b0c      	ldr	r3, [pc, #48]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    6618:	881b      	ldrh	r3, [r3, #0]
    661a:	f880 334a 	strb.w	r3, [r0, #842]	; 0x34a
    661e:	e7cc      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    6620:	4b09      	ldr	r3, [pc, #36]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    6622:	881b      	ldrh	r3, [r3, #0]
    6624:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    6628:	e7c7      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    662a:	4b07      	ldr	r3, [pc, #28]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    662c:	881b      	ldrh	r3, [r3, #0]
    662e:	f880 334b 	strb.w	r3, [r0, #843]	; 0x34b
    6632:	e7c2      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
    6634:	4b04      	ldr	r3, [pc, #16]	; (6648 <two_sin_update(LEDStruct&)+0xb4>)
    6636:	881b      	ldrh	r3, [r3, #0]
    6638:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    663c:	e7bd      	b.n	65ba <two_sin_update(LEDStruct&)+0x26>
    663e:	bf00      	nop
    6640:	1fff9e8c 	.word	0x1fff9e8c
    6644:	1fff9625 	.word	0x1fff9625
    6648:	1fff9526 	.word	0x1fff9526

0000664c <two_sin(LEDStruct&)>:
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    6650:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    6654:	b083      	sub	sp, #12
    6656:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    6658:	2b00      	cmp	r3, #0
    665a:	f040 80cb 	bne.w	67f4 <two_sin(LEDStruct&)+0x1a8>
    665e:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 6a2c <two_sin(LEDStruct&)+0x3e0>
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
    6662:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    6666:	f8ba 3000 	ldrh.w	r3, [sl]
    666a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    666e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    6672:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    6676:	3619      	adds	r6, #25
    6678:	b2b6      	uxth	r6, r6
    667a:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    667e:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    6682:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    6686:	f10c 0c19 	add.w	ip, ip, #25
    668a:	fa1f fc8c 	uxth.w	ip, ip
    668e:	eb0c 2e4c 	add.w	lr, ip, ip, lsl #9
    6692:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
    6696:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    669a:	f10e 0e19 	add.w	lr, lr, #25
    669e:	fa1f fe8e 	uxth.w	lr, lr
    66a2:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    66a6:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    66aa:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    66ae:	3119      	adds	r1, #25
    66b0:	b289      	uxth	r1, r1
    66b2:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    66b6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    66ba:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    66be:	3719      	adds	r7, #25
    66c0:	b2bf      	uxth	r7, r7
    66c2:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    66c6:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    66ca:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    66ce:	3519      	adds	r5, #25
    66d0:	b2ad      	uxth	r5, r5
    66d2:	eb05 2045 	add.w	r0, r5, r5, lsl #9
    66d6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    66da:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    66de:	3019      	adds	r0, #25
    66e0:	b280      	uxth	r0, r0
    66e2:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    66e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    66ea:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    66ee:	3219      	adds	r2, #25
    66f0:	b292      	uxth	r2, r2
    66f2:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    66f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    66fa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    66fe:	3319      	adds	r3, #25
    6700:	b29b      	uxth	r3, r3
    6702:	eb03 2943 	add.w	r9, r3, r3, lsl #9
    6706:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    670a:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    670e:	f109 0919 	add.w	r9, r9, #25
    6712:	fa1f f989 	uxth.w	r9, r9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6716:	eb09 2819 	add.w	r8, r9, r9, lsr #8
    671a:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    671e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6722:	fa5f f888 	uxtb.w	r8, r8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6726:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    672a:	b2c9      	uxtb	r1, r1
    672c:	b2d2      	uxtb	r2, r2
    672e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    6732:	b2db      	uxtb	r3, r3
    6734:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6738:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    673c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6740:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6744:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
    6748:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    674c:	1112      	asrs	r2, r2, #4
    674e:	ea4f 2828 	mov.w	r8, r8, asr #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6752:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6756:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6758:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    675c:	b2ed      	uxtb	r5, r5
    675e:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6760:	111b      	asrs	r3, r3, #4
    6762:	f102 0b20 	add.w	fp, r2, #32
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6766:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    676a:	f108 020c 	add.w	r2, r8, #12
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    676e:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    6772:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6776:	3903      	subs	r1, #3
    6778:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    677c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6780:	eb00 0040 	add.w	r0, r0, r0, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6784:	3320      	adds	r3, #32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6786:	f8aa 9000 	strh.w	r9, [sl]
void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
    678a:	f04f 0817 	mov.w	r8, #23

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    678e:	f04f 0901 	mov.w	r9, #1
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
    6792:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6796:	fa5f fc8c 	uxtb.w	ip, ip
    679a:	fa5f fe8e 	uxtb.w	lr, lr
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    679e:	b2c9      	uxtb	r1, r1
    67a0:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    67a2:	f3c5 2507 	ubfx	r5, r5, #8, #8
    67a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    67aa:	fa5f fb8b 	uxtb.w	fp, fp
    67ae:	b2d2      	uxtb	r2, r2
    67b0:	b2db      	uxtb	r3, r3

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    67b2:	f884 922e 	strb.w	r9, [r4, #558]	; 0x22e
	leds.mode_type			= TWO_SIN;
    67b6:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    67ba:	2e00      	cmp	r6, #0
    67bc:	f040 812b 	bne.w	6a16 <two_sin(LEDStruct&)+0x3ca>
	else					 { leds.strip_range = ONE_SIDE; }
    67c0:	264b      	movs	r6, #75	; 0x4b
    67c2:	f8a4 633c 	strh.w	r6, [r4, #828]	; 0x33c
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    67c6:	2600      	movs	r6, #0
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }

	leds.sin_hue		= sh;		// changes by rot
    67c8:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue		= th;
    67cc:	f884 e34d 	strb.w	lr, [r4, #845]	; 0x34d
	leds.sin_speed		= ss;		// changes the phase
    67d0:	f884 1340 	strb.w	r1, [r4, #832]	; 0x340
	leds.two_speed		= ts;
    67d4:	f884 7349 	strb.w	r7, [r4, #841]	; 0x349
	leds.sin_rot		= sr;		// changes the hue
    67d8:	f884 5342 	strb.w	r5, [r4, #834]	; 0x342
	leds.two_rot		= tr;
    67dc:	f884 034a 	strb.w	r0, [r4, #842]	; 0x34a
	leds.sin_cutoff		= sc;		// limits the brightness
    67e0:	f884 b341 	strb.w	fp, [r4, #833]	; 0x341
	leds.two_cutoff		= tc;
    67e4:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    67e8:	f884 2343 	strb.w	r2, [r4, #835]	; 0x343
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    67ec:	f884 6346 	strb.w	r6, [r4, #838]	; 0x346
	leds.two_phase		= 0;
    67f0:	f884 634c 	strb.w	r6, [r4, #844]	; 0x34c
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    67f4:	4b8c      	ldr	r3, [pc, #560]	; (6a28 <two_sin(LEDStruct&)+0x3dc>)
    67f6:	781b      	ldrb	r3, [r3, #0]
    67f8:	2b00      	cmp	r3, #0
    67fa:	f040 8110 	bne.w	6a1e <two_sin(LEDStruct&)+0x3d2>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    67fe:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    6802:	2b00      	cmp	r3, #0
    6804:	f040 80f8 	bne.w	69f8 <two_sin(LEDStruct&)+0x3ac>
    6808:	f894 0346 	ldrb.w	r0, [r4, #838]	; 0x346
    680c:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    6810:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    6814:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    6818:	4402      	add	r2, r0
    681a:	440b      	add	r3, r1
    681c:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    6820:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    6824:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
    6828:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    682c:	f894 034d 	ldrb.w	r0, [r4, #845]	; 0x34d
    6830:	f894 334a 	ldrb.w	r3, [r4, #842]	; 0x34a

	for (int k = 0; k < leds.strip_range; k++) {
    6834:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    6838:	4494      	add	ip, r2
    683a:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    683e:	4403      	add	r3, r0
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    6840:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    6844:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d

	for (int k = 0; k < leds.strip_range; k++) {
    6848:	2900      	cmp	r1, #0
    684a:	f000 80be 	beq.w	69ca <two_sin(LEDStruct&)+0x37e>
    684e:	4626      	mov	r6, r4
    6850:	2700      	movs	r7, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    6852:	25ff      	movs	r5, #255	; 0xff
    6854:	e08b      	b.n	696e <two_sin(LEDStruct&)+0x322>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    6856:	2b00      	cmp	r3, #0
        in = 255 - in;
    6858:	bfbc      	itt	lt
    685a:	43c9      	mvnlt	r1, r1
    685c:	b2c9      	uxtblt	r1, r1
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    685e:	0049      	lsls	r1, r1, #1
    6860:	b2c9      	uxtb	r1, r1
    6862:	1c4b      	adds	r3, r1, #1
    6864:	fb03 f101 	mul.w	r1, r3, r1
    6868:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    686a:	fb01 f303 	mul.w	r3, r1, r3
    686e:	121b      	asrs	r3, r3, #8
    6870:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6874:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    6878:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    687a:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    687c:	bf54      	ite	pl
    687e:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    6882:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    6886:	ebc8 0e0e 	rsb	lr, r8, lr
    688a:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    688e:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    6892:	f884 e348 	strb.w	lr, [r4, #840]	; 0x348
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    6896:	3b80      	subs	r3, #128	; 0x80
    6898:	4403      	add	r3, r0
    689a:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    689c:	b259      	sxtb	r1, r3
    689e:	2900      	cmp	r1, #0
        in = 255 - in;
    68a0:	bfba      	itte	lt
    68a2:	43da      	mvnlt	r2, r3
    68a4:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    68a6:	461a      	movge	r2, r3
    68a8:	0052      	lsls	r2, r2, #1
    68aa:	b2d2      	uxtb	r2, r2
    68ac:	1c50      	adds	r0, r2, #1
    68ae:	fb00 f202 	mul.w	r2, r0, r2
    68b2:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    68b4:	fb02 f000 	mul.w	r0, r2, r0
    68b8:	1200      	asrs	r0, r0, #8
    68ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    68be:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    68c2:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    68c4:	05d0      	lsls	r0, r2, #23
    68c6:	f894 034b 	ldrb.w	r0, [r4, #843]	; 0x34b

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    68ca:	bf54      	ite	pl
    68cc:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    68ce:	22ff      	movmi	r2, #255	; 0xff
    68d0:	4290      	cmp	r0, r2
    68d2:	d278      	bcs.n	69c6 <two_sin(LEDStruct&)+0x37a>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    68d4:	2900      	cmp	r1, #0
        in = 255 - in;
    68d6:	bfbc      	itt	lt
    68d8:	43db      	mvnlt	r3, r3
    68da:	b2db      	uxtblt	r3, r3
    68dc:	005a      	lsls	r2, r3, #1
    68de:	b2d2      	uxtb	r2, r2
    68e0:	1c53      	adds	r3, r2, #1
    68e2:	fb03 f202 	mul.w	r2, r3, r2
    68e6:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    68e8:	fb02 f303 	mul.w	r3, r2, r3
    68ec:	121b      	asrs	r3, r3, #8
    68ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    68f2:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    68f6:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    68f8:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    68fa:	bf54      	ite	pl
    68fc:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    68fe:	23ff      	movmi	r3, #255	; 0xff
    6900:	1a1b      	subs	r3, r3, r0
    6902:	b2db      	uxtb	r3, r3
    6904:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6908:	4631      	mov	r1, r6
    690a:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    690c:	f88d c004 	strb.w	ip, [sp, #4]
    6910:	f88d e006 	strb.w	lr, [sp, #6]
    6914:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6918:	f005 fb14 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    691c:	f894 234e 	ldrb.w	r2, [r4, #846]	; 0x34e
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6920:	f894 334d 	ldrb.w	r3, [r4, #845]	; 0x34d
    6924:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6928:	a901      	add	r1, sp, #4
    692a:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    692c:	f88d 3000 	strb.w	r3, [sp]
    6930:	f88d 5001 	strb.w	r5, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6934:	f005 fb06 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    6938:	7833      	ldrb	r3, [r6, #0]
    693a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    693e:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    6942:	7033      	strb	r3, [r6, #0]
    6944:	7872      	ldrb	r2, [r6, #1]
    6946:	f89d 3005 	ldrb.w	r3, [sp, #5]
    694a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    694e:	7072      	strb	r2, [r6, #1]
    6950:	78b3      	ldrb	r3, [r6, #2]
    6952:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6956:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    695a:	70b3      	strb	r3, [r6, #2]
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
    695c:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6960:	3701      	adds	r7, #1
    6962:	42bb      	cmp	r3, r7
    6964:	f106 0603 	add.w	r6, r6, #3
    6968:	dd2f      	ble.n	69ca <two_sin(LEDStruct&)+0x37e>
    696a:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    696e:	f894 0343 	ldrb.w	r0, [r4, #835]	; 0x343
    6972:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    6976:	f894 8341 	ldrb.w	r8, [r4, #833]	; 0x341
    697a:	fb10 f007 	smulbb	r0, r0, r7
    697e:	b2c0      	uxtb	r0, r0
    6980:	4401      	add	r1, r0
    6982:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    6984:	b24b      	sxtb	r3, r1
    6986:	2b00      	cmp	r3, #0
        in = 255 - in;
    6988:	bfba      	itte	lt
    698a:	43ca      	mvnlt	r2, r1
    698c:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    698e:	460a      	movge	r2, r1
    6990:	0052      	lsls	r2, r2, #1
    6992:	b2d2      	uxtb	r2, r2
    6994:	f102 0e01 	add.w	lr, r2, #1
    6998:	fb0e f202 	mul.w	r2, lr, r2
    699c:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    699e:	fb02 fe0e 	mul.w	lr, r2, lr
    69a2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    69a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    69aa:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
    69ae:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    69b0:	f412 7f80 	tst.w	r2, #256	; 0x100

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    69b4:	bf0c      	ite	eq
    69b6:	b2d2      	uxtbeq	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    69b8:	22ff      	movne	r2, #255	; 0xff
    69ba:	4590      	cmp	r8, r2
    69bc:	f4ff af4b 	bcc.w	6856 <two_sin(LEDStruct&)+0x20a>
    69c0:	f04f 0e00 	mov.w	lr, #0
    69c4:	e763      	b.n	688e <two_sin(LEDStruct&)+0x242>
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    69c6:	2300      	movs	r3, #0
    69c8:	e79c      	b.n	6904 <two_sin(LEDStruct&)+0x2b8>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);

	}
	if (!leds.use_full_range) { strip_sync(leds); }
    69ca:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    69ce:	b983      	cbnz	r3, 69f2 <two_sin(LEDStruct&)+0x3a6>
    69d0:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    69d4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    69d6:	781a      	ldrb	r2, [r3, #0]
    69d8:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    69dc:	785a      	ldrb	r2, [r3, #1]
    69de:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    69e2:	789a      	ldrb	r2, [r3, #2]
    69e4:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    69e8:	3303      	adds	r3, #3
    69ea:	428b      	cmp	r3, r1
    69ec:	f1a4 0403 	sub.w	r4, r4, #3
    69f0:	d1f1      	bne.n	69d6 <two_sin(LEDStruct&)+0x38a>
}
    69f2:	b003      	add	sp, #12
    69f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }
    69f8:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    69fc:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
    6a00:	f894 0340 	ldrb.w	r0, [r4, #832]	; 0x340
    6a04:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    6a08:	1a12      	subs	r2, r2, r0
    6a0a:	1a5b      	subs	r3, r3, r1
    6a0c:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    6a10:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    6a14:	e706      	b.n	6824 <two_sin(LEDStruct&)+0x1d8>

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6a16:	2696      	movs	r6, #150	; 0x96
    6a18:	f8a4 633c 	strh.w	r6, [r4, #828]	; 0x33c
    6a1c:	e6d3      	b.n	67c6 <two_sin(LEDStruct&)+0x17a>
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    6a1e:	4620      	mov	r0, r4
    6a20:	f7ff fdb8 	bl	6594 <two_sin_update(LEDStruct&)>
    6a24:	e6eb      	b.n	67fe <two_sin(LEDStruct&)+0x1b2>
    6a26:	bf00      	nop
    6a28:	1fff9625 	.word	0x1fff9625
    6a2c:	1fff8788 	.word	0x1fff8788

00006a30 <noise_update(LEDStruct&)>:
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    6a30:	4b19      	ldr	r3, [pc, #100]	; (6a98 <noise_update(LEDStruct&)+0x68>)
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    6a32:	4a1a      	ldr	r2, [pc, #104]	; (6a9c <noise_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    6a34:	781b      	ldrb	r3, [r3, #0]
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    6a36:	2100      	movs	r1, #0
    6a38:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    6a3a:	2b04      	cmp	r3, #4
    6a3c:	d808      	bhi.n	6a50 <noise_update(LEDStruct&)+0x20>
    6a3e:	e8df f003 	tbb	[pc, r3]
    6a42:	1e0f      	.short	0x1e0f
    6a44:	2403      	.short	0x2403
    6a46:	09          	.byte	0x09
    6a47:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
    6a48:	4b15      	ldr	r3, [pc, #84]	; (6aa0 <noise_update(LEDStruct&)+0x70>)
    6a4a:	881b      	ldrh	r3, [r3, #0]
    6a4c:	f8a0 3762 	strh.w	r3, [r0, #1890]	; 0x762
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    6a50:	f7fb bbf4 	b.w	223c <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
    6a54:	4b12      	ldr	r3, [pc, #72]	; (6aa0 <noise_update(LEDStruct&)+0x70>)
    6a56:	881b      	ldrh	r3, [r3, #0]
    6a58:	f880 3767 	strb.w	r3, [r0, #1895]	; 0x767
		default:	break;
	}
	LEDDebug(leds);
    6a5c:	f7fb bbee 	b.w	223c <LEDDebug(LEDStruct&)>

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
    6a60:	4b0f      	ldr	r3, [pc, #60]	; (6aa0 <noise_update(LEDStruct&)+0x70>)
    6a62:	881b      	ldrh	r3, [r3, #0]
    6a64:	2b00      	cmp	r3, #0
    6a66:	bf14      	ite	ne
    6a68:	2301      	movne	r3, #1
    6a6a:	2300      	moveq	r3, #0
    6a6c:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
    6a70:	bf14      	ite	ne
    6a72:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; } 
    6a74:	234b      	moveq	r3, #75	; 0x4b
    6a76:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    6a7a:	f7fb bbdf 	b.w	223c <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
    6a7e:	4b08      	ldr	r3, [pc, #32]	; (6aa0 <noise_update(LEDStruct&)+0x70>)
    6a80:	881b      	ldrh	r3, [r3, #0]
    6a82:	f8a0 3760 	strh.w	r3, [r0, #1888]	; 0x760
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    6a86:	f7fb bbd9 	b.w	223c <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
    6a8a:	4b05      	ldr	r3, [pc, #20]	; (6aa0 <noise_update(LEDStruct&)+0x70>)
    6a8c:	881b      	ldrh	r3, [r3, #0]
    6a8e:	f8a0 3764 	strh.w	r3, [r0, #1892]	; 0x764
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    6a92:	f7fb bbd3 	b.w	223c <LEDDebug(LEDStruct&)>
    6a96:	bf00      	nop
    6a98:	1fff9e8c 	.word	0x1fff9e8c
    6a9c:	1fff9625 	.word	0x1fff9625
    6aa0:	1fff9526 	.word	0x1fff9526

00006aa4 <noise(LEDStruct&)>:
}

void noise(LEDStruct& leds) {
    6aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    6aa8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
    6aac:	b085      	sub	sp, #20
    6aae:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	d16a      	bne.n	6b8a <noise(LEDStruct&)+0xe6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6ab4:	4d78      	ldr	r5, [pc, #480]	; (6c98 <noise(LEDStruct&)+0x1f4>)
    6ab6:	882b      	ldrh	r3, [r5, #0]
    6ab8:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    6abc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    6ac0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    6ac4:	3619      	adds	r6, #25
    6ac6:	b2b6      	uxth	r6, r6
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6ac8:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    6acc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    6ad0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6ad4:	3219      	adds	r2, #25
    6ad6:	b292      	uxth	r2, r2
    6ad8:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    6adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6ae0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6ae4:	3319      	adds	r3, #25
    6ae6:	b29b      	uxth	r3, r3
    6ae8:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    6aec:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    6af0:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    6af4:	f10e 0e19 	add.w	lr, lr, #25
    6af8:	fa1f fe8e 	uxth.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6afc:	eb0e 204e 	add.w	r0, lr, lr, lsl #9
    6b00:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    6b04:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    6b08:	3019      	adds	r0, #25
    6b0a:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6b0c:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6b10:	f64b 7768 	movw	r7, #49000	; 0xbf68
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6b14:	b2c9      	uxtb	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6b16:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6b1a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6b1e:	fb07 fe0e 	mul.w	lr, r7, lr
    6b22:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6b26:	eb06 2716 	add.w	r7, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6b2a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    6b2e:	f3c2 36cf 	ubfx	r6, r2, #15, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6b32:	8028      	strh	r0, [r5, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6b34:	118a      	asrs	r2, r1, #6
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6b36:	2501      	movs	r5, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6b38:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    6b3c:	f106 010a 	add.w	r1, r6, #10
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6b40:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6b44:	f50e 767a 	add.w	r6, lr, #1000	; 0x3e8
    6b48:	330a      	adds	r3, #10
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6b4a:	3220      	adds	r2, #32
	leds.mode_type			= NOISE;
    6b4c:	f04f 0e1a 	mov.w	lr, #26
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6b50:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    6b54:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.delay_time			= 5;
    6b58:	2505      	movs	r5, #5

	leds.use_full_range		= ufr;
    6b5a:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6b5e:	b289      	uxth	r1, r1
    6b60:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6b62:	b2d2      	uxtb	r2, r2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6b64:	b2b0      	uxth	r0, r6
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    6b66:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    6b6a:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6b6e:	2f00      	cmp	r7, #0
    6b70:	f040 8089 	bne.w	6c86 <noise(LEDStruct&)+0x1e2>
	else				  	 { leds.strip_range = ONE_SIDE; }
    6b74:	254b      	movs	r5, #75	; 0x4b
    6b76:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c

	leds.noise_scale	= s;
    6b7a:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
	leds.noise_yscale	= y;
    6b7e:	f8a4 3762 	strh.w	r3, [r4, #1890]	; 0x762
	leds.noise_dist		= d;
    6b82:	f8a4 0764 	strh.w	r0, [r4, #1892]	; 0x764
	leds.noise_fade		= nf;
    6b86:	f884 2767 	strb.w	r2, [r4, #1895]	; 0x767
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    6b8a:	4b44      	ldr	r3, [pc, #272]	; (6c9c <noise(LEDStruct&)+0x1f8>)
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	2b00      	cmp	r3, #0
    6b90:	d17d      	bne.n	6c8e <noise(LEDStruct&)+0x1ea>

	for (int i = 0; i < leds.strip_range; i++) {
    6b92:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6b96:	b37b      	cbz	r3, 6bf8 <noise(LEDStruct&)+0x154>
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    6b98:	f8df 910c 	ldr.w	r9, [pc, #268]	; 6ca8 <noise(LEDStruct&)+0x204>
    6b9c:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    6ba0:	4625      	mov	r5, r4

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    6ba2:	2600      	movs	r6, #0
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    6ba4:	2701      	movs	r7, #1
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    6ba6:	f8b4 0760 	ldrh.w	r0, [r4, #1888]	; 0x760
    6baa:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    6bae:	fb10 f006 	smulbb	r0, r0, r6
    6bb2:	b280      	uxth	r0, r0
    6bb4:	4401      	add	r1, r0
    6bb6:	b289      	uxth	r1, r1
    6bb8:	f005 fb6c 	bl	c294 <inoise8(unsigned short, unsigned short)>
    6bbc:	fba9 3200 	umull	r3, r2, r9, r0
    6bc0:	eb00 12d2 	add.w	r2, r0, r2, lsr #7
    6bc4:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    6bc8:	9700      	str	r7, [sp, #0]
    6bca:	23ff      	movs	r3, #255	; 0xff
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    6bcc:	f884 2766 	strb.w	r2, [r4, #1894]	; 0x766
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    6bd0:	4641      	mov	r1, r8
    6bd2:	a803      	add	r0, sp, #12
    6bd4:	f004 ffb8 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    6bd8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6bdc:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    6be0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6be4:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    6be6:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    6be8:	70ab      	strb	r3, [r5, #2]

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    6bea:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6bee:	3601      	adds	r6, #1
    6bf0:	42b3      	cmp	r3, r6
    6bf2:	f105 0503 	add.w	r5, r5, #3
    6bf6:	dcd6      	bgt.n	6ba6 <noise(LEDStruct&)+0x102>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bf8:	4b29      	ldr	r3, [pc, #164]	; (6ca0 <noise(LEDStruct&)+0x1fc>)
    6bfa:	681b      	ldr	r3, [r3, #0]
    6bfc:	9303      	str	r3, [sp, #12]
	return ret;
    6bfe:	9803      	ldr	r0, [sp, #12]
    6c00:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    6c04:	fb03 f000 	mul.w	r0, r3, r0
    6c08:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    6c0a:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6c0c:	0659      	lsls	r1, r3, #25
    6c0e:	d535      	bpl.n	6c7c <noise(LEDStruct&)+0x1d8>
        offset = (uint8_t)255 - offset;
    6c10:	43db      	mvns	r3, r3
    6c12:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6c14:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    6c18:	1c5a      	adds	r2, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6c1a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    6c1e:	110b      	asrs	r3, r1, #4
    6c20:	4920      	ldr	r1, [pc, #128]	; (6ca4 <noise(LEDStruct&)+0x200>)
    6c22:	005b      	lsls	r3, r3, #1
    6c24:	18cd      	adds	r5, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6c26:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6c28:	7869      	ldrb	r1, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6c2a:	fb11 f202 	smulbb	r2, r1, r2
    6c2e:	eb03 1322 	add.w	r3, r3, r2, asr #4
    6c32:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6c34:	0602      	lsls	r2, r0, #24
    6c36:	bf48      	it	mi
    6c38:	425b      	negmi	r3, r3
    6c3a:	b25b      	sxtb	r3, r3

    y += 128;
    6c3c:	3b80      	subs	r3, #128	; 0x80
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    6c3e:	f8b4 2764 	ldrh.w	r2, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    6c42:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    6c46:	f3c3 1381 	ubfx	r3, r3, #6, #2
    6c4a:	3301      	adds	r3, #1
    6c4c:	4413      	add	r3, r2
    6c4e:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    6c52:	b981      	cbnz	r1, 6c76 <noise(LEDStruct&)+0x1d2>
    6c54:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    6c58:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6c5a:	781a      	ldrb	r2, [r3, #0]
    6c5c:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    6c60:	785a      	ldrb	r2, [r3, #1]
    6c62:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    6c66:	789a      	ldrb	r2, [r3, #2]
    6c68:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    6c6c:	3303      	adds	r3, #3
    6c6e:	4299      	cmp	r1, r3
    6c70:	f1a4 0403 	sub.w	r4, r4, #3
    6c74:	d1f1      	bne.n	6c5a <noise(LEDStruct&)+0x1b6>
}
    6c76:	b005      	add	sp, #20
    6c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6c7c:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6c80:	f003 020f 	and.w	r2, r3, #15
    6c84:	e7cb      	b.n	6c1e <noise(LEDStruct&)+0x17a>
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6c86:	2596      	movs	r5, #150	; 0x96
    6c88:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    6c8c:	e775      	b.n	6b7a <noise(LEDStruct&)+0xd6>
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    6c8e:	4620      	mov	r0, r4
    6c90:	f7ff fece 	bl	6a30 <noise_update(LEDStruct&)>
    6c94:	e77d      	b.n	6b92 <noise(LEDStruct&)+0xee>
    6c96:	bf00      	nop
    6c98:	1fff8788 	.word	0x1fff8788
    6c9c:	1fff9625 	.word	0x1fff9625
    6ca0:	1fffb19c 	.word	0x1fffb19c
    6ca4:	000112bc 	.word	0x000112bc
    6ca8:	80808081 	.word	0x80808081

00006cac <noise_mover(LEDStruct&)>:

	if (!leds.use_full_range) { strip_sync(leds); }
}


void noise_mover(LEDStruct& leds) {
    6cac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    6cae:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e

	if (!leds.use_full_range) { strip_sync(leds); }
}


void noise_mover(LEDStruct& leds) {
    6cb2:	b085      	sub	sp, #20
    6cb4:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	d16a      	bne.n	6d90 <noise_mover(LEDStruct&)+0xe4>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6cba:	4d7e      	ldr	r5, [pc, #504]	; (6eb4 <noise_mover(LEDStruct&)+0x208>)
    6cbc:	882b      	ldrh	r3, [r5, #0]
    6cbe:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    6cc2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    6cc6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    6cca:	3619      	adds	r6, #25
    6ccc:	b2b6      	uxth	r6, r6
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6cce:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    6cd2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    6cd6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6cda:	3219      	adds	r2, #25
    6cdc:	b292      	uxth	r2, r2
    6cde:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    6ce2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6ce6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6cea:	3319      	adds	r3, #25
    6cec:	b29b      	uxth	r3, r3
    6cee:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    6cf2:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    6cf6:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    6cfa:	f10e 0e19 	add.w	lr, lr, #25
    6cfe:	fa1f fe8e 	uxth.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6d02:	eb0e 204e 	add.w	r0, lr, lr, lsl #9
    6d06:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    6d0a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    6d0e:	3019      	adds	r0, #25
    6d10:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6d12:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6d16:	f64b 7768 	movw	r7, #49000	; 0xbf68
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6d1a:	b2c9      	uxtb	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6d1c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6d20:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6d24:	fb07 fe0e 	mul.w	lr, r7, lr
    6d28:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6d2c:	eb06 2716 	add.w	r7, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6d30:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    6d34:	f3c2 36cf 	ubfx	r6, r2, #15, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6d38:	8028      	strh	r0, [r5, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6d3a:	118a      	asrs	r2, r1, #6
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6d3c:	2501      	movs	r5, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6d3e:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    6d42:	f106 010a 	add.w	r1, r6, #10
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6d46:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6d4a:	f50e 767a 	add.w	r6, lr, #1000	; 0x3e8
    6d4e:	330a      	adds	r3, #10
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6d50:	3220      	adds	r2, #32
	leds.mode_type			= NOISE;
    6d52:	f04f 0e1a 	mov.w	lr, #26
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6d56:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    6d5a:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.delay_time			= 5;
    6d5e:	2505      	movs	r5, #5

	leds.use_full_range		= ufr;
    6d60:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6d64:	b289      	uxth	r1, r1
    6d66:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6d68:	b2d2      	uxtb	r2, r2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6d6a:	b2b0      	uxth	r0, r6
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    6d6c:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    6d70:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6d74:	2f00      	cmp	r7, #0
    6d76:	f040 8094 	bne.w	6ea2 <noise_mover(LEDStruct&)+0x1f6>
	else				  	 { leds.strip_range = ONE_SIDE; }
    6d7a:	254b      	movs	r5, #75	; 0x4b
    6d7c:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c

	leds.noise_scale	= s;
    6d80:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
	leds.noise_yscale	= y;
    6d84:	f8a4 3762 	strh.w	r3, [r4, #1890]	; 0x762
	leds.noise_dist		= d;
    6d88:	f8a4 0764 	strh.w	r0, [r4, #1892]	; 0x764
	leds.noise_fade		= nf;
    6d8c:	f884 2767 	strb.w	r2, [r4, #1895]	; 0x767
}


void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    6d90:	4b49      	ldr	r3, [pc, #292]	; (6eb8 <noise_mover(LEDStruct&)+0x20c>)
    6d92:	781b      	ldrb	r3, [r3, #0]
    6d94:	2b00      	cmp	r3, #0
    6d96:	f040 8088 	bne.w	6eaa <noise_mover(LEDStruct&)+0x1fe>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
    6d9a:	f894 2767 	ldrb.w	r2, [r4, #1895]	; 0x767
    6d9e:	2196      	movs	r1, #150	; 0x96
    6da0:	4620      	mov	r0, r4
    6da2:	f004 fe71 	bl	ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
    6da6:	f8b4 3762 	ldrh.w	r3, [r4, #1890]	; 0x762
    6daa:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    6dae:	f8b4 0760 	ldrh.w	r0, [r4, #1888]	; 0x760
    6db2:	4419      	add	r1, r3
    6db4:	b289      	uxth	r1, r1
    6db6:	f005 fa6d 	bl	c294 <inoise8(unsigned short, unsigned short)>
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    6dba:	4a40      	ldr	r2, [pc, #256]	; (6ebc <noise_mover(LEDStruct&)+0x210>)
    6dbc:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6dc0:	fba2 1500 	umull	r1, r5, r2, r0
    6dc4:	eb00 10d5 	add.w	r0, r0, r5, lsr #7
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    6dc8:	2bfe      	cmp	r3, #254	; 0xfe
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    6dca:	f000 05ff 	and.w	r5, r0, #255	; 0xff
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    6dce:	dc5f      	bgt.n	6e90 <noise_mover(LEDStruct&)+0x1e4>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    6dd0:	fb03 5305 	mla	r3, r3, r5, r5
    6dd4:	121d      	asrs	r5, r3, #8
	uint8_t pixlen = map(locn, 0, 255, 0, leds.strip_range);     
	leds.led_data[pixlen] = ColorFromPalette(leds.current_palette, pixlen, 255, LINEARBLEND);   
    6dd6:	b2ed      	uxtb	r5, r5
    6dd8:	2301      	movs	r3, #1
    6dda:	462a      	mov	r2, r5
    6ddc:	9300      	str	r3, [sp, #0]
    6dde:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    6de2:	23ff      	movs	r3, #255	; 0xff
    6de4:	a803      	add	r0, sp, #12
    6de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6dea:	f004 fead 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6dee:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6df2:	5563      	strb	r3, [r4, r5]
    6df4:	4425      	add	r5, r4
        g = rhs.g;
    6df6:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    6dfa:	f89d 200e 	ldrb.w	r2, [sp, #14]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6dfe:	4b30      	ldr	r3, [pc, #192]	; (6ec0 <noise_mover(LEDStruct&)+0x214>)

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    6e00:	7069      	strb	r1, [r5, #1]
        b = rhs.b;
    6e02:	70aa      	strb	r2, [r5, #2]
    6e04:	681b      	ldr	r3, [r3, #0]
    6e06:	9303      	str	r3, [sp, #12]
	return ret;
    6e08:	9903      	ldr	r1, [sp, #12]
    6e0a:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    6e0e:	fb03 f101 	mul.w	r1, r3, r1
    6e12:	0e09      	lsrs	r1, r1, #24
    6e14:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6e16:	0658      	lsls	r0, r3, #25
    6e18:	d535      	bpl.n	6e86 <noise_mover(LEDStruct&)+0x1da>
        offset = (uint8_t)255 - offset;
    6e1a:	43db      	mvns	r3, r3
    6e1c:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6e1e:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    6e22:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6e24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    6e28:	4826      	ldr	r0, [pc, #152]	; (6ec4 <noise_mover(LEDStruct&)+0x218>)
    6e2a:	1112      	asrs	r2, r2, #4
    6e2c:	0052      	lsls	r2, r2, #1
    6e2e:	1885      	adds	r5, r0, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6e30:	5c82      	ldrb	r2, [r0, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6e32:	7868      	ldrb	r0, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6e34:	fb10 f303 	smulbb	r3, r0, r3
    6e38:	eb02 1323 	add.w	r3, r2, r3, asr #4
    6e3c:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6e3e:	060a      	lsls	r2, r1, #24
    6e40:	bf48      	it	mi
    6e42:	425b      	negmi	r3, r3
    6e44:	b25b      	sxtb	r3, r3

    y += 128;
    6e46:	3b80      	subs	r3, #128	; 0x80

	leds.noise_dist += beatsin8(10, 1, 4);
    6e48:	f8b4 2764 	ldrh.w	r2, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    6e4c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
	uint8_t pixlen = map(locn, 0, 255, 0, leds.strip_range);     
	leds.led_data[pixlen] = ColorFromPalette(leds.current_palette, pixlen, 255, LINEARBLEND);   

	leds.noise_dist += beatsin8(10, 1, 4);
    6e50:	f3c3 1381 	ubfx	r3, r3, #6, #2
    6e54:	3301      	adds	r3, #1
    6e56:	4413      	add	r3, r2
    6e58:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    6e5c:	b989      	cbnz	r1, 6e82 <noise_mover(LEDStruct&)+0x1d6>
    6e5e:	4620      	mov	r0, r4
    6e60:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    6e64:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6e66:	781a      	ldrb	r2, [r3, #0]
    6e68:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    6e6c:	785a      	ldrb	r2, [r3, #1]
    6e6e:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    6e72:	789a      	ldrb	r2, [r3, #2]
    6e74:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    6e78:	3303      	adds	r3, #3
    6e7a:	4299      	cmp	r1, r3
    6e7c:	f1a0 0003 	sub.w	r0, r0, #3
    6e80:	d1f1      	bne.n	6e66 <noise_mover(LEDStruct&)+0x1ba>
}
    6e82:	b005      	add	sp, #20
    6e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6e8a:	f003 030f 	and.w	r3, r3, #15
    6e8e:	e7cb      	b.n	6e28 <noise_mover(LEDStruct&)+0x17c>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6e90:	fb03 f305 	mul.w	r3, r3, r5
    6e94:	fb82 2503 	smull	r2, r5, r2, r3
    6e98:	441d      	add	r5, r3
    6e9a:	17db      	asrs	r3, r3, #31
    6e9c:	ebc3 15e5 	rsb	r5, r3, r5, asr #7
    6ea0:	e799      	b.n	6dd6 <noise_mover(LEDStruct&)+0x12a>
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6ea2:	2596      	movs	r5, #150	; 0x96
    6ea4:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    6ea8:	e76a      	b.n	6d80 <noise_mover(LEDStruct&)+0xd4>
}


void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    6eaa:	4620      	mov	r0, r4
    6eac:	f7ff fdc0 	bl	6a30 <noise_update(LEDStruct&)>
    6eb0:	e773      	b.n	6d9a <noise_mover(LEDStruct&)+0xee>
    6eb2:	bf00      	nop
    6eb4:	1fff8788 	.word	0x1fff8788
    6eb8:	1fff9625 	.word	0x1fff9625
    6ebc:	80808081 	.word	0x80808081
    6ec0:	1fffb19c 	.word	0x1fffb19c
    6ec4:	000112bc 	.word	0x000112bc

00006ec8 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    6ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ecc:	4607      	mov	r7, r0
    6ece:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6ed0:	f8b0 033c 	ldrh.w	r0, [r0, #828]	; 0x33c
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    6ed4:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    6ed8:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    6edc:	9102      	str	r1, [sp, #8]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6ede:	2800      	cmp	r0, #0
    6ee0:	d06e      	beq.n	6fc0 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf8>
    6ee2:	085b      	lsrs	r3, r3, #1
    6ee4:	f103 0a14 	add.w	sl, r3, #20
    6ee8:	f10a 0301 	add.w	r3, sl, #1
    6eec:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 6fc8 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x100>
    6ef0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 6fcc <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x104>
    6ef4:	9303      	str	r3, [sp, #12]
    6ef6:	4614      	mov	r4, r2
    6ef8:	2600      	movs	r6, #0
        waveangle += 250;
    6efa:	35fa      	adds	r5, #250	; 0xfa
    6efc:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6efe:	046a      	lsls	r2, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6f00:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6f04:	d503      	bpl.n	6f0e <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x46>
    6f06:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6f0a:	3307      	adds	r3, #7
    6f0c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6f0e:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6f10:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6f14:	f819 0001 	ldrb.w	r0, [r9, r1]
    6f18:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
    6f1c:	fb00 3302 	mla	r3, r0, r2, r3
    6f20:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6f22:	0428      	lsls	r0, r5, #16
    6f24:	bf48      	it	mi
    6f26:	425b      	negmi	r3, r3
    6f28:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    6f2a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6f2e:	9a03      	ldr	r2, [sp, #12]
    6f30:	b29b      	uxth	r3, r3
    6f32:	fb02 f303 	mul.w	r3, r2, r3
    6f36:	eb0a 4313 	add.w	r3, sl, r3, lsr #16
    6f3a:	441c      	add	r4, r3
    6f3c:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6f3e:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6f40:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6f44:	d503      	bpl.n	6f4e <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x86>
    6f46:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6f4a:	3307      	adds	r3, #7
    6f4c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6f4e:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6f50:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6f54:	f819 0001 	ldrb.w	r0, [r9, r1]
    6f58:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    6f5c:	9902      	ldr	r1, [sp, #8]
    6f5e:	fb00 3302 	mla	r3, r0, r2, r3
    6f62:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6f64:	0422      	lsls	r2, r4, #16
    6f66:	bf48      	it	mi
    6f68:	425b      	negmi	r3, r3
    6f6a:	b21b      	sxth	r3, r3
    6f6c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6f70:	b29b      	uxth	r3, r3
    6f72:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    6f76:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    6f7a:	2301      	movs	r3, #1
    6f7c:	9300      	str	r3, [sp, #0]
    6f7e:	a805      	add	r0, sp, #20
    6f80:	465b      	mov	r3, fp
    6f82:	f3c2 4207 	ubfx	r2, r2, #16, #8
    6f86:	f004 fddf 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    6f8a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    6f8e:	18b9      	adds	r1, r7, r2
    6f90:	5cbb      	ldrb	r3, [r7, r2]
    6f92:	f89d 0014 	ldrb.w	r0, [sp, #20]
    6f96:	fa83 f350 	uqadd8	r3, r3, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    6f9a:	54bb      	strb	r3, [r7, r2]
    6f9c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6fa0:	784a      	ldrb	r2, [r1, #1]
    6fa2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    6fa6:	704a      	strb	r2, [r1, #1]
    6fa8:	788b      	ldrb	r3, [r1, #2]
    6faa:	f89d 2016 	ldrb.w	r2, [sp, #22]
    6fae:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    6fb2:	708b      	strb	r3, [r1, #2]
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6fb4:	3601      	adds	r6, #1
    6fb6:	f8b7 333c 	ldrh.w	r3, [r7, #828]	; 0x33c
    6fba:	b2b6      	uxth	r6, r6
    6fbc:	42b3      	cmp	r3, r6
    6fbe:	d89c      	bhi.n	6efa <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x32>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds.led_data[i] += c;
    }
}
    6fc0:	b007      	add	sp, #28
    6fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fc6:	bf00      	nop
    6fc8:	00011854 	.word	0x00011854
    6fcc:	0001111c 	.word	0x0001111c

00006fd0 <pacifica_add_whitecaps(LEDStruct&)>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps(LEDStruct& leds)
{
    6fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6fd4:	4c58      	ldr	r4, [pc, #352]	; (7138 <pacifica_add_whitecaps(LEDStruct&)+0x168>)
    6fd6:	b083      	sub	sp, #12
    6fd8:	6823      	ldr	r3, [r4, #0]
    6fda:	9301      	str	r3, [sp, #4]
	return ret;
    6fdc:	9901      	ldr	r1, [sp, #4]
    6fde:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6fe2:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
    6fe6:	f3c1 3147 	ubfx	r1, r1, #13, #8
    6fea:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6fec:	065e      	lsls	r6, r3, #25
    6fee:	f140 809e 	bpl.w	712e <pacifica_add_whitecaps(LEDStruct&)+0x15e>
        offset = (uint8_t)255 - offset;
    6ff2:	43db      	mvns	r3, r3
    6ff4:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6ff6:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    6ffa:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6ffc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7000:	f8df a138 	ldr.w	sl, [pc, #312]	; 713c <pacifica_add_whitecaps(LEDStruct&)+0x16c>
    7004:	1112      	asrs	r2, r2, #4
    7006:	0052      	lsls	r2, r2, #1
    7008:	eb0a 0502 	add.w	r5, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    700c:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7010:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7012:	fb15 f303 	smulbb	r3, r5, r3
    7016:	eb02 1323 	add.w	r3, r2, r3, asr #4
    701a:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    701c:	060d      	lsls	r5, r1, #24
    701e:	bf48      	it	mi
    7020:	425b      	negmi	r3, r3
    7022:	b25b      	sxtb	r3, r3

    y += 128;
    7024:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    7026:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7028:	6822      	ldr	r2, [r4, #0]
    702a:	9200      	str	r2, [sp, #0]
    702c:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    7030:	eb03 0949 	add.w	r9, r3, r9, lsl #1
	return ret;
    7034:	9c00      	ldr	r4, [sp, #0]
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    7036:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    703a:	ea4f 2929 	mov.w	r9, r9, asr #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    703e:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    7042:	f109 0937 	add.w	r9, r9, #55	; 0x37
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    7046:	fb02 f404 	mul.w	r4, r2, r4
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    704a:	fa5f f989 	uxtb.w	r9, r9
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    704e:	0e24      	lsrs	r4, r4, #24
    7050:	2b00      	cmp	r3, #0
    7052:	d069      	beq.n	7128 <pacifica_add_whitecaps(LEDStruct&)+0x158>
    7054:	ebc3 0bc3 	rsb	fp, r3, r3, lsl #3
    7058:	44a3      	add	fp, r4
    705a:	43e7      	mvns	r7, r4
    705c:	fa5f fb8b 	uxtb.w	fp, fp
    7060:	f100 0801 	add.w	r8, r0, #1
    7064:	b2ff      	uxtb	r7, r7
    7066:	e058      	b.n	711a <pacifica_add_whitecaps(LEDStruct&)+0x14a>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7068:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    706c:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    706e:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7072:	1112      	asrs	r2, r2, #4
    7074:	0052      	lsls	r2, r2, #1
    7076:	eb0a 0102 	add.w	r1, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    707a:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    707e:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    7080:	f818 ec01 	ldrb.w	lr, [r8, #-1]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    7084:	7886      	ldrb	r6, [r0, #2]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7086:	fb11 f303 	smulbb	r3, r1, r3
    708a:	eb02 1323 	add.w	r3, r2, r3, asr #4
    708e:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    7090:	0622      	lsls	r2, r4, #24
    7092:	7842      	ldrb	r2, [r0, #1]
    7094:	bf48      	it	mi
    7096:	425b      	negmi	r3, r3
    7098:	fa0f fc8e 	sxth.w	ip, lr
    709c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    70a0:	b25b      	sxtb	r3, r3
    70a2:	eb01 1101 	add.w	r1, r1, r1, lsl #4

    y += 128;
    70a6:	3b80      	subs	r3, #128	; 0x80
    70a8:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    70ac:	440a      	add	r2, r1
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
    70ae:	b2db      	uxtb	r3, r3
    70b0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    70b4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    70b8:	1212      	asrs	r2, r2, #8
    70ba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    70be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    70c2:	4465      	add	r5, ip
    70c4:	eb02 2525 	add.w	r5, r2, r5, asr #8
    70c8:	440e      	add	r6, r1
    70ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    70ce:	eb09 2323 	add.w	r3, r9, r3, asr #8
    70d2:	eb05 2626 	add.w	r6, r5, r6, asr #8
    70d6:	b2db      	uxtb	r3, r3
    70d8:	b2f6      	uxtb	r6, r6
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    70da:	1af2      	subs	r2, r6, r3
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    70dc:	3407      	adds	r4, #7
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    70de:	b2d2      	uxtb	r2, r2

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    70e0:	42b3      	cmp	r3, r6
    70e2:	4611      	mov	r1, r2
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    70e4:	b2e4      	uxtb	r4, r4
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    70e6:	d210      	bcs.n	710a <pacifica_add_whitecaps(LEDStruct&)+0x13a>
    70e8:	fa81 f152 	uqadd8	r1, r1, r2
    70ec:	460d      	mov	r5, r1
    70ee:	fa85 f551 	uqadd8	r5, r5, r1
    70f2:	fa8e fe52 	uqadd8	lr, lr, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    70f6:	f808 ec01 	strb.w	lr, [r8, #-1]
    70fa:	7842      	ldrb	r2, [r0, #1]
    70fc:	fa82 f251 	uqadd8	r2, r2, r1
    7100:	7883      	ldrb	r3, [r0, #2]
        g = qadd8( g, rhs.g);
    7102:	7042      	strb	r2, [r0, #1]
    7104:	fa83 f355 	uqadd8	r3, r3, r5
        b = qadd8( b, rhs.b);
    7108:	7083      	strb	r3, [r0, #2]
    710a:	3f07      	subs	r7, #7
void pacifica_add_whitecaps(LEDStruct& leds)
{
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    710c:	455c      	cmp	r4, fp
    710e:	b2ff      	uxtb	r7, r7
    7110:	f100 0003 	add.w	r0, r0, #3
    7114:	f108 0803 	add.w	r8, r8, #3
    7118:	d006      	beq.n	7128 <pacifica_add_whitecaps(LEDStruct&)+0x158>
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    711a:	0661      	lsls	r1, r4, #25
    711c:	d4a4      	bmi.n	7068 <pacifica_add_whitecaps(LEDStruct&)+0x98>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    711e:	f004 023f 	and.w	r2, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7122:	f004 030f 	and.w	r3, r4, #15
    7126:	e7a4      	b.n	7072 <pacifica_add_whitecaps(LEDStruct&)+0xa2>
            uint8_t overage = l - threshold;
            uint8_t overage2 = qadd8(overage, overage);
            leds.led_data[i] += CRGB(overage, overage2, qadd8(overage2, overage2));
        }
    }
}
    7128:	b003      	add	sp, #12
    712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    712e:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7132:	f003 030f 	and.w	r3, r3, #15
    7136:	e763      	b.n	7000 <pacifica_add_whitecaps(LEDStruct&)+0x30>
    7138:	1fffb19c 	.word	0x1fffb19c
    713c:	000112bc 	.word	0x000112bc

00007140 <pacifica_deepen_colors(LEDStruct&)>:

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    7140:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    7144:	b383      	cbz	r3, 71a8 <pacifica_deepen_colors(LEDStruct&)+0x68>
    }
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    7146:	b5f0      	push	{r4, r5, r6, r7, lr}
    7148:	1e5c      	subs	r4, r3, #1
    714a:	b2a4      	uxth	r4, r4
    714c:	3401      	adds	r4, #1
    714e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7152:	4602      	mov	r2, r0
    7154:	4404      	add	r4, r0
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    7156:	2702      	movs	r7, #2
    7158:	3002      	adds	r0, #2
        if( rhs.g > g) g = rhs.g;
    715a:	2605      	movs	r6, #5
        if( rhs.b > b) b = rhs.b;
    715c:	2507      	movs	r5, #7
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    715e:	7853      	ldrb	r3, [r2, #1]
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    7160:	7891      	ldrb	r1, [r2, #2]
    7162:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
    7166:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    716a:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    716e:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    7172:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    7176:	f3c3 2307 	ubfx	r3, r3, #8, #8
    717a:	11c9      	asrs	r1, r1, #7
        leds.led_data[i].green = scale8(leds.led_data[i].green, 200);
    717c:	7053      	strb	r3, [r2, #1]

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    717e:	7091      	strb	r1, [r2, #2]
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    7180:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    7184:	2901      	cmp	r1, #1
    7186:	bf9c      	itt	ls
    7188:	f800 7c02 	strbls.w	r7, [r0, #-2]
    718c:	7853      	ldrbls	r3, [r2, #1]
        if( rhs.g > g) g = rhs.g;
    718e:	2b04      	cmp	r3, #4
        if( rhs.b > b) b = rhs.b;
    7190:	7893      	ldrb	r3, [r2, #2]

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
        if( rhs.g > g) g = rhs.g;
    7192:	bf98      	it	ls
    7194:	7056      	strbls	r6, [r2, #1]
        if( rhs.b > b) b = rhs.b;
    7196:	2b06      	cmp	r3, #6
    7198:	bf98      	it	ls
    719a:	7095      	strbls	r5, [r2, #2]
    719c:	3203      	adds	r2, #3
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    719e:	42a2      	cmp	r2, r4
    71a0:	f100 0003 	add.w	r0, r0, #3
    71a4:	d1db      	bne.n	715e <pacifica_deepen_colors(LEDStruct&)+0x1e>
    71a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71a8:	4770      	bx	lr
    71aa:	bf00      	nop

000071ac <pacifica_update(LEDStruct&)>:
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    switch (update_var) {
    71ac:	4b0a      	ldr	r3, [pc, #40]	; (71d8 <pacifica_update(LEDStruct&)+0x2c>)
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    71ae:	4a0b      	ldr	r2, [pc, #44]	; (71dc <pacifica_update(LEDStruct&)+0x30>)
    switch (update_var) {
    71b0:	781b      	ldrb	r3, [r3, #0]
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    71b2:	2100      	movs	r1, #0
    71b4:	7011      	strb	r1, [r2, #0]
    switch (update_var) {
    71b6:	b963      	cbnz	r3, 71d2 <pacifica_update(LEDStruct&)+0x26>
    case 0:															//a
        leds.use_full_range = (bool)update_arg;
    71b8:	4b09      	ldr	r3, [pc, #36]	; (71e0 <pacifica_update(LEDStruct&)+0x34>)
    71ba:	881b      	ldrh	r3, [r3, #0]
    71bc:	428b      	cmp	r3, r1
    71be:	bf14      	ite	ne
    71c0:	2301      	movne	r3, #1
    71c2:	460b      	moveq	r3, r1
    71c4:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
        if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    71c8:	bf14      	ite	ne
    71ca:	2396      	movne	r3, #150	; 0x96
        else                     { leds.strip_range = ONE_SIDE; }
    71cc:	234b      	moveq	r3, #75	; 0x4b
    71ce:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
        break;
    default:	break;
    }
    LEDDebug(leds);
    71d2:	f7fb b833 	b.w	223c <LEDDebug(LEDStruct&)>
    71d6:	bf00      	nop
    71d8:	1fff9e8c 	.word	0x1fff9e8c
    71dc:	1fff9625 	.word	0x1fff9625
    71e0:	1fff9526 	.word	0x1fff9526

000071e4 <pride(LEDStruct&)>:
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    71e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    71e8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    71ec:	b08b      	sub	sp, #44	; 0x2c
    71ee:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { pride_init(leds); }
    71f0:	bb0b      	cbnz	r3, 7236 <pride(LEDStruct&)+0x52>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    71f2:	49b4      	ldr	r1, [pc, #720]	; (74c4 <pride(LEDStruct&)+0x2e0>)
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PRIDE;
	leds.use_palette		= 0;
    71f4:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    71f8:	880b      	ldrh	r3, [r1, #0]
    71fa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    71fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7202:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    7206:	3319      	adds	r3, #25
    7208:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    720a:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    720e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    7212:	2601      	movs	r6, #1
	leds.mode_type			= PRIDE;
    7214:	2513      	movs	r5, #19
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    7216:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7218:	800b      	strh	r3, [r1, #0]

	leds.use_full_range		= ufr;
    721a:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    721e:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
	leds.mode_type			= PRIDE;
    7222:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    7226:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    722a:	2a00      	cmp	r2, #0
    722c:	f000 81d3 	beq.w	75d6 <pride(LEDStruct&)+0x3f2>
    7230:	2396      	movs	r3, #150	; 0x96
    7232:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    7236:	4ba4      	ldr	r3, [pc, #656]	; (74c8 <pride(LEDStruct&)+0x2e4>)
    7238:	781b      	ldrb	r3, [r3, #0]
    723a:	2b00      	cmp	r3, #0
    723c:	f040 81d3 	bne.w	75e6 <pride(LEDStruct&)+0x402>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7240:	49a2      	ldr	r1, [pc, #648]	; (74cc <pride(LEDStruct&)+0x2e8>)
    7242:	680b      	ldr	r3, [r1, #0]
    7244:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    7246:	9809      	ldr	r0, [sp, #36]	; 0x24
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7248:	f645 7328 	movw	r3, #24360	; 0x5f28
    724c:	fb03 f000 	mul.w	r0, r3, r0
    7250:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7252:	0442      	lsls	r2, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7254:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7258:	d503      	bpl.n	7262 <pride(LEDStruct&)+0x7e>
    725a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    725e:	3307      	adds	r3, #7
    7260:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7262:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    7264:	4d9a      	ldr	r5, [pc, #616]	; (74d0 <pride(LEDStruct&)+0x2ec>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7266:	4e9b      	ldr	r6, [pc, #620]	; (74d4 <pride(LEDStruct&)+0x2f0>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7268:	f815 e002 	ldrb.w	lr, [r5, r2]
    726c:	f836 7012 	ldrh.w	r7, [r6, r2, lsl #1]
    7270:	f3c3 0246 	ubfx	r2, r3, #1, #7
    7274:	fb0e 7302 	mla	r3, lr, r2, r7
    7278:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    727a:	0407      	lsls	r7, r0, #16
    727c:	bf48      	it	mi
    727e:	425b      	negmi	r3, r3
    7280:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7282:	680a      	ldr	r2, [r1, #0]
    7284:	9208      	str	r2, [sp, #32]

	leds.sat8 = beatsin88(87, 220, 250);
    7286:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    728a:	b29b      	uxth	r3, r3
    728c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
	return ret;
    7290:	9f08      	ldr	r7, [sp, #32]
    7292:	4b91      	ldr	r3, [pc, #580]	; (74d8 <pride(LEDStruct&)+0x2f4>)
    7294:	0c12      	lsrs	r2, r2, #16
    7296:	fb03 f707 	mul.w	r7, r3, r7
    729a:	0c3f      	lsrs	r7, r7, #16
    729c:	32dc      	adds	r2, #220	; 0xdc
    729e:	b2d2      	uxtb	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    72a0:	0478      	lsls	r0, r7, #17
    72a2:	f884 2325 	strb.w	r2, [r4, #805]	; 0x325
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    72a6:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    72aa:	d503      	bpl.n	72b4 <pride(LEDStruct&)+0xd0>
    72ac:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    72b0:	3307      	adds	r3, #7
    72b2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    72b4:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    72b8:	f3c3 0046 	ubfx	r0, r3, #1, #7
    72bc:	f815 c00e 	ldrb.w	ip, [r5, lr]
    72c0:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    72c4:	fb0c 3300 	mla	r3, ip, r0, r3
    72c8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    72ca:	0438      	lsls	r0, r7, #16
    72cc:	bf48      	it	mi
    72ce:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    72d0:	6808      	ldr	r0, [r1, #0]
    72d2:	9007      	str	r0, [sp, #28]
    72d4:	b21b      	sxth	r3, r3
	leds.brightdepth = beatsin88(341, 96, 224);
    72d6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    72da:	b29b      	uxth	r3, r3
	return ret;
    72dc:	9f07      	ldr	r7, [sp, #28]
    72de:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    72e2:	f64d 6308 	movw	r3, #56840	; 0xde08
    72e6:	fb03 fe07 	mul.w	lr, r3, r7
    72ea:	0c00      	lsrs	r0, r0, #16
    72ec:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    72f0:	3060      	adds	r0, #96	; 0x60
    72f2:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    72f4:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    72f8:	f884 0322 	strb.w	r0, [r4, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    72fc:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7300:	d003      	beq.n	730a <pride(LEDStruct&)+0x126>
    7302:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7306:	3307      	adds	r3, #7
    7308:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    730a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    730e:	f3c3 0746 	ubfx	r7, r3, #1, #7
    7312:	f815 800c 	ldrb.w	r8, [r5, ip]
    7316:	f836 301c 	ldrh.w	r3, [r6, ip, lsl #1]
    731a:	fb08 3307 	mla	r3, r8, r7, r3

    if( theta & 0x8000 ) y = -y;
    731e:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7322:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7324:	bf18      	it	ne
    7326:	425b      	negne	r3, r3
    7328:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    732a:	680f      	ldr	r7, [r1, #0]
    732c:	9706      	str	r7, [sp, #24]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    732e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7332:	b29b      	uxth	r3, r3
    7334:	ebc3 1e03 	rsb	lr, r3, r3, lsl #4
	return ret;
    7338:	9f06      	ldr	r7, [sp, #24]
    733a:	eb03 2e0e 	add.w	lr, r3, lr, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    733e:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    7342:	fb03 fc07 	mul.w	ip, r3, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7346:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    734a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    734e:	f50e 5ec8 	add.w	lr, lr, #6400	; 0x1900
    7352:	fa1f f78e 	uxth.w	r7, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7356:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    735a:	f8a4 7328 	strh.w	r7, [r4, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    735e:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7362:	d003      	beq.n	736c <pride(LEDStruct&)+0x188>
    7364:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7368:	3307      	adds	r3, #7
    736a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    736c:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7370:	f3c3 0e46 	ubfx	lr, r3, #1, #7
    7374:	f815 9008 	ldrb.w	r9, [r5, r8]
    7378:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    737c:	fb09 330e 	mla	r3, r9, lr, r3
    7380:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7382:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    7386:	bf18      	it	ne
    7388:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    738a:	f8d1 e000 	ldr.w	lr, [r1]
    738e:	f8cd e014 	str.w	lr, [sp, #20]
    7392:	b21b      	sxth	r3, r3
    7394:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7398:	b29b      	uxth	r3, r3
    739a:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    739e:	f8dd 8014 	ldr.w	r8, [sp, #20]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    73a2:	f8b4 9320 	ldrh.w	r9, [r4, #800]	; 0x320
    73a6:	f8a4 932a 	strh.w	r9, [r4, #810]	; 0x32a
    73aa:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    73ae:	f647 3398 	movw	r3, #31640	; 0x7b98
    73b2:	fb03 f808 	mul.w	r8, r3, r8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    73b6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    73ba:	ea4f 4818 	mov.w	r8, r8, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    73be:	f10e 0e17 	add.w	lr, lr, #23
    73c2:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    73c6:	f418 4f80 	tst.w	r8, #16384	; 0x4000
	if (keyboard_update) { pride_update(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    73ca:	f884 e323 	strb.w	lr, [r4, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    73ce:	f3c8 03ca 	ubfx	r3, r8, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    73d2:	d003      	beq.n	73dc <pride(LEDStruct&)+0x1f8>
    73d4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    73d8:	3307      	adds	r3, #7
    73da:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    73dc:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    73e0:	f3c3 0c46 	ubfx	ip, r3, #1, #7
    73e4:	f815 b00a 	ldrb.w	fp, [r5, sl]
    73e8:	f836 301a 	ldrh.w	r3, [r6, sl, lsl #1]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    73ec:	f8b4 a31e 	ldrh.w	sl, [r4, #798]	; 0x31e
    73f0:	fb0b 330c 	mla	r3, fp, ip, r3
    73f4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    73f6:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    73fa:	bf18      	it	ne
    73fc:	425b      	negne	r3, r3
    73fe:	fa0f fc83 	sxth.w	ip, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7402:	680b      	ldr	r3, [r1, #0]
    7404:	9303      	str	r3, [sp, #12]
	return ret;
    7406:	9b03      	ldr	r3, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7408:	6809      	ldr	r1, [r1, #0]
    740a:	9104      	str	r1, [sp, #16]
    740c:	f5ac 4100 	sub.w	r1, ip, #32768	; 0x8000
    7410:	b289      	uxth	r1, r1
    7412:	f640 3cb8 	movw	ip, #3000	; 0xbb8
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    7416:	fa1f f883 	uxth.w	r8, r3
	return ret;
    741a:	f8dd b010 	ldr.w	fp, [sp, #16]
    741e:	f8a4 832e 	strh.w	r8, [r4, #814]	; 0x32e
    7422:	fb0c f301 	mul.w	r3, ip, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7426:	492d      	ldr	r1, [pc, #180]	; (74dc <pride(LEDStruct&)+0x2f8>)
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    7428:	f8b4 c31c 	ldrh.w	ip, [r4, #796]	; 0x31c
	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    742c:	f8a4 831e 	strh.w	r8, [r4, #798]	; 0x31e

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    7430:	ebca 0a08 	rsb	sl, sl, r8
    7434:	fa1f fa8a 	uxth.w	sl, sl
    7438:	fb01 fb0b 	mul.w	fp, r1, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    743c:	0c1b      	lsrs	r3, r3, #16
    743e:	3301      	adds	r3, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    7440:	fb1a cc0e 	smlabb	ip, sl, lr, ip
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7444:	ea4f 4e1b 	mov.w	lr, fp, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7448:	b299      	uxth	r1, r3
    744a:	fa1f fc8c 	uxth.w	ip, ip
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    744e:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    7452:	f8a4 132c 	strh.w	r1, [r4, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    7456:	f8a4 a330 	strh.w	sl, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    745a:	f8a4 c31c 	strh.w	ip, [r4, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    745e:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7462:	d003      	beq.n	746c <pride(LEDStruct&)+0x288>
    7464:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7468:	3307      	adds	r3, #7
    746a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    746c:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7470:	f3c3 0346 	ubfx	r3, r3, #1, #7
    7474:	f815 b008 	ldrb.w	fp, [r5, r8]
    7478:	f836 8018 	ldrh.w	r8, [r6, r8, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    747c:	f8a4 c332 	strh.w	ip, [r4, #818]	; 0x332
    7480:	fb0b 8303 	mla	r3, fp, r3, r8

    if( theta & 0x8000 ) y = -y;
    7484:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7488:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    748a:	bf16      	itet	ne
    748c:	f1c3 0800 	rsbne	r8, r3, #0
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7490:	fa0f f883 	sxtheq.w	r8, r3

    if( theta & 0x8000 ) y = -y;
    7494:	fa0f f888 	sxthne.w	r8, r8

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    7498:	f5a8 4800 	sub.w	r8, r8, #32768	; 0x8000
    749c:	fa1f f888 	uxth.w	r8, r8
    74a0:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    74a4:	0c1b      	lsrs	r3, r3, #16
    74a6:	3305      	adds	r3, #5
    74a8:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    74aa:	f8b4 e33c 	ldrh.w	lr, [r4, #828]	; 0x33c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    74ae:	fb0a 9303 	mla	r3, sl, r3, r9
    74b2:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    74b6:	f1be 0f00 	cmp.w	lr, #0
    74ba:	d074      	beq.n	75a6 <pride(LEDStruct&)+0x3c2>
    74bc:	46be      	mov	lr, r7
    74be:	460b      	mov	r3, r1
    74c0:	2700      	movs	r7, #0
    74c2:	e019      	b.n	74f8 <pride(LEDStruct&)+0x314>
    74c4:	1fff8788 	.word	0x1fff8788
    74c8:	1fff9625 	.word	0x1fff9625
    74cc:	1fffb19c 	.word	0x1fffb19c
    74d0:	00011854 	.word	0x00011854
    74d4:	0001111c 	.word	0x0001111c
    74d8:	000174f8 	.word	0x000174f8
    74dc:	0001b580 	.word	0x0001b580
    74e0:	f8b4 932a 	ldrh.w	r9, [r4, #810]	; 0x32a
    74e4:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    74e8:	f8b4 c332 	ldrh.w	ip, [r4, #818]	; 0x332
    74ec:	f8b4 e328 	ldrh.w	lr, [r4, #808]	; 0x328
    74f0:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    74f4:	f894 2325 	ldrb.w	r2, [r4, #805]	; 0x325
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    74f8:	44f4      	add	ip, lr
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    74fa:	444b      	add	r3, r9
    74fc:	b29b      	uxth	r3, r3
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    74fe:	fa1f fc8c 	uxth.w	ip, ip
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    7502:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7506:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    750a:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
		leds.hue8 = leds.hue16 / 256;
    750e:	f884 e324 	strb.w	lr, [r4, #804]	; 0x324

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    7512:	f8a4 c332 	strh.w	ip, [r4, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7516:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    751a:	d003      	beq.n	7524 <pride(LEDStruct&)+0x340>
    751c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7520:	3307      	adds	r3, #7
    7522:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7524:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7528:	f3c3 0146 	ubfx	r1, r3, #1, #7
    752c:	f815 9008 	ldrb.w	r9, [r5, r8]
    7530:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    7534:	f88d e008 	strb.w	lr, [sp, #8]
    7538:	fb09 3301 	mla	r3, r9, r1, r3

    if( theta & 0x8000 ) y = -y;
    753c:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7540:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7542:	bf18      	it	ne
    7544:	425b      	negne	r3, r3
    7546:	b21b      	sxth	r3, r3
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    7548:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    754c:	b29b      	uxth	r3, r3

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    754e:	fb03 f103 	mul.w	r1, r3, r3
    7552:	0c09      	lsrs	r1, r1, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    7554:	fb01 fc00 	mul.w	ip, r1, r0
    7558:	43c0      	mvns	r0, r0
    755a:	eb00 4c1c 	add.w	ip, r0, ip, lsr #16
    755e:	fa5f fc8c 	uxtb.w	ip, ip
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    7562:	f8a4 3336 	strh.w	r3, [r4, #822]	; 0x336

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    7566:	f8a4 1338 	strh.w	r1, [r4, #824]	; 0x338
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    756a:	f884 c326 	strb.w	ip, [r4, #806]	; 0x326
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    756e:	a901      	add	r1, sp, #4
    7570:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    7572:	f88d c00a 	strb.w	ip, [sp, #10]
    7576:	f88d 2009 	strb.w	r2, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    757a:	f004 fce3 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    757e:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    7582:	3b01      	subs	r3, #1
    7584:	1bdb      	subs	r3, r3, r7
    7586:	b29b      	uxth	r3, r3
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    7588:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		leds.bri8 += (255 - leds.brightdepth);

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    758c:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    7590:	4420      	add	r0, r4
    7592:	2240      	movs	r2, #64	; 0x40
    7594:	a901      	add	r1, sp, #4
    7596:	f004 fa79 	bl	ba8c <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    759a:	3701      	adds	r7, #1
    759c:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    75a0:	b2bf      	uxth	r7, r7
    75a2:	42bb      	cmp	r3, r7
    75a4:	d89c      	bhi.n	74e0 <pride(LEDStruct&)+0x2fc>

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    75a6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    75aa:	b98b      	cbnz	r3, 75d0 <pride(LEDStruct&)+0x3ec>
    75ac:	4623      	mov	r3, r4
    75ae:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    75b2:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    75b4:	7811      	ldrb	r1, [r2, #0]
    75b6:	f883 11bf 	strb.w	r1, [r3, #447]	; 0x1bf
        g = rhs.g;
    75ba:	7851      	ldrb	r1, [r2, #1]
    75bc:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
        b = rhs.b;
    75c0:	7891      	ldrb	r1, [r2, #2]
    75c2:	f883 11c1 	strb.w	r1, [r3, #449]	; 0x1c1
    75c6:	3203      	adds	r2, #3
    75c8:	4290      	cmp	r0, r2
    75ca:	f1a3 0303 	sub.w	r3, r3, #3
    75ce:	d1f1      	bne.n	75b4 <pride(LEDStruct&)+0x3d0>
}
    75d0:	b00b      	add	sp, #44	; 0x2c
    75d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    75d6:	234b      	movs	r3, #75	; 0x4b
    75d8:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    75dc:	4b04      	ldr	r3, [pc, #16]	; (75f0 <pride(LEDStruct&)+0x40c>)
    75de:	781b      	ldrb	r3, [r3, #0]
    75e0:	2b00      	cmp	r3, #0
    75e2:	f43f ae2d 	beq.w	7240 <pride(LEDStruct&)+0x5c>
    75e6:	4620      	mov	r0, r4
    75e8:	f7ff fde0 	bl	71ac <pacifica_update(LEDStruct&)>
    75ec:	e628      	b.n	7240 <pride(LEDStruct&)+0x5c>
    75ee:	bf00      	nop
    75f0:	1fff9625 	.word	0x1fff9625

000075f4 <colorwave(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    75f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    75f8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    75fc:	b08b      	sub	sp, #44	; 0x2c
    75fe:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    7600:	bb0b      	cbnz	r3, 7646 <colorwave(LEDStruct&)+0x52>
    7602:	48d0      	ldr	r0, [pc, #832]	; (7944 <colorwave(LEDStruct&)+0x350>)
    7604:	8803      	ldrh	r3, [r0, #0]
    7606:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    760a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    760e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    7612:	3319      	adds	r3, #25
    7614:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7616:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    761a:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    761c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette		= 1;
	leds.mode_type			= COLORWAVE;
    7620:	2612      	movs	r6, #18
	leds.delay_time			= 15;
    7622:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7624:	8003      	strh	r3, [r0, #0]
	
	leds.use_full_range		= ufr;
    7626:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    762a:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    762e:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.mode_type			= COLORWAVE;
    7632:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.delay_time			= 15;
    7636:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    763a:	2a00      	cmp	r2, #0
    763c:	f000 81b8 	beq.w	79b0 <colorwave(LEDStruct&)+0x3bc>
    7640:	2396      	movs	r3, #150	; 0x96
    7642:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    7646:	4bc0      	ldr	r3, [pc, #768]	; (7948 <colorwave(LEDStruct&)+0x354>)
    7648:	781b      	ldrb	r3, [r3, #0]
    764a:	2b00      	cmp	r3, #0
    764c:	f040 81b8 	bne.w	79c0 <colorwave(LEDStruct&)+0x3cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7650:	4abe      	ldr	r2, [pc, #760]	; (794c <colorwave(LEDStruct&)+0x358>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7652:	4bbf      	ldr	r3, [pc, #764]	; (7950 <colorwave(LEDStruct&)+0x35c>)
    7654:	6811      	ldr	r1, [r2, #0]
    7656:	9109      	str	r1, [sp, #36]	; 0x24
	return ret;
    7658:	9809      	ldr	r0, [sp, #36]	; 0x24
    765a:	fb03 f000 	mul.w	r0, r3, r0
    765e:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7660:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7662:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7666:	d503      	bpl.n	7670 <colorwave(LEDStruct&)+0x7c>
    7668:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    766c:	3307      	adds	r3, #7
    766e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7670:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    7672:	4fb8      	ldr	r7, [pc, #736]	; (7954 <colorwave(LEDStruct&)+0x360>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7674:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 7958 <colorwave(LEDStruct&)+0x364>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7678:	5c7e      	ldrb	r6, [r7, r1]
    767a:	f838 5011 	ldrh.w	r5, [r8, r1, lsl #1]
    767e:	f3c3 0146 	ubfx	r1, r3, #1, #7
    7682:	fb06 5301 	mla	r3, r6, r1, r5

    if( theta & 0x8000 ) y = -y;
    7686:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7688:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    768a:	bf48      	it	mi
    768c:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    768e:	6811      	ldr	r1, [r2, #0]
    7690:	9108      	str	r1, [sp, #32]
    7692:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    7694:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7698:	b29b      	uxth	r3, r3
	return ret;
    769a:	9d08      	ldr	r5, [sp, #32]
    769c:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    76a0:	f64d 6308 	movw	r3, #56840	; 0xde08
    76a4:	fb03 f505 	mul.w	r5, r3, r5
    76a8:	0c00      	lsrs	r0, r0, #16
    76aa:	0c2d      	lsrs	r5, r5, #16
    76ac:	3060      	adds	r0, #96	; 0x60
    76ae:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    76b0:	0469      	lsls	r1, r5, #17
    76b2:	f884 0322 	strb.w	r0, [r4, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    76b6:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    76ba:	d503      	bpl.n	76c4 <colorwave(LEDStruct&)+0xd0>
    76bc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    76c0:	3307      	adds	r3, #7
    76c2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    76c4:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    76c6:	f3c3 0146 	ubfx	r1, r3, #1, #7
    76ca:	f817 e006 	ldrb.w	lr, [r7, r6]
    76ce:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    76d2:	fb0e 3301 	mla	r3, lr, r1, r3

    if( theta & 0x8000 ) y = -y;
    76d6:	042e      	lsls	r6, r5, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    76d8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    76da:	bf48      	it	mi
    76dc:	425b      	negmi	r3, r3
    76de:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76e0:	6811      	ldr	r1, [r2, #0]
    76e2:	9107      	str	r1, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    76e4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    76e8:	b29b      	uxth	r3, r3
    76ea:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
	return ret;
    76ee:	9e07      	ldr	r6, [sp, #28]
    76f0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    76f4:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    76f8:	fb03 f606 	mul.w	r6, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    76fc:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    76fe:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7700:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
    7704:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7706:	0475      	lsls	r5, r6, #17
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    7708:	f8a4 1328 	strh.w	r1, [r4, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    770c:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7710:	d503      	bpl.n	771a <colorwave(LEDStruct&)+0x126>
    7712:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7716:	3307      	adds	r3, #7
    7718:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    771a:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    771e:	f3c3 0546 	ubfx	r5, r3, #1, #7
    7722:	f817 c00e 	ldrb.w	ip, [r7, lr]
    7726:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    772a:	fb0c 3305 	mla	r3, ip, r5, r3
    772e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7730:	0435      	lsls	r5, r6, #16
    7732:	bf48      	it	mi
    7734:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7736:	6815      	ldr	r5, [r2, #0]
    7738:	9506      	str	r5, [sp, #24]
    773a:	b21b      	sxth	r3, r3
    773c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7740:	b29b      	uxth	r3, r3
    7742:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    7746:	9d06      	ldr	r5, [sp, #24]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    7748:	f8b4 c320 	ldrh.w	ip, [r4, #800]	; 0x320
    774c:	f8a4 c32a 	strh.w	ip, [r4, #810]	; 0x32a
    7750:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7754:	f647 3398 	movw	r3, #31640	; 0x7b98
    7758:	fb03 f505 	mul.w	r5, r3, r5
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    775c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7760:	0c2d      	lsrs	r5, r5, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7762:	f10e 0e17 	add.w	lr, lr, #23
    7766:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    776a:	046e      	lsls	r6, r5, #17
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    776c:	f884 e323 	strb.w	lr, [r4, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7770:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7774:	d503      	bpl.n	777e <colorwave(LEDStruct&)+0x18a>
    7776:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    777a:	3307      	adds	r3, #7
    777c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    777e:	ea4f 2913 	mov.w	r9, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7782:	f3c3 0346 	ubfx	r3, r3, #1, #7
    7786:	f817 a009 	ldrb.w	sl, [r7, r9]
    778a:	f838 6019 	ldrh.w	r6, [r8, r9, lsl #1]
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    778e:	f8b4 b31c 	ldrh.w	fp, [r4, #796]	; 0x31c
    7792:	fb0a 6603 	mla	r6, sl, r3, r6
    7796:	b2b6      	uxth	r6, r6

    if( theta & 0x8000 ) y = -y;
    7798:	042b      	lsls	r3, r5, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    779a:	6813      	ldr	r3, [r2, #0]
    779c:	9304      	str	r3, [sp, #16]
    779e:	bf48      	it	mi
    77a0:	4276      	negmi	r6, r6
	return ret;
    77a2:	f8dd 9010 	ldr.w	r9, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    77a6:	6813      	ldr	r3, [r2, #0]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    77a8:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
    77ac:	9305      	str	r3, [sp, #20]
    77ae:	b236      	sxth	r6, r6
    77b0:	f5a6 4200 	sub.w	r2, r6, #32768	; 0x8000
    77b4:	f240 43b1 	movw	r3, #1201	; 0x4b1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    77b8:	fa1f f689 	uxth.w	r6, r9
    77bc:	b292      	uxth	r2, r2
	return ret;
    77be:	f8dd a014 	ldr.w	sl, [sp, #20]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    77c2:	f8df 9198 	ldr.w	r9, [pc, #408]	; 795c <colorwave(LEDStruct&)+0x368>
    77c6:	f8a4 632e 	strh.w	r6, [r4, #814]	; 0x32e
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    77ca:	fb03 f202 	mul.w	r2, r3, r2
	leds.deltams = leds.ms - leds.sLastMillis;
    77ce:	1b73      	subs	r3, r6, r5
    77d0:	b29d      	uxth	r5, r3
    77d2:	0c12      	lsrs	r2, r2, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    77d4:	fb09 f90a 	mul.w	r9, r9, sl
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    77d8:	f502 7396 	add.w	r3, r2, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    77dc:	ea4f 4919 	mov.w	r9, r9, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    77e0:	fb15 be0e 	smlabb	lr, r5, lr, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    77e4:	b29a      	uxth	r2, r3
    77e6:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    77ea:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    77ee:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    77f2:	f8a4 5330 	strh.w	r5, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
    77f6:	f8a4 631e 	strh.w	r6, [r4, #798]	; 0x31e
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    77fa:	f8a4 e31c 	strh.w	lr, [r4, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    77fe:	f3c9 03ca 	ubfx	r3, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7802:	d003      	beq.n	780c <colorwave(LEDStruct&)+0x218>
    7804:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7808:	3307      	adds	r3, #7
    780a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    780c:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7810:	f3c3 0646 	ubfx	r6, r3, #1, #7
    7814:	f817 b00a 	ldrb.w	fp, [r7, sl]
    7818:	f838 301a 	ldrh.w	r3, [r8, sl, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    781c:	f8a4 e332 	strh.w	lr, [r4, #818]	; 0x332
    7820:	fb0b 3306 	mla	r3, fp, r6, r3
    7824:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7826:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    782a:	bf18      	it	ne
    782c:	425b      	negne	r3, r3
    782e:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    7830:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7834:	b29b      	uxth	r3, r3
    7836:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    783a:	0c1b      	lsrs	r3, r3, #16
    783c:	3305      	adds	r3, #5
    783e:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    7840:	f8b4 633c 	ldrh.w	r6, [r4, #828]	; 0x33c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    7844:	fb05 c303 	mla	r3, r5, r3, ip
    7848:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    784c:	2e00      	cmp	r6, #0
    784e:	f000 8098 	beq.w	7982 <colorwave(LEDStruct&)+0x38e>
    7852:	4613      	mov	r3, r2
    7854:	f504 7ae4 	add.w	sl, r4, #456	; 0x1c8
    7858:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    785a:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    785e:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    7860:	4463      	add	r3, ip
    7862:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    7864:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    7868:	448e      	add	lr, r1
    786a:	fa1f fe8e 	uxth.w	lr, lr
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
    786e:	f41c 7f80 	tst.w	ip, #256	; 0x100
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    7872:	ea6f 2213 	mvn.w	r2, r3, lsr #8
    7876:	b2d2      	uxtb	r2, r2
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    7878:	ea4f 2b13 	mov.w	fp, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    787c:	bf08      	it	eq
    787e:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7880:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    7884:	f884 b324 	strb.w	fp, [r4, #804]	; 0x324
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    7888:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    788c:	f8a4 c334 	strh.w	ip, [r4, #820]	; 0x334
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    7890:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    7894:	f8a4 e332 	strh.w	lr, [r4, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7898:	f3ce 01ca 	ubfx	r1, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    789c:	d003      	beq.n	78a6 <colorwave(LEDStruct&)+0x2b2>
    789e:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    78a2:	3107      	adds	r1, #7
    78a4:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    78a6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    78aa:	f3c1 0346 	ubfx	r3, r1, #1, #7
    78ae:	f817 b00c 	ldrb.w	fp, [r7, ip]
    78b2:	f838 101c 	ldrh.w	r1, [r8, ip, lsl #1]
    78b6:	fb0b 1103 	mla	r1, fp, r3, r1

    if( theta & 0x8000 ) y = -y;
    78ba:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    78be:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    78c0:	bf18      	it	ne
    78c2:	4249      	negne	r1, r1
    78c4:	b209      	sxth	r1, r1
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    78c6:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    78ca:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    78cc:	fb01 fe01 	mul.w	lr, r1, r1
    78d0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    78d4:	fb0e f300 	mul.w	r3, lr, r0
    78d8:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
    78dc:	43c0      	mvns	r0, r0
    78de:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    78e2:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    78e6:	b2db      	uxtb	r3, r3
    78e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    78ec:	f8a4 1336 	strh.w	r1, [r4, #822]	; 0x336

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    78f0:	f8a4 e338 	strh.w	lr, [r4, #824]	; 0x338
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    78f4:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    78f8:	4651      	mov	r1, sl
    78fa:	f8cd 9000 	str.w	r9, [sp]
    78fe:	a803      	add	r0, sp, #12
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    7900:	f884 2327 	strb.w	r2, [r4, #807]	; 0x327

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    7904:	f004 f920 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    7908:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    790c:	3b01      	subs	r3, #1
    790e:	1b9b      	subs	r3, r3, r6
    7910:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    7912:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    7916:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    791a:	4420      	add	r0, r4
    791c:	2280      	movs	r2, #128	; 0x80
    791e:	a903      	add	r1, sp, #12
    7920:	3d01      	subs	r5, #1
    7922:	f004 f8b3 	bl	ba8c <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    7926:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    792a:	d019      	beq.n	7960 <colorwave(LEDStruct&)+0x36c>
    792c:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    7930:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    7934:	f8b4 e332 	ldrh.w	lr, [r4, #818]	; 0x332
    7938:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
    793c:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    7940:	e78e      	b.n	7860 <colorwave(LEDStruct&)+0x26c>
    7942:	bf00      	nop
    7944:	1fff8788 	.word	0x1fff8788
    7948:	1fff9625 	.word	0x1fff9625
    794c:	1fffb19c 	.word	0x1fffb19c
    7950:	000174f8 	.word	0x000174f8
    7954:	00011854 	.word	0x00011854
    7958:	0001111c 	.word	0x0001111c
    795c:	0001b580 	.word	0x0001b580
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    7960:	3601      	adds	r6, #1
    7962:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    7966:	b2b6      	uxth	r6, r6
    7968:	42b3      	cmp	r3, r6
    796a:	d90a      	bls.n	7982 <colorwave(LEDStruct&)+0x38e>
    796c:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    7970:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    7974:	f8b4 e332 	ldrh.w	lr, [r4, #818]	; 0x332
    7978:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
    797c:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    7980:	e76d      	b.n	785e <colorwave(LEDStruct&)+0x26a>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    7982:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    7986:	b983      	cbnz	r3, 79aa <colorwave(LEDStruct&)+0x3b6>
    7988:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    798c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    798e:	781a      	ldrb	r2, [r3, #0]
    7990:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    7994:	785a      	ldrb	r2, [r3, #1]
    7996:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    799a:	789a      	ldrb	r2, [r3, #2]
    799c:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    79a0:	3303      	adds	r3, #3
    79a2:	4299      	cmp	r1, r3
    79a4:	f1a4 0403 	sub.w	r4, r4, #3
    79a8:	d1f1      	bne.n	798e <colorwave(LEDStruct&)+0x39a>
}
    79aa:	b00b      	add	sp, #44	; 0x2c
    79ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.mode_type			= COLORWAVE;
	leds.delay_time			= 15;
	
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    79b0:	234b      	movs	r3, #75	; 0x4b
    79b2:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    79b6:	4b04      	ldr	r3, [pc, #16]	; (79c8 <colorwave(LEDStruct&)+0x3d4>)
    79b8:	781b      	ldrb	r3, [r3, #0]
    79ba:	2b00      	cmp	r3, #0
    79bc:	f43f ae48 	beq.w	7650 <colorwave(LEDStruct&)+0x5c>
    79c0:	4620      	mov	r0, r4
    79c2:	f7ff fbf3 	bl	71ac <pacifica_update(LEDStruct&)>
    79c6:	e643      	b.n	7650 <colorwave(LEDStruct&)+0x5c>
    79c8:	1fff9625 	.word	0x1fff9625

000079cc <pacifica(LEDStruct&)>:
}


void pacifica(LEDStruct& leds)
{
    79cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!leds.mode_initialized) { pacifica_init(leds); }
    79d0:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    LEDDebug(leds);
}


void pacifica(LEDStruct& leds)
{
    79d4:	b093      	sub	sp, #76	; 0x4c
    79d6:	4604      	mov	r4, r0
    if (!leds.mode_initialized) { pacifica_init(leds); }
    79d8:	bb0b      	cbnz	r3, 7a1e <pacifica(LEDStruct&)+0x52>
    79da:	49c7      	ldr	r1, [pc, #796]	; (7cf8 <pacifica(LEDStruct&)+0x32c>)
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    leds.use_palette        = 0;
    79dc:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    79e0:	880b      	ldrh	r3, [r1, #0]
    79e2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    79e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    79ea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    79ee:	3319      	adds	r3, #25
    79f0:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    79f2:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    79f6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    79fa:	2601      	movs	r6, #1
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    79fc:	2514      	movs	r5, #20
    leds.delay_time         = 15;
    79fe:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7a00:	800b      	strh	r3, [r1, #0]

    leds.use_full_range     = ufr;
    7a02:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    7a06:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    7a0a:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
    leds.delay_time         = 15;
    7a0e:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

    leds.use_full_range     = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    7a12:	2a00      	cmp	r2, #0
    7a14:	f000 826a 	beq.w	7eec <pacifica(LEDStruct&)+0x520>
    7a18:	2396      	movs	r3, #150	; 0x96
    7a1a:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    7a1e:	4bb7      	ldr	r3, [pc, #732]	; (7cfc <pacifica(LEDStruct&)+0x330>)
    7a20:	781b      	ldrb	r3, [r3, #0]
    7a22:	2b00      	cmp	r3, #0
    7a24:	f040 826a 	bne.w	7efc <pacifica(LEDStruct&)+0x530>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a28:	4eb5      	ldr	r6, [pc, #724]	; (7d00 <pacifica(LEDStruct&)+0x334>)
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    7a2a:	4bb6      	ldr	r3, [pc, #728]	; (7d04 <pacifica(LEDStruct&)+0x338>)
    7a2c:	6832      	ldr	r2, [r6, #0]
    7a2e:	9204      	str	r2, [sp, #16]
	return ret;
    7a30:	9a04      	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a32:	6831      	ldr	r1, [r6, #0]
    7a34:	9111      	str	r1, [sp, #68]	; 0x44
	return ret;
    7a36:	9811      	ldr	r0, [sp, #68]	; 0x44
    7a38:	6819      	ldr	r1, [r3, #0]
    sLastms = ms;
    7a3a:	601a      	str	r2, [r3, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7a3c:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    7a40:	fb03 f000 	mul.w	r0, r3, r0
    7a44:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7a46:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7a48:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    7a4c:	eba2 0101 	sub.w	r1, r2, r1
    if( theta & 0x4000 ) offset = 2047 - offset;
    7a50:	d503      	bpl.n	7a5a <pacifica(LEDStruct&)+0x8e>
    7a52:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7a56:	3307      	adds	r3, #7
    7a58:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7a5a:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    7a5c:	4faa      	ldr	r7, [pc, #680]	; (7d08 <pacifica(LEDStruct&)+0x33c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7a5e:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 7d24 <pacifica(LEDStruct&)+0x358>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7a62:	f817 e002 	ldrb.w	lr, [r7, r2]
    7a66:	f838 5012 	ldrh.w	r5, [r8, r2, lsl #1]
    7a6a:	f3c3 0246 	ubfx	r2, r3, #1, #7
    7a6e:	fb0e 5302 	mla	r3, lr, r2, r5

    if( theta & 0x8000 ) y = -y;
    7a72:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7a74:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7a76:	bf48      	it	mi
    7a78:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a7a:	6832      	ldr	r2, [r6, #0]
    7a7c:	9210      	str	r2, [sp, #64]	; 0x40
    7a7e:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7a80:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7a84:	b29b      	uxth	r3, r3
    7a86:	255b      	movs	r5, #91	; 0x5b
	return ret;
    7a88:	9810      	ldr	r0, [sp, #64]	; 0x40
    7a8a:	fb05 f503 	mul.w	r5, r5, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7a8e:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    7a92:	fb03 f000 	mul.w	r0, r3, r0
    7a96:	0c00      	lsrs	r0, r0, #16
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7a98:	0c2d      	lsrs	r5, r5, #16
    7a9a:	35b3      	adds	r5, #179	; 0xb3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7a9c:	0442      	lsls	r2, r0, #17
    7a9e:	b2ad      	uxth	r5, r5
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7aa0:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7aa4:	d503      	bpl.n	7aae <pacifica(LEDStruct&)+0xe2>
    7aa6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7aaa:	3307      	adds	r3, #7
    7aac:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7aae:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7ab2:	f3c3 0246 	ubfx	r2, r3, #1, #7
    7ab6:	f817 c00e 	ldrb.w	ip, [r7, lr]
    7aba:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    7abe:	fb0c 3302 	mla	r3, ip, r2, r3
    7ac2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7ac4:	0402      	lsls	r2, r0, #16
    7ac6:	bf48      	it	mi
    7ac8:	425b      	negmi	r3, r3
    7aca:	b21b      	sxth	r3, r3
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    7acc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7ad0:	225b      	movs	r2, #91	; 0x5b
    7ad2:	b29b      	uxth	r3, r3
    7ad4:	fb02 f303 	mul.w	r3, r2, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ad8:	6832      	ldr	r2, [r6, #0]
    7ada:	920f      	str	r2, [sp, #60]	; 0x3c
    7adc:	0c1b      	lsrs	r3, r3, #16
	return ret;
    7ade:	980f      	ldr	r0, [sp, #60]	; 0x3c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7ae0:	4a8a      	ldr	r2, [pc, #552]	; (7d0c <pacifica(LEDStruct&)+0x340>)
    7ae2:	33b3      	adds	r3, #179	; 0xb3
    7ae4:	b29b      	uxth	r3, r3
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    7ae6:	fb01 f505 	mul.w	r5, r1, r5
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    7aea:	fb01 f303 	mul.w	r3, r1, r3
    7aee:	fb02 f100 	mul.w	r1, r2, r0
    7af2:	0a1b      	lsrs	r3, r3, #8
    7af4:	0c09      	lsrs	r1, r1, #16
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    7af6:	0a2d      	lsrs	r5, r5, #8
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    7af8:	eb05 0903 	add.w	r9, r5, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7afc:	0448      	lsls	r0, r1, #17
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    7afe:	9302      	str	r3, [sp, #8]
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    7b00:	ea4f 0959 	mov.w	r9, r9, lsr #1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7b04:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7b08:	d503      	bpl.n	7b12 <pacifica(LEDStruct&)+0x146>
    7b0a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7b0e:	3307      	adds	r3, #7
    7b10:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7b12:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7b14:	f3c3 0246 	ubfx	r2, r3, #1, #7
    7b18:	f817 e000 	ldrb.w	lr, [r7, r0]
    7b1c:	f838 3010 	ldrh.w	r3, [r8, r0, lsl #1]
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    7b20:	f8df b204 	ldr.w	fp, [pc, #516]	; 7d28 <pacifica(LEDStruct&)+0x35c>
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7b24:	f8df a204 	ldr.w	sl, [pc, #516]	; 7d2c <pacifica(LEDStruct&)+0x360>
    7b28:	fb0e 3302 	mla	r3, lr, r2, r3
    7b2c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7b2e:	040a      	lsls	r2, r1, #16
    7b30:	bf4a      	itet	mi
    7b32:	425a      	negmi	r2, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7b34:	b21a      	sxthpl	r2, r3

    if( theta & 0x8000 ) y = -y;
    7b36:	b212      	sxthmi	r2, r2
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    7b38:	4b75      	ldr	r3, [pc, #468]	; (7d10 <pacifica(LEDStruct&)+0x344>)
    7b3a:	9303      	str	r3, [sp, #12]
    7b3c:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    7b40:	8818      	ldrh	r0, [r3, #0]
    7b42:	f3c2 3281 	ubfx	r2, r2, #14, #2
    7b46:	320a      	adds	r2, #10
    7b48:	fb05 0002 	mla	r0, r5, r2, r0
    7b4c:	8018      	strh	r0, [r3, #0]
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    7b4e:	220b      	movs	r2, #11
    7b50:	2108      	movs	r1, #8
    7b52:	f240 3009 	movw	r0, #777	; 0x309
    7b56:	f7f8 fd33 	bl	5c0 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>
    7b5a:	f8bb 2000 	ldrh.w	r2, [fp]
    7b5e:	fb09 2010 	mls	r0, r9, r0, r2
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7b62:	2105      	movs	r1, #5
    7b64:	2207      	movs	r2, #7
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    7b66:	f8ab 0000 	strh.w	r0, [fp]
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7b6a:	f240 10f5 	movw	r0, #501	; 0x1f5
    7b6e:	f7f8 fd27 	bl	5c0 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>
    7b72:	f8ba 2000 	ldrh.w	r2, [sl]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    7b76:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 7d30 <pacifica(LEDStruct&)+0x364>
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7b7a:	fb05 2010 	mls	r0, r5, r0, r2
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    7b7e:	2104      	movs	r1, #4
    7b80:	2206      	movs	r2, #6
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7b82:	f8aa 0000 	strh.w	r0, [sl]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    7b86:	f240 1001 	movw	r0, #257	; 0x101
    7b8a:	f7f8 fd19 	bl	5c0 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>
    7b8e:	f8b9 2000 	ldrh.w	r2, [r9]
    7b92:	9b02      	ldr	r3, [sp, #8]

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    7b94:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    7b98:	fb03 2010 	mls	r0, r3, r0, r2
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    7b9c:	2202      	movs	r2, #2
    7b9e:	f04f 0e06 	mov.w	lr, #6
    7ba2:	f8a9 0000 	strh.w	r0, [r9]
    7ba6:	250a      	movs	r5, #10
    7ba8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    7bac:	4620      	mov	r0, r4
    7bae:	aa0e      	add	r2, sp, #56	; 0x38
    7bb0:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
    7bb4:	f88d e039 	strb.w	lr, [sp, #57]	; 0x39
    7bb8:	f003 fea4 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bbc:	6832      	ldr	r2, [r6, #0]
    7bbe:	920e      	str	r2, [sp, #56]	; 0x38

    // Render each of four layers, with different scales and speeds, that vary over time
    pacifica_one_layer(leds, pacifica_palette_1, sCIStart1, beatsin16(3, 11 * 256, 14 * 256), beatsin8(10, 70, 130), 0 - beat16(301));
    7bc0:	9b03      	ldr	r3, [sp, #12]
	return ret;
    7bc2:	980e      	ldr	r0, [sp, #56]	; 0x38
    7bc4:	881a      	ldrh	r2, [r3, #0]
    7bc6:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    7bca:	fb03 f000 	mul.w	r0, r3, r0
    7bce:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7bd0:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7bd2:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7bd6:	d503      	bpl.n	7be0 <pacifica(LEDStruct&)+0x214>
    7bd8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7bdc:	3307      	adds	r3, #7
    7bde:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7be0:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7be2:	f3c3 0146 	ubfx	r1, r3, #1, #7
    7be6:	f817 e005 	ldrb.w	lr, [r7, r5]
    7bea:	f838 3015 	ldrh.w	r3, [r8, r5, lsl #1]
    7bee:	fb0e 3301 	mla	r3, lr, r1, r3
    7bf2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7bf4:	0401      	lsls	r1, r0, #16
    7bf6:	bf48      	it	mi
    7bf8:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bfa:	6831      	ldr	r1, [r6, #0]
    7bfc:	910d      	str	r1, [sp, #52]	; 0x34
    7bfe:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7c00:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    7c04:	980d      	ldr	r0, [sp, #52]	; 0x34
    7c06:	b29b      	uxth	r3, r3
    7c08:	f44f 212f 	mov.w	r1, #716800	; 0xaf000
    7c0c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    7c10:	fb01 f000 	mul.w	r0, r1, r0
    7c14:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    7c18:	0e00      	lsrs	r0, r0, #24
    7c1a:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    7c1c:	b2c1      	uxtb	r1, r0
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7c22:	064d      	lsls	r5, r1, #25
    7c24:	b29b      	uxth	r3, r3
    7c26:	f140 815c 	bpl.w	7ee2 <pacifica(LEDStruct&)+0x516>
        offset = (uint8_t)255 - offset;
    7c2a:	43c9      	mvns	r1, r1
    7c2c:	fa5f fe81 	uxtb.w	lr, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7c30:	f00e 010f 	and.w	r1, lr, #15
    if( theta & 0x40) secoffset++;
    7c34:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7c36:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7c3a:	4d36      	ldr	r5, [pc, #216]	; (7d14 <pacifica(LEDStruct&)+0x348>)
    7c3c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
    7c40:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    7c44:	eb05 0c0e 	add.w	ip, r5, lr
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7c48:	f815 e00e 	ldrb.w	lr, [r5, lr]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7c4c:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7c50:	fb1c f101 	smulbb	r1, ip, r1
    7c54:	eb0e 1121 	add.w	r1, lr, r1, asr #4
    if( theta & 0x80 ) y = -y;
    7c58:	0600      	lsls	r0, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7c5a:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    7c5c:	bf48      	it	mi
    7c5e:	4249      	negmi	r1, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c60:	6830      	ldr	r0, [r6, #0]
    7c62:	9008      	str	r0, [sp, #32]
    7c64:	b249      	sxtb	r1, r1

    y += 128;
    7c66:	3980      	subs	r1, #128	; 0x80
    7c68:	b2c9      	uxtb	r1, r1
	return ret;
    7c6a:	f8dd e020 	ldr.w	lr, [sp, #32]
    7c6e:	482a      	ldr	r0, [pc, #168]	; (7d18 <pacifica(LEDStruct&)+0x34c>)
    7c70:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
    7c74:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    7c78:	fb00 f00e 	mul.w	r0, r0, lr
    7c7c:	1209      	asrs	r1, r1, #8
    7c7e:	0c00      	lsrs	r0, r0, #16
    7c80:	3146      	adds	r1, #70	; 0x46
    7c82:	4240      	negs	r0, r0
    7c84:	b2c9      	uxtb	r1, r1
    7c86:	b280      	uxth	r0, r0
    7c88:	9100      	str	r1, [sp, #0]
    7c8a:	9001      	str	r0, [sp, #4]
    7c8c:	4923      	ldr	r1, [pc, #140]	; (7d1c <pacifica(LEDStruct&)+0x350>)
    7c8e:	4620      	mov	r0, r4
    7c90:	f7ff f91a 	bl	6ec8 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c94:	6833      	ldr	r3, [r6, #0]
    7c96:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    7c98:	980c      	ldr	r0, [sp, #48]	; 0x30
    pacifica_one_layer(leds, pacifica_palette_2, sCIStart2, beatsin16(4, 6 * 256, 9 * 256), beatsin8(17, 40, 80), beat16(401));
    7c9a:	f8bb 2000 	ldrh.w	r2, [fp]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7c9e:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    7ca2:	fb03 f000 	mul.w	r0, r3, r0
    7ca6:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7ca8:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7caa:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7cae:	d503      	bpl.n	7cb8 <pacifica(LEDStruct&)+0x2ec>
    7cb0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7cb4:	3307      	adds	r3, #7
    7cb6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7cb8:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7cbc:	f3c3 0146 	ubfx	r1, r3, #1, #7
    7cc0:	f817 700e 	ldrb.w	r7, [r7, lr]
    7cc4:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    7cc8:	fb07 3301 	mla	r3, r7, r1, r3
    7ccc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7cce:	0407      	lsls	r7, r0, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7cd0:	6831      	ldr	r1, [r6, #0]
    7cd2:	910b      	str	r1, [sp, #44]	; 0x2c
    7cd4:	bf48      	it	mi
    7cd6:	425b      	negmi	r3, r3
    7cd8:	b21b      	sxth	r3, r3
    7cda:	4911      	ldr	r1, [pc, #68]	; (7d20 <pacifica(LEDStruct&)+0x354>)
	return ret;
    7cdc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7cde:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7ce2:	b29b      	uxth	r3, r3
    7ce4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    7ce8:	fb01 f707 	mul.w	r7, r1, r7
    7cec:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    7cf0:	0e3f      	lsrs	r7, r7, #24
    7cf2:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    7cf4:	b2f9      	uxtb	r1, r7
    7cf6:	e01d      	b.n	7d34 <pacifica(LEDStruct&)+0x368>
    7cf8:	1fff8788 	.word	0x1fff8788
    7cfc:	1fff9625 	.word	0x1fff9625
    7d00:	1fffb19c 	.word	0x1fffb19c
    7d04:	1fff9564 	.word	0x1fff9564
    7d08:	00011854 	.word	0x00011854
    7d0c:	000451c8 	.word	0x000451c8
    7d10:	1fff9568 	.word	0x1fff9568
    7d14:	000112bc 	.word	0x000112bc
    7d18:	00014938 	.word	0x00014938
    7d1c:	1fff9584 	.word	0x1fff9584
    7d20:	00129800 	.word	0x00129800
    7d24:	0001111c 	.word	0x0001111c
    7d28:	1fff956a 	.word	0x1fff956a
    7d2c:	1fff9550 	.word	0x1fff9550
    7d30:	1fff956e 	.word	0x1fff956e
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7d34:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7d38:	0648      	lsls	r0, r1, #25
    7d3a:	b29b      	uxth	r3, r3
    7d3c:	f140 80cc 	bpl.w	7ed8 <pacifica(LEDStruct&)+0x50c>
        offset = (uint8_t)255 - offset;
    7d40:	43c8      	mvns	r0, r1
    7d42:	b2c0      	uxtb	r0, r0
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7d44:	f000 010f 	and.w	r1, r0, #15
    if( theta & 0x40) secoffset++;
    7d48:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7d4a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7d4e:	1100      	asrs	r0, r0, #4
    7d50:	0040      	lsls	r0, r0, #1
    7d52:	eb05 0e00 	add.w	lr, r5, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7d56:	5c28      	ldrb	r0, [r5, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7d58:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7d5c:	fb1e f101 	smulbb	r1, lr, r1
    7d60:	eb00 1121 	add.w	r1, r0, r1, asr #4
    7d64:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    7d66:	0638      	lsls	r0, r7, #24
    7d68:	bf48      	it	mi
    7d6a:	4249      	negmi	r1, r1
    7d6c:	b249      	sxtb	r1, r1

    y += 128;
    7d6e:	3980      	subs	r1, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7d70:	6830      	ldr	r0, [r6, #0]
    7d72:	9007      	str	r0, [sp, #28]
    7d74:	b2c9      	uxtb	r1, r1
    7d76:	eb01 0081 	add.w	r0, r1, r1, lsl #2
	return ret;
    7d7a:	9f07      	ldr	r7, [sp, #28]
    7d7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7d80:	4860      	ldr	r0, [pc, #384]	; (7f04 <pacifica(LEDStruct&)+0x538>)
    7d82:	1209      	asrs	r1, r1, #8
    7d84:	fb00 f007 	mul.w	r0, r0, r7
    7d88:	3128      	adds	r1, #40	; 0x28
    7d8a:	b2c9      	uxtb	r1, r1
    7d8c:	0c00      	lsrs	r0, r0, #16
    7d8e:	9100      	str	r1, [sp, #0]
    7d90:	9001      	str	r0, [sp, #4]
    7d92:	495d      	ldr	r1, [pc, #372]	; (7f08 <pacifica(LEDStruct&)+0x53c>)
    7d94:	4620      	mov	r0, r4
    7d96:	f7ff f897 	bl	6ec8 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7d9a:	6833      	ldr	r3, [r6, #0]
    7d9c:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    7d9e:	980a      	ldr	r0, [sp, #40]	; 0x28
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart3, 6 * 256, beatsin8(9, 10, 38), 0 - beat16(503));
    7da0:	f8ba 2000 	ldrh.w	r2, [sl]
    7da4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7da8:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
    7dac:	f3c0 3047 	ubfx	r0, r0, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    7db0:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7db2:	065f      	lsls	r7, r3, #25
    7db4:	f140 808b 	bpl.w	7ece <pacifica(LEDStruct&)+0x502>
        offset = (uint8_t)255 - offset;
    7db8:	43db      	mvns	r3, r3
    7dba:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7dbc:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    7dc0:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7dc2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7dc6:	1109      	asrs	r1, r1, #4
    7dc8:	0049      	lsls	r1, r1, #1
    7dca:	186f      	adds	r7, r5, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7dcc:	5c69      	ldrb	r1, [r5, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7dce:	787f      	ldrb	r7, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7dd0:	fb17 f303 	smulbb	r3, r7, r3
    7dd4:	eb01 1323 	add.w	r3, r1, r3, asr #4
    7dd8:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    7dda:	0601      	lsls	r1, r0, #24
    7ddc:	bf48      	it	mi
    7dde:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7de0:	6831      	ldr	r1, [r6, #0]
    7de2:	9106      	str	r1, [sp, #24]
    7de4:	b25b      	sxtb	r3, r3

    y += 128;
    7de6:	3b80      	subs	r3, #128	; 0x80
	return ret;
    7de8:	9806      	ldr	r0, [sp, #24]
    7dea:	4948      	ldr	r1, [pc, #288]	; (7f0c <pacifica(LEDStruct&)+0x540>)
    7dec:	b2db      	uxtb	r3, r3
    7dee:	ebc3 07c3 	rsb	r7, r3, r3, lsl #3
    7df2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    7df6:	fb01 f100 	mul.w	r1, r1, r0
    7dfa:	121b      	asrs	r3, r3, #8
    7dfc:	0c09      	lsrs	r1, r1, #16
    7dfe:	330a      	adds	r3, #10
    7e00:	4249      	negs	r1, r1
    7e02:	b2db      	uxtb	r3, r3
    7e04:	b289      	uxth	r1, r1
    7e06:	9300      	str	r3, [sp, #0]
    7e08:	9101      	str	r1, [sp, #4]
    7e0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    7e0e:	4620      	mov	r0, r4
    7e10:	493f      	ldr	r1, [pc, #252]	; (7f10 <pacifica(LEDStruct&)+0x544>)
    7e12:	f7ff f859 	bl	6ec8 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e16:	6833      	ldr	r3, [r6, #0]
    7e18:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    7e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart4, 5 * 256, beatsin8(8, 10, 28), beat16(601));
    7e1c:	f8b9 2000 	ldrh.w	r2, [r9]
    7e20:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    7e24:	fb03 f000 	mul.w	r0, r3, r0
    7e28:	0e00      	lsrs	r0, r0, #24
    7e2a:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7e2c:	065f      	lsls	r7, r3, #25
    7e2e:	d549      	bpl.n	7ec4 <pacifica(LEDStruct&)+0x4f8>
        offset = (uint8_t)255 - offset;
    7e30:	43db      	mvns	r3, r3
    7e32:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7e34:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    7e38:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7e3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7e3e:	1109      	asrs	r1, r1, #4
    7e40:	0049      	lsls	r1, r1, #1
    7e42:	186f      	adds	r7, r5, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7e44:	5c69      	ldrb	r1, [r5, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7e46:	787d      	ldrb	r5, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7e48:	fb15 f303 	smulbb	r3, r5, r3
    7e4c:	eb01 1323 	add.w	r3, r1, r3, asr #4
    7e50:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    7e52:	0601      	lsls	r1, r0, #24
    7e54:	bf48      	it	mi
    7e56:	425b      	negmi	r3, r3
    7e58:	b25b      	sxtb	r3, r3

    y += 128;
    7e5a:	3b80      	subs	r3, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e5c:	6831      	ldr	r1, [r6, #0]
    7e5e:	9105      	str	r1, [sp, #20]
    7e60:	b2db      	uxtb	r3, r3
    7e62:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    7e66:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	return ret;
    7e6a:	9d05      	ldr	r5, [sp, #20]
    7e6c:	4829      	ldr	r0, [pc, #164]	; (7f14 <pacifica(LEDStruct&)+0x548>)
    7e6e:	4928      	ldr	r1, [pc, #160]	; (7f10 <pacifica(LEDStruct&)+0x544>)
    7e70:	121b      	asrs	r3, r3, #8
    7e72:	330a      	adds	r3, #10
    7e74:	fb00 f005 	mul.w	r0, r0, r5
    7e78:	b2db      	uxtb	r3, r3
    7e7a:	0c00      	lsrs	r0, r0, #16
    7e7c:	9300      	str	r3, [sp, #0]
    7e7e:	9001      	str	r0, [sp, #4]
    7e80:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    7e84:	4620      	mov	r0, r4
    7e86:	f7ff f81f 	bl	6ec8 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>

    // Add brighter 'whitecaps' where the waves lines up more
    pacifica_add_whitecaps(leds);
    7e8a:	4620      	mov	r0, r4
    7e8c:	f7ff f8a0 	bl	6fd0 <pacifica_add_whitecaps(LEDStruct&)>

    // Deepen the blues and greens a bit
    pacifica_deepen_colors(leds);
    7e90:	4620      	mov	r0, r4
    7e92:	f7ff f955 	bl	7140 <pacifica_deepen_colors(LEDStruct&)>

    if (!leds.use_full_range) { strip_sync(leds); }
    7e96:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    7e9a:	b983      	cbnz	r3, 7ebe <pacifica(LEDStruct&)+0x4f2>
    7e9c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    7ea0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7ea2:	781a      	ldrb	r2, [r3, #0]
    7ea4:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    7ea8:	785a      	ldrb	r2, [r3, #1]
    7eaa:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    7eae:	789a      	ldrb	r2, [r3, #2]
    7eb0:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    7eb4:	3303      	adds	r3, #3
    7eb6:	4299      	cmp	r1, r3
    7eb8:	f1a4 0403 	sub.w	r4, r4, #3
    7ebc:	d1f1      	bne.n	7ea2 <pacifica(LEDStruct&)+0x4d6>
}
    7ebe:	b013      	add	sp, #76	; 0x4c
    7ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7ec4:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7ec8:	f003 030f 	and.w	r3, r3, #15
    7ecc:	e7b7      	b.n	7e3e <pacifica(LEDStruct&)+0x472>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7ece:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7ed2:	f003 030f 	and.w	r3, r3, #15
    7ed6:	e776      	b.n	7dc6 <pacifica(LEDStruct&)+0x3fa>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7ed8:	f001 003f 	and.w	r0, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7edc:	f001 010f 	and.w	r1, r1, #15
    7ee0:	e735      	b.n	7d4e <pacifica(LEDStruct&)+0x382>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7ee2:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7ee6:	f001 010f 	and.w	r1, r1, #15
    7eea:	e6a6      	b.n	7c3a <pacifica(LEDStruct&)+0x26e>
    leds.mode_type          = PACIFICA;
    leds.delay_time         = 15;

    leds.use_full_range     = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
    7eec:	234b      	movs	r3, #75	; 0x4b
    7eee:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    7ef2:	4b09      	ldr	r3, [pc, #36]	; (7f18 <pacifica(LEDStruct&)+0x54c>)
    7ef4:	781b      	ldrb	r3, [r3, #0]
    7ef6:	2b00      	cmp	r3, #0
    7ef8:	f43f ad96 	beq.w	7a28 <pacifica(LEDStruct&)+0x5c>
    7efc:	4620      	mov	r0, r4
    7efe:	f7ff f955 	bl	71ac <pacifica_update(LEDStruct&)>
    7f02:	e591      	b.n	7a28 <pacifica(LEDStruct&)+0x5c>
    7f04:	0001b698 	.word	0x0001b698
    7f08:	1fff95b4 	.word	0x1fff95b4
    7f0c:	00022628 	.word	0x00022628
    7f10:	1fff95e4 	.word	0x1fff95e4
    7f14:	00029158 	.word	0x00029158
    7f18:	1fff9625 	.word	0x1fff9625

00007f1c <bounce_update(LEDStruct&)>:
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    7f1c:	4b1c      	ldr	r3, [pc, #112]	; (7f90 <bounce_update(LEDStruct&)+0x74>)
	leds.bounce_rainbow		= br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    7f1e:	4a1d      	ldr	r2, [pc, #116]	; (7f94 <bounce_update(LEDStruct&)+0x78>)
	switch (update_var) {
    7f20:	781b      	ldrb	r3, [r3, #0]
	leds.bounce_rainbow		= br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    7f22:	2100      	movs	r1, #0
    7f24:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    7f26:	2b05      	cmp	r3, #5
    7f28:	d80d      	bhi.n	7f46 <bounce_update(LEDStruct&)+0x2a>
    7f2a:	e8df f003 	tbb	[pc, r3]
    7f2e:	0317      	.short	0x0317
    7f30:	0e29231d 	.word	0x0e29231d
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
    7f34:	4b18      	ldr	r3, [pc, #96]	; (7f98 <bounce_update(LEDStruct&)+0x7c>)
    7f36:	781b      	ldrb	r3, [r3, #0]
    7f38:	2b09      	cmp	r3, #9
    7f3a:	d927      	bls.n	7f8c <bounce_update(LEDStruct&)+0x70>
    7f3c:	2b14      	cmp	r3, #20
    7f3e:	bfa8      	it	ge
    7f40:	2314      	movge	r3, #20
    7f42:	f880 323a 	strb.w	r3, [r0, #570]	; 0x23a
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7f46:	f7fa b979 	b.w	223c <LEDDebug(LEDStruct&)>
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
    7f4a:	4b13      	ldr	r3, [pc, #76]	; (7f98 <bounce_update(LEDStruct&)+0x7c>)
    7f4c:	881b      	ldrh	r3, [r3, #0]
    7f4e:	3300      	adds	r3, #0
    7f50:	bf18      	it	ne
    7f52:	2301      	movne	r3, #1
    7f54:	f880 3277 	strb.w	r3, [r0, #631]	; 0x277
		default:	break;
	}
	LEDDebug(leds);
    7f58:	f7fa b970 	b.w	223c <LEDDebug(LEDStruct&)>


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
    7f5c:	4b0e      	ldr	r3, [pc, #56]	; (7f98 <bounce_update(LEDStruct&)+0x7c>)
    7f5e:	881b      	ldrh	r3, [r3, #0]
    7f60:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7f64:	f7fa b96a 	b.w	223c <LEDDebug(LEDStruct&)>
void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
    7f68:	4b0b      	ldr	r3, [pc, #44]	; (7f98 <bounce_update(LEDStruct&)+0x7c>)
    7f6a:	881b      	ldrh	r3, [r3, #0]
    7f6c:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7f70:	f7fa b964 	b.w	223c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
    7f74:	4b08      	ldr	r3, [pc, #32]	; (7f98 <bounce_update(LEDStruct&)+0x7c>)
    7f76:	881b      	ldrh	r3, [r3, #0]
    7f78:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7f7c:	f7fa b95e 	b.w	223c <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
    7f80:	4b05      	ldr	r3, [pc, #20]	; (7f98 <bounce_update(LEDStruct&)+0x7c>)
    7f82:	881b      	ldrh	r3, [r3, #0]
    7f84:	f880 3238 	strb.w	r3, [r0, #568]	; 0x238
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7f88:	f7fa b958 	b.w	223c <LEDDebug(LEDStruct&)>
    7f8c:	230a      	movs	r3, #10
    7f8e:	e7d8      	b.n	7f42 <bounce_update(LEDStruct&)+0x26>
    7f90:	1fff9e8c 	.word	0x1fff9e8c
    7f94:	1fff9625 	.word	0x1fff9625
    7f98:	1fff9526 	.word	0x1fff9526

00007f9c <bounce(LEDStruct&)>:
}


void bounce(LEDStruct& leds) {
    7f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bounce_init(leds); }
    7fa0:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void bounce(LEDStruct& leds) {
    7fa4:	b087      	sub	sp, #28
    7fa6:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bounce_init(leds); }
    7fa8:	2a00      	cmp	r2, #0
    7faa:	f000 8109 	beq.w	81c0 <bounce(LEDStruct&)+0x224>
	if (keyboard_update) { bounce_update(leds); }
    7fae:	4bd4      	ldr	r3, [pc, #848]	; (8300 <bounce(LEDStruct&)+0x364>)
    7fb0:	781b      	ldrb	r3, [r3, #0]
    7fb2:	f200 283b 	addw	r8, r0, #571	; 0x23b
    7fb6:	2b00      	cmp	r3, #0
    7fb8:	f040 8193 	bne.w	82e2 <bounce(LEDStruct&)+0x346>

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
    7fbc:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    7fc0:	2b00      	cmp	r3, #0
    7fc2:	f000 80d8 	beq.w	8176 <bounce(LEDStruct&)+0x1da>
    7fc6:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    7fca:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    7fce:	1c51      	adds	r1, r2, #1
    7fd0:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
    7fd4:	4620      	mov	r0, r4
    7fd6:	214b      	movs	r1, #75	; 0x4b
    7fd8:	f003 fca4 	bl	b924 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    7fdc:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    7fe0:	f104 06e1 	add.w	r6, r4, #225	; 0xe1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7fe4:	4fc7      	ldr	r7, [pc, #796]	; (8304 <bounce(LEDStruct&)+0x368>)
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);
    7fe6:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    7fea:	2114      	movs	r1, #20
    7fec:	4640      	mov	r0, r8
    7fee:	f003 fd4b 	bl	ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    7ff2:	683b      	ldr	r3, [r7, #0]
    7ff4:	9305      	str	r3, [sp, #20]
	return ret;
    7ff6:	9805      	ldr	r0, [sp, #20]

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    7ff8:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    7ffc:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    8000:	f44f 728c 	mov.w	r2, #280	; 0x118
    8004:	fb02 f200 	mul.w	r2, r2, r0
    8008:	021b      	lsls	r3, r3, #8
    800a:	fb03 f202 	mul.w	r2, r3, r2
    800e:	0e12      	lsrs	r2, r2, #24
    8010:	b2d0      	uxtb	r0, r2
    8012:	3901      	subs	r1, #1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    8014:	0645      	lsls	r5, r0, #25
    8016:	b2c9      	uxtb	r1, r1
    8018:	f140 80a8 	bpl.w	816c <bounce(LEDStruct&)+0x1d0>
        offset = (uint8_t)255 - offset;
    801c:	43c3      	mvns	r3, r0
    801e:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    8020:	f003 000f 	and.w	r0, r3, #15
    if( theta & 0x40) secoffset++;
    8024:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    8026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    802a:	4db7      	ldr	r5, [pc, #732]	; (8308 <bounce(LEDStruct&)+0x36c>)
    802c:	111b      	asrs	r3, r3, #4
    802e:	005b      	lsls	r3, r3, #1
    8030:	eb05 0e03 	add.w	lr, r5, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    8034:	5ceb      	ldrb	r3, [r5, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    8036:	f89e 5001 	ldrb.w	r5, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    803a:	fb15 f000 	smulbb	r0, r5, r0
    803e:	eb03 1320 	add.w	r3, r3, r0, asr #4
    8042:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    8044:	0610      	lsls	r0, r2, #24
    8046:	bf48      	it	mi
    8048:	425b      	negmi	r3, r3
    804a:	b25b      	sxtb	r3, r3
    804c:	3b80      	subs	r3, #128	; 0x80
    804e:	b2dd      	uxtb	r5, r3
    8050:	fb01 5505 	mla	r5, r1, r5, r5
    8054:	122d      	asrs	r5, r5, #8
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    8056:	2301      	movs	r3, #1
    8058:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    805c:	f884 5239 	strb.w	r5, [r4, #569]	; 0x239
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    8060:	4649      	mov	r1, r9
    8062:	9300      	str	r3, [sp, #0]
    8064:	a804      	add	r0, sp, #16
    8066:	23ff      	movs	r3, #255	; 0xff


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    8068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    806c:	f003 fd6c 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    8070:	1963      	adds	r3, r4, r5
    8072:	f89d 1010 	ldrb.w	r1, [sp, #16]
    8076:	f893 223b 	ldrb.w	r2, [r3, #571]	; 0x23b
    807a:	fa82 f251 	uqadd8	r2, r2, r1
    807e:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
    8082:	f893 123c 	ldrb.w	r1, [r3, #572]	; 0x23c
    8086:	f89d 2011 	ldrb.w	r2, [sp, #17]
    808a:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    808e:	f883 123c 	strb.w	r1, [r3, #572]	; 0x23c
    8092:	f893 223d 	ldrb.w	r2, [r3, #573]	; 0x23d
    8096:	f89d 1012 	ldrb.w	r1, [sp, #18]
    809a:	fa82 f251 	uqadd8	r2, r2, r1
        b = qadd8( b, rhs.b);
    809e:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    80a2:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    80a6:	b1f3      	cbz	r3, 80e6 <bounce(LEDStruct&)+0x14a>
    80a8:	2500      	movs	r5, #0
    80aa:	4641      	mov	r1, r8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    80ac:	46a8      	mov	r8, r5
    80ae:	e001      	b.n	80b4 <bounce(LEDStruct&)+0x118>
    80b0:	f201 213b 	addw	r1, r1, #571	; 0x23b
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
    80b4:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    80b8:	442b      	add	r3, r5
    80ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    80be:	18e2      	adds	r2, r4, r3
    80c0:	f804 8003 	strb.w	r8, [r4, r3]
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
    80c4:	4610      	mov	r0, r2
        g = (colorcode >>  8) & 0xFF;
    80c6:	f882 8001 	strb.w	r8, [r2, #1]
        b = (colorcode >>  0) & 0xFF;
    80ca:	f882 8002 	strb.w	r8, [r2, #2]
    80ce:	22ff      	movs	r2, #255	; 0xff
    80d0:	f003 fcdc 	bl	ba8c <nblend(CRGB&, CRGB const&, unsigned char)>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    80d4:	3501      	adds	r5, #1
    80d6:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    80da:	b2ed      	uxtb	r5, r5
    80dc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    80e0:	42ab      	cmp	r3, r5
    80e2:	4421      	add	r1, r4
    80e4:	d8e4      	bhi.n	80b0 <bounce(LEDStruct&)+0x114>
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    80e6:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8314 <bounce(LEDStruct&)+0x378>
    80ea:	f8d8 2000 	ldr.w	r2, [r8]
    80ee:	07d2      	lsls	r2, r2, #31
    80f0:	d51b      	bpl.n	812a <bounce(LEDStruct&)+0x18e>
    80f2:	4d86      	ldr	r5, [pc, #536]	; (830c <bounce(LEDStruct&)+0x370>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    80f4:	683a      	ldr	r2, [r7, #0]
    80f6:	9204      	str	r2, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    80f8:	e895 0003 	ldmia.w	r5, {r0, r1}
	return ret;
    80fc:	9a04      	ldr	r2, [sp, #16]
    80fe:	1a12      	subs	r2, r2, r0
    8100:	428a      	cmp	r2, r1
    8102:	d223      	bcs.n	814c <bounce(LEDStruct&)+0x1b0>
    8104:	4622      	mov	r2, r4
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    8106:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8108:	7819      	ldrb	r1, [r3, #0]
    810a:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    810e:	7859      	ldrb	r1, [r3, #1]
    8110:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    8114:	7899      	ldrb	r1, [r3, #2]
    8116:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    811a:	3303      	adds	r3, #3
    811c:	429e      	cmp	r6, r3
    811e:	f1a2 0203 	sub.w	r2, r2, #3
    8122:	d1f1      	bne.n	8108 <bounce(LEDStruct&)+0x16c>
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }

	strip_sync(leds);
}
    8124:	b007      	add	sp, #28
    8126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    812a:	4640      	mov	r0, r8
    812c:	f004 fc26 	bl	c97c <__cxa_guard_acquire>
    8130:	2800      	cmp	r0, #0
    8132:	f040 80da 	bne.w	82ea <bounce(LEDStruct&)+0x34e>
    8136:	4d75      	ldr	r5, [pc, #468]	; (830c <bounce(LEDStruct&)+0x370>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8138:	683b      	ldr	r3, [r7, #0]
    813a:	9304      	str	r3, [sp, #16]
    813c:	e895 0006 	ldmia.w	r5, {r1, r2}
	return ret;
    8140:	9b04      	ldr	r3, [sp, #16]
    8142:	1a5b      	subs	r3, r3, r1
    8144:	4293      	cmp	r3, r2
    8146:	d3dd      	bcc.n	8104 <bounce(LEDStruct&)+0x168>
    8148:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    814c:	683a      	ldr	r2, [r7, #0]
    814e:	9203      	str	r2, [sp, #12]
	return ret;
    8150:	9903      	ldr	r1, [sp, #12]
    8152:	6029      	str	r1, [r5, #0]
    8154:	f1c3 024a 	rsb	r2, r3, #74	; 0x4a
    8158:	2300      	movs	r3, #0
    815a:	b2d2      	uxtb	r2, r2
    815c:	f894 0238 	ldrb.w	r0, [r4, #568]	; 0x238
    8160:	4619      	mov	r1, r3
    8162:	f7f8 fb01 	bl	768 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.36]>
    8166:	f884 0237 	strb.w	r0, [r4, #567]	; 0x237
    816a:	e7cb      	b.n	8104 <bounce(LEDStruct&)+0x168>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    816c:	f000 033f 	and.w	r3, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    8170:	f000 000f 	and.w	r0, r0, #15
    8174:	e759      	b.n	802a <bounce(LEDStruct&)+0x8e>
void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }
    8176:	f894 727a 	ldrb.w	r7, [r4, #634]	; 0x27a
    817a:	f894 b279 	ldrb.w	fp, [r4, #633]	; 0x279
    817e:	1c7b      	adds	r3, r7, #1
    8180:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
    8184:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    8188:	4625      	mov	r5, r4
    818a:	f104 06e1 	add.w	r6, r4, #225	; 0xe1
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
    818e:	f04f 0a01 	mov.w	sl, #1
    8192:	463a      	mov	r2, r7
    8194:	23ff      	movs	r3, #255	; 0xff
    8196:	4649      	mov	r1, r9
    8198:	f8cd a000 	str.w	sl, [sp]
    819c:	a805      	add	r0, sp, #20
    819e:	f003 fcd3 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    81a2:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    81a6:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    81aa:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    81ae:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    81b0:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    81b2:	70ab      	strb	r3, [r5, #2]
    81b4:	3503      	adds	r5, #3
        colorIndex += incIndex;
    81b6:	445f      	add	r7, fp
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    81b8:	42b5      	cmp	r5, r6
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
        colorIndex += incIndex;
    81ba:	b2ff      	uxtb	r7, r7
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    81bc:	d1e9      	bne.n	8192 <bounce(LEDStruct&)+0x1f6>
    81be:	e711      	b.n	7fe4 <bounce(LEDStruct&)+0x48>
    81c0:	4953      	ldr	r1, [pc, #332]	; (8310 <bounce(LEDStruct&)+0x374>)
void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
    81c2:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    81c6:	880b      	ldrh	r3, [r1, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    81c8:	f88d 2014 	strb.w	r2, [sp, #20]
    81cc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    81d0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    81d4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    81d8:	3319      	adds	r3, #25
    81da:	b29b      	uxth	r3, r3
    81dc:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    81e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    81e4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    81e8:	3519      	adds	r5, #25
    81ea:	b2ad      	uxth	r5, r5
    81ec:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    81f0:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    81f4:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    81f8:	3719      	adds	r7, #25
    81fa:	b2bf      	uxth	r7, r7
    81fc:	eb07 2947 	add.w	r9, r7, r7, lsl #9
    8200:	eb07 0989 	add.w	r9, r7, r9, lsl #2
    8204:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    8208:	f109 0919 	add.w	r9, r9, #25
    820c:	fa1f f989 	uxth.w	r9, r9
    8210:	eb09 2a49 	add.w	sl, r9, r9, lsl #9
    8214:	eb09 0a8a 	add.w	sl, r9, sl, lsl #2
    8218:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    821c:	f10a 0a19 	add.w	sl, sl, #25
    8220:	fa1f fa8a 	uxth.w	sl, sl
    8224:	eb0a 2e4a 	add.w	lr, sl, sl, lsl #9
    8228:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
    822c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8230:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8234:	f10e 0e19 	add.w	lr, lr, #25
    8238:	fa1f fe8e 	uxth.w	lr, lr
#ifndef BOUNCE_H
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
    823c:	2001      	movs	r0, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    823e:	b2de      	uxtb	r6, r3
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
    8240:	f04f 0c1c 	mov.w	ip, #28
	leds.delay_time			= 15;
    8244:	230f      	movs	r3, #15
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    8246:	f204 283b 	addw	r8, r4, #571	; 0x23b
#ifndef BOUNCE_H
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
    824a:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    824e:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
    8252:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    8256:	4640      	mov	r0, r8
    8258:	f88d 2015 	strb.w	r2, [sp, #21]
    825c:	f88d 2016 	strb.w	r2, [sp, #22]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8260:	f8a1 e000 	strh.w	lr, [r1]
    8264:	aa05      	add	r2, sp, #20
    8266:	2114      	movs	r1, #20
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
    8268:	f884 c22d 	strb.w	ip, [r4, #557]	; 0x22d
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    826c:	eb0e 2b1e 	add.w	fp, lr, lr, lsr #8
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    8270:	f003 fb48 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>

	leds.juggle_fade		= jf;
    8274:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8278:	111b      	asrs	r3, r3, #4
    827a:	3320      	adds	r3, #32
    827c:	eb07 2717 	add.w	r7, r7, r7, lsr #8
    8280:	eb09 2919 	add.w	r9, r9, r9, lsr #8
    8284:	eb0a 2a1a 	add.w	sl, sl, sl, lsr #8
    8288:	b2ff      	uxtb	r7, r7
    828a:	fa5f f989 	uxtb.w	r9, r9
    828e:	fa5f fb8b 	uxtb.w	fp, fp
    8292:	fa5f fa8a 	uxtb.w	sl, sl
    8296:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
}


void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }
    829a:	4b19      	ldr	r3, [pc, #100]	; (8300 <bounce(LEDStruct&)+0x364>)
    829c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    82a0:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    82a4:	eb0a 008a 	add.w	r0, sl, sl, lsl #2
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    82a8:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    82ac:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
    82b0:	b2ed      	uxtb	r5, r5
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    82b2:	ea4f 262b 	mov.w	r6, fp, asr #8
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    82b6:	1140      	asrs	r0, r0, #5
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    82b8:	1149      	asrs	r1, r1, #5
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    82ba:	1212      	asrs	r2, r2, #8
}


void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }
    82bc:	781b      	ldrb	r3, [r3, #0]
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    82be:	3601      	adds	r6, #1
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    82c0:	3050      	adds	r0, #80	; 0x50
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    82c2:	3110      	adds	r1, #16
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    82c4:	320c      	adds	r2, #12
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
	leds.bounce_rainbow		= br;
    82c6:	09ed      	lsrs	r5, r5, #7
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    82c8:	f884 6279 	strb.w	r6, [r4, #633]	; 0x279
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    82cc:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    82d0:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    82d4:	f884 223a 	strb.w	r2, [r4, #570]	; 0x23a
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
	leds.bounce_rainbow		= br;
    82d8:	f884 5277 	strb.w	r5, [r4, #631]	; 0x277
}


void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }
    82dc:	2b00      	cmp	r3, #0
    82de:	f43f ae6d 	beq.w	7fbc <bounce(LEDStruct&)+0x20>
    82e2:	4620      	mov	r0, r4
    82e4:	f7ff fe1a 	bl	7f1c <bounce_update(LEDStruct&)>
    82e8:	e668      	b.n	7fbc <bounce(LEDStruct&)+0x20>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    82ea:	683b      	ldr	r3, [r7, #0]
    82ec:	4d07      	ldr	r5, [pc, #28]	; (830c <bounce(LEDStruct&)+0x370>)
    82ee:	9302      	str	r3, [sp, #8]
	return ret;
    82f0:	9b02      	ldr	r3, [sp, #8]
    82f2:	602b      	str	r3, [r5, #0]
    82f4:	2319      	movs	r3, #25
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    82f6:	4640      	mov	r0, r8
    82f8:	606b      	str	r3, [r5, #4]
    82fa:	f004 fb45 	bl	c988 <__cxa_guard_release>
    82fe:	e71b      	b.n	8138 <bounce(LEDStruct&)+0x19c>
    8300:	1fff9625 	.word	0x1fff9625
    8304:	1fffb19c 	.word	0x1fffb19c
    8308:	000112bc 	.word	0x000112bc
    830c:	1fff9558 	.word	0x1fff9558
    8310:	1fff8788 	.word	0x1fff8788
    8314:	1fff9628 	.word	0x1fff9628

00008318 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)>:
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
    8318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leds.mode_initialized	= 1;
    831c:	2701      	movs	r7, #1
	leds.use_palette		= up;
	leds.use_full_range		= 0;
	leds.mode_type			= BOUNCING_BALLS;
    831e:	261d      	movs	r6, #29
	leds.delay_time			= 15;
    8320:	250f      	movs	r5, #15


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
	leds.use_full_range		= 0;
    8322:	2400      	movs	r4, #0
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
    8324:	b087      	sub	sp, #28
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
    8326:	f880 122a 	strb.w	r1, [r0, #554]	; 0x22a
	leds.use_full_range		= 0;
	leds.mode_type			= BOUNCING_BALLS;
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
    832a:	f880 2769 	strb.w	r2, [r0, #1897]	; 0x769
	leds.number_of_balls	= nob;
    832e:	f880 376a 	strb.w	r3, [r0, #1898]	; 0x76a
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized	= 1;
    8332:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
	leds.use_palette		= up;
	leds.use_full_range		= 0;
	leds.mode_type			= BOUNCING_BALLS;
    8336:	f880 622d 	strb.w	r6, [r0, #557]	; 0x22d
	leds.delay_time			= 15;
    833a:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
	leds.use_full_range		= 0;
    833e:	f880 41c4 	strb.w	r4, [r0, #452]	; 0x1c4
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
	leds.number_of_balls	= nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    8342:	2b00      	cmp	r3, #0
    8344:	d043      	beq.n	83ce <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xb6>
    8346:	469b      	mov	fp, r3
    8348:	4b25      	ldr	r3, [pc, #148]	; (83e0 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xc8>)
    834a:	4605      	mov	r5, r0
    834c:	681b      	ldr	r3, [r3, #0]
    834e:	9301      	str	r3, [sp, #4]
    8350:	4658      	mov	r0, fp
    8352:	f006 fa6d 	bl	e830 <__aeabi_ui2d>
    8356:	4602      	mov	r2, r0
    8358:	460b      	mov	r3, r1
    835a:	f006 fadf 	bl	e91c <__aeabi_dmul>
    835e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    8362:	f505 6afd 	add.w	sl, r5, #2024	; 0x7e8
    8366:	f505 69ed 	add.w	r9, r5, #1896	; 0x768
    836a:	f505 68f9 	add.w	r8, r5, #1992	; 0x7c8
    836e:	f505 67f1 	add.w	r7, r5, #1928	; 0x788
    8372:	f505 66f5 	add.w	r6, r5, #1960	; 0x7a8
    8376:	f605 0508 	addw	r5, r5, #2056	; 0x808
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    837a:	4b1a      	ldr	r3, [pc, #104]	; (83e4 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xcc>)
    837c:	681b      	ldr	r3, [r3, #0]
    837e:	9305      	str	r3, [sp, #20]
	return ret;
    8380:	9b05      	ldr	r3, [sp, #20]
		leds.bouncing_tLast[i]		= millis();
    8382:	f84a 3f04 	str.w	r3, [sl, #4]!
		leds.bouncing_heights[i]	= h0;
    8386:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    838a:	f849 3f04 	str.w	r3, [r9, #4]!
		leds.bouncing_pos[i]		= 0;                              // Balls start on the ground
    838e:	2300      	movs	r3, #0
    8390:	f848 3f04 	str.w	r3, [r8, #4]!
		leds.bouncing_vImpact[i]	= bouncing_vImpact0;                   // And "pop" up at vImpact0
    8394:	9b01      	ldr	r3, [sp, #4]
    8396:	f847 3f04 	str.w	r3, [r7, #4]!
		leds.bouncing_tCycle[i]		= 0;
    839a:	2300      	movs	r3, #0
    839c:	f846 3f04 	str.w	r3, [r6, #4]!
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
    83a0:	4620      	mov	r0, r4
    83a2:	f006 fdd7 	bl	ef54 <__aeabi_i2f>
    83a6:	f006 fa65 	bl	e874 <__aeabi_f2d>
    83aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    83ae:	f006 fbdf 	bl	eb70 <__aeabi_ddiv>
    83b2:	4602      	mov	r2, r0
    83b4:	460b      	mov	r3, r1
    83b6:	a108      	add	r1, pc, #32	; (adr r1, 83d8 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xc0>)
    83b8:	e9d1 0100 	ldrd	r0, r1, [r1]
    83bc:	f006 f8fa 	bl	e5b4 <__aeabi_dsub>
    83c0:	f006 fcbe 	bl	ed40 <__aeabi_d2f>
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
	leds.number_of_balls	= nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    83c4:	3401      	adds	r4, #1
    83c6:	455c      	cmp	r4, fp
		leds.bouncing_tLast[i]		= millis();
		leds.bouncing_heights[i]	= h0;
		leds.bouncing_pos[i]		= 0;                              // Balls start on the ground
		leds.bouncing_vImpact[i]	= bouncing_vImpact0;                   // And "pop" up at vImpact0
		leds.bouncing_tCycle[i]		= 0;
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
    83c8:	f845 0f04 	str.w	r0, [r5, #4]!
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
	leds.number_of_balls	= nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    83cc:	d1d5      	bne.n	837a <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0x62>
		leds.bouncing_pos[i]		= 0;                              // Balls start on the ground
		leds.bouncing_vImpact[i]	= bouncing_vImpact0;                   // And "pop" up at vImpact0
		leds.bouncing_tCycle[i]		= 0;
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}
    83ce:	b007      	add	sp, #28
    83d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83d4:	f3af 8000 	nop.w
    83d8:	c0000000 	.word	0xc0000000
    83dc:	3feccccc 	.word	0x3feccccc
    83e0:	1fff874c 	.word	0x1fff874c
    83e4:	1fffb19c 	.word	0x1fffb19c

000083e8 <bouncing_balls_update(LEDStruct&)>:

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    83e8:	4b12      	ldr	r3, [pc, #72]	; (8434 <bouncing_balls_update(LEDStruct&)+0x4c>)
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    83ea:	4a13      	ldr	r2, [pc, #76]	; (8438 <bouncing_balls_update(LEDStruct&)+0x50>)
	switch (update_var) {
    83ec:	781b      	ldrb	r3, [r3, #0]
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    83ee:	2100      	movs	r1, #0
	switch (update_var) {
    83f0:	2b01      	cmp	r3, #1
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    83f2:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    83f4:	d011      	beq.n	841a <bouncing_balls_update(LEDStruct&)+0x32>
    83f6:	d30a      	bcc.n	840e <bouncing_balls_update(LEDStruct&)+0x26>
    83f8:	2b02      	cmp	r3, #2
    83fa:	d106      	bne.n	840a <bouncing_balls_update(LEDStruct&)+0x22>
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
	case 1:		if (update_arg > MAX_NUMBER_OF_BALLS) { update_arg = MAX_NUMBER_OF_BALLS; } leds.number_of_balls = (uint8_t)update_arg;	break;	//b		
	case 2:		leds.use_palette	 = (bool)update_arg; break; //c
    83fc:	4b0f      	ldr	r3, [pc, #60]	; (843c <bouncing_balls_update(LEDStruct&)+0x54>)
    83fe:	881b      	ldrh	r3, [r3, #0]
    8400:	3300      	adds	r3, #0
    8402:	bf18      	it	ne
    8404:	2301      	movne	r3, #1
    8406:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	default:	break;
	}
	LEDDebug(leds);
    840a:	f7f9 bf17 	b.w	223c <LEDDebug(LEDStruct&)>
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
    840e:	4b0b      	ldr	r3, [pc, #44]	; (843c <bouncing_balls_update(LEDStruct&)+0x54>)
    8410:	881b      	ldrh	r3, [r3, #0]
    8412:	f880 3769 	strb.w	r3, [r0, #1897]	; 0x769
	case 1:		if (update_arg > MAX_NUMBER_OF_BALLS) { update_arg = MAX_NUMBER_OF_BALLS; } leds.number_of_balls = (uint8_t)update_arg;	break;	//b		
	case 2:		leds.use_palette	 = (bool)update_arg; break; //c
	default:	break;
	}
	LEDDebug(leds);
    8416:	f7f9 bf11 	b.w	223c <LEDDebug(LEDStruct&)>

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
	case 1:		if (update_arg > MAX_NUMBER_OF_BALLS) { update_arg = MAX_NUMBER_OF_BALLS; } leds.number_of_balls = (uint8_t)update_arg;	break;	//b		
    841a:	4a08      	ldr	r2, [pc, #32]	; (843c <bouncing_balls_update(LEDStruct&)+0x54>)
    841c:	8813      	ldrh	r3, [r2, #0]
    841e:	2b08      	cmp	r3, #8
    8420:	bf8c      	ite	hi
    8422:	2308      	movhi	r3, #8
    8424:	b2db      	uxtbls	r3, r3
    8426:	f880 376a 	strb.w	r3, [r0, #1898]	; 0x76a
    842a:	bf88      	it	hi
    842c:	8013      	strhhi	r3, [r2, #0]
	case 2:		leds.use_palette	 = (bool)update_arg; break; //c
	default:	break;
	}
	LEDDebug(leds);
    842e:	f7f9 bf05 	b.w	223c <LEDDebug(LEDStruct&)>
    8432:	bf00      	nop
    8434:	1fff9e8c 	.word	0x1fff9e8c
    8438:	1fff9625 	.word	0x1fff9625
    843c:	1fff9526 	.word	0x1fff9526

00008440 <bouncing_balls(LEDStruct&)>:
}

void bouncing_balls(LEDStruct& leds) {
    8440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    8444:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	default:	break;
	}
	LEDDebug(leds);
}

void bouncing_balls(LEDStruct& leds) {
    8448:	b089      	sub	sp, #36	; 0x24
    844a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    844c:	2b00      	cmp	r3, #0
    844e:	f000 80df 	beq.w	8610 <bouncing_balls(LEDStruct&)+0x1d0>
	if (keyboard_update) { bouncing_balls_update(leds); }
    8452:	4b8d      	ldr	r3, [pc, #564]	; (8688 <bouncing_balls(LEDStruct&)+0x248>)
    8454:	781b      	ldrb	r3, [r3, #0]
    8456:	2b00      	cmp	r3, #0
    8458:	f040 8112 	bne.w	8680 <bouncing_balls(LEDStruct&)+0x240>

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    845c:	f894 376a 	ldrb.w	r3, [r4, #1898]	; 0x76a
    8460:	2b00      	cmp	r3, #0
    8462:	f000 80c1 	beq.w	85e8 <bouncing_balls(LEDStruct&)+0x1a8>
    8466:	f04f 0800 	mov.w	r8, #0
    846a:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8698 <bouncing_balls(LEDStruct&)+0x258>
    846e:	46c3      	mov	fp, r8
    8470:	e032      	b.n	84d8 <bouncing_balls(LEDStruct&)+0x98>
			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       

		if (leds.use_palette) {
			leds.led_data[leds.bouncing_pos[i]] = ColorFromPalette(leds.current_palette, leds.bouncing_index + i * ONE_SIDE / leds.number_of_balls, 255, leds.current_blending);
    8472:	f894 3768 	ldrb.w	r3, [r4, #1896]	; 0x768
    8476:	f894 276a 	ldrb.w	r2, [r4, #1898]	; 0x76a
    847a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    847e:	9100      	str	r1, [sp, #0]
    8480:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    8484:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    8488:	fb96 f6f2 	sdiv	r6, r6, r2
    848c:	18f2      	adds	r2, r6, r3
    848e:	b2d2      	uxtb	r2, r2
    8490:	23ff      	movs	r3, #255	; 0xff
    8492:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    8496:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    849a:	a805      	add	r0, sp, #20
    849c:	f003 fb54 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    84a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    84a4:	55e3      	strb	r3, [r4, r7]
    84a6:	4427      	add	r7, r4
        g = rhs.g;
        b = rhs.b;
    84a8:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    84ac:	f89d 2015 	ldrb.w	r2, [sp, #21]
    84b0:	707a      	strb	r2, [r7, #1]
        b = rhs.b;
    84b2:	70bb      	strb	r3, [r7, #2]
			leds.bouncing_index++;
    84b4:	f894 3768 	ldrb.w	r3, [r4, #1896]	; 0x768
    84b8:	3301      	adds	r3, #1
    84ba:	f884 3768 	strb.w	r3, [r4, #1896]	; 0x768

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    84be:	f10b 0b01 	add.w	fp, fp, #1
    84c2:	f894 376a 	ldrb.w	r3, [r4, #1898]	; 0x76a
    84c6:	fa5f fb8b 	uxtb.w	fp, fp
    84ca:	f108 0828 	add.w	r8, r8, #40	; 0x28
    84ce:	455b      	cmp	r3, fp
    84d0:	fa5f f888 	uxtb.w	r8, r8
    84d4:	f240 8088 	bls.w	85e8 <bouncing_balls(LEDStruct&)+0x1a8>
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
    84d8:	f894 2769 	ldrb.w	r2, [r4, #1897]	; 0x769
    84dc:	214b      	movs	r1, #75	; 0x4b
    84de:	4620      	mov	r0, r4
    84e0:	fa0f f68b 	sxth.w	r6, fp
    84e4:	f003 fad0 	bl	ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    84e8:	eb04 0586 	add.w	r5, r4, r6, lsl #2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    84ec:	f8d9 3000 	ldr.w	r3, [r9]
    84f0:	9306      	str	r3, [sp, #24]
	return ret;
    84f2:	9806      	ldr	r0, [sp, #24]
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
    84f4:	f8d5 37ec 	ldr.w	r3, [r5, #2028]	; 0x7ec
    84f8:	1ac0      	subs	r0, r0, r3
    84fa:	f006 fd27 	bl	ef4c <__aeabi_ui2f>
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    84fe:	4963      	ldr	r1, [pc, #396]	; (868c <bouncing_balls(LEDStruct&)+0x24c>)
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
    8500:	f8c5 07ac 	str.w	r0, [r5, #1964]	; 0x7ac
    8504:	4607      	mov	r7, r0
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    8506:	f006 fe2d 	bl	f164 <__aeabi_fdiv>
    850a:	f006 f9b3 	bl	e874 <__aeabi_f2d>
    850e:	4602      	mov	r2, r0
    8510:	460b      	mov	r3, r1
    8512:	f006 fa03 	bl	e91c <__aeabi_dmul>
    8516:	2200      	movs	r2, #0
    8518:	4b5d      	ldr	r3, [pc, #372]	; (8690 <bouncing_balls(LEDStruct&)+0x250>)
    851a:	f8d5 a78c 	ldr.w	sl, [r5, #1932]	; 0x78c
    851e:	f006 f9fd 	bl	e91c <__aeabi_dmul>
    8522:	e9cd 0102 	strd	r0, r1, [sp, #8]
    8526:	4651      	mov	r1, sl
    8528:	4638      	mov	r0, r7
    852a:	f006 fd67 	bl	effc <__aeabi_fmul>
    852e:	4957      	ldr	r1, [pc, #348]	; (868c <bouncing_balls(LEDStruct&)+0x24c>)
    8530:	f006 fe18 	bl	f164 <__aeabi_fdiv>
    8534:	f006 f99e 	bl	e874 <__aeabi_f2d>
    8538:	4602      	mov	r2, r0
    853a:	460b      	mov	r3, r1
    853c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    8540:	f006 f83a 	bl	e5b8 <__adddf3>
    8544:	f006 fbfc 	bl	ed40 <__aeabi_d2f>

		if (leds.bouncing_heights[i] < 0) {
    8548:	2100      	movs	r1, #0
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    854a:	f8c5 076c 	str.w	r0, [r5, #1900]	; 0x76c
    854e:	4607      	mov	r7, r0

		if (leds.bouncing_heights[i] < 0) {
    8550:	f006 fef2 	bl	f338 <__aeabi_fcmplt>
    8554:	bb70      	cbnz	r0, 85b4 <bouncing_balls(LEDStruct&)+0x174>
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
			leds.bouncing_tLast[i] = millis();

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       
    8556:	4638      	mov	r0, r7
    8558:	494e      	ldr	r1, [pc, #312]	; (8694 <bouncing_balls(LEDStruct&)+0x254>)
    855a:	f006 fd4f 	bl	effc <__aeabi_fmul>
    855e:	2100      	movs	r1, #0
    8560:	4607      	mov	r7, r0
    8562:	f006 fefd 	bl	f360 <__aeabi_fcmpge>
    8566:	b1e0      	cbz	r0, 85a2 <bouncing_balls(LEDStruct&)+0x162>
    8568:	4638      	mov	r0, r7
    856a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    856e:	f006 fc3d 	bl	edec <__addsf3>
    8572:	f006 ff09 	bl	f388 <__aeabi_f2iz>
    8576:	4607      	mov	r7, r0
    8578:	f8c5 77cc 	str.w	r7, [r5, #1996]	; 0x7cc

		if (leds.use_palette) {
    857c:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    8580:	2b00      	cmp	r3, #0
    8582:	f47f af76 	bne.w	8472 <bouncing_balls(LEDStruct&)+0x32>
			leds.led_data[leds.bouncing_pos[i]] = ColorFromPalette(leds.current_palette, leds.bouncing_index + i * ONE_SIDE / leds.number_of_balls, 255, leds.current_blending);
			leds.bouncing_index++;
		}
		else {
			leds.led_data[leds.bouncing_pos[i]] = CHSV((i * 40), 255, 255);
    8586:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    858a:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    858c:	4421      	add	r1, r4
    858e:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    8590:	f88d 8014 	strb.w	r8, [sp, #20]
    8594:	f88d 3015 	strb.w	r3, [sp, #21]
    8598:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    859c:	f003 fcd2 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    85a0:	e78d      	b.n	84be <bouncing_balls(LEDStruct&)+0x7e>
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
			leds.bouncing_tLast[i] = millis();

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       
    85a2:	4638      	mov	r0, r7
    85a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    85a8:	f006 fc1e 	bl	ede8 <__aeabi_fsub>
    85ac:	f006 feec 	bl	f388 <__aeabi_f2iz>
    85b0:	4607      	mov	r7, r0
    85b2:	e7e1      	b.n	8578 <bouncing_balls(LEDStruct&)+0x138>
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;

		if (leds.bouncing_heights[i] < 0) {
			leds.bouncing_heights[i] = 0;                            
    85b4:	2300      	movs	r3, #0
    85b6:	f8c5 376c 	str.w	r3, [r5, #1900]	; 0x76c
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
    85ba:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
    85be:	4650      	mov	r0, sl
    85c0:	f006 fd1c 	bl	effc <__aeabi_fmul>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    85c4:	4b34      	ldr	r3, [pc, #208]	; (8698 <bouncing_balls(LEDStruct&)+0x258>)
    85c6:	f8c5 078c 	str.w	r0, [r5, #1932]	; 0x78c
    85ca:	681b      	ldr	r3, [r3, #0]
    85cc:	9307      	str	r3, [sp, #28]
	return ret;
    85ce:	9b07      	ldr	r3, [sp, #28]
			leds.bouncing_tLast[i] = millis();
    85d0:	f8c5 37ec 	str.w	r3, [r5, #2028]	; 0x7ec

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
    85d4:	4931      	ldr	r1, [pc, #196]	; (869c <bouncing_balls(LEDStruct&)+0x25c>)
    85d6:	f006 feaf 	bl	f338 <__aeabi_fcmplt>
    85da:	b118      	cbz	r0, 85e4 <bouncing_balls(LEDStruct&)+0x1a4>
    85dc:	4b30      	ldr	r3, [pc, #192]	; (86a0 <bouncing_balls(LEDStruct&)+0x260>)
    85de:	681b      	ldr	r3, [r3, #0]
    85e0:	f8c5 378c 	str.w	r3, [r5, #1932]	; 0x78c

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    85e4:	2700      	movs	r7, #0
    85e6:	e7c7      	b.n	8578 <bouncing_balls(LEDStruct&)+0x138>
    85e8:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    85ec:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    85ee:	7822      	ldrb	r2, [r4, #0]
    85f0:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    85f4:	7862      	ldrb	r2, [r4, #1]
    85f6:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    85fa:	78a2      	ldrb	r2, [r4, #2]
    85fc:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    8600:	3403      	adds	r4, #3
    8602:	42a1      	cmp	r1, r4
    8604:	f1a3 0303 	sub.w	r3, r3, #3
    8608:	d1f1      	bne.n	85ee <bouncing_balls(LEDStruct&)+0x1ae>
		else {
			leds.led_data[leds.bouncing_pos[i]] = CHSV((i * 40), 255, 255);
		}
	}
	strip_sync(leds);
}
    860a:	b009      	add	sp, #36	; 0x24
    860c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8610:	4d24      	ldr	r5, [pc, #144]	; (86a4 <bouncing_balls(LEDStruct&)+0x264>)
    8612:	882b      	ldrh	r3, [r5, #0]
    8614:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    8618:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    861c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    8620:	3119      	adds	r1, #25
    8622:	b289      	uxth	r1, r1
    8624:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    8628:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    862c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8630:	3319      	adds	r3, #25
    8632:	b29b      	uxth	r3, r3
    8634:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    8638:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    863c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    8640:	3619      	adds	r6, #25
    8642:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8644:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    8648:	b2db      	uxtb	r3, r3
    864a:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    864e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    8652:	b2ff      	uxtb	r7, r7
    8654:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8658:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    865c:	123b      	asrs	r3, r7, #8
    865e:	1212      	asrs	r2, r2, #8
    8660:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    8664:	3302      	adds	r3, #2
    8666:	3201      	adds	r2, #1
    8668:	b2db      	uxtb	r3, r3
    866a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    866e:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8670:	802e      	strh	r6, [r5, #0]
    8672:	f7ff fe51 	bl	8318 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)>
	if (keyboard_update) { bouncing_balls_update(leds); }
    8676:	4b04      	ldr	r3, [pc, #16]	; (8688 <bouncing_balls(LEDStruct&)+0x248>)
    8678:	781b      	ldrb	r3, [r3, #0]
    867a:	2b00      	cmp	r3, #0
    867c:	f43f aeee 	beq.w	845c <bouncing_balls(LEDStruct&)+0x1c>
    8680:	4620      	mov	r0, r4
    8682:	f7ff feb1 	bl	83e8 <bouncing_balls_update(LEDStruct&)>
    8686:	e6e9      	b.n	845c <bouncing_balls(LEDStruct&)+0x1c>
    8688:	1fff9625 	.word	0x1fff9625
    868c:	447a0000 	.word	0x447a0000
    8690:	bfe00000 	.word	0xbfe00000
    8694:	42940000 	.word	0x42940000
    8698:	1fffb19c 	.word	0x1fffb19c
    869c:	3c23d70a 	.word	0x3c23d70a
    86a0:	1fff874c 	.word	0x1fff874c
    86a4:	1fff8788 	.word	0x1fff8788

000086a8 <lightsaber_update(LEDStruct&)>:
}


void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    86a8:	4b12      	ldr	r3, [pc, #72]	; (86f4 <lightsaber_update(LEDStruct&)+0x4c>)

}


void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
    86aa:	4a13      	ldr	r2, [pc, #76]	; (86f8 <lightsaber_update(LEDStruct&)+0x50>)
	switch (update_var) {
    86ac:	781b      	ldrb	r3, [r3, #0]

}


void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
    86ae:	2100      	movs	r1, #0
    86b0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    86b2:	2b03      	cmp	r3, #3
    86b4:	d807      	bhi.n	86c6 <lightsaber_update(LEDStruct&)+0x1e>
    86b6:	e8df f003 	tbb	[pc, r3]
    86ba:	0214      	.short	0x0214
    86bc:	080e      	.short	0x080e
		case 0:		leds.use_palette	= (bool)update_arg;		break; //a
		case 1:		leds.blade_color	= (uint8_t)update_arg;	break; //b
    86be:	4b0f      	ldr	r3, [pc, #60]	; (86fc <lightsaber_update(LEDStruct&)+0x54>)
    86c0:	881b      	ldrh	r3, [r3, #0]
    86c2:	f880 382e 	strb.w	r3, [r0, #2094]	; 0x82e
		case 2:		leds.delta_bright	= (uint8_t)update_arg;	break; //c
		case 3:		leds.hold_time		= (uint16_t)update_arg;	break; //d
		default:	break;
	}
	LEDDebug(leds);
    86c6:	f7f9 bdb9 	b.w	223c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.use_palette	= (bool)update_arg;		break; //a
		case 1:		leds.blade_color	= (uint8_t)update_arg;	break; //b
		case 2:		leds.delta_bright	= (uint8_t)update_arg;	break; //c
		case 3:		leds.hold_time		= (uint16_t)update_arg;	break; //d
    86ca:	4b0c      	ldr	r3, [pc, #48]	; (86fc <lightsaber_update(LEDStruct&)+0x54>)
    86cc:	881b      	ldrh	r3, [r3, #0]
    86ce:	f8a0 3830 	strh.w	r3, [r0, #2096]	; 0x830
		default:	break;
	}
	LEDDebug(leds);
    86d2:	f7f9 bdb3 	b.w	223c <LEDDebug(LEDStruct&)>
void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.use_palette	= (bool)update_arg;		break; //a
		case 1:		leds.blade_color	= (uint8_t)update_arg;	break; //b
		case 2:		leds.delta_bright	= (uint8_t)update_arg;	break; //c
    86d6:	4b09      	ldr	r3, [pc, #36]	; (86fc <lightsaber_update(LEDStruct&)+0x54>)
    86d8:	881b      	ldrh	r3, [r3, #0]
    86da:	f880 383d 	strb.w	r3, [r0, #2109]	; 0x83d
		case 3:		leds.hold_time		= (uint16_t)update_arg;	break; //d
		default:	break;
	}
	LEDDebug(leds);
    86de:	f7f9 bdad 	b.w	223c <LEDDebug(LEDStruct&)>


void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.use_palette	= (bool)update_arg;		break; //a
    86e2:	4b06      	ldr	r3, [pc, #24]	; (86fc <lightsaber_update(LEDStruct&)+0x54>)
    86e4:	881b      	ldrh	r3, [r3, #0]
    86e6:	3300      	adds	r3, #0
    86e8:	bf18      	it	ne
    86ea:	2301      	movne	r3, #1
    86ec:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
		case 1:		leds.blade_color	= (uint8_t)update_arg;	break; //b
		case 2:		leds.delta_bright	= (uint8_t)update_arg;	break; //c
		case 3:		leds.hold_time		= (uint16_t)update_arg;	break; //d
		default:	break;
	}
	LEDDebug(leds);
    86f0:	f7f9 bda4 	b.w	223c <LEDDebug(LEDStruct&)>
    86f4:	1fff9e8c 	.word	0x1fff9e8c
    86f8:	1fff9625 	.word	0x1fff9625
    86fc:	1fff9526 	.word	0x1fff9526

00008700 <lightsaber(LEDStruct&)>:
}


void lightsaber(LEDStruct& leds) {
    8700:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { lightsaber_init(leds); }
    8702:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void lightsaber(LEDStruct& leds) {
    8706:	b087      	sub	sp, #28
    8708:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { lightsaber_init(leds); }
    870a:	2a00      	cmp	r2, #0
    870c:	f040 809f 	bne.w	884e <lightsaber(LEDStruct&)+0x14e>
    8710:	48d1      	ldr	r0, [pc, #836]	; (8a58 <lightsaber(LEDStruct&)+0x358>)
	if (keyboard_update) { lightsaber_update(leds); }
    8712:	49d2      	ldr	r1, [pc, #840]	; (8a5c <lightsaber(LEDStruct&)+0x35c>)
    8714:	8803      	ldrh	r3, [r0, #0]
    8716:	7809      	ldrb	r1, [r1, #0]

void lightsaber_init(LEDStruct& leds, bool up = random8(2), uint8_t bc = random8(), uint8_t db = random8(50,80), uint16_t ht = random16(2000,4001)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
	leds.mode_type			= LIGHTSABER;
	leds.use_full_range		= 0;
    8718:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    871c:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    8720:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    8724:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    8728:	3619      	adds	r6, #25
    872a:	b2b6      	uxth	r6, r6
    872c:	eb06 2546 	add.w	r5, r6, r6, lsl #9
    8730:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8734:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    8738:	3519      	adds	r5, #25
    873a:	b2ad      	uxth	r5, r5
    873c:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    8740:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8744:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8748:	3319      	adds	r3, #25
    874a:	b29b      	uxth	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    874c:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    8750:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    8754:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8758:	eb03 2313 	add.w	r3, r3, r3, lsr #8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    875c:	3719      	adds	r7, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    875e:	b2db      	uxtb	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8760:	b2bf      	uxth	r7, r7
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8762:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
	leds.delta_bright		= db;
	leds.hold_time			= ht;
    8766:	f240 7ed1 	movw	lr, #2001	; 0x7d1
    876a:	11db      	asrs	r3, r3, #7
    876c:	fb0e fe07 	mul.w	lr, lr, r7
	leds.mode_type			= LIGHTSABER;
	leds.use_full_range		= 0;
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
    8770:	eb05 2515 	add.w	r5, r5, r5, lsr #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8774:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8778:	3332      	adds	r3, #50	; 0x32
	leds.delta_bright		= db;
	leds.hold_time			= ht;
    877a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
	LEDDebug(leds);
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
    877e:	f3c6 16c0 	ubfx	r6, r6, #7, #1
    8782:	b2db      	uxtb	r3, r3
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
	leds.delta_bright		= db;
	leds.hold_time			= ht;
    8784:	f50e 6efa 	add.w	lr, lr, #2000	; 0x7d0
	leds.use_palette		= up;
	leds.mode_type			= LIGHTSABER;
	leds.use_full_range		= 0;
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
    8788:	f884 283e 	strb.w	r2, [r4, #2110]	; 0x83e
	leds.blade_color		= bc;
	leds.delta_bright		= db;
	leds.hold_time			= ht;
	leds.tip_pos			= 0;
    878c:	f8a4 282c 	strh.w	r2, [r4, #2092]	; 0x82c
	leds.ls_val				= 0;
    8790:	f884 283c 	strb.w	r2, [r4, #2108]	; 0x83c
	leds.mode_type			= LIGHTSABER;
	leds.use_full_range		= 0;
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
    8794:	f884 582e 	strb.w	r5, [r4, #2094]	; 0x82e
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8798:	8007      	strh	r7, [r0, #0]
#ifndef LIGHTSABER_H
#define LIGHTSABER_H

void lightsaber_init(LEDStruct& leds, bool up = random8(2), uint8_t bc = random8(), uint8_t db = random8(50,80), uint16_t ht = random16(2000,4001)) {
	leds.mode_initialized	= 1;
    879a:	2501      	movs	r5, #1
	leds.use_palette		= up;
	leds.mode_type			= LIGHTSABER;
    879c:	201e      	movs	r0, #30
	leds.use_full_range		= 0;
	leds.delay_time			= 10;
    879e:	220a      	movs	r2, #10
#ifndef LIGHTSABER_H
#define LIGHTSABER_H

void lightsaber_init(LEDStruct& leds, bool up = random8(2), uint8_t bc = random8(), uint8_t db = random8(50,80), uint16_t ht = random16(2000,4001)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
    87a0:	f884 622a 	strb.w	r6, [r4, #554]	; 0x22a
	leds.use_full_range		= 0;
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
	leds.delta_bright		= db;
    87a4:	f884 383d 	strb.w	r3, [r4, #2109]	; 0x83d
	leds.hold_time			= ht;
    87a8:	f8a4 e830 	strh.w	lr, [r4, #2096]	; 0x830
#ifndef LIGHTSABER_H
#define LIGHTSABER_H

void lightsaber_init(LEDStruct& leds, bool up = random8(2), uint8_t bc = random8(), uint8_t db = random8(50,80), uint16_t ht = random16(2000,4001)) {
	leds.mode_initialized	= 1;
    87ac:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.use_palette		= up;
	leds.mode_type			= LIGHTSABER;
    87b0:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.use_full_range		= 0;
	leds.delay_time			= 10;
    87b4:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
	if (keyboard_update) { lightsaber_update(leds); }
    87b8:	2900      	cmp	r1, #0
    87ba:	f040 808c 	bne.w	88d6 <lightsaber(LEDStruct&)+0x1d6>
    87be:	460d      	mov	r5, r1
    87c0:	460a      	mov	r2, r1

	switch (leds.saber_stage) {
		case UP:
			if (leds.ls_val + leds.delta_bright >= 255 - leds.delta_bright) {
    87c2:	441a      	add	r2, r3
    87c4:	f1c3 00ff 	rsb	r0, r3, #255	; 0xff
    87c8:	4282      	cmp	r2, r0
    87ca:	f2c0 80cc 	blt.w	8966 <lightsaber(LEDStruct&)+0x266>
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
    87ce:	2e00      	cmp	r6, #0
    87d0:	f000 814a 	beq.w	8a68 <lightsaber(LEDStruct&)+0x368>
    87d4:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    87d8:	4aa1      	ldr	r2, [pc, #644]	; (8a60 <lightsaber(LEDStruct&)+0x360>)
    87da:	9300      	str	r3, [sp, #0]
    87dc:	ebc5 2305 	rsb	r3, r5, r5, lsl #8
    87e0:	fb82 1203 	smull	r1, r2, r2, r3
    87e4:	17db      	asrs	r3, r3, #31
    87e6:	ebc3 02e2 	rsb	r2, r3, r2, asr #3
    87ea:	b2d2      	uxtb	r2, r2
    87ec:	23ff      	movs	r3, #255	; 0xff
    87ee:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    87f2:	a805      	add	r0, sp, #20
    87f4:	f003 f9a8 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    87f8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    87fc:	1863      	adds	r3, r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    87fe:	f89d 5014 	ldrb.w	r5, [sp, #20]
        g = rhs.g;
    8802:	f89d 0015 	ldrb.w	r0, [sp, #21]
        b = rhs.b;
    8806:	f89d 2016 	ldrb.w	r2, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    880a:	5465      	strb	r5, [r4, r1]
        g = rhs.g;
    880c:	7058      	strb	r0, [r3, #1]
        b = rhs.b;
    880e:	709a      	strb	r2, [r3, #2]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
    8810:	f8b4 382c 	ldrh.w	r3, [r4, #2092]	; 0x82c
	switch (leds.saber_stage) {
		case UP:
			if (leds.ls_val + leds.delta_bright >= 255 - leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
    8814:	2200      	movs	r2, #0
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
    8816:	2b49      	cmp	r3, #73	; 0x49
	switch (leds.saber_stage) {
		case UP:
			if (leds.ls_val + leds.delta_bright >= 255 - leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
    8818:	f884 283c 	strb.w	r2, [r4, #2108]	; 0x83c
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
    881c:	f200 810d 	bhi.w	8a3a <lightsaber(LEDStruct&)+0x33a>
    8820:	3301      	adds	r3, #1
    8822:	f8a4 382c 	strh.w	r3, [r4, #2092]	; 0x82c
    8826:	4620      	mov	r0, r4
    8828:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
	if (keyboard_update) { lightsaber_update(leds); }
    882c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    882e:	781a      	ldrb	r2, [r3, #0]
    8830:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    8834:	785a      	ldrb	r2, [r3, #1]
    8836:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    883a:	789a      	ldrb	r2, [r3, #2]
    883c:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    8840:	3303      	adds	r3, #3
    8842:	4299      	cmp	r1, r3
    8844:	f1a0 0003 	sub.w	r0, r0, #3
    8848:	d1f1      	bne.n	882e <lightsaber(LEDStruct&)+0x12e>
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
			}
			break;
	}
	strip_sync(leds);
}
    884a:	b007      	add	sp, #28
    884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
	if (keyboard_update) { lightsaber_update(leds); }
    884e:	4b83      	ldr	r3, [pc, #524]	; (8a5c <lightsaber(LEDStruct&)+0x35c>)
    8850:	781b      	ldrb	r3, [r3, #0]
    8852:	2b00      	cmp	r3, #0
    8854:	d13f      	bne.n	88d6 <lightsaber(LEDStruct&)+0x1d6>

	switch (leds.saber_stage) {
    8856:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    885a:	2b01      	cmp	r3, #1
    885c:	d042      	beq.n	88e4 <lightsaber(LEDStruct&)+0x1e4>
    885e:	f0c0 8113 	bcc.w	8a88 <lightsaber(LEDStruct&)+0x388>
    8862:	2b02      	cmp	r3, #2
    8864:	d1df      	bne.n	8826 <lightsaber(LEDStruct&)+0x126>
			if (millis() > leds.ls_end && leds.tip_pos == ONE_SIDE-1) { leds.saber_stage = DOWN; leds.ls_val = 255; }
			if (millis() > leds.ls_end && leds.tip_pos == 0) { leds.saber_stage = UP; leds.ls_val = 0; }
			break;

		case DOWN:
			if (leds.ls_val - leds.delta_bright <= leds.delta_bright) {
    8866:	f894 283d 	ldrb.w	r2, [r4, #2109]	; 0x83d
    886a:	f894 383c 	ldrb.w	r3, [r4, #2108]	; 0x83c
    886e:	1a9b      	subs	r3, r3, r2
    8870:	429a      	cmp	r2, r3
    8872:	db51      	blt.n	8918 <lightsaber(LEDStruct&)+0x218>
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
    8874:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    8878:	2b00      	cmp	r3, #0
    887a:	f000 80cc 	beq.w	8a16 <lightsaber(LEDStruct&)+0x316>
    887e:	f8b4 582c 	ldrh.w	r5, [r4, #2092]	; 0x82c
    8882:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    8886:	4a76      	ldr	r2, [pc, #472]	; (8a60 <lightsaber(LEDStruct&)+0x360>)
    8888:	9300      	str	r3, [sp, #0]
    888a:	ebc5 2305 	rsb	r3, r5, r5, lsl #8
    888e:	fb82 1203 	smull	r1, r2, r2, r3
    8892:	17db      	asrs	r3, r3, #31
    8894:	ebc3 02e2 	rsb	r2, r3, r2, asr #3
    8898:	b2d2      	uxtb	r2, r2
    889a:	2300      	movs	r3, #0
    889c:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    88a0:	a805      	add	r0, sp, #20
    88a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    88a6:	f003 f94f 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    88aa:	1963      	adds	r3, r4, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    88ac:	f89d 0014 	ldrb.w	r0, [sp, #20]
        g = rhs.g;
    88b0:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    88b4:	f89d 2016 	ldrb.w	r2, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    88b8:	5560      	strb	r0, [r4, r5]
        g = rhs.g;
    88ba:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    88bc:	709a      	strb	r2, [r3, #2]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
    88be:	f8b4 382c 	ldrh.w	r3, [r4, #2092]	; 0x82c

		case DOWN:
			if (leds.ls_val - leds.delta_bright <= leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
    88c2:	22ff      	movs	r2, #255	; 0xff
    88c4:	f884 283c 	strb.w	r2, [r4, #2108]	; 0x83c
				if (leds.tip_pos > 0) { leds.tip_pos--; }
    88c8:	2b00      	cmp	r3, #0
    88ca:	f000 8094 	beq.w	89f6 <lightsaber(LEDStruct&)+0x2f6>
    88ce:	3b01      	subs	r3, #1
    88d0:	f8a4 382c 	strh.w	r3, [r4, #2092]	; 0x82c
    88d4:	e7a7      	b.n	8826 <lightsaber(LEDStruct&)+0x126>
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
	if (keyboard_update) { lightsaber_update(leds); }
    88d6:	4620      	mov	r0, r4
    88d8:	f7ff fee6 	bl	86a8 <lightsaber_update(LEDStruct&)>

	switch (leds.saber_stage) {
    88dc:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    88e0:	2b01      	cmp	r3, #1
    88e2:	d1bc      	bne.n	885e <lightsaber(LEDStruct&)+0x15e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    88e4:	4b5f      	ldr	r3, [pc, #380]	; (8a64 <lightsaber(LEDStruct&)+0x364>)
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
			}
			break;

		case WAIT:
			if (millis() > leds.ls_end && leds.tip_pos == ONE_SIDE-1) { leds.saber_stage = DOWN; leds.ls_val = 255; }
    88e6:	f8d4 2838 	ldr.w	r2, [r4, #2104]	; 0x838
    88ea:	6819      	ldr	r1, [r3, #0]
    88ec:	9103      	str	r1, [sp, #12]
	return ret;
    88ee:	9903      	ldr	r1, [sp, #12]
    88f0:	4291      	cmp	r1, r2
    88f2:	d903      	bls.n	88fc <lightsaber(LEDStruct&)+0x1fc>
    88f4:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    88f8:	294a      	cmp	r1, #74	; 0x4a
    88fa:	d058      	beq.n	89ae <lightsaber(LEDStruct&)+0x2ae>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    88fc:	681b      	ldr	r3, [r3, #0]
    88fe:	9304      	str	r3, [sp, #16]
	return ret;
    8900:	9b04      	ldr	r3, [sp, #16]
			if (millis() > leds.ls_end && leds.tip_pos == 0) { leds.saber_stage = UP; leds.ls_val = 0; }
    8902:	4293      	cmp	r3, r2
    8904:	d98f      	bls.n	8826 <lightsaber(LEDStruct&)+0x126>
    8906:	f8b4 382c 	ldrh.w	r3, [r4, #2092]	; 0x82c
    890a:	2b00      	cmp	r3, #0
    890c:	d18b      	bne.n	8826 <lightsaber(LEDStruct&)+0x126>
    890e:	f884 383e 	strb.w	r3, [r4, #2110]	; 0x83e
    8912:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    8916:	e786      	b.n	8826 <lightsaber(LEDStruct&)+0x126>
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
				}
			}
			else {
				leds.ls_val -= leds.delta_bright;
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
    8918:	f894 222a 	ldrb.w	r2, [r4, #554]	; 0x22a
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
				}
			}
			else {
				leds.ls_val -= leds.delta_bright;
    891c:	b2db      	uxtb	r3, r3
    891e:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
    8922:	2a00      	cmp	r2, #0
    8924:	d04d      	beq.n	89c2 <lightsaber(LEDStruct&)+0x2c2>
    8926:	f8b4 582c 	ldrh.w	r5, [r4, #2092]	; 0x82c
    892a:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
    892e:	494c      	ldr	r1, [pc, #304]	; (8a60 <lightsaber(LEDStruct&)+0x360>)
    8930:	9200      	str	r2, [sp, #0]
    8932:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    8936:	fb81 0102 	smull	r0, r1, r1, r2
    893a:	17d2      	asrs	r2, r2, #31
    893c:	ebc2 02e1 	rsb	r2, r2, r1, asr #3
    8940:	b2d2      	uxtb	r2, r2
    8942:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    8946:	a805      	add	r0, sp, #20
    8948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    894c:	f003 f8fc 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    8950:	1963      	adds	r3, r4, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8952:	f89d 0014 	ldrb.w	r0, [sp, #20]
        g = rhs.g;
    8956:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    895a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    895e:	5560      	strb	r0, [r4, r5]
        g = rhs.g;
    8960:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    8962:	709a      	strb	r2, [r3, #2]
    8964:	e75f      	b.n	8826 <lightsaber(LEDStruct&)+0x126>
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time;
				}
			}
			else {
				leds.ls_val += leds.delta_bright;
    8966:	440b      	add	r3, r1
    8968:	b2db      	uxtb	r3, r3
    896a:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
    896e:	2e00      	cmp	r6, #0
    8970:	d039      	beq.n	89e6 <lightsaber(LEDStruct&)+0x2e6>
    8972:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
    8976:	493a      	ldr	r1, [pc, #232]	; (8a60 <lightsaber(LEDStruct&)+0x360>)
    8978:	9200      	str	r2, [sp, #0]
    897a:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    897e:	fb81 0102 	smull	r0, r1, r1, r2
    8982:	17d2      	asrs	r2, r2, #31
    8984:	ebc2 02e1 	rsb	r2, r2, r1, asr #3
    8988:	b2d2      	uxtb	r2, r2
    898a:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    898e:	a805      	add	r0, sp, #20
    8990:	f003 f8da 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    8994:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8998:	1863      	adds	r3, r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    899a:	f89d 5014 	ldrb.w	r5, [sp, #20]
        g = rhs.g;
    899e:	f89d 0015 	ldrb.w	r0, [sp, #21]
        b = rhs.b;
    89a2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    89a6:	5465      	strb	r5, [r4, r1]
        g = rhs.g;
    89a8:	7058      	strb	r0, [r3, #1]
        b = rhs.b;
    89aa:	709a      	strb	r2, [r3, #2]
    89ac:	e73b      	b.n	8826 <lightsaber(LEDStruct&)+0x126>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89ae:	681b      	ldr	r3, [r3, #0]
    89b0:	9304      	str	r3, [sp, #16]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
			}
			break;

		case WAIT:
			if (millis() > leds.ls_end && leds.tip_pos == ONE_SIDE-1) { leds.saber_stage = DOWN; leds.ls_val = 255; }
    89b2:	2202      	movs	r2, #2
    89b4:	23ff      	movs	r3, #255	; 0xff
	return ret;
    89b6:	9904      	ldr	r1, [sp, #16]
    89b8:	f884 283e 	strb.w	r2, [r4, #2110]	; 0x83e
    89bc:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    89c0:	e731      	b.n	8826 <lightsaber(LEDStruct&)+0x126>
				}
			}
			else {
				leds.ls_val -= leds.delta_bright;
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
    89c2:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    89c6:	f894 282e 	ldrb.w	r2, [r4, #2094]	; 0x82e
    89ca:	f88d 3016 	strb.w	r3, [sp, #22]
    89ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    89d2:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    89d4:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    89d6:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    89d8:	f88d 2014 	strb.w	r2, [sp, #20]
    89dc:	f88d 3015 	strb.w	r3, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    89e0:	f003 fab0 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    89e4:	e71f      	b.n	8826 <lightsaber(LEDStruct&)+0x126>
				}
			}
			else {
				leds.ls_val += leds.delta_bright;
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
    89e6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    89ea:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    89ec:	f894 282e 	ldrb.w	r2, [r4, #2094]	; 0x82e
    89f0:	f88d 3016 	strb.w	r3, [sp, #22]
    89f4:	e7ee      	b.n	89d4 <lightsaber(LEDStruct&)+0x2d4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89f6:	4b1b      	ldr	r3, [pc, #108]	; (8a64 <lightsaber(LEDStruct&)+0x364>)
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
				else {
					leds.saber_stage = WAIT;
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
    89f8:	f8b4 2830 	ldrh.w	r2, [r4, #2096]	; 0x830
    89fc:	681b      	ldr	r3, [r3, #0]
    89fe:	9305      	str	r3, [sp, #20]
	return ret;
    8a00:	9b05      	ldr	r3, [sp, #20]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
				else {
					leds.saber_stage = WAIT;
					leds.ls_begin = millis();
    8a02:	f8c4 3834 	str.w	r3, [r4, #2100]	; 0x834
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
    8a06:	eb03 0352 	add.w	r3, r3, r2, lsr #1
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
				else {
					leds.saber_stage = WAIT;
    8a0a:	2201      	movs	r2, #1
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
    8a0c:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
				else {
					leds.saber_stage = WAIT;
    8a10:	f884 283e 	strb.w	r2, [r4, #2110]	; 0x83e
    8a14:	e707      	b.n	8826 <lightsaber(LEDStruct&)+0x126>
			break;

		case DOWN:
			if (leds.ls_val - leds.delta_bright <= leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
    8a16:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    8a1a:	f894 282e 	ldrb.w	r2, [r4, #2094]	; 0x82e
    8a1e:	f88d 3016 	strb.w	r3, [sp, #22]
    8a22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8a26:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    8a28:	4421      	add	r1, r4
    8a2a:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    8a2c:	f88d 2014 	strb.w	r2, [sp, #20]
    8a30:	f88d 3015 	strb.w	r3, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    8a34:	f003 fa86 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    8a38:	e741      	b.n	88be <lightsaber(LEDStruct&)+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8a3a:	4b0a      	ldr	r3, [pc, #40]	; (8a64 <lightsaber(LEDStruct&)+0x364>)
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
				else { 
					leds.saber_stage = WAIT; 
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time;
    8a3c:	f8b4 2830 	ldrh.w	r2, [r4, #2096]	; 0x830
    8a40:	681b      	ldr	r3, [r3, #0]
    8a42:	9302      	str	r3, [sp, #8]
	return ret;
    8a44:	9b02      	ldr	r3, [sp, #8]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
				else { 
					leds.saber_stage = WAIT; 
					leds.ls_begin = millis();
    8a46:	f8c4 3834 	str.w	r3, [r4, #2100]	; 0x834
					leds.ls_end = leds.ls_begin + leds.hold_time;
    8a4a:	4413      	add	r3, r2
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
				else { 
					leds.saber_stage = WAIT; 
    8a4c:	2201      	movs	r2, #1
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time;
    8a4e:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
				else { 
					leds.saber_stage = WAIT; 
    8a52:	f884 283e 	strb.w	r2, [r4, #2110]	; 0x83e
    8a56:	e6e6      	b.n	8826 <lightsaber(LEDStruct&)+0x126>
    8a58:	1fff8788 	.word	0x1fff8788
    8a5c:	1fff9625 	.word	0x1fff9625
    8a60:	1b4e81b5 	.word	0x1b4e81b5
    8a64:	1fffb19c 	.word	0x1fffb19c
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    8a68:	f894 382e 	ldrb.w	r3, [r4, #2094]	; 0x82e
    8a6c:	f88d 3014 	strb.w	r3, [sp, #20]

	switch (leds.saber_stage) {
		case UP:
			if (leds.ls_val + leds.delta_bright >= 255 - leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
    8a70:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8a74:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    8a76:	4421      	add	r1, r4
    8a78:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    8a7a:	f88d 3015 	strb.w	r3, [sp, #21]
    8a7e:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    8a82:	f003 fa5f 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    8a86:	e6c3      	b.n	8810 <lightsaber(LEDStruct&)+0x110>
    8a88:	f894 183c 	ldrb.w	r1, [r4, #2108]	; 0x83c
    8a8c:	f894 383d 	ldrb.w	r3, [r4, #2109]	; 0x83d
    8a90:	f894 622a 	ldrb.w	r6, [r4, #554]	; 0x22a
    8a94:	f8b4 582c 	ldrh.w	r5, [r4, #2092]	; 0x82c
    8a98:	460a      	mov	r2, r1
    8a9a:	e692      	b.n	87c2 <lightsaber(LEDStruct&)+0xc2>

00008a9c <twinkle_update(LEDStruct&)>:
}


void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    8a9c:	4b1c      	ldr	r3, [pc, #112]	; (8b10 <twinkle_update(LEDStruct&)+0x74>)
	
}


void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
    8a9e:	4a1d      	ldr	r2, [pc, #116]	; (8b14 <twinkle_update(LEDStruct&)+0x78>)
	switch (update_var) {
    8aa0:	781b      	ldrb	r3, [r3, #0]
	
}


void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
    8aa2:	2100      	movs	r1, #0
    8aa4:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    8aa6:	2b04      	cmp	r3, #4
    8aa8:	d808      	bhi.n	8abc <twinkle_update(LEDStruct&)+0x20>
    8aaa:	e8df f003 	tbb	[pc, r3]
    8aae:	2112      	.short	0x2112
    8ab0:	2703      	.short	0x2703
    8ab2:	09          	.byte	0x09
    8ab3:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg; //a
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
    8ab4:	4b18      	ldr	r3, [pc, #96]	; (8b18 <twinkle_update(LEDStruct&)+0x7c>)
    8ab6:	881b      	ldrh	r3, [r3, #0]
    8ab8:	f880 3840 	strb.w	r3, [r0, #2112]	; 0x840
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    8abc:	f7f9 bbbe 	b.w	223c <LEDDebug(LEDStruct&)>
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e
    8ac0:	4b15      	ldr	r3, [pc, #84]	; (8b18 <twinkle_update(LEDStruct&)+0x7c>)
    8ac2:	881b      	ldrh	r3, [r3, #0]
    8ac4:	3300      	adds	r3, #0
    8ac6:	bf18      	it	ne
    8ac8:	2301      	movne	r3, #1
    8aca:	f880 3842 	strb.w	r3, [r0, #2114]	; 0x842

	}
	LEDDebug(leds);
    8ace:	f7f9 bbb5 	b.w	223c <LEDDebug(LEDStruct&)>

void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:
			leds.use_full_range = (bool)update_arg; //a
    8ad2:	4b11      	ldr	r3, [pc, #68]	; (8b18 <twinkle_update(LEDStruct&)+0x7c>)
    8ad4:	881b      	ldrh	r3, [r3, #0]
    8ad6:	2b00      	cmp	r3, #0
    8ad8:	bf14      	ite	ne
    8ada:	2301      	movne	r3, #1
    8adc:	2300      	moveq	r3, #0
    8ade:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    8ae2:	bf14      	ite	ne
    8ae4:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    8ae6:	234b      	moveq	r3, #75	; 0x4b
    8ae8:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    8aec:	f7f9 bba6 	b.w	223c <LEDDebug(LEDStruct&)>
		case 0:
			leds.use_full_range = (bool)update_arg; //a
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
    8af0:	4b09      	ldr	r3, [pc, #36]	; (8b18 <twinkle_update(LEDStruct&)+0x7c>)
    8af2:	881b      	ldrh	r3, [r3, #0]
    8af4:	f880 383f 	strb.w	r3, [r0, #2111]	; 0x83f
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    8af8:	f7f9 bba0 	b.w	223c <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
    8afc:	4b06      	ldr	r3, [pc, #24]	; (8b18 <twinkle_update(LEDStruct&)+0x7c>)
    8afe:	881b      	ldrh	r3, [r3, #0]
    8b00:	3300      	adds	r3, #0
    8b02:	bf18      	it	ne
    8b04:	2301      	movne	r3, #1
    8b06:	f880 3841 	strb.w	r3, [r0, #2113]	; 0x841
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    8b0a:	f7f9 bb97 	b.w	223c <LEDDebug(LEDStruct&)>
    8b0e:	bf00      	nop
    8b10:	1fff9e8c 	.word	0x1fff9e8c
    8b14:	1fff9625 	.word	0x1fff9625
    8b18:	1fff9526 	.word	0x1fff9526

00008b1c <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)>:
	c.g = qsub8(c.g, cooling);
	c.b = qsub8(c.b, cooling * 2);
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
    8b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
    8b1e:	f891 483f 	ldrb.w	r4, [r1, #2111]	; 0x83f
    8b22:	f1c4 0408 	rsb	r4, r4, #8
    8b26:	fa22 f404 	lsr.w	r4, r2, r4
	uint8_t fastcycle8 = ticks;
	uint16_t slowcycle16 = (ticks >> 8) + salt;
    8b2a:	f3c4 2207 	ubfx	r2, r4, #8, #8
    8b2e:	441a      	add	r2, r3
	c.g = qsub8(c.g, cooling);
	c.b = qsub8(c.b, cooling * 2);
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
    8b30:	460e      	mov	r6, r1
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
	uint8_t fastcycle8 = ticks;
	uint16_t slowcycle16 = (ticks >> 8) + salt;
	slowcycle16 += sin8(slowcycle16);
    8b32:	b2d1      	uxtb	r1, r2
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    8b34:	064f      	lsls	r7, r1, #25
	c.g = qsub8(c.g, cooling);
	c.b = qsub8(c.b, cooling * 2);
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
    8b36:	b085      	sub	sp, #20
    8b38:	4605      	mov	r5, r0
    8b3a:	d55d      	bpl.n	8bf8 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xdc>
        offset = (uint8_t)255 - offset;
    8b3c:	43c9      	mvns	r1, r1
    8b3e:	b2c8      	uxtb	r0, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    8b40:	f000 010f 	and.w	r1, r0, #15
    if( theta & 0x40) secoffset++;
    8b44:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    8b46:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    8b4a:	4f2f      	ldr	r7, [pc, #188]	; (8c08 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xec>)
    8b4c:	1100      	asrs	r0, r0, #4
    8b4e:	0040      	lsls	r0, r0, #1
    8b50:	eb07 0e00 	add.w	lr, r7, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    8b54:	5c38      	ldrb	r0, [r7, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    8b56:	f89e 7001 	ldrb.w	r7, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    8b5a:	fb17 f101 	smulbb	r1, r7, r1
    8b5e:	eb00 1121 	add.w	r1, r0, r1, asr #4
    8b62:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    8b64:	0610      	lsls	r0, r2, #24
    8b66:	bf48      	it	mi
    8b68:	4249      	negmi	r1, r1
    8b6a:	b249      	sxtb	r1, r1
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
	uint8_t fastcycle8 = ticks;
	uint16_t slowcycle16 = (ticks >> 8) + salt;
	slowcycle16 += sin8(slowcycle16);
	slowcycle16 = (slowcycle16 * 2053) + 1384;
    8b6c:	3980      	subs	r1, #128	; 0x80
    8b6e:	fa52 f281 	uxtab	r2, r2, r1
    8b72:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    8b76:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    8b7a:	f502 62ad 	add.w	r2, r2, #1384	; 0x568
	uint8_t slowcycle8 = (slowcycle16 & 0xFF) + (slowcycle16 >> 8);
    8b7e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    8b82:	f002 02ff 	and.w	r2, r2, #255	; 0xff

	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
    8b86:	f896 1840 	ldrb.w	r1, [r6, #2112]	; 0x840
    8b8a:	f3c2 0042 	ubfx	r0, r2, #1, #3
    8b8e:	4288      	cmp	r0, r1
    8b90:	da2b      	bge.n	8bea <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xce>
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
	uint8_t fastcycle8 = ticks;
    8b92:	b2e7      	uxtb	r7, r4
}


uint8_t attackDecayWave8(uint8_t i)
{
	if (i < 86) {
    8b94:	2f55      	cmp	r7, #85	; 0x55
    8b96:	d923      	bls.n	8be0 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xc4>
		return i * 3;
	}
	else {
		i -= 86;
    8b98:	f1a7 0156 	sub.w	r1, r7, #86	; 0x56
    8b9c:	b2c9      	uxtb	r1, r1
		return 255 - (i + (i / 2));
    8b9e:	eb01 0151 	add.w	r1, r1, r1, lsr #1
	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
    8ba2:	1ad2      	subs	r2, r2, r3
	if (i < 86) {
		return i * 3;
	}
	else {
		i -= 86;
		return 255 - (i + (i / 2));
    8ba4:	43c9      	mvns	r1, r1
	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
    8ba6:	b2d2      	uxtb	r2, r2
	if (i < 86) {
		return i * 3;
	}
	else {
		i -= 86;
		return 255 - (i + (i / 2));
    8ba8:	b2c9      	uxtb	r1, r1
	}

	uint8_t hue = slowcycle8 - salt;
	CRGB c;
	if (bright > 0) {
		c = ColorFromPalette(leds.current_palette, hue, bright, NOBLEND);
    8baa:	2000      	movs	r0, #0
    8bac:	460b      	mov	r3, r1
    8bae:	9000      	str	r0, [sp, #0]
    8bb0:	f506 71e4 	add.w	r1, r6, #456	; 0x1c8
    8bb4:	a803      	add	r0, sp, #12
    8bb6:	f002 ffc7 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    8bba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8bbe:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    8bc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8bc6:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    8bc8:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    8bca:	70ab      	strb	r3, [r5, #2]
		if (leds.cool_like_incandescent == 1) {
    8bcc:	f896 3841 	ldrb.w	r3, [r6, #2113]	; 0x841
    8bd0:	b17b      	cbz	r3, 8bf2 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xd6>
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;
    8bd2:	0623      	lsls	r3, r4, #24
    8bd4:	d50d      	bpl.n	8bf2 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xd6>
    8bd6:	4639      	mov	r1, r7
    8bd8:	4628      	mov	r0, r5
    8bda:	f7f7 fc59 	bl	490 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.16]>
    8bde:	e008      	b.n	8bf2 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xd6>


uint8_t attackDecayWave8(uint8_t i)
{
	if (i < 86) {
		return i * 3;
    8be0:	eb07 0147 	add.w	r1, r7, r7, lsl #1
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
	CRGB c;
	if (bright > 0) {
    8be4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8be8:	d10b      	bne.n	8c02 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xe6>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    8bea:	2300      	movs	r3, #0
    8bec:	702b      	strb	r3, [r5, #0]
        g = (colorcode >>  8) & 0xFF;
    8bee:	706b      	strb	r3, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    8bf0:	70ab      	strb	r3, [r5, #2]
	}
	else {
		c = CRGB::Black;
	}
	return c;
}
    8bf2:	4628      	mov	r0, r5
    8bf4:	b005      	add	sp, #20
    8bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    8bf8:	f001 003f 	and.w	r0, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    8bfc:	f001 010f 	and.w	r1, r1, #15
    8c00:	e7a3      	b.n	8b4a <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0x2e>
	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
    8c02:	1ad2      	subs	r2, r2, r3
    8c04:	b2d2      	uxtb	r2, r2
    8c06:	e7d0      	b.n	8baa <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0x8e>
    8c08:	000112bc 	.word	0x000112bc

00008c0c <twinkle(LEDStruct&)>:
	return c;
}



void twinkle(LEDStruct& leds) {
    8c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { twinkle_init(leds); }
    8c10:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	return c;
}



void twinkle(LEDStruct& leds) {
    8c14:	b08b      	sub	sp, #44	; 0x2c
    8c16:	4683      	mov	fp, r0
	if (!leds.mode_initialized) { twinkle_init(leds); }
    8c18:	2b00      	cmp	r3, #0
    8c1a:	d15e      	bne.n	8cda <twinkle(LEDStruct&)+0xce>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c1c:	48d1      	ldr	r0, [pc, #836]	; (8f64 <twinkle(LEDStruct&)+0x358>)
    8c1e:	8803      	ldrh	r3, [r0, #0]
    8c20:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8c24:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8c28:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8c2c:	3219      	adds	r2, #25
    8c2e:	b292      	uxth	r2, r2
    8c30:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    8c34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8c38:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8c3c:	3319      	adds	r3, #25
    8c3e:	b29b      	uxth	r3, r3
    8c40:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    8c44:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8c48:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    8c4c:	3119      	adds	r1, #25
    8c4e:	b289      	uxth	r1, r1
    8c50:	eb01 2441 	add.w	r4, r1, r1, lsl #9
    8c54:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    8c58:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    8c5c:	3419      	adds	r4, #25
    8c5e:	b2a4      	uxth	r4, r4
    8c60:	eb04 2544 	add.w	r5, r4, r4, lsl #9
    8c64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8c68:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c6c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c70:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c72:	3519      	adds	r5, #25
    8c74:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8c76:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    8c7a:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    8c82:	f3c2 16c0 	ubfx	r6, r2, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8c86:	eb04 2414 	add.w	r4, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c8a:	f3c1 1281 	ubfx	r2, r1, #6, #2
    8c8e:	121b      	asrs	r3, r3, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8c90:	eb05 2115 	add.w	r1, r5, r5, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c94:	8005      	strh	r5, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c96:	3303      	adds	r3, #3
#ifndef TWINKLE_H
#define TWINKLE_H

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
    8c98:	2501      	movs	r5, #1
	leds.mode_type			= TWINKLE;
    8c9a:	271f      	movs	r7, #31
}



void twinkle(LEDStruct& leds) {
	if (!leds.mode_initialized) { twinkle_init(leds); }
    8c9c:	f3c1 10c0 	ubfx	r0, r1, #7, #1
    8ca0:	f3c4 11c0 	ubfx	r1, r4, #7, #1

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= TWINKLE;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    8ca4:	240f      	movs	r4, #15

	leds.use_full_range		= ufr;
    8ca6:	f88b 61c4 	strb.w	r6, [fp, #452]	; 0x1c4
    8caa:	b2db      	uxtb	r3, r3
    8cac:	3203      	adds	r2, #3
#ifndef TWINKLE_H
#define TWINKLE_H

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
    8cae:	f88b 522e 	strb.w	r5, [fp, #558]	; 0x22e
	leds.mode_type			= TWINKLE;
	leds.use_palette		= 1;
    8cb2:	f88b 522a 	strb.w	r5, [fp, #554]	; 0x22a
#ifndef TWINKLE_H
#define TWINKLE_H

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= TWINKLE;
    8cb6:	f88b 722d 	strb.w	r7, [fp, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    8cba:	f88b 41c3 	strb.w	r4, [fp, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    8cbe:	2e00      	cmp	r6, #0
    8cc0:	f040 80e3 	bne.w	8e8a <twinkle(LEDStruct&)+0x27e>
	else					 { leds.strip_range = ONE_SIDE; }
    8cc4:	244b      	movs	r4, #75	; 0x4b
    8cc6:	f8ab 433c 	strh.w	r4, [fp, #828]	; 0x33c

	leds.twinkle_speed			= ts;
    8cca:	f88b 383f 	strb.w	r3, [fp, #2111]	; 0x83f
	leds.twinkle_density		= td;
    8cce:	f88b 2840 	strb.w	r2, [fp, #2112]	; 0x840
	leds.cool_like_incandescent = cli;
    8cd2:	f88b 1841 	strb.w	r1, [fp, #2113]	; 0x841
	leds.auto_select_bg_color	= asbg;
    8cd6:	f88b 0842 	strb.w	r0, [fp, #2114]	; 0x842



void twinkle(LEDStruct& leds) {
	if (!leds.mode_initialized) { twinkle_init(leds); }
	if (keyboard_update) { twinkle_update(leds); }
    8cda:	4ba3      	ldr	r3, [pc, #652]	; (8f68 <twinkle(LEDStruct&)+0x35c>)
    8cdc:	781b      	ldrb	r3, [r3, #0]
    8cde:	2b00      	cmp	r3, #0
    8ce0:	f040 80d7 	bne.w	8e92 <twinkle(LEDStruct&)+0x286>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8ce4:	4aa1      	ldr	r2, [pc, #644]	; (8f6c <twinkle(LEDStruct&)+0x360>)

	uint32_t clock32 = millis();

	CRGB bg;

	if ((leds.auto_select_bg_color == 1) && (leds.current_palette[0] == leds.current_palette[1])) {
    8ce6:	f89b 3842 	ldrb.w	r3, [fp, #2114]	; 0x842
    8cea:	6812      	ldr	r2, [r2, #0]
    8cec:	9209      	str	r2, [sp, #36]	; 0x24
	return ret;
    8cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8cf0:	9202      	str	r2, [sp, #8]
    8cf2:	b133      	cbz	r3, 8d02 <twinkle(LEDStruct&)+0xf6>
};


inline __attribute__((always_inline)) bool operator== (const CRGB& lhs, const CRGB& rhs)
{
    return (lhs.r == rhs.r) && (lhs.g == rhs.g) && (lhs.b == rhs.b);
    8cf4:	f89b 11c8 	ldrb.w	r1, [fp, #456]	; 0x1c8
    8cf8:	f89b 31cb 	ldrb.w	r3, [fp, #459]	; 0x1cb
    8cfc:	428b      	cmp	r3, r1
    8cfe:	f000 80cc 	beq.w	8e9a <twinkle(LEDStruct&)+0x28e>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    8d02:	2300      	movs	r3, #0
    8d04:	f88d 3018 	strb.w	r3, [sp, #24]
        g = (colorcode >>  8) & 0xFF;
    8d08:	f88d 3019 	strb.w	r3, [sp, #25]
        b = (colorcode >>  0) & 0xFF;
    8d0c:	f88d 301a 	strb.w	r3, [sp, #26]
    8d10:	9305      	str	r3, [sp, #20]
	else {
		bg = CRGB::Black;
	}
	uint8_t bg_bri = bg.getAverageLight();

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    8d12:	f8bb 333c 	ldrh.w	r3, [fp, #828]	; 0x33c
    8d16:	2b00      	cmp	r3, #0
    8d18:	f000 8091 	beq.w	8e3e <twinkle(LEDStruct&)+0x232>
    8d1c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    8d20:	9303      	str	r3, [sp, #12]
    8d22:	f04f 0a00 	mov.w	sl, #0
    8d26:	f642 444a 	movw	r4, #11338	; 0x2c4a
    8d2a:	e030      	b.n	8d8e <twinkle(LEDStruct&)+0x182>
		int16_t deltabright = cbright - bg_bri;
		if (deltabright >= 32 || (!bg)) {
			leds.led_data[i] = c;
		}
		else if (deltabright > 0) {
			leds.led_data[i] = blend(bg, c, deltabright * 8);
    8d2c:	9a05      	ldr	r2, [sp, #20]
    }

    /// this allows testing a CRGB for zero-ness
    inline operator bool() const __attribute__((always_inline))
    {
        return r || g || b;
    8d2e:	f89d 8018 	ldrb.w	r8, [sp, #24]
    8d32:	9704      	str	r7, [sp, #16]
    8d34:	1a9b      	subs	r3, r3, r2
    8d36:	00db      	lsls	r3, r3, #3
    8d38:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    8d3c:	aa07      	add	r2, sp, #28
    8d3e:	a906      	add	r1, sp, #24
    8d40:	a808      	add	r0, sp, #32
    8d42:	f1b8 0f00 	cmp.w	r8, #0
    8d46:	d106      	bne.n	8d56 <twinkle(LEDStruct&)+0x14a>
    8d48:	f89d 5019 	ldrb.w	r5, [sp, #25]
    8d4c:	b91d      	cbnz	r5, 8d56 <twinkle(LEDStruct&)+0x14a>

		CRGB c = computeOneTwinkle(leds, myclock30, myunique8);

		uint8_t cbright = c.getAverageLight();
		int16_t deltabright = cbright - bg_bri;
		if (deltabright >= 32 || (!bg)) {
    8d4e:	f89d 501a 	ldrb.w	r5, [sp, #26]
    8d52:	2d00      	cmp	r5, #0
    8d54:	d063      	beq.n	8e1e <twinkle(LEDStruct&)+0x212>
			leds.led_data[i] = c;
		}
		else if (deltabright > 0) {
    8d56:	f1b9 0f00 	cmp.w	r9, #0
    8d5a:	f340 8088 	ble.w	8e6e <twinkle(LEDStruct&)+0x262>
			leds.led_data[i] = blend(bg, c, deltabright * 8);
    8d5e:	f002 fec3 	bl	bae8 <blend(CRGB const&, CRGB const&, unsigned char)>
    8d62:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    8d66:	eb0b 0302 	add.w	r3, fp, r2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8d6a:	f89d 5020 	ldrb.w	r5, [sp, #32]
        g = rhs.g;
    8d6e:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
        b = rhs.b;
    8d72:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8d76:	f80b 5002 	strb.w	r5, [fp, r2]
        g = rhs.g;
    8d7a:	7058      	strb	r0, [r3, #1]
        b = rhs.b;
    8d7c:	7099      	strb	r1, [r3, #2]
	else {
		bg = CRGB::Black;
	}
	uint8_t bg_bri = bg.getAverageLight();

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    8d7e:	f10a 0a01 	add.w	sl, sl, #1
    8d82:	f8bb 333c 	ldrh.w	r3, [fp, #828]	; 0x33c
    8d86:	fa1f fa8a 	uxth.w	sl, sl
    8d8a:	4553      	cmp	r3, sl
    8d8c:	d957      	bls.n	8e3e <twinkle(LEDStruct&)+0x232>
		PRNG16 = (uint16_t)(PRNG16 * 2053) + 1384;
    8d8e:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    8d92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8d96:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
    8d9a:	b29b      	uxth	r3, r3
		uint16_t myclockoffset16 = PRNG16;
		PRNG16 = (uint16_t)(PRNG16 * 2053) + 1384;
    8d9c:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    8da0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    8da4:	f504 64ad 	add.w	r4, r4, #1384	; 0x568
    8da8:	b2a4      	uxth	r4, r4
		uint8_t myspeedmultiplierQ5_3 = ((((PRNG16 & 0xFF) >> 4) + (PRNG16 & 0x0F)) & 0x0F) + 0x08;
		uint32_t myclock30 = (uint32_t)((clock32 * myspeedmultiplierQ5_3) >> 3) + myclockoffset16;
		uint8_t myunique8 = PRNG16 >> 8;

		CRGB c = computeOneTwinkle(leds, myclock30, myunique8);
    8daa:	eb04 1214 	add.w	r2, r4, r4, lsr #4
    8dae:	9902      	ldr	r1, [sp, #8]
    8db0:	f002 020f 	and.w	r2, r2, #15
    8db4:	3208      	adds	r2, #8
    8db6:	fb01 f202 	mul.w	r2, r1, r2
    8dba:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    8dbe:	4659      	mov	r1, fp
    8dc0:	0a23      	lsrs	r3, r4, #8
    8dc2:	a807      	add	r0, sp, #28
    8dc4:	f7ff feaa 	bl	8b1c <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)>
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
    8dc8:	f89d 601d 	ldrb.w	r6, [sp, #29]
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    8dcc:	f89d 301e 	ldrb.w	r3, [sp, #30]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    8dd0:	f89d e01c 	ldrb.w	lr, [sp, #28]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    8dd4:	9301      	str	r3, [sp, #4]
    8dd6:	b230      	sxth	r0, r6
    8dd8:	461d      	mov	r5, r3
    8dda:	fa0f f18e 	sxth.w	r1, lr
    8dde:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8de2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    8de6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    8dea:	b22f      	sxth	r7, r5
    8dec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8df0:	4410      	add	r0, r2
    8df2:	4419      	add	r1, r3
    8df4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    8df8:	1200      	asrs	r0, r0, #8
    8dfa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8dfe:	eb00 2221 	add.w	r2, r0, r1, asr #8
    8e02:	443b      	add	r3, r7
    8e04:	eb02 2323 	add.w	r3, r2, r3, asr #8

		uint8_t cbright = c.getAverageLight();
		int16_t deltabright = cbright - bg_bri;
    8e08:	9a03      	ldr	r2, [sp, #12]
    8e0a:	b2db      	uxtb	r3, r3
    8e0c:	ebc2 0903 	rsb	r9, r2, r3
    8e10:	eb0a 074a 	add.w	r7, sl, sl, lsl #1
		if (deltabright >= 32 || (!bg)) {
    8e14:	f1b9 0f1f 	cmp.w	r9, #31
    8e18:	eb0b 0c07 	add.w	ip, fp, r7
    8e1c:	dd86      	ble.n	8d2c <twinkle(LEDStruct&)+0x120>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8e1e:	f80b e007 	strb.w	lr, [fp, r7]
        g = rhs.g;
        b = rhs.b;
    8e22:	f89d 3004 	ldrb.w	r3, [sp, #4]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    8e26:	f88c 6001 	strb.w	r6, [ip, #1]
        b = rhs.b;
    8e2a:	f88c 3002 	strb.w	r3, [ip, #2]
	else {
		bg = CRGB::Black;
	}
	uint8_t bg_bri = bg.getAverageLight();

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    8e2e:	f10a 0a01 	add.w	sl, sl, #1
    8e32:	f8bb 333c 	ldrh.w	r3, [fp, #828]	; 0x33c
    8e36:	fa1f fa8a 	uxth.w	sl, sl
    8e3a:	4553      	cmp	r3, sl
    8e3c:	d8a7      	bhi.n	8d8e <twinkle(LEDStruct&)+0x182>
		else {
			leds.led_data[i] = bg;
		}
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    8e3e:	f89b 31c4 	ldrb.w	r3, [fp, #452]	; 0x1c4
    8e42:	b98b      	cbnz	r3, 8e68 <twinkle(LEDStruct&)+0x25c>
    8e44:	465a      	mov	r2, fp
    8e46:	f10b 00e1 	add.w	r0, fp, #225	; 0xe1
    8e4a:	465b      	mov	r3, fp
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8e4c:	7819      	ldrb	r1, [r3, #0]
    8e4e:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    8e52:	7859      	ldrb	r1, [r3, #1]
    8e54:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    8e58:	7899      	ldrb	r1, [r3, #2]
    8e5a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    8e5e:	3303      	adds	r3, #3
    8e60:	4283      	cmp	r3, r0
    8e62:	f1a2 0203 	sub.w	r2, r2, #3
    8e66:	d1f1      	bne.n	8e4c <twinkle(LEDStruct&)+0x240>
}
    8e68:	b00b      	add	sp, #44	; 0x2c
    8e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8e6e:	9904      	ldr	r1, [sp, #16]
        g = rhs.g;
    8e70:	f89d 2019 	ldrb.w	r2, [sp, #25]
        b = rhs.b;
    8e74:	f89d 301a 	ldrb.w	r3, [sp, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8e78:	f80b 8001 	strb.w	r8, [fp, r1]
    8e7c:	eb0b 0c01 	add.w	ip, fp, r1
        g = rhs.g;
    8e80:	f88c 2001 	strb.w	r2, [ip, #1]
        b = rhs.b;
    8e84:	f88c 3002 	strb.w	r3, [ip, #2]
    8e88:	e779      	b.n	8d7e <twinkle(LEDStruct&)+0x172>
	leds.mode_type			= TWINKLE;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    8e8a:	2496      	movs	r4, #150	; 0x96
    8e8c:	f8ab 433c 	strh.w	r4, [fp, #828]	; 0x33c
    8e90:	e71b      	b.n	8cca <twinkle(LEDStruct&)+0xbe>



void twinkle(LEDStruct& leds) {
	if (!leds.mode_initialized) { twinkle_init(leds); }
	if (keyboard_update) { twinkle_update(leds); }
    8e92:	4658      	mov	r0, fp
    8e94:	f7ff fe02 	bl	8a9c <twinkle_update(LEDStruct&)>
    8e98:	e724      	b.n	8ce4 <twinkle(LEDStruct&)+0xd8>
};


inline __attribute__((always_inline)) bool operator== (const CRGB& lhs, const CRGB& rhs)
{
    return (lhs.r == rhs.r) && (lhs.g == rhs.g) && (lhs.b == rhs.b);
    8e9a:	f89b 41cc 	ldrb.w	r4, [fp, #460]	; 0x1cc
    8e9e:	f89b 31c9 	ldrb.w	r3, [fp, #457]	; 0x1c9
    8ea2:	42a3      	cmp	r3, r4
    8ea4:	f47f af2d 	bne.w	8d02 <twinkle(LEDStruct&)+0xf6>
    8ea8:	f89b 51cd 	ldrb.w	r5, [fp, #461]	; 0x1cd
    8eac:	f89b 31ca 	ldrb.w	r3, [fp, #458]	; 0x1ca
    8eb0:	42ab      	cmp	r3, r5
    8eb2:	f47f af26 	bne.w	8d02 <twinkle(LEDStruct&)+0xf6>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    8eb6:	b20e      	sxth	r6, r1
    8eb8:	b227      	sxth	r7, r4
    8eba:	eb06 0286 	add.w	r2, r6, r6, lsl #2
    8ebe:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    8ec2:	b228      	sxth	r0, r5
    8ec4:	eb02 1e02 	add.w	lr, r2, r2, lsl #4
    8ec8:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    8ecc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8ed0:	44b6      	add	lr, r6
    8ed2:	443a      	add	r2, r7
    8ed4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8ed8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    8edc:	f3c2 2207 	ubfx	r2, r2, #8, #8
    8ee0:	4403      	add	r3, r0
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    8ee2:	eb0e 0c02 	add.w	ip, lr, r2
    8ee6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8eea:	449c      	add	ip, r3
    8eec:	fa5f fc8c 	uxtb.w	ip, ip
	CRGB bg;

	if ((leds.auto_select_bg_color == 1) && (leds.current_palette[0] == leds.current_palette[1])) {
		bg = leds.current_palette[0];
		uint8_t bglight = bg.getAverageLight();
		if (bglight > 64) {
    8ef0:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    8ef4:	d86c      	bhi.n	8fd0 <twinkle(LEDStruct&)+0x3c4>
			bg.nscale8_video(16);
		}
		else if (bglight > 16) {
    8ef6:	f1bc 0f10 	cmp.w	ip, #16
    8efa:	d939      	bls.n	8f70 <twinkle(LEDStruct&)+0x364>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    8efc:	2900      	cmp	r1, #0
    8efe:	f000 808a 	beq.w	9016 <twinkle(LEDStruct&)+0x40a>
    8f02:	10b1      	asrs	r1, r6, #2
    8f04:	3101      	adds	r1, #1
    8f06:	b2c9      	uxtb	r1, r1
    8f08:	b20b      	sxth	r3, r1
    8f0a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8f0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    8f12:	4413      	add	r3, r2
    8f14:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8f18:	f88d 1018 	strb.w	r1, [sp, #24]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8f1c:	2c00      	cmp	r4, #0
    8f1e:	d078      	beq.n	9012 <twinkle(LEDStruct&)+0x406>
    8f20:	10bc      	asrs	r4, r7, #2
    8f22:	3401      	adds	r4, #1
    8f24:	b2e4      	uxtb	r4, r4
    8f26:	b222      	sxth	r2, r4
    8f28:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    8f2c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8f30:	440a      	add	r2, r1
    8f32:	f3c2 2207 	ubfx	r2, r2, #8, #8
    8f36:	f88d 4019 	strb.w	r4, [sp, #25]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    8f3a:	2d00      	cmp	r5, #0
    8f3c:	d067      	beq.n	900e <twinkle(LEDStruct&)+0x402>
    8f3e:	1085      	asrs	r5, r0, #2
    8f40:	3501      	adds	r5, #1
    8f42:	b2ed      	uxtb	r5, r5
    8f44:	b229      	sxth	r1, r5
    8f46:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    8f4a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    8f4e:	4401      	add	r1, r0
    8f50:	f3c1 2107 	ubfx	r1, r1, #8, #8
    8f54:	4413      	add	r3, r2
    8f56:	440b      	add	r3, r1
    8f58:	b2db      	uxtb	r3, r3
    8f5a:	9305      	str	r3, [sp, #20]
    8f5c:	f88d 501a 	strb.w	r5, [sp, #26]
    8f60:	e6d7      	b.n	8d12 <twinkle(LEDStruct&)+0x106>
    8f62:	bf00      	nop
    8f64:	1fff8788 	.word	0x1fff8788
    8f68:	1fff9625 	.word	0x1fff9625
    8f6c:	1fffb19c 	.word	0x1fffb19c
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    8f70:	2900      	cmp	r1, #0
    8f72:	d054      	beq.n	901e <twinkle(LEDStruct&)+0x412>
    8f74:	f10e 0101 	add.w	r1, lr, #1
    8f78:	b2c9      	uxtb	r1, r1
    8f7a:	b208      	sxth	r0, r1
    8f7c:	eb00 0680 	add.w	r6, r0, r0, lsl #2
    8f80:	eb06 1606 	add.w	r6, r6, r6, lsl #4
    8f84:	4430      	add	r0, r6
    8f86:	f3c0 2007 	ubfx	r0, r0, #8, #8
    8f8a:	f88d 1018 	strb.w	r1, [sp, #24]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8f8e:	2c00      	cmp	r4, #0
    8f90:	d043      	beq.n	901a <twinkle(LEDStruct&)+0x40e>
    8f92:	3201      	adds	r2, #1
    8f94:	b2d4      	uxtb	r4, r2
    8f96:	b222      	sxth	r2, r4
    8f98:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    8f9c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8fa0:	440a      	add	r2, r1
    8fa2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    8fa6:	f88d 4019 	strb.w	r4, [sp, #25]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    8faa:	2d00      	cmp	r5, #0
    8fac:	d03d      	beq.n	902a <twinkle(LEDStruct&)+0x41e>
    8fae:	3301      	adds	r3, #1
    8fb0:	b2dd      	uxtb	r5, r3
    8fb2:	b229      	sxth	r1, r5
    8fb4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    8fb8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8fbc:	4419      	add	r1, r3
    8fbe:	f3c1 2107 	ubfx	r1, r1, #8, #8
    8fc2:	1883      	adds	r3, r0, r2
    8fc4:	440b      	add	r3, r1
    8fc6:	b2db      	uxtb	r3, r3
    8fc8:	9305      	str	r3, [sp, #20]
    8fca:	f88d 501a 	strb.w	r5, [sp, #26]
    8fce:	e6a0      	b.n	8d12 <twinkle(LEDStruct&)+0x106>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    8fd0:	b349      	cbz	r1, 9026 <twinkle(LEDStruct&)+0x41a>
    8fd2:	1131      	asrs	r1, r6, #4
    8fd4:	3101      	adds	r1, #1
    8fd6:	b2c9      	uxtb	r1, r1
    8fd8:	b20b      	sxth	r3, r1
    8fda:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8fde:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    8fe2:	4413      	add	r3, r2
    8fe4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8fe8:	f88d 1018 	strb.w	r1, [sp, #24]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8fec:	b1cc      	cbz	r4, 9022 <twinkle(LEDStruct&)+0x416>
    8fee:	113c      	asrs	r4, r7, #4
    8ff0:	3401      	adds	r4, #1
    8ff2:	b2e4      	uxtb	r4, r4
    8ff4:	b222      	sxth	r2, r4
    8ff6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    8ffa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8ffe:	440a      	add	r2, r1
    9000:	f3c2 2207 	ubfx	r2, r2, #8, #8
    9004:	f88d 4019 	strb.w	r4, [sp, #25]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    9008:	b10d      	cbz	r5, 900e <twinkle(LEDStruct&)+0x402>
    900a:	1105      	asrs	r5, r0, #4
    900c:	e798      	b.n	8f40 <twinkle(LEDStruct&)+0x334>
    900e:	4629      	mov	r1, r5
    9010:	e7a0      	b.n	8f54 <twinkle(LEDStruct&)+0x348>
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    9012:	4622      	mov	r2, r4
    9014:	e78f      	b.n	8f36 <twinkle(LEDStruct&)+0x32a>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    9016:	460b      	mov	r3, r1
    9018:	e77e      	b.n	8f18 <twinkle(LEDStruct&)+0x30c>
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    901a:	4622      	mov	r2, r4
    901c:	e7c3      	b.n	8fa6 <twinkle(LEDStruct&)+0x39a>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    901e:	4608      	mov	r0, r1
    9020:	e7b3      	b.n	8f8a <twinkle(LEDStruct&)+0x37e>
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    9022:	4622      	mov	r2, r4
    9024:	e7ee      	b.n	9004 <twinkle(LEDStruct&)+0x3f8>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    9026:	460b      	mov	r3, r1
    9028:	e7de      	b.n	8fe8 <twinkle(LEDStruct&)+0x3dc>
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    902a:	4629      	mov	r1, r5
    902c:	e7c9      	b.n	8fc2 <twinkle(LEDStruct&)+0x3b6>
    902e:	bf00      	nop

00009030 <plasma_update(LEDStruct&)>:


void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;

	switch (update_var) {
    9030:	4b19      	ldr	r3, [pc, #100]	; (9098 <plasma_update(LEDStruct&)+0x68>)
	leds.plasma_range2  = r2;
}


void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;
    9032:	4a1a      	ldr	r2, [pc, #104]	; (909c <plasma_update(LEDStruct&)+0x6c>)

	switch (update_var) {
    9034:	781b      	ldrb	r3, [r3, #0]
	leds.plasma_range2  = r2;
}


void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;
    9036:	2100      	movs	r1, #0
    9038:	7011      	strb	r1, [r2, #0]

	switch (update_var) {
    903a:	2b05      	cmp	r3, #5
    903c:	d808      	bhi.n	9050 <plasma_update(LEDStruct&)+0x20>
    903e:	e8df f003 	tbb	[pc, r3]
    9042:	180f      	.short	0x180f
    9044:	0924031e 	.word	0x0924031e
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
		case 2: leds.plasma_beat2 = (uint8_t)update_arg; break; //c
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
    9048:	4b15      	ldr	r3, [pc, #84]	; (90a0 <plasma_update(LEDStruct&)+0x70>)
    904a:	881b      	ldrh	r3, [r3, #0]
    904c:	f880 384e 	strb.w	r3, [r0, #2126]	; 0x84e
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    9050:	f7f9 b8f4 	b.w	223c <LEDDebug(LEDStruct&)>
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
		case 2: leds.plasma_beat2 = (uint8_t)update_arg; break; //c
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
    9054:	4b12      	ldr	r3, [pc, #72]	; (90a0 <plasma_update(LEDStruct&)+0x70>)
    9056:	881b      	ldrh	r3, [r3, #0]
    9058:	f880 3852 	strb.w	r3, [r0, #2130]	; 0x852
		default: break;
	}
	LEDDebug(leds);
    905c:	f7f9 b8ee 	b.w	223c <LEDDebug(LEDStruct&)>

void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;

	switch (update_var) {
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
    9060:	4b0f      	ldr	r3, [pc, #60]	; (90a0 <plasma_update(LEDStruct&)+0x70>)
    9062:	881b      	ldrh	r3, [r3, #0]
    9064:	3300      	adds	r3, #0
    9066:	bf18      	it	ne
    9068:	2301      	movne	r3, #1
    906a:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    906e:	f7f9 b8e5 	b.w	223c <LEDDebug(LEDStruct&)>
void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;

	switch (update_var) {
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
    9072:	4b0b      	ldr	r3, [pc, #44]	; (90a0 <plasma_update(LEDStruct&)+0x70>)
    9074:	881b      	ldrh	r3, [r3, #0]
    9076:	f880 384c 	strb.w	r3, [r0, #2124]	; 0x84c
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    907a:	f7f9 b8df 	b.w	223c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;

	switch (update_var) {
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
		case 2: leds.plasma_beat2 = (uint8_t)update_arg; break; //c
    907e:	4b08      	ldr	r3, [pc, #32]	; (90a0 <plasma_update(LEDStruct&)+0x70>)
    9080:	881b      	ldrh	r3, [r3, #0]
    9082:	f880 384d 	strb.w	r3, [r0, #2125]	; 0x84d
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    9086:	f7f9 b8d9 	b.w	223c <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
		case 2: leds.plasma_beat2 = (uint8_t)update_arg; break; //c
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
    908a:	4b05      	ldr	r3, [pc, #20]	; (90a0 <plasma_update(LEDStruct&)+0x70>)
    908c:	881b      	ldrh	r3, [r3, #0]
    908e:	f880 3851 	strb.w	r3, [r0, #2129]	; 0x851
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    9092:	f7f9 b8d3 	b.w	223c <LEDDebug(LEDStruct&)>
    9096:	bf00      	nop
    9098:	1fff9e8c 	.word	0x1fff9e8c
    909c:	1fff9625 	.word	0x1fff9625
    90a0:	1fff9526 	.word	0x1fff9526

000090a4 <plasma(LEDStruct&)>:
}



void plasma(LEDStruct& leds) {
    90a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { plasma_init(leds); }
    90a8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void plasma(LEDStruct& leds) {
    90ac:	b08b      	sub	sp, #44	; 0x2c
    90ae:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { plasma_init(leds); }
    90b0:	2b00      	cmp	r3, #0
    90b2:	d175      	bne.n	91a0 <plasma(LEDStruct&)+0xfc>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    90b4:	4dc6      	ldr	r5, [pc, #792]	; (93d0 <plasma(LEDStruct&)+0x32c>)
    90b6:	882b      	ldrh	r3, [r5, #0]
    90b8:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    90bc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    90c0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    90c4:	3619      	adds	r6, #25
    90c6:	b2b6      	uxth	r6, r6
    90c8:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    90cc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    90d0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    90d4:	3119      	adds	r1, #25
    90d6:	b289      	uxth	r1, r1
    90d8:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    90dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    90e0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    90e4:	3219      	adds	r2, #25
    90e6:	b292      	uxth	r2, r2
    90e8:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    90ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    90f0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    90f4:	3319      	adds	r3, #25
    90f6:	b29b      	uxth	r3, r3
    90f8:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    90fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9100:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9104:	3019      	adds	r0, #25
    9106:	b280      	uxth	r0, r0
    9108:	eb00 2740 	add.w	r7, r0, r0, lsl #9
    910c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
    9110:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    9114:	3719      	adds	r7, #25
    9116:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9118:	eb07 2e17 	add.w	lr, r7, r7, lsr #8
    911c:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
	leds.plasma_range2  = r2;
    9120:	fa5f fe8e 	uxtb.w	lr, lr
	leds.mode_initialized	= 1;
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    9124:	f3c6 16c0 	ubfx	r6, r6, #7, #1
    9128:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    912c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    9130:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    9134:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
    9138:	b2c0      	uxtb	r0, r0
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    913a:	b2c9      	uxtb	r1, r1
	leds.plasma_beat2	= b2;
    913c:	b2d2      	uxtb	r2, r2
	leds.plasma_beat3	= b3;
    913e:	b2db      	uxtb	r3, r3
	leds.mode_initialized	= 1;
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    9140:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
	leds.plasma_range2  = r2;
    9144:	eb0e 06ce 	add.w	r6, lr, lr, lsl #3
    9148:	ebce 06c6 	rsb	r6, lr, r6, lsl #3
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    914c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	leds.plasma_beat2	= b2;
    9150:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
	leds.plasma_beat3	= b3;
    9154:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.plasma_range1	= r1;
    9158:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    915c:	1189      	asrs	r1, r1, #6
	leds.plasma_beat2	= b2;
    915e:	1192      	asrs	r2, r2, #6
	leds.plasma_beat3	= b3;
    9160:	119b      	asrs	r3, r3, #6
	leds.plasma_range1	= r1;
    9162:	ebc0 00ce 	rsb	r0, r0, lr, lsl #3
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    9166:	310d      	adds	r1, #13
	leds.plasma_beat2	= b2;
    9168:	320d      	adds	r2, #13
	leds.plasma_beat3	= b3;
    916a:	3303      	adds	r3, #3
	leds.plasma_range1	= r1;
	leds.plasma_range2  = r2;
    916c:	1236      	asrs	r6, r6, #8

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
    916e:	1200      	asrs	r0, r0, #8
	leds.plasma_range2  = r2;
    9170:	361e      	adds	r6, #30

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
    9172:	301e      	adds	r0, #30
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    9174:	f884 184c 	strb.w	r1, [r4, #2124]	; 0x84c
	leds.plasma_beat2	= b2;
    9178:	f884 284d 	strb.w	r2, [r4, #2125]	; 0x84d
#ifndef PLASMA_H
#define PLASMA_H


void plasma_init(LEDStruct& leds, bool ufr = random8(2), uint8_t b1 = random8(13,41),  uint8_t b2 = random8(13,41), uint8_t b3 = random8(3,31), int r1 = random8(30,101), int r2 = random8(30,101)) {
	leds.mode_initialized	= 1;
    917c:	2101      	movs	r1, #1
	leds.mode_type			= PLASMA;
    917e:	2220      	movs	r2, #32
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
    9180:	f884 384e 	strb.w	r3, [r4, #2126]	; 0x84e

void plasma_init(LEDStruct& leds, bool ufr = random8(2), uint8_t b1 = random8(13,41),  uint8_t b2 = random8(13,41), uint8_t b3 = random8(3,31), int r1 = random8(30,101), int r2 = random8(30,101)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    9184:	230f      	movs	r3, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9186:	802f      	strh	r7, [r5, #0]
	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
	leds.plasma_range2  = r2;
    9188:	f884 6852 	strb.w	r6, [r4, #2130]	; 0x852

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
    918c:	f884 0851 	strb.w	r0, [r4, #2129]	; 0x851
#ifndef PLASMA_H
#define PLASMA_H


void plasma_init(LEDStruct& leds, bool ufr = random8(2), uint8_t b1 = random8(13,41),  uint8_t b2 = random8(13,41), uint8_t b3 = random8(3,31), int r1 = random8(30,101), int r2 = random8(30,101)) {
	leds.mode_initialized	= 1;
    9190:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
    9194:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
#define PLASMA_H


void plasma_init(LEDStruct& leds, bool ufr = random8(2), uint8_t b1 = random8(13,41),  uint8_t b2 = random8(13,41), uint8_t b3 = random8(3,31), int r1 = random8(30,101), int r2 = random8(30,101)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PLASMA;
    9198:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    919c:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3



void plasma(LEDStruct& leds) {
	if (!leds.mode_initialized) { plasma_init(leds); }
	if (keyboard_update) { plasma_update(leds); }
    91a0:	4b8c      	ldr	r3, [pc, #560]	; (93d4 <plasma(LEDStruct&)+0x330>)
    91a2:	781b      	ldrb	r3, [r3, #0]
    91a4:	2b00      	cmp	r3, #0
    91a6:	f040 816f 	bne.w	9488 <plasma(LEDStruct&)+0x3e4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    91aa:	f8df 9230 	ldr.w	r9, [pc, #560]	; 93dc <plasma(LEDStruct&)+0x338>

	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
    91ae:	f894 384c 	ldrb.w	r3, [r4, #2124]	; 0x84c
    91b2:	f8d9 2000 	ldr.w	r2, [r9]
    91b6:	9207      	str	r2, [sp, #28]
	return ret;
    91b8:	9807      	ldr	r0, [sp, #28]
    91ba:	f894 2851 	ldrb.w	r2, [r4, #2129]	; 0x851
    91be:	f44f 718c 	mov.w	r1, #280	; 0x118
    91c2:	021b      	lsls	r3, r3, #8
    91c4:	fb01 f000 	mul.w	r0, r1, r0
    91c8:	fb03 f000 	mul.w	r0, r3, r0
    91cc:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    91ce:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    91d0:	065d      	lsls	r5, r3, #25
    91d2:	f140 8154 	bpl.w	947e <plasma(LEDStruct&)+0x3da>
        offset = (uint8_t)255 - offset;
    91d6:	43db      	mvns	r3, r3
    91d8:	b2dd      	uxtb	r5, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    91da:	f005 030f 	and.w	r3, r5, #15
    if( theta & 0x40) secoffset++;
    91de:	1c59      	adds	r1, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    91e0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    91e4:	112b      	asrs	r3, r5, #4
    91e6:	4e7c      	ldr	r6, [pc, #496]	; (93d8 <plasma(LEDStruct&)+0x334>)
    91e8:	005b      	lsls	r3, r3, #1
    91ea:	18f5      	adds	r5, r6, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    91ec:	5cf3      	ldrb	r3, [r6, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    91ee:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    91f0:	fb15 f101 	smulbb	r1, r5, r1
    91f4:	eb03 1321 	add.w	r3, r3, r1, asr #4
    91f8:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    91fa:	0601      	lsls	r1, r0, #24
    91fc:	bf48      	it	mi
    91fe:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9200:	f8d9 1000 	ldr.w	r1, [r9]
    9204:	9106      	str	r1, [sp, #24]
    9206:	b25b      	sxtb	r3, r3
    9208:	0050      	lsls	r0, r2, #1
    920a:	3b80      	subs	r3, #128	; 0x80
    920c:	b2c0      	uxtb	r0, r0
	return ret;
    920e:	9d06      	ldr	r5, [sp, #24]
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);
    9210:	f894 184d 	ldrb.w	r1, [r4, #2125]	; 0x84d

void plasma(LEDStruct& leds) {
	if (!leds.mode_initialized) { plasma_init(leds); }
	if (keyboard_update) { plasma_update(leds); }

	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
    9214:	b2db      	uxtb	r3, r3
    9216:	fb00 3303 	mla	r3, r0, r3, r3
    921a:	f44f 708c 	mov.w	r0, #280	; 0x118
    921e:	fb00 f505 	mul.w	r5, r0, r5
    9222:	0209      	lsls	r1, r1, #8
    9224:	fb01 f505 	mul.w	r5, r1, r5
    9228:	0e2d      	lsrs	r5, r5, #24
    922a:	ebc2 2223 	rsb	r2, r2, r3, asr #8
    922e:	b2eb      	uxtb	r3, r5
    9230:	b2d2      	uxtb	r2, r2
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    9232:	065f      	lsls	r7, r3, #25
    9234:	f8c4 2844 	str.w	r2, [r4, #2116]	; 0x844
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);
    9238:	f894 0852 	ldrb.w	r0, [r4, #2130]	; 0x852
    923c:	f140 811a 	bpl.w	9474 <plasma(LEDStruct&)+0x3d0>
        offset = (uint8_t)255 - offset;
    9240:	43db      	mvns	r3, r3
    9242:	b2df      	uxtb	r7, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9244:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    9248:	1c59      	adds	r1, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    924a:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    924e:	113b      	asrs	r3, r7, #4
    9250:	005b      	lsls	r3, r3, #1
    9252:	18f7      	adds	r7, r6, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    9254:	5cf3      	ldrb	r3, [r6, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    9256:	787f      	ldrb	r7, [r7, #1]
    9258:	9403      	str	r4, [sp, #12]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    925a:	fb17 f101 	smulbb	r1, r7, r1
    925e:	eb03 1321 	add.w	r3, r3, r1, asr #4
    9262:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    9264:	0629      	lsls	r1, r5, #24
    9266:	bf48      	it	mi
    9268:	425b      	negmi	r3, r3
    926a:	b25b      	sxtb	r3, r3
    926c:	0041      	lsls	r1, r0, #1
    926e:	3b80      	subs	r3, #128	; 0x80
    9270:	b2db      	uxtb	r3, r3
    9272:	b2c9      	uxtb	r1, r1
    9274:	fb01 3303 	mla	r3, r1, r3, r3
    9278:	ebc0 2023 	rsb	r0, r0, r3, asr #8
    927c:	b2c0      	uxtb	r0, r0
    927e:	f504 73e1 	add.w	r3, r4, #450	; 0x1c2
    9282:	f8c4 0848 	str.w	r0, [r4, #2120]	; 0x848
    9286:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    928a:	4625      	mov	r5, r4
    928c:	2700      	movs	r7, #0
    928e:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    9292:	4698      	mov	r8, r3
    9294:	e06b      	b.n	936e <plasma(LEDStruct&)+0x2ca>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    9296:	43ca      	mvns	r2, r1
    9298:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    929a:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    929e:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    92a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    92a4:	1112      	asrs	r2, r2, #4
    92a6:	0052      	lsls	r2, r2, #1
    92a8:	eb06 0e02 	add.w	lr, r6, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    92ac:	5cb2      	ldrb	r2, [r6, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    92ae:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    92b2:	fb1e f000 	smulbb	r0, lr, r0
    92b6:	eb02 1020 	add.w	r0, r2, r0, asr #4
    92ba:	b2c0      	uxtb	r0, r0
    if( theta & 0x80 ) y = -y;
    92bc:	060a      	lsls	r2, r1, #24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    92be:	f8d9 1000 	ldr.w	r1, [r9]
    92c2:	9108      	str	r1, [sp, #32]
    92c4:	bf48      	it	mi
    92c6:	4240      	negmi	r0, r0
    92c8:	b242      	sxtb	r2, r0
	return ret;
    92ca:	9908      	ldr	r1, [sp, #32]

	for (uint16_t k = 0; k < NUM_LEDS; k++) {
		leds.plasma_index = cubicwave8((k * 23) + leds.plasma_phase1) / 2 + cos8((k * 15) + leds.plasma_phase2) / 2;
		leds.plasma_bright = qsuba(leds.plasma_index, beatsin8(leds.plasma_beat3, 0, 96));
    92cc:	f894 084e 	ldrb.w	r0, [r4, #2126]	; 0x84e
    92d0:	fb0a fe01 	mul.w	lr, sl, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    92d4:	0200      	lsls	r0, r0, #8
    92d6:	fb00 fe0e 	mul.w	lr, r0, lr

	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);

	for (uint16_t k = 0; k < NUM_LEDS; k++) {
		leds.plasma_index = cubicwave8((k * 23) + leds.plasma_phase1) / 2 + cos8((k * 15) + leds.plasma_phase2) / 2;
    92da:	3a80      	subs	r2, #128	; 0x80
    92dc:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    92e0:	f3c2 0246 	ubfx	r2, r2, #1, #7
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    92e4:	fa5f f18e 	uxtb.w	r1, lr
    92e8:	441a      	add	r2, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    92ea:	064b      	lsls	r3, r1, #25
    92ec:	f884 284f 	strb.w	r2, [r4, #2127]	; 0x84f
    92f0:	d568      	bpl.n	93c4 <plasma(LEDStruct&)+0x320>
        offset = (uint8_t)255 - offset;
    92f2:	43c9      	mvns	r1, r1
    92f4:	b2cb      	uxtb	r3, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    92f6:	f003 010f 	and.w	r1, r3, #15
    if( theta & 0x40) secoffset++;
    92fa:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    92fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    9300:	111b      	asrs	r3, r3, #4
    9302:	005b      	lsls	r3, r3, #1
    9304:	eb06 0c03 	add.w	ip, r6, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    9308:	5cf3      	ldrb	r3, [r6, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    930a:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    930e:	fb1c f101 	smulbb	r1, ip, r1
    9312:	eb03 1121 	add.w	r1, r3, r1, asr #4
    9316:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    9318:	f01e 0f80 	tst.w	lr, #128	; 0x80
    931c:	bf18      	it	ne
    931e:	4249      	negne	r1, r1
    9320:	b249      	sxtb	r1, r1

    y += 128;
    9322:	3980      	subs	r1, #128	; 0x80
		leds.plasma_bright = qsuba(leds.plasma_index, beatsin8(leds.plasma_beat3, 0, 96));
    9324:	b2c9      	uxtb	r1, r1
    9326:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    932a:	eb01 1143 	add.w	r1, r1, r3, lsl #5
    932e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9332:	428a      	cmp	r2, r1
    9334:	d854      	bhi.n	93e0 <plasma(LEDStruct&)+0x33c>
    9336:	2300      	movs	r3, #0

		leds.led_data[k] = ColorFromPalette(leds.current_palette, leds.plasma_index, leds.plasma_bright, leds.current_blending);
    9338:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);

	for (uint16_t k = 0; k < NUM_LEDS; k++) {
		leds.plasma_index = cubicwave8((k * 23) + leds.plasma_phase1) / 2 + cos8((k * 15) + leds.plasma_phase2) / 2;
		leds.plasma_bright = qsuba(leds.plasma_index, beatsin8(leds.plasma_beat3, 0, 96));
    933c:	f884 3850 	strb.w	r3, [r4, #2128]	; 0x850

		leds.led_data[k] = ColorFromPalette(leds.current_palette, leds.plasma_index, leds.plasma_bright, leds.current_blending);
    9340:	a805      	add	r0, sp, #20
    9342:	9100      	str	r1, [sp, #0]
    9344:	4659      	mov	r1, fp
    9346:	f002 fbff 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    934a:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    934e:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    9352:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    9356:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    9358:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    935a:	70ab      	strb	r3, [r5, #2]
    935c:	3503      	adds	r5, #3
	if (keyboard_update) { plasma_update(leds); }

	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);

	for (uint16_t k = 0; k < NUM_LEDS; k++) {
    935e:	45a8      	cmp	r8, r5
    9360:	f107 0701 	add.w	r7, r7, #1
    9364:	d06e      	beq.n	9444 <plasma(LEDStruct&)+0x3a0>
    9366:	f8d4 2844 	ldr.w	r2, [r4, #2116]	; 0x844
    936a:	f8d4 0848 	ldr.w	r0, [r4, #2120]	; 0x848
    936e:	b2f9      	uxtb	r1, r7
		leds.plasma_index = cubicwave8((k * 23) + leds.plasma_phase1) / 2 + cos8((k * 15) + leds.plasma_phase2) / 2;
    9370:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    9374:	ebc1 03c3 	rsb	r3, r1, r3, lsl #3
    9378:	4413      	add	r3, r2
    937a:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    937c:	061a      	lsls	r2, r3, #24
        in = 255 - in;
    937e:	bf44      	itt	mi
    9380:	43db      	mvnmi	r3, r3
    9382:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    9384:	005b      	lsls	r3, r3, #1
    9386:	b2db      	uxtb	r3, r3
    9388:	1c5a      	adds	r2, r3, #1
    938a:	fb02 f303 	mul.w	r3, r2, r3
    938e:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    9390:	fb03 f202 	mul.w	r2, r3, r2
    9394:	1212      	asrs	r2, r2, #8
    9396:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    939a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
///
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t cos8( uint8_t theta)
{
    return sin8( theta + 64);
    939e:	3040      	adds	r0, #64	; 0x40
    93a0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    93a4:	b29b      	uxth	r3, r3
    93a6:	4401      	add	r1, r0
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    93a8:	05da      	lsls	r2, r3, #23
    93aa:	b2c9      	uxtb	r1, r1
    93ac:	bf54      	ite	pl
    93ae:	f3c3 0346 	ubfxpl	r3, r3, #1, #7
    93b2:	237f      	movmi	r3, #127	; 0x7f
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    93b4:	0648      	lsls	r0, r1, #25
    93b6:	f53f af6e 	bmi.w	9296 <plasma(LEDStruct&)+0x1f2>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    93ba:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    93be:	f001 000f 	and.w	r0, r1, #15
    93c2:	e76f      	b.n	92a4 <plasma(LEDStruct&)+0x200>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    93c4:	f001 033f 	and.w	r3, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    93c8:	f001 010f 	and.w	r1, r1, #15
    93cc:	e798      	b.n	9300 <plasma(LEDStruct&)+0x25c>
    93ce:	bf00      	nop
    93d0:	1fff8788 	.word	0x1fff8788
    93d4:	1fff9625 	.word	0x1fff9625
    93d8:	000112bc 	.word	0x000112bc
    93dc:	1fffb19c 	.word	0x1fffb19c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    93e0:	f8d9 3000 	ldr.w	r3, [r9]
    93e4:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    93e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93e8:	fb0a f303 	mul.w	r3, sl, r3
    93ec:	fb00 f003 	mul.w	r0, r0, r3
    93f0:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    93f2:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    93f4:	0659      	lsls	r1, r3, #25
    93f6:	d520      	bpl.n	943a <plasma(LEDStruct&)+0x396>
        offset = (uint8_t)255 - offset;
    93f8:	43d9      	mvns	r1, r3
    93fa:	b2c9      	uxtb	r1, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    93fc:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    9400:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    9402:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    9406:	1109      	asrs	r1, r1, #4
    9408:	0049      	lsls	r1, r1, #1
    940a:	eb06 0e01 	add.w	lr, r6, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    940e:	5c71      	ldrb	r1, [r6, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    9410:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    9414:	fb1e f303 	smulbb	r3, lr, r3
    9418:	eb01 1323 	add.w	r3, r1, r3, asr #4
    941c:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    941e:	0601      	lsls	r1, r0, #24
    9420:	bf48      	it	mi
    9422:	425b      	negmi	r3, r3
    9424:	b25b      	sxtb	r3, r3

    y += 128;
    9426:	3b80      	subs	r3, #128	; 0x80
		leds.plasma_bright = qsuba(leds.plasma_index, beatsin8(leds.plasma_beat3, 0, 96));
    9428:	b2db      	uxtb	r3, r3
    942a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    942e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    9432:	eba2 2323 	sub.w	r3, r2, r3, asr #8
    9436:	b2db      	uxtb	r3, r3
    9438:	e77e      	b.n	9338 <plasma(LEDStruct&)+0x294>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    943a:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    943e:	f003 030f 	and.w	r3, r3, #15
    9442:	e7e0      	b.n	9406 <plasma(LEDStruct&)+0x362>

		leds.led_data[k] = ColorFromPalette(leds.current_palette, leds.plasma_index, leds.plasma_bright, leds.current_blending);
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    9444:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    9448:	f8dd 800c 	ldr.w	r8, [sp, #12]
    944c:	b97b      	cbnz	r3, 946e <plasma(LEDStruct&)+0x3ca>
    944e:	f104 02e1 	add.w	r2, r4, #225	; 0xe1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    9452:	7823      	ldrb	r3, [r4, #0]
    9454:	f888 31bf 	strb.w	r3, [r8, #447]	; 0x1bf
        g = rhs.g;
    9458:	7863      	ldrb	r3, [r4, #1]
    945a:	f888 31c0 	strb.w	r3, [r8, #448]	; 0x1c0
        b = rhs.b;
    945e:	78a3      	ldrb	r3, [r4, #2]
    9460:	f888 31c1 	strb.w	r3, [r8, #449]	; 0x1c1
    9464:	3403      	adds	r4, #3
    9466:	42a2      	cmp	r2, r4
    9468:	f1a8 0803 	sub.w	r8, r8, #3
    946c:	d1f1      	bne.n	9452 <plasma(LEDStruct&)+0x3ae>
}
    946e:	b00b      	add	sp, #44	; 0x2c
    9470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    9474:	f003 073f 	and.w	r7, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9478:	f003 010f 	and.w	r1, r3, #15
    947c:	e6e7      	b.n	924e <plasma(LEDStruct&)+0x1aa>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    947e:	f003 053f 	and.w	r5, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9482:	f003 010f 	and.w	r1, r3, #15
    9486:	e6ad      	b.n	91e4 <plasma(LEDStruct&)+0x140>



void plasma(LEDStruct& leds) {
	if (!leds.mode_initialized) { plasma_init(leds); }
	if (keyboard_update) { plasma_update(leds); }
    9488:	4620      	mov	r0, r4
    948a:	f7ff fdd1 	bl	9030 <plasma_update(LEDStruct&)>
    948e:	e68c      	b.n	91aa <plasma(LEDStruct&)+0x106>

00009490 <outward_update(LEDStruct&)>:
	leds.out_min2	= m2;
}

void outward_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    9490:	4b14      	ldr	r3, [pc, #80]	; (94e4 <outward_update(LEDStruct&)+0x54>)
	leds.out_min1	= m1;
	leds.out_min2	= m2;
}

void outward_update(LEDStruct& leds) {
	keyboard_update = 0;
    9492:	4a15      	ldr	r2, [pc, #84]	; (94e8 <outward_update(LEDStruct&)+0x58>)
	switch (update_var) {
    9494:	781b      	ldrb	r3, [r3, #0]
	leds.out_min1	= m1;
	leds.out_min2	= m2;
}

void outward_update(LEDStruct& leds) {
	keyboard_update = 0;
    9496:	2100      	movs	r1, #0
    9498:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    949a:	2b04      	cmp	r3, #4
    949c:	d808      	bhi.n	94b0 <outward_update(LEDStruct&)+0x20>
    949e:	e8df f003 	tbb	[pc, r3]
    94a2:	150f      	.short	0x150f
    94a4:	1b03      	.short	0x1b03
    94a6:	09          	.byte	0x09
    94a7:	00          	.byte	0x00
	case 0:		leds.out_fade	= (uint8_t)update_arg;	break;	//a
	case 1:		leds.out_beat1	= (uint8_t)update_arg;	break;	//b		
	case 2:		leds.out_beat2	= (uint8_t)update_arg;	break;	//c
    94a8:	4b10      	ldr	r3, [pc, #64]	; (94ec <outward_update(LEDStruct&)+0x5c>)
    94aa:	881b      	ldrh	r3, [r3, #0]
    94ac:	f880 3854 	strb.w	r3, [r0, #2132]	; 0x854
	case 3:		leds.out_min1	= (uint8_t)update_arg;	break;	//d
	case 4:		leds.out_min2	= (uint8_t)update_arg;	break;  //e
	default:	break;
	}
	LEDDebug(leds);
    94b0:	f7f8 bec4 	b.w	223c <LEDDebug(LEDStruct&)>
	switch (update_var) {
	case 0:		leds.out_fade	= (uint8_t)update_arg;	break;	//a
	case 1:		leds.out_beat1	= (uint8_t)update_arg;	break;	//b		
	case 2:		leds.out_beat2	= (uint8_t)update_arg;	break;	//c
	case 3:		leds.out_min1	= (uint8_t)update_arg;	break;	//d
	case 4:		leds.out_min2	= (uint8_t)update_arg;	break;  //e
    94b4:	4b0d      	ldr	r3, [pc, #52]	; (94ec <outward_update(LEDStruct&)+0x5c>)
    94b6:	881b      	ldrh	r3, [r3, #0]
    94b8:	f880 3856 	strb.w	r3, [r0, #2134]	; 0x856
	default:	break;
	}
	LEDDebug(leds);
    94bc:	f7f8 bebe 	b.w	223c <LEDDebug(LEDStruct&)>
}

void outward_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.out_fade	= (uint8_t)update_arg;	break;	//a
    94c0:	4b0a      	ldr	r3, [pc, #40]	; (94ec <outward_update(LEDStruct&)+0x5c>)
    94c2:	881b      	ldrh	r3, [r3, #0]
    94c4:	f880 3857 	strb.w	r3, [r0, #2135]	; 0x857
	case 2:		leds.out_beat2	= (uint8_t)update_arg;	break;	//c
	case 3:		leds.out_min1	= (uint8_t)update_arg;	break;	//d
	case 4:		leds.out_min2	= (uint8_t)update_arg;	break;  //e
	default:	break;
	}
	LEDDebug(leds);
    94c8:	f7f8 beb8 	b.w	223c <LEDDebug(LEDStruct&)>

void outward_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.out_fade	= (uint8_t)update_arg;	break;	//a
	case 1:		leds.out_beat1	= (uint8_t)update_arg;	break;	//b		
    94cc:	4b07      	ldr	r3, [pc, #28]	; (94ec <outward_update(LEDStruct&)+0x5c>)
    94ce:	881b      	ldrh	r3, [r3, #0]
    94d0:	f880 3853 	strb.w	r3, [r0, #2131]	; 0x853
	case 2:		leds.out_beat2	= (uint8_t)update_arg;	break;	//c
	case 3:		leds.out_min1	= (uint8_t)update_arg;	break;	//d
	case 4:		leds.out_min2	= (uint8_t)update_arg;	break;  //e
	default:	break;
	}
	LEDDebug(leds);
    94d4:	f7f8 beb2 	b.w	223c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.out_fade	= (uint8_t)update_arg;	break;	//a
	case 1:		leds.out_beat1	= (uint8_t)update_arg;	break;	//b		
	case 2:		leds.out_beat2	= (uint8_t)update_arg;	break;	//c
	case 3:		leds.out_min1	= (uint8_t)update_arg;	break;	//d
    94d8:	4b04      	ldr	r3, [pc, #16]	; (94ec <outward_update(LEDStruct&)+0x5c>)
    94da:	881b      	ldrh	r3, [r3, #0]
    94dc:	f880 3855 	strb.w	r3, [r0, #2133]	; 0x855
	case 4:		leds.out_min2	= (uint8_t)update_arg;	break;  //e
	default:	break;
	}
	LEDDebug(leds);
    94e0:	f7f8 beac 	b.w	223c <LEDDebug(LEDStruct&)>
    94e4:	1fff9e8c 	.word	0x1fff9e8c
    94e8:	1fff9625 	.word	0x1fff9625
    94ec:	1fff9526 	.word	0x1fff9526

000094f0 <outward(LEDStruct&)>:
}


void outward(LEDStruct& leds) {
    94f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!leds.mode_initialized) { outward_init(leds); }
    94f4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void outward(LEDStruct& leds) {
    94f8:	b088      	sub	sp, #32
    94fa:	4606      	mov	r6, r0
	if (!leds.mode_initialized) { outward_init(leds); }
    94fc:	2b00      	cmp	r3, #0
    94fe:	d166      	bne.n	95ce <outward(LEDStruct&)+0xde>
    9500:	48d3      	ldr	r0, [pc, #844]	; (9850 <outward(LEDStruct&)+0x360>)
    9502:	8803      	ldrh	r3, [r0, #0]
    9504:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9508:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    950c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9510:	3319      	adds	r3, #25
    9512:	b29b      	uxth	r3, r3
    9514:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    9518:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    951c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    9520:	3519      	adds	r5, #25
    9522:	b2ad      	uxth	r5, r5
    9524:	eb05 2145 	add.w	r1, r5, r5, lsl #9
    9528:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    952c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    9530:	3119      	adds	r1, #25
    9532:	b289      	uxth	r1, r1
    9534:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    9538:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    953c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    9540:	3219      	adds	r2, #25
    9542:	b292      	uxth	r2, r2
    9544:	eb02 2442 	add.w	r4, r2, r2, lsl #9
    9548:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    954c:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    9550:	3419      	adds	r4, #25
    9552:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9554:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    9558:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    955c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    9560:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.mode_initialized	= 1;
	leds.mode_type			= OUTWARD;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.out_fade	= of;
    9564:	b2df      	uxtb	r7, r3
	leds.out_beat1	= b1;
	leds.out_beat2	= b2;
    9566:	b2c9      	uxtb	r1, r1
    9568:	eb04 2e14 	add.w	lr, r4, r4, lsr #8
	leds.mode_type			= OUTWARD;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.out_fade	= of;
	leds.out_beat1	= b1;
    956c:	b2ed      	uxtb	r5, r5
	leds.out_beat2	= b2;
	leds.out_min1	= m1;
    956e:	b2d3      	uxtb	r3, r2
	leds.mode_type			= OUTWARD;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.out_fade	= of;
	leds.out_beat1	= b1;
    9570:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
	leds.out_beat2	= b2;
    9574:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
	leds.out_min1	= m1;
	leds.out_min2	= m2;
    9578:	fa5f fe8e 	uxtb.w	lr, lr
	leds.mode_initialized	= 1;
	leds.mode_type			= OUTWARD;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.out_fade	= of;
    957c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    9580:	11ff      	asrs	r7, r7, #7
	leds.out_beat1	= b1;
    9582:	1229      	asrs	r1, r5, #8
	leds.out_beat2	= b2;
	leds.out_min1	= m1;
	leds.out_min2	= m2;
    9584:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
	leds.delay_time			= 15;

	leds.out_fade	= of;
	leds.out_beat1	= b1;
	leds.out_beat2	= b2;
	leds.out_min1	= m1;
    9588:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.out_fade	= of;
	leds.out_beat1	= b1;
	leds.out_beat2	= b2;
    958c:	1212      	asrs	r2, r2, #8
	leds.mode_initialized	= 1;
	leds.mode_type			= OUTWARD;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.out_fade	= of;
    958e:	1cbd      	adds	r5, r7, #2
	leds.out_beat1	= b1;
    9590:	3104      	adds	r1, #4
	leds.out_beat2	= b2;
    9592:	3204      	adds	r2, #4
	leds.out_min1	= m1;
	leds.out_min2	= m2;
    9594:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
	leds.delay_time			= 15;

	leds.out_fade	= of;
	leds.out_beat1	= b1;
	leds.out_beat2	= b2;
	leds.out_min1	= m1;
    9598:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	leds.out_min2	= m2;
    959c:	ea4f 176e 	mov.w	r7, lr, asr #5
	leds.delay_time			= 15;

	leds.out_fade	= of;
	leds.out_beat1	= b1;
	leds.out_beat2	= b2;
	leds.out_min1	= m1;
    95a0:	115b      	asrs	r3, r3, #5
	leds.mode_initialized	= 1;
	leds.mode_type			= OUTWARD;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.out_fade	= of;
    95a2:	f886 5857 	strb.w	r5, [r6, #2135]	; 0x857
	leds.out_beat1	= b1;
    95a6:	f886 1853 	strb.w	r1, [r6, #2131]	; 0x853
#ifndef OUTWARD_H
#define OUTWARD_H

void outward_init(LEDStruct& leds, uint8_t of = random8(2,32), uint8_t b1 = random8(4,11), uint8_t b2 = random8(4,11), uint8_t m1 = random8(0,200), uint8_t m2 = random8(0,200)) {
	leds.mode_initialized	= 1;
    95aa:	2501      	movs	r5, #1
	leds.mode_type			= OUTWARD;
    95ac:	2122      	movs	r1, #34	; 0x22
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.out_fade	= of;
	leds.out_beat1	= b1;
	leds.out_beat2	= b2;
    95ae:	f886 2854 	strb.w	r2, [r6, #2132]	; 0x854

void outward_init(LEDStruct& leds, uint8_t of = random8(2,32), uint8_t b1 = random8(4,11), uint8_t b2 = random8(4,11), uint8_t m1 = random8(0,200), uint8_t m2 = random8(0,200)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= OUTWARD;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    95b2:	220f      	movs	r2, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    95b4:	8004      	strh	r4, [r0, #0]

	leds.out_fade	= of;
	leds.out_beat1	= b1;
	leds.out_beat2	= b2;
	leds.out_min1	= m1;
	leds.out_min2	= m2;
    95b6:	f886 7856 	strb.w	r7, [r6, #2134]	; 0x856
	leds.delay_time			= 15;

	leds.out_fade	= of;
	leds.out_beat1	= b1;
	leds.out_beat2	= b2;
	leds.out_min1	= m1;
    95ba:	f886 3855 	strb.w	r3, [r6, #2133]	; 0x855
#ifndef OUTWARD_H
#define OUTWARD_H

void outward_init(LEDStruct& leds, uint8_t of = random8(2,32), uint8_t b1 = random8(4,11), uint8_t b2 = random8(4,11), uint8_t m1 = random8(0,200), uint8_t m2 = random8(0,200)) {
	leds.mode_initialized	= 1;
    95be:	f886 522e 	strb.w	r5, [r6, #558]	; 0x22e
	leds.mode_type			= OUTWARD;
	leds.use_palette		= 1;
    95c2:	f886 522a 	strb.w	r5, [r6, #554]	; 0x22a
#ifndef OUTWARD_H
#define OUTWARD_H

void outward_init(LEDStruct& leds, uint8_t of = random8(2,32), uint8_t b1 = random8(4,11), uint8_t b2 = random8(4,11), uint8_t m1 = random8(0,200), uint8_t m2 = random8(0,200)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= OUTWARD;
    95c6:	f886 122d 	strb.w	r1, [r6, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    95ca:	f886 21c3 	strb.w	r2, [r6, #451]	; 0x1c3
}


void outward(LEDStruct& leds) {
	if (!leds.mode_initialized) { outward_init(leds); }
	if (keyboard_update) { outward_update(leds); }
    95ce:	4ba1      	ldr	r3, [pc, #644]	; (9854 <outward(LEDStruct&)+0x364>)
    95d0:	781b      	ldrb	r3, [r3, #0]
    95d2:	2b00      	cmp	r3, #0
    95d4:	f040 8149 	bne.w	986a <outward(LEDStruct&)+0x37a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    95d8:	4f9f      	ldr	r7, [pc, #636]	; (9858 <outward(LEDStruct&)+0x368>)

	leds.led_data[ONE_SIDE / 2]		= ColorFromPalette(leds.current_palette, beatsin8(leds.out_beat2), beatsin8(leds.out_beat1, leds.out_min1, 255), leds.current_blending);
    95da:	f896 3854 	ldrb.w	r3, [r6, #2132]	; 0x854
    95de:	683a      	ldr	r2, [r7, #0]
    95e0:	9207      	str	r2, [sp, #28]
	return ret;
    95e2:	9907      	ldr	r1, [sp, #28]
    95e4:	f44f 728c 	mov.w	r2, #280	; 0x118
    95e8:	021b      	lsls	r3, r3, #8
    95ea:	fb02 f101 	mul.w	r1, r2, r1
    95ee:	fb03 f101 	mul.w	r1, r3, r1
    95f2:	0e09      	lsrs	r1, r1, #24
    95f4:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    95f6:	065c      	lsls	r4, r3, #25
    95f8:	f506 75e4 	add.w	r5, r6, #456	; 0x1c8
    95fc:	f140 8130 	bpl.w	9860 <outward(LEDStruct&)+0x370>
        offset = (uint8_t)255 - offset;
    9600:	43db      	mvns	r3, r3
    9602:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9604:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    9608:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    960a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    960e:	4c93      	ldr	r4, [pc, #588]	; (985c <outward(LEDStruct&)+0x36c>)
    9610:	f896 c855 	ldrb.w	ip, [r6, #2133]	; 0x855
    9614:	1112      	asrs	r2, r2, #4
    9616:	0052      	lsls	r2, r2, #1
    9618:	18a0      	adds	r0, r4, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    961a:	5ca2      	ldrb	r2, [r4, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    961c:	7840      	ldrb	r0, [r0, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    961e:	fb10 f303 	smulbb	r3, r0, r3
    9622:	eb02 1323 	add.w	r3, r2, r3, asr #4
    9626:	b2da      	uxtb	r2, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9628:	683b      	ldr	r3, [r7, #0]
    962a:	9306      	str	r3, [sp, #24]
    if( theta & 0x80 ) y = -y;
    962c:	0608      	lsls	r0, r1, #24
    962e:	f896 1853 	ldrb.w	r1, [r6, #2131]	; 0x853
	return ret;
    9632:	9806      	ldr	r0, [sp, #24]
    9634:	f44f 738c 	mov.w	r3, #280	; 0x118
    9638:	fb03 f000 	mul.w	r0, r3, r0
    963c:	ea4f 2301 	mov.w	r3, r1, lsl #8
    9640:	fb03 f300 	mul.w	r3, r3, r0
    9644:	bf48      	it	mi
    9646:	4252      	negmi	r2, r2
    9648:	0e1b      	lsrs	r3, r3, #24
    964a:	b252      	sxtb	r2, r2
    964c:	b2d8      	uxtb	r0, r3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    964e:	3a80      	subs	r2, #128	; 0x80
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    9650:	0641      	lsls	r1, r0, #25
    9652:	b2d2      	uxtb	r2, r2
    9654:	f140 80f6 	bpl.w	9844 <outward(LEDStruct&)+0x354>
        offset = (uint8_t)255 - offset;
    9658:	43c1      	mvns	r1, r0
    965a:	b2c9      	uxtb	r1, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    965c:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;
    9660:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    9662:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    9666:	1109      	asrs	r1, r1, #4
    9668:	0049      	lsls	r1, r1, #1
    966a:	eb04 0801 	add.w	r8, r4, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    966e:	f814 e001 	ldrb.w	lr, [r4, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    9672:	f898 1001 	ldrb.w	r1, [r8, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    9676:	fb11 f000 	smulbb	r0, r1, r0
    967a:	eb0e 1020 	add.w	r0, lr, r0, asr #4
    967e:	b2c1      	uxtb	r1, r0
    if( theta & 0x80 ) y = -y;
    9680:	0618      	lsls	r0, r3, #24
    9682:	bf48      	it	mi
    9684:	4249      	negmi	r1, r1
    9686:	b249      	sxtb	r1, r1
    9688:	ea6f 030c 	mvn.w	r3, ip
    968c:	3980      	subs	r1, #128	; 0x80
    968e:	b2db      	uxtb	r3, r3
    9690:	b2c9      	uxtb	r1, r1
    9692:	fb03 1101 	mla	r1, r3, r1, r1
    9696:	eb0c 2321 	add.w	r3, ip, r1, asr #8
    969a:	f896 1228 	ldrb.w	r1, [r6, #552]	; 0x228
    969e:	9100      	str	r1, [sp, #0]
    96a0:	b2db      	uxtb	r3, r3
    96a2:	4629      	mov	r1, r5
    96a4:	a805      	add	r0, sp, #20
    96a6:	f002 fa4f 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    96aa:	683b      	ldr	r3, [r7, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    96ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
        g = rhs.g;
    96b0:	f89d e015 	ldrb.w	lr, [sp, #21]
        b = rhs.b;
    96b4:	f89d 0016 	ldrb.w	r0, [sp, #22]
    96b8:	9305      	str	r3, [sp, #20]
	return ret;
    96ba:	9905      	ldr	r1, [sp, #20]
	leds.led_data[ONE_SIDE / 2 - 1] = ColorFromPalette(leds.current_palette, beatsin8(leds.out_beat1), beatsin8(leds.out_beat2, leds.out_min2, 255), leds.current_blending);
    96bc:	f896 3853 	ldrb.w	r3, [r6, #2131]	; 0x853
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    96c0:	f886 206f 	strb.w	r2, [r6, #111]	; 0x6f
    96c4:	f44f 728c 	mov.w	r2, #280	; 0x118
    96c8:	fb02 f101 	mul.w	r1, r2, r1
    96cc:	021b      	lsls	r3, r3, #8
    96ce:	fb03 f101 	mul.w	r1, r3, r1
    96d2:	0e09      	lsrs	r1, r1, #24
    96d4:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    96d6:	065a      	lsls	r2, r3, #25
        g = rhs.g;
    96d8:	f886 e070 	strb.w	lr, [r6, #112]	; 0x70
        b = rhs.b;
    96dc:	f886 0071 	strb.w	r0, [r6, #113]	; 0x71
    96e0:	f140 80ab 	bpl.w	983a <outward(LEDStruct&)+0x34a>
        offset = (uint8_t)255 - offset;
    96e4:	43db      	mvns	r3, r3
    96e6:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    96e8:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    96ec:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    96ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    96f2:	1112      	asrs	r2, r2, #4
    96f4:	0052      	lsls	r2, r2, #1
    96f6:	18a0      	adds	r0, r4, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    96f8:	5ca2      	ldrb	r2, [r4, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    96fa:	7840      	ldrb	r0, [r0, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    96fc:	fb10 f303 	smulbb	r3, r0, r3
    9700:	eb02 1323 	add.w	r3, r2, r3, asr #4
    9704:	b2da      	uxtb	r2, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9706:	683b      	ldr	r3, [r7, #0]
    9708:	9304      	str	r3, [sp, #16]
    if( theta & 0x80 ) y = -y;
    970a:	0608      	lsls	r0, r1, #24
    970c:	f896 3854 	ldrb.w	r3, [r6, #2132]	; 0x854
	return ret;
    9710:	9804      	ldr	r0, [sp, #16]
    9712:	f896 7856 	ldrb.w	r7, [r6, #2134]	; 0x856
    9716:	f44f 718c 	mov.w	r1, #280	; 0x118
    971a:	fb01 fe00 	mul.w	lr, r1, r0
    971e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    9722:	fb03 fe0e 	mul.w	lr, r3, lr
    9726:	bf48      	it	mi
    9728:	4252      	negmi	r2, r2
    972a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    972e:	b252      	sxtb	r2, r2
    9730:	fa5f f38e 	uxtb.w	r3, lr
    9734:	3a80      	subs	r2, #128	; 0x80
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    9736:	0659      	lsls	r1, r3, #25
    9738:	b2d2      	uxtb	r2, r2
    973a:	d579      	bpl.n	9830 <outward(LEDStruct&)+0x340>
        offset = (uint8_t)255 - offset;
    973c:	43db      	mvns	r3, r3
    973e:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9740:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    9744:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    9746:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    974a:	1109      	asrs	r1, r1, #4
    974c:	0049      	lsls	r1, r1, #1
    974e:	1860      	adds	r0, r4, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    9750:	5c64      	ldrb	r4, [r4, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    9752:	7840      	ldrb	r0, [r0, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    9754:	fb10 f303 	smulbb	r3, r0, r3
    9758:	eb04 1023 	add.w	r0, r4, r3, asr #4
    975c:	b2c1      	uxtb	r1, r0
    if( theta & 0x80 ) y = -y;
    975e:	f01e 0f80 	tst.w	lr, #128	; 0x80
    9762:	bf18      	it	ne
    9764:	4249      	negne	r1, r1
    9766:	b249      	sxtb	r1, r1
    9768:	43fb      	mvns	r3, r7
    976a:	3980      	subs	r1, #128	; 0x80
    976c:	b2db      	uxtb	r3, r3
    976e:	b2c9      	uxtb	r1, r1
    9770:	fb03 1101 	mla	r1, r3, r1, r1
    9774:	eb07 2321 	add.w	r3, r7, r1, asr #8
    9778:	f896 1228 	ldrb.w	r1, [r6, #552]	; 0x228
    977c:	9100      	str	r1, [sp, #0]
    977e:	b2db      	uxtb	r3, r3
    9780:	4629      	mov	r1, r5
    9782:	a803      	add	r0, sp, #12
    9784:	f002 f9e0 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    9788:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    978c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    9790:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    9794:	f886 106c 	strb.w	r1, [r6, #108]	; 0x6c
        g = rhs.g;
    9798:	f886 206d 	strb.w	r2, [r6, #109]	; 0x6d
        b = rhs.b;
    979c:	f886 306e 	strb.w	r3, [r6, #110]	; 0x6e
    97a0:	4632      	mov	r2, r6
    97a2:	f106 076f 	add.w	r7, r6, #111	; 0x6f
    97a6:	4633      	mov	r3, r6
    97a8:	4631      	mov	r1, r6
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    97aa:	f891 50db 	ldrb.w	r5, [r1, #219]	; 0xdb
        g = rhs.g;
    97ae:	f891 40dc 	ldrb.w	r4, [r1, #220]	; 0xdc
        b = rhs.b;
    97b2:	f891 00dd 	ldrb.w	r0, [r1, #221]	; 0xdd
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    97b6:	f881 50de 	strb.w	r5, [r1, #222]	; 0xde
        g = rhs.g;
    97ba:	f881 40df 	strb.w	r4, [r1, #223]	; 0xdf
        b = rhs.b;
    97be:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    97c2:	f893 50e4 	ldrb.w	r5, [r3, #228]	; 0xe4
        g = rhs.g;
    97c6:	f893 40e5 	ldrb.w	r4, [r3, #229]	; 0xe5
        b = rhs.b;
    97ca:	f893 00e6 	ldrb.w	r0, [r3, #230]	; 0xe6
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    97ce:	f883 50e1 	strb.w	r5, [r3, #225]	; 0xe1
        g = rhs.g;
    97d2:	f883 40e2 	strb.w	r4, [r3, #226]	; 0xe2
        b = rhs.b;
    97d6:	f883 00e3 	strb.w	r0, [r3, #227]	; 0xe3
    97da:	3303      	adds	r3, #3

	for (int i = ONE_SIDE - 1; i > ONE_SIDE / 2; i--) {						// Move to the right.
    97dc:	42bb      	cmp	r3, r7
    97de:	f1a1 0103 	sub.w	r1, r1, #3
    97e2:	d1e2      	bne.n	97aa <outward(LEDStruct&)+0x2ba>
    97e4:	1cf3      	adds	r3, r6, #3
    97e6:	f1a6 056c 	sub.w	r5, r6, #108	; 0x6c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    97ea:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    97ec:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    97ee:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    97f0:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
    97f4:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    97f8:	f803 1c01 	strb.w	r1, [r3, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    97fc:	f892 41bc 	ldrb.w	r4, [r2, #444]	; 0x1bc
        g = rhs.g;
    9800:	f892 01bd 	ldrb.w	r0, [r2, #445]	; 0x1bd
        b = rhs.b;
    9804:	f892 11be 	ldrb.w	r1, [r2, #446]	; 0x1be
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    9808:	f882 41bf 	strb.w	r4, [r2, #447]	; 0x1bf
        g = rhs.g;
    980c:	f882 01c0 	strb.w	r0, [r2, #448]	; 0x1c0
        b = rhs.b;
    9810:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    9814:	3a03      	subs	r2, #3
		leds.led_data[i] = leds.led_data[i - 1];
		leds.led_data[NUM_LEDS - (i + 1)] = leds.led_data[NUM_LEDS - i];
	}
	for (int i = 0; i < ONE_SIDE / 2 - 1; i++) {							// Move to the left.
    9816:	4295      	cmp	r5, r2
    9818:	f103 0303 	add.w	r3, r3, #3
    981c:	d1e5      	bne.n	97ea <outward(LEDStruct&)+0x2fa>
		leds.led_data[i] = leds.led_data[i + 1];
		leds.led_data[NUM_LEDS - 1 - i] = leds.led_data[NUM_LEDS - 1 - i - 1];
	}

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.out_fade);
    981e:	f896 2857 	ldrb.w	r2, [r6, #2135]	; 0x857
    9822:	4630      	mov	r0, r6
    9824:	2196      	movs	r1, #150	; 0x96
    9826:	f002 f92f 	bl	ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}
    982a:	b008      	add	sp, #32
    982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    9830:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9834:	f003 030f 	and.w	r3, r3, #15
    9838:	e787      	b.n	974a <outward(LEDStruct&)+0x25a>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    983a:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    983e:	f003 030f 	and.w	r3, r3, #15
    9842:	e756      	b.n	96f2 <outward(LEDStruct&)+0x202>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    9844:	f000 013f 	and.w	r1, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9848:	f000 000f 	and.w	r0, r0, #15
    984c:	e70b      	b.n	9666 <outward(LEDStruct&)+0x176>
    984e:	bf00      	nop
    9850:	1fff8788 	.word	0x1fff8788
    9854:	1fff9625 	.word	0x1fff9625
    9858:	1fffb19c 	.word	0x1fffb19c
    985c:	000112bc 	.word	0x000112bc
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    9860:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9864:	f003 030f 	and.w	r3, r3, #15
    9868:	e6d1      	b.n	960e <outward(LEDStruct&)+0x11e>
}


void outward(LEDStruct& leds) {
	if (!leds.mode_initialized) { outward_init(leds); }
	if (keyboard_update) { outward_update(leds); }
    986a:	4630      	mov	r0, r6
    986c:	f7ff fe10 	bl	9490 <outward_update(LEDStruct&)>
    9870:	e6b2      	b.n	95d8 <outward(LEDStruct&)+0xe8>
    9872:	bf00      	nop

00009874 <waves(LEDStruct&)>:
		case 1:		leds.wave_speed = (uint8_t)update_arg;	break; //b
		default: break;
	}
}

void waves(LEDStruct& leds) {
    9874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9878:	4604      	mov	r4, r0
    987a:	b085      	sub	sp, #20
    987c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 9978 <waves(LEDStruct&)+0x104>
    9880:	f500 79e4 	add.w	r9, r0, #456	; 0x1c8
    9884:	4606      	mov	r6, r0
    9886:	4607      	mov	r7, r0
    9888:	2500      	movs	r5, #0
///           that oscillates within a given range.
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,
                            uint32_t timebase = 0, uint8_t phase_offset = 0)
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    988a:	f44f 7b8c 	mov.w	fp, #280	; 0x118

	for (uint8_t i = 0; i < ONE_SIDE; i++) {
    988e:	f644 2ab5 	movw	sl, #19125	; 0x4ab5
    9892:	e033      	b.n	98fc <waves(LEDStruct&)+0x88>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    9894:	b2c9      	uxtb	r1, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9896:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    989a:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    989c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    98a0:	1109      	asrs	r1, r1, #4
    98a2:	0049      	lsls	r1, r1, #1
    98a4:	eb08 0e01 	add.w	lr, r8, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    98a8:	f818 1001 	ldrb.w	r1, [r8, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    98ac:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    98b0:	fb1e f303 	smulbb	r3, lr, r3
    98b4:	eb01 1323 	add.w	r3, r1, r3, asr #4
    98b8:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    98ba:	0601      	lsls	r1, r0, #24
    98bc:	bf48      	it	mi
    98be:	425b      	negmi	r3, r3
		leds.wave_brightness = beatsin8(leds.wave_beat, 0, 255, 0, (i * 255) / (ONE_SIDE - 1));
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.wave_index + i, leds.wave_brightness, leds.current_blending);
    98c0:	f894 1858 	ldrb.w	r1, [r4, #2136]	; 0x858
    98c4:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    98c8:	9000      	str	r0, [sp, #0]
    98ca:	b25b      	sxtb	r3, r3
    98cc:	3b80      	subs	r3, #128	; 0x80
    98ce:	b2db      	uxtb	r3, r3
    98d0:	1a8a      	subs	r2, r1, r2
}

void waves(LEDStruct& leds) {

	for (uint8_t i = 0; i < ONE_SIDE; i++) {
		leds.wave_brightness = beatsin8(leds.wave_beat, 0, 255, 0, (i * 255) / (ONE_SIDE - 1));
    98d2:	f884 385b 	strb.w	r3, [r4, #2139]	; 0x85b
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.wave_index + i, leds.wave_brightness, leds.current_blending);
    98d6:	b2d2      	uxtb	r2, r2
    98d8:	4649      	mov	r1, r9
    98da:	a802      	add	r0, sp, #8
    98dc:	35ff      	adds	r5, #255	; 0xff
    98de:	f002 f933 	bl	bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    98e2:	f89d 1008 	ldrb.w	r1, [sp, #8]
        g = rhs.g;
    98e6:	f89d 2009 	ldrb.w	r2, [sp, #9]
        b = rhs.b;
    98ea:	f89d 300a 	ldrb.w	r3, [sp, #10]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    98ee:	7039      	strb	r1, [r7, #0]
	}
}

void waves(LEDStruct& leds) {

	for (uint8_t i = 0; i < ONE_SIDE; i++) {
    98f0:	4555      	cmp	r5, sl
        g = rhs.g;
    98f2:	707a      	strb	r2, [r7, #1]
        b = rhs.b;
    98f4:	70bb      	strb	r3, [r7, #2]
    98f6:	f107 0703 	add.w	r7, r7, #3
    98fa:	d01f      	beq.n	993c <waves(LEDStruct&)+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    98fc:	4b1c      	ldr	r3, [pc, #112]	; (9970 <waves(LEDStruct&)+0xfc>)
    98fe:	4a1d      	ldr	r2, [pc, #116]	; (9974 <waves(LEDStruct&)+0x100>)
    9900:	681b      	ldr	r3, [r3, #0]
    9902:	9303      	str	r3, [sp, #12]
	return ret;
    9904:	9b03      	ldr	r3, [sp, #12]
		leds.wave_brightness = beatsin8(leds.wave_beat, 0, 255, 0, (i * 255) / (ONE_SIDE - 1));
    9906:	f894 1859 	ldrb.w	r1, [r4, #2137]	; 0x859
    990a:	fb82 0205 	smull	r0, r2, r2, r5
    990e:	442a      	add	r2, r5
    9910:	fb0b f303 	mul.w	r3, fp, r3
    9914:	0209      	lsls	r1, r1, #8
    9916:	17e8      	asrs	r0, r5, #31
    9918:	fb03 f101 	mul.w	r1, r3, r1
    991c:	ebc0 10a2 	rsb	r0, r0, r2, asr #6
    9920:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9924:	b2c0      	uxtb	r0, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    9926:	f010 0f40 	tst.w	r0, #64	; 0x40
    992a:	b2ea      	uxtb	r2, r5
        offset = (uint8_t)255 - offset;
    992c:	ea6f 0100 	mvn.w	r1, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    9930:	d1b0      	bne.n	9894 <waves(LEDStruct&)+0x20>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    9932:	f000 013f 	and.w	r1, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    9936:	f000 030f 	and.w	r3, r0, #15
    993a:	e7b1      	b.n	98a0 <waves(LEDStruct&)+0x2c>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.wave_index + i, leds.wave_brightness, leds.current_blending);
	}
	leds.wave_index += leds.wave_speed;
    993c:	f894 2858 	ldrb.w	r2, [r4, #2136]	; 0x858
    9940:	f894 385a 	ldrb.w	r3, [r4, #2138]	; 0x85a
    9944:	4413      	add	r3, r2
    9946:	f884 3858 	strb.w	r3, [r4, #2136]	; 0x858
    994a:	f104 02e1 	add.w	r2, r4, #225	; 0xe1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    994e:	7823      	ldrb	r3, [r4, #0]
    9950:	f886 31bf 	strb.w	r3, [r6, #447]	; 0x1bf
        g = rhs.g;
    9954:	7863      	ldrb	r3, [r4, #1]
    9956:	f886 31c0 	strb.w	r3, [r6, #448]	; 0x1c0
        b = rhs.b;
    995a:	78a3      	ldrb	r3, [r4, #2]
    995c:	f886 31c1 	strb.w	r3, [r6, #449]	; 0x1c1
    9960:	3403      	adds	r4, #3
    9962:	42a2      	cmp	r2, r4
    9964:	f1a6 0603 	sub.w	r6, r6, #3
    9968:	d1f1      	bne.n	994e <waves(LEDStruct&)+0xda>
	strip_sync(leds);

}
    996a:	b005      	add	sp, #20
    996c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9970:	1fffb19c 	.word	0x1fffb19c
    9974:	dd67c8a7 	.word	0xdd67c8a7
    9978:	000112bc 	.word	0x000112bc

0000997c <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    997c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (leds.mode_name) {
    9980:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    9984:	b085      	sub	sp, #20
    9986:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    9988:	2b22      	cmp	r3, #34	; 0x22
    998a:	f200 85cf 	bhi.w	a52c <switch_mode(LEDStruct&)+0xbb0>
    998e:	e8df f013 	tbh	[pc, r3, lsl #1]
    9992:	0023      	.short	0x0023
    9994:	041601c7 	.word	0x041601c7
    9998:	049b0545 	.word	0x049b0545
    999c:	03c300aa 	.word	0x03c300aa
    99a0:	00b00371 	.word	0x00b00371
    99a4:	03070110 	.word	0x03070110
    99a8:	028502d3 	.word	0x028502d3
    99ac:	017803c8 	.word	0x017803c8
    99b0:	011b016d 	.word	0x011b016d
    99b4:	031b0320 	.word	0x031b0320
    99b8:	03110316 	.word	0x03110316
    99bc:	0116030c 	.word	0x0116030c
    99c0:	028005c8 	.word	0x028005c8
    99c4:	0276027b 	.word	0x0276027b
    99c8:	026c0271 	.word	0x026c0271
    99cc:	02620267 	.word	0x02620267
    99d0:	0258025d 	.word	0x0258025d
    99d4:	024e0253 	.word	0x024e0253

		// Juggle Functions -----------------------------------------------------------------------
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    99d8:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
    99dc:	2900      	cmp	r1, #0
    99de:	f040 8082 	bne.w	9ae6 <switch_mode(LEDStruct&)+0x16a>
    99e2:	48ce      	ldr	r0, [pc, #824]	; (9d1c <switch_mode(LEDStruct&)+0x3a0>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    99e4:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
    99e8:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    99ea:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    99ee:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    99f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    99f6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    99fa:	3319      	adds	r3, #25
    99fc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9a00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9a04:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9a08:	3319      	adds	r3, #25
    9a0a:	b29b      	uxth	r3, r3
    9a0c:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    9a10:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9a14:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    9a18:	3519      	adds	r5, #25
    9a1a:	b2ad      	uxth	r5, r5
    9a1c:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    9a20:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    9a24:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    9a28:	3219      	adds	r2, #25
    9a2a:	b292      	uxth	r2, r2
    9a2c:	eb02 2c42 	add.w	ip, r2, r2, lsl #9
    9a30:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
    9a34:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    9a38:	f10c 0c19 	add.w	ip, ip, #25
    9a3c:	fa1f fc8c 	uxth.w	ip, ip
    9a40:	eb0c 264c 	add.w	r6, ip, ip, lsl #9
    9a44:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
    9a48:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    9a4c:	3619      	adds	r6, #25
    9a4e:	b2b6      	uxth	r6, r6
    9a50:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    9a54:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9a58:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    9a5c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    9a60:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9a64:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    9a68:	b2ed      	uxtb	r5, r5
	leds.juggle_fade		 = jf;
    9a6a:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    9a6c:	b2ff      	uxtb	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9a6e:	eb0c 231c 	add.w	r3, ip, ip, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9a72:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
    9a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	leds.juggle_fade		 = jf;
    9a7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9a7e:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    9a82:	eb07 0787 	add.w	r7, r7, r7, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9a86:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    9a8a:	11ad      	asrs	r5, r5, #6
	leds.juggle_fade		 = jf;
    9a8c:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    9a8e:	3508      	adds	r5, #8
	leds.juggle_fade		 = jf;
    9a90:	3220      	adds	r2, #32
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    9a92:	123f      	asrs	r7, r7, #8
    9a94:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9a96:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    9a9a:	f884 1236 	strb.w	r1, [r4, #566]	; 0x236
    9a9e:	eb0e 211e 	add.w	r1, lr, lr, lsr #8
	leds.juggle_numdots 	 = jn;
    9aa2:	3701      	adds	r7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9aa4:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    9aa6:	f3c6 16c0 	ubfx	r6, r6, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    9aaa:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    9aae:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    9ab2:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    9ab6:	2501      	movs	r5, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    9ab8:	220f      	movs	r2, #15

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    9aba:	f884 7230 	strb.w	r7, [r4, #560]	; 0x230
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    9abe:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9ac2:	f8a0 e000 	strh.w	lr, [r0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    9ac6:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    9aca:	f884 6234 	strb.w	r6, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    9ace:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    9ad2:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    9ad6:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    9ada:	b126      	cbz	r6, 9ae6 <switch_mode(LEDStruct&)+0x16a>
    9adc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9ae0:	40ab      	lsls	r3, r5
    9ae2:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			if (!leds.mode_initialized) { juggle_init(leds); }
			juggle_half(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    9ae6:	4620      	mov	r0, r4
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9ae8:	b005      	add	sp, #20
    9aea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			if (!leds.mode_initialized) { juggle_init(leds); }
			juggle_half(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    9aee:	f7f9 bc49 	b.w	3384 <juggle(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    9af2:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    9af6:	2b00      	cmp	r3, #0
    9af8:	d15b      	bne.n	9bb2 <switch_mode(LEDStruct&)+0x236>
    9afa:	4888      	ldr	r0, [pc, #544]	; (9d1c <switch_mode(LEDStruct&)+0x3a0>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    9afc:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    9b00:	8803      	ldrh	r3, [r0, #0]
    9b02:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9b06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9b0a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9b0e:	3319      	adds	r3, #25
    9b10:	b29b      	uxth	r3, r3
    9b12:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9b16:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    9b1a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    9b1e:	3219      	adds	r2, #25
    9b20:	b292      	uxth	r2, r2
    9b22:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    9b26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    9b2a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    9b2e:	3619      	adds	r6, #25
    9b30:	b2b6      	uxth	r6, r6
    9b32:	eb06 2546 	add.w	r5, r6, r6, lsl #9
    9b36:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    9b3a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9b3e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9b42:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9b44:	3519      	adds	r5, #25
    9b46:	b2ad      	uxth	r5, r5
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9b48:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9b4c:	eb05 2115 	add.w	r1, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9b50:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    9b54:	b2c9      	uxtb	r1, r1
    9b56:	121b      	asrs	r3, r3, #8
    9b58:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9b5c:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    9b5e:	2701      	movs	r7, #1
    9b60:	11c9      	asrs	r1, r1, #7
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9b62:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9b66:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9b68:	8005      	strh	r5, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9b6a:	3103      	adds	r1, #3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    9b6c:	f3c6 16c0 	ubfx	r6, r6, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    9b70:	2507      	movs	r5, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    9b72:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    9b74:	42bb      	cmp	r3, r7
    9b76:	b2c9      	uxtb	r1, r1
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    9b78:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    9b7c:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    9b80:	f884 727b 	strb.w	r7, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    9b84:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    9b88:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    9b8c:	f000 82c2 	beq.w	a114 <switch_mode(LEDStruct&)+0x798>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9b90:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9b94:	b2d2      	uxtb	r2, r2
    9b96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9b9a:	1212      	asrs	r2, r2, #8
    9b9c:	443a      	add	r2, r7
    9b9e:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    9ba0:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    9ba4:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    9ba8:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    9bac:	4620      	mov	r0, r4
    9bae:	f7f8 fb45 	bl	223c <LEDDebug(LEDStruct&)>
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    9bb2:	4620      	mov	r0, r4
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9bb4:	b005      	add	sp, #20
    9bb6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    9bba:	f7fa bdf9 	b.w	47b0 <rainbow_march(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9bbe:	b005      	add	sp, #20
    9bc0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Sin Functions -----------------------------------------------------------------------
		case ONE_SIN:
			one_sin(leds);
    9bc4:	f7fb beb4 	b.w	5930 <one_sin(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
    9bc8:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    9bcc:	2a00      	cmp	r2, #0
    9bce:	d147      	bne.n	9c60 <switch_mode(LEDStruct&)+0x2e4>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9bd0:	4d52      	ldr	r5, [pc, #328]	; (9d1c <switch_mode(LEDStruct&)+0x3a0>)
    9bd2:	882b      	ldrh	r3, [r5, #0]
    9bd4:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    9bd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9bdc:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9be0:	3019      	adds	r0, #25
    9be2:	b280      	uxth	r0, r0
    9be4:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    9be8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9bec:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    9bf0:	3119      	adds	r1, #25
    9bf2:	b289      	uxth	r1, r1
    9bf4:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    9bf8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9bfc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9c00:	3319      	adds	r3, #25
    9c02:	b29b      	uxth	r3, r3
    9c04:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    9c08:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9c0c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    9c10:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9c14:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9c18:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    9c1c:	b2c7      	uxtb	r7, r0
    9c1e:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9c20:	3619      	adds	r6, #25
    9c22:	b2db      	uxtb	r3, r3
    9c24:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    9c28:	b2b6      	uxth	r6, r6
    9c2a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    9c2e:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    9c32:	1188      	asrs	r0, r1, #6
    9c34:	1199      	asrs	r1, r3, #6
    9c36:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9c3a:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    9c3e:	3032      	adds	r0, #50	; 0x32
    9c40:	f3c7 1781 	ubfx	r7, r7, #6, #2
    9c44:	313c      	adds	r1, #60	; 0x3c
    9c46:	121b      	asrs	r3, r3, #8
    9c48:	b2c0      	uxtb	r0, r0
    9c4a:	b2c9      	uxtb	r1, r1
    9c4c:	3701      	adds	r7, #1
    9c4e:	3314      	adds	r3, #20
    9c50:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    9c54:	b2db      	uxtb	r3, r3
    9c56:	4611      	mov	r1, r2
    9c58:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9c5a:	802e      	strh	r6, [r5, #0]
    9c5c:	f7fa ff74 	bl	4b48 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			torch(leds);
    9c60:	4620      	mov	r0, r4
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9c62:	b005      	add	sp, #20
    9c64:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
			torch(leds);
    9c68:	f7fb baea 	b.w	5240 <torch(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    9c6c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    9c70:	2b00      	cmp	r3, #0
    9c72:	f000 845e 	beq.w	a532 <switch_mode(LEDStruct&)+0xbb6>

		
		// Fire Functions -----------------------------------------------------------------------
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
			fire(leds);
    9c76:	4620      	mov	r0, r4
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9c78:	b005      	add	sp, #20
    9c7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

		
		// Fire Functions -----------------------------------------------------------------------
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
			fire(leds);
    9c7e:	f7fb b807 	b.w	4c90 <fire(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
    9c82:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
    9c86:	2900      	cmp	r1, #0
    9c88:	d1f5      	bne.n	9c76 <switch_mode(LEDStruct&)+0x2fa>
    9c8a:	4d24      	ldr	r5, [pc, #144]	; (9d1c <switch_mode(LEDStruct&)+0x3a0>)
    9c8c:	882b      	ldrh	r3, [r5, #0]
    9c8e:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    9c92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9c96:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9c9a:	3019      	adds	r0, #25
    9c9c:	b280      	uxth	r0, r0
    9c9e:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    9ca2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    9ca6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    9caa:	3219      	adds	r2, #25
    9cac:	b292      	uxth	r2, r2
    9cae:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    9cb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9cb6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9cba:	3319      	adds	r3, #25
    9cbc:	b29b      	uxth	r3, r3
    9cbe:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    9cc2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9cc6:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    9cca:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9cce:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9cd2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    9cd6:	b2c7      	uxtb	r7, r0
    9cd8:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9cda:	3619      	adds	r6, #25
    9cdc:	b2db      	uxtb	r3, r3
    9cde:	b2b6      	uxth	r6, r6
    9ce0:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    9ce4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    9ce8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    9cec:	1190      	asrs	r0, r2, #6
    9cee:	119a      	asrs	r2, r3, #6
    9cf0:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9cf4:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    9cf8:	3032      	adds	r0, #50	; 0x32
    9cfa:	f3c7 1781 	ubfx	r7, r7, #6, #2
    9cfe:	323c      	adds	r2, #60	; 0x3c
    9d00:	121b      	asrs	r3, r3, #8
    9d02:	b2c0      	uxtb	r0, r0
    9d04:	3701      	adds	r7, #1
    9d06:	b2d2      	uxtb	r2, r2
    9d08:	3314      	adds	r3, #20
    9d0a:	e88d 0085 	stmia.w	sp, {r0, r2, r7}
    9d0e:	b2db      	uxtb	r3, r3
    9d10:	2201      	movs	r2, #1
    9d12:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9d14:	802e      	strh	r6, [r5, #0]
    9d16:	f7fa ff17 	bl	4b48 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    9d1a:	e7ac      	b.n	9c76 <switch_mode(LEDStruct&)+0x2fa>
    9d1c:	1fff8788 	.word	0x1fff8788
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    9d20:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    9d24:	2a00      	cmp	r2, #0
    9d26:	f47f aede 	bne.w	9ae6 <switch_mode(LEDStruct&)+0x16a>
    9d2a:	49d1      	ldr	r1, [pc, #836]	; (a070 <switch_mode(LEDStruct&)+0x6f4>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    9d2c:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    9d30:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    9d32:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    9d36:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9d3a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9d3e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9d42:	3319      	adds	r3, #25
    9d44:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9d48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9d4c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9d50:	3319      	adds	r3, #25
    9d52:	b29b      	uxth	r3, r3
    9d54:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    9d58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9d5c:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9d60:	3019      	adds	r0, #25
    9d62:	b280      	uxth	r0, r0
    9d64:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    9d68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    9d6c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    9d70:	3219      	adds	r2, #25
    9d72:	b292      	uxth	r2, r2
    9d74:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    9d78:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    9d7c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    9d80:	f10e 0e19 	add.w	lr, lr, #25
    9d84:	fa1f fe8e 	uxth.w	lr, lr
    9d88:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    9d8c:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    9d90:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    9d94:	3519      	adds	r5, #25
    9d96:	b2ad      	uxth	r5, r5
    9d98:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9d9c:	eb03 2613 	add.w	r6, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9da0:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9da4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    9da8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.juggle_numdots 	 = jn;
    9dac:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9dae:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    9db2:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    9db4:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    9db6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9dba:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9dbe:	3719      	adds	r7, #25
	leds.juggle_beat		 = jb;
    9dc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    9dc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    9dc8:	1236      	asrs	r6, r6, #8
    9dca:	b2bf      	uxth	r7, r7
    9dcc:	3601      	adds	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9dce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    9dd2:	1180      	asrs	r0, r0, #6
	leds.juggle_fade		 = jf;
    9dd4:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    9dd6:	3008      	adds	r0, #8
	leds.juggle_fade		 = jf;
    9dd8:	3220      	adds	r2, #32
    9dda:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9ddc:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    9de0:	f884 6230 	strb.w	r6, [r4, #560]	; 0x230
    9de4:	eb07 2617 	add.w	r6, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9de8:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    9dea:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    9dee:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    9df2:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    9df6:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    9dfa:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    9dfc:	220f      	movs	r2, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    9dfe:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9e02:	800f      	strh	r7, [r1, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    9e04:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    9e08:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    9e0c:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    9e10:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    9e14:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    9e18:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    9e1c:	2d00      	cmp	r5, #0
    9e1e:	f43f ae62 	beq.w	9ae6 <switch_mode(LEDStruct&)+0x16a>
    9e22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9e26:	4083      	lsls	r3, r0
    9e28:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    9e2c:	e65b      	b.n	9ae6 <switch_mode(LEDStruct&)+0x16a>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e2e:	b005      	add	sp, #20
    9e30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			plasma(leds);
			break;

		// Outward Functions ---------------------------------------------------------------------
		case OUTWARD:
			outward(leds);
    9e34:	f7ff bb5c 	b.w	94f0 <outward(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e38:	b005      	add	sp, #20
    9e3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			outward(leds);
			break;

		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
    9e3e:	f7ff bd19 	b.w	9874 <waves(LEDStruct&)>
			break;
	}
}
    9e42:	b005      	add	sp, #20
    9e44:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			twinkle(leds);
			break;

		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
    9e48:	f7ff b92c 	b.w	90a4 <plasma(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e4c:	b005      	add	sp, #20
    9e4e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			lightsaber(leds);
			break;

		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
    9e52:	f7fe bedb 	b.w	8c0c <twinkle(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e56:	b005      	add	sp, #20
    9e58:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			bounce(leds);
			break;

		// Lightsaber Functions ---------------------------------------------------------------------
		case LIGHTSABER:
			lightsaber(leds);
    9e5c:	f7fe bc50 	b.w	8700 <lightsaber(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e60:	b005      	add	sp, #20
    9e62:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Bouncing Functions -----------------------------------------------------------------------
		case BOUNCING_BALLS:
			bouncing_balls(leds);
    9e66:	f7fe baeb 	b.w	8440 <bouncing_balls(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e6a:	b005      	add	sp, #20
    9e6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case BOUNCING_BALLS:
			bouncing_balls(leds);
			break;

		case BOUNCE:
			bounce(leds);
    9e70:	f7fe b894 	b.w	7f9c <bounce(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e74:	b005      	add	sp, #20
    9e76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case NOISE:
			noise(leds);
			break;

		case NOISE_MOVER:
			noise_mover(leds);
    9e7a:	f7fc bf17 	b.w	6cac <noise_mover(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e7e:	b005      	add	sp, #20
    9e80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Noise Functions -----------------------------------------------------------------------
		case NOISE:
			noise(leds);
    9e84:	f7fc be0e 	b.w	6aa4 <noise(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e88:	b005      	add	sp, #20
    9e8a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Shooting Pole -----------------------------------------------------------------------
		case SHOOTING_POLE:
			shooting_pole(leds);
    9e8e:	f7fc b9f1 	b.w	6274 <shooting_pole(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9e92:	b005      	add	sp, #20
    9e94:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Fireworks Functions -----------------------------------------------------------------------
		case FIREWORKS:
			fireworks(leds);
    9e98:	f7fc b92a 	b.w	60f0 <fireworks(LEDStruct&)>
			break;

		
		// Fire Functions -----------------------------------------------------------------------
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    9e9c:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    9ea0:	2a00      	cmp	r2, #0
    9ea2:	f47f aee8 	bne.w	9c76 <switch_mode(LEDStruct&)+0x2fa>
    9ea6:	4d72      	ldr	r5, [pc, #456]	; (a070 <switch_mode(LEDStruct&)+0x6f4>)
    9ea8:	882b      	ldrh	r3, [r5, #0]
    9eaa:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    9eae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9eb2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9eb6:	3019      	adds	r0, #25
    9eb8:	b280      	uxth	r0, r0
    9eba:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    9ebe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9ec2:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    9ec6:	3119      	adds	r1, #25
    9ec8:	b289      	uxth	r1, r1
    9eca:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    9ece:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9ed2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9ed6:	3319      	adds	r3, #25
    9ed8:	b29b      	uxth	r3, r3
    9eda:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    9ede:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9ee2:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    9ee6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9eea:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9eee:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    9ef2:	b2c7      	uxtb	r7, r0
    9ef4:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9ef6:	3619      	adds	r6, #25
    9ef8:	b2db      	uxtb	r3, r3
    9efa:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    9efe:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    9f02:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    9f06:	b2b6      	uxth	r6, r6
    9f08:	1188      	asrs	r0, r1, #6
    9f0a:	1199      	asrs	r1, r3, #6
    9f0c:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9f10:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    9f14:	3032      	adds	r0, #50	; 0x32
    9f16:	f3c7 1781 	ubfx	r7, r7, #6, #2
    9f1a:	313c      	adds	r1, #60	; 0x3c
    9f1c:	121b      	asrs	r3, r3, #8
    9f1e:	b2c0      	uxtb	r0, r0
    9f20:	3701      	adds	r7, #1
    9f22:	b2c9      	uxtb	r1, r1
    9f24:	3314      	adds	r3, #20
    9f26:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    9f2a:	b2db      	uxtb	r3, r3
    9f2c:	4611      	mov	r1, r2
    9f2e:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9f30:	802e      	strh	r6, [r5, #0]
    9f32:	f7fa fe09 	bl	4b48 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    9f36:	e69e      	b.n	9c76 <switch_mode(LEDStruct&)+0x2fa>
		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
			break;

		case RAINBOW_1:		// custom 1, rainbows slowly emanating from center
			if (!leds.mode_initialized) { leds.this_dir = 0; rainbow_init(leds, 1, 4, 2, 0); }
    9f38:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
    9f3c:	2900      	cmp	r1, #0
    9f3e:	f47f ae38 	bne.w	9bb2 <switch_mode(LEDStruct&)+0x236>
    9f42:	4d4b      	ldr	r5, [pc, #300]	; (a070 <switch_mode(LEDStruct&)+0x6f4>)
    9f44:	f880 11c5 	strb.w	r1, [r0, #453]	; 0x1c5
    9f48:	882b      	ldrh	r3, [r5, #0]
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    9f4a:	f880 122a 	strb.w	r1, [r0, #554]	; 0x22a
    9f4e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9f52:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9f56:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9f5a:	3319      	adds	r3, #25
    9f5c:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9f5e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
	
	leds.juggle_beat	= jb;
    9f62:	b2d2      	uxtb	r2, r2
    9f64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9f68:	11d2      	asrs	r2, r2, #7
    9f6a:	3203      	adds	r2, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    9f6c:	2001      	movs	r0, #1
	leds.mode_type			= RAINBOW_MARCH;
    9f6e:	2707      	movs	r7, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    9f70:	260f      	movs	r6, #15

	leds.use_full_range = ufr;
    9f72:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
	
	leds.juggle_beat	= jb;
    9f76:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    9f7a:	2104      	movs	r1, #4
    leds.rainbow_rot    = rr;
    9f7c:	2202      	movs	r2, #2
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    9f7e:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    9f82:	f884 027b 	strb.w	r0, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    9f86:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    9f8a:	f884 61c3 	strb.w	r6, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    9f8e:	f884 1279 	strb.w	r1, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    9f92:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
    9f96:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9f98:	802b      	strh	r3, [r5, #0]
    9f9a:	f7f8 f94f 	bl	223c <LEDDebug(LEDStruct&)>
    9f9e:	e608      	b.n	9bb2 <switch_mode(LEDStruct&)+0x236>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9fa0:	b005      	add	sp, #20
    9fa2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			if (!leds.mode_initialized) { leds.this_dir = 0; rainbow_init(leds, 1, 4, 2, 0); }
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_BEAT:
			rainbow_march_beat(leds);
    9fa6:	f7fa bce1 	b.w	496c <rainbow_march_beat(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9faa:	b005      	add	sp, #20
    9fac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Confetti Functions -----------------------------------------------------------------------
		case CONFETTI:
			confetti(leds);
    9fb0:	f7fb bbd0 	b.w	5754 <confetti(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9fb4:	b005      	add	sp, #20
    9fb6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case PRIDE:
			pride(leds);
			break;

		case PACIFICA:
			pacifica(leds);
    9fba:	f7fd bd07 	b.w	79cc <pacifica(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9fbe:	b005      	add	sp, #20
    9fc0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case COLORWAVE:
			colorwave(leds);
			break;

		case PRIDE:
			pride(leds);
    9fc4:	f7fd b90e 	b.w	71e4 <pride(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    9fc8:	b005      	add	sp, #20
    9fca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Colorwave, Pride, Pacifica Functions -----------------------------------------------------------------------
		case COLORWAVE:
			colorwave(leds);
    9fce:	f7fd bb11 	b.w	75f4 <colorwave(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
			torch(leds);
			break;

		case TORCH_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror must be off
    9fd2:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    9fd6:	2a00      	cmp	r2, #0
    9fd8:	f47f ae42 	bne.w	9c60 <switch_mode(LEDStruct&)+0x2e4>
    9fdc:	4d24      	ldr	r5, [pc, #144]	; (a070 <switch_mode(LEDStruct&)+0x6f4>)
    9fde:	882b      	ldrh	r3, [r5, #0]
    9fe0:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    9fe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9fe8:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9fec:	3019      	adds	r0, #25
    9fee:	b280      	uxth	r0, r0
    9ff0:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    9ff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9ff8:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    9ffc:	3119      	adds	r1, #25
    9ffe:	b289      	uxth	r1, r1
    a000:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    a004:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    a008:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a00c:	3319      	adds	r3, #25
    a00e:	b29b      	uxth	r3, r3
    a010:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    a014:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a018:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    a01c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a020:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a024:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    a028:	b2c7      	uxtb	r7, r0
    a02a:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a02c:	3619      	adds	r6, #25
    a02e:	b2db      	uxtb	r3, r3
    a030:	b2b6      	uxth	r6, r6
    a032:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    a036:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    a03a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    a03e:	1188      	asrs	r0, r1, #6
    a040:	1199      	asrs	r1, r3, #6
    a042:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a046:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    a04a:	3032      	adds	r0, #50	; 0x32
    a04c:	f3c7 1781 	ubfx	r7, r7, #6, #2
    a050:	313c      	adds	r1, #60	; 0x3c
    a052:	121b      	asrs	r3, r3, #8
    a054:	b2c0      	uxtb	r0, r0
    a056:	3701      	adds	r7, #1
    a058:	b2c9      	uxtb	r1, r1
    a05a:	3314      	adds	r3, #20
    a05c:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    a060:	b2db      	uxtb	r3, r3
    a062:	2101      	movs	r1, #1
    a064:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a066:	802e      	strh	r6, [r5, #0]
    a068:	f7fa fd6e 	bl	4b48 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    a06c:	e5f8      	b.n	9c60 <switch_mode(LEDStruct&)+0x2e4>
    a06e:	bf00      	nop
    a070:	1fff8788 	.word	0x1fff8788
			multi_juggle(leds);
			break;

		// Rainbow March Functions -----------------------------------------------------------------------
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    a074:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    a078:	2a00      	cmp	r2, #0
    a07a:	f47f ad9a 	bne.w	9bb2 <switch_mode(LEDStruct&)+0x236>
    a07e:	4891      	ldr	r0, [pc, #580]	; (a2c4 <switch_mode(LEDStruct&)+0x948>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    a080:	f884 222a 	strb.w	r2, [r4, #554]	; 0x22a
    a084:	8803      	ldrh	r3, [r0, #0]
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    a086:	f884 227b 	strb.w	r2, [r4, #635]	; 0x27b
    a08a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    a08e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a092:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a096:	3319      	adds	r3, #25
    a098:	b29b      	uxth	r3, r3
    a09a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    a09e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    a0a2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    a0a6:	3219      	adds	r2, #25
    a0a8:	b292      	uxth	r2, r2
    a0aa:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    a0ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    a0b2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    a0b6:	3619      	adds	r6, #25
    a0b8:	b2b6      	uxth	r6, r6
    a0ba:	eb06 2546 	add.w	r5, r6, r6, lsl #9
    a0be:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    a0c2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a0c6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a0ca:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a0cc:	3519      	adds	r5, #25
    a0ce:	b2ad      	uxth	r5, r5
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a0d0:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a0d4:	eb05 2115 	add.w	r1, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a0d8:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    a0dc:	b2c9      	uxtb	r1, r1
    a0de:	121b      	asrs	r3, r3, #8
    a0e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    a0e4:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    a0e6:	2701      	movs	r7, #1
    a0e8:	11c9      	asrs	r1, r1, #7
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a0ea:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a0ee:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a0f0:	8005      	strh	r5, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a0f2:	3103      	adds	r1, #3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    a0f4:	f3c6 16c0 	ubfx	r6, r6, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    a0f8:	2507      	movs	r5, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    a0fa:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    a0fc:	42bb      	cmp	r3, r7
    a0fe:	b2c9      	uxtb	r1, r1
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    a100:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    a104:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
	leds.mode_type			= RAINBOW_MARCH;
    a108:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    a10c:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    a110:	f47f ad3e 	bne.w	9b90 <switch_mode(LEDStruct&)+0x214>
    a114:	461a      	mov	r2, r3
    a116:	e543      	b.n	9ba0 <switch_mode(LEDStruct&)+0x224>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    a118:	b005      	add	sp, #20
    a11a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case JUGGLE_RANDOM:
			juggle(leds);
			break;

		case MULTI_JUGGLE:
			multi_juggle(leds);
    a11e:	f7fa b9af 	b.w	4480 <multi_juggle(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
			fire(leds);
			break;

		case FIRE_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
    a122:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    a126:	2a00      	cmp	r2, #0
    a128:	f47f ada5 	bne.w	9c76 <switch_mode(LEDStruct&)+0x2fa>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a12c:	4d65      	ldr	r5, [pc, #404]	; (a2c4 <switch_mode(LEDStruct&)+0x948>)
    a12e:	882b      	ldrh	r3, [r5, #0]
    a130:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    a134:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a138:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    a13c:	3019      	adds	r0, #25
    a13e:	b280      	uxth	r0, r0
    a140:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    a144:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    a148:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    a14c:	3119      	adds	r1, #25
    a14e:	b289      	uxth	r1, r1
    a150:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    a154:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    a158:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a15c:	3319      	adds	r3, #25
    a15e:	b29b      	uxth	r3, r3
    a160:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    a164:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a168:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    a16c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a170:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a174:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    a178:	b2c7      	uxtb	r7, r0
    a17a:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a17c:	3619      	adds	r6, #25
    a17e:	b2db      	uxtb	r3, r3
    a180:	b2b6      	uxth	r6, r6
    a182:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    a186:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    a18a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    a18e:	1188      	asrs	r0, r1, #6
    a190:	1199      	asrs	r1, r3, #6
    a192:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a196:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    a19a:	3032      	adds	r0, #50	; 0x32
    a19c:	f3c7 1781 	ubfx	r7, r7, #6, #2
    a1a0:	313c      	adds	r1, #60	; 0x3c
    a1a2:	121b      	asrs	r3, r3, #8
    a1a4:	b2c0      	uxtb	r0, r0
    a1a6:	3701      	adds	r7, #1
    a1a8:	b2c9      	uxtb	r1, r1
    a1aa:	3314      	adds	r3, #20
    a1ac:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    a1b0:	b2db      	uxtb	r3, r3
    a1b2:	2101      	movs	r1, #1
    a1b4:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a1b6:	802e      	strh	r6, [r5, #0]
    a1b8:	f7fa fcc6 	bl	4b48 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    a1bc:	e55b      	b.n	9c76 <switch_mode(LEDStruct&)+0x2fa>
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    a1be:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    a1c2:	2a00      	cmp	r2, #0
    a1c4:	f47f ac8f 	bne.w	9ae6 <switch_mode(LEDStruct&)+0x16a>
    a1c8:	493e      	ldr	r1, [pc, #248]	; (a2c4 <switch_mode(LEDStruct&)+0x948>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    a1ca:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    a1ce:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    a1d0:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
    a1d4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    a1d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a1dc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a1e0:	3319      	adds	r3, #25
    a1e2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    a1e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a1ea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a1ee:	3319      	adds	r3, #25
    a1f0:	b29b      	uxth	r3, r3
    a1f2:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    a1f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a1fa:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    a1fe:	3019      	adds	r0, #25
    a200:	b280      	uxth	r0, r0
    a202:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    a206:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    a20a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    a20e:	3219      	adds	r2, #25
    a210:	b292      	uxth	r2, r2
    a212:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    a216:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    a21a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    a21e:	f10e 0e19 	add.w	lr, lr, #25
    a222:	fa1f fe8e 	uxth.w	lr, lr
    a226:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    a22a:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    a22e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    a232:	3519      	adds	r5, #25
    a234:	b2ad      	uxth	r5, r5
    a236:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a23a:	eb03 2613 	add.w	r6, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a23e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a242:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    a246:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a24a:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a24c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    a250:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    a252:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a254:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a258:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a25c:	3719      	adds	r7, #25
	leds.juggle_beat		 = jb;
    a25e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    a262:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a266:	1236      	asrs	r6, r6, #8
    a268:	b2bf      	uxth	r7, r7
    a26a:	3601      	adds	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a26c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    a270:	1180      	asrs	r0, r0, #6
	leds.juggle_fade		 = jf;
    a272:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    a274:	3008      	adds	r0, #8
	leds.juggle_fade		 = jf;
    a276:	3220      	adds	r2, #32
    a278:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a27a:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a27e:	f884 6230 	strb.w	r6, [r4, #560]	; 0x230
    a282:	eb07 2617 	add.w	r6, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a286:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    a288:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    a28c:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    a290:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    a294:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    a298:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    a29a:	220f      	movs	r2, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    a29c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a2a0:	800f      	strh	r7, [r1, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    a2a2:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    a2a6:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    a2aa:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    a2ae:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    a2b2:	f884 0236 	strb.w	r0, [r4, #566]	; 0x236
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    a2b6:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    a2ba:	2d00      	cmp	r5, #0
    a2bc:	f47f adb1 	bne.w	9e22 <switch_mode(LEDStruct&)+0x4a6>
    a2c0:	e411      	b.n	9ae6 <switch_mode(LEDStruct&)+0x16a>
    a2c2:	bf00      	nop
    a2c4:	1fff8788 	.word	0x1fff8788
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_HALF:
			if (!leds.mode_initialized) { juggle_init(leds); }
    a2c8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	f040 809f 	bne.w	a410 <switch_mode(LEDStruct&)+0xa94>
    a2d2:	4eb9      	ldr	r6, [pc, #740]	; (a5b8 <switch_mode(LEDStruct&)+0xc3c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    a2d4:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    a2d8:	8833      	ldrh	r3, [r6, #0]
    a2da:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    a2de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a2e2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    a2e6:	3019      	adds	r0, #25
    a2e8:	b280      	uxth	r0, r0
    a2ea:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    a2ee:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    a2f2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    a2f6:	3519      	adds	r5, #25
    a2f8:	b2ad      	uxth	r5, r5
    a2fa:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    a2fe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a302:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a306:	3319      	adds	r3, #25
    a308:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    a30c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a310:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a314:	3319      	adds	r3, #25
    a316:	b29b      	uxth	r3, r3
    a318:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    a31c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a320:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    a324:	3119      	adds	r1, #25
    a326:	b289      	uxth	r1, r1
    a328:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    a32c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    a330:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    a334:	3219      	adds	r2, #25
    a336:	b292      	uxth	r2, r2
    a338:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    a33c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    a340:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    a344:	3719      	adds	r7, #25
    a346:	b2bf      	uxth	r7, r7
    a348:	eb07 2e47 	add.w	lr, r7, r7, lsl #9
    a34c:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
    a350:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    a354:	f10e 0e19 	add.w	lr, lr, #25
    a358:	fa1f fe8e 	uxth.w	lr, lr
    a35c:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    a360:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a364:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    a368:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    a36c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a370:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a374:	b2db      	uxtb	r3, r3
	leds.juggle_beat		 = jb;
    a376:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    a378:	b2d2      	uxtb	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a37a:	eb07 2717 	add.w	r7, r7, r7, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a37e:	f10c 0c19 	add.w	ip, ip, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a382:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	leds.juggle_beat		 = jb;
    a386:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a38a:	f3c7 17c0 	ubfx	r7, r7, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a38e:	fa1f fc8c 	uxth.w	ip, ip
	leds.juggle_fade		 = jf;
    a392:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a396:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    a39a:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a39e:	ea4f 2923 	mov.w	r9, r3, asr #8
	leds.juggle_beat		 = jb;
    a3a2:	ea4f 18a1 	mov.w	r8, r1, asr #6
	leds.juggle_fade		 = jf;
    a3a6:	1112      	asrs	r2, r2, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a3a8:	1c7b      	adds	r3, r7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    a3aa:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    a3ae:	f3c5 15c0 	ubfx	r5, r5, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a3b2:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    a3b6:	eb0c 211c 	add.w	r1, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    a3ba:	f109 0701 	add.w	r7, r9, #1
	leds.juggle_beat		 = jb;
    a3be:	f108 0808 	add.w	r8, r8, #8
	leds.juggle_fade		 = jf;
    a3c2:	f102 0920 	add.w	r9, r2, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a3c6:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    a3c8:	f3ce 12c0 	ubfx	r2, lr, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    a3cc:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    a3d0:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    a3d4:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    a3d6:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;
    a3da:	250f      	movs	r5, #15

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a3dc:	f884 7230 	strb.w	r7, [r4, #560]	; 0x230
	leds.juggle_beat		 = jb;
    a3e0:	f884 8231 	strb.w	r8, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    a3e4:	f884 9232 	strb.w	r9, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    a3e8:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a3ec:	f8a6 c000 	strh.w	ip, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    a3f0:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    a3f4:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    a3f8:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    a3fc:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    a400:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    a404:	b122      	cbz	r2, a410 <switch_mode(LEDStruct&)+0xa94>
    a406:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a40a:	4083      	lsls	r3, r0
    a40c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			juggle_half(leds);
    a410:	4620      	mov	r0, r4
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    a412:	b005      	add	sp, #20
    a414:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			juggle(leds);
			break;

		case JUGGLE_HALF:
			if (!leds.mode_initialized) { juggle_init(leds); }
			juggle_half(leds);
    a418:	f7f9 bbf2 	b.w	3c00 <juggle_half(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    a41c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    a420:	2b00      	cmp	r3, #0
    a422:	f47f ab60 	bne.w	9ae6 <switch_mode(LEDStruct&)+0x16a>
    a426:	4964      	ldr	r1, [pc, #400]	; (a5b8 <switch_mode(LEDStruct&)+0xc3c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    a428:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    a42c:	880b      	ldrh	r3, [r1, #0]
    a42e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    a432:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a436:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a43a:	3319      	adds	r3, #25
    a43c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    a440:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a444:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a448:	3319      	adds	r3, #25
    a44a:	b29b      	uxth	r3, r3
    a44c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    a450:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a454:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    a458:	3019      	adds	r0, #25
    a45a:	b280      	uxth	r0, r0
    a45c:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    a460:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    a464:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    a468:	3219      	adds	r2, #25
    a46a:	b292      	uxth	r2, r2
    a46c:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    a470:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    a474:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    a478:	f10e 0e19 	add.w	lr, lr, #25
    a47c:	fa1f fe8e 	uxth.w	lr, lr
    a480:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    a484:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    a488:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    a48c:	3519      	adds	r5, #25
    a48e:	b2ad      	uxth	r5, r5
    a490:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a494:	eb03 2613 	add.w	r6, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a498:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a49c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    a4a0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a4a4:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a4a6:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    a4aa:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    a4ac:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a4ae:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a4b2:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a4b6:	3719      	adds	r7, #25
	leds.juggle_beat		 = jb;
    a4b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    a4bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a4c0:	1236      	asrs	r6, r6, #8
    a4c2:	b2bf      	uxth	r7, r7
    a4c4:	3601      	adds	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a4c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    a4ca:	1180      	asrs	r0, r0, #6
	leds.juggle_fade		 = jf;
    a4cc:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    a4ce:	3008      	adds	r0, #8
	leds.juggle_fade		 = jf;
    a4d0:	3220      	adds	r2, #32
    a4d2:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a4d4:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    a4d8:	f884 6230 	strb.w	r6, [r4, #560]	; 0x230
    a4dc:	eb07 2617 	add.w	r6, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    a4e0:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    a4e2:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    a4e6:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    a4ea:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    a4ee:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    a4f2:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    a4f4:	220f      	movs	r2, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    a4f6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a4fa:	800f      	strh	r7, [r1, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    a4fc:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    a500:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    a504:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    a508:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    a50c:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    a510:	f884 0236 	strb.w	r0, [r4, #566]	; 0x236
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    a514:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    a518:	2d00      	cmp	r5, #0
    a51a:	f47f ac82 	bne.w	9e22 <switch_mode(LEDStruct&)+0x4a6>
    a51e:	f7ff bae2 	b.w	9ae6 <switch_mode(LEDStruct&)+0x16a>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    a522:	b005      	add	sp, #20
    a524:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case ONE_SIN:
			one_sin(leds);
			break;

		case TWO_SIN:
			two_sin(leds);
    a528:	f7fc b890 	b.w	664c <two_sin(LEDStruct&)>
		// Waves Functions -----------------------------------------------------------------------
		case WAVES:
			waves(leds);
			break;
	}
}
    a52c:	b005      	add	sp, #20
    a52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a532:	4d21      	ldr	r5, [pc, #132]	; (a5b8 <switch_mode(LEDStruct&)+0xc3c>)
    a534:	882b      	ldrh	r3, [r5, #0]
    a536:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    a53a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a53e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a542:	3319      	adds	r3, #25
    a544:	b29b      	uxth	r3, r3
    a546:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    a54a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a54e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    a552:	3119      	adds	r1, #25
    a554:	b289      	uxth	r1, r1
    a556:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    a55a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    a55e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    a562:	3219      	adds	r2, #25
    a564:	b292      	uxth	r2, r2
    a566:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    a56a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a56e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    a572:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a576:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a57a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    a57e:	b2db      	uxtb	r3, r3
    a580:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a582:	3619      	adds	r6, #25
    a584:	b2d2      	uxtb	r2, r2
    a586:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    a58a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    a58e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    a592:	b2b6      	uxth	r6, r6
    a594:	1188      	asrs	r0, r1, #6
    a596:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    a59a:	1191      	asrs	r1, r2, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a59c:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    a5a0:	3032      	adds	r0, #50	; 0x32
    a5a2:	f3c7 1781 	ubfx	r7, r7, #6, #2
    a5a6:	313c      	adds	r1, #60	; 0x3c
    a5a8:	121b      	asrs	r3, r3, #8
    a5aa:	b2c0      	uxtb	r0, r0
    a5ac:	3701      	adds	r7, #1
    a5ae:	b2c9      	uxtb	r1, r1
    a5b0:	3314      	adds	r3, #20
    a5b2:	2201      	movs	r2, #1
    a5b4:	e4b7      	b.n	9f26 <switch_mode(LEDStruct&)+0x5aa>
    a5b6:	bf00      	nop
    a5b8:	1fff8788 	.word	0x1fff8788

0000a5bc <change_mode(unsigned char)>:
}

void begin_transition(); // Forward declaration

// Change mode - consider how to handle this.  Random, specific path, etc.
void change_mode(uint8_t mn = 255) {
    a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5be:	2134      	movs	r1, #52	; 0x34
    a5c0:	4604      	mov	r4, r0
    a5c2:	4830      	ldr	r0, [pc, #192]	; (a684 <change_mode(unsigned char)+0xc8>)
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
	number_of_mode_changes++;
    a5c4:	4e30      	ldr	r6, [pc, #192]	; (a688 <change_mode(unsigned char)+0xcc>)
    a5c6:	f003 fa71 	bl	daac <usb_serial_write>
    a5ca:	4830      	ldr	r0, [pc, #192]	; (a68c <change_mode(unsigned char)+0xd0>)
    a5cc:	f003 fc72 	bl	deb4 <Print::println()>
    a5d0:	2133      	movs	r1, #51	; 0x33
    a5d2:	482f      	ldr	r0, [pc, #188]	; (a690 <change_mode(unsigned char)+0xd4>)
    a5d4:	f003 fa6a 	bl	daac <usb_serial_write>
    a5d8:	482c      	ldr	r0, [pc, #176]	; (a68c <change_mode(unsigned char)+0xd0>)
    a5da:	f003 fc6b 	bl	deb4 <Print::println()>
    a5de:	2133      	movs	r1, #51	; 0x33
    a5e0:	482c      	ldr	r0, [pc, #176]	; (a694 <change_mode(unsigned char)+0xd8>)
    a5e2:	f003 fa63 	bl	daac <usb_serial_write>
    a5e6:	4829      	ldr	r0, [pc, #164]	; (a68c <change_mode(unsigned char)+0xd0>)
    a5e8:	f003 fc64 	bl	deb4 <Print::println()>
	if (DEBUG) {
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
    a5ec:	f7f6 fcb0 	bl	f50 <begin_transition()>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a5f0:	4929      	ldr	r1, [pc, #164]	; (a698 <change_mode(unsigned char)+0xdc>)
	number_of_mode_changes++;
    a5f2:	8830      	ldrh	r0, [r6, #0]
    a5f4:	880b      	ldrh	r3, [r1, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
    a5f6:	4a29      	ldr	r2, [pc, #164]	; (a69c <change_mode(unsigned char)+0xe0>)
    a5f8:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    a5fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    a600:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a604:	3319      	adds	r3, #25
    a606:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a608:	eb03 2513 	add.w	r5, r3, r3, lsr #8
	next_leds.this_dir = random8(2);
    a60c:	f3c5 15c0 	ubfx	r5, r5, #7, #1
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
	number_of_mode_changes++;
    a610:	3001      	adds	r0, #1

	// Next LED Variables
	next_leds.mode_initialized = 0;
    a612:	2700      	movs	r7, #0
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
    a614:	2cff      	cmp	r4, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a616:	800b      	strh	r3, [r1, #0]
	begin_transition();
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
    a618:	f882 51c5 	strb.w	r5, [r2, #453]	; 0x1c5
	}
	begin_transition();
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    a61c:	f882 722e 	strb.w	r7, [r2, #558]	; 0x22e
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
	number_of_mode_changes++;
    a620:	8030      	strh	r0, [r6, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
    a622:	d00a      	beq.n	a63a <change_mode(unsigned char)+0x7e>
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
    a624:	f882 422b 	strb.w	r4, [r2, #555]	; 0x22b
	next_leds.mode_name = ModeList[next_leds.mode_number];
    a628:	4b1d      	ldr	r3, [pc, #116]	; (a6a0 <change_mode(unsigned char)+0xe4>)
	switch_mode(next_leds);
    a62a:	481c      	ldr	r0, [pc, #112]	; (a69c <change_mode(unsigned char)+0xe0>)
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
	next_leds.mode_name = ModeList[next_leds.mode_number];
    a62c:	5d1b      	ldrb	r3, [r3, r4]
    a62e:	f882 322c 	strb.w	r3, [r2, #556]	; 0x22c
	switch_mode(next_leds);
}
    a632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
    a636:	f7ff b9a1 	b.w	997c <switch_mode(LEDStruct&)>

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    a63a:	481a      	ldr	r0, [pc, #104]	; (a6a4 <change_mode(unsigned char)+0xe8>)
    a63c:	7800      	ldrb	r0, [r0, #0]
    a63e:	b190      	cbz	r0, a666 <change_mode(unsigned char)+0xaa>
    a640:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    a644:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    a648:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a64c:	3319      	adds	r3, #25
    a64e:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    a650:	eb03 2413 	add.w	r4, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    a654:	b2e4      	uxtb	r4, r4
    a656:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    a65a:	f3c4 14c7 	ubfx	r4, r4, #7, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    a65e:	800b      	strh	r3, [r1, #0]
    a660:	f882 422b 	strb.w	r4, [r2, #555]	; 0x22b
    a664:	e7e0      	b.n	a628 <change_mode(unsigned char)+0x6c>
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
    a666:	f892 322b 	ldrb.w	r3, [r2, #555]	; 0x22b
    a66a:	4c0f      	ldr	r4, [pc, #60]	; (a6a8 <change_mode(unsigned char)+0xec>)
    a66c:	3301      	adds	r3, #1
    a66e:	fba4 1403 	umull	r1, r4, r4, r3
    a672:	0964      	lsrs	r4, r4, #5
    a674:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    a678:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
    a67c:	b2e4      	uxtb	r4, r4
    a67e:	f882 422b 	strb.w	r4, [r2, #555]	; 0x22b
    a682:	e7d1      	b.n	a628 <change_mode(unsigned char)+0x6c>
    a684:	00010c10 	.word	0x00010c10
    a688:	1fff8cb4 	.word	0x1fff8cb4
    a68c:	1fff8790 	.word	0x1fff8790
    a690:	00010c48 	.word	0x00010c48
    a694:	00010c7c 	.word	0x00010c7c
    a698:	1fff8788 	.word	0x1fff8788
    a69c:	1fff8cb8 	.word	0x1fff8cb8
    a6a0:	1fff8728 	.word	0x1fff8728
    a6a4:	1fff8752 	.word	0x1fff8752
    a6a8:	f0f0f0f1 	.word	0xf0f0f0f1

0000a6ac <read_keyboard()>:
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
    a6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    a6b0:	f8df a2e0 	ldr.w	sl, [pc, #736]	; a994 <read_keyboard()+0x2e8>
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
    a6b4:	b08d      	sub	sp, #52	; 0x34
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a6b6:	f003 f9cf 	bl	da58 <usb_serial_available>
	while (Serial.available() > 0) {
    a6ba:	2800      	cmp	r0, #0
    a6bc:	f340 8086 	ble.w	a7cc <read_keyboard()+0x120>
        virtual int read() { return usb_serial_getchar(); }
    a6c0:	f003 f98e 	bl	d9e0 <usb_serial_getchar>
		in_byte = Serial.read();
    a6c4:	b2c0      	uxtb	r0, r0

		if (in_byte != 10) {
    a6c6:	280a      	cmp	r0, #10
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    a6c8:	f88a 0000 	strb.w	r0, [sl]

		if (in_byte != 10) {
    a6cc:	d00e      	beq.n	a6ec <read_keyboard()+0x40>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a6ce:	2102      	movs	r1, #2
    a6d0:	48af      	ldr	r0, [pc, #700]	; (a990 <read_keyboard()+0x2e4>)
    a6d2:	f003 f9eb 	bl	daac <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a6d6:	4baf      	ldr	r3, [pc, #700]	; (a994 <read_keyboard()+0x2e8>)
    a6d8:	7818      	ldrb	r0, [r3, #0]
    a6da:	f003 fa6b 	bl	dbb4 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a6de:	2101      	movs	r1, #1
    a6e0:	48ad      	ldr	r0, [pc, #692]	; (a998 <read_keyboard()+0x2ec>)
    a6e2:	f003 f9e3 	bl	daac <usb_serial_write>
    a6e6:	48ad      	ldr	r0, [pc, #692]	; (a99c <read_keyboard()+0x2f0>)
    a6e8:	f003 fbe4 	bl	deb4 <Print::println()>
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    a6ec:	48ab      	ldr	r0, [pc, #684]	; (a99c <read_keyboard()+0x2f0>)
		keyboard_update = 1;
    a6ee:	4fac      	ldr	r7, [pc, #688]	; (a9a0 <read_keyboard()+0x2f4>)
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    a6f0:	4cac      	ldr	r4, [pc, #688]	; (a9a4 <read_keyboard()+0x2f8>)
    a6f2:	f003 fc9b 	bl	e02c <Stream::parseInt()>
		keyboard_update = 1;
		switch (in_byte) {
    a6f6:	f89a 3000 	ldrb.w	r3, [sl]
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    a6fa:	b282      	uxth	r2, r0
		keyboard_update = 1;
    a6fc:	2101      	movs	r1, #1
		switch (in_byte) {
    a6fe:	3b42      	subs	r3, #66	; 0x42
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    a700:	8022      	strh	r2, [r4, #0]
		keyboard_update = 1;
    a702:	7039      	strb	r1, [r7, #0]
		switch (in_byte) {
    a704:	2b2a      	cmp	r3, #42	; 0x2a
    a706:	d8d6      	bhi.n	a6b6 <read_keyboard()+0xa>
    a708:	a101      	add	r1, pc, #4	; (adr r1, a710 <read_keyboard()+0x64>)
    a70a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    a70e:	bf00      	nop
    a710:	0000a979 	.word	0x0000a979
    a714:	0000a6b7 	.word	0x0000a6b7
    a718:	0000a975 	.word	0x0000a975
    a71c:	0000a963 	.word	0x0000a963
    a720:	0000a957 	.word	0x0000a957
    a724:	0000a6b7 	.word	0x0000a6b7
    a728:	0000a6b7 	.word	0x0000a6b7
    a72c:	0000a6b7 	.word	0x0000a6b7
    a730:	0000a6b7 	.word	0x0000a6b7
    a734:	0000a6b7 	.word	0x0000a6b7
    a738:	0000a6b7 	.word	0x0000a6b7
    a73c:	0000a945 	.word	0x0000a945
    a740:	0000a92d 	.word	0x0000a92d
    a744:	0000a6b7 	.word	0x0000a6b7
    a748:	0000a859 	.word	0x0000a859
    a74c:	0000a855 	.word	0x0000a855
    a750:	0000a851 	.word	0x0000a851
    a754:	0000a83b 	.word	0x0000a83b
    a758:	0000a82b 	.word	0x0000a82b
    a75c:	0000a6b7 	.word	0x0000a6b7
    a760:	0000a6b7 	.word	0x0000a6b7
    a764:	0000a6b7 	.word	0x0000a6b7
    a768:	0000a6b7 	.word	0x0000a6b7
    a76c:	0000a6b7 	.word	0x0000a6b7
    a770:	0000a6b7 	.word	0x0000a6b7
    a774:	0000a6b7 	.word	0x0000a6b7
    a778:	0000a6b7 	.word	0x0000a6b7
    a77c:	0000a6b7 	.word	0x0000a6b7
    a780:	0000a6b7 	.word	0x0000a6b7
    a784:	0000a6b7 	.word	0x0000a6b7
    a788:	0000a6b7 	.word	0x0000a6b7
    a78c:	0000a823 	.word	0x0000a823
    a790:	0000a81b 	.word	0x0000a81b
    a794:	0000a813 	.word	0x0000a813
    a798:	0000a80b 	.word	0x0000a80b
    a79c:	0000a803 	.word	0x0000a803
    a7a0:	0000a7fb 	.word	0x0000a7fb
    a7a4:	0000a7f3 	.word	0x0000a7f3
    a7a8:	0000a7eb 	.word	0x0000a7eb
    a7ac:	0000a7e3 	.word	0x0000a7e3
    a7b0:	0000a7db 	.word	0x0000a7db
    a7b4:	0000a7d3 	.word	0x0000a7d3
    a7b8:	0000a7bd 	.word	0x0000a7bd

			// k
			case 107: update_var = 10;	break;

			// l
			case 108: update_var = 11;	break;
    a7bc:	4b7a      	ldr	r3, [pc, #488]	; (a9a8 <read_keyboard()+0x2fc>)
    a7be:	220b      	movs	r2, #11
    a7c0:	701a      	strb	r2, [r3, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a7c2:	f003 f949 	bl	da58 <usb_serial_available>
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
    a7c6:	2800      	cmp	r0, #0
    a7c8:	f73f af7a 	bgt.w	a6c0 <read_keyboard()+0x14>
			default: break;
		}


	}
}
    a7cc:	b00d      	add	sp, #52	; 0x34
    a7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

			// j
			case 106: update_var = 9;	break;

			// k
			case 107: update_var = 10;	break;
    a7d2:	4b75      	ldr	r3, [pc, #468]	; (a9a8 <read_keyboard()+0x2fc>)
    a7d4:	220a      	movs	r2, #10
    a7d6:	701a      	strb	r2, [r3, #0]
    a7d8:	e76d      	b.n	a6b6 <read_keyboard()+0xa>

			// i
			case 105: update_var = 8;	break;

			// j
			case 106: update_var = 9;	break;
    a7da:	4b73      	ldr	r3, [pc, #460]	; (a9a8 <read_keyboard()+0x2fc>)
    a7dc:	2209      	movs	r2, #9
    a7de:	701a      	strb	r2, [r3, #0]
    a7e0:	e769      	b.n	a6b6 <read_keyboard()+0xa>

			// h
			case 104: update_var = 7;	break;

			// i
			case 105: update_var = 8;	break;
    a7e2:	4b71      	ldr	r3, [pc, #452]	; (a9a8 <read_keyboard()+0x2fc>)
    a7e4:	2208      	movs	r2, #8
    a7e6:	701a      	strb	r2, [r3, #0]
    a7e8:	e765      	b.n	a6b6 <read_keyboard()+0xa>

			// g
			case 103: update_var = 6;	break;

			// h
			case 104: update_var = 7;	break;
    a7ea:	4b6f      	ldr	r3, [pc, #444]	; (a9a8 <read_keyboard()+0x2fc>)
    a7ec:	2207      	movs	r2, #7
    a7ee:	701a      	strb	r2, [r3, #0]
    a7f0:	e761      	b.n	a6b6 <read_keyboard()+0xa>

			// f 
			case 102: update_var = 5;	break;

			// g
			case 103: update_var = 6;	break;
    a7f2:	4b6d      	ldr	r3, [pc, #436]	; (a9a8 <read_keyboard()+0x2fc>)
    a7f4:	2206      	movs	r2, #6
    a7f6:	701a      	strb	r2, [r3, #0]
    a7f8:	e75d      	b.n	a6b6 <read_keyboard()+0xa>

			// e
			case 101: update_var = 4;	break;

			// f 
			case 102: update_var = 5;	break;
    a7fa:	4b6b      	ldr	r3, [pc, #428]	; (a9a8 <read_keyboard()+0x2fc>)
    a7fc:	2205      	movs	r2, #5
    a7fe:	701a      	strb	r2, [r3, #0]
    a800:	e759      	b.n	a6b6 <read_keyboard()+0xa>

			// d 
			case 100: update_var = 3;	break;

			// e
			case 101: update_var = 4;	break;
    a802:	4b69      	ldr	r3, [pc, #420]	; (a9a8 <read_keyboard()+0x2fc>)
    a804:	2204      	movs	r2, #4
    a806:	701a      	strb	r2, [r3, #0]
    a808:	e755      	b.n	a6b6 <read_keyboard()+0xa>

			// c
			case 99: update_var = 2;	break;

			// d 
			case 100: update_var = 3;	break;
    a80a:	4b67      	ldr	r3, [pc, #412]	; (a9a8 <read_keyboard()+0x2fc>)
    a80c:	2203      	movs	r2, #3
    a80e:	701a      	strb	r2, [r3, #0]
    a810:	e751      	b.n	a6b6 <read_keyboard()+0xa>

			// b
			case 98: update_var = 1;	break;

			// c
			case 99: update_var = 2;	break;
    a812:	4b65      	ldr	r3, [pc, #404]	; (a9a8 <read_keyboard()+0x2fc>)
    a814:	2202      	movs	r2, #2
    a816:	701a      	strb	r2, [r3, #0]
    a818:	e74d      	b.n	a6b6 <read_keyboard()+0xa>

			// a
			case 97: update_var = 0;	break;

			// b
			case 98: update_var = 1;	break;
    a81a:	4b63      	ldr	r3, [pc, #396]	; (a9a8 <read_keyboard()+0x2fc>)
    a81c:	2201      	movs	r2, #1
    a81e:	701a      	strb	r2, [r3, #0]
    a820:	e749      	b.n	a6b6 <read_keyboard()+0xa>

			// T - mode change timer (how often to change modes, if mode_change is set)
			case 84: mode_change_time = update_arg; keyboard_update = 0; update_var = 255; break;

			// a
			case 97: update_var = 0;	break;
    a822:	4b61      	ldr	r3, [pc, #388]	; (a9a8 <read_keyboard()+0x2fc>)
    a824:	2200      	movs	r2, #0
    a826:	701a      	strb	r2, [r3, #0]
    a828:	e745      	b.n	a6b6 <read_keyboard()+0xa>

			// S - change modes		(change modes every T seconds)
			case 83: mode_change = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// T - mode change timer (how often to change modes, if mode_change is set)
			case 84: mode_change_time = update_arg; keyboard_update = 0; update_var = 255; break;
    a82a:	4b60      	ldr	r3, [pc, #384]	; (a9ac <read_keyboard()+0x300>)
    a82c:	495e      	ldr	r1, [pc, #376]	; (a9a8 <read_keyboard()+0x2fc>)
    a82e:	801a      	strh	r2, [r3, #0]
    a830:	22ff      	movs	r2, #255	; 0xff
    a832:	2300      	movs	r3, #0
    a834:	700a      	strb	r2, [r1, #0]
    a836:	703b      	strb	r3, [r7, #0]
    a838:	e73d      	b.n	a6b6 <read_keyboard()+0xa>

			// R - random mode		(when changing modes, do so randomly)
			case 82: random_mode = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// S - change modes		(change modes every T seconds)
			case 83: mode_change = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    a83a:	4c5d      	ldr	r4, [pc, #372]	; (a9b0 <read_keyboard()+0x304>)

			// Q - random palette change	(change palettes randomly every 30 seconds)
			case 81: random_palette = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// R - random mode		(when changing modes, do so randomly)
			case 82: random_mode = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    a83c:	495a      	ldr	r1, [pc, #360]	; (a9a8 <read_keyboard()+0x2fc>)
    a83e:	3200      	adds	r2, #0
    a840:	bf18      	it	ne
    a842:	2201      	movne	r2, #1
    a844:	20ff      	movs	r0, #255	; 0xff
    a846:	2300      	movs	r3, #0
    a848:	7022      	strb	r2, [r4, #0]
    a84a:	7008      	strb	r0, [r1, #0]
    a84c:	703b      	strb	r3, [r7, #0]
    a84e:	e732      	b.n	a6b6 <read_keyboard()+0xa>
    a850:	4c58      	ldr	r4, [pc, #352]	; (a9b4 <read_keyboard()+0x308>)
    a852:	e7f3      	b.n	a83c <read_keyboard()+0x190>
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
				keyboard_update = 0; 
				break;

			// Q - random palette change	(change palettes randomly every 30 seconds)
			case 81: random_palette = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    a854:	4c58      	ldr	r4, [pc, #352]	; (a9b8 <read_keyboard()+0x30c>)
    a856:	e7f1      	b.n	a83c <read_keyboard()+0x190>
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    a858:	4b58      	ldr	r3, [pc, #352]	; (a9bc <read_keyboard()+0x310>)
			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
    a85a:	4959      	ldr	r1, [pc, #356]	; (a9c0 <read_keyboard()+0x314>)
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    a85c:	b2c2      	uxtb	r2, r0
			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
    a85e:	f881 0229 	strb.w	r0, [r1, #553]	; 0x229
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    a862:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    a866:	f04f 0900 	mov.w	r9, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    a86a:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
            count++;;
        } while ( u.index != 255);
    a86e:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    a870:	f109 0901 	add.w	r9, r9, #1
        } while ( u.index != 255);
    a874:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    a876:	fa1f f989 	uxth.w	r9, r9
        } while ( u.index != 255);
    a87a:	d1f6      	bne.n	a86a <read_keyboard()+0x1be>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    a87c:	f8d8 3000 	ldr.w	r3, [r8]
    a880:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    a884:	f04f 32ff 	mov.w	r2, #4294967295
    a888:	9208      	str	r2, [sp, #32]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    a88a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    a88e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    a892:	0e1b      	lsrs	r3, r3, #24
    a894:	9204      	str	r2, [sp, #16]
    a896:	9305      	str	r3, [sp, #20]

        int indexstart = 0;
    a898:	2400      	movs	r4, #0
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    a89a:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    a89e:	4849      	ldr	r0, [pc, #292]	; (a9c4 <read_keyboard()+0x318>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    a8a0:	f3c5 2e07 	ubfx	lr, r5, #8, #8
            istart8 = indexstart / 16;
    a8a4:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    a8a8:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    a8ac:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    a8ae:	fa5f f18e 	uxtb.w	r1, lr
    a8b2:	f3c5 6507 	ubfx	r5, r5, #24, #8
    a8b6:	9106      	str	r1, [sp, #24]
    a8b8:	b2e9      	uxtb	r1, r5
    a8ba:	9107      	str	r1, [sp, #28]
            istart8 = indexstart / 16;
    a8bc:	fa5f f18c 	uxtb.w	r1, ip
    a8c0:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    a8c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    a8c4:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    a8c6:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    a8c8:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    a8cc:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    a8d0:	d80c      	bhi.n	a8ec <read_keyboard()+0x240>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    a8d2:	9908      	ldr	r1, [sp, #32]
    a8d4:	458c      	cmp	ip, r1
    a8d6:	dc07      	bgt.n	a8e8 <read_keyboard()+0x23c>
    a8d8:	290f      	cmp	r1, #15
    a8da:	d005      	beq.n	a8e8 <read_keyboard()+0x23c>
                    istart8 = lastSlotUsed + 1;
    a8dc:	3101      	adds	r1, #1
    a8de:	b2c9      	uxtb	r1, r1
    a8e0:	428b      	cmp	r3, r1
    a8e2:	9103      	str	r1, [sp, #12]
    a8e4:	bf38      	it	cc
    a8e6:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    a8e8:	b259      	sxtb	r1, r3
    a8ea:	9108      	str	r1, [sp, #32]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    a8ec:	f89d c010 	ldrb.w	ip, [sp, #16]
    a8f0:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    a8f4:	a90b      	add	r1, sp, #44	; 0x2c
    a8f6:	9100      	str	r1, [sp, #0]
        b = rhs.b;
    a8f8:	f89d c014 	ldrb.w	ip, [sp, #20]
    a8fc:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a8fe:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
        b = rhs.b;
    a902:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a906:	f88d e02c 	strb.w	lr, [sp, #44]	; 0x2c
        g = rhs.g;
    a90a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    a90e:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    a912:	f001 f827 	bl	b964 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    a916:	9b07      	ldr	r3, [sp, #28]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a918:	f8dd b018 	ldr.w	fp, [sp, #24]
        g = rhs.g;
    a91c:	f8cd 9010 	str.w	r9, [sp, #16]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    a920:	2cff      	cmp	r4, #255	; 0xff
        b = rhs.b;
    a922:	9305      	str	r3, [sp, #20]
    a924:	d1b9      	bne.n	a89a <read_keyboard()+0x1ee>
				keyboard_update = 0; 
    a926:	2300      	movs	r3, #0
    a928:	703b      	strb	r3, [r7, #0]
				break;
    a92a:	e6c4      	b.n	a6b6 <read_keyboard()+0xa>

			// M - mode
			case 77: change_mode((uint8_t)update_arg); keyboard_update = 0; update_var = 255; break;

			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    a92c:	3200      	adds	r2, #0
    a92e:	4c24      	ldr	r4, [pc, #144]	; (a9c0 <read_keyboard()+0x314>)
    a930:	491d      	ldr	r1, [pc, #116]	; (a9a8 <read_keyboard()+0x2fc>)
    a932:	bf18      	it	ne
    a934:	2201      	movne	r2, #1
    a936:	20ff      	movs	r0, #255	; 0xff
    a938:	2300      	movs	r3, #0
    a93a:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
    a93e:	7008      	strb	r0, [r1, #0]
    a940:	703b      	strb	r3, [r7, #0]
    a942:	e6b8      	b.n	a6b6 <read_keyboard()+0xa>
				else { curr_leds.current_blending = LINEARBLEND; }
				keyboard_update = 0; 
				update_var = 255; break;

			// M - mode
			case 77: change_mode((uint8_t)update_arg); keyboard_update = 0; update_var = 255; break;
    a944:	b2c0      	uxtb	r0, r0
    a946:	f7ff fe39 	bl	a5bc <change_mode(unsigned char)>
    a94a:	4a17      	ldr	r2, [pc, #92]	; (a9a8 <read_keyboard()+0x2fc>)
    a94c:	21ff      	movs	r1, #255	; 0xff
    a94e:	2300      	movs	r3, #0
    a950:	7011      	strb	r1, [r2, #0]
    a952:	703b      	strb	r3, [r7, #0]
    a954:	e6af      	b.n	a6b6 <read_keyboard()+0xa>
			// E - next_leds delay, beta
			case 69: next_leds.delay_time = (uint8_t)update_arg; keyboard_update = 0; update_var = 255; break;

			// F - current_leds blending
			case 70: 
				if ((bool)update_arg == 0) { curr_leds.current_blending = NOBLEND;	}
    a956:	4b1a      	ldr	r3, [pc, #104]	; (a9c0 <read_keyboard()+0x314>)
    a958:	b102      	cbz	r2, a95c <read_keyboard()+0x2b0>
				else { curr_leds.current_blending = LINEARBLEND; }
    a95a:	2201      	movs	r2, #1
    a95c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    a960:	e7f3      	b.n	a94a <read_keyboard()+0x29e>

			// D - delay
			case 68: curr_leds.delay_time = (uint8_t)update_arg; keyboard_update = 0; update_var = 255; break;

			// E - next_leds delay, beta
			case 69: next_leds.delay_time = (uint8_t)update_arg; keyboard_update = 0; update_var = 255; break;
    a962:	4b19      	ldr	r3, [pc, #100]	; (a9c8 <read_keyboard()+0x31c>)
    a964:	4a10      	ldr	r2, [pc, #64]	; (a9a8 <read_keyboard()+0x2fc>)
    a966:	f883 01c3 	strb.w	r0, [r3, #451]	; 0x1c3
    a96a:	21ff      	movs	r1, #255	; 0xff
    a96c:	2300      	movs	r3, #0
    a96e:	7011      	strb	r1, [r2, #0]
    a970:	703b      	strb	r3, [r7, #0]
    a972:	e6a0      	b.n	a6b6 <read_keyboard()+0xa>
				keyboard_update = 0;
				update_var = 255;
				break;

			// D - delay
			case 68: curr_leds.delay_time = (uint8_t)update_arg; keyboard_update = 0; update_var = 255; break;
    a974:	4b12      	ldr	r3, [pc, #72]	; (a9c0 <read_keyboard()+0x314>)
    a976:	e7f5      	b.n	a964 <read_keyboard()+0x2b8>
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    a978:	4d14      	ldr	r5, [pc, #80]	; (a9cc <read_keyboard()+0x320>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    a97a:	4c15      	ldr	r4, [pc, #84]	; (a9d0 <read_keyboard()+0x324>)
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				update_var = 255;
    a97c:	4a0a      	ldr	r2, [pc, #40]	; (a9a8 <read_keyboard()+0x2fc>)
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    a97e:	b2c0      	uxtb	r0, r0
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				update_var = 255;
    a980:	21ff      	movs	r1, #255	; 0xff

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
    a982:	2300      	movs	r3, #0
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    a984:	7028      	strb	r0, [r5, #0]
    a986:	7020      	strb	r0, [r4, #0]
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				update_var = 255;
    a988:	7011      	strb	r1, [r2, #0]

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
    a98a:	703b      	strb	r3, [r7, #0]
				update_var = 255;
				break;
    a98c:	e693      	b.n	a6b6 <read_keyboard()+0xa>
    a98e:	bf00      	nop
    a990:	00010cb0 	.word	0x00010cb0
    a994:	1fff956c 	.word	0x1fff956c
    a998:	00010cb4 	.word	0x00010cb4
    a99c:	1fff8790 	.word	0x1fff8790
    a9a0:	1fff9625 	.word	0x1fff9625
    a9a4:	1fff9526 	.word	0x1fff9526
    a9a8:	1fff9e8c 	.word	0x1fff9e8c
    a9ac:	1fff8720 	.word	0x1fff8720
    a9b0:	1fff8787 	.word	0x1fff8787
    a9b4:	1fff8752 	.word	0x1fff8752
    a9b8:	1fff8722 	.word	0x1fff8722
    a9bc:	000116b0 	.word	0x000116b0
    a9c0:	1fffa700 	.word	0x1fffa700
    a9c4:	1fffa8f8 	.word	0x1fffa8f8
    a9c8:	1fff8cb8 	.word	0x1fff8cb8
    a9cc:	1fff8723 	.word	0x1fff8723
    a9d0:	1fffb124 	.word	0x1fffb124

0000a9d4 <setup>:

Mode start_mode = MULTI_JUGGLE;

// ================ SETUP ================

void setup() {
    a9d4:	b570      	push	{r4, r5, r6, lr}
    a9d6:	f640 31b8 	movw	r1, #3000	; 0xbb8
    a9da:	b082      	sub	sp, #8
    a9dc:	4864      	ldr	r0, [pc, #400]	; (ab70 <setup+0x19c>)
    a9de:	f001 fd33 	bl	c448 <VisualMicroDebug::init(unsigned long)>
    a9e2:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    a9e6:	4862      	ldr	r0, [pc, #392]	; (ab70 <setup+0x19c>)
    a9e8:	f001 fd2a 	bl	c440 <VisualMicroDebug::begin(unsigned long)>
    a9ec:	2101      	movs	r1, #1
    a9ee:	4860      	ldr	r0, [pc, #384]	; (ab70 <setup+0x19c>)
    a9f0:	f001 fd00 	bl	c3f4 <VisualMicroDebug::outPacketStart(bool)>
    a9f4:	b150      	cbz	r0, aa0c <setup+0x38>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a9f6:	2110      	movs	r1, #16
    a9f8:	485e      	ldr	r0, [pc, #376]	; (ab74 <setup+0x1a0>)
    a9fa:	f003 f857 	bl	daac <usb_serial_write>
    a9fe:	485c      	ldr	r0, [pc, #368]	; (ab70 <setup+0x19c>)
    aa00:	210a      	movs	r1, #10
    aa02:	f001 fce5 	bl	c3d0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    aa06:	485a      	ldr	r0, [pc, #360]	; (ab70 <setup+0x19c>)
    aa08:	f001 fd18 	bl	c43c <VisualMicroDebug::outPacketEnd()>
    aa0c:	2201      	movs	r2, #1
    aa0e:	2100      	movs	r1, #0
    aa10:	4857      	ldr	r0, [pc, #348]	; (ab70 <setup+0x19c>)
    aa12:	f001 fdc5 	bl	c5a0 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(500); Serial.println("DEBUG ON"); }
    aa16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    aa1a:	4857      	ldr	r0, [pc, #348]	; (ab78 <setup+0x1a4>)
    aa1c:	f003 fad6 	bl	dfcc <Stream::setTimeout(unsigned long)>
    aa20:	2108      	movs	r1, #8
    aa22:	4856      	ldr	r0, [pc, #344]	; (ab7c <setup+0x1a8>)
    aa24:	f003 f842 	bl	daac <usb_serial_write>
    aa28:	4853      	ldr	r0, [pc, #332]	; (ab78 <setup+0x1a4>)
    aa2a:	f003 fa43 	bl	deb4 <Print::println()>

	delay(1000);
    aa2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    aa32:	f002 f823 	bl	ca7c <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    aa36:	4852      	ldr	r0, [pc, #328]	; (ab80 <setup+0x1ac>)
    aa38:	6803      	ldr	r3, [r0, #0]
    aa3a:	f013 0401 	ands.w	r4, r3, #1
    aa3e:	d073      	beq.n	ab28 <setup+0x154>
    aa40:	2300      	movs	r3, #0
    aa42:	2296      	movs	r2, #150	; 0x96
    aa44:	494f      	ldr	r1, [pc, #316]	; (ab84 <setup+0x1b0>)
    aa46:	4850      	ldr	r0, [pc, #320]	; (ab88 <setup+0x1b4>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    aa48:	4c50      	ldr	r4, [pc, #320]	; (ab8c <setup+0x1b8>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    aa4a:	4d51      	ldr	r5, [pc, #324]	; (ab90 <setup+0x1bc>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    aa4c:	f001 f904 	bl	bc58 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(max_bright);
    aa50:	4b50      	ldr	r3, [pc, #320]	; (ab94 <setup+0x1c0>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    aa52:	781b      	ldrb	r3, [r3, #0]
    aa54:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    aa56:	22b0      	movs	r2, #176	; 0xb0
    aa58:	26ff      	movs	r6, #255	; 0xff
    aa5a:	23f0      	movs	r3, #240	; 0xf0
	FastLED.setCorrection(TypicalLEDStrip);
    aa5c:	4620      	mov	r0, r4
    aa5e:	a901      	add	r1, sp, #4
    aa60:	f88d 2005 	strb.w	r2, [sp, #5]
    aa64:	f88d 3006 	strb.w	r3, [sp, #6]
    aa68:	f88d 6004 	strb.w	r6, [sp, #4]
    aa6c:	f001 f934 	bl	bcd8 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    aa70:	f640 31b8 	movw	r1, #3000	; 0xbb8
    aa74:	2005      	movs	r0, #5
    aa76:	f001 fc9f 	bl	c3b8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    aa7a:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    aa7e:	2002      	movs	r0, #2
    aa80:	802b      	strh	r3, [r5, #0]
    aa82:	f001 fecd 	bl	c820 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    aa86:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    aa88:	2100      	movs	r1, #0
    aa8a:	4403      	add	r3, r0
    aa8c:	4620      	mov	r0, r4
    aa8e:	802b      	strh	r3, [r5, #0]
    aa90:	f001 fa36 	bl	bf00 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    aa94:	7821      	ldrb	r1, [r4, #0]
    aa96:	4620      	mov	r0, r4
    aa98:	f001 f958 	bl	bd4c <CFastLED::show(unsigned char)>
    aa9c:	4620      	mov	r0, r4
    aa9e:	2132      	movs	r1, #50	; 0x32
    aaa0:	f001 f9b6 	bl	be10 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    aaa4:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    aaa6:	aa01      	add	r2, sp, #4
    aaa8:	2196      	movs	r1, #150	; 0x96
    aaaa:	4836      	ldr	r0, [pc, #216]	; (ab84 <setup+0x1b0>)
    aaac:	f88d 6004 	strb.w	r6, [sp, #4]
    aab0:	f88d 5005 	strb.w	r5, [sp, #5]
    aab4:	f88d 5006 	strb.w	r5, [sp, #6]
    aab8:	f000 ff24 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
    aabc:	4620      	mov	r0, r4
    aabe:	21fa      	movs	r1, #250	; 0xfa
    aac0:	f001 f9a6 	bl	be10 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    aac4:	aa01      	add	r2, sp, #4
    aac6:	2196      	movs	r1, #150	; 0x96
    aac8:	482e      	ldr	r0, [pc, #184]	; (ab84 <setup+0x1b0>)
    aaca:	f88d 6006 	strb.w	r6, [sp, #6]
    aace:	f88d 5004 	strb.w	r5, [sp, #4]
    aad2:	f88d 5005 	strb.w	r5, [sp, #5]
    aad6:	f000 ff15 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
    aada:	4620      	mov	r0, r4
    aadc:	21fa      	movs	r1, #250	; 0xfa
    aade:	f001 f997 	bl	be10 <CFastLED::delay(unsigned long)>
    aae2:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    aae4:	aa01      	add	r2, sp, #4
    aae6:	2196      	movs	r1, #150	; 0x96
    aae8:	4826      	ldr	r0, [pc, #152]	; (ab84 <setup+0x1b0>)
    aaea:	f88d 3005 	strb.w	r3, [sp, #5]
    aaee:	f88d 5004 	strb.w	r5, [sp, #4]
    aaf2:	f88d 5006 	strb.w	r5, [sp, #6]
    aaf6:	f000 ff05 	bl	b904 <fill_solid(CRGB*, int, CRGB const&)>
    aafa:	4620      	mov	r0, r4
    aafc:	21fa      	movs	r1, #250	; 0xfa
    aafe:	f001 f987 	bl	be10 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    ab02:	4629      	mov	r1, r5
    ab04:	4620      	mov	r0, r4
    ab06:	f001 f9fb 	bl	bf00 <CFastLED::clear(bool)>
    ab0a:	4620      	mov	r0, r4
    ab0c:	21fa      	movs	r1, #250	; 0xfa
    ab0e:	f001 f97f 	bl	be10 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    ab12:	f7f6 f8ef 	bl	cf4 <initialize()>
    ab16:	210e      	movs	r1, #14
    ab18:	481f      	ldr	r0, [pc, #124]	; (ab98 <setup+0x1c4>)
    ab1a:	f002 ffc7 	bl	daac <usb_serial_write>
    ab1e:	4816      	ldr	r0, [pc, #88]	; (ab78 <setup+0x1a4>)
    ab20:	f003 f9c8 	bl	deb4 <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    ab24:	b002      	add	sp, #8
    ab26:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    ab28:	f001 ff28 	bl	c97c <__cxa_guard_acquire>
    ab2c:	2800      	cmp	r0, #0
    ab2e:	d087      	beq.n	aa40 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    ab30:	491a      	ldr	r1, [pc, #104]	; (ab9c <setup+0x1c8>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    ab32:	4b15      	ldr	r3, [pc, #84]	; (ab88 <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    ab34:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    ab36:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    ab38:	22ff      	movs	r2, #255	; 0xff
    ab3a:	2501      	movs	r5, #1
    ab3c:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    ab3e:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    ab40:	749d      	strb	r5, [r3, #18]
    ab42:	731a      	strb	r2, [r3, #12]
    ab44:	735a      	strb	r2, [r3, #13]
    ab46:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    ab48:	73da      	strb	r2, [r3, #15]
    ab4a:	741a      	strb	r2, [r3, #16]
    ab4c:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    ab4e:	b160      	cbz	r0, ab6a <setup+0x196>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    ab50:	4a13      	ldr	r2, [pc, #76]	; (aba0 <setup+0x1cc>)
    ab52:	6811      	ldr	r1, [r2, #0]
    ab54:	b101      	cbz	r1, ab58 <setup+0x184>
    ab56:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    ab58:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    ab5a:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    ab5c:	4911      	ldr	r1, [pc, #68]	; (aba4 <setup+0x1d0>)
    ab5e:	4808      	ldr	r0, [pc, #32]	; (ab80 <setup+0x1ac>)
    ab60:	619a      	str	r2, [r3, #24]
    ab62:	6019      	str	r1, [r3, #0]
    ab64:	f001 ff10 	bl	c988 <__cxa_guard_release>
    ab68:	e76a      	b.n	aa40 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    ab6a:	600b      	str	r3, [r1, #0]
    ab6c:	e7f0      	b.n	ab50 <setup+0x17c>
    ab6e:	bf00      	nop
    ab70:	1fffb14c 	.word	0x1fffb14c
    ab74:	00010cb8 	.word	0x00010cb8
    ab78:	1fff8790 	.word	0x1fff8790
    ab7c:	00010ccc 	.word	0x00010ccc
    ab80:	1fff8c94 	.word	0x1fff8c94
    ab84:	1fffaf5c 	.word	0x1fffaf5c
    ab88:	1fff8c98 	.word	0x1fff8c98
    ab8c:	1fffb124 	.word	0x1fffb124
    ab90:	1fff8788 	.word	0x1fff8788
    ab94:	1fff8723 	.word	0x1fff8723
    ab98:	00010cd8 	.word	0x00010cd8
    ab9c:	1fffb134 	.word	0x1fffb134
    aba0:	1fffb144 	.word	0x1fffb144
    aba4:	0000f760 	.word	0x0000f760

0000aba8 <loop>:



// ================ LOOP ================

void loop() {
    aba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    abac:	b097      	sub	sp, #92	; 0x5c
	// Add entropy to randomness
	random16_add_entropy(random());
    abae:	f004 fd0b 	bl	f5c8 <random>
    abb2:	4aa9      	ldr	r2, [pc, #676]	; (ae58 <loop+0x2b0>)
	
	// Check for keyboard updates
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
    abb4:	4da9      	ldr	r5, [pc, #676]	; (ae5c <loop+0x2b4>)
    abb6:	8813      	ldrh	r3, [r2, #0]
    abb8:	4418      	add	r0, r3
    abba:	8010      	strh	r0, [r2, #0]
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());
	
	// Check for keyboard updates
	read_keyboard();
    abbc:	f7ff fd76 	bl	a6ac <read_keyboard()>

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
    abc0:	682b      	ldr	r3, [r5, #0]
    abc2:	07db      	lsls	r3, r3, #31
    abc4:	f140 81bb 	bpl.w	af3e <loop+0x396>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    abc8:	4ea5      	ldr	r6, [pc, #660]	; (ae60 <loop+0x2b8>)
    abca:	4ca6      	ldr	r4, [pc, #664]	; (ae64 <loop+0x2bc>)
    abcc:	6833      	ldr	r3, [r6, #0]
    abce:	9303      	str	r3, [sp, #12]
	return ret;
    abd0:	9a03      	ldr	r2, [sp, #12]
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    abd2:	48a5      	ldr	r0, [pc, #660]	; (ae68 <loop+0x2c0>)
    abd4:	8823      	ldrh	r3, [r4, #0]
    abd6:	8861      	ldrh	r1, [r4, #2]
    abd8:	fba0 0202 	umull	r0, r2, r0, r2
    abdc:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    abe0:	b29b      	uxth	r3, r3
    abe2:	4299      	cmp	r1, r3
    abe4:	d80f      	bhi.n	ac06 <loop+0x5e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    abe6:	6833      	ldr	r3, [r6, #0]
    abe8:	9302      	str	r3, [sp, #8]
	return ret;
    abea:	9b02      	ldr	r3, [sp, #8]
    abec:	499e      	ldr	r1, [pc, #632]	; (ae68 <loop+0x2c0>)
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
    abee:	4a9f      	ldr	r2, [pc, #636]	; (ae6c <loop+0x2c4>)
	// Check for keyboard updates
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
		modeTimer.setPeriod(mode_change_time);
    abf0:	489f      	ldr	r0, [pc, #636]	; (ae70 <loop+0x2c8>)
		if (mode_change) { change_mode(); }
    abf2:	7812      	ldrb	r2, [r2, #0]
    abf4:	8800      	ldrh	r0, [r0, #0]
    abf6:	8060      	strh	r0, [r4, #2]
    abf8:	fba1 1303 	umull	r1, r3, r1, r3
    abfc:	099b      	lsrs	r3, r3, #6
    abfe:	8023      	strh	r3, [r4, #0]
    ac00:	2a00      	cmp	r2, #0
    ac02:	f040 81d1 	bne.w	afa8 <loop+0x400>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    ac06:	4d9b      	ldr	r5, [pc, #620]	; (ae74 <loop+0x2cc>)
    ac08:	682b      	ldr	r3, [r5, #0]
    ac0a:	07df      	lsls	r7, r3, #31
    ac0c:	f140 81ad 	bpl.w	af6a <loop+0x3c2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ac10:	6833      	ldr	r3, [r6, #0]
    ac12:	4c99      	ldr	r4, [pc, #612]	; (ae78 <loop+0x2d0>)
    ac14:	9306      	str	r3, [sp, #24]
	return ret;
    ac16:	9a06      	ldr	r2, [sp, #24]
    ac18:	4893      	ldr	r0, [pc, #588]	; (ae68 <loop+0x2c0>)
    ac1a:	8823      	ldrh	r3, [r4, #0]
    ac1c:	8861      	ldrh	r1, [r4, #2]
    ac1e:	fba0 0202 	umull	r0, r2, r0, r2
    ac22:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    ac26:	b29b      	uxth	r3, r3
    ac28:	4299      	cmp	r1, r3
    ac2a:	f240 8157 	bls.w	aedc <loop+0x334>
    ac2e:	4f93      	ldr	r7, [pc, #588]	; (ae7c <loop+0x2d4>)
    ac30:	f8df 8258 	ldr.w	r8, [pc, #600]	; ae8c <loop+0x2e4>
    ac34:	f8df 9250 	ldr.w	r9, [pc, #592]	; ae88 <loop+0x2e0>
			else { change_palette(curr_leds); }
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    ac38:	4d91      	ldr	r5, [pc, #580]	; (ae80 <loop+0x2d8>)
    ac3a:	682b      	ldr	r3, [r5, #0]
    ac3c:	07dc      	lsls	r4, r3, #31
    ac3e:	f140 80bc 	bpl.w	adba <loop+0x212>
    ac42:	4c90      	ldr	r4, [pc, #576]	; (ae84 <loop+0x2dc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ac44:	6833      	ldr	r3, [r6, #0]
    ac46:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    ac48:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    ac4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ac4e:	1a5b      	subs	r3, r3, r1
    ac50:	429a      	cmp	r2, r3
    ac52:	f240 80c2 	bls.w	adda <loop+0x232>
	next_over_leds.target_palette = cequal_gp;
}


void delay_check(LEDStruct& leds) {
	if (leds.delay_time < 5) { leds.delay_time = 5; }
    ac56:	f899 31c3 	ldrb.w	r3, [r9, #451]	; 0x1c3
    ac5a:	4a8b      	ldr	r2, [pc, #556]	; (ae88 <loop+0x2e0>)
    ac5c:	2b04      	cmp	r3, #4
    ac5e:	f200 815e 	bhi.w	af1e <loop+0x376>
    ac62:	2305      	movs	r3, #5
    ac64:	f882 31c3 	strb.w	r3, [r2, #451]	; 0x1c3
    ac68:	f898 21c3 	ldrb.w	r2, [r8, #451]	; 0x1c3
    ac6c:	4987      	ldr	r1, [pc, #540]	; (ae8c <loop+0x2e4>)
    ac6e:	2a04      	cmp	r2, #4
    ac70:	f200 814f 	bhi.w	af12 <loop+0x36a>
    ac74:	2205      	movs	r2, #5
    ac76:	f881 21c3 	strb.w	r2, [r1, #451]	; 0x1c3
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    ac7a:	f8df 8254 	ldr.w	r8, [pc, #596]	; aed0 <loop+0x328>
	}	

	// Update delay times
	delay_check(curr_leds);
	delay_check(next_leds);
	curr_delay = curr_leds.delay_time;
    ac7e:	f8df 9254 	ldr.w	r9, [pc, #596]	; aed4 <loop+0x32c>
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    ac82:	f8d8 1000 	ldr.w	r1, [r8]

	// Update delay times
	delay_check(curr_leds);
	delay_check(next_leds);
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    ac86:	4d82      	ldr	r5, [pc, #520]	; (ae90 <loop+0x2e8>)
	}	

	// Update delay times
	delay_check(curr_leds);
	delay_check(next_leds);
	curr_delay = curr_leds.delay_time;
    ac88:	f889 3000 	strb.w	r3, [r9]
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    ac8c:	07c8      	lsls	r0, r1, #31

	// Update delay times
	delay_check(curr_leds);
	delay_check(next_leds);
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    ac8e:	702a      	strb	r2, [r5, #0]


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    ac90:	f140 80b8 	bpl.w	ae04 <loop+0x25c>
    ac94:	4c7f      	ldr	r4, [pc, #508]	; (ae94 <loop+0x2ec>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ac96:	6832      	ldr	r2, [r6, #0]
    ac98:	920c      	str	r2, [sp, #48]	; 0x30
    ac9a:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    ac9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aca0:	1a12      	subs	r2, r2, r0
    aca2:	428a      	cmp	r2, r1
    aca4:	f080 80c0 	bcs.w	ae28 <loop+0x280>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    aca8:	f8df 822c 	ldr.w	r8, [pc, #556]	; aed8 <loop+0x330>
    acac:	f8d8 3000 	ldr.w	r3, [r8]
    acb0:	07d9      	lsls	r1, r3, #31
    acb2:	f140 80c8 	bpl.w	ae46 <loop+0x29e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    acb6:	6833      	ldr	r3, [r6, #0]
    acb8:	4c77      	ldr	r4, [pc, #476]	; (ae98 <loop+0x2f0>)
    acba:	930f      	str	r3, [sp, #60]	; 0x3c
    acbc:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    acc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    acc2:	1a5b      	subs	r3, r3, r1
    acc4:	4293      	cmp	r3, r2
    acc6:	d309      	bcc.n	acdc <loop+0x134>
		if (!keyboard_update) {
    acc8:	4b74      	ldr	r3, [pc, #464]	; (ae9c <loop+0x2f4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    acca:	6832      	ldr	r2, [r6, #0]
    accc:	920e      	str	r2, [sp, #56]	; 0x38
    acce:	781b      	ldrb	r3, [r3, #0]
	return ret;
    acd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    acd2:	6022      	str	r2, [r4, #0]
    acd4:	4a70      	ldr	r2, [pc, #448]	; (ae98 <loop+0x2f0>)
    acd6:	2b00      	cmp	r3, #0
    acd8:	f000 8127 	beq.w	af2a <loop+0x382>
			}
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if (in_transition && !keyboard_update) {
    acdc:	783b      	ldrb	r3, [r7, #0]
    acde:	b123      	cbz	r3, acea <loop+0x142>
    ace0:	4b6e      	ldr	r3, [pc, #440]	; (ae9c <loop+0x2f4>)
    ace2:	781b      	ldrb	r3, [r3, #0]
    ace4:	2b00      	cmp	r3, #0
    ace6:	f000 815a 	beq.w	af9e <loop+0x3f6>
    acea:	4b67      	ldr	r3, [pc, #412]	; (ae88 <loop+0x2e0>)
    acec:	4a6c      	ldr	r2, [pc, #432]	; (aea0 <loop+0x2f8>)
    acee:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    acf2:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    acf4:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    acf6:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    acf8:	7014      	strb	r4, [r2, #0]
    acfa:	3303      	adds	r3, #3
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    acfc:	429d      	cmp	r5, r3
        g = rhs.g;
    acfe:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    ad00:	7091      	strb	r1, [r2, #2]
    ad02:	f102 0203 	add.w	r2, r2, #3
    ad06:	d1f4      	bne.n	acf2 <loop+0x14a>
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
    ad08:	4d66      	ldr	r5, [pc, #408]	; (aea4 <loop+0x2fc>)
    ad0a:	682b      	ldr	r3, [r5, #0]
    ad0c:	07da      	lsls	r2, r3, #31
    ad0e:	f140 813d 	bpl.w	af8c <loop+0x3e4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad12:	6833      	ldr	r3, [r6, #0]
    ad14:	4c64      	ldr	r4, [pc, #400]	; (aea8 <loop+0x300>)
    ad16:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    ad18:	9a12      	ldr	r2, [sp, #72]	; 0x48
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    ad1a:	4864      	ldr	r0, [pc, #400]	; (aeac <loop+0x304>)
    ad1c:	8823      	ldrh	r3, [r4, #0]
    ad1e:	8861      	ldrh	r1, [r4, #2]
    ad20:	fba0 0202 	umull	r0, r2, r0, r2
    ad24:	ebc3 3392 	rsb	r3, r3, r2, lsr #14
    ad28:	b29b      	uxth	r3, r3
    ad2a:	4299      	cmp	r1, r3
    ad2c:	d80b      	bhi.n	ad46 <loop+0x19e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad2e:	6833      	ldr	r3, [r6, #0]
    ad30:	495f      	ldr	r1, [pc, #380]	; (aeb0 <loop+0x308>)
    ad32:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    ad34:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ad36:	485d      	ldr	r0, [pc, #372]	; (aeac <loop+0x304>)
    ad38:	880a      	ldrh	r2, [r1, #0]
    ad3a:	fba0 0303 	umull	r0, r3, r0, r3
    ad3e:	0b9b      	lsrs	r3, r3, #14
    ad40:	3201      	adds	r2, #1
    ad42:	8023      	strh	r3, [r4, #0]
    ad44:	800a      	strh	r2, [r1, #0]
		EVERY_N_SECONDS(5) {
    ad46:	4d5b      	ldr	r5, [pc, #364]	; (aeb4 <loop+0x30c>)
    ad48:	682b      	ldr	r3, [r5, #0]
    ad4a:	07db      	lsls	r3, r3, #31
    ad4c:	f140 8116 	bpl.w	af7c <loop+0x3d4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad50:	6833      	ldr	r3, [r6, #0]
    ad52:	4c59      	ldr	r4, [pc, #356]	; (aeb8 <loop+0x310>)
    ad54:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    ad56:	9a15      	ldr	r2, [sp, #84]	; 0x54
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    ad58:	4843      	ldr	r0, [pc, #268]	; (ae68 <loop+0x2c0>)
    ad5a:	8823      	ldrh	r3, [r4, #0]
    ad5c:	8861      	ldrh	r1, [r4, #2]
    ad5e:	fba0 0202 	umull	r0, r2, r0, r2
    ad62:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    ad66:	b29b      	uxth	r3, r3
    ad68:	4299      	cmp	r1, r3
    ad6a:	d81f      	bhi.n	adac <loop+0x204>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad6c:	6833      	ldr	r3, [r6, #0]
    ad6e:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    ad70:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ad72:	4a3d      	ldr	r2, [pc, #244]	; (ae68 <loop+0x2c0>)
			LEDDebug(curr_leds);
    ad74:	4844      	ldr	r0, [pc, #272]	; (ae88 <loop+0x2e0>)
    ad76:	fba2 2303 	umull	r2, r3, r2, r3
    ad7a:	099b      	lsrs	r3, r3, #6
    ad7c:	8023      	strh	r3, [r4, #0]
    ad7e:	f7f7 fa5d 	bl	223c <LEDDebug(LEDStruct&)>
			if (in_transition) {
    ad82:	783b      	ldrb	r3, [r7, #0]
    ad84:	2b00      	cmp	r3, #0
    ad86:	f040 8113 	bne.w	afb0 <loop+0x408>
				LEDDebug(next_leds);
			}
			number_of_sec_on = (number_of_sec_on + 5) % 60;
    ad8a:	4c4c      	ldr	r4, [pc, #304]	; (aebc <loop+0x314>)
    ad8c:	484c      	ldr	r0, [pc, #304]	; (aec0 <loop+0x318>)
    ad8e:	7823      	ldrb	r3, [r4, #0]
    ad90:	3305      	adds	r3, #5
    ad92:	fb83 0100 	smull	r0, r1, r3, r0
    ad96:	4419      	add	r1, r3
    ad98:	17da      	asrs	r2, r3, #31
    ad9a:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    ad9e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    ada2:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    ada6:	7023      	strb	r3, [r4, #0]
			global_debug();
    ada8:	f7f6 f842 	bl	e30 <global_debug()>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    adac:	4845      	ldr	r0, [pc, #276]	; (aec4 <loop+0x31c>)
    adae:	7801      	ldrb	r1, [r0, #0]
    adb0:	f000 ffcc 	bl	bd4c <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    adb4:	b017      	add	sp, #92	; 0x5c
    adb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			else { change_palette(curr_leds); }
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    adba:	4628      	mov	r0, r5
    adbc:	f001 fdde 	bl	c97c <__cxa_guard_acquire>
    adc0:	2800      	cmp	r0, #0
    adc2:	f040 8124 	bne.w	b00e <loop+0x466>
    adc6:	4c2f      	ldr	r4, [pc, #188]	; (ae84 <loop+0x2dc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    adc8:	6833      	ldr	r3, [r6, #0]
    adca:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    adcc:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    add0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    add2:	1a5b      	subs	r3, r3, r1
    add4:	4293      	cmp	r3, r2
    add6:	f4ff af3e 	bcc.w	ac56 <loop+0xae>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    adda:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    addc:	493a      	ldr	r1, [pc, #232]	; (aec8 <loop+0x320>)
    adde:	9308      	str	r3, [sp, #32]
	return ret;
    ade0:	9b08      	ldr	r3, [sp, #32]
    ade2:	6023      	str	r3, [r4, #0]
    ade4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    ade8:	2218      	movs	r2, #24
    adea:	f000 ff0d 	bl	bc08 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    adee:	783b      	ldrb	r3, [r7, #0]
    adf0:	2b00      	cmp	r3, #0
    adf2:	f43f af30 	beq.w	ac56 <loop+0xae>
    adf6:	4935      	ldr	r1, [pc, #212]	; (aecc <loop+0x324>)
    adf8:	2218      	movs	r2, #24
    adfa:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    adfe:	f000 ff03 	bl	bc08 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    ae02:	e728      	b.n	ac56 <loop+0xae>
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    ae04:	4640      	mov	r0, r8
    ae06:	f001 fdb9 	bl	c97c <__cxa_guard_acquire>
    ae0a:	2800      	cmp	r0, #0
    ae0c:	f040 8119 	bne.w	b042 <loop+0x49a>
    ae10:	4c20      	ldr	r4, [pc, #128]	; (ae94 <loop+0x2ec>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ae12:	6833      	ldr	r3, [r6, #0]
    ae14:	930c      	str	r3, [sp, #48]	; 0x30
    ae16:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    ae1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ae1c:	1a5b      	subs	r3, r3, r1
    ae1e:	4293      	cmp	r3, r2
    ae20:	f4ff af42 	bcc.w	aca8 <loop+0x100>
    ae24:	f899 3000 	ldrb.w	r3, [r9]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ae28:	6832      	ldr	r2, [r6, #0]
    ae2a:	920b      	str	r2, [sp, #44]	; 0x2c
	return ret;
    ae2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    ae2e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; aed8 <loop+0x330>


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    ae32:	4815      	ldr	r0, [pc, #84]	; (ae88 <loop+0x2e0>)
    ae34:	e884 000c 	stmia.w	r4, {r2, r3}
    ae38:	f7fe fda0 	bl	997c <switch_mode(LEDStruct&)>
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    ae3c:	f8d8 3000 	ldr.w	r3, [r8]
    ae40:	07d9      	lsls	r1, r3, #31
    ae42:	f53f af38 	bmi.w	acb6 <loop+0x10e>
    ae46:	4640      	mov	r0, r8
    ae48:	f001 fd98 	bl	c97c <__cxa_guard_acquire>
    ae4c:	2800      	cmp	r0, #0
    ae4e:	f040 8104 	bne.w	b05a <loop+0x4b2>
    ae52:	4c11      	ldr	r4, [pc, #68]	; (ae98 <loop+0x2f0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ae54:	6833      	ldr	r3, [r6, #0]
    ae56:	e730      	b.n	acba <loop+0x112>
    ae58:	1fff8788 	.word	0x1fff8788
    ae5c:	1fff9e88 	.word	0x1fff9e88
    ae60:	1fffb19c 	.word	0x1fffb19c
    ae64:	1fffb120 	.word	0x1fffb120
    ae68:	10624dd3 	.word	0x10624dd3
    ae6c:	1fff8787 	.word	0x1fff8787
    ae70:	1fff8720 	.word	0x1fff8720
    ae74:	1fff9570 	.word	0x1fff9570
    ae78:	1fff9544 	.word	0x1fff9544
    ae7c:	1fff9524 	.word	0x1fff9524
    ae80:	1fff9574 	.word	0x1fff9574
    ae84:	1fff9548 	.word	0x1fff9548
    ae88:	1fffa700 	.word	0x1fffa700
    ae8c:	1fff8cb8 	.word	0x1fff8cb8
    ae90:	1fff9580 	.word	0x1fff9580
    ae94:	1fff951c 	.word	0x1fff951c
    ae98:	1fff9514 	.word	0x1fff9514
    ae9c:	1fff9625 	.word	0x1fff9625
    aea0:	1fffaf5c 	.word	0x1fffaf5c
    aea4:	1fff9578 	.word	0x1fff9578
    aea8:	1fffa6fc 	.word	0x1fffa6fc
    aeac:	45e7b273 	.word	0x45e7b273
    aeb0:	1fff9626 	.word	0x1fff9626
    aeb4:	1fff957c 	.word	0x1fff957c
    aeb8:	1fff9554 	.word	0x1fff9554
    aebc:	1fff9581 	.word	0x1fff9581
    aec0:	88888889 	.word	0x88888889
    aec4:	1fffb124 	.word	0x1fffb124
    aec8:	1fffa8f8 	.word	0x1fffa8f8
    aecc:	1fff8eb0 	.word	0x1fff8eb0
    aed0:	1fff9e9c 	.word	0x1fff9e9c
    aed4:	1fff9624 	.word	0x1fff9624
    aed8:	1fff9e98 	.word	0x1fff9e98
    aedc:	6833      	ldr	r3, [r6, #0]
    aede:	9305      	str	r3, [sp, #20]
	return ret;
    aee0:	9b05      	ldr	r3, [sp, #20]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    aee2:	4965      	ldr	r1, [pc, #404]	; (b078 <loop+0x4d0>)
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (random_palette) {
    aee4:	4a65      	ldr	r2, [pc, #404]	; (b07c <loop+0x4d4>)
			if (in_transition) { change_palette(next_leds); }
    aee6:	4f66      	ldr	r7, [pc, #408]	; (b080 <loop+0x4d8>)
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (random_palette) {
    aee8:	7812      	ldrb	r2, [r2, #0]
    aeea:	fba1 1303 	umull	r1, r3, r1, r3
    aeee:	099b      	lsrs	r3, r3, #6
    aef0:	8023      	strh	r3, [r4, #0]
    aef2:	2a00      	cmp	r2, #0
    aef4:	f43f ae9c 	beq.w	ac30 <loop+0x88>
			if (in_transition) { change_palette(next_leds); }
    aef8:	783b      	ldrb	r3, [r7, #0]
    aefa:	2b00      	cmp	r3, #0
    aefc:	d15c      	bne.n	afb8 <loop+0x410>
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    aefe:	f8df 91b0 	ldr.w	r9, [pc, #432]	; b0b0 <loop+0x508>
    af02:	f899 322a 	ldrb.w	r3, [r9, #554]	; 0x22a
    af06:	2b00      	cmp	r3, #0
    af08:	f040 80b2 	bne.w	b070 <loop+0x4c8>
    af0c:	f8df 8174 	ldr.w	r8, [pc, #372]	; b084 <loop+0x4dc>
    af10:	e692      	b.n	ac38 <loop+0x90>
}


void delay_check(LEDStruct& leds) {
	if (leds.delay_time < 5) { leds.delay_time = 5; }
	if (leds.delay_time > 20) { leds.delay_time = 20; }
    af12:	2a14      	cmp	r2, #20
    af14:	bf84      	itt	hi
    af16:	2214      	movhi	r2, #20
    af18:	f881 21c3 	strbhi.w	r2, [r1, #451]	; 0x1c3
    af1c:	e6ad      	b.n	ac7a <loop+0xd2>
    af1e:	2b14      	cmp	r3, #20
    af20:	bf84      	itt	hi
    af22:	2314      	movhi	r3, #20
    af24:	f882 31c3 	strbhi.w	r3, [r2, #451]	; 0x1c3
    af28:	e69e      	b.n	ac68 <loop+0xc0>
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
		if (!keyboard_update) {
			if (in_transition) {
    af2a:	783b      	ldrb	r3, [r7, #0]
    af2c:	2b00      	cmp	r3, #0
    af2e:	f43f aedc 	beq.w	acea <loop+0x142>
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    af32:	782b      	ldrb	r3, [r5, #0]
				next_timer.setPeriod(next_delay);
				switch_mode(next_leds);
    af34:	4853      	ldr	r0, [pc, #332]	; (b084 <loop+0x4dc>)
    af36:	6053      	str	r3, [r2, #4]
    af38:	f7fe fd20 	bl	997c <switch_mode(LEDStruct&)>
    af3c:	e6ce      	b.n	acdc <loop+0x134>
	
	// Check for keyboard updates
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
    af3e:	4628      	mov	r0, r5
    af40:	f001 fd1c 	bl	c97c <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    af44:	4e50      	ldr	r6, [pc, #320]	; (b088 <loop+0x4e0>)
    af46:	2800      	cmp	r0, #0
    af48:	f43f ae3f 	beq.w	abca <loop+0x22>
    af4c:	6833      	ldr	r3, [r6, #0]
    af4e:	9301      	str	r3, [sp, #4]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    af50:	4a49      	ldr	r2, [pc, #292]	; (b078 <loop+0x4d0>)
	return ret;
    af52:	9b01      	ldr	r3, [sp, #4]
    af54:	4c4d      	ldr	r4, [pc, #308]	; (b08c <loop+0x4e4>)
    af56:	fba2 2303 	umull	r2, r3, r2, r3
    af5a:	099b      	lsrs	r3, r3, #6
    af5c:	2214      	movs	r2, #20
    af5e:	4628      	mov	r0, r5
    af60:	8023      	strh	r3, [r4, #0]
    af62:	8062      	strh	r2, [r4, #2]
    af64:	f001 fd10 	bl	c988 <__cxa_guard_release>
    af68:	e630      	b.n	abcc <loop+0x24>
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    af6a:	4628      	mov	r0, r5
    af6c:	f001 fd06 	bl	c97c <__cxa_guard_acquire>
    af70:	2800      	cmp	r0, #0
    af72:	d13d      	bne.n	aff0 <loop+0x448>
    af74:	4c46      	ldr	r4, [pc, #280]	; (b090 <loop+0x4e8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    af76:	6833      	ldr	r3, [r6, #0]
    af78:	9306      	str	r3, [sp, #24]
    af7a:	e64c      	b.n	ac16 <loop+0x6e>
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
		EVERY_N_SECONDS(5) {
    af7c:	4628      	mov	r0, r5
    af7e:	f001 fcfd 	bl	c97c <__cxa_guard_acquire>
    af82:	bb30      	cbnz	r0, afd2 <loop+0x42a>
    af84:	4c43      	ldr	r4, [pc, #268]	; (b094 <loop+0x4ec>)
    af86:	6833      	ldr	r3, [r6, #0]
    af88:	9315      	str	r3, [sp, #84]	; 0x54
    af8a:	e6e4      	b.n	ad56 <loop+0x1ae>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
    af8c:	4628      	mov	r0, r5
    af8e:	f001 fcf5 	bl	c97c <__cxa_guard_acquire>
    af92:	2800      	cmp	r0, #0
    af94:	d146      	bne.n	b024 <loop+0x47c>
    af96:	4c40      	ldr	r4, [pc, #256]	; (b098 <loop+0x4f0>)
    af98:	6833      	ldr	r3, [r6, #0]
    af9a:	9312      	str	r3, [sp, #72]	; 0x48
    af9c:	e6bc      	b.n	ad18 <loop+0x170>
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if (in_transition && !keyboard_update) {
		switch_transition(transition_type);
    af9e:	4b3f      	ldr	r3, [pc, #252]	; (b09c <loop+0x4f4>)
    afa0:	7818      	ldrb	r0, [r3, #0]
    afa2:	f7f6 fe31 	bl	1c08 <switch_transition(TransitionType)>
    afa6:	e6af      	b.n	ad08 <loop+0x160>
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
    afa8:	20ff      	movs	r0, #255	; 0xff
    afaa:	f7ff fb07 	bl	a5bc <change_mode(unsigned char)>
    afae:	e62a      	b.n	ac06 <loop+0x5e>
	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    afb0:	4834      	ldr	r0, [pc, #208]	; (b084 <loop+0x4dc>)
    afb2:	f7f7 f943 	bl	223c <LEDDebug(LEDStruct&)>
    afb6:	e6e8      	b.n	ad8a <loop+0x1e2>
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    afb8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b084 <loop+0x4dc>
    afbc:	f898 322a 	ldrb.w	r3, [r8, #554]	; 0x22a
    afc0:	2b00      	cmp	r3, #0
    afc2:	f43f ae37 	beq.w	ac34 <loop+0x8c>
    afc6:	4640      	mov	r0, r8
    afc8:	f7f8 f8ea 	bl	31a0 <change_palette(LEDStruct&) [clone .part.11]>
    afcc:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b0b0 <loop+0x508>
    afd0:	e632      	b.n	ac38 <loop+0x90>
    afd2:	6833      	ldr	r3, [r6, #0]
    afd4:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    afd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    afd8:	4a27      	ldr	r2, [pc, #156]	; (b078 <loop+0x4d0>)
    afda:	4c2e      	ldr	r4, [pc, #184]	; (b094 <loop+0x4ec>)
    afdc:	fba2 2303 	umull	r2, r3, r2, r3
    afe0:	099b      	lsrs	r3, r3, #6
    afe2:	2205      	movs	r2, #5
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
		EVERY_N_SECONDS(5) {
    afe4:	4628      	mov	r0, r5
    afe6:	8023      	strh	r3, [r4, #0]
    afe8:	8062      	strh	r2, [r4, #2]
    afea:	f001 fccd 	bl	c988 <__cxa_guard_release>
    afee:	e7ca      	b.n	af86 <loop+0x3de>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    aff0:	6833      	ldr	r3, [r6, #0]
    aff2:	9304      	str	r3, [sp, #16]
	return ret;
    aff4:	9b04      	ldr	r3, [sp, #16]
    aff6:	4a20      	ldr	r2, [pc, #128]	; (b078 <loop+0x4d0>)
    aff8:	4c25      	ldr	r4, [pc, #148]	; (b090 <loop+0x4e8>)
    affa:	fba2 2303 	umull	r2, r3, r2, r3
    affe:	099b      	lsrs	r3, r3, #6
    b000:	221e      	movs	r2, #30
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    b002:	4628      	mov	r0, r5
    b004:	8023      	strh	r3, [r4, #0]
    b006:	8062      	strh	r2, [r4, #2]
    b008:	f001 fcbe 	bl	c988 <__cxa_guard_release>
    b00c:	e7b3      	b.n	af76 <loop+0x3ce>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b00e:	6833      	ldr	r3, [r6, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    b010:	4c23      	ldr	r4, [pc, #140]	; (b0a0 <loop+0x4f8>)
    b012:	9307      	str	r3, [sp, #28]
	return ret;
    b014:	9b07      	ldr	r3, [sp, #28]
    b016:	6023      	str	r3, [r4, #0]
    b018:	2332      	movs	r3, #50	; 0x32
			else { change_palette(curr_leds); }
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    b01a:	4628      	mov	r0, r5
    b01c:	6063      	str	r3, [r4, #4]
    b01e:	f001 fcb3 	bl	c988 <__cxa_guard_release>
    b022:	e6d1      	b.n	adc8 <loop+0x220>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b024:	6833      	ldr	r3, [r6, #0]
    b026:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    b028:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    b02a:	4a1e      	ldr	r2, [pc, #120]	; (b0a4 <loop+0x4fc>)
    b02c:	4c1a      	ldr	r4, [pc, #104]	; (b098 <loop+0x4f0>)
    b02e:	fba2 2303 	umull	r2, r3, r2, r3
    b032:	0b9b      	lsrs	r3, r3, #14
    b034:	2201      	movs	r2, #1
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
    b036:	4628      	mov	r0, r5
    b038:	8023      	strh	r3, [r4, #0]
    b03a:	8062      	strh	r2, [r4, #2]
    b03c:	f001 fca4 	bl	c988 <__cxa_guard_release>
    b040:	e7aa      	b.n	af98 <loop+0x3f0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b042:	6833      	ldr	r3, [r6, #0]
    b044:	930a      	str	r3, [sp, #40]	; 0x28
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    b046:	4c18      	ldr	r4, [pc, #96]	; (b0a8 <loop+0x500>)
	return ret;
    b048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    b04a:	f899 3000 	ldrb.w	r3, [r9]
    b04e:	6022      	str	r2, [r4, #0]
    b050:	4640      	mov	r0, r8
    b052:	6063      	str	r3, [r4, #4]
    b054:	f001 fc98 	bl	c988 <__cxa_guard_release>
    b058:	e6db      	b.n	ae12 <loop+0x26a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b05a:	6833      	ldr	r3, [r6, #0]
    b05c:	930d      	str	r3, [sp, #52]	; 0x34
    b05e:	4c13      	ldr	r4, [pc, #76]	; (b0ac <loop+0x504>)
	return ret;
    b060:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    b062:	782b      	ldrb	r3, [r5, #0]
    b064:	6022      	str	r2, [r4, #0]
    b066:	4640      	mov	r0, r8
    b068:	6063      	str	r3, [r4, #4]
    b06a:	f001 fc8d 	bl	c988 <__cxa_guard_release>
    b06e:	e6f1      	b.n	ae54 <loop+0x2ac>
    b070:	4648      	mov	r0, r9
    b072:	f7f8 f895 	bl	31a0 <change_palette(LEDStruct&) [clone .part.11]>
    b076:	e749      	b.n	af0c <loop+0x364>
    b078:	10624dd3 	.word	0x10624dd3
    b07c:	1fff8722 	.word	0x1fff8722
    b080:	1fff9524 	.word	0x1fff9524
    b084:	1fff8cb8 	.word	0x1fff8cb8
    b088:	1fffb19c 	.word	0x1fffb19c
    b08c:	1fffb120 	.word	0x1fffb120
    b090:	1fff9544 	.word	0x1fff9544
    b094:	1fff9554 	.word	0x1fff9554
    b098:	1fffa6fc 	.word	0x1fffa6fc
    b09c:	1fff9538 	.word	0x1fff9538
    b0a0:	1fff9548 	.word	0x1fff9548
    b0a4:	45e7b273 	.word	0x45e7b273
    b0a8:	1fff951c 	.word	0x1fff951c
    b0ac:	1fff9514 	.word	0x1fff9514
    b0b0:	1fffa700 	.word	0x1fffa700

0000b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    b0b4:	b410      	push	{r4}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    b0b6:	0604      	lsls	r4, r0, #24
    b0b8:	f100 8119 	bmi.w	b2ee <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x23a>
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b0bc:	4b48      	ldr	r3, [pc, #288]	; (b1e0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b0be:	4949      	ldr	r1, [pc, #292]	; (b1e4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b0c0:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b0c2:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b0c4:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b0c6:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b0c8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b0ca:	bf00      	nop
    b0cc:	bf00      	nop
    b0ce:	bf00      	nop
    b0d0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b0d2:	601a      	str	r2, [r3, #0]
    b0d4:	bf00      	nop
    b0d6:	bf00      	nop
    b0d8:	bf00      	nop
    b0da:	bf00      	nop
    b0dc:	0641      	lsls	r1, r0, #25
    b0de:	f140 8083 	bpl.w	b1e8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x134>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b0e2:	4a40      	ldr	r2, [pc, #256]	; (b1e4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    b0e4:	2102      	movs	r1, #2
    b0e6:	2304      	movs	r3, #4
    b0e8:	6011      	str	r1, [r2, #0]
    b0ea:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b0ec:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b0ee:	bf00      	nop
    b0f0:	bf00      	nop
    b0f2:	bf00      	nop
    b0f4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b0f6:	6053      	str	r3, [r2, #4]
    b0f8:	bf00      	nop
    b0fa:	bf00      	nop
    b0fc:	bf00      	nop
    b0fe:	bf00      	nop
    b100:	0682      	lsls	r2, r0, #26
    b102:	f140 8084 	bpl.w	b20e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x15a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b106:	4a37      	ldr	r2, [pc, #220]	; (b1e4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    b108:	2102      	movs	r1, #2
    b10a:	2304      	movs	r3, #4
    b10c:	6011      	str	r1, [r2, #0]
    b10e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b110:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b112:	bf00      	nop
    b114:	bf00      	nop
    b116:	bf00      	nop
    b118:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b11a:	6053      	str	r3, [r2, #4]
    b11c:	bf00      	nop
    b11e:	bf00      	nop
    b120:	bf00      	nop
    b122:	bf00      	nop
    b124:	06c3      	lsls	r3, r0, #27
    b126:	f140 8085 	bpl.w	b234 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x180>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b12a:	4a2e      	ldr	r2, [pc, #184]	; (b1e4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    b12c:	2102      	movs	r1, #2
    b12e:	2304      	movs	r3, #4
    b130:	6011      	str	r1, [r2, #0]
    b132:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b134:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b136:	bf00      	nop
    b138:	bf00      	nop
    b13a:	bf00      	nop
    b13c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b13e:	6053      	str	r3, [r2, #4]
    b140:	bf00      	nop
    b142:	bf00      	nop
    b144:	bf00      	nop
    b146:	bf00      	nop
    b148:	0704      	lsls	r4, r0, #28
    b14a:	f140 8086 	bpl.w	b25a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1a6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b14e:	4a25      	ldr	r2, [pc, #148]	; (b1e4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    b150:	2102      	movs	r1, #2
    b152:	2304      	movs	r3, #4
    b154:	6011      	str	r1, [r2, #0]
    b156:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b158:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b15a:	bf00      	nop
    b15c:	bf00      	nop
    b15e:	bf00      	nop
    b160:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b162:	6053      	str	r3, [r2, #4]
    b164:	bf00      	nop
    b166:	bf00      	nop
    b168:	bf00      	nop
    b16a:	bf00      	nop
    b16c:	0741      	lsls	r1, r0, #29
    b16e:	f140 8087 	bpl.w	b280 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1cc>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b172:	4a1c      	ldr	r2, [pc, #112]	; (b1e4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    b174:	2102      	movs	r1, #2
    b176:	2304      	movs	r3, #4
    b178:	6011      	str	r1, [r2, #0]
    b17a:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b17c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b17e:	bf00      	nop
    b180:	bf00      	nop
    b182:	bf00      	nop
    b184:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b186:	6053      	str	r3, [r2, #4]
    b188:	bf00      	nop
    b18a:	bf00      	nop
    b18c:	bf00      	nop
    b18e:	bf00      	nop
    b190:	0782      	lsls	r2, r0, #30
    b192:	f140 8088 	bpl.w	b2a6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b196:	4a13      	ldr	r2, [pc, #76]	; (b1e4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    b198:	2102      	movs	r1, #2
    b19a:	2304      	movs	r3, #4
    b19c:	6011      	str	r1, [r2, #0]
    b19e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b1a0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b1a2:	bf00      	nop
    b1a4:	bf00      	nop
    b1a6:	bf00      	nop
    b1a8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b1aa:	6053      	str	r3, [r2, #4]
    b1ac:	bf00      	nop
    b1ae:	bf00      	nop
    b1b0:	bf00      	nop
    b1b2:	bf00      	nop
    b1b4:	07c3      	lsls	r3, r0, #31
    b1b6:	f100 8089 	bmi.w	b2cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x218>
    b1ba:	4b09      	ldr	r3, [pc, #36]	; (b1e0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b1bc:	4909      	ldr	r1, [pc, #36]	; (b1e4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b1be:	2002      	movs	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b1c0:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b1c2:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b1c4:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b1c6:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b1c8:	bf00      	nop
    b1ca:	bf00      	nop
    b1cc:	bf00      	nop
    b1ce:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b1d0:	601a      	str	r2, [r3, #0]
    b1d2:	bf00      	nop
    b1d4:	bf00      	nop
    b1d6:	bf00      	nop
    b1d8:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    b1da:	bc10      	pop	{r4}
    b1dc:	4770      	bx	lr
    b1de:	bf00      	nop
    b1e0:	400ff0c8 	.word	0x400ff0c8
    b1e4:	400ff0c4 	.word	0x400ff0c4
    b1e8:	4b49      	ldr	r3, [pc, #292]	; (b310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b1ea:	494a      	ldr	r1, [pc, #296]	; (b314 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b1ec:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b1ee:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b1f0:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b1f2:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b1f4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b1f6:	bf00      	nop
    b1f8:	bf00      	nop
    b1fa:	bf00      	nop
    b1fc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b1fe:	601a      	str	r2, [r3, #0]
    b200:	bf00      	nop
    b202:	bf00      	nop
    b204:	bf00      	nop
    b206:	bf00      	nop
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    b208:	0682      	lsls	r2, r0, #26
    b20a:	f53f af7c 	bmi.w	b106 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x52>
    b20e:	4b40      	ldr	r3, [pc, #256]	; (b310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b210:	4940      	ldr	r1, [pc, #256]	; (b314 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b212:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b214:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b216:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b218:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b21a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b21c:	bf00      	nop
    b21e:	bf00      	nop
    b220:	bf00      	nop
    b222:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b224:	601a      	str	r2, [r3, #0]
    b226:	bf00      	nop
    b228:	bf00      	nop
    b22a:	bf00      	nop
    b22c:	bf00      	nop
    b22e:	06c3      	lsls	r3, r0, #27
    b230:	f53f af7b 	bmi.w	b12a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x76>
    b234:	4b36      	ldr	r3, [pc, #216]	; (b310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b236:	4937      	ldr	r1, [pc, #220]	; (b314 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b238:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b23a:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b23c:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b23e:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b240:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b242:	bf00      	nop
    b244:	bf00      	nop
    b246:	bf00      	nop
    b248:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b24a:	601a      	str	r2, [r3, #0]
    b24c:	bf00      	nop
    b24e:	bf00      	nop
    b250:	bf00      	nop
    b252:	bf00      	nop
    b254:	0704      	lsls	r4, r0, #28
    b256:	f53f af7a 	bmi.w	b14e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x9a>
    b25a:	4b2d      	ldr	r3, [pc, #180]	; (b310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b25c:	492d      	ldr	r1, [pc, #180]	; (b314 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b25e:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b260:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b262:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b264:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b266:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b268:	bf00      	nop
    b26a:	bf00      	nop
    b26c:	bf00      	nop
    b26e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b270:	601a      	str	r2, [r3, #0]
    b272:	bf00      	nop
    b274:	bf00      	nop
    b276:	bf00      	nop
    b278:	bf00      	nop
    b27a:	0741      	lsls	r1, r0, #29
    b27c:	f53f af79 	bmi.w	b172 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xbe>
    b280:	4b23      	ldr	r3, [pc, #140]	; (b310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b282:	4924      	ldr	r1, [pc, #144]	; (b314 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b284:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b286:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b288:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b28a:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b28c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b28e:	bf00      	nop
    b290:	bf00      	nop
    b292:	bf00      	nop
    b294:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b296:	601a      	str	r2, [r3, #0]
    b298:	bf00      	nop
    b29a:	bf00      	nop
    b29c:	bf00      	nop
    b29e:	bf00      	nop
    b2a0:	0782      	lsls	r2, r0, #30
    b2a2:	f53f af78 	bmi.w	b196 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xe2>
    b2a6:	4b1a      	ldr	r3, [pc, #104]	; (b310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b2a8:	491a      	ldr	r1, [pc, #104]	; (b314 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b2aa:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b2ac:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b2ae:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b2b0:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b2b2:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b2b4:	bf00      	nop
    b2b6:	bf00      	nop
    b2b8:	bf00      	nop
    b2ba:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b2bc:	601a      	str	r2, [r3, #0]
    b2be:	bf00      	nop
    b2c0:	bf00      	nop
    b2c2:	bf00      	nop
    b2c4:	bf00      	nop
    b2c6:	07c3      	lsls	r3, r0, #31
    b2c8:	f57f af77 	bpl.w	b1ba <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x106>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b2cc:	4a11      	ldr	r2, [pc, #68]	; (b314 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    b2ce:	2102      	movs	r1, #2
    b2d0:	2304      	movs	r3, #4
    b2d2:	6011      	str	r1, [r2, #0]
    b2d4:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b2d6:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b2d8:	bf00      	nop
    b2da:	bf00      	nop
    b2dc:	bf00      	nop
    b2de:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b2e0:	6053      	str	r3, [r2, #4]
    b2e2:	bf00      	nop
    b2e4:	bf00      	nop
    b2e6:	bf00      	nop
    b2e8:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    b2ea:	bc10      	pop	{r4}
    b2ec:	4770      	bx	lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    b2ee:	4a09      	ldr	r2, [pc, #36]	; (b314 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    b2f0:	2102      	movs	r1, #2
    b2f2:	2304      	movs	r3, #4
    b2f4:	6011      	str	r1, [r2, #0]
    b2f6:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    b2f8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    b2fa:	bf00      	nop
    b2fc:	bf00      	nop
    b2fe:	bf00      	nop
    b300:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    b302:	6053      	str	r3, [r2, #4]
    b304:	bf00      	nop
    b306:	bf00      	nop
    b308:	bf00      	nop
    b30a:	bf00      	nop
    b30c:	e6e6      	b.n	b0dc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x28>
    b30e:	bf00      	nop
    b310:	400ff0c8 	.word	0x400ff0c8
    b314:	400ff0c4 	.word	0x400ff0c4

0000b318 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b31c:	4682      	mov	sl, r0
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    b31e:	6980      	ldr	r0, [r0, #24]
    b320:	b081      	sub	sp, #4
    b322:	460c      	mov	r4, r1
    b324:	b150      	cbz	r0, b33c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    b326:	6803      	ldr	r3, [r0, #0]
    b328:	4a46      	ldr	r2, [pc, #280]	; (b444 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12c>)
    b32a:	681b      	ldr	r3, [r3, #0]
    b32c:	4293      	cmp	r3, r2
    b32e:	f040 8087 	bne.w	b440 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x128>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    b332:	6842      	ldr	r2, [r0, #4]
    b334:	7b01      	ldrb	r1, [r0, #12]
    b336:	7813      	ldrb	r3, [r2, #0]
    b338:	430b      	orrs	r3, r1
    b33a:	7013      	strb	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
    b33c:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    b33e:	7d27      	ldrb	r7, [r4, #20]
    b340:	f894 8013 	ldrb.w	r8, [r4, #19]
    b344:	f894 9012 	ldrb.w	r9, [r4, #18]
    b348:	f7ff feb4 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b34c:	2000      	movs	r0, #0
    b34e:	f7ff feb1 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b352:	2000      	movs	r0, #0
    b354:	f7ff feae 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b358:	2000      	movs	r0, #0
    b35a:	f7ff feab 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    b35e:	68a3      	ldr	r3, [r4, #8]
    b360:	2b00      	cmp	r3, #0
    b362:	dd44      	ble.n	b3ee <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd6>
    b364:	6822      	ldr	r2, [r4, #0]
    b366:	f109 0901 	add.w	r9, r9, #1
    b36a:	f108 0801 	add.w	r8, r8, #1
    b36e:	3701      	adds	r7, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    b370:	69a1      	ldr	r1, [r4, #24]
    b372:	1853      	adds	r3, r2, r1
    b374:	5c56      	ldrb	r6, [r2, r1]
    b376:	785d      	ldrb	r5, [r3, #1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    b378:	f893 b002 	ldrb.w	fp, [r3, #2]
    b37c:	fb08 f505 	mul.w	r5, r8, r5
    b380:	122d      	asrs	r5, r5, #8
    b382:	fb07 fb0b 	mul.w	fp, r7, fp
    b386:	fb09 f606 	mul.w	r6, r9, r6
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    b38a:	022d      	lsls	r5, r5, #8
    b38c:	1236      	asrs	r6, r6, #8
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    b38e:	ea4f 2b2b 	mov.w	fp, fp, asr #8
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    b392:	b2ad      	uxth	r5, r5
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    b394:	f06b 0bff 	orn	fp, fp, #255	; 0xff
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    b398:	20ff      	movs	r0, #255	; 0xff
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
		w |= b2;
    b39a:	4335      	orrs	r5, r6
    b39c:	f7ff fe8a 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b3a0:	b2ad      	uxth	r5, r5
    b3a2:	fa5f f08b 	uxtb.w	r0, fp
    b3a6:	f7ff fe85 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b3aa:	0a28      	lsrs	r0, r5, #8
    b3ac:	f7ff fe82 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b3b0:	b2e8      	uxtb	r0, r5
    b3b2:	f7ff fe7f 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    b3b6:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    b3b8:	7b26      	ldrb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    b3ba:	7b65      	ldrb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    b3bc:	f894 e00e 	ldrb.w	lr, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    b3c0:	6821      	ldr	r1, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    b3c2:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
    b3c6:	f894 c010 	ldrb.w	ip, [r4, #16]
                d[2] = e[2] - d[2];
    b3ca:	7c60      	ldrb	r0, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    b3cc:	f994 2015 	ldrsb.w	r2, [r4, #21]
    b3d0:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    b3d2:	ebc6 060b 	rsb	r6, r6, fp
                d[1] = e[1] - d[1];
    b3d6:	ebc5 050c 	rsb	r5, r5, ip
                d[2] = e[2] - d[2];
    b3da:	ebce 0000 	rsb	r0, lr, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    b3de:	440a      	add	r2, r1
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    b3e0:	2b00      	cmp	r3, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    b3e2:	7326      	strb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    b3e4:	7365      	strb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    b3e6:	73a0      	strb	r0, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    b3e8:	6022      	str	r2, [r4, #0]
    b3ea:	60a3      	str	r3, [r4, #8]
    b3ec:	dcc0      	bgt.n	b370 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x58>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    b3ee:	6864      	ldr	r4, [r4, #4]
    b3f0:	2c00      	cmp	r4, #0
    b3f2:	bfb8      	it	lt
    b3f4:	341f      	addlt	r4, #31
    b3f6:	1164      	asrs	r4, r4, #5
    b3f8:	20ff      	movs	r0, #255	; 0xff
    b3fa:	f7ff fe5b 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b3fe:	2000      	movs	r0, #0
    b400:	f7ff fe58 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b404:	2000      	movs	r0, #0
    b406:	f7ff fe55 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b40a:	3c01      	subs	r4, #1
    b40c:	2000      	movs	r0, #0
    b40e:	f7ff fe51 	bl	b0b4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    b412:	1c63      	adds	r3, r4, #1
    b414:	d1f0      	bne.n	b3f8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe0>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    b416:	f8da 0018 	ldr.w	r0, [sl, #24]
    b41a:	b150      	cbz	r0, b432 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11a>
    b41c:	6803      	ldr	r3, [r0, #0]
    b41e:	4a0a      	ldr	r2, [pc, #40]	; (b448 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x130>)
    b420:	685b      	ldr	r3, [r3, #4]
    b422:	4293      	cmp	r3, r2
    b424:	d108      	bne.n	b438 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x120>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    b426:	6842      	ldr	r2, [r0, #4]
    b428:	7b01      	ldrb	r1, [r0, #12]
    b42a:	7813      	ldrb	r3, [r2, #0]
    b42c:	ea23 0301 	bic.w	r3, r3, r1
    b430:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    b432:	b001      	add	sp, #4
    b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b438:	b001      	add	sp, #4
    b43a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b43e:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    b440:	4798      	blx	r3
    b442:	e77b      	b.n	b33c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    b444:	00000475 	.word	0x00000475
    b448:	00000481 	.word	0x00000481

0000b44c <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    b450:	49dd      	ldr	r1, [pc, #884]	; (b7c8 <_GLOBAL__sub_I_ib_jul01_gp+0x37c>)
    b452:	4ede      	ldr	r6, [pc, #888]	; (b7cc <_GLOBAL__sub_I_ib_jul01_gp+0x380>)
    b454:	4ade      	ldr	r2, [pc, #888]	; (b7d0 <_GLOBAL__sub_I_ib_jul01_gp+0x384>)
    b456:	4bdf      	ldr	r3, [pc, #892]	; (b7d4 <_GLOBAL__sub_I_ib_jul01_gp+0x388>)
#ifndef PACIFIC_WAVES_H
#define PACIFIC_WAVES_H


CRGBPalette16 pacifica_palette_1 =
    b458:	48df      	ldr	r0, [pc, #892]	; (b7d8 <_GLOBAL__sub_I_ib_jul01_gp+0x38c>)
    b45a:	b09f      	sub	sp, #124	; 0x7c
    b45c:	2400      	movs	r4, #0
    b45e:	2501      	movs	r5, #1
    b460:	f04f 0bff 	mov.w	fp, #255	; 0xff
    b464:	270f      	movs	r7, #15
    b466:	f881 b1c2 	strb.w	fp, [r1, #450]	; 0x1c2
    b46a:	f881 71c3 	strb.w	r7, [r1, #451]	; 0x1c3
    b46e:	f881 51c4 	strb.w	r5, [r1, #452]	; 0x1c4
    b472:	f881 51c5 	strb.w	r5, [r1, #453]	; 0x1c5
    b476:	f881 41c7 	strb.w	r4, [r1, #455]	; 0x1c7
    b47a:	f881 5228 	strb.w	r5, [r1, #552]	; 0x228
    b47e:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    b482:	f881 422e 	strb.w	r4, [r1, #558]	; 0x22e
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    b486:	f04f 0105 	mov.w	r1, #5
    b48a:	f886 b1c2 	strb.w	fp, [r6, #450]	; 0x1c2
    b48e:	f886 71c3 	strb.w	r7, [r6, #451]	; 0x1c3
    b492:	f886 51c4 	strb.w	r5, [r6, #452]	; 0x1c4
    b496:	f886 51c5 	strb.w	r5, [r6, #453]	; 0x1c5
    b49a:	f886 5228 	strb.w	r5, [r6, #552]	; 0x228
    b49e:	f886 522a 	strb.w	r5, [r6, #554]	; 0x22a
    b4a2:	f886 41c7 	strb.w	r4, [r6, #455]	; 0x1c7
    b4a6:	f886 422e 	strb.w	r4, [r6, #558]	; 0x22e
    b4aa:	f882 b1c2 	strb.w	fp, [r2, #450]	; 0x1c2
    b4ae:	f882 71c3 	strb.w	r7, [r2, #451]	; 0x1c3
    b4b2:	f882 51c4 	strb.w	r5, [r2, #452]	; 0x1c4
    b4b6:	f882 51c5 	strb.w	r5, [r2, #453]	; 0x1c5
    b4ba:	f882 41c7 	strb.w	r4, [r2, #455]	; 0x1c7
    b4be:	f882 5228 	strb.w	r5, [r2, #552]	; 0x228
    b4c2:	f882 522a 	strb.w	r5, [r2, #554]	; 0x22a
    b4c6:	f882 422e 	strb.w	r4, [r2, #558]	; 0x22e
    b4ca:	f883 71c3 	strb.w	r7, [r3, #451]	; 0x1c3
    b4ce:	f883 b1c2 	strb.w	fp, [r3, #450]	; 0x1c2
    b4d2:	f883 51c4 	strb.w	r5, [r3, #452]	; 0x1c4
    b4d6:	f883 51c5 	strb.w	r5, [r3, #453]	; 0x1c5
    b4da:	f883 41c7 	strb.w	r4, [r3, #455]	; 0x1c7
    b4de:	f883 5228 	strb.w	r5, [r3, #552]	; 0x228
    b4e2:	f883 522a 	strb.w	r5, [r3, #554]	; 0x22a
    b4e6:	f883 422e 	strb.w	r4, [r3, #558]	; 0x22e
    b4ea:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    b4ee:	f04f 0107 	mov.w	r1, #7
    b4f2:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
    b4f6:	f04f 0104 	mov.w	r1, #4
    b4fa:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    b4fe:	f04f 0109 	mov.w	r1, #9
    b502:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    b506:	f04f 010b 	mov.w	r1, #11
    b50a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
    b50e:	f04f 010d 	mov.w	r1, #13
    b512:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
    b516:	f04f 0110 	mov.w	r1, #16
    b51a:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
    b51e:	f04f 0112 	mov.w	r1, #18
    b522:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
    b526:	f04f 0117 	mov.w	r1, #23
    b52a:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    b52e:	f04f 0119 	mov.w	r1, #25
    b532:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
    b536:	f04f 011c 	mov.w	r1, #28
    b53a:	f04f 0914 	mov.w	r9, #20
    b53e:	f04f 0803 	mov.w	r8, #3
    b542:	f04f 0a02 	mov.w	sl, #2
    b546:	f88d 105e 	strb.w	r1, [sp, #94]	; 0x5e
    b54a:	ae15      	add	r6, sp, #84	; 0x54
    b54c:	f04f 0126 	mov.w	r1, #38	; 0x26
    b550:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    b554:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    b558:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    b55c:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    b560:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    b564:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    b568:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    b56c:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    b570:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    b574:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    b578:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    b57c:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    b580:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    b584:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    b588:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    b58c:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    b590:	f88d 9052 	strb.w	r9, [sp, #82]	; 0x52
    b594:	f88d 8041 	strb.w	r8, [sp, #65]	; 0x41
    b598:	f88d 8045 	strb.w	r8, [sp, #69]	; 0x45
    b59c:	f88d a049 	strb.w	sl, [sp, #73]	; 0x49
    b5a0:	f88d a04d 	strb.w	sl, [sp, #77]	; 0x4d
    b5a4:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
    b5a8:	9604      	str	r6, [sp, #16]
    b5aa:	ae14      	add	r6, sp, #80	; 0x50
    b5ac:	9603      	str	r6, [sp, #12]
    b5ae:	ae13      	add	r6, sp, #76	; 0x4c
    b5b0:	9602      	str	r6, [sp, #8]
    b5b2:	ae12      	add	r6, sp, #72	; 0x48
    b5b4:	9601      	str	r6, [sp, #4]
    b5b6:	ae11      	add	r6, sp, #68	; 0x44
    b5b8:	9600      	str	r6, [sp, #0]
    b5ba:	f04f 0631 	mov.w	r6, #49	; 0x31
    b5be:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    b5c2:	f04f 0646 	mov.w	r6, #70	; 0x46
    b5c6:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    b5ca:	f04f 0655 	mov.w	r6, #85	; 0x55
    b5ce:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
    b5d2:	f04f 064b 	mov.w	r6, #75	; 0x4b
    b5d6:	f88d 6072 	strb.w	r6, [sp, #114]	; 0x72
    b5da:	f04f 0650 	mov.w	r6, #80	; 0x50
    b5de:	f88d 6076 	strb.w	r6, [sp, #118]	; 0x76
    b5e2:	ae1d      	add	r6, sp, #116	; 0x74
    b5e4:	960c      	str	r6, [sp, #48]	; 0x30
    b5e6:	ae1c      	add	r6, sp, #112	; 0x70
    b5e8:	960b      	str	r6, [sp, #44]	; 0x2c
    b5ea:	ae1b      	add	r6, sp, #108	; 0x6c
    b5ec:	960a      	str	r6, [sp, #40]	; 0x28
    b5ee:	ae1a      	add	r6, sp, #104	; 0x68
    b5f0:	9609      	str	r6, [sp, #36]	; 0x24
    b5f2:	ae19      	add	r6, sp, #100	; 0x64
    b5f4:	9608      	str	r6, [sp, #32]
    b5f6:	ae18      	add	r6, sp, #96	; 0x60
    b5f8:	9607      	str	r6, [sp, #28]
    b5fa:	ae17      	add	r6, sp, #92	; 0x5c
    b5fc:	ab10      	add	r3, sp, #64	; 0x40
    b5fe:	aa0f      	add	r2, sp, #60	; 0x3c
    b600:	a90e      	add	r1, sp, #56	; 0x38
    b602:	273b      	movs	r7, #59	; 0x3b
    b604:	f04f 0c28 	mov.w	ip, #40	; 0x28
    b608:	f04f 0eaa 	mov.w	lr, #170	; 0xaa
    b60c:	9606      	str	r6, [sp, #24]
    b60e:	ae16      	add	r6, sp, #88	; 0x58
    b610:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    b614:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    b618:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    b61c:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    b620:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    b624:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    b628:	f88d 9070 	strb.w	r9, [sp, #112]	; 0x70
    b62c:	f88d 706a 	strb.w	r7, [sp, #106]	; 0x6a
    b630:	f88d c074 	strb.w	ip, [sp, #116]	; 0x74
    b634:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
    b638:	9605      	str	r6, [sp, #20]
    b63a:	f7f5 f9bb 	bl	9b4 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    b63e:	f04f 0307 	mov.w	r3, #7
    b642:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    b646:	f04f 0305 	mov.w	r3, #5
    b64a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    b64e:	f04f 0304 	mov.w	r3, #4
    b652:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    b656:	f04f 0309 	mov.w	r3, #9
    b65a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    b65e:	f04f 030b 	mov.w	r3, #11
    b662:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    b666:	f04f 030d 	mov.w	r3, #13
    b66a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    b66e:	f04f 0310 	mov.w	r3, #16
    b672:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    b676:	f04f 0312 	mov.w	r3, #18
    b67a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    b67e:	f04f 0317 	mov.w	r3, #23
    b682:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b686:	f04f 0319 	mov.w	r3, #25
    b68a:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    b68e:	f04f 0226 	mov.w	r2, #38	; 0x26
    b692:	f04f 031c 	mov.w	r3, #28
    b696:	f04f 0631 	mov.w	r6, #49	; 0x31
    b69a:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    b69e:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    b6a2:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    b6a6:	f88d 8041 	strb.w	r8, [sp, #65]	; 0x41
    b6aa:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    b6ae:	f88d 8045 	strb.w	r8, [sp, #69]	; 0x45
    b6b2:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    b6b6:	f88d a049 	strb.w	sl, [sp, #73]	; 0x49
    b6ba:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    b6be:	f88d a04d 	strb.w	sl, [sp, #77]	; 0x4d
    b6c2:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    b6c6:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    b6ca:	f88d 9052 	strb.w	r9, [sp, #82]	; 0x52
    b6ce:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    b6d2:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    b6d6:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    b6da:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    b6de:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    b6e2:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    b6e6:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    b6ea:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    b6ee:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    b6f2:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
    b6f6:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    b6fa:	f04f 0646 	mov.w	r6, #70	; 0x46
    b6fe:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    b702:	f04f 0619 	mov.w	r6, #25
    b706:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x14554B, 0x28AA50 };
CRGBPalette16 pacifica_palette_2 =
    b70a:	ae1d      	add	r6, sp, #116	; 0x74
    b70c:	960c      	str	r6, [sp, #48]	; 0x30
    b70e:	ae1c      	add	r6, sp, #112	; 0x70
    b710:	960b      	str	r6, [sp, #44]	; 0x2c
    b712:	ae1b      	add	r6, sp, #108	; 0x6c
    b714:	960a      	str	r6, [sp, #40]	; 0x28
    b716:	ae1a      	add	r6, sp, #104	; 0x68
    b718:	9609      	str	r6, [sp, #36]	; 0x24
    b71a:	ae19      	add	r6, sp, #100	; 0x64
    b71c:	a914      	add	r1, sp, #80	; 0x50
    b71e:	9608      	str	r6, [sp, #32]
    b720:	ae18      	add	r6, sp, #96	; 0x60
    b722:	9103      	str	r1, [sp, #12]
    b724:	9607      	str	r6, [sp, #28]
    b726:	a913      	add	r1, sp, #76	; 0x4c
    b728:	ae17      	add	r6, sp, #92	; 0x5c
    b72a:	9102      	str	r1, [sp, #8]
    b72c:	9606      	str	r6, [sp, #24]
    b72e:	a912      	add	r1, sp, #72	; 0x48
    b730:	ae16      	add	r6, sp, #88	; 0x58
    b732:	9101      	str	r1, [sp, #4]
    b734:	9605      	str	r6, [sp, #20]
    b736:	a911      	add	r1, sp, #68	; 0x44
    b738:	ae15      	add	r6, sp, #84	; 0x54
    b73a:	ab10      	add	r3, sp, #64	; 0x40
    b73c:	aa0f      	add	r2, sp, #60	; 0x3c
    b73e:	9100      	str	r1, [sp, #0]
    b740:	255f      	movs	r5, #95	; 0x5f
    b742:	a90e      	add	r1, sp, #56	; 0x38
    b744:	f04f 0c52 	mov.w	ip, #82	; 0x52
    b748:	f04f 0ebe 	mov.w	lr, #190	; 0xbe
    b74c:	9604      	str	r6, [sp, #16]
    b74e:	4823      	ldr	r0, [pc, #140]	; (b7dc <_GLOBAL__sub_I_ib_jul01_gp+0x390>)
    b750:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    b754:	f04f 060c 	mov.w	r6, #12
    b758:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    b75c:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    b760:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    b764:	f88d 706a 	strb.w	r7, [sp, #106]	; 0x6a
    b768:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    b76c:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    b770:	f88d 6070 	strb.w	r6, [sp, #112]	; 0x70
    b774:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
    b778:	f88d 5076 	strb.w	r5, [sp, #118]	; 0x76
    b77c:	f88d c072 	strb.w	ip, [sp, #114]	; 0x72
    b780:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
    b784:	f7f5 f916 	bl	9b4 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    b788:	200e      	movs	r0, #14
    b78a:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    b78e:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
    b792:	f04f 0305 	mov.w	r3, #5
    b796:	f04f 0006 	mov.w	r0, #6
    b79a:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    b79e:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    b7a2:	f04f 0309 	mov.w	r3, #9
    b7a6:	f04f 001a 	mov.w	r0, #26
    b7aa:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    b7ae:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    b7b2:	f04f 030b 	mov.w	r3, #11
    b7b6:	f04f 0027 	mov.w	r0, #39	; 0x27
    b7ba:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    b7be:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    b7c2:	f04f 030c 	mov.w	r3, #12
    b7c6:	e00b      	b.n	b7e0 <_GLOBAL__sub_I_ib_jul01_gp+0x394>
    b7c8:	1fff8cb8 	.word	0x1fff8cb8
    b7cc:	1fffa700 	.word	0x1fffa700
    b7d0:	1fff962c 	.word	0x1fff962c
    b7d4:	1fff9ea0 	.word	0x1fff9ea0
    b7d8:	1fff9584 	.word	0x1fff9584
    b7dc:	1fff95b4 	.word	0x1fff95b4
    b7e0:	f04f 002d 	mov.w	r0, #45	; 0x2d
    b7e4:	2520      	movs	r5, #32
    b7e6:	2640      	movs	r6, #64	; 0x40
    b7e8:	2708      	movs	r7, #8
    b7ea:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    b7ee:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    b7f2:	f04f 0c33 	mov.w	ip, #51	; 0x33
    b7f6:	f04f 0e39 	mov.w	lr, #57	; 0x39
    b7fa:	f04f 0310 	mov.w	r3, #16
    b7fe:	f04f 0050 	mov.w	r0, #80	; 0x50
    b802:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    b806:	f88d a039 	strb.w	sl, [sp, #57]	; 0x39
    b80a:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    b80e:	f88d 803d 	strb.w	r8, [sp, #61]	; 0x3d
    b812:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    b816:	f88d 9042 	strb.w	r9, [sp, #66]	; 0x42
    b81a:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    b81e:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    b822:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    b826:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    b82a:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    b82e:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    b832:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    b836:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    b83a:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    b83e:	f88d 9061 	strb.w	r9, [sp, #97]	; 0x61
    b842:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
    b846:	f88d 7049 	strb.w	r7, [sp, #73]	; 0x49
    b84a:	f88d c056 	strb.w	ip, [sp, #86]	; 0x56
    b84e:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    b852:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
    b856:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
    b85a:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    b85e:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    b862:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    b866:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    b86a:	f04f 0410 	mov.w	r4, #16
    b86e:	f04f 0870 	mov.w	r8, #112	; 0x70
    b872:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x0C5F52, 0x19BE5F };
CRGBPalette16 pacifica_palette_3 =
    b876:	ac1d      	add	r4, sp, #116	; 0x74
    b878:	940c      	str	r4, [sp, #48]	; 0x30
    b87a:	eb0d 0408 	add.w	r4, sp, r8
    b87e:	940b      	str	r4, [sp, #44]	; 0x2c
    b880:	ac1b      	add	r4, sp, #108	; 0x6c
    b882:	940a      	str	r4, [sp, #40]	; 0x28
    b884:	ac1a      	add	r4, sp, #104	; 0x68
    b886:	2760      	movs	r7, #96	; 0x60
    b888:	a814      	add	r0, sp, #80	; 0x50
    b88a:	9409      	str	r4, [sp, #36]	; 0x24
    b88c:	ac19      	add	r4, sp, #100	; 0x64
    b88e:	9003      	str	r0, [sp, #12]
    b890:	9408      	str	r4, [sp, #32]
    b892:	a813      	add	r0, sp, #76	; 0x4c
    b894:	eb0d 0407 	add.w	r4, sp, r7
    b898:	9002      	str	r0, [sp, #8]
    b89a:	9407      	str	r4, [sp, #28]
    b89c:	a812      	add	r0, sp, #72	; 0x48
    b89e:	ac16      	add	r4, sp, #88	; 0x58
    b8a0:	9001      	str	r0, [sp, #4]
    b8a2:	9405      	str	r4, [sp, #20]
    b8a4:	a811      	add	r0, sp, #68	; 0x44
    b8a6:	ac17      	add	r4, sp, #92	; 0x5c
    b8a8:	9000      	str	r0, [sp, #0]
    b8aa:	f04f 0c80 	mov.w	ip, #128	; 0x80
    b8ae:	f04f 0ebf 	mov.w	lr, #191	; 0xbf
    b8b2:	9406      	str	r4, [sp, #24]
    b8b4:	eb0d 0306 	add.w	r3, sp, r6
    b8b8:	aa0f      	add	r2, sp, #60	; 0x3c
    b8ba:	a90e      	add	r1, sp, #56	; 0x38
    b8bc:	f04f 0918 	mov.w	r9, #24
    b8c0:	f04f 0a1c 	mov.w	sl, #28
    b8c4:	ac15      	add	r4, sp, #84	; 0x54
    b8c6:	480e      	ldr	r0, [pc, #56]	; (b900 <_GLOBAL__sub_I_ib_jul01_gp+0x4b4>)
    b8c8:	f88d b076 	strb.w	fp, [sp, #118]	; 0x76
    b8cc:	f88d a069 	strb.w	sl, [sp, #105]	; 0x69
    b8d0:	f88d 506d 	strb.w	r5, [sp, #109]	; 0x6d
    b8d4:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
    b8d8:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
    b8dc:	9404      	str	r4, [sp, #16]
    b8de:	f88d 9065 	strb.w	r9, [sp, #101]	; 0x65
    b8e2:	f88d 7066 	strb.w	r7, [sp, #102]	; 0x66
    b8e6:	f88d 7075 	strb.w	r7, [sp, #117]	; 0x75
    b8ea:	f88d 806a 	strb.w	r8, [sp, #106]	; 0x6a
    b8ee:	f88d c06e 	strb.w	ip, [sp, #110]	; 0x6e
    b8f2:	f88d e072 	strb.w	lr, [sp, #114]	; 0x72
    b8f6:	f7f5 f85d 	bl	9b4 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    b8fa:	b01f      	add	sp, #124	; 0x7c
    b8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b900:	1fff95e4 	.word	0x1fff95e4

0000b904 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    b904:	2900      	cmp	r1, #0
    b906:	dd0b      	ble.n	b920 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    b908:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b90c:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    b90e:	7813      	ldrb	r3, [r2, #0]
    b910:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    b912:	7853      	ldrb	r3, [r2, #1]
    b914:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    b916:	7893      	ldrb	r3, [r2, #2]
    b918:	7083      	strb	r3, [r0, #2]
    b91a:	3003      	adds	r0, #3
    b91c:	4288      	cmp	r0, r1
    b91e:	d1f6      	bne.n	b90e <fill_solid(CRGB*, int, CRGB const&)+0xa>
    b920:	4770      	bx	lr
    b922:	bf00      	nop

0000b924 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    b924:	b570      	push	{r4, r5, r6, lr}
    b926:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    b928:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    b92a:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    b92c:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    b92e:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    b932:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    b936:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    b93a:	dd10      	ble.n	b95e <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    b93c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b940:	461e      	mov	r6, r3
    b942:	4604      	mov	r4, r0
    b944:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    b946:	4621      	mov	r1, r4
    b948:	a801      	add	r0, sp, #4
    b94a:	f000 fafb 	bl	bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    b94e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b952:	3403      	adds	r4, #3
    b954:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    b956:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    b958:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    b95c:	d1f3      	bne.n	b946 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    b95e:	b002      	add	sp, #8
    b960:	bd70      	pop	{r4, r5, r6, pc}
    b962:	bf00      	nop

0000b964 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    b968:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    b96a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    b96c:	d352      	bcc.n	ba14 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    b96e:	f896 e000 	ldrb.w	lr, [r6]
    b972:	7815      	ldrb	r5, [r2, #0]
    b974:	7877      	ldrb	r7, [r6, #1]
    b976:	f896 8002 	ldrb.w	r8, [r6, #2]
    b97a:	7854      	ldrb	r4, [r2, #1]
    b97c:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    b980:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    b984:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    b988:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    b98c:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    b990:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    b994:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    b998:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    b99c:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    b99e:	b3b2      	cbz	r2, ba0e <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    b9a0:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    b9a4:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    b9a8:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    b9ac:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    b9b0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    b9b4:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    b9b8:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    b9ba:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    b9be:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    b9c2:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    b9c6:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    b9ca:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    b9ce:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    b9d2:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    b9d6:	d818      	bhi.n	ba0a <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    b9d8:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    b9dc:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    b9de:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    b9e0:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    b9e2:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    b9e6:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    b9ea:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    b9ee:	4475      	add	r5, lr
        g88 += gdelta87;
    b9f0:	4454      	add	r4, sl
        b88 += bdelta87;
    b9f2:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    b9f4:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    b9f6:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    b9fa:	b2ad      	uxth	r5, r5
        g = rhs.g;
    b9fc:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    ba00:	b2a4      	uxth	r4, r4
        b = rhs.b;
    ba02:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    ba06:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    ba08:	d2e6      	bcs.n	b9d8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba0e:	f04f 0b01 	mov.w	fp, #1
    ba12:	e7c7      	b.n	b9a4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    ba14:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    ba16:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    ba18:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    ba1c:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    ba1e:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    ba20:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    ba24:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    ba28:	7015      	strb	r5, [r2, #0]
    ba2a:	4619      	mov	r1, r3
    ba2c:	f886 e000 	strb.w	lr, [r6]
    ba30:	464b      	mov	r3, r9
        g = rhs.g;
    ba32:	7054      	strb	r4, [r2, #1]
    ba34:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    ba36:	f882 c002 	strb.w	ip, [r2, #2]
    ba3a:	f886 8002 	strb.w	r8, [r6, #2]
    ba3e:	e79f      	b.n	b980 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

0000ba40 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    ba40:	b309      	cbz	r1, ba86 <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    ba42:	b430      	push	{r4, r5}
    ba44:	1e4d      	subs	r5, r1, #1
    ba46:	b2ad      	uxth	r5, r5
    ba48:	43d2      	mvns	r2, r2
    ba4a:	3501      	adds	r5, #1
    ba4c:	b2d2      	uxtb	r2, r2
    ba4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    ba52:	4405      	add	r5, r0
    ba54:	3201      	adds	r2, #1
    ba56:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    ba58:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    ba5c:	fb02 f303 	mul.w	r3, r2, r3
    ba60:	121b      	asrs	r3, r3, #8
    ba62:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    ba66:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    ba68:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    ba6a:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    ba6e:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    ba72:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    ba74:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    ba76:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    ba78:	7083      	strb	r3, [r0, #2]
    ba7a:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    ba7c:	4285      	cmp	r5, r0
    ba7e:	f104 0403 	add.w	r4, r4, #3
    ba82:	d1e9      	bne.n	ba58 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    ba84:	bc30      	pop	{r4, r5}
    ba86:	4770      	bx	lr

0000ba88 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    ba88:	f7ff bfda 	b.w	ba40 <fade_raw(CRGB*, unsigned short, unsigned char)>

0000ba8c <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    ba8c:	b322      	cbz	r2, bad8 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    ba8e:	2aff      	cmp	r2, #255	; 0xff
    ba90:	d023      	beq.n	bada <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    ba92:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    ba94:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    ba96:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    ba98:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    ba9a:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    ba9c:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    ba9e:	43d2      	mvns	r2, r2
    baa0:	fb06 7605 	mla	r6, r6, r5, r7
    baa4:	b2d2      	uxtb	r2, r2
    baa6:	fb04 6402 	mla	r4, r4, r2, r6
    baaa:	f3c4 2407 	ubfx	r4, r4, #8, #8
    baae:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    bab0:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    bab2:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    bab4:	191f      	adds	r7, r3, r4
    bab6:	fb04 7405 	mla	r4, r4, r5, r7
    baba:	fb03 4302 	mla	r3, r3, r2, r4
    babe:	f3c3 2307 	ubfx	r3, r3, #8, #8
    bac2:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    bac4:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    bac6:	18f1      	adds	r1, r6, r3
    bac8:	fb03 1505 	mla	r5, r3, r5, r1
    bacc:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    bad0:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    bad2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    bad6:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    bad8:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    bada:	780b      	ldrb	r3, [r1, #0]
    badc:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    bade:	784b      	ldrb	r3, [r1, #1]
    bae0:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    bae2:	788b      	ldrb	r3, [r1, #2]
    bae4:	7083      	strb	r3, [r0, #2]
    bae6:	4770      	bx	lr

0000bae8 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    bae8:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    baea:	780d      	ldrb	r5, [r1, #0]
    baec:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    baee:	784d      	ldrb	r5, [r1, #1]
    baf0:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    baf2:	7889      	ldrb	r1, [r1, #2]
    baf4:	7081      	strb	r1, [r0, #2]
    baf6:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    baf8:	4611      	mov	r1, r2
    bafa:	461a      	mov	r2, r3
    bafc:	f7ff ffc6 	bl	ba8c <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    bb00:	4620      	mov	r0, r4
    bb02:	bd38      	pop	{r3, r4, r5, pc}

0000bb04 <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    bb04:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    bb08:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    bb0c:	3100      	adds	r1, #0
    bb0e:	bf18      	it	ne
    bb10:	2101      	movne	r1, #1
    bb12:	eb01 2123 	add.w	r1, r1, r3, asr #8
    bb16:	b2c9      	uxtb	r1, r1
    bb18:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    bb1a:	060a      	lsls	r2, r1, #24
    bb1c:	b2db      	uxtb	r3, r3
    bb1e:	d40e      	bmi.n	bb3e <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    bb20:	f001 0140 	and.w	r1, r1, #64	; 0x40
    bb24:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    bb28:	b919      	cbnz	r1, bb32 <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    bb2a:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    bb2c:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    bb2e:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    bb30:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    bb32:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    bb34:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    bb36:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    bb38:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    bb3a:	7082      	strb	r2, [r0, #2]
    bb3c:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    bb3e:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    bb40:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    bb42:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    bb44:	7042      	strb	r2, [r0, #1]
    bb46:	4770      	bx	lr

0000bb48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    bb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    bb4c:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    bb4e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    bb52:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    bb56:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    bb58:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    bb5c:	d000      	beq.n	bb60 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    bb5e:	b9e6      	cbnz	r6, bb9a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    bb60:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    bb62:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    bb64:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    bb66:	2bff      	cmp	r3, #255	; 0xff
    bb68:	d012      	beq.n	bb90 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d043      	beq.n	bbf6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    bb6e:	3301      	adds	r3, #1
    bb70:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    bb72:	b11c      	cbz	r4, bb7c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    bb74:	fb03 4404 	mla	r4, r3, r4, r4
    bb78:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    bb7c:	b119      	cbz	r1, bb86 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    bb7e:	fb03 1101 	mla	r1, r3, r1, r1
    bb82:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    bb86:	b11a      	cbz	r2, bb90 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    bb88:	fb03 2202 	mla	r2, r3, r2, r2
    bb8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    bb90:	7004      	strb	r4, [r0, #0]
    bb92:	7041      	strb	r1, [r0, #1]
    bb94:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    bb96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    bb9a:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    bb9c:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    bb9e:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    bba2:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    bba4:	d000      	beq.n	bba8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    bba6:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    bba8:	0112      	lsls	r2, r2, #4
    bbaa:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    bbae:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    bbb0:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    bbb4:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    bbb8:	f891 8002 	ldrb.w	r8, [r1, #2]
    bbbc:	fb04 f606 	mul.w	r6, r4, r6
    bbc0:	1c51      	adds	r1, r2, #1
    bbc2:	fb04 f509 	mul.w	r5, r4, r9
    bbc6:	fb04 f407 	mul.w	r4, r4, r7
    bbca:	f3c4 2407 	ubfx	r4, r4, #8, #8
    bbce:	f3c6 2707 	ubfx	r7, r6, #8, #8
    bbd2:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    bbd6:	fb01 f60c 	mul.w	r6, r1, ip
    bbda:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    bbde:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    bbe2:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    bbe6:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    bbea:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    bbee:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    bbf0:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    bbf2:	b2d2      	uxtb	r2, r2
    bbf4:	e7b7      	b.n	bb66 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    bbf6:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    bbf8:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    bbfa:	461c      	mov	r4, r3
    bbfc:	7004      	strb	r4, [r0, #0]
    bbfe:	7041      	strb	r1, [r0, #1]
    bc00:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    bc02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bc06:	bf00      	nop

0000bc08 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    bc08:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc0a:	3901      	subs	r1, #1
    bc0c:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    bc0e:	2500      	movs	r5, #0
    bc10:	302f      	adds	r0, #47	; 0x2f
    bc12:	e001      	b.n	bc18 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    bc14:	4284      	cmp	r4, r0
    bc16:	d01e      	beq.n	bc56 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    bc18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    bc1c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    bc20:	42b3      	cmp	r3, r6
    bc22:	d0f7      	beq.n	bc14 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    bc24:	f103 0701 	add.w	r7, r3, #1
    bc28:	d204      	bcs.n	bc34 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    bc2a:	b2fb      	uxtb	r3, r7
    bc2c:	7023      	strb	r3, [r4, #0]
    bc2e:	3501      	adds	r5, #1
    bc30:	780e      	ldrb	r6, [r1, #0]
    bc32:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    bc34:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    bc36:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    bc38:	b2ff      	uxtb	r7, r7
    bc3a:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    bc3e:	d208      	bcs.n	bc52 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    bc40:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    bc42:	780e      	ldrb	r6, [r1, #0]
    bc44:	42be      	cmp	r6, r7
    bc46:	bf38      	it	cc
    bc48:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    bc4a:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    bc4e:	bf38      	it	cc
    bc50:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    bc52:	4295      	cmp	r5, r2
    bc54:	d3de      	bcc.n	bc14 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    bc56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bc58 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    bc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    bc5a:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    bc5c:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    bc5e:	4604      	mov	r4, r0
    bc60:	bfcc      	ite	gt
    bc62:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    bc66:	2500      	movle	r5, #0
    bc68:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    bc6a:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    bc6c:	bfd8      	it	le
    bc6e:	4616      	movle	r6, r2

	pLed->init();
    bc70:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    bc72:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    bc74:	6823      	ldr	r3, [r4, #0]
    bc76:	6062      	str	r2, [r4, #4]
    bc78:	695b      	ldr	r3, [r3, #20]
    bc7a:	4a0a      	ldr	r2, [pc, #40]	; (bca4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    bc7c:	6166      	str	r6, [r4, #20]
    bc7e:	4293      	cmp	r3, r2
    bc80:	d101      	bne.n	bc86 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    bc82:	4620      	mov	r0, r4
    bc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    bc86:	4620      	mov	r0, r4
    bc88:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    bc8a:	2800      	cmp	r0, #0
    bc8c:	d0f9      	beq.n	bc82 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    bc8e:	4a06      	ldr	r2, [pc, #24]	; (bca8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    bc90:	4b06      	ldr	r3, [pc, #24]	; (bcac <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    bc92:	6851      	ldr	r1, [r2, #4]
    bc94:	fb93 f0f0 	sdiv	r0, r3, r0
    bc98:	4288      	cmp	r0, r1
    bc9a:	bf38      	it	cc
    bc9c:	4608      	movcc	r0, r1
    bc9e:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    bca0:	4620      	mov	r0, r4
    bca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bca4:	00000471 	.word	0x00000471
    bca8:	1fffb124 	.word	0x1fffb124
    bcac:	000f4240 	.word	0x000f4240

0000bcb0 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    bcb0:	4b08      	ldr	r3, [pc, #32]	; (bcd4 <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    bcb2:	b510      	push	{r4, lr}
    bcb4:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    bcb6:	b15c      	cbz	r4, bcd0 <CFastLED::clearData()+0x20>
    bcb8:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    bcba:	2100      	movs	r1, #0
    bcbc:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    bcbe:	b123      	cbz	r3, bcca <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    bcc0:	6962      	ldr	r2, [r4, #20]
    bcc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    bcc6:	f003 fc31 	bl	f52c <memset>
    bcca:	68a4      	ldr	r4, [r4, #8]
    bccc:	2c00      	cmp	r4, #0
    bcce:	d1f3      	bne.n	bcb8 <CFastLED::clearData()+0x8>
    bcd0:	bd10      	pop	{r4, pc}
    bcd2:	bf00      	nop
    bcd4:	1fffb134 	.word	0x1fffb134

0000bcd8 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    bcd8:	4b07      	ldr	r3, [pc, #28]	; (bcf8 <CFastLED::setCorrection(CRGB const&)+0x20>)
    bcda:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    bcdc:	b153      	cbz	r3, bcf4 <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    bcde:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    bce0:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    bce2:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    bce4:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    bce6:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    bce8:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    bcea:	735a      	strb	r2, [r3, #13]
    bcec:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    bcee:	2b00      	cmp	r3, #0
    bcf0:	d1f6      	bne.n	bce0 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    bcf2:	bc10      	pop	{r4}
    bcf4:	4770      	bx	lr
    bcf6:	bf00      	nop
    bcf8:	1fffb134 	.word	0x1fffb134

0000bcfc <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    bcfc:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    bcfe:	4c10      	ldr	r4, [pc, #64]	; (bd40 <CFastLED::countFPS(int)+0x44>)
    bd00:	6825      	ldr	r5, [r4, #0]
    bd02:	1c6e      	adds	r6, r5, #1
    bd04:	428d      	cmp	r5, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    bd06:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    bd08:	6026      	str	r6, [r4, #0]
    bd0a:	db16      	blt.n	bd3a <CFastLED::countFPS(int)+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    bd0c:	4d0d      	ldr	r5, [pc, #52]	; (bd44 <CFastLED::countFPS(int)+0x48>)
      uint32_t now = millis();
      now -= lastframe;
    bd0e:	490e      	ldr	r1, [pc, #56]	; (bd48 <CFastLED::countFPS(int)+0x4c>)
    bd10:	682b      	ldr	r3, [r5, #0]
    bd12:	9300      	str	r3, [sp, #0]
	return ret;
    bd14:	9a00      	ldr	r2, [sp, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    bd16:	682d      	ldr	r5, [r5, #0]
    bd18:	680b      	ldr	r3, [r1, #0]
    bd1a:	9501      	str	r5, [sp, #4]
	return ret;
    bd1c:	9d01      	ldr	r5, [sp, #4]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    lastframe = millis();
    bd1e:	600d      	str	r5, [r1, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
    bd20:	1ad3      	subs	r3, r2, r3
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    bd22:	f04f 0100 	mov.w	r1, #0
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    bd26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    bd2a:	bf08      	it	eq
    bd2c:	2301      	moveq	r3, #1
      }
      m_nFPS = (br * 1000) / now;
    bd2e:	fb02 f206 	mul.w	r2, r2, r6
    br = 0;
    bd32:	6021      	str	r1, [r4, #0]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    bd34:	fbb2 f3f3 	udiv	r3, r2, r3
    bd38:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    bd3a:	b003      	add	sp, #12
    bd3c:	bc70      	pop	{r4, r5, r6}
    bd3e:	4770      	bx	lr
    bd40:	1fffb138 	.word	0x1fffb138
    bd44:	1fffb19c 	.word	0x1fffb19c
    bd48:	1fffb140 	.word	0x1fffb140

0000bd4c <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    bd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd50:	6843      	ldr	r3, [r0, #4]
    bd52:	4c2d      	ldr	r4, [pc, #180]	; (be08 <CFastLED::show(unsigned char)+0xbc>)
    bd54:	b083      	sub	sp, #12
    bd56:	4606      	mov	r6, r0
    bd58:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    bd5a:	2b00      	cmp	r3, #0
    bd5c:	d14b      	bne.n	bdf6 <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    bd5e:	f000 fe6b 	bl	ca38 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    bd62:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    bd64:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    bd66:	b11b      	cbz	r3, bd70 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    bd68:	4648      	mov	r0, r9
    bd6a:	68b1      	ldr	r1, [r6, #8]
    bd6c:	4798      	blx	r3
    bd6e:	4681      	mov	r9, r0
    bd70:	4b26      	ldr	r3, [pc, #152]	; (be0c <CFastLED::show(unsigned char)+0xc0>)
    bd72:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    bd74:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    bd76:	2c00      	cmp	r4, #0
    bd78:	d036      	beq.n	bde8 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    bd7a:	8873      	ldrh	r3, [r6, #2]
    bd7c:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    bd7e:	6861      	ldr	r1, [r4, #4]
    bd80:	6962      	ldr	r2, [r4, #20]
    bd82:	2b63      	cmp	r3, #99	; 0x63
    bd84:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    bd86:	bf98      	it	ls
    bd88:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    bd8a:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    bd8e:	f88d 5004 	strb.w	r5, [sp, #4]
    bd92:	f88d 5005 	strb.w	r5, [sp, #5]
    bd96:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    bd9a:	f1b9 0f00 	cmp.w	r9, #0
    bd9e:	d01c      	beq.n	bdda <CFastLED::show(unsigned char)+0x8e>
    bda0:	f104 030b 	add.w	r3, r4, #11
    bda4:	f10d 0e04 	add.w	lr, sp, #4
    bda8:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    bdac:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    bdb0:	f1bb 0f00 	cmp.w	fp, #0
    bdb4:	d00d      	beq.n	bdd2 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    bdb6:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    bdba:	f10a 0001 	add.w	r0, sl, #1
    bdbe:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    bdc2:	f1ba 0f00 	cmp.w	sl, #0
    bdc6:	d004      	beq.n	bdd2 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    bdc8:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    bdcc:	0c00      	lsrs	r0, r0, #16
    bdce:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    bdd2:	4563      	cmp	r3, ip
    bdd4:	f10e 0e01 	add.w	lr, lr, #1
    bdd8:	d1e8      	bne.n	bdac <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    bdda:	4620      	mov	r0, r4
    bddc:	ab01      	add	r3, sp, #4
    bdde:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    bde0:	74a7      	strb	r7, [r4, #18]
    bde2:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    bde4:	2c00      	cmp	r4, #0
    bde6:	d1c8      	bne.n	bd7a <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    bde8:	4630      	mov	r0, r6
    bdea:	2119      	movs	r1, #25
    bdec:	f7ff ff86 	bl	bcfc <CFastLED::countFPS(int)>
}
    bdf0:	b003      	add	sp, #12
    bdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    bdf6:	f000 fe1f 	bl	ca38 <micros>
    bdfa:	6822      	ldr	r2, [r4, #0]
    bdfc:	6873      	ldr	r3, [r6, #4]
    bdfe:	1a80      	subs	r0, r0, r2
    be00:	4298      	cmp	r0, r3
    be02:	d3aa      	bcc.n	bd5a <CFastLED::show(unsigned char)+0xe>
    be04:	e7ab      	b.n	bd5e <CFastLED::show(unsigned char)+0x12>
    be06:	bf00      	nop
    be08:	1fffb13c 	.word	0x1fffb13c
    be0c:	1fffb134 	.word	0x1fffb134

0000be10 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    be10:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    be12:	4d0a      	ldr	r5, [pc, #40]	; (be3c <CFastLED::delay(unsigned long)+0x2c>)
    be14:	b083      	sub	sp, #12
    be16:	682b      	ldr	r3, [r5, #0]
    be18:	9300      	str	r3, [sp, #0]
	return ret;
    be1a:	9f00      	ldr	r7, [sp, #0]
    be1c:	4604      	mov	r4, r0
    be1e:	460e      	mov	r6, r1
    be20:	7821      	ldrb	r1, [r4, #0]
    be22:	4620      	mov	r0, r4
    be24:	f7ff ff92 	bl	bd4c <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    be28:	f002 f95c 	bl	e0e4 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    be2c:	682b      	ldr	r3, [r5, #0]
    be2e:	9301      	str	r3, [sp, #4]
	return ret;
    be30:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    be32:	1bdb      	subs	r3, r3, r7
    be34:	42b3      	cmp	r3, r6
    be36:	d3f3      	bcc.n	be20 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    be38:	b003      	add	sp, #12
    be3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be3c:	1fffb19c 	.word	0x1fffb19c

0000be40 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be44:	6843      	ldr	r3, [r0, #4]
    be46:	4c2c      	ldr	r4, [pc, #176]	; (bef8 <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    be48:	b083      	sub	sp, #12
    be4a:	4606      	mov	r6, r0
    be4c:	468a      	mov	sl, r1
    be4e:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    be50:	2b00      	cmp	r3, #0
    be52:	d149      	bne.n	bee8 <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    be54:	f000 fdf0 	bl	ca38 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    be58:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    be5a:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    be5c:	b11b      	cbz	r3, be66 <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    be5e:	4648      	mov	r0, r9
    be60:	68b1      	ldr	r1, [r6, #8]
    be62:	4798      	blx	r3
    be64:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    be66:	4b25      	ldr	r3, [pc, #148]	; (befc <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    be68:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    be6a:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    be6c:	2c00      	cmp	r4, #0
    be6e:	d034      	beq.n	beda <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    be70:	8873      	ldrh	r3, [r6, #2]
    be72:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    be74:	6962      	ldr	r2, [r4, #20]
    be76:	2b63      	cmp	r3, #99	; 0x63
    be78:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    be7a:	bf98      	it	ls
    be7c:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    be7e:	f8d3 8000 	ldr.w	r8, [r3]
    be82:	f88d 5004 	strb.w	r5, [sp, #4]
    be86:	f88d 5005 	strb.w	r5, [sp, #5]
    be8a:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    be8e:	f1b9 0f00 	cmp.w	r9, #0
    be92:	d01a      	beq.n	beca <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    be94:	f104 030b 	add.w	r3, r4, #11
    be98:	a801      	add	r0, sp, #4
    be9a:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    be9e:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    bea2:	f1bb 0f00 	cmp.w	fp, #0
    bea6:	d00c      	beq.n	bec2 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    bea8:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    beac:	f10c 0101 	add.w	r1, ip, #1
    beb0:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    beb4:	f1bc 0f00 	cmp.w	ip, #0
    beb8:	d003      	beq.n	bec2 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    beba:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    bebe:	0c09      	lsrs	r1, r1, #16
    bec0:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    bec2:	4573      	cmp	r3, lr
    bec4:	f100 0001 	add.w	r0, r0, #1
    bec8:	d1e9      	bne.n	be9e <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    beca:	4620      	mov	r0, r4
    becc:	ab01      	add	r3, sp, #4
    bece:	4651      	mov	r1, sl
    bed0:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    bed2:	74a7      	strb	r7, [r4, #18]
    bed4:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    bed6:	2c00      	cmp	r4, #0
    bed8:	d1ca      	bne.n	be70 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    beda:	4630      	mov	r0, r6
    bedc:	2119      	movs	r1, #25
    bede:	f7ff ff0d 	bl	bcfc <CFastLED::countFPS(int)>
}
    bee2:	b003      	add	sp, #12
    bee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    bee8:	f000 fda6 	bl	ca38 <micros>
    beec:	6822      	ldr	r2, [r4, #0]
    beee:	6873      	ldr	r3, [r6, #4]
    bef0:	1a80      	subs	r0, r0, r2
    bef2:	4298      	cmp	r0, r3
    bef4:	d3ac      	bcc.n	be50 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    bef6:	e7ad      	b.n	be54 <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    bef8:	1fffb13c 	.word	0x1fffb13c
    befc:	1fffb134 	.word	0x1fffb134

0000bf00 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    bf00:	b510      	push	{r4, lr}
    bf02:	4604      	mov	r4, r0
    bf04:	b082      	sub	sp, #8
	if(writeData) {
    bf06:	b151      	cbz	r1, bf1e <CFastLED::clear(bool)+0x1e>
    bf08:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    bf0a:	461a      	mov	r2, r3
    bf0c:	a901      	add	r1, sp, #4
    bf0e:	f88d 3004 	strb.w	r3, [sp, #4]
    bf12:	f88d 3005 	strb.w	r3, [sp, #5]
    bf16:	f88d 3006 	strb.w	r3, [sp, #6]
    bf1a:	f7ff ff91 	bl	be40 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    bf1e:	4620      	mov	r0, r4
    bf20:	f7ff fec6 	bl	bcb0 <CFastLED::clearData()>
}
    bf24:	b002      	add	sp, #8
    bf26:	bd10      	pop	{r4, pc}

0000bf28 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    bf28:	2000      	movs	r0, #0
    bf2a:	4770      	bx	lr

0000bf2c <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    bf2c:	4b04      	ldr	r3, [pc, #16]	; (bf40 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    bf2e:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    bf30:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    bf32:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    bf36:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    bf38:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    bf3a:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    bf3c:	60da      	str	r2, [r3, #12]
    bf3e:	4770      	bx	lr
    bf40:	1fffb124 	.word	0x1fffb124

0000bf44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    bf44:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    bf46:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    bf48:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    bf4a:	7882      	ldrb	r2, [r0, #2]
    bf4c:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    bf4e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    bf52:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    bf56:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    bf5a:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    bf5c:	0625      	lsls	r5, r4, #24
    bf5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    bf62:	d45f      	bmi.n	c024 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    bf64:	f004 0540 	and.w	r5, r4, #64	; 0x40
    bf68:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    bf6c:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    bf70:	2d00      	cmp	r5, #0
    bf72:	d146      	bne.n	c002 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    bf74:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    bf78:	2c00      	cmp	r4, #0
    bf7a:	d06c      	beq.n	c056 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    bf7c:	3355      	adds	r3, #85	; 0x55
    bf7e:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    bf80:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    bf82:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    bf84:	2eff      	cmp	r6, #255	; 0xff
    bf86:	d01c      	beq.n	bfc2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    bf88:	2e00      	cmp	r6, #0
    bf8a:	d079      	beq.n	c080 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    bf8c:	b11c      	cbz	r4, bf96 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    bf8e:	fb06 4404 	mla	r4, r6, r4, r4
    bf92:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    bf96:	b11d      	cbz	r5, bfa0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    bf98:	fb06 5505 	mla	r5, r6, r5, r5
    bf9c:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    bfa0:	b11b      	cbz	r3, bfaa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    bfa2:	fb06 3303 	mla	r3, r6, r3, r3
    bfa6:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    bfaa:	43f0      	mvns	r0, r6
    bfac:	b2c0      	uxtb	r0, r0
    bfae:	fb00 0000 	mla	r0, r0, r0, r0
    bfb2:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    bfb6:	4404      	add	r4, r0
            g += brightness_floor;
    bfb8:	4405      	add	r5, r0
            b += brightness_floor;
    bfba:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    bfbc:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    bfbe:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    bfc0:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    bfc2:	2aff      	cmp	r2, #255	; 0xff
    bfc4:	d018      	beq.n	bff8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    bfc6:	fb12 f002 	smulbb	r0, r2, r2
    bfca:	3200      	adds	r2, #0
    bfcc:	bf18      	it	ne
    bfce:	2201      	movne	r2, #1
    bfd0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    bfd4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    bfd8:	d056      	beq.n	c088 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    bfda:	b11c      	cbz	r4, bfe4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    bfdc:	fb02 4404 	mla	r4, r2, r4, r4
    bfe0:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    bfe4:	b11d      	cbz	r5, bfee <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    bfe6:	fb02 5505 	mla	r5, r2, r5, r5
    bfea:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    bfee:	b11b      	cbz	r3, bff8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    bff0:	fb02 3303 	mla	r3, r2, r3, r3
    bff4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    bff8:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    bffa:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    bffc:	708b      	strb	r3, [r1, #2]
}
    bffe:	bcf0      	pop	{r4, r5, r6, r7}
    c000:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    c002:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    c006:	bb5c      	cbnz	r4, c060 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    c008:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    c00c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    c010:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    c014:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    c016:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    c018:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    c01c:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    c01e:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    c020:	463b      	mov	r3, r7
    c022:	e7af      	b.n	bf84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    c024:	f004 0740 	and.w	r7, r4, #64	; 0x40
    c028:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    c02c:	b9e7      	cbnz	r7, c068 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    c02e:	f004 0720 	and.w	r7, r4, #32
    c032:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    c036:	2f00      	cmp	r7, #0
    c038:	d136      	bne.n	c0a8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    c03a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    c03e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    c042:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    c046:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    c04a:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    c04e:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    c050:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    c052:	b2c3      	uxtb	r3, r0
    c054:	e796      	b.n	bf84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    c056:	43dc      	mvns	r4, r3
    c058:	b2e4      	uxtb	r4, r4
                g = third;
    c05a:	461d      	mov	r5, r3
                b = 0;
    c05c:	4603      	mov	r3, r0
    c05e:	e791      	b.n	bf84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    c060:	2400      	movs	r4, #0
                g = K255 - third;
    c062:	43dd      	mvns	r5, r3
    c064:	b2ed      	uxtb	r5, r5
    c066:	e78d      	b.n	bf84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    c068:	f004 0420 	and.w	r4, r4, #32
    c06c:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    c070:	b994      	cbnz	r4, c098 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    c072:	f103 0455 	add.w	r4, r3, #85	; 0x55
    c076:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    c078:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    c07c:	b2db      	uxtb	r3, r3
    c07e:	e781      	b.n	bf84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    c080:	23ff      	movs	r3, #255	; 0xff
    c082:	461d      	mov	r5, r3
    c084:	461c      	mov	r4, r3
    c086:	e79c      	b.n	bfc2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    c088:	4615      	mov	r5, r2
    c08a:	4614      	mov	r4, r2
    c08c:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    c08e:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    c090:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    c092:	708b      	strb	r3, [r1, #2]
}
    c094:	bcf0      	pop	{r4, r5, r6, r7}
    c096:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    c098:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    c09c:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    c09e:	2500      	movs	r5, #0
                b = K85 - third;
    c0a0:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    c0a4:	b2db      	uxtb	r3, r3
    c0a6:	e76d      	b.n	bf84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    c0a8:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    c0aa:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    c0ac:	b2c3      	uxtb	r3, r0
    c0ae:	e769      	b.n	bf84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

0000c0b0 <inoise8_raw(unsigned short, unsigned short)>:
    uint8_t ans = qadd8( n, n);        //   0..255
    return ans;
}

int8_t inoise8_raw(uint16_t x, uint16_t y)
{
    c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Find the unit cube containing the point
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
    c0b4:	4f76      	ldr	r7, [pc, #472]	; (c290 <inoise8_raw(unsigned short, unsigned short)+0x1e0>)
    c0b6:	1203      	asrs	r3, r0, #8
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
    c0b8:	18fa      	adds	r2, r7, r3
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
    c0ba:	5cfb      	ldrb	r3, [r7, r3]
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    c0bc:	7852      	ldrb	r2, [r2, #1]

int8_t inoise8_raw(uint16_t x, uint16_t y)
{
  // Find the unit cube containing the point
  uint8_t X = x>>8;
  uint8_t Y = y>>8;
    c0be:	0a0c      	lsrs	r4, r1, #8
  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    c0c0:	4422      	add	r2, r4
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
    c0c2:	4423      	add	r3, r4
    c0c4:	b2db      	uxtb	r3, r3
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    c0c6:	b2d2      	uxtb	r2, r2
  uint8_t BB = P(B+1);
    c0c8:	eb07 0c02 	add.w	ip, r7, r2
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
    c0cc:	eb07 0e03 	add.w	lr, r7, r3
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
  uint8_t BB = P(B+1);

  // Get the relative position of the point in the cube
  uint8_t u = x;
    c0d0:	b2c5      	uxtb	r5, r0
  uint8_t v = y;
    c0d2:	b2cc      	uxtb	r4, r1

  // Get a signed version of the above for the grad function
  int8_t xx = ((uint8_t)(x)>>1) & 0x7F;
    c0d4:	ea4f 0b55 	mov.w	fp, r5, lsr #1
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
    c0d8:	0866      	lsrs	r6, r4, #1
///                Takes around 13 cycles on AVR
#if EASE8_C == 1
LIB8STATIC uint8_t ease8InOutQuad( uint8_t i)
{
    uint8_t j = i;
    if( j & 0x80 ) {
    c0da:	0600      	lsls	r0, r0, #24
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
    c0dc:	f817 8003 	ldrb.w	r8, [r7, r3]
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
  uint8_t BB = P(B+1);
    c0e0:	f89c c001 	ldrb.w	ip, [ip, #1]
  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    c0e4:	5cba      	ldrb	r2, [r7, r2]
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
    c0e6:	f89e e001 	ldrb.w	lr, [lr, #1]
  // Get the relative position of the point in the cube
  uint8_t u = x;
  uint8_t v = y;

  // Get a signed version of the above for the grad function
  int8_t xx = ((uint8_t)(x)>>1) & 0x7F;
    c0ea:	fa4f f38b 	sxtb.w	r3, fp
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
    c0ee:	fa4f f986 	sxtb.w	r9, r6
    c0f2:	f100 80c3 	bmi.w	c27c <inoise8_raw(unsigned short, unsigned short)+0x1cc>
        j = 255 - j;
    }
    uint8_t jj  = scale8(  j, j);
    uint8_t jj2 = jj << 1;
    c0f6:	fb05 5505 	mla	r5, r5, r5, r5
    c0fa:	09ed      	lsrs	r5, r5, #7
    c0fc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
///                Takes around 13 cycles on AVR
#if EASE8_C == 1
LIB8STATIC uint8_t ease8InOutQuad( uint8_t i)
{
    uint8_t j = i;
    if( j & 0x80 ) {
    c100:	0609      	lsls	r1, r1, #24
    c102:	f100 80b1 	bmi.w	c268 <inoise8_raw(unsigned short, unsigned short)+0x1b8>
        j = 255 - j;
    }
    uint8_t jj  = scale8(  j, j);
    uint8_t jj2 = jj << 1;
    c106:	fb04 4404 	mla	r4, r4, r4, r4
    c10a:	09e4      	lsrs	r4, r4, #7
    c10c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
    c110:	f817 1008 	ldrb.w	r1, [r7, r8]
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    c114:	0748      	lsls	r0, r1, #29
	  u = y; v = x;
    c116:	bf4b      	itete	mi
    c118:	46ca      	movmi	sl, r9
  } else {
	  u = x; v = y;
    c11a:	46c8      	movpl	r8, r9
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    c11c:	4698      	movmi	r8, r3
  } else {
	  u = x; v = y;
    c11e:	469a      	movpl	sl, r3
  }

  if(hash&1) { u = -u; }
    c120:	07c8      	lsls	r0, r1, #31
    c122:	bf44      	itt	mi
    c124:	f1ca 0a00 	rsbmi	sl, sl, #0
    c128:	fa4f fa8a 	sxtbmi.w	sl, sl
  if(hash&2) { v = -v; }
    c12c:	0789      	lsls	r1, r1, #30
    c12e:	bf44      	itt	mi
    c130:	f1c8 0800 	rsbmi	r8, r8, #0
    c134:	fa4f f888 	sxtbmi.w	r8, r8
///       If the first argument is even, result is rounded down.
///       If the first argument is odd, result is result up.
LIB8STATIC_ALWAYS_INLINE int8_t avg7( int8_t i, int8_t j)
{
#if AVG7_C == 1
    return ((i + j) >> 1) + (i & 0x1);
    c138:	44d0      	add	r8, sl
    c13a:	f00a 0a01 	and.w	sl, sl, #1
    c13e:	eb0a 0868 	add.w	r8, sl, r8, asr #1
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
    c142:	f817 a002 	ldrb.w	sl, [r7, r2]
    c146:	f1ab 0280 	sub.w	r2, fp, #128	; 0x80
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    c14a:	f01a 0f04 	tst.w	sl, #4
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
    c14e:	b252      	sxtb	r2, r2
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    c150:	bf16      	itet	ne
    c152:	4649      	movne	r1, r9
  } else {
	  u = x; v = y;
    c154:	4611      	moveq	r1, r2
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    c156:	4691      	movne	r9, r2
  } else {
	  u = x; v = y;
  }

  if(hash&1) { u = -u; }
    c158:	f01a 0f01 	tst.w	sl, #1
    c15c:	bf1c      	itt	ne
    c15e:	4249      	negne	r1, r1
    c160:	b249      	sxtbne	r1, r1
  if(hash&2) { v = -v; }
    c162:	f01a 0f02 	tst.w	sl, #2
    c166:	bf1c      	itt	ne
    c168:	f1c9 0900 	rsbne	r9, r9, #0
    c16c:	fa4f f989 	sxtbne.w	r9, r9
    c170:	4489      	add	r9, r1
    c172:	f001 0101 	and.w	r1, r1, #1
    c176:	eb01 0169 	add.w	r1, r1, r9, asr #1
    c17a:	fa5f f888 	uxtb.w	r8, r8
    c17e:	b2c9      	uxtb	r1, r1
    c180:	fa4f f088 	sxtb.w	r0, r8
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    c184:	fa4f f981 	sxtb.w	r9, r1
    c188:	4581      	cmp	r9, r0
    c18a:	dd50      	ble.n	c22e <inoise8_raw(unsigned short, unsigned short)+0x17e>
        uint8_t delta = b - a;
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    c18c:	ebc8 0001 	rsb	r0, r8, r1
    c190:	b2c0      	uxtb	r0, r0
    c192:	3501      	adds	r5, #1
    c194:	fb05 f000 	mul.w	r0, r5, r0
    c198:	eb08 2020 	add.w	r0, r8, r0, asr #8
    c19c:	b240      	sxtb	r0, r0
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
  int8_t X2 = lerp7by8(grad8(P(AB), xx, yy-N), grad8(P(BB), xx - N, yy - N), u);
    c19e:	f817 e00e 	ldrb.w	lr, [r7, lr]
    c1a2:	f817 700c 	ldrb.w	r7, [r7, ip]
    c1a6:	3e80      	subs	r6, #128	; 0x80
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    c1a8:	f01e 0f04 	tst.w	lr, #4
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
  int8_t X2 = lerp7by8(grad8(P(AB), xx, yy-N), grad8(P(BB), xx - N, yy - N), u);
    c1ac:	b276      	sxtb	r6, r6
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    c1ae:	bf16      	itet	ne
    c1b0:	4619      	movne	r1, r3
  } else {
	  u = x; v = y;
    c1b2:	4631      	moveq	r1, r6
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    c1b4:	4633      	movne	r3, r6
  } else {
	  u = x; v = y;
  }

  if(hash&1) { u = -u; }
    c1b6:	f01e 0f01 	tst.w	lr, #1
    c1ba:	bf1c      	itt	ne
    c1bc:	425b      	negne	r3, r3
    c1be:	b25b      	sxtbne	r3, r3
  if(hash&2) { v = -v; }
    c1c0:	f01e 0f02 	tst.w	lr, #2
    c1c4:	bf1c      	itt	ne
    c1c6:	4249      	negne	r1, r1
    c1c8:	b249      	sxtbne	r1, r1
    c1ca:	4419      	add	r1, r3
    c1cc:	f003 0301 	and.w	r3, r3, #1
    c1d0:	eb03 0161 	add.w	r1, r3, r1, asr #1
    c1d4:	b2cb      	uxtb	r3, r1
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    c1d6:	f017 0f04 	tst.w	r7, #4
    c1da:	b259      	sxtb	r1, r3
    c1dc:	d002      	beq.n	c1e4 <inoise8_raw(unsigned short, unsigned short)+0x134>
    c1de:	4696      	mov	lr, r2
	  u = y; v = x;
    c1e0:	4632      	mov	r2, r6
    c1e2:	4676      	mov	r6, lr
  } else {
	  u = x; v = y;
  }

  if(hash&1) { u = -u; }
    c1e4:	f017 0f01 	tst.w	r7, #1
    c1e8:	bf1c      	itt	ne
    c1ea:	4252      	negne	r2, r2
    c1ec:	b252      	sxtbne	r2, r2
  if(hash&2) { v = -v; }
    c1ee:	07bf      	lsls	r7, r7, #30
    c1f0:	bf44      	itt	mi
    c1f2:	4276      	negmi	r6, r6
    c1f4:	b276      	sxtbmi	r6, r6
    c1f6:	4416      	add	r6, r2
    c1f8:	f002 0201 	and.w	r2, r2, #1
    c1fc:	eb02 0266 	add.w	r2, r2, r6, asr #1
    c200:	b2d2      	uxtb	r2, r2
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    c202:	b256      	sxtb	r6, r2
    c204:	428e      	cmp	r6, r1
    c206:	dd1c      	ble.n	c242 <inoise8_raw(unsigned short, unsigned short)+0x192>
        uint8_t delta = b - a;
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    c208:	1ad2      	subs	r2, r2, r3
    c20a:	b2d1      	uxtb	r1, r2
    c20c:	fb05 f201 	mul.w	r2, r5, r1
    c210:	eb03 2322 	add.w	r3, r3, r2, asr #8
    c214:	b25b      	sxtb	r3, r3
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    c216:	4283      	cmp	r3, r0
        uint8_t delta = b - a;
    c218:	b2c0      	uxtb	r0, r0
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    c21a:	dc1c      	bgt.n	c256 <inoise8_raw(unsigned short, unsigned short)+0x1a6>
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    } else {
        uint8_t delta = a - b;
        uint8_t scaled = scale8( delta, frac);
        result = a - scaled;
    c21c:	1ac3      	subs	r3, r0, r3
    c21e:	b2db      	uxtb	r3, r3
    c220:	fb04 3303 	mla	r3, r4, r3, r3
    c224:	eba0 2023 	sub.w	r0, r0, r3, asr #8
    c228:	b240      	sxtb	r0, r0
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
  int8_t X2 = lerp7by8(grad8(P(AB), xx, yy-N), grad8(P(BB), xx - N, yy - N), u);

  int8_t ans = lerp7by8(X1,X2,v);

  return ans;
    c22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    } else {
        uint8_t delta = a - b;
        uint8_t scaled = scale8( delta, frac);
        result = a - scaled;
    c22e:	ebc1 0108 	rsb	r1, r1, r8
    c232:	b2c9      	uxtb	r1, r1
    c234:	3501      	adds	r5, #1
    c236:	fb05 f101 	mul.w	r1, r5, r1
    c23a:	eba8 2021 	sub.w	r0, r8, r1, asr #8
    c23e:	b240      	sxtb	r0, r0
    c240:	e7ad      	b.n	c19e <inoise8_raw(unsigned short, unsigned short)+0xee>
    c242:	1a9a      	subs	r2, r3, r2
    c244:	b2d2      	uxtb	r2, r2
    c246:	fb05 f202 	mul.w	r2, r5, r2
    c24a:	eba3 2322 	sub.w	r3, r3, r2, asr #8
    c24e:	b25b      	sxtb	r3, r3
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    c250:	4283      	cmp	r3, r0
        uint8_t delta = b - a;
    c252:	b2c0      	uxtb	r0, r0
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    c254:	dde2      	ble.n	c21c <inoise8_raw(unsigned short, unsigned short)+0x16c>
        uint8_t delta = b - a;
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    c256:	1a1b      	subs	r3, r3, r0
    c258:	b2db      	uxtb	r3, r3
    c25a:	fb04 3303 	mla	r3, r4, r3, r3
    c25e:	eb00 2023 	add.w	r0, r0, r3, asr #8
    c262:	b240      	sxtb	r0, r0
    c264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c268:	43e4      	mvns	r4, r4
    c26a:	b2e4      	uxtb	r4, r4
    c26c:	fb04 4404 	mla	r4, r4, r4, r4
    c270:	09e4      	lsrs	r4, r4, #7
    c272:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
    if( i & 0x80 ) {
        jj2 = 255 - jj2;
    c276:	f084 04ff 	eor.w	r4, r4, #255	; 0xff
    c27a:	e749      	b.n	c110 <inoise8_raw(unsigned short, unsigned short)+0x60>
    c27c:	43ed      	mvns	r5, r5
    c27e:	b2ed      	uxtb	r5, r5
    uint8_t j = i;
    if( j & 0x80 ) {
        j = 255 - j;
    }
    uint8_t jj  = scale8(  j, j);
    uint8_t jj2 = jj << 1;
    c280:	fb05 5505 	mla	r5, r5, r5, r5
    c284:	09ed      	lsrs	r5, r5, #7
    c286:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if( i & 0x80 ) {
        jj2 = 255 - jj2;
    c28a:	f085 05ff 	eor.w	r5, r5, #255	; 0xff
    c28e:	e737      	b.n	c100 <inoise8_raw(unsigned short, unsigned short)+0x50>
    c290:	00012744 	.word	0x00012744

0000c294 <inoise8(unsigned short, unsigned short)>:
  // return scale8((70+(ans)),234)<<1;
}



uint8_t inoise8(uint16_t x, uint16_t y) {
    c294:	b508      	push	{r3, lr}
  //return scale8(69+inoise8_raw(x,y),237)<<1;
    int8_t n = inoise8_raw( x, y);  // -64..+64
    c296:	f7ff ff0b 	bl	c0b0 <inoise8_raw(unsigned short, unsigned short)>
    n+= 64;                         //   0..128
    c29a:	3040      	adds	r0, #64	; 0x40
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    c29c:	4603      	mov	r3, r0
    c29e:	fa83 f350 	uqadd8	r3, r3, r0
    uint8_t ans = qadd8( n, n);     //   0..255
    return ans;
}
    c2a2:	b2d8      	uxtb	r0, r3
    c2a4:	bd08      	pop	{r3, pc}
    c2a6:	bf00      	nop

0000c2a8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    c2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    c2aa:	b361      	cbz	r1, c306 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    c2ac:	f101 3eff 	add.w	lr, r1, #4294967295
    c2b0:	fa1f fe8e 	uxth.w	lr, lr
    c2b4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    c2b8:	2200      	movs	r2, #0
    c2ba:	f10e 0e06 	add.w	lr, lr, #6
    c2be:	4486      	add	lr, r0
    c2c0:	1cc3      	adds	r3, r0, #3
    c2c2:	4615      	mov	r5, r2
    c2c4:	4614      	mov	r4, r2
        red32   += *p++;
    c2c6:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    c2ca:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    c2ce:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    c2d2:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    c2d4:	4573      	cmp	r3, lr
        red32   += *p++;
    c2d6:	443c      	add	r4, r7
        green32 += *p++;
    c2d8:	4405      	add	r5, r0
        blue32  += *p++;
    c2da:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    c2dc:	d1f3      	bne.n	c2c6 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    c2de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    c2e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    c2e6:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    c2ea:	f3c4 1317 	ubfx	r3, r4, #4, #24
    c2ee:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    c2f2:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    c2f6:	0a12      	lsrs	r2, r2, #8
    c2f8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    c2fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c300:	1910      	adds	r0, r2, r4
}
    c302:	4408      	add	r0, r1
    c304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    c306:	460c      	mov	r4, r1
    c308:	460a      	mov	r2, r1
    c30a:	e7f7      	b.n	c2fc <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

0000c30c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    c30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    c310:	4b25      	ldr	r3, [pc, #148]	; (c3a8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    c312:	681c      	ldr	r4, [r3, #0]
    c314:	b085      	sub	sp, #20
    c316:	4607      	mov	r7, r0
    c318:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    c31a:	b19c      	cbz	r4, c344 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    c31c:	f8df 9094 	ldr.w	r9, [pc, #148]	; c3b4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    c320:	257d      	movs	r5, #125	; 0x7d
    c322:	e007      	b.n	c334 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    c324:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    c326:	b281      	uxth	r1, r0
    c328:	4630      	mov	r0, r6
    c32a:	f7ff ffbd 	bl	c2a8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    c32e:	68a4      	ldr	r4, [r4, #8]
    c330:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    c332:	b144      	cbz	r4, c346 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    c334:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    c338:	691b      	ldr	r3, [r3, #16]
    c33a:	454b      	cmp	r3, r9
    c33c:	d0f2      	beq.n	c324 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    c33e:	4620      	mov	r0, r4
    c340:	4798      	blx	r3
    c342:	e7f0      	b.n	c326 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    c344:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    c346:	fb05 f507 	mul.w	r5, r5, r7
    c34a:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    c34c:	4b17      	ldr	r3, [pc, #92]	; (c3ac <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    c34e:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    c350:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    c352:	d210      	bcs.n	c376 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    c354:	b323      	cbz	r3, c3a0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    c356:	4a16      	ldr	r2, [pc, #88]	; (c3b0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    c358:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    c35a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    c35e:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    c362:	f89d 100c 	ldrb.w	r1, [sp, #12]
    c366:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    c368:	4638      	mov	r0, r7
    c36a:	ea23 0301 	bic.w	r3, r3, r1
    c36e:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    c370:	b005      	add	sp, #20
    c372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    c376:	fb08 f707 	mul.w	r7, r8, r7
    c37a:	fbb7 f0f5 	udiv	r0, r7, r5
    c37e:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    c380:	b173      	cbz	r3, c3a0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    c382:	4a0b      	ldr	r2, [pc, #44]	; (c3b0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    c384:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    c386:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    c38a:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    c38e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    c392:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    c394:	4638      	mov	r0, r7
    c396:	430b      	orrs	r3, r1
    c398:	7013      	strb	r3, [r2, #0]
}
    c39a:	b005      	add	sp, #20
    c39c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    c3a0:	4638      	mov	r0, r7
}
    c3a2:	b005      	add	sp, #20
    c3a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c3a8:	1fffb134 	.word	0x1fffb134
    c3ac:	1fffb148 	.word	0x1fffb148
    c3b0:	000128e4 	.word	0x000128e4
    c3b4:	0000046d 	.word	0x0000046d

0000c3b8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    c3b8:	4b03      	ldr	r3, [pc, #12]	; (c3c8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    c3ba:	4a04      	ldr	r2, [pc, #16]	; (c3cc <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    c3bc:	60da      	str	r2, [r3, #12]
    c3be:	fb01 f100 	mul.w	r1, r1, r0
    c3c2:	6099      	str	r1, [r3, #8]
    c3c4:	4770      	bx	lr
    c3c6:	bf00      	nop
    c3c8:	1fffb124 	.word	0x1fffb124
    c3cc:	0000c30d 	.word	0x0000c30d

0000c3d0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c3d0:	4807      	ldr	r0, [pc, #28]	; (c3f0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    c3d2:	b082      	sub	sp, #8
    c3d4:	6803      	ldr	r3, [r0, #0]
    c3d6:	9301      	str	r3, [sp, #4]
	return ret;
    c3d8:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    c3da:	4411      	add	r1, r2
    c3dc:	e001      	b.n	c3e2 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    c3de:	4299      	cmp	r1, r3
    c3e0:	d304      	bcc.n	c3ec <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c3e2:	6803      	ldr	r3, [r0, #0]
    c3e4:	9300      	str	r3, [sp, #0]
	return ret;
    c3e6:	9b00      	ldr	r3, [sp, #0]
    c3e8:	429a      	cmp	r2, r3
    c3ea:	d9f8      	bls.n	c3de <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    c3ec:	b002      	add	sp, #8
    c3ee:	4770      	bx	lr
    c3f0:	1fffb19c 	.word	0x1fffb19c

0000c3f4 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    c3f4:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c3f6:	4a10      	ldr	r2, [pc, #64]	; (c438 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    c3f8:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    c3fa:	b9a1      	cbnz	r1, c426 <VisualMicroDebug::outPacketStart(bool)+0x32>
    c3fc:	6813      	ldr	r3, [r2, #0]
    c3fe:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    c400:	6841      	ldr	r1, [r0, #4]
	return ret;
    c402:	9b00      	ldr	r3, [sp, #0]
    c404:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    c406:	2931      	cmp	r1, #49	; 0x31
    c408:	d80d      	bhi.n	c426 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c40a:	6813      	ldr	r3, [r2, #0]
    c40c:	9302      	str	r3, [sp, #8]
	return ret;
    c40e:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    c410:	f104 0332 	add.w	r3, r4, #50	; 0x32
    c414:	1a59      	subs	r1, r3, r1
    c416:	e001      	b.n	c41c <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    c418:	4299      	cmp	r1, r3
    c41a:	d304      	bcc.n	c426 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c41c:	6813      	ldr	r3, [r2, #0]
    c41e:	9301      	str	r3, [sp, #4]
	return ret;
    c420:	9b01      	ldr	r3, [sp, #4]
    c422:	429c      	cmp	r4, r3
    c424:	d9f8      	bls.n	c418 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c426:	6813      	ldr	r3, [r2, #0]
    c428:	9303      	str	r3, [sp, #12]
	return ret;
    c42a:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    c42c:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    c42e:	2001      	movs	r0, #1
    c430:	b005      	add	sp, #20
    c432:	bc10      	pop	{r4}
    c434:	4770      	bx	lr
    c436:	bf00      	nop
    c438:	1fffb19c 	.word	0x1fffb19c

0000c43c <VisualMicroDebug::outPacketEnd()>:
    c43c:	4770      	bx	lr
    c43e:	bf00      	nop

0000c440 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    c440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c444:	f000 bb1a 	b.w	ca7c <delay>

0000c448 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    c448:	2300      	movs	r3, #0
    c44a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    c44c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    c44e:	b171      	cbz	r1, c46e <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c450:	4807      	ldr	r0, [pc, #28]	; (c470 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    c452:	b082      	sub	sp, #8
    c454:	6803      	ldr	r3, [r0, #0]
    c456:	9301      	str	r3, [sp, #4]
	return ret;
    c458:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    c45a:	4411      	add	r1, r2
    c45c:	e001      	b.n	c462 <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    c45e:	4299      	cmp	r1, r3
    c460:	d304      	bcc.n	c46c <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c462:	6803      	ldr	r3, [r0, #0]
    c464:	9300      	str	r3, [sp, #0]
	return ret;
    c466:	9b00      	ldr	r3, [sp, #0]
    c468:	429a      	cmp	r2, r3
    c46a:	d9f8      	bls.n	c45e <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    c46c:	b002      	add	sp, #8
    c46e:	4770      	bx	lr
    c470:	1fffb19c 	.word	0x1fffb19c

0000c474 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    c474:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c476:	4c13      	ldr	r4, [pc, #76]	; (c4c4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    c478:	b085      	sub	sp, #20
    c47a:	6823      	ldr	r3, [r4, #0]
    c47c:	9303      	str	r3, [sp, #12]
	return ret;
    c47e:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    c480:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    c482:	460d      	mov	r5, r1
    c484:	4810      	ldr	r0, [pc, #64]	; (c4c8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    c486:	2106      	movs	r1, #6
    c488:	f001 fb10 	bl	daac <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    c48c:	2300      	movs	r3, #0
    c48e:	220a      	movs	r2, #10
    c490:	4629      	mov	r1, r5
    c492:	480e      	ldr	r0, [pc, #56]	; (c4cc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    c494:	f001 fd1e 	bl	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    c498:	2106      	movs	r1, #6
    c49a:	480d      	ldr	r0, [pc, #52]	; (c4d0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    c49c:	f001 fb06 	bl	daac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    c4a0:	480a      	ldr	r0, [pc, #40]	; (c4cc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    c4a2:	f001 fd07 	bl	deb4 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c4a6:	6823      	ldr	r3, [r4, #0]
    c4a8:	9302      	str	r3, [sp, #8]
	return ret;
    c4aa:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    c4ac:	f102 0132 	add.w	r1, r2, #50	; 0x32
    c4b0:	e001      	b.n	c4b6 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    c4b2:	4299      	cmp	r1, r3
    c4b4:	d304      	bcc.n	c4c0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c4b6:	6823      	ldr	r3, [r4, #0]
    c4b8:	9301      	str	r3, [sp, #4]
	return ret;
    c4ba:	9b01      	ldr	r3, [sp, #4]
    c4bc:	429a      	cmp	r2, r3
    c4be:	d9f8      	bls.n	c4b2 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    c4c0:	b005      	add	sp, #20
    c4c2:	bd30      	pop	{r4, r5, pc}
    c4c4:	1fffb19c 	.word	0x1fffb19c
    c4c8:	00012860 	.word	0x00012860
    c4cc:	1fff8790 	.word	0x1fff8790
    c4d0:	00012868 	.word	0x00012868

0000c4d4 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    c4d4:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    c4d6:	7e03      	ldrb	r3, [r0, #24]
    c4d8:	b90b      	cbnz	r3, c4de <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    c4da:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    c4dc:	bd38      	pop	{r3, r4, r5, pc}
    c4de:	460d      	mov	r5, r1
    c4e0:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    c4e2:	f001 fab9 	bl	da58 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    c4e6:	f010 0fff 	tst.w	r0, #255	; 0xff
    c4ea:	d101      	bne.n	c4f0 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    c4ec:	2065      	movs	r0, #101	; 0x65
    c4ee:	bd38      	pop	{r3, r4, r5, pc}
    c4f0:	f001 fab2 	bl	da58 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    c4f4:	f010 0fff 	tst.w	r0, #255	; 0xff
    c4f8:	d0f8      	beq.n	c4ec <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    c4fa:	f001 fa71 	bl	d9e0 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    c4fe:	b2c0      	uxtb	r0, r0
    c500:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    c504:	2b1e      	cmp	r3, #30
    c506:	d8f3      	bhi.n	c4f0 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    c508:	a201      	add	r2, pc, #4	; (adr r2, c510 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    c50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c50e:	bf00      	nop
    c510:	0000c599 	.word	0x0000c599
    c514:	0000c4f1 	.word	0x0000c4f1
    c518:	0000c4f1 	.word	0x0000c4f1
    c51c:	0000c4f1 	.word	0x0000c4f1
    c520:	0000c4f1 	.word	0x0000c4f1
    c524:	0000c4f1 	.word	0x0000c4f1
    c528:	0000c4f1 	.word	0x0000c4f1
    c52c:	0000c4f1 	.word	0x0000c4f1
    c530:	0000c4f1 	.word	0x0000c4f1
    c534:	0000c4f1 	.word	0x0000c4f1
    c538:	0000c4f1 	.word	0x0000c4f1
    c53c:	0000c58d 	.word	0x0000c58d
    c540:	0000c4f1 	.word	0x0000c4f1
    c544:	0000c4f1 	.word	0x0000c4f1
    c548:	0000c4f1 	.word	0x0000c4f1
    c54c:	0000c4f1 	.word	0x0000c4f1
    c550:	0000c4db 	.word	0x0000c4db
    c554:	0000c4f1 	.word	0x0000c4f1
    c558:	0000c4f1 	.word	0x0000c4f1
    c55c:	0000c4f1 	.word	0x0000c4f1
    c560:	0000c4f1 	.word	0x0000c4f1
    c564:	0000c4f1 	.word	0x0000c4f1
    c568:	0000c4f1 	.word	0x0000c4f1
    c56c:	0000c4f1 	.word	0x0000c4f1
    c570:	0000c4f1 	.word	0x0000c4f1
    c574:	0000c4db 	.word	0x0000c4db
    c578:	0000c4f1 	.word	0x0000c4f1
    c57c:	0000c4f1 	.word	0x0000c4f1
    c580:	0000c4f1 	.word	0x0000c4f1
    c584:	0000c4f1 	.word	0x0000c4f1
    c588:	0000c4dd 	.word	0x0000c4dd
		{

		case 'c':
			sendContinuedACK(breakPointId);
    c58c:	4620      	mov	r0, r4
    c58e:	4629      	mov	r1, r5
    c590:	f7ff ff70 	bl	c474 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    c594:	2063      	movs	r0, #99	; 0x63
    c596:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    c598:	2300      	movs	r3, #0
    c59a:	7623      	strb	r3, [r4, #24]
			return 'c';
    c59c:	2063      	movs	r0, #99	; 0x63
    c59e:	bd38      	pop	{r3, r4, r5, pc}

0000c5a0 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    c5a0:	b570      	push	{r4, r5, r6, lr}
    c5a2:	4605      	mov	r5, r0
    c5a4:	b082      	sub	sp, #8
    c5a6:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    c5a8:	b1c9      	cbz	r1, c5de <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    c5aa:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c5ac:	4c0d      	ldr	r4, [pc, #52]	; (c5e4 <VisualMicroDebug::start(bool, bool)+0x44>)
    c5ae:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    c5b0:	2100      	movs	r1, #0
    c5b2:	4628      	mov	r0, r5
    c5b4:	f7ff ff8e 	bl	c4d4 <VisualMicroDebug::breakWait(unsigned char)>
    c5b8:	2863      	cmp	r0, #99	; 0x63
    c5ba:	d010      	beq.n	c5de <VisualMicroDebug::start(bool, bool)+0x3e>
    c5bc:	6823      	ldr	r3, [r4, #0]
    c5be:	9301      	str	r3, [sp, #4]
	return ret;
    c5c0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    c5c2:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c5c4:	6823      	ldr	r3, [r4, #0]
    c5c6:	9300      	str	r3, [sp, #0]
	return ret;
    c5c8:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    c5ca:	429a      	cmp	r2, r3
    c5cc:	d8f0      	bhi.n	c5b0 <VisualMicroDebug::start(bool, bool)+0x10>
    c5ce:	4299      	cmp	r1, r3
    c5d0:	d2f8      	bcs.n	c5c4 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    c5d2:	2100      	movs	r1, #0
    c5d4:	4628      	mov	r0, r5
    c5d6:	f7ff ff7d 	bl	c4d4 <VisualMicroDebug::breakWait(unsigned char)>
    c5da:	2863      	cmp	r0, #99	; 0x63
    c5dc:	d1ee      	bne.n	c5bc <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    c5de:	762e      	strb	r6, [r5, #24]
#endif

}
    c5e0:	b002      	add	sp, #8
    c5e2:	bd70      	pop	{r4, r5, r6, pc}
    c5e4:	1fffb19c 	.word	0x1fffb19c

0000c5e8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    c5e8:	4b03      	ldr	r3, [pc, #12]	; (c5f8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    c5ea:	2200      	movs	r2, #0
    c5ec:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    c5ee:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    c5f0:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    c5f2:	615a      	str	r2, [r3, #20]
    c5f4:	4770      	bx	lr
    c5f6:	bf00      	nop
    c5f8:	1fffb14c 	.word	0x1fffb14c

0000c5fc <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    c5fc:	4a37      	ldr	r2, [pc, #220]	; (c6dc <wait_for_cal+0xe0>)
    c5fe:	4938      	ldr	r1, [pc, #224]	; (c6e0 <wait_for_cal+0xe4>)
    c600:	6813      	ldr	r3, [r2, #0]
    c602:	061b      	lsls	r3, r3, #24
    c604:	d4fc      	bmi.n	c600 <wait_for_cal+0x4>
    c606:	680b      	ldr	r3, [r1, #0]
    c608:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    c60c:	d1f8      	bne.n	c600 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    c60e:	b672      	cpsid	i
	if (calibrating) {
    c610:	4934      	ldr	r1, [pc, #208]	; (c6e4 <wait_for_cal+0xe8>)
    c612:	780a      	ldrb	r2, [r1, #0]
    c614:	2a00      	cmp	r2, #0
    c616:	d05f      	beq.n	c6d8 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    c618:	4a33      	ldr	r2, [pc, #204]	; (c6e8 <wait_for_cal+0xec>)
    c61a:	4834      	ldr	r0, [pc, #208]	; (c6ec <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    c61c:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    c61e:	4c34      	ldr	r4, [pc, #208]	; (c6f0 <wait_for_cal+0xf4>)
    c620:	6817      	ldr	r7, [r2, #0]
    c622:	6806      	ldr	r6, [r0, #0]
    c624:	6825      	ldr	r5, [r4, #0]
    c626:	68d4      	ldr	r4, [r2, #12]
    c628:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    c62a:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    c62c:	3214      	adds	r2, #20
    c62e:	6800      	ldr	r0, [r0, #0]
    c630:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    c632:	4f30      	ldr	r7, [pc, #192]	; (c6f4 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    c634:	4435      	add	r5, r6
    c636:	442c      	add	r4, r5
    c638:	4420      	add	r0, r4
    c63a:	4402      	add	r2, r0
    c63c:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    c640:	4e2d      	ldr	r6, [pc, #180]	; (c6f8 <wait_for_cal+0xfc>)
    c642:	482e      	ldr	r0, [pc, #184]	; (c6fc <wait_for_cal+0x100>)
    c644:	4d2e      	ldr	r5, [pc, #184]	; (c700 <wait_for_cal+0x104>)
    c646:	4c2f      	ldr	r4, [pc, #188]	; (c704 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    c648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    c64c:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    c64e:	6837      	ldr	r7, [r6, #0]
    c650:	6806      	ldr	r6, [r0, #0]
    c652:	682d      	ldr	r5, [r5, #0]
    c654:	4a2c      	ldr	r2, [pc, #176]	; (c708 <wait_for_cal+0x10c>)
    c656:	6824      	ldr	r4, [r4, #0]
    c658:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    c65a:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    c65c:	6800      	ldr	r0, [r0, #0]
    c65e:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    c660:	4f2a      	ldr	r7, [pc, #168]	; (c70c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    c662:	4435      	add	r5, r6
    c664:	442c      	add	r4, r5
    c666:	4420      	add	r0, r4
    c668:	4402      	add	r2, r0
    c66a:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    c66e:	4e28      	ldr	r6, [pc, #160]	; (c710 <wait_for_cal+0x114>)
    c670:	4828      	ldr	r0, [pc, #160]	; (c714 <wait_for_cal+0x118>)
    c672:	4d29      	ldr	r5, [pc, #164]	; (c718 <wait_for_cal+0x11c>)
    c674:	4c29      	ldr	r4, [pc, #164]	; (c71c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    c676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    c67a:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    c67c:	6837      	ldr	r7, [r6, #0]
    c67e:	6806      	ldr	r6, [r0, #0]
    c680:	682d      	ldr	r5, [r5, #0]
    c682:	4a27      	ldr	r2, [pc, #156]	; (c720 <wait_for_cal+0x124>)
    c684:	6824      	ldr	r4, [r4, #0]
    c686:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    c688:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    c68a:	6800      	ldr	r0, [r0, #0]
    c68c:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    c68e:	4f25      	ldr	r7, [pc, #148]	; (c724 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    c690:	4435      	add	r5, r6
    c692:	442c      	add	r4, r5
    c694:	4420      	add	r0, r4
    c696:	4402      	add	r2, r0
    c698:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    c69c:	4e22      	ldr	r6, [pc, #136]	; (c728 <wait_for_cal+0x12c>)
    c69e:	4823      	ldr	r0, [pc, #140]	; (c72c <wait_for_cal+0x130>)
    c6a0:	4d23      	ldr	r5, [pc, #140]	; (c730 <wait_for_cal+0x134>)
    c6a2:	4c24      	ldr	r4, [pc, #144]	; (c734 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    c6a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    c6a8:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    c6aa:	6837      	ldr	r7, [r6, #0]
    c6ac:	6806      	ldr	r6, [r0, #0]
    c6ae:	682d      	ldr	r5, [r5, #0]
    c6b0:	4a21      	ldr	r2, [pc, #132]	; (c738 <wait_for_cal+0x13c>)
    c6b2:	6824      	ldr	r4, [r4, #0]
    c6b4:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    c6b6:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    c6b8:	6800      	ldr	r0, [r0, #0]
    c6ba:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    c6bc:	4435      	add	r5, r6
    c6be:	442c      	add	r4, r5
    c6c0:	4420      	add	r0, r4
    c6c2:	4402      	add	r2, r0
    c6c4:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    c6c8:	481c      	ldr	r0, [pc, #112]	; (c73c <wait_for_cal+0x140>)
    c6ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    c6ce:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    c6d0:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    c6d2:	b662      	cpsie	i
}
    c6d4:	bcf0      	pop	{r4, r5, r6, r7}
    c6d6:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    c6d8:	b662      	cpsie	i
    c6da:	4770      	bx	lr
    c6dc:	4003b024 	.word	0x4003b024
    c6e0:	400bb024 	.word	0x400bb024
    c6e4:	1fffb195 	.word	0x1fffb195
    c6e8:	4003b038 	.word	0x4003b038
    c6ec:	4003b03c 	.word	0x4003b03c
    c6f0:	4003b040 	.word	0x4003b040
    c6f4:	4003b02c 	.word	0x4003b02c
    c6f8:	4003b058 	.word	0x4003b058
    c6fc:	4003b05c 	.word	0x4003b05c
    c700:	4003b060 	.word	0x4003b060
    c704:	4003b064 	.word	0x4003b064
    c708:	4003b06c 	.word	0x4003b06c
    c70c:	4003b030 	.word	0x4003b030
    c710:	400bb038 	.word	0x400bb038
    c714:	400bb03c 	.word	0x400bb03c
    c718:	400bb040 	.word	0x400bb040
    c71c:	400bb044 	.word	0x400bb044
    c720:	400bb04c 	.word	0x400bb04c
    c724:	400bb02c 	.word	0x400bb02c
    c728:	400bb058 	.word	0x400bb058
    c72c:	400bb05c 	.word	0x400bb05c
    c730:	400bb060 	.word	0x400bb060
    c734:	400bb064 	.word	0x400bb064
    c738:	400bb06c 	.word	0x400bb06c
    c73c:	400bb030 	.word	0x400bb030

0000c740 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    c740:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    c742:	4829      	ldr	r0, [pc, #164]	; (c7e8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    c744:	4a29      	ldr	r2, [pc, #164]	; (c7ec <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    c746:	4b2a      	ldr	r3, [pc, #168]	; (c7f0 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    c748:	4d2a      	ldr	r5, [pc, #168]	; (c7f4 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    c74a:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    c74c:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    c74e:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    c750:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    c752:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    c754:	4c28      	ldr	r4, [pc, #160]	; (c7f8 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    c756:	2b08      	cmp	r3, #8
    c758:	d030      	beq.n	c7bc <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    c75a:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    c75c:	4827      	ldr	r0, [pc, #156]	; (c7fc <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    c75e:	4928      	ldr	r1, [pc, #160]	; (c800 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    c760:	d037      	beq.n	c7d2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    c762:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    c764:	bf0c      	ite	eq
    c766:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    c768:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    c76a:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    c76c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    c76e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    c770:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    c772:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    c774:	4b23      	ldr	r3, [pc, #140]	; (c804 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    c776:	4924      	ldr	r1, [pc, #144]	; (c808 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    c778:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    c77a:	4a24      	ldr	r2, [pc, #144]	; (c80c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    c77c:	b1bb      	cbz	r3, c7ae <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    c77e:	2301      	movs	r3, #1
    c780:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    c782:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    c784:	4b22      	ldr	r3, [pc, #136]	; (c810 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    c786:	4923      	ldr	r1, [pc, #140]	; (c814 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    c788:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    c78a:	4a23      	ldr	r2, [pc, #140]	; (c818 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    c78c:	2b01      	cmp	r3, #1
    c78e:	d926      	bls.n	c7de <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    c790:	2b04      	cmp	r3, #4
    c792:	d90f      	bls.n	c7b4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    c794:	2b08      	cmp	r3, #8
    c796:	d91e      	bls.n	c7d6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    c798:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    c79a:	bf94      	ite	ls
    c79c:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    c79e:	2387      	movhi	r3, #135	; 0x87
    c7a0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    c7a2:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    c7a4:	4b1d      	ldr	r3, [pc, #116]	; (c81c <analog_init+0xdc>)
    c7a6:	2201      	movs	r2, #1
    c7a8:	701a      	strb	r2, [r3, #0]
}
    c7aa:	bc30      	pop	{r4, r5}
    c7ac:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    c7ae:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    c7b0:	6013      	str	r3, [r2, #0]
    c7b2:	e7e7      	b.n	c784 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    c7b4:	2384      	movs	r3, #132	; 0x84
    c7b6:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    c7b8:	6013      	str	r3, [r2, #0]
    c7ba:	e7f3      	b.n	c7a4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    c7bc:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    c7c0:	490f      	ldr	r1, [pc, #60]	; (c800 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    c7c2:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    c7c4:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    c7c6:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    c7c8:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    c7ca:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    c7cc:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    c7ce:	600b      	str	r3, [r1, #0]
    c7d0:	e7d0      	b.n	c774 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    c7d2:	2239      	movs	r2, #57	; 0x39
    c7d4:	e7f7      	b.n	c7c6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    c7d6:	2385      	movs	r3, #133	; 0x85
    c7d8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    c7da:	6013      	str	r3, [r2, #0]
    c7dc:	e7e2      	b.n	c7a4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    c7de:	2380      	movs	r3, #128	; 0x80
    c7e0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    c7e2:	6013      	str	r3, [r2, #0]
    c7e4:	e7de      	b.n	c7a4 <analog_init+0x64>
    c7e6:	bf00      	nop
    c7e8:	40074000 	.word	0x40074000
    c7ec:	40074001 	.word	0x40074001
    c7f0:	1fff878a 	.word	0x1fff878a
    c7f4:	4003b008 	.word	0x4003b008
    c7f8:	4003b00c 	.word	0x4003b00c
    c7fc:	400bb008 	.word	0x400bb008
    c800:	400bb00c 	.word	0x400bb00c
    c804:	1fffb198 	.word	0x1fffb198
    c808:	4003b020 	.word	0x4003b020
    c80c:	400bb020 	.word	0x400bb020
    c810:	1fff878b 	.word	0x1fff878b
    c814:	4003b024 	.word	0x4003b024
    c818:	400bb024 	.word	0x400bb024
    c81c:	1fffb195 	.word	0x1fffb195

0000c820 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    c820:	2828      	cmp	r0, #40	; 0x28
    c822:	d82f      	bhi.n	c884 <analogRead+0x64>
	channel = pin2sc1a[pin];
    c824:	4b33      	ldr	r3, [pc, #204]	; (c8f4 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    c826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    c82a:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    c82c:	2eff      	cmp	r6, #255	; 0xff
    c82e:	d02b      	beq.n	c888 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    c830:	4b31      	ldr	r3, [pc, #196]	; (c8f8 <analogRead+0xd8>)
    c832:	781b      	ldrb	r3, [r3, #0]
    c834:	2b00      	cmp	r3, #0
    c836:	d12a      	bne.n	c88e <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    c838:	0632      	lsls	r2, r6, #24
    c83a:	d42c      	bmi.n	c896 <analogRead+0x76>
#endif

	__disable_irq();
    c83c:	b672      	cpsid	i
    c83e:	4d2f      	ldr	r5, [pc, #188]	; (c8fc <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    c840:	4c2f      	ldr	r4, [pc, #188]	; (c900 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    c842:	462f      	mov	r7, r5
    c844:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    c846:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    c848:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    c84a:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    c84c:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    c84e:	6823      	ldr	r3, [r4, #0]
    c850:	061b      	lsls	r3, r3, #24
    c852:	d40c      	bmi.n	c86e <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    c854:	783b      	ldrb	r3, [r7, #0]
    c856:	b91b      	cbnz	r3, c860 <analogRead+0x40>
    c858:	e7f4      	b.n	c844 <analogRead+0x24>
    c85a:	782b      	ldrb	r3, [r5, #0]
    c85c:	2b00      	cmp	r3, #0
    c85e:	d0f1      	beq.n	c844 <analogRead+0x24>
		__enable_irq();
    c860:	b662      	cpsie	i
		yield();
    c862:	f001 fc3f 	bl	e0e4 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    c866:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    c868:	6823      	ldr	r3, [r4, #0]
    c86a:	0618      	lsls	r0, r3, #24
    c86c:	d5f5      	bpl.n	c85a <analogRead+0x3a>
			result = ADC0_RA;
    c86e:	4b25      	ldr	r3, [pc, #148]	; (c904 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    c870:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    c872:	2200      	movs	r2, #0
    c874:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    c876:	b662      	cpsie	i
			result >>= analog_right_shift;
    c878:	4a23      	ldr	r2, [pc, #140]	; (c908 <analogRead+0xe8>)
    c87a:	7810      	ldrb	r0, [r2, #0]
    c87c:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    c880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    c884:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    c886:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    c888:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    c88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    c88e:	f7ff feb5 	bl	c5fc <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    c892:	0632      	lsls	r2, r6, #24
    c894:	d5d2      	bpl.n	c83c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    c896:	b672      	cpsid	i
    c898:	4d1c      	ldr	r5, [pc, #112]	; (c90c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    c89a:	f8df 807c 	ldr.w	r8, [pc, #124]	; c918 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    c89e:	4c1c      	ldr	r4, [pc, #112]	; (c910 <analogRead+0xf0>)
    c8a0:	f006 0740 	and.w	r7, r6, #64	; 0x40
    c8a4:	b2ff      	uxtb	r7, r7
    c8a6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    c8aa:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    c8ae:	b1df      	cbz	r7, c8e8 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    c8b0:	f023 0310 	bic.w	r3, r3, #16
    c8b4:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    c8b8:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    c8ba:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    c8bc:	4a13      	ldr	r2, [pc, #76]	; (c90c <analogRead+0xec>)
    c8be:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    c8c0:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    c8c2:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    c8c4:	6823      	ldr	r3, [r4, #0]
    c8c6:	0619      	lsls	r1, r3, #24
    c8c8:	d40c      	bmi.n	c8e4 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    c8ca:	7813      	ldrb	r3, [r2, #0]
    c8cc:	b91b      	cbnz	r3, c8d6 <analogRead+0xb6>
    c8ce:	e7ec      	b.n	c8aa <analogRead+0x8a>
    c8d0:	782b      	ldrb	r3, [r5, #0]
    c8d2:	2b00      	cmp	r3, #0
    c8d4:	d0e9      	beq.n	c8aa <analogRead+0x8a>
		__enable_irq();
    c8d6:	b662      	cpsie	i
		yield();
    c8d8:	f001 fc04 	bl	e0e4 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    c8dc:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    c8de:	6823      	ldr	r3, [r4, #0]
    c8e0:	061b      	lsls	r3, r3, #24
    c8e2:	d5f5      	bpl.n	c8d0 <analogRead+0xb0>
			result = ADC1_RA;
    c8e4:	4b0b      	ldr	r3, [pc, #44]	; (c914 <analogRead+0xf4>)
    c8e6:	e7c3      	b.n	c870 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    c8e8:	f043 0310 	orr.w	r3, r3, #16
    c8ec:	f8c8 3000 	str.w	r3, [r8]
    c8f0:	e7e2      	b.n	c8b8 <analogRead+0x98>
    c8f2:	bf00      	nop
    c8f4:	000128b8 	.word	0x000128b8
    c8f8:	1fffb195 	.word	0x1fffb195
    c8fc:	1fffb197 	.word	0x1fffb197
    c900:	4003b000 	.word	0x4003b000
    c904:	4003b010 	.word	0x4003b010
    c908:	1fffb194 	.word	0x1fffb194
    c90c:	1fffb196 	.word	0x1fffb196
    c910:	400bb000 	.word	0x400bb000
    c914:	400bb010 	.word	0x400bb010
    c918:	400bb00c 	.word	0x400bb00c

0000c91c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    c91c:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    c91e:	4c10      	ldr	r4, [pc, #64]	; (c960 <fault_isr+0x44>)
    c920:	e008      	b.n	c934 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    c922:	6823      	ldr	r3, [r4, #0]
    c924:	0559      	lsls	r1, r3, #21
    c926:	d40d      	bmi.n	c944 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    c928:	6823      	ldr	r3, [r4, #0]
    c92a:	051a      	lsls	r2, r3, #20
    c92c:	d40f      	bmi.n	c94e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    c92e:	6823      	ldr	r3, [r4, #0]
    c930:	04db      	lsls	r3, r3, #19
    c932:	d411      	bmi.n	c958 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    c934:	6823      	ldr	r3, [r4, #0]
    c936:	0358      	lsls	r0, r3, #13
    c938:	d5f3      	bpl.n	c922 <fault_isr+0x6>
    c93a:	f000 fa37 	bl	cdac <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    c93e:	6823      	ldr	r3, [r4, #0]
    c940:	0559      	lsls	r1, r3, #21
    c942:	d5f1      	bpl.n	c928 <fault_isr+0xc>
    c944:	f001 fc52 	bl	e1ec <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    c948:	6823      	ldr	r3, [r4, #0]
    c94a:	051a      	lsls	r2, r3, #20
    c94c:	d5ef      	bpl.n	c92e <fault_isr+0x12>
    c94e:	f001 fce3 	bl	e318 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    c952:	6823      	ldr	r3, [r4, #0]
    c954:	04db      	lsls	r3, r3, #19
    c956:	d5ed      	bpl.n	c934 <fault_isr+0x18>
    c958:	f001 fd74 	bl	e444 <uart2_status_isr>
    c95c:	e7ea      	b.n	c934 <fault_isr+0x18>
    c95e:	bf00      	nop
    c960:	40048034 	.word	0x40048034

0000c964 <unused_isr>:
	}
}

void unused_isr(void)
{
    c964:	b508      	push	{r3, lr}
	fault_isr();
    c966:	f7ff ffd9 	bl	c91c <fault_isr>
    c96a:	bf00      	nop

0000c96c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    c96c:	4b01      	ldr	r3, [pc, #4]	; (c974 <startup_early_hook+0x8>)
    c96e:	2210      	movs	r2, #16
    c970:	801a      	strh	r2, [r3, #0]
    c972:	4770      	bx	lr
    c974:	40052000 	.word	0x40052000

0000c978 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    c978:	4770      	bx	lr
    c97a:	bf00      	nop

0000c97c <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    c97c:	7800      	ldrb	r0, [r0, #0]
}
    c97e:	fab0 f080 	clz	r0, r0
    c982:	0940      	lsrs	r0, r0, #5
    c984:	4770      	bx	lr
    c986:	bf00      	nop

0000c988 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    c988:	2301      	movs	r3, #1
    c98a:	7003      	strb	r3, [r0, #0]
    c98c:	4770      	bx	lr
    c98e:	bf00      	nop

0000c990 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    c990:	4a1c      	ldr	r2, [pc, #112]	; (ca04 <pinMode.part.2+0x74>)
    c992:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c996:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    c998:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c99a:	d011      	beq.n	c9c0 <pinMode.part.2+0x30>
    c99c:	2904      	cmp	r1, #4
    c99e:	d01b      	beq.n	c9d8 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    c9a0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    c9a4:	2200      	movs	r2, #0
    c9a6:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    c9aa:	b129      	cbz	r1, c9b8 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    c9ac:	2902      	cmp	r1, #2
    c9ae:	d020      	beq.n	c9f2 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    c9b0:	2903      	cmp	r1, #3
    c9b2:	d022      	beq.n	c9fa <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    c9b4:	601a      	str	r2, [r3, #0]
    c9b6:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    c9b8:	f44f 7280 	mov.w	r2, #256	; 0x100
    c9bc:	601a      	str	r2, [r3, #0]
    c9be:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    c9c0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    c9c4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    c9c8:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    c9cc:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    c9ce:	681a      	ldr	r2, [r3, #0]
    c9d0:	f022 0220 	bic.w	r2, r2, #32
    c9d4:	601a      	str	r2, [r3, #0]
    c9d6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    c9d8:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    c9dc:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    c9e0:	2001      	movs	r0, #1
    c9e2:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    c9e6:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    c9e8:	681a      	ldr	r2, [r3, #0]
    c9ea:	f042 0220 	orr.w	r2, r2, #32
    c9ee:	601a      	str	r2, [r3, #0]
    c9f0:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    c9f2:	f240 1203 	movw	r2, #259	; 0x103
    c9f6:	601a      	str	r2, [r3, #0]
    c9f8:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    c9fa:	f44f 7281 	mov.w	r2, #258	; 0x102
    c9fe:	601a      	str	r2, [r3, #0]
    ca00:	4770      	bx	lr
    ca02:	bf00      	nop
    ca04:	000128e4 	.word	0x000128e4

0000ca08 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    ca08:	b430      	push	{r4, r5}
	RTC_SR = 0;
    ca0a:	4b05      	ldr	r3, [pc, #20]	; (ca20 <rtc_set+0x18>)
	RTC_TPR = 0;
    ca0c:	4d05      	ldr	r5, [pc, #20]	; (ca24 <rtc_set+0x1c>)
	RTC_TSR = t;
    ca0e:	4c06      	ldr	r4, [pc, #24]	; (ca28 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    ca10:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    ca12:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    ca14:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    ca16:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    ca18:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    ca1a:	6019      	str	r1, [r3, #0]
}
    ca1c:	bc30      	pop	{r4, r5}
    ca1e:	4770      	bx	lr
    ca20:	4003d014 	.word	0x4003d014
    ca24:	4003d004 	.word	0x4003d004
    ca28:	4003d000 	.word	0x4003d000

0000ca2c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    ca2c:	2821      	cmp	r0, #33	; 0x21
    ca2e:	d801      	bhi.n	ca34 <pinMode+0x8>
    ca30:	f7ff bfae 	b.w	c990 <pinMode.part.2>
    ca34:	4770      	bx	lr
    ca36:	bf00      	nop

0000ca38 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    ca38:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    ca3a:	490c      	ldr	r1, [pc, #48]	; (ca6c <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ca3c:	4b0c      	ldr	r3, [pc, #48]	; (ca70 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ca3e:	4a0d      	ldr	r2, [pc, #52]	; (ca74 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ca40:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    ca42:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ca44:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    ca46:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ca48:	0152      	lsls	r2, r2, #5
    ca4a:	d502      	bpl.n	ca52 <micros+0x1a>
    ca4c:	2b32      	cmp	r3, #50	; 0x32
    ca4e:	bf88      	it	hi
    ca50:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    ca52:	4909      	ldr	r1, [pc, #36]	; (ca78 <micros+0x40>)
    ca54:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    ca58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ca5c:	33ff      	adds	r3, #255	; 0xff
    ca5e:	fba1 1303 	umull	r1, r3, r1, r3
    ca62:	fb02 f000 	mul.w	r0, r2, r0
}
    ca66:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    ca6a:	4770      	bx	lr
    ca6c:	1fffb19c 	.word	0x1fffb19c
    ca70:	e000e018 	.word	0xe000e018
    ca74:	e000ed04 	.word	0xe000ed04
    ca78:	aaaaaaab 	.word	0xaaaaaaab

0000ca7c <delay>:

void delay(uint32_t ms)
{
    ca7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca80:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    ca82:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    ca84:	4f20      	ldr	r7, [pc, #128]	; (cb08 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ca86:	4b21      	ldr	r3, [pc, #132]	; (cb0c <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ca88:	4a21      	ldr	r2, [pc, #132]	; (cb10 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ca8a:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    ca8c:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ca8e:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    ca90:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ca92:	0152      	lsls	r2, r2, #5
    ca94:	d502      	bpl.n	ca9c <delay+0x20>
    ca96:	2b32      	cmp	r3, #50	; 0x32
    ca98:	bf88      	it	hi
    ca9a:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    ca9c:	b395      	cbz	r5, cb04 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    ca9e:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    caa2:	4e1c      	ldr	r6, [pc, #112]	; (cb14 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    caa4:	f8df 9064 	ldr.w	r9, [pc, #100]	; cb0c <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    caa8:	f8df 8064 	ldr.w	r8, [pc, #100]	; cb10 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    caac:	33ff      	adds	r3, #255	; 0xff
    caae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cab2:	fba6 1303 	umull	r1, r3, r6, r3
    cab6:	fb02 f404 	mul.w	r4, r2, r4
    caba:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    cabe:	b672      	cpsid	i
	current = SYST_CVR;
    cac0:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    cac4:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    cac6:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    caca:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    cacc:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    cad0:	33ff      	adds	r3, #255	; 0xff
    cad2:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    cad6:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    cada:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    cade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    cae2:	d002      	beq.n	caea <delay+0x6e>
    cae4:	2932      	cmp	r1, #50	; 0x32
    cae6:	bf88      	it	hi
    cae8:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    caea:	fb00 3302 	mla	r3, r0, r2, r3
    caee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    caf2:	d304      	bcc.n	cafe <delay+0x82>
				ms--;
				if (ms == 0) return;
    caf4:	3d01      	subs	r5, #1
    caf6:	d005      	beq.n	cb04 <delay+0x88>
				start += 1000;
    caf8:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    cafc:	e7df      	b.n	cabe <delay+0x42>
			}
			yield();
    cafe:	f001 faf1 	bl	e0e4 <yield>
		}
    cb02:	e7dc      	b.n	cabe <delay+0x42>
    cb04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb08:	1fffb19c 	.word	0x1fffb19c
    cb0c:	e000e018 	.word	0xe000e018
    cb10:	e000ed04 	.word	0xe000ed04
    cb14:	aaaaaaab 	.word	0xaaaaaaab

0000cb18 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    cb1a:	4b2d      	ldr	r3, [pc, #180]	; (cbd0 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    cb1c:	492d      	ldr	r1, [pc, #180]	; (cbd4 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    cb1e:	f8df e0d0 	ldr.w	lr, [pc, #208]	; cbf0 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    cb22:	f8df c0d0 	ldr.w	ip, [pc, #208]	; cbf4 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    cb26:	4e2c      	ldr	r6, [pc, #176]	; (cbd8 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    cb28:	4d2c      	ldr	r5, [pc, #176]	; (cbdc <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    cb2a:	4c2d      	ldr	r4, [pc, #180]	; (cbe0 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    cb2c:	4a2d      	ldr	r2, [pc, #180]	; (cbe4 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    cb2e:	4f2e      	ldr	r7, [pc, #184]	; (cbe8 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    cb30:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    cb34:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    cb36:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    cb3a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    cb3c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    cb40:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    cb42:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    cb46:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    cb48:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    cb4c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    cb4e:	2000      	movs	r0, #0
    cb50:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    cb52:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    cb54:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    cb58:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    cb5c:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    cb60:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    cb62:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    cb64:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    cb66:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    cb68:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    cb6a:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    cb6c:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    cb6e:	2209      	movs	r2, #9
    cb70:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    cb74:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    cb78:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    cb7c:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    cb80:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    cb84:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    cb88:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    cb8c:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    cb8e:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    cb92:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    cb96:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    cb9a:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    cb9e:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    cba0:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    cba4:	4811      	ldr	r0, [pc, #68]	; (cbec <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    cba6:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    cba8:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    cbac:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    cbb0:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    cbb2:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    cbb4:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    cbb6:	f7ff fdc3 	bl	c740 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    cbba:	2019      	movs	r0, #25
    cbbc:	f7ff ff5e 	bl	ca7c <delay>
	usb_init();
    cbc0:	f000 fe5c 	bl	d87c <usb_init>
	delay(275);
    cbc4:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    cbc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    cbcc:	f7ff bf56 	b.w	ca7c <delay>
    cbd0:	e000e108 	.word	0xe000e108
    cbd4:	40038004 	.word	0x40038004
    cbd8:	40038014 	.word	0x40038014
    cbdc:	40038024 	.word	0x40038024
    cbe0:	4003802c 	.word	0x4003802c
    cbe4:	4003801c 	.word	0x4003801c
    cbe8:	40038034 	.word	0x40038034
    cbec:	400b8000 	.word	0x400b8000
    cbf0:	4003800c 	.word	0x4003800c
    cbf4:	40038008 	.word	0x40038008

0000cbf8 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    cbf8:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    cbfa:	2b03      	cmp	r3, #3
    cbfc:	d814      	bhi.n	cc28 <usb_rx+0x30>
	__disable_irq();
    cbfe:	b672      	cpsid	i
	ret = rx_first[endpoint];
    cc00:	490a      	ldr	r1, [pc, #40]	; (cc2c <usb_rx+0x34>)
    cc02:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    cc06:	b168      	cbz	r0, cc24 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    cc08:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    cc0a:	4c09      	ldr	r4, [pc, #36]	; (cc30 <usb_rx+0x38>)
    cc0c:	8805      	ldrh	r5, [r0, #0]
    cc0e:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    cc12:	6846      	ldr	r6, [r0, #4]
    cc14:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    cc18:	1b52      	subs	r2, r2, r5
    cc1a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    cc1e:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    cc20:	bc70      	pop	{r4, r5, r6}
    cc22:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    cc24:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    cc26:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    cc28:	2000      	movs	r0, #0
    cc2a:	4770      	bx	lr
    cc2c:	1fffb1f8 	.word	0x1fffb1f8
    cc30:	1fffb44c 	.word	0x1fffb44c

0000cc34 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    cc34:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    cc36:	2803      	cmp	r0, #3
    cc38:	d80b      	bhi.n	cc52 <usb_tx_packet_count+0x1e>
	__disable_irq();
    cc3a:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    cc3c:	4b07      	ldr	r3, [pc, #28]	; (cc5c <usb_tx_packet_count+0x28>)
    cc3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cc42:	b143      	cbz	r3, cc56 <usb_tx_packet_count+0x22>
    cc44:	2000      	movs	r0, #0
    cc46:	685b      	ldr	r3, [r3, #4]
    cc48:	3001      	adds	r0, #1
    cc4a:	2b00      	cmp	r3, #0
    cc4c:	d1fb      	bne.n	cc46 <usb_tx_packet_count+0x12>
	__enable_irq();
    cc4e:	b662      	cpsie	i
	return count;
    cc50:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    cc52:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    cc54:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    cc56:	4618      	mov	r0, r3
    cc58:	e7f9      	b.n	cc4e <usb_tx_packet_count+0x1a>
    cc5a:	bf00      	nop
    cc5c:	1fffb24c 	.word	0x1fffb24c

0000cc60 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    cc60:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    cc62:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    cc64:	4a2b      	ldr	r2, [pc, #172]	; (cd14 <usb_rx_memory+0xb4>)
    cc66:	7813      	ldrb	r3, [r2, #0]
    cc68:	071d      	lsls	r5, r3, #28
    cc6a:	d506      	bpl.n	cc7a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    cc6c:	4b2a      	ldr	r3, [pc, #168]	; (cd18 <usb_rx_memory+0xb8>)
    cc6e:	6a19      	ldr	r1, [r3, #32]
    cc70:	2900      	cmp	r1, #0
    cc72:	d036      	beq.n	cce2 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    cc74:	6a99      	ldr	r1, [r3, #40]	; 0x28
    cc76:	2900      	cmp	r1, #0
    cc78:	d041      	beq.n	ccfe <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    cc7a:	7853      	ldrb	r3, [r2, #1]
    cc7c:	071c      	lsls	r4, r3, #28
    cc7e:	d506      	bpl.n	cc8e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    cc80:	4b25      	ldr	r3, [pc, #148]	; (cd18 <usb_rx_memory+0xb8>)
    cc82:	6c19      	ldr	r1, [r3, #64]	; 0x40
    cc84:	2900      	cmp	r1, #0
    cc86:	d03e      	beq.n	cd06 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    cc88:	6c99      	ldr	r1, [r3, #72]	; 0x48
    cc8a:	2900      	cmp	r1, #0
    cc8c:	d039      	beq.n	cd02 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    cc8e:	7893      	ldrb	r3, [r2, #2]
    cc90:	0719      	lsls	r1, r3, #28
    cc92:	d505      	bpl.n	cca0 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    cc94:	4b20      	ldr	r3, [pc, #128]	; (cd18 <usb_rx_memory+0xb8>)
    cc96:	6e19      	ldr	r1, [r3, #96]	; 0x60
    cc98:	2900      	cmp	r1, #0
    cc9a:	d036      	beq.n	cd0a <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    cc9c:	6e99      	ldr	r1, [r3, #104]	; 0x68
    cc9e:	b189      	cbz	r1, ccc4 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    cca0:	78d3      	ldrb	r3, [r2, #3]
    cca2:	071b      	lsls	r3, r3, #28
    cca4:	d507      	bpl.n	ccb6 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    cca6:	4b1c      	ldr	r3, [pc, #112]	; (cd18 <usb_rx_memory+0xb8>)
    cca8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    ccac:	b37a      	cbz	r2, cd0e <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ccae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ccb2:	2111      	movs	r1, #17
    ccb4:	b13a      	cbz	r2, ccc6 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    ccb6:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    ccb8:	4b18      	ldr	r3, [pc, #96]	; (cd1c <usb_rx_memory+0xbc>)
    ccba:	2200      	movs	r2, #0
    ccbc:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    ccbe:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    ccc0:	f000 be68 	b.w	d994 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ccc4:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    ccc6:	4c15      	ldr	r4, [pc, #84]	; (cd1c <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ccc8:	4d15      	ldr	r5, [pc, #84]	; (cd20 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    ccca:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    cccc:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    ccd0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    ccd4:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    ccd6:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    ccd8:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    ccda:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    ccdc:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    ccde:	bc30      	pop	{r4, r5}
    cce0:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    cce2:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    cce4:	4c0d      	ldr	r4, [pc, #52]	; (cd1c <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    cce6:	4d0f      	ldr	r5, [pc, #60]	; (cd24 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    cce8:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ccea:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    ccee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ccf2:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    ccf4:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    ccf6:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    ccf8:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    ccfa:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    ccfc:	e7ef      	b.n	ccde <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ccfe:	2105      	movs	r1, #5
    cd00:	e7e1      	b.n	ccc6 <usb_rx_memory+0x66>
    cd02:	2109      	movs	r1, #9
    cd04:	e7df      	b.n	ccc6 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    cd06:	2208      	movs	r2, #8
    cd08:	e7ec      	b.n	cce4 <usb_rx_memory+0x84>
    cd0a:	220c      	movs	r2, #12
    cd0c:	e7ea      	b.n	cce4 <usb_rx_memory+0x84>
    cd0e:	2210      	movs	r2, #16
    cd10:	e7e8      	b.n	cce4 <usb_rx_memory+0x84>
    cd12:	bf00      	nop
    cd14:	00012a20 	.word	0x00012a20
    cd18:	1fff8000 	.word	0x1fff8000
    cd1c:	1fffb275 	.word	0x1fffb275
    cd20:	004000c8 	.word	0x004000c8
    cd24:	00400088 	.word	0x00400088

0000cd28 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    cd28:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    cd2a:	2b03      	cmp	r3, #3
    cd2c:	d81d      	bhi.n	cd6a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    cd2e:	4a1b      	ldr	r2, [pc, #108]	; (cd9c <usb_tx+0x74>)
    cd30:	0140      	lsls	r0, r0, #5
    cd32:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    cd36:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    cd38:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    cd3a:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    cd3c:	4c18      	ldr	r4, [pc, #96]	; (cda0 <usb_tx+0x78>)
    cd3e:	5ce2      	ldrb	r2, [r4, r3]
    cd40:	2a03      	cmp	r2, #3
    cd42:	d81b      	bhi.n	cd7c <usb_tx+0x54>
    cd44:	e8df f002 	tbb	[pc, r2]
    cd48:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    cd4c:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    cd4e:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    cd50:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    cd52:	f010 0f08 	tst.w	r0, #8
    cd56:	bf14      	ite	ne
    cd58:	23c8      	movne	r3, #200	; 0xc8
    cd5a:	2388      	moveq	r3, #136	; 0x88
    cd5c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    cd60:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    cd62:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    cd64:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    cd66:	b662      	cpsie	i
}
    cd68:	bc30      	pop	{r4, r5}
    cd6a:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    cd6c:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    cd6e:	2202      	movs	r2, #2
		break;
    cd70:	e7ed      	b.n	cd4e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    cd72:	2205      	movs	r2, #5
    cd74:	e7eb      	b.n	cd4e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    cd76:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    cd78:	2204      	movs	r2, #4
		break;
    cd7a:	e7e8      	b.n	cd4e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    cd7c:	4a09      	ldr	r2, [pc, #36]	; (cda4 <usb_tx+0x7c>)
    cd7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    cd82:	b138      	cbz	r0, cd94 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    cd84:	4a08      	ldr	r2, [pc, #32]	; (cda8 <usb_tx+0x80>)
    cd86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    cd8a:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    cd8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    cd90:	b662      	cpsie	i
		return;
    cd92:	e7e9      	b.n	cd68 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    cd94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    cd98:	4a03      	ldr	r2, [pc, #12]	; (cda8 <usb_tx+0x80>)
    cd9a:	e7f7      	b.n	cd8c <usb_tx+0x64>
    cd9c:	1fff8000 	.word	0x1fff8000
    cda0:	1fffb284 	.word	0x1fffb284
    cda4:	1fffb24c 	.word	0x1fffb24c
    cda8:	1fffb25c 	.word	0x1fffb25c

0000cdac <usb_isr>:
}



void usb_isr(void)
{
    cdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    cdb0:	f8df b30c 	ldr.w	fp, [pc, #780]	; d0c0 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    cdb4:	f8df a30c 	ldr.w	sl, [pc, #780]	; d0c4 <usb_isr+0x318>
}



void usb_isr(void)
{
    cdb8:	b087      	sub	sp, #28
    cdba:	e044      	b.n	ce46 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    cdbc:	4fab      	ldr	r7, [pc, #684]	; (d06c <usb_isr+0x2c0>)
    cdbe:	ea4f 0893 	mov.w	r8, r3, lsr #2
    cdc2:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    cdc6:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    cdc8:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    cdcc:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    cdd0:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    cdd2:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    cdd6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    cdda:	2b00      	cmp	r3, #0
    cddc:	f040 8102 	bne.w	cfe4 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    cde0:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    cde4:	0c1b      	lsrs	r3, r3, #16
    cde6:	b299      	uxth	r1, r3
    cde8:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    cdec:	2b00      	cmp	r3, #0
    cdee:	f000 80f0 	beq.w	cfd2 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    cdf2:	4b9f      	ldr	r3, [pc, #636]	; (d070 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    cdf4:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    cdf8:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    cdfc:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    ce00:	2a00      	cmp	r2, #0
    ce02:	f000 82c5 	beq.w	d390 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    ce06:	4d9b      	ldr	r5, [pc, #620]	; (d074 <usb_isr+0x2c8>)
    ce08:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    ce0c:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    ce0e:	4c9a      	ldr	r4, [pc, #616]	; (d078 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    ce10:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    ce14:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    ce18:	4419      	add	r1, r3
    ce1a:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    ce1e:	f000 fd99 	bl	d954 <usb_malloc>
					if (packet) {
    ce22:	2800      	cmp	r0, #0
    ce24:	f000 82ad 	beq.w	d382 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    ce28:	4a94      	ldr	r2, [pc, #592]	; (d07c <usb_isr+0x2d0>)
    ce2a:	4b95      	ldr	r3, [pc, #596]	; (d080 <usb_isr+0x2d4>)
    ce2c:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    ce30:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    ce34:	bf18      	it	ne
    ce36:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    ce38:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    ce3c:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    ce40:	2308      	movs	r3, #8
    ce42:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    ce46:	f89b 4000 	ldrb.w	r4, [fp]
    ce4a:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    ce4c:	0761      	lsls	r1, r4, #29
    ce4e:	d51a      	bpl.n	ce86 <usb_isr+0xda>
		if (usb_configuration) {
    ce50:	4b8c      	ldr	r3, [pc, #560]	; (d084 <usb_isr+0x2d8>)
    ce52:	781b      	ldrb	r3, [r3, #0]
    ce54:	b1a3      	cbz	r3, ce80 <usb_isr+0xd4>
			t = usb_reboot_timer;
    ce56:	498c      	ldr	r1, [pc, #560]	; (d088 <usb_isr+0x2dc>)
    ce58:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    ce5a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    ce5e:	b122      	cbz	r2, ce6a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    ce60:	3b01      	subs	r3, #1
    ce62:	b2db      	uxtb	r3, r3
    ce64:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    ce66:	b903      	cbnz	r3, ce6a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    ce68:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    ce6a:	4988      	ldr	r1, [pc, #544]	; (d08c <usb_isr+0x2e0>)
    ce6c:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    ce6e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    ce72:	b12a      	cbz	r2, ce80 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    ce74:	3b01      	subs	r3, #1
    ce76:	b2db      	uxtb	r3, r3
    ce78:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	f000 8257 	beq.w	d32e <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    ce80:	2304      	movs	r3, #4
    ce82:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    ce86:	f004 0308 	and.w	r3, r4, #8
    ce8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    ce8e:	2b00      	cmp	r3, #0
    ce90:	f000 80cc 	beq.w	d02c <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    ce94:	f89a 3000 	ldrb.w	r3, [sl]
    ce98:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    ce9a:	091e      	lsrs	r6, r3, #4
    ce9c:	d18e      	bne.n	cdbc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    ce9e:	089c      	lsrs	r4, r3, #2
    cea0:	f8df 91c8 	ldr.w	r9, [pc, #456]	; d06c <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    cea4:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    cea8:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    ceac:	f3c2 0283 	ubfx	r2, r2, #2, #4
    ceb0:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    ceb2:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    ceb4:	2a0c      	cmp	r2, #12
    ceb6:	f200 8088 	bhi.w	cfca <usb_isr+0x21e>
    ceba:	e8df f002 	tbb	[pc, r2]
    cebe:	7c7c      	.short	0x7c7c
    cec0:	86868686 	.word	0x86868686
    cec4:	86478686 	.word	0x86478686
    cec8:	8686      	.short	0x8686
    ceca:	07          	.byte	0x07
    cecb:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    cecc:	6808      	ldr	r0, [r1, #0]
    cece:	4d70      	ldr	r5, [pc, #448]	; (d090 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    ced0:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    ced2:	4f70      	ldr	r7, [pc, #448]	; (d094 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    ced4:	4e70      	ldr	r6, [pc, #448]	; (d098 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    ced6:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    ced8:	b281      	uxth	r1, r0
    ceda:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    cede:	4b67      	ldr	r3, [pc, #412]	; (d07c <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    cee0:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    cee2:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    cee6:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    cee8:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    ceea:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    ceee:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    cef0:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    cef4:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    cef8:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    cefc:	4c5b      	ldr	r4, [pc, #364]	; (d06c <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    cefe:	f200 80e3 	bhi.w	d0c8 <usb_isr+0x31c>
    cf02:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    cf06:	f080 8346 	bcs.w	d596 <usb_isr+0x7ea>
    cf0a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    cf0e:	f000 82fc 	beq.w	d50a <usb_isr+0x75e>
    cf12:	f200 828d 	bhi.w	d430 <usb_isr+0x684>
    cf16:	2980      	cmp	r1, #128	; 0x80
    cf18:	f000 8377 	beq.w	d60a <usb_isr+0x85e>
    cf1c:	2982      	cmp	r1, #130	; 0x82
    cf1e:	f040 82fa 	bne.w	d516 <usb_isr+0x76a>
    cf22:	88a9      	ldrh	r1, [r5, #4]
    cf24:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    cf28:	2904      	cmp	r1, #4
    cf2a:	f200 82f4 	bhi.w	d516 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    cf2e:	485b      	ldr	r0, [pc, #364]	; (d09c <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    cf30:	4c5b      	ldr	r4, [pc, #364]	; (d0a0 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    cf32:	0089      	lsls	r1, r1, #2
    cf34:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    cf36:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    cf38:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    cf3a:	7802      	ldrb	r2, [r0, #0]
    cf3c:	0793      	lsls	r3, r2, #30
    cf3e:	f140 8458 	bpl.w	d7f2 <usb_isr+0xa46>
    cf42:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    cf46:	f04f 0e02 	mov.w	lr, #2
    cf4a:	e342      	b.n	d5d2 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    cf4c:	4f51      	ldr	r7, [pc, #324]	; (d094 <usb_isr+0x2e8>)
    cf4e:	683a      	ldr	r2, [r7, #0]
		if (data) {
    cf50:	b332      	cbz	r2, cfa0 <usb_isr+0x1f4>
			size = ep0_tx_len;
    cf52:	4b54      	ldr	r3, [pc, #336]	; (d0a4 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cf54:	4e50      	ldr	r6, [pc, #320]	; (d098 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cf56:	4954      	ldr	r1, [pc, #336]	; (d0a8 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    cf58:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cf5a:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cf5c:	780d      	ldrb	r5, [r1, #0]
    cf5e:	2840      	cmp	r0, #64	; 0x40
    cf60:	4686      	mov	lr, r0
    cf62:	f045 0802 	orr.w	r8, r5, #2
    cf66:	bf28      	it	cs
    cf68:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cf6c:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    cf6e:	f084 0401 	eor.w	r4, r4, #1
    cf72:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    cf74:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cf78:	bf0c      	ite	eq
    cf7a:	2488      	moveq	r4, #136	; 0x88
    cf7c:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cf7e:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    cf82:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    cf84:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cf88:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    cf8c:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    cf8e:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    cf90:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    cf94:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    cf96:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    cf98:	2800      	cmp	r0, #0
    cf9a:	f000 8145 	beq.w	d228 <usb_isr+0x47c>
    cf9e:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    cfa0:	4b3b      	ldr	r3, [pc, #236]	; (d090 <usb_isr+0x2e4>)
    cfa2:	881a      	ldrh	r2, [r3, #0]
    cfa4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    cfa8:	d10f      	bne.n	cfca <usb_isr+0x21e>
			setup.bRequest = 0;
    cfaa:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    cfac:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    cfae:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    cfb0:	4b3e      	ldr	r3, [pc, #248]	; (d0ac <usb_isr+0x300>)
    cfb2:	701a      	strb	r2, [r3, #0]
    cfb4:	e009      	b.n	cfca <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    cfb6:	4a36      	ldr	r2, [pc, #216]	; (d090 <usb_isr+0x2e4>)
    cfb8:	8810      	ldrh	r0, [r2, #0]
    cfba:	f242 0221 	movw	r2, #8225	; 0x2021
    cfbe:	4290      	cmp	r0, r2
    cfc0:	f000 8137 	beq.w	d232 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    cfc4:	4a2d      	ldr	r2, [pc, #180]	; (d07c <usb_isr+0x2d0>)
    cfc6:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    cfca:	4a39      	ldr	r2, [pc, #228]	; (d0b0 <usb_isr+0x304>)
    cfcc:	2301      	movs	r3, #1
    cfce:	7013      	strb	r3, [r2, #0]
    cfd0:	e736      	b.n	ce40 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    cfd2:	4a2a      	ldr	r2, [pc, #168]	; (d07c <usb_isr+0x2d0>)
    cfd4:	4b2a      	ldr	r3, [pc, #168]	; (d080 <usb_isr+0x2d4>)
    cfd6:	f019 0f08 	tst.w	r9, #8
    cfda:	bf18      	it	ne
    cfdc:	4613      	movne	r3, r2
    cfde:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    cfe2:	e72d      	b.n	ce40 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    cfe4:	f000 fcd6 	bl	d994 <usb_free>
				packet = tx_first[endpoint];
    cfe8:	4a32      	ldr	r2, [pc, #200]	; (d0b4 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    cfea:	4933      	ldr	r1, [pc, #204]	; (d0b8 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    cfec:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    cff0:	2b00      	cmp	r3, #0
    cff2:	f000 81d1 	beq.w	d398 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    cff6:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    cff8:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    cffa:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    cffe:	f103 0208 	add.w	r2, r3, #8
    d002:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    d006:	2c03      	cmp	r4, #3
    d008:	d805      	bhi.n	d016 <usb_isr+0x26a>
    d00a:	e8df f004 	tbb	[pc, r4]
    d00e:	022c      	.short	0x022c
    d010:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    d012:	2202      	movs	r2, #2
    d014:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    d016:	881a      	ldrh	r2, [r3, #0]
    d018:	f019 0f08 	tst.w	r9, #8
    d01c:	bf0c      	ite	eq
    d01e:	2388      	moveq	r3, #136	; 0x88
    d020:	23c8      	movne	r3, #200	; 0xc8
    d022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    d026:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    d02a:	e709      	b.n	ce40 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    d02c:	07e0      	lsls	r0, r4, #31
    d02e:	f100 8181 	bmi.w	d334 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    d032:	0621      	lsls	r1, r4, #24
    d034:	f100 81f2 	bmi.w	d41c <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    d038:	07a2      	lsls	r2, r4, #30
    d03a:	d506      	bpl.n	d04a <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    d03c:	4a1f      	ldr	r2, [pc, #124]	; (d0bc <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    d03e:	4920      	ldr	r1, [pc, #128]	; (d0c0 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    d040:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    d042:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    d044:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    d046:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    d048:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    d04a:	06e3      	lsls	r3, r4, #27
    d04c:	d502      	bpl.n	d054 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    d04e:	4b1c      	ldr	r3, [pc, #112]	; (d0c0 <usb_isr+0x314>)
    d050:	2210      	movs	r2, #16
    d052:	701a      	strb	r2, [r3, #0]
	}

}
    d054:	b007      	add	sp, #28
    d056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    d05a:	2204      	movs	r2, #4
    d05c:	558a      	strb	r2, [r1, r6]
						break;
    d05e:	e7da      	b.n	d016 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    d060:	2205      	movs	r2, #5
    d062:	558a      	strb	r2, [r1, r6]
						break;
    d064:	e7d7      	b.n	d016 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    d066:	2203      	movs	r2, #3
    d068:	558a      	strb	r2, [r1, r6]
						break;
    d06a:	e7d4      	b.n	d016 <usb_isr+0x26a>
    d06c:	1fff8000 	.word	0x1fff8000
    d070:	1fffb1f8 	.word	0x1fffb1f8
    d074:	1fffb1a4 	.word	0x1fffb1a4
    d078:	1fffb44c 	.word	0x1fffb44c
    d07c:	004000c8 	.word	0x004000c8
    d080:	00400088 	.word	0x00400088
    d084:	1fffb280 	.word	0x1fffb280
    d088:	1fffb209 	.word	0x1fffb209
    d08c:	1fffb288 	.word	0x1fffb288
    d090:	1fffb26c 	.word	0x1fffb26c
    d094:	1fffb1a0 	.word	0x1fffb1a0
    d098:	1fffb208 	.word	0x1fffb208
    d09c:	400720c0 	.word	0x400720c0
    d0a0:	1fffb278 	.word	0x1fffb278
    d0a4:	1fffb1b4 	.word	0x1fffb1b4
    d0a8:	1fffb274 	.word	0x1fffb274
    d0ac:	40072098 	.word	0x40072098
    d0b0:	40072094 	.word	0x40072094
    d0b4:	1fffb24c 	.word	0x1fffb24c
    d0b8:	1fffb284 	.word	0x1fffb284
    d0bc:	40072088 	.word	0x40072088
    d0c0:	40072080 	.word	0x40072080
    d0c4:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d0c8:	f242 0021 	movw	r0, #8225	; 0x2021
    d0cc:	4281      	cmp	r1, r0
    d0ce:	f000 812a 	beq.w	d326 <usb_isr+0x57a>
    d0d2:	f200 80d8 	bhi.w	d286 <usb_isr+0x4da>
    d0d6:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    d0da:	f000 8276 	beq.w	d5ca <usb_isr+0x81e>
    d0de:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    d0e2:	f040 8218 	bne.w	d516 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    d0e6:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    d0e8:	49b3      	ldr	r1, [pc, #716]	; (d3b8 <usb_isr+0x60c>)
    d0ea:	78a8      	ldrb	r0, [r5, #2]
    d0ec:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    d0ee:	0612      	lsls	r2, r2, #24
    d0f0:	f100 833a 	bmi.w	d768 <usb_isr+0x9bc>
    d0f4:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    d0f8:	49b0      	ldr	r1, [pc, #704]	; (d3bc <usb_isr+0x610>)
    d0fa:	0613      	lsls	r3, r2, #24
    d0fc:	f100 830c 	bmi.w	d718 <usb_isr+0x96c>
    d100:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    d104:	49ad      	ldr	r1, [pc, #692]	; (d3bc <usb_isr+0x610>)
    d106:	0615      	lsls	r5, r2, #24
    d108:	f100 8301 	bmi.w	d70e <usb_isr+0x962>
    d10c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    d110:	49aa      	ldr	r1, [pc, #680]	; (d3bc <usb_isr+0x610>)
    d112:	0614      	lsls	r4, r2, #24
    d114:	f100 82f6 	bmi.w	d704 <usb_isr+0x958>
    d118:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    d11c:	49a7      	ldr	r1, [pc, #668]	; (d3bc <usb_isr+0x610>)
    d11e:	0610      	lsls	r0, r2, #24
    d120:	f100 834a 	bmi.w	d7b8 <usb_isr+0xa0c>
    d124:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    d128:	49a4      	ldr	r1, [pc, #656]	; (d3bc <usb_isr+0x610>)
    d12a:	0612      	lsls	r2, r2, #24
    d12c:	f100 833f 	bmi.w	d7ae <usb_isr+0xa02>
    d130:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    d134:	49a1      	ldr	r1, [pc, #644]	; (d3bc <usb_isr+0x610>)
    d136:	0613      	lsls	r3, r2, #24
    d138:	f100 8334 	bmi.w	d7a4 <usb_isr+0x9f8>
    d13c:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    d140:	499e      	ldr	r1, [pc, #632]	; (d3bc <usb_isr+0x610>)
    d142:	0615      	lsls	r5, r2, #24
    d144:	f100 8329 	bmi.w	d79a <usb_isr+0x9ee>
    d148:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    d14c:	499b      	ldr	r1, [pc, #620]	; (d3bc <usb_isr+0x610>)
    d14e:	0614      	lsls	r4, r2, #24
    d150:	f100 831e 	bmi.w	d790 <usb_isr+0x9e4>
    d154:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    d158:	4998      	ldr	r1, [pc, #608]	; (d3bc <usb_isr+0x610>)
    d15a:	0610      	lsls	r0, r2, #24
    d15c:	f100 8313 	bmi.w	d786 <usb_isr+0x9da>
    d160:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    d164:	4995      	ldr	r1, [pc, #596]	; (d3bc <usb_isr+0x610>)
    d166:	0612      	lsls	r2, r2, #24
    d168:	f100 8308 	bmi.w	d77c <usb_isr+0x9d0>
    d16c:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    d170:	4992      	ldr	r1, [pc, #584]	; (d3bc <usb_isr+0x610>)
    d172:	0613      	lsls	r3, r2, #24
    d174:	f100 82fd 	bmi.w	d772 <usb_isr+0x9c6>
    d178:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    d17c:	498f      	ldr	r1, [pc, #572]	; (d3bc <usb_isr+0x610>)
    d17e:	0615      	lsls	r5, r2, #24
    d180:	f100 8331 	bmi.w	d7e6 <usb_isr+0xa3a>
    d184:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    d188:	498c      	ldr	r1, [pc, #560]	; (d3bc <usb_isr+0x610>)
    d18a:	0614      	lsls	r4, r2, #24
    d18c:	f100 8325 	bmi.w	d7da <usb_isr+0xa2e>
    d190:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    d194:	4989      	ldr	r1, [pc, #548]	; (d3bc <usb_isr+0x610>)
    d196:	0610      	lsls	r0, r2, #24
    d198:	f100 8319 	bmi.w	d7ce <usb_isr+0xa22>
    d19c:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    d1a0:	4986      	ldr	r1, [pc, #536]	; (d3bc <usb_isr+0x610>)
    d1a2:	0612      	lsls	r2, r2, #24
    d1a4:	f100 830d 	bmi.w	d7c2 <usb_isr+0xa16>
    d1a8:	4885      	ldr	r0, [pc, #532]	; (d3c0 <usb_isr+0x614>)
    d1aa:	4a86      	ldr	r2, [pc, #536]	; (d3c4 <usb_isr+0x618>)
    d1ac:	4986      	ldr	r1, [pc, #536]	; (d3c8 <usb_isr+0x61c>)
    d1ae:	9001      	str	r0, [sp, #4]
    d1b0:	4886      	ldr	r0, [pc, #536]	; (d3cc <usb_isr+0x620>)
    d1b2:	4d87      	ldr	r5, [pc, #540]	; (d3d0 <usb_isr+0x624>)
    d1b4:	4c87      	ldr	r4, [pc, #540]	; (d3d4 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    d1b6:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    d1b8:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    d1ba:	9605      	str	r6, [sp, #20]
    d1bc:	9502      	str	r5, [sp, #8]
    d1be:	4680      	mov	r8, r0
    d1c0:	460f      	mov	r7, r1
    d1c2:	4616      	mov	r6, r2
    d1c4:	461d      	mov	r5, r3
    d1c6:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    d1c8:	6830      	ldr	r0, [r6, #0]
			while (p) {
    d1ca:	b128      	cbz	r0, d1d8 <usb_isr+0x42c>
				n = p->next;
    d1cc:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    d1ce:	f000 fbe1 	bl	d994 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    d1d2:	4620      	mov	r0, r4
    d1d4:	2c00      	cmp	r4, #0
    d1d6:	d1f9      	bne.n	d1cc <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    d1d8:	2300      	movs	r3, #0
    d1da:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    d1dc:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    d1de:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    d1e0:	461a      	mov	r2, r3
    d1e2:	2300      	movs	r3, #0
    d1e4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    d1e8:	b128      	cbz	r0, d1f6 <usb_isr+0x44a>
				n = p->next;
    d1ea:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    d1ec:	f000 fbd2 	bl	d994 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    d1f0:	4620      	mov	r0, r4
    d1f2:	2c00      	cmp	r4, #0
    d1f4:	d1f9      	bne.n	d1ea <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    d1f6:	2200      	movs	r2, #0
    d1f8:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    d1fa:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    d1fc:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    d200:	4611      	mov	r1, r2
    d202:	2200      	movs	r2, #0
    d204:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    d208:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    d20a:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    d20c:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    d20e:	f04f 0100 	mov.w	r1, #0
    d212:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    d216:	2b03      	cmp	r3, #3
    d218:	f200 812b 	bhi.w	d472 <usb_isr+0x6c6>
    d21c:	e8df f013 	tbh	[pc, r3, lsl #1]
    d220:	01250170 	.word	0x01250170
    d224:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    d228:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    d22c:	bf18      	it	ne
    d22e:	2200      	movne	r2, #0
    d230:	e6b5      	b.n	cf9e <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    d232:	4a69      	ldr	r2, [pc, #420]	; (d3d8 <usb_isr+0x62c>)
    d234:	780d      	ldrb	r5, [r1, #0]
    d236:	7848      	ldrb	r0, [r1, #1]
    d238:	7015      	strb	r5, [r2, #0]
    d23a:	7050      	strb	r0, [r2, #1]
    d23c:	788d      	ldrb	r5, [r1, #2]
    d23e:	78c8      	ldrb	r0, [r1, #3]
    d240:	7095      	strb	r5, [r2, #2]
    d242:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    d244:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    d246:	790d      	ldrb	r5, [r1, #4]
    d248:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    d24a:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    d24c:	794d      	ldrb	r5, [r1, #5]
    d24e:	7989      	ldrb	r1, [r1, #6]
    d250:	7155      	strb	r5, [r2, #5]
    d252:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    d254:	f000 819b 	beq.w	d58e <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d258:	4960      	ldr	r1, [pc, #384]	; (d3dc <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d25a:	4e61      	ldr	r6, [pc, #388]	; (d3e0 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d25c:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d25e:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d260:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d264:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d266:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d26a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d26c:	bf0c      	ite	eq
    d26e:	2188      	moveq	r1, #136	; 0x88
    d270:	21c8      	movne	r1, #200	; 0xc8
    d272:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d276:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    d27a:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d27e:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    d280:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d282:	6051      	str	r1, [r2, #4]
    d284:	e69e      	b.n	cfc4 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d286:	f242 2021 	movw	r0, #8737	; 0x2221
    d28a:	4281      	cmp	r1, r0
    d28c:	f040 81cb 	bne.w	d626 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    d290:	4b54      	ldr	r3, [pc, #336]	; (d3e4 <usb_isr+0x638>)
    d292:	4c55      	ldr	r4, [pc, #340]	; (d3e8 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    d294:	4955      	ldr	r1, [pc, #340]	; (d3ec <usb_isr+0x640>)
    d296:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    d298:	681d      	ldr	r5, [r3, #0]
    d29a:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    d29c:	f8cd e004 	str.w	lr, [sp, #4]
    d2a0:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    d2a2:	2000      	movs	r0, #0
    d2a4:	9002      	str	r0, [sp, #8]
    d2a6:	4680      	mov	r8, r0
    d2a8:	4684      	mov	ip, r0
    d2aa:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d2ac:	494b      	ldr	r1, [pc, #300]	; (d3dc <usb_isr+0x630>)
    d2ae:	780d      	ldrb	r5, [r1, #0]
    d2b0:	f045 0e02 	orr.w	lr, r5, #2
    d2b4:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    d2b8:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d2ba:	9b01      	ldr	r3, [sp, #4]
    d2bc:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d2be:	9b03      	ldr	r3, [sp, #12]
    d2c0:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d2c2:	bf0c      	ite	eq
    d2c4:	2488      	moveq	r4, #136	; 0x88
    d2c6:	24c8      	movne	r4, #200	; 0xc8
    d2c8:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d2cc:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d2d0:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    d2d4:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    d2d6:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d2d8:	f8df e0e0 	ldr.w	lr, [pc, #224]	; d3bc <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    d2dc:	4b40      	ldr	r3, [pc, #256]	; (d3e0 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    d2de:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d3dc <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    d2e2:	2800      	cmp	r0, #0
    d2e4:	f040 811e 	bne.w	d524 <usb_isr+0x778>
    d2e8:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    d2ec:	d11b      	bne.n	d326 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d2ee:	f044 0c02 	orr.w	ip, r4, #2
    d2f2:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    d2f6:	9c02      	ldr	r4, [sp, #8]
    d2f8:	f8df e0c0 	ldr.w	lr, [pc, #192]	; d3bc <usb_isr+0x610>
    d2fc:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d2fe:	2a00      	cmp	r2, #0
    d300:	f040 8126 	bne.w	d550 <usb_isr+0x7a4>
    d304:	0402      	lsls	r2, r0, #16
    d306:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    d30a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d30e:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d312:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    d314:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    d316:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d318:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    d31a:	2840      	cmp	r0, #64	; 0x40
    d31c:	d103      	bne.n	d326 <usb_isr+0x57a>
    d31e:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    d320:	4a33      	ldr	r2, [pc, #204]	; (d3f0 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    d322:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    d324:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    d326:	4a33      	ldr	r2, [pc, #204]	; (d3f4 <usb_isr+0x648>)
    d328:	2301      	movs	r3, #1
    d32a:	7013      	strb	r3, [r2, #0]
    d32c:	e64d      	b.n	cfca <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    d32e:	f000 fc9d 	bl	dc6c <usb_serial_flush_callback>
    d332:	e5a5      	b.n	ce80 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    d334:	4b21      	ldr	r3, [pc, #132]	; (d3bc <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    d336:	482f      	ldr	r0, [pc, #188]	; (d3f4 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    d338:	4928      	ldr	r1, [pc, #160]	; (d3dc <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    d33a:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    d33c:	f04f 0e02 	mov.w	lr, #2
    d340:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d344:	4f2c      	ldr	r7, [pc, #176]	; (d3f8 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    d346:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    d348:	492c      	ldr	r1, [pc, #176]	; (d3fc <usb_isr+0x650>)
    d34a:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    d34c:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    d34e:	4e2c      	ldr	r6, [pc, #176]	; (d400 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    d350:	4d2c      	ldr	r5, [pc, #176]	; (d404 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    d352:	4c2d      	ldr	r4, [pc, #180]	; (d408 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    d354:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d356:	210d      	movs	r1, #13
    d358:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    d35a:	21ff      	movs	r1, #255	; 0xff
    d35c:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    d35e:	f8df e0b8 	ldr.w	lr, [pc, #184]	; d418 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    d362:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    d364:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    d366:	4d29      	ldr	r5, [pc, #164]	; (d40c <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    d368:	4a29      	ldr	r2, [pc, #164]	; (d410 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    d36a:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    d36e:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    d370:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    d372:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    d376:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    d378:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    d37a:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    d37c:	b007      	add	sp, #28
    d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    d382:	4a24      	ldr	r2, [pc, #144]	; (d414 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    d384:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    d388:	7813      	ldrb	r3, [r2, #0]
    d38a:	3301      	adds	r3, #1
    d38c:	7013      	strb	r3, [r2, #0]
    d38e:	e557      	b.n	ce40 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    d390:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    d394:	4d0e      	ldr	r5, [pc, #56]	; (d3d0 <usb_isr+0x624>)
    d396:	e53a      	b.n	ce0e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    d398:	5d8b      	ldrb	r3, [r1, r6]
    d39a:	2b03      	cmp	r3, #3
    d39c:	f200 80f0 	bhi.w	d580 <usb_isr+0x7d4>
    d3a0:	a201      	add	r2, pc, #4	; (adr r2, d3a8 <usb_isr+0x5fc>)
    d3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d3a6:	bf00      	nop
    d3a8:	0000ce41 	.word	0x0000ce41
    d3ac:	0000ce41 	.word	0x0000ce41
    d3b0:	0000d465 	.word	0x0000d465
    d3b4:	0000d45f 	.word	0x0000d45f
    d3b8:	1fffb280 	.word	0x1fffb280
    d3bc:	1fff8000 	.word	0x1fff8000
    d3c0:	1fffb25c 	.word	0x1fffb25c
    d3c4:	1fffb1f8 	.word	0x1fffb1f8
    d3c8:	1fffb24c 	.word	0x1fffb24c
    d3cc:	1fffb284 	.word	0x1fffb284
    d3d0:	1fffb1a4 	.word	0x1fffb1a4
    d3d4:	1fffb44c 	.word	0x1fffb44c
    d3d8:	1fffb454 	.word	0x1fffb454
    d3dc:	1fffb274 	.word	0x1fffb274
    d3e0:	1fffb208 	.word	0x1fffb208
    d3e4:	1fffb19c 	.word	0x1fffb19c
    d3e8:	1fffb45c 	.word	0x1fffb45c
    d3ec:	1fffb298 	.word	0x1fffb298
    d3f0:	1fffb1b4 	.word	0x1fffb1b4
    d3f4:	40072094 	.word	0x40072094
    d3f8:	400720c0 	.word	0x400720c0
    d3fc:	00400088 	.word	0x00400088
    d400:	40072088 	.word	0x40072088
    d404:	40072080 	.word	0x40072080
    d408:	40072098 	.word	0x40072098
    d40c:	1fffb1b8 	.word	0x1fffb1b8
    d410:	1fffb20c 	.word	0x1fffb20c
    d414:	1fffb275 	.word	0x1fffb275
    d418:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d41c:	49c1      	ldr	r1, [pc, #772]	; (d724 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    d41e:	4bc2      	ldr	r3, [pc, #776]	; (d728 <usb_isr+0x97c>)
    d420:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d422:	200d      	movs	r0, #13
    d424:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    d426:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    d428:	07a2      	lsls	r2, r4, #30
    d42a:	f57f ae0e 	bpl.w	d04a <usb_isr+0x29e>
    d42e:	e605      	b.n	d03c <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d430:	f240 3202 	movw	r2, #770	; 0x302
    d434:	4291      	cmp	r1, r2
    d436:	f040 80ee 	bne.w	d616 <usb_isr+0x86a>
    d43a:	88a9      	ldrh	r1, [r5, #4]
    d43c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    d440:	2904      	cmp	r1, #4
    d442:	d868      	bhi.n	d516 <usb_isr+0x76a>
    d444:	886a      	ldrh	r2, [r5, #2]
    d446:	2a00      	cmp	r2, #0
    d448:	d165      	bne.n	d516 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    d44a:	48b6      	ldr	r0, [pc, #728]	; (d724 <usb_isr+0x978>)
    d44c:	f8cd e004 	str.w	lr, [sp, #4]
    d450:	0089      	lsls	r1, r1, #2
    d452:	4408      	add	r0, r1
    d454:	7801      	ldrb	r1, [r0, #0]
    d456:	f041 0102 	orr.w	r1, r1, #2
    d45a:	7001      	strb	r1, [r0, #0]
    d45c:	e721      	b.n	d2a2 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    d45e:	2301      	movs	r3, #1
    d460:	558b      	strb	r3, [r1, r6]
						break;
    d462:	e4ed      	b.n	ce40 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    d464:	2300      	movs	r3, #0
    d466:	558b      	strb	r3, [r1, r6]
						break;
    d468:	e4ea      	b.n	ce40 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    d46a:	f04f 0301 	mov.w	r3, #1
    d46e:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    d472:	3501      	adds	r5, #1
    d474:	2d04      	cmp	r5, #4
    d476:	f106 0604 	add.w	r6, r6, #4
    d47a:	f107 0704 	add.w	r7, r7, #4
    d47e:	f108 0801 	add.w	r8, r8, #1
    d482:	f47f aea1 	bne.w	d1c8 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d486:	4ca9      	ldr	r4, [pc, #676]	; (d72c <usb_isr+0x980>)
			*reg = epconf;
    d488:	4ba9      	ldr	r3, [pc, #676]	; (d730 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d48a:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    d48c:	4da9      	ldr	r5, [pc, #676]	; (d734 <usb_isr+0x988>)
    d48e:	9f04      	ldr	r7, [sp, #16]
    d490:	9e05      	ldr	r6, [sp, #20]
    d492:	2100      	movs	r1, #0
    d494:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d496:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d498:	0713      	lsls	r3, r2, #28
    d49a:	f100 8105 	bmi.w	d6a8 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d49e:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    d4a0:	49a5      	ldr	r1, [pc, #660]	; (d738 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d4a2:	f8df 82a0 	ldr.w	r8, [pc, #672]	; d744 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d4a6:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d4a8:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d4aa:	f04f 0100 	mov.w	r1, #0
    d4ae:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    d4b2:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d4b6:	f100 80e0 	bmi.w	d67a <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d4ba:	49a0      	ldr	r1, [pc, #640]	; (d73c <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d4bc:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    d4be:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d4c0:	2100      	movs	r1, #0
    d4c2:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    d4c6:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d4ca:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d4cc:	f8df 8274 	ldr.w	r8, [pc, #628]	; d744 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d4d0:	f100 8101 	bmi.w	d6d6 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    d4d4:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    d4d6:	499a      	ldr	r1, [pc, #616]	; (d740 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d4d8:	4c9a      	ldr	r4, [pc, #616]	; (d744 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    d4da:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d4dc:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d4de:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d4e0:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    d4e4:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    d4e8:	f100 80b0 	bmi.w	d64c <usb_isr+0x8a0>
    d4ec:	7833      	ldrb	r3, [r6, #0]
    d4ee:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    d4f0:	2100      	movs	r1, #0
    d4f2:	f083 0201 	eor.w	r2, r3, #1
    d4f6:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    d4fa:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    d4fe:	e6d0      	b.n	d2a2 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    d500:	f04f 0300 	mov.w	r3, #0
    d504:	f888 3000 	strb.w	r3, [r8]
    d508:	e7b3      	b.n	d472 <usb_isr+0x6c6>
    d50a:	88a9      	ldrh	r1, [r5, #4]
    d50c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    d510:	2904      	cmp	r1, #4
    d512:	f240 808d 	bls.w	d630 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    d516:	4a83      	ldr	r2, [pc, #524]	; (d724 <usb_isr+0x978>)
    d518:	230f      	movs	r3, #15
    d51a:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    d51c:	4a8a      	ldr	r2, [pc, #552]	; (d748 <usb_isr+0x99c>)
    d51e:	2301      	movs	r3, #1
    d520:	7013      	strb	r3, [r2, #0]
    d522:	e552      	b.n	cfca <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    d524:	2840      	cmp	r0, #64	; 0x40
    d526:	f67f aee2 	bls.w	d2ee <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d52a:	f044 0402 	orr.w	r4, r4, #2
    d52e:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    d532:	9e02      	ldr	r6, [sp, #8]
    d534:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d536:	b1ba      	cbz	r2, d568 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    d538:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d53c:	4a83      	ldr	r2, [pc, #524]	; (d74c <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    d53e:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d540:	4633      	mov	r3, r6
    d542:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d544:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d548:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d54a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    d54e:	e6e7      	b.n	d320 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    d550:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d554:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d556:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d558:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d55a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d55c:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d560:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d562:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    d566:	e6d8      	b.n	d31a <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    d568:	f89d 1004 	ldrb.w	r1, [sp, #4]
    d56c:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d56e:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d570:	4a77      	ldr	r2, [pc, #476]	; (d750 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    d572:	f888 5000 	strb.w	r5, [r8]
    d576:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    d578:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d57a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    d57e:	e6cf      	b.n	d320 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    d580:	f019 0f08 	tst.w	r9, #8
    d584:	bf0c      	ite	eq
    d586:	2302      	moveq	r3, #2
    d588:	2303      	movne	r3, #3
    d58a:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    d58c:	e458      	b.n	ce40 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    d58e:	4a71      	ldr	r2, [pc, #452]	; (d754 <usb_isr+0x9a8>)
    d590:	210f      	movs	r1, #15
    d592:	7011      	strb	r1, [r2, #0]
    d594:	e660      	b.n	d258 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    d596:	4a70      	ldr	r2, [pc, #448]	; (d758 <usb_isr+0x9ac>)
    d598:	6854      	ldr	r4, [r2, #4]
    d59a:	2c00      	cmp	r4, #0
    d59c:	d0bb      	beq.n	d516 <usb_isr+0x76a>
    d59e:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    d5a0:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    d5a4:	e003      	b.n	d5ae <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    d5a6:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    d5a8:	6854      	ldr	r4, [r2, #4]
    d5aa:	2c00      	cmp	r4, #0
    d5ac:	d0b3      	beq.n	d516 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    d5ae:	8813      	ldrh	r3, [r2, #0]
    d5b0:	4283      	cmp	r3, r0
    d5b2:	d1f8      	bne.n	d5a6 <usb_isr+0x7fa>
    d5b4:	8853      	ldrh	r3, [r2, #2]
    d5b6:	4573      	cmp	r3, lr
    d5b8:	d1f5      	bne.n	d5a6 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    d5ba:	0a00      	lsrs	r0, r0, #8
    d5bc:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    d5be:	bf0c      	ite	eq
    d5c0:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    d5c4:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    d5c8:	e003      	b.n	d5d2 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    d5ca:	4a64      	ldr	r2, [pc, #400]	; (d75c <usb_isr+0x9b0>)
    d5cc:	4c64      	ldr	r4, [pc, #400]	; (d760 <usb_isr+0x9b4>)
    d5ce:	7812      	ldrb	r2, [r2, #0]
    d5d0:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    d5d2:	88e8      	ldrh	r0, [r5, #6]
    d5d4:	4570      	cmp	r0, lr
    d5d6:	f080 813f 	bcs.w	d858 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    d5da:	4962      	ldr	r1, [pc, #392]	; (d764 <usb_isr+0x9b8>)
    d5dc:	780d      	ldrb	r5, [r1, #0]
    d5de:	2840      	cmp	r0, #64	; 0x40
    d5e0:	4684      	mov	ip, r0
    d5e2:	f045 0e02 	orr.w	lr, r5, #2
    d5e6:	bf28      	it	cs
    d5e8:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    d5ec:	eb04 030c 	add.w	r3, r4, ip
    d5f0:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    d5f4:	9302      	str	r3, [sp, #8]
    d5f6:	2301      	movs	r3, #1
    d5f8:	6054      	str	r4, [r2, #4]
    d5fa:	ebcc 0000 	rsb	r0, ip, r0
    d5fe:	ea4f 480c 	mov.w	r8, ip, lsl #16
    d602:	2200      	movs	r2, #0
    d604:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    d606:	24c8      	movs	r4, #200	; 0xc8
    d608:	e65e      	b.n	d2c8 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    d60a:	4c55      	ldr	r4, [pc, #340]	; (d760 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    d60c:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    d610:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    d612:	7062      	strb	r2, [r4, #1]
    d614:	e7dd      	b.n	d5d2 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    d616:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    d61a:	f47f af7c 	bne.w	d516 <usb_isr+0x76a>
    d61e:	2301      	movs	r3, #1
    d620:	2200      	movs	r2, #0
    d622:	9301      	str	r3, [sp, #4]
    d624:	e63d      	b.n	d2a2 <usb_isr+0x4f6>
    d626:	f242 3221 	movw	r2, #8993	; 0x2321
    d62a:	4291      	cmp	r1, r2
    d62c:	d0f7      	beq.n	d61e <usb_isr+0x872>
    d62e:	e772      	b.n	d516 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    d630:	886a      	ldrh	r2, [r5, #2]
    d632:	2a00      	cmp	r2, #0
    d634:	f47f af6f 	bne.w	d516 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    d638:	483a      	ldr	r0, [pc, #232]	; (d724 <usb_isr+0x978>)
    d63a:	f8cd e004 	str.w	lr, [sp, #4]
    d63e:	0089      	lsls	r1, r1, #2
    d640:	4408      	add	r0, r1
    d642:	7801      	ldrb	r1, [r0, #0]
    d644:	f021 0102 	bic.w	r1, r1, #2
    d648:	7001      	strb	r1, [r0, #0]
    d64a:	e62a      	b.n	d2a2 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d64c:	f000 f982 	bl	d954 <usb_malloc>
				if (p) {
    d650:	2800      	cmp	r0, #0
    d652:	f000 80ef 	beq.w	d834 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    d656:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d658:	4a3d      	ldr	r2, [pc, #244]	; (d750 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d65a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d65e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d662:	f000 f977 	bl	d954 <usb_malloc>
				if (p) {
    d666:	2800      	cmp	r0, #0
    d668:	f000 80de 	beq.w	d828 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    d66c:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d66e:	4a37      	ldr	r2, [pc, #220]	; (d74c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d670:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d674:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    d678:	e738      	b.n	d4ec <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d67a:	f000 f96b 	bl	d954 <usb_malloc>
				if (p) {
    d67e:	2800      	cmp	r0, #0
    d680:	f000 80c0 	beq.w	d804 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    d684:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d686:	4a32      	ldr	r2, [pc, #200]	; (d750 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d688:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d68c:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d690:	f000 f960 	bl	d954 <usb_malloc>
				if (p) {
    d694:	2800      	cmp	r0, #0
    d696:	f000 80af 	beq.w	d7f8 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    d69a:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d69c:	4a2b      	ldr	r2, [pc, #172]	; (d74c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d69e:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d6a2:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    d6a6:	e708      	b.n	d4ba <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d6a8:	f000 f954 	bl	d954 <usb_malloc>
				if (p) {
    d6ac:	2800      	cmp	r0, #0
    d6ae:	f000 80cd 	beq.w	d84c <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    d6b2:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d6b4:	4a26      	ldr	r2, [pc, #152]	; (d750 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d6b6:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d6ba:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d6be:	f000 f949 	bl	d954 <usb_malloc>
				if (p) {
    d6c2:	2800      	cmp	r0, #0
    d6c4:	f000 80bc 	beq.w	d840 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    d6c8:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d6ca:	4a20      	ldr	r2, [pc, #128]	; (d74c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d6cc:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d6d0:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    d6d4:	e6e3      	b.n	d49e <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    d6d6:	f000 f93d 	bl	d954 <usb_malloc>
				if (p) {
    d6da:	2800      	cmp	r0, #0
    d6dc:	f000 809e 	beq.w	d81c <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    d6e0:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d6e2:	4a1b      	ldr	r2, [pc, #108]	; (d750 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    d6e4:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    d6e8:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    d6ec:	f000 f932 	bl	d954 <usb_malloc>
				if (p) {
    d6f0:	2800      	cmp	r0, #0
    d6f2:	f000 808d 	beq.w	d810 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    d6f6:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d6f8:	4a14      	ldr	r2, [pc, #80]	; (d74c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    d6fa:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    d6fe:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    d702:	e6e7      	b.n	d4d4 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    d704:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    d706:	3808      	subs	r0, #8
    d708:	f000 f944 	bl	d994 <usb_free>
    d70c:	e504      	b.n	d118 <usb_isr+0x36c>
    d70e:	6b48      	ldr	r0, [r1, #52]	; 0x34
    d710:	3808      	subs	r0, #8
    d712:	f000 f93f 	bl	d994 <usb_free>
    d716:	e4f9      	b.n	d10c <usb_isr+0x360>
    d718:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    d71a:	3808      	subs	r0, #8
    d71c:	f000 f93a 	bl	d994 <usb_free>
    d720:	e4ee      	b.n	d100 <usb_isr+0x354>
    d722:	bf00      	nop
    d724:	400720c0 	.word	0x400720c0
    d728:	40072080 	.word	0x40072080
    d72c:	00012a20 	.word	0x00012a20
    d730:	400720c4 	.word	0x400720c4
    d734:	1fffb275 	.word	0x1fffb275
    d738:	400720c8 	.word	0x400720c8
    d73c:	400720cc 	.word	0x400720cc
    d740:	400720d0 	.word	0x400720d0
    d744:	1fff8000 	.word	0x1fff8000
    d748:	40072094 	.word	0x40072094
    d74c:	004000c8 	.word	0x004000c8
    d750:	00400088 	.word	0x00400088
    d754:	1fffb209 	.word	0x1fffb209
    d758:	00012a24 	.word	0x00012a24
    d75c:	1fffb280 	.word	0x1fffb280
    d760:	1fffb278 	.word	0x1fffb278
    d764:	1fffb274 	.word	0x1fffb274
    d768:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d76a:	3808      	subs	r0, #8
    d76c:	f000 f912 	bl	d994 <usb_free>
    d770:	e4c0      	b.n	d0f4 <usb_isr+0x348>
    d772:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    d774:	3808      	subs	r0, #8
    d776:	f000 f90d 	bl	d994 <usb_free>
    d77a:	e4fd      	b.n	d178 <usb_isr+0x3cc>
    d77c:	6f48      	ldr	r0, [r1, #116]	; 0x74
    d77e:	3808      	subs	r0, #8
    d780:	f000 f908 	bl	d994 <usb_free>
    d784:	e4f2      	b.n	d16c <usb_isr+0x3c0>
    d786:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    d788:	3808      	subs	r0, #8
    d78a:	f000 f903 	bl	d994 <usb_free>
    d78e:	e4e7      	b.n	d160 <usb_isr+0x3b4>
    d790:	6e48      	ldr	r0, [r1, #100]	; 0x64
    d792:	3808      	subs	r0, #8
    d794:	f000 f8fe 	bl	d994 <usb_free>
    d798:	e4dc      	b.n	d154 <usb_isr+0x3a8>
    d79a:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    d79c:	3808      	subs	r0, #8
    d79e:	f000 f8f9 	bl	d994 <usb_free>
    d7a2:	e4d1      	b.n	d148 <usb_isr+0x39c>
    d7a4:	6d48      	ldr	r0, [r1, #84]	; 0x54
    d7a6:	3808      	subs	r0, #8
    d7a8:	f000 f8f4 	bl	d994 <usb_free>
    d7ac:	e4c6      	b.n	d13c <usb_isr+0x390>
    d7ae:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    d7b0:	3808      	subs	r0, #8
    d7b2:	f000 f8ef 	bl	d994 <usb_free>
    d7b6:	e4bb      	b.n	d130 <usb_isr+0x384>
    d7b8:	6c48      	ldr	r0, [r1, #68]	; 0x44
    d7ba:	3808      	subs	r0, #8
    d7bc:	f000 f8ea 	bl	d994 <usb_free>
    d7c0:	e4b0      	b.n	d124 <usb_isr+0x378>
    d7c2:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    d7c6:	3808      	subs	r0, #8
    d7c8:	f000 f8e4 	bl	d994 <usb_free>
    d7cc:	e4ec      	b.n	d1a8 <usb_isr+0x3fc>
    d7ce:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    d7d2:	3808      	subs	r0, #8
    d7d4:	f000 f8de 	bl	d994 <usb_free>
    d7d8:	e4e0      	b.n	d19c <usb_isr+0x3f0>
    d7da:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    d7de:	3808      	subs	r0, #8
    d7e0:	f000 f8d8 	bl	d994 <usb_free>
    d7e4:	e4d4      	b.n	d190 <usb_isr+0x3e4>
    d7e6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    d7ea:	3808      	subs	r0, #8
    d7ec:	f000 f8d2 	bl	d994 <usb_free>
    d7f0:	e4c8      	b.n	d184 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    d7f2:	f04f 0e02 	mov.w	lr, #2
    d7f6:	e6ec      	b.n	d5d2 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d7f8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d7fa:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    d7fe:	3201      	adds	r2, #1
    d800:	702a      	strb	r2, [r5, #0]
    d802:	e65a      	b.n	d4ba <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d804:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d806:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    d80a:	3201      	adds	r2, #1
    d80c:	702a      	strb	r2, [r5, #0]
    d80e:	e73f      	b.n	d690 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d810:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d812:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    d816:	3201      	adds	r2, #1
    d818:	702a      	strb	r2, [r5, #0]
    d81a:	e65b      	b.n	d4d4 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d81c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d81e:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    d822:	3201      	adds	r2, #1
    d824:	702a      	strb	r2, [r5, #0]
    d826:	e761      	b.n	d6ec <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d828:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d82a:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    d82e:	3201      	adds	r2, #1
    d830:	702a      	strb	r2, [r5, #0]
    d832:	e65b      	b.n	d4ec <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d834:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d836:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    d83a:	3201      	adds	r2, #1
    d83c:	702a      	strb	r2, [r5, #0]
    d83e:	e710      	b.n	d662 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    d840:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    d842:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    d846:	3201      	adds	r2, #1
    d848:	702a      	strb	r2, [r5, #0]
    d84a:	e628      	b.n	d49e <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    d84c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    d84e:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    d852:	3201      	adds	r2, #1
    d854:	702a      	strb	r2, [r5, #0]
    d856:	e732      	b.n	d6be <usb_isr+0x912>
    d858:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    d85c:	46f4      	mov	ip, lr
    d85e:	bf28      	it	cs
    d860:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    d864:	eb04 030c 	add.w	r3, r4, ip
    d868:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    d86a:	2301      	movs	r3, #1
    d86c:	ebcc 000e 	rsb	r0, ip, lr
    d870:	ea4f 480c 	mov.w	r8, ip, lsl #16
    d874:	2200      	movs	r2, #0
    d876:	9301      	str	r3, [sp, #4]
    d878:	e518      	b.n	d2ac <usb_isr+0x500>
    d87a:	bf00      	nop

0000d87c <usb_init>:
}



void usb_init(void)
{
    d87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    d87e:	f000 fe4d 	bl	e51c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d882:	4b29      	ldr	r3, [pc, #164]	; (d928 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    d884:	4829      	ldr	r0, [pc, #164]	; (d92c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    d886:	4c2a      	ldr	r4, [pc, #168]	; (d930 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    d888:	4f2a      	ldr	r7, [pc, #168]	; (d934 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    d88a:	4d2b      	ldr	r5, [pc, #172]	; (d938 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    d88c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; d94c <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    d890:	f8df e0bc 	ldr.w	lr, [pc, #188]	; d950 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    d894:	4e29      	ldr	r6, [pc, #164]	; (d93c <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d896:	2200      	movs	r2, #0
    d898:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    d89a:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d89c:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    d89e:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8a0:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    d8a2:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8a4:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    d8a6:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8a8:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    d8aa:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8ac:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    d8ae:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8b0:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    d8b2:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8b4:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    d8b6:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8b8:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    d8ba:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8bc:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    d8be:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8c0:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    d8c2:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8c4:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    d8c6:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8c8:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    d8ca:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8cc:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    d8ce:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8d0:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    d8d2:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8d4:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    d8d6:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    d8d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    d8dc:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    d8de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    d8e2:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    d8e6:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    d8e8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d8ec:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    d8ee:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    d8f2:	4913      	ldr	r1, [pc, #76]	; (d940 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    d8f4:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    d8f6:	0e1b      	lsrs	r3, r3, #24
    d8f8:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    d8fa:	23ff      	movs	r3, #255	; 0xff
    d8fc:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    d900:	4d10      	ldr	r5, [pc, #64]	; (d944 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    d902:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    d906:	4810      	ldr	r0, [pc, #64]	; (d948 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    d908:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    d90a:	2301      	movs	r3, #1
    d90c:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    d90e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    d912:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    d914:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    d918:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    d91a:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    d91e:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    d920:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    d922:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    d926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d928:	1fff8000 	.word	0x1fff8000
    d92c:	40048034 	.word	0x40048034
    d930:	4007209c 	.word	0x4007209c
    d934:	400720b0 	.word	0x400720b0
    d938:	400720b4 	.word	0x400720b4
    d93c:	40072094 	.word	0x40072094
    d940:	40072010 	.word	0x40072010
    d944:	e000e449 	.word	0xe000e449
    d948:	e000e108 	.word	0xe000e108
    d94c:	40072080 	.word	0x40072080
    d950:	40072088 	.word	0x40072088

0000d954 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    d954:	b672      	cpsid	i
	avail = usb_buffer_available;
    d956:	480d      	ldr	r0, [pc, #52]	; (d98c <usb_malloc+0x38>)
    d958:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    d95a:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    d95e:	2b0b      	cmp	r3, #11
    d960:	dc10      	bgt.n	d984 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    d962:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    d966:	40d9      	lsrs	r1, r3
    d968:	ea22 0201 	bic.w	r2, r2, r1
    d96c:	6002      	str	r2, [r0, #0]
	__enable_irq();
    d96e:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    d970:	4807      	ldr	r0, [pc, #28]	; (d990 <usb_malloc+0x3c>)
    d972:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    d976:	00db      	lsls	r3, r3, #3
    d978:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    d97a:	2100      	movs	r1, #0
    d97c:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    d97e:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    d980:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    d982:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    d984:	b662      	cpsie	i
		return NULL;
    d986:	2000      	movs	r0, #0
    d988:	4770      	bx	lr
    d98a:	bf00      	nop
    d98c:	1fff878c 	.word	0x1fff878c
    d990:	1fff83bc 	.word	0x1fff83bc

0000d994 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    d994:	4b0d      	ldr	r3, [pc, #52]	; (d9cc <usb_free+0x38>)
    d996:	4a0e      	ldr	r2, [pc, #56]	; (d9d0 <usb_free+0x3c>)
    d998:	1ac3      	subs	r3, r0, r3
    d99a:	fba2 2303 	umull	r2, r3, r2, r3
    d99e:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    d9a0:	2b0b      	cmp	r3, #11
    d9a2:	d80c      	bhi.n	d9be <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    d9a4:	4a0b      	ldr	r2, [pc, #44]	; (d9d4 <usb_free+0x40>)
    d9a6:	7812      	ldrb	r2, [r2, #0]
    d9a8:	b952      	cbnz	r2, d9c0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    d9aa:	b672      	cpsid	i
	usb_buffer_available |= mask;
    d9ac:	480a      	ldr	r0, [pc, #40]	; (d9d8 <usb_free+0x44>)
    d9ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    d9b2:	6802      	ldr	r2, [r0, #0]
    d9b4:	fa21 f303 	lsr.w	r3, r1, r3
    d9b8:	431a      	orrs	r2, r3
    d9ba:	6002      	str	r2, [r0, #0]
	__enable_irq();
    d9bc:	b662      	cpsie	i
    d9be:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    d9c0:	4a06      	ldr	r2, [pc, #24]	; (d9dc <usb_free+0x48>)
    d9c2:	7812      	ldrb	r2, [r2, #0]
    d9c4:	2a00      	cmp	r2, #0
    d9c6:	d0f0      	beq.n	d9aa <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    d9c8:	f7ff b94a 	b.w	cc60 <usb_rx_memory>
    d9cc:	1fff83bc 	.word	0x1fff83bc
    d9d0:	38e38e39 	.word	0x38e38e39
    d9d4:	1fffb275 	.word	0x1fffb275
    d9d8:	1fff878c 	.word	0x1fff878c
    d9dc:	1fffb280 	.word	0x1fffb280

0000d9e0 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    d9e0:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    d9e2:	4d0f      	ldr	r5, [pc, #60]	; (da20 <usb_serial_getchar+0x40>)
    d9e4:	6828      	ldr	r0, [r5, #0]
    d9e6:	b178      	cbz	r0, da08 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    d9e8:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    d9ea:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    d9ec:	18c1      	adds	r1, r0, r3
    d9ee:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    d9f0:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    d9f2:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    d9f4:	d202      	bcs.n	d9fc <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    d9f6:	8043      	strh	r3, [r0, #2]
	}
	return c;
    d9f8:	4620      	mov	r0, r4
}
    d9fa:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    d9fc:	f7ff ffca 	bl	d994 <usb_free>
		rx_packet = NULL;
    da00:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    da02:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    da04:	602b      	str	r3, [r5, #0]
    da06:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    da08:	4b06      	ldr	r3, [pc, #24]	; (da24 <usb_serial_getchar+0x44>)
    da0a:	781b      	ldrb	r3, [r3, #0]
    da0c:	b12b      	cbz	r3, da1a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    da0e:	2003      	movs	r0, #3
    da10:	f7ff f8f2 	bl	cbf8 <usb_rx>
    da14:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    da16:	2800      	cmp	r0, #0
    da18:	d1e6      	bne.n	d9e8 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    da1a:	f04f 30ff 	mov.w	r0, #4294967295
    da1e:	bd38      	pop	{r3, r4, r5, pc}
    da20:	1fffb294 	.word	0x1fffb294
    da24:	1fffb280 	.word	0x1fffb280

0000da28 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    da28:	b510      	push	{r4, lr}
	if (!rx_packet) {
    da2a:	4c09      	ldr	r4, [pc, #36]	; (da50 <usb_serial_peekchar+0x28>)
    da2c:	6820      	ldr	r0, [r4, #0]
    da2e:	b118      	cbz	r0, da38 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    da30:	8843      	ldrh	r3, [r0, #2]
    da32:	4418      	add	r0, r3
    da34:	7a00      	ldrb	r0, [r0, #8]
}
    da36:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    da38:	4b06      	ldr	r3, [pc, #24]	; (da54 <usb_serial_peekchar+0x2c>)
    da3a:	781b      	ldrb	r3, [r3, #0]
    da3c:	b12b      	cbz	r3, da4a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    da3e:	2003      	movs	r0, #3
    da40:	f7ff f8da 	bl	cbf8 <usb_rx>
    da44:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    da46:	2800      	cmp	r0, #0
    da48:	d1f2      	bne.n	da30 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    da4a:	f04f 30ff 	mov.w	r0, #4294967295
    da4e:	bd10      	pop	{r4, pc}
    da50:	1fffb294 	.word	0x1fffb294
    da54:	1fffb280 	.word	0x1fffb280

0000da58 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    da58:	4b04      	ldr	r3, [pc, #16]	; (da6c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    da5a:	4a05      	ldr	r2, [pc, #20]	; (da70 <usb_serial_available+0x18>)
    da5c:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    da5e:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    da60:	b11b      	cbz	r3, da6a <usb_serial_available+0x12>
    da62:	881a      	ldrh	r2, [r3, #0]
    da64:	885b      	ldrh	r3, [r3, #2]
    da66:	1ad3      	subs	r3, r2, r3
    da68:	4418      	add	r0, r3
	return count;
}
    da6a:	4770      	bx	lr
    da6c:	1fffb294 	.word	0x1fffb294
    da70:	1fffb44c 	.word	0x1fffb44c

0000da74 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    da74:	4b0b      	ldr	r3, [pc, #44]	; (daa4 <usb_serial_flush_input+0x30>)
    da76:	781b      	ldrb	r3, [r3, #0]
    da78:	b19b      	cbz	r3, daa2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    da7a:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    da7c:	4c0a      	ldr	r4, [pc, #40]	; (daa8 <usb_serial_flush_input+0x34>)
    da7e:	6820      	ldr	r0, [r4, #0]
    da80:	b148      	cbz	r0, da96 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    da82:	f7ff ff87 	bl	d994 <usb_free>
		rx_packet = NULL;
    da86:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    da88:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    da8a:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    da8c:	f7ff f8b4 	bl	cbf8 <usb_rx>
		if (!rx) break;
    da90:	b130      	cbz	r0, daa0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    da92:	f7ff ff7f 	bl	d994 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    da96:	2003      	movs	r0, #3
    da98:	f7ff f8ae 	bl	cbf8 <usb_rx>
		if (!rx) break;
    da9c:	2800      	cmp	r0, #0
    da9e:	d1f8      	bne.n	da92 <usb_serial_flush_input+0x1e>
    daa0:	bd10      	pop	{r4, pc}
    daa2:	4770      	bx	lr
    daa4:	1fffb280 	.word	0x1fffb280
    daa8:	1fffb294 	.word	0x1fffb294

0000daac <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    daac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    dab0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; dbac <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    dab4:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    dab6:	2201      	movs	r2, #1
    dab8:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    dabc:	9101      	str	r1, [sp, #4]
    dabe:	b369      	cbz	r1, db1c <usb_serial_write+0x70>
    dac0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; dbb0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    dac4:	4f36      	ldr	r7, [pc, #216]	; (dba0 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    dac6:	9e01      	ldr	r6, [sp, #4]
    dac8:	4683      	mov	fp, r0
		if (!tx_packet) {
    daca:	f8d8 0000 	ldr.w	r0, [r8]
    dace:	b3b0      	cbz	r0, db3e <usb_serial_write+0x92>
    dad0:	4d34      	ldr	r5, [pc, #208]	; (dba4 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    dad2:	8844      	ldrh	r4, [r0, #2]
    dad4:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    dad8:	42b1      	cmp	r1, r6
    dada:	bf28      	it	cs
    dadc:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    dade:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    dae2:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    dae4:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    dae8:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    daea:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    daec:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    daf0:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    daf4:	b151      	cbz	r1, db0c <usb_serial_write+0x60>
    daf6:	3c01      	subs	r4, #1
    daf8:	4422      	add	r2, r4
    dafa:	4459      	add	r1, fp
    dafc:	f81b 4b01 	ldrb.w	r4, [fp], #1
    db00:	f802 4f01 	strb.w	r4, [r2, #1]!
    db04:	458b      	cmp	fp, r1
    db06:	d1f9      	bne.n	dafc <usb_serial_write+0x50>
    db08:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    db0c:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    db10:	d80b      	bhi.n	db2a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    db12:	4a25      	ldr	r2, [pc, #148]	; (dba8 <usb_serial_write+0xfc>)
    db14:	2105      	movs	r1, #5
    db16:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    db18:	2e00      	cmp	r6, #0
    db1a:	d1d6      	bne.n	daca <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    db1c:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    db1e:	2300      	movs	r3, #0
    db20:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    db24:	b003      	add	sp, #12
    db26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    db2a:	2240      	movs	r2, #64	; 0x40
    db2c:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    db2e:	4601      	mov	r1, r0
    db30:	2004      	movs	r0, #4
    db32:	f7ff f8f9 	bl	cd28 <usb_tx>
			tx_packet = NULL;
    db36:	2200      	movs	r2, #0
    db38:	f8c8 2000 	str.w	r2, [r8]
    db3c:	e7e9      	b.n	db12 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    db3e:	783a      	ldrb	r2, [r7, #0]
    db40:	b32a      	cbz	r2, db8e <usb_serial_write+0xe2>
    db42:	4d18      	ldr	r5, [pc, #96]	; (dba4 <usb_serial_write+0xf8>)
    db44:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    db48:	f04f 0a01 	mov.w	sl, #1
    db4c:	e007      	b.n	db5e <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    db4e:	3c01      	subs	r4, #1
    db50:	d016      	beq.n	db80 <usb_serial_write+0xd4>
    db52:	782a      	ldrb	r2, [r5, #0]
    db54:	b9a2      	cbnz	r2, db80 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    db56:	f000 fac5 	bl	e0e4 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    db5a:	783a      	ldrb	r2, [r7, #0]
    db5c:	b1ba      	cbz	r2, db8e <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    db5e:	2004      	movs	r0, #4
    db60:	f7ff f868 	bl	cc34 <usb_tx_packet_count>
    db64:	2807      	cmp	r0, #7
    db66:	d8f2      	bhi.n	db4e <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    db68:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    db6c:	f7ff fef2 	bl	d954 <usb_malloc>
    db70:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    db74:	2800      	cmp	r0, #0
    db76:	d1ac      	bne.n	dad2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    db78:	4b0c      	ldr	r3, [pc, #48]	; (dbac <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    db7a:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    db7c:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    db7e:	d1e8      	bne.n	db52 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    db80:	2301      	movs	r3, #1
					return -1;
    db82:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    db86:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    db88:	b003      	add	sp, #12
    db8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    db8e:	2300      	movs	r3, #0
					return -1;
    db90:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    db94:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    db98:	b003      	add	sp, #12
    db9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db9e:	bf00      	nop
    dba0:	1fffb280 	.word	0x1fffb280
    dba4:	1fffb290 	.word	0x1fffb290
    dba8:	1fffb288 	.word	0x1fffb288
    dbac:	1fffb289 	.word	0x1fffb289
    dbb0:	1fffb28c 	.word	0x1fffb28c

0000dbb4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    dbb4:	b500      	push	{lr}
    dbb6:	b083      	sub	sp, #12
    dbb8:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    dbba:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    dbbc:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    dbc0:	4618      	mov	r0, r3
    dbc2:	f7ff ff73 	bl	daac <usb_serial_write>
}
    dbc6:	b003      	add	sp, #12
    dbc8:	f85d fb04 	ldr.w	pc, [sp], #4

0000dbcc <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    dbcc:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    dbce:	4d0e      	ldr	r5, [pc, #56]	; (dc08 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    dbd0:	4c0e      	ldr	r4, [pc, #56]	; (dc0c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    dbd2:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    dbd4:	2301      	movs	r3, #1
    dbd6:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    dbd8:	b128      	cbz	r0, dbe6 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    dbda:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    dbdc:	2300      	movs	r3, #0
    dbde:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    dbe0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    dbe4:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    dbe6:	4b0a      	ldr	r3, [pc, #40]	; (dc10 <usb_serial_write_buffer_free+0x44>)
    dbe8:	781b      	ldrb	r3, [r3, #0]
    dbea:	b913      	cbnz	r3, dbf2 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    dbec:	2000      	movs	r0, #0
    dbee:	7020      	strb	r0, [r4, #0]
			return 0;
    dbf0:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    dbf2:	2004      	movs	r0, #4
    dbf4:	f7ff f81e 	bl	cc34 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    dbf8:	2807      	cmp	r0, #7
    dbfa:	d8f7      	bhi.n	dbec <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    dbfc:	f7ff feaa 	bl	d954 <usb_malloc>
    dc00:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    dc02:	2800      	cmp	r0, #0
    dc04:	d1e9      	bne.n	dbda <usb_serial_write_buffer_free+0xe>
    dc06:	e7f1      	b.n	dbec <usb_serial_write_buffer_free+0x20>
    dc08:	1fffb28c 	.word	0x1fffb28c
    dc0c:	1fffb289 	.word	0x1fffb289
    dc10:	1fffb280 	.word	0x1fffb280

0000dc14 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    dc16:	4b11      	ldr	r3, [pc, #68]	; (dc5c <usb_serial_flush_output+0x48>)
    dc18:	781b      	ldrb	r3, [r3, #0]
    dc1a:	b18b      	cbz	r3, dc40 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    dc1c:	4e10      	ldr	r6, [pc, #64]	; (dc60 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    dc1e:	4d11      	ldr	r5, [pc, #68]	; (dc64 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    dc20:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    dc22:	2701      	movs	r7, #1
    dc24:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    dc26:	b164      	cbz	r4, dc42 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    dc28:	4a0f      	ldr	r2, [pc, #60]	; (dc68 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    dc2a:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    dc2c:	2700      	movs	r7, #0
    dc2e:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    dc30:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    dc32:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    dc34:	2004      	movs	r0, #4
    dc36:	f7ff f877 	bl	cd28 <usb_tx>
		tx_packet = NULL;
    dc3a:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    dc3c:	2300      	movs	r3, #0
    dc3e:	702b      	strb	r3, [r5, #0]
    dc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    dc42:	f7ff fe87 	bl	d954 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    dc46:	4b08      	ldr	r3, [pc, #32]	; (dc68 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    dc48:	b128      	cbz	r0, dc56 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    dc4a:	4601      	mov	r1, r0
    dc4c:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    dc4e:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    dc50:	f7ff f86a 	bl	cd28 <usb_tx>
    dc54:	e7f2      	b.n	dc3c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    dc56:	701f      	strb	r7, [r3, #0]
    dc58:	e7f0      	b.n	dc3c <usb_serial_flush_output+0x28>
    dc5a:	bf00      	nop
    dc5c:	1fffb280 	.word	0x1fffb280
    dc60:	1fffb28c 	.word	0x1fffb28c
    dc64:	1fffb289 	.word	0x1fffb289
    dc68:	1fffb288 	.word	0x1fffb288

0000dc6c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    dc6c:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    dc6e:	4b0e      	ldr	r3, [pc, #56]	; (dca8 <usb_serial_flush_callback+0x3c>)
    dc70:	781b      	ldrb	r3, [r3, #0]
    dc72:	b973      	cbnz	r3, dc92 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    dc74:	4c0d      	ldr	r4, [pc, #52]	; (dcac <usb_serial_flush_callback+0x40>)
    dc76:	6821      	ldr	r1, [r4, #0]
    dc78:	b161      	cbz	r1, dc94 <usb_serial_flush_callback+0x28>
    dc7a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    dc7e:	884b      	ldrh	r3, [r1, #2]
    dc80:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    dc82:	2004      	movs	r0, #4
    dc84:	f7ff f850 	bl	cd28 <usb_tx>
		tx_packet = NULL;
    dc88:	6025      	str	r5, [r4, #0]
    dc8a:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    dc8c:	4b08      	ldr	r3, [pc, #32]	; (dcb0 <usb_serial_flush_callback+0x44>)
    dc8e:	2201      	movs	r2, #1
    dc90:	701a      	strb	r2, [r3, #0]
    dc92:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    dc94:	f7ff fe5e 	bl	d954 <usb_malloc>
		if (tx) {
    dc98:	2800      	cmp	r0, #0
    dc9a:	d0f7      	beq.n	dc8c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    dc9c:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    dc9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    dca2:	2004      	movs	r0, #4
    dca4:	f7ff b840 	b.w	cd28 <usb_tx>
    dca8:	1fffb289 	.word	0x1fffb289
    dcac:	1fffb28c 	.word	0x1fffb28c
    dcb0:	1fffb288 	.word	0x1fffb288

0000dcb4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    dcb4:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dcb6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    dcba:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    dcbc:	7f43      	ldrb	r3, [r0, #29]
    dcbe:	b933      	cbnz	r3, dcce <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    dcc0:	7f01      	ldrb	r1, [r0, #28]
    dcc2:	2901      	cmp	r1, #1
    dcc4:	d007      	beq.n	dcd6 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    dcc6:	2903      	cmp	r1, #3
    dcc8:	d00f      	beq.n	dcea <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    dcca:	2301      	movs	r3, #1
    dccc:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dcce:	b902      	cbnz	r2, dcd2 <EventResponder::triggerEventNotImmediate()+0x1e>
    dcd0:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    dcd2:	bc10      	pop	{r4}
    dcd4:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    dcd6:	4c12      	ldr	r4, [pc, #72]	; (dd20 <EventResponder::triggerEventNotImmediate()+0x6c>)
    dcd8:	6821      	ldr	r1, [r4, #0]
    dcda:	b1a1      	cbz	r1, dd06 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    dcdc:	4911      	ldr	r1, [pc, #68]	; (dd24 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    dcde:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    dce0:	680b      	ldr	r3, [r1, #0]
    dce2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    dce4:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    dce6:	6158      	str	r0, [r3, #20]
    dce8:	e7ef      	b.n	dcca <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    dcea:	4c0f      	ldr	r4, [pc, #60]	; (dd28 <EventResponder::triggerEventNotImmediate()+0x74>)
    dcec:	6821      	ldr	r1, [r4, #0]
    dcee:	b181      	cbz	r1, dd12 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    dcf0:	490e      	ldr	r1, [pc, #56]	; (dd2c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    dcf2:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    dcf4:	680b      	ldr	r3, [r1, #0]
    dcf6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    dcf8:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    dcfa:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    dcfc:	4b0c      	ldr	r3, [pc, #48]	; (dd30 <EventResponder::triggerEventNotImmediate()+0x7c>)
    dcfe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    dd02:	6019      	str	r1, [r3, #0]
    dd04:	e7e1      	b.n	dcca <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    dd06:	4b07      	ldr	r3, [pc, #28]	; (dd24 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    dd08:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    dd0a:	6181      	str	r1, [r0, #24]
				firstYield = this;
    dd0c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    dd0e:	6018      	str	r0, [r3, #0]
    dd10:	e7db      	b.n	dcca <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    dd12:	4b06      	ldr	r3, [pc, #24]	; (dd2c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    dd14:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    dd16:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    dd18:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    dd1a:	6018      	str	r0, [r3, #0]
    dd1c:	e7ee      	b.n	dcfc <EventResponder::triggerEventNotImmediate()+0x48>
    dd1e:	bf00      	nop
    dd20:	1fffb2ac 	.word	0x1fffb2ac
    dd24:	1fffb2a8 	.word	0x1fffb2a8
    dd28:	1fffb29c 	.word	0x1fffb29c
    dd2c:	1fffb2a0 	.word	0x1fffb2a0
    dd30:	e000ed04 	.word	0xe000ed04

0000dd34 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    dd34:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    dd36:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    dd38:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    dd3a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    dd3c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    dd3e:	d002      	beq.n	dd46 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    dd40:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    dd42:	f7ff bfb7 	b.w	dcb4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    dd46:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    dd48:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    dd4a:	4718      	bx	r3

0000dd4c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    dd4c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dd4e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    dd52:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    dd54:	4c0c      	ldr	r4, [pc, #48]	; (dd88 <EventResponder::runFromInterrupt()+0x3c>)
    dd56:	6820      	ldr	r0, [r4, #0]
		if (first) {
    dd58:	b180      	cbz	r0, dd7c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    dd5a:	4e0c      	ldr	r6, [pc, #48]	; (dd8c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    dd5c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    dd5e:	6943      	ldr	r3, [r0, #20]
    dd60:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    dd62:	b173      	cbz	r3, dd82 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    dd64:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dd66:	b902      	cbnz	r2, dd6a <EventResponder::runFromInterrupt()+0x1e>
    dd68:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    dd6a:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    dd6c:	6883      	ldr	r3, [r0, #8]
    dd6e:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dd70:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    dd74:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    dd76:	6820      	ldr	r0, [r4, #0]
		if (first) {
    dd78:	2800      	cmp	r0, #0
    dd7a:	d1f0      	bne.n	dd5e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dd7c:	b902      	cbnz	r2, dd80 <EventResponder::runFromInterrupt()+0x34>
    dd7e:	b662      	cpsie	i
    dd80:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    dd82:	6033      	str	r3, [r6, #0]
    dd84:	e7ef      	b.n	dd66 <EventResponder::runFromInterrupt()+0x1a>
    dd86:	bf00      	nop
    dd88:	1fffb29c 	.word	0x1fffb29c
    dd8c:	1fffb2a0 	.word	0x1fffb2a0

0000dd90 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    dd90:	f7ff bfdc 	b.w	dd4c <EventResponder::runFromInterrupt()>

0000dd94 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    dd94:	4a18      	ldr	r2, [pc, #96]	; (ddf8 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    dd96:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    dd98:	6814      	ldr	r4, [r2, #0]
    dd9a:	2c00      	cmp	r4, #0
    dd9c:	d027      	beq.n	ddee <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    dd9e:	6803      	ldr	r3, [r0, #0]
    dda0:	6821      	ldr	r1, [r4, #0]
    dda2:	428b      	cmp	r3, r1
    dda4:	d20e      	bcs.n	ddc4 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    dda6:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    dda8:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    ddaa:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    ddac:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ddae:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    ddb0:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    ddb2:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    ddb4:	2302      	movs	r3, #2
    ddb6:	7503      	strb	r3, [r0, #20]
}
    ddb8:	bc30      	pop	{r4, r5}
    ddba:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    ddbc:	6811      	ldr	r1, [r2, #0]
    ddbe:	428b      	cmp	r3, r1
    ddc0:	4614      	mov	r4, r2
    ddc2:	d308      	bcc.n	ddd6 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ddc4:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    ddc6:	1a5b      	subs	r3, r3, r1
    ddc8:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ddca:	2a00      	cmp	r2, #0
    ddcc:	d1f6      	bne.n	ddbc <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    ddce:	6082      	str	r2, [r0, #8]
		_prev = timer;
    ddd0:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    ddd2:	60a0      	str	r0, [r4, #8]
    ddd4:	e7ee      	b.n	ddb4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    ddd6:	68d2      	ldr	r2, [r2, #12]
    ddd8:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    ddda:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    dddc:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    ddde:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    dde0:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    dde2:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    dde4:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    dde6:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    dde8:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    ddea:	bc30      	pop	{r4, r5}
    ddec:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    ddee:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    ddf0:	60c4      	str	r4, [r0, #12]
		listActive = this;
    ddf2:	6010      	str	r0, [r2, #0]
    ddf4:	e7de      	b.n	ddb4 <MillisTimer::addToActiveList()+0x20>
    ddf6:	bf00      	nop
    ddf8:	1fffb2a4 	.word	0x1fffb2a4

0000ddfc <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    ddfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    ddfe:	4e22      	ldr	r6, [pc, #136]	; (de88 <MillisTimer::runFromTimer()+0x8c>)
    de00:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    de02:	b32c      	cbz	r4, de50 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    de04:	6823      	ldr	r3, [r4, #0]
    de06:	2b00      	cmp	r3, #0
    de08:	d13a      	bne.n	de80 <MillisTimer::runFromTimer()+0x84>
    de0a:	4f20      	ldr	r7, [pc, #128]	; (de8c <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    de0c:	461d      	mov	r5, r3
    de0e:	e004      	b.n	de1a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    de10:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    de12:	b1ec      	cbz	r4, de50 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    de14:	6823      	ldr	r3, [r4, #0]
    de16:	2b00      	cmp	r3, #0
    de18:	d132      	bne.n	de80 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    de1a:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    de1c:	b103      	cbz	r3, de20 <MillisTimer::runFromTimer()+0x24>
    de1e:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    de20:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    de22:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    de24:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    de26:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    de28:	681b      	ldr	r3, [r3, #0]
    de2a:	42bb      	cmp	r3, r7
    de2c:	d121      	bne.n	de72 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    de2e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    de30:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    de32:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    de34:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    de36:	d020      	beq.n	de7a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    de38:	f7ff ff3c 	bl	dcb4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    de3c:	6863      	ldr	r3, [r4, #4]
    de3e:	2b00      	cmp	r3, #0
    de40:	d0e6      	beq.n	de10 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    de42:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    de44:	4620      	mov	r0, r4
    de46:	f7ff ffa5 	bl	dd94 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    de4a:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    de4c:	2c00      	cmp	r4, #0
    de4e:	d1e1      	bne.n	de14 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    de50:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    de54:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    de56:	4a0e      	ldr	r2, [pc, #56]	; (de90 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    de58:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    de5a:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    de5c:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    de5e:	b903      	cbnz	r3, de62 <MillisTimer::runFromTimer()+0x66>
    de60:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    de62:	b128      	cbz	r0, de70 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    de64:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    de66:	f7ff ff95 	bl	dd94 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    de6a:	4620      	mov	r0, r4
    de6c:	2800      	cmp	r0, #0
    de6e:	d1f9      	bne.n	de64 <MillisTimer::runFromTimer()+0x68>
    de70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    de72:	4622      	mov	r2, r4
    de74:	2100      	movs	r1, #0
    de76:	4798      	blx	r3
    de78:	e7e0      	b.n	de3c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    de7a:	6883      	ldr	r3, [r0, #8]
    de7c:	4798      	blx	r3
    de7e:	e7dd      	b.n	de3c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    de80:	3b01      	subs	r3, #1
    de82:	6023      	str	r3, [r4, #0]
			break;
    de84:	e7e4      	b.n	de50 <MillisTimer::runFromTimer()+0x54>
    de86:	bf00      	nop
    de88:	1fffb2a4 	.word	0x1fffb2a4
    de8c:	0000dd35 	.word	0x0000dd35
    de90:	1fffb2b4 	.word	0x1fffb2b4

0000de94 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    de94:	4a02      	ldr	r2, [pc, #8]	; (dea0 <systick_isr+0xc>)
    de96:	6813      	ldr	r3, [r2, #0]
    de98:	3301      	adds	r3, #1
    de9a:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    de9c:	f7ff bfae 	b.w	ddfc <MillisTimer::runFromTimer()>
    dea0:	1fffb19c 	.word	0x1fffb19c

0000dea4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    dea4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    dea6:	f7fc fd95 	bl	a9d4 <setup>
	while (1) {
		loop();
    deaa:	f7fc fe7d 	bl	aba8 <loop>
		yield();
    deae:	f000 f919 	bl	e0e4 <yield>
    deb2:	e7fa      	b.n	deaa <main+0x6>

0000deb4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    deb4:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    deb6:	4a06      	ldr	r2, [pc, #24]	; (ded0 <Print::println()+0x1c>)
	return write(buf, 2);
    deb8:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    deba:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    debc:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    debe:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    dec0:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    dec2:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    dec6:	2202      	movs	r2, #2
    dec8:	4798      	blx	r3
}
    deca:	b003      	add	sp, #12
    decc:	f85d fb04 	ldr.w	pc, [sp], #4
    ded0:	000129f4 	.word	0x000129f4

0000ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    ded4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ded6:	4607      	mov	r7, r0
    ded8:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    deda:	2a00      	cmp	r2, #0
    dedc:	d033      	beq.n	df46 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    dede:	2a01      	cmp	r2, #1
    dee0:	bf08      	it	eq
    dee2:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    dee4:	b351      	cbz	r1, df3c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    dee6:	2421      	movs	r4, #33	; 0x21
    dee8:	e000      	b.n	deec <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    deea:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    deec:	fbb1 f5f2 	udiv	r5, r1, r2
    def0:	fb02 1115 	mls	r1, r2, r5, r1
    def4:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    def6:	2909      	cmp	r1, #9
    def8:	f100 0130 	add.w	r1, r0, #48	; 0x30
    defc:	bf98      	it	ls
    defe:	b2c8      	uxtbls	r0, r1
    df00:	a90a      	add	r1, sp, #40	; 0x28
    df02:	bf88      	it	hi
    df04:	3037      	addhi	r0, #55	; 0x37
    df06:	4421      	add	r1, r4
    df08:	bf88      	it	hi
    df0a:	b2c0      	uxtbhi	r0, r0
    df0c:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    df10:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    df12:	4629      	mov	r1, r5
    df14:	2d00      	cmp	r5, #0
    df16:	d1e8      	bne.n	deea <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    df18:	b133      	cbz	r3, df28 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    df1a:	3c01      	subs	r4, #1
    df1c:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    df1e:	ab0a      	add	r3, sp, #40	; 0x28
    df20:	4423      	add	r3, r4
    df22:	222d      	movs	r2, #45	; 0x2d
    df24:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    df28:	683b      	ldr	r3, [r7, #0]
    df2a:	aa01      	add	r2, sp, #4
    df2c:	1911      	adds	r1, r2, r4
    df2e:	685b      	ldr	r3, [r3, #4]
    df30:	4638      	mov	r0, r7
    df32:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    df36:	4798      	blx	r3
}
    df38:	b00b      	add	sp, #44	; 0x2c
    df3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    df3c:	2230      	movs	r2, #48	; 0x30
    df3e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    df42:	2421      	movs	r4, #33	; 0x21
    df44:	e7e8      	b.n	df18 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    df46:	6803      	ldr	r3, [r0, #0]
    df48:	b2c9      	uxtb	r1, r1
    df4a:	681b      	ldr	r3, [r3, #0]
    df4c:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    df4e:	b00b      	add	sp, #44	; 0x2c
    df50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df52:	bf00      	nop

0000df54 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    df54:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    df56:	bfba      	itte	lt
    df58:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    df5a:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    df5c:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    df5e:	220a      	movs	r2, #10
    df60:	f7ff bfb8 	b.w	ded4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000df64 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    df64:	b570      	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    df66:	4d0e      	ldr	r5, [pc, #56]	; (dfa0 <Stream::timedPeek()+0x3c>)
    df68:	b082      	sub	sp, #8
    df6a:	682b      	ldr	r3, [r5, #0]
    df6c:	9300      	str	r3, [sp, #0]
	return ret;
    df6e:	9e00      	ldr	r6, [sp, #0]
    df70:	4604      	mov	r4, r0
    df72:	e008      	b.n	df86 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    df74:	f000 f8b6 	bl	e0e4 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    df78:	682b      	ldr	r3, [r5, #0]
    df7a:	9301      	str	r3, [sp, #4]
	return ret;
    df7c:	9b01      	ldr	r3, [sp, #4]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    df7e:	68a2      	ldr	r2, [r4, #8]
    df80:	1b9b      	subs	r3, r3, r6
    df82:	4293      	cmp	r3, r2
    df84:	d207      	bcs.n	df96 <Stream::timedPeek()+0x32>
    c = peek();
    df86:	6823      	ldr	r3, [r4, #0]
    df88:	4620      	mov	r0, r4
    df8a:	699b      	ldr	r3, [r3, #24]
    df8c:	4798      	blx	r3
    if (c >= 0) return c;
    df8e:	2800      	cmp	r0, #0
    df90:	dbf0      	blt.n	df74 <Stream::timedPeek()+0x10>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    df92:	b002      	add	sp, #8
    df94:	bd70      	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    df96:	f04f 30ff 	mov.w	r0, #4294967295
}
    df9a:	b002      	add	sp, #8
    df9c:	bd70      	pop	{r4, r5, r6, pc}
    df9e:	bf00      	nop
    dfa0:	1fffb19c 	.word	0x1fffb19c

0000dfa4 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    dfa4:	b510      	push	{r4, lr}
    dfa6:	4604      	mov	r4, r0
    dfa8:	e006      	b.n	dfb8 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    dfaa:	2b2d      	cmp	r3, #45	; 0x2d
    dfac:	d00c      	beq.n	dfc8 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    dfae:	2a09      	cmp	r2, #9
    dfb0:	d90a      	bls.n	dfc8 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    dfb2:	6823      	ldr	r3, [r4, #0]
    dfb4:	695b      	ldr	r3, [r3, #20]
    dfb6:	4798      	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    dfb8:	4620      	mov	r0, r4
    dfba:	f7ff ffd3 	bl	df64 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    dfbe:	1e03      	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    dfc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    dfc4:	4620      	mov	r0, r4
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    dfc6:	daf0      	bge.n	dfaa <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    dfc8:	4618      	mov	r0, r3
    dfca:	bd10      	pop	{r4, pc}

0000dfcc <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    dfcc:	6081      	str	r1, [r0, #8]
    dfce:	4770      	bx	lr

0000dfd0 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dfd2:	460d      	mov	r5, r1
    dfd4:	4604      	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    dfd6:	f7ff ffe5 	bl	dfa4 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    dfda:	2800      	cmp	r0, #0
    dfdc:	db23      	blt.n	e026 <Stream::parseInt(char)+0x56>
    dfde:	2600      	movs	r6, #0
    dfe0:	4637      	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    dfe2:	42a8      	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    dfe4:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    dfe8:	d009      	beq.n	dffe <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    dfea:	282d      	cmp	r0, #45	; 0x2d
    dfec:	d017      	beq.n	e01e <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    dfee:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    dff2:	2a09      	cmp	r2, #9
      value = value * 10 + c - '0';
    dff4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    dff8:	d801      	bhi.n	dffe <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    dffa:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    dffe:	6823      	ldr	r3, [r4, #0]
    e000:	4620      	mov	r0, r4
    e002:	695b      	ldr	r3, [r3, #20]
    e004:	4798      	blx	r3
    c = timedPeek();
    e006:	4620      	mov	r0, r4
    e008:	f7ff ffac 	bl	df64 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    e00c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e010:	2b09      	cmp	r3, #9
    e012:	d9e6      	bls.n	dfe2 <Stream::parseInt(char)+0x12>
    e014:	42a8      	cmp	r0, r5
    e016:	d0e4      	beq.n	dfe2 <Stream::parseInt(char)+0x12>

  if(isNegative)
    e018:	b11f      	cbz	r7, e022 <Stream::parseInt(char)+0x52>
    value = -value;
    e01a:	4270      	negs	r0, r6
    e01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    e01e:	2701      	movs	r7, #1
    e020:	e7ed      	b.n	dffe <Stream::parseInt(char)+0x2e>
    e022:	4630      	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    e024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    e026:	2000      	movs	r0, #0
    e028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e02a:	bf00      	nop

0000e02c <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    e02c:	2101      	movs	r1, #1
    e02e:	f7ff bfcf 	b.w	dfd0 <Stream::parseInt(char)>
    e032:	bf00      	nop

0000e034 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    e034:	f7ff bd1e 	b.w	da74 <usb_serial_flush_input>

0000e038 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    e038:	f7ff bcf6 	b.w	da28 <usb_serial_peekchar>

0000e03c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    e03c:	f7ff bcd0 	b.w	d9e0 <usb_serial_getchar>

0000e040 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    e040:	f7ff bd0a 	b.w	da58 <usb_serial_available>

0000e044 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    e044:	f7ff bde6 	b.w	dc14 <usb_serial_flush_output>

0000e048 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    e048:	f7ff bdc0 	b.w	dbcc <usb_serial_write_buffer_free>

0000e04c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    e04c:	4608      	mov	r0, r1
    e04e:	4611      	mov	r1, r2
    e050:	f7ff bd2c 	b.w	daac <usb_serial_write>

0000e054 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    e054:	4608      	mov	r0, r1
    e056:	f7ff bdad 	b.w	dbb4 <usb_serial_putchar>
    e05a:	bf00      	nop

0000e05c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    e05c:	4770      	bx	lr
    e05e:	bf00      	nop

0000e060 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    e060:	b5f0      	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    e062:	4d16      	ldr	r5, [pc, #88]	; (e0bc <random(unsigned long) [clone .part.0]+0x5c>)
    e064:	682a      	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    e066:	b30a      	cbz	r2, e0ac <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    e068:	4915      	ldr	r1, [pc, #84]	; (e0c0 <random(unsigned long) [clone .part.0]+0x60>)
    e06a:	4b16      	ldr	r3, [pc, #88]	; (e0c4 <random(unsigned long) [clone .part.0]+0x64>)
    e06c:	f8df e05c 	ldr.w	lr, [pc, #92]	; e0cc <random(unsigned long) [clone .part.0]+0x6c>
    e070:	fb82 6701 	smull	r6, r7, r2, r1
    e074:	fb81 1402 	smull	r1, r4, r1, r2
    e078:	17d6      	asrs	r6, r2, #31
    e07a:	19d1      	adds	r1, r2, r7
    e07c:	4414      	add	r4, r2
    e07e:	ebc6 4121 	rsb	r1, r6, r1, asr #16
    e082:	ebc6 4424 	rsb	r4, r6, r4, asr #16
    e086:	fb03 f404 	mul.w	r4, r3, r4
    e08a:	fb0e 2211 	mls	r2, lr, r1, r2
    e08e:	f244 13a7 	movw	r3, #16807	; 0x41a7
    e092:	fb03 4302 	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    e096:	2b00      	cmp	r3, #0
    e098:	da02      	bge.n	e0a0 <random(unsigned long) [clone .part.0]+0x40>
    e09a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    e09e:	3b01      	subs	r3, #1
    e0a0:	fbb3 f2f0 	udiv	r2, r3, r0
	seed = x;
    e0a4:	602b      	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    e0a6:	fb00 3012 	mls	r0, r0, r2, r3
    e0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    e0ac:	4b06      	ldr	r3, [pc, #24]	; (e0c8 <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    e0ae:	602b      	str	r3, [r5, #0]
    e0b0:	fbb3 f2f0 	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    e0b4:	fb00 3012 	mls	r0, r0, r2, r3
    e0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0ba:	bf00      	nop
    e0bc:	1fffb2b8 	.word	0x1fffb2b8
    e0c0:	834e0b5f 	.word	0x834e0b5f
    e0c4:	fffff4ec 	.word	0xfffff4ec
    e0c8:	1f0cce42 	.word	0x1f0cce42
    e0cc:	0001f31d 	.word	0x0001f31d

0000e0d0 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    e0d0:	4288      	cmp	r0, r1
    e0d2:	da06      	bge.n	e0e2 <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    e0d4:	b510      	push	{r4, lr}
    e0d6:	4604      	mov	r4, r0
    e0d8:	1a08      	subs	r0, r1, r0
    e0da:	f7ff ffc1 	bl	e060 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    e0de:	4420      	add	r0, r4
}
    e0e0:	bd10      	pop	{r4, pc}
    e0e2:	4770      	bx	lr

0000e0e4 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    e0e4:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    e0e6:	4c22      	ldr	r4, [pc, #136]	; (e170 <yield+0x8c>)
    e0e8:	7823      	ldrb	r3, [r4, #0]
    e0ea:	b103      	cbz	r3, e0ee <yield+0xa>
    e0ec:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    e0ee:	2301      	movs	r3, #1
    e0f0:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    e0f2:	f7ff fcb1 	bl	da58 <usb_serial_available>
	if (Serial.available()) serialEvent();
    e0f6:	bb70      	cbnz	r0, e156 <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    e0f8:	f000 f868 	bl	e1cc <serial_available>
	if (Serial1.available()) serialEvent1();
    e0fc:	bb40      	cbnz	r0, e150 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    e0fe:	f000 f8fb 	bl	e2f8 <serial2_available>
	if (Serial2.available()) serialEvent2();
    e102:	bb10      	cbnz	r0, e14a <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    e104:	f000 f98e 	bl	e424 <serial3_available>
	if (Serial3.available()) serialEvent3();
    e108:	b9e0      	cbnz	r0, e144 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    e10a:	2300      	movs	r3, #0
    e10c:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    e10e:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    e112:	2b00      	cmp	r3, #0
    e114:	d1ea      	bne.n	e0ec <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    e116:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    e11a:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    e11c:	4b15      	ldr	r3, [pc, #84]	; (e174 <yield+0x90>)
    e11e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    e120:	b1e0      	cbz	r0, e15c <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    e122:	4c15      	ldr	r4, [pc, #84]	; (e178 <yield+0x94>)
    e124:	7822      	ldrb	r2, [r4, #0]
    e126:	b9ca      	cbnz	r2, e15c <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    e128:	6945      	ldr	r5, [r0, #20]
    e12a:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    e12c:	2301      	movs	r3, #1
    e12e:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    e130:	b1c5      	cbz	r5, e164 <yield+0x80>
			firstYield->_prev = nullptr;
    e132:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    e134:	b901      	cbnz	r1, e138 <yield+0x54>
    e136:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    e138:	2500      	movs	r5, #0
    e13a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    e13c:	6883      	ldr	r3, [r0, #8]
    e13e:	4798      	blx	r3
		runningFromYield = false;
    e140:	7025      	strb	r5, [r4, #0]
    e142:	e7d3      	b.n	e0ec <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    e144:	f000 fa30 	bl	e5a8 <serialEvent3()>
    e148:	e7df      	b.n	e10a <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    e14a:	f000 fa2b 	bl	e5a4 <serialEvent2()>
    e14e:	e7d9      	b.n	e104 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    e150:	f000 fa26 	bl	e5a0 <serialEvent1()>
    e154:	e7d3      	b.n	e0fe <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    e156:	f7ff ff81 	bl	e05c <serialEvent()>
    e15a:	e7cd      	b.n	e0f8 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    e15c:	2900      	cmp	r1, #0
    e15e:	d1c5      	bne.n	e0ec <yield+0x8>
    e160:	b662      	cpsie	i
    e162:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    e164:	4b05      	ldr	r3, [pc, #20]	; (e17c <yield+0x98>)
    e166:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    e168:	2900      	cmp	r1, #0
    e16a:	d1e5      	bne.n	e138 <yield+0x54>
    e16c:	e7e3      	b.n	e136 <yield+0x52>
    e16e:	bf00      	nop
    e170:	1fffb2bc 	.word	0x1fffb2bc
    e174:	1fffb2ac 	.word	0x1fffb2ac
    e178:	1fffb2b0 	.word	0x1fffb2b0
    e17c:	1fffb2a8 	.word	0x1fffb2a8

0000e180 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    e180:	b4f0      	push	{r4, r5, r6, r7}
    e182:	1e4d      	subs	r5, r1, #1
    e184:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    e186:	2400      	movs	r4, #0
    e188:	e000      	b.n	e18c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    e18a:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    e18c:	fbb0 f3f2 	udiv	r3, r0, r2
    e190:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e194:	2809      	cmp	r0, #9
    e196:	f100 0730 	add.w	r7, r0, #48	; 0x30
    e19a:	bf8a      	itet	hi
    e19c:	3037      	addhi	r0, #55	; 0x37
    e19e:	b2f8      	uxtbls	r0, r7
    e1a0:	b2c0      	uxtbhi	r0, r0
    e1a2:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    e1a6:	4618      	mov	r0, r3
    e1a8:	2b00      	cmp	r3, #0
    e1aa:	d1ee      	bne.n	e18a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    e1ac:	190a      	adds	r2, r1, r4
    e1ae:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    e1b0:	b14c      	cbz	r4, e1c6 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    e1b2:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    e1b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    e1b8:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e1ba:	3301      	adds	r3, #1
    e1bc:	1ae0      	subs	r0, r4, r3
    e1be:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    e1c0:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e1c4:	dbf5      	blt.n	e1b2 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    e1c6:	4608      	mov	r0, r1
    e1c8:	bcf0      	pop	{r4, r5, r6, r7}
    e1ca:	4770      	bx	lr

0000e1cc <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    e1cc:	4a05      	ldr	r2, [pc, #20]	; (e1e4 <serial_available+0x18>)
	tail = rx_buffer_tail;
    e1ce:	4b06      	ldr	r3, [pc, #24]	; (e1e8 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    e1d0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    e1d2:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    e1d4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    e1d6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    e1d8:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    e1da:	bf38      	it	cc
    e1dc:	3040      	addcc	r0, #64	; 0x40
    e1de:	1ac0      	subs	r0, r0, r3
}
    e1e0:	4770      	bx	lr
    e1e2:	bf00      	nop
    e1e4:	1fffb2c4 	.word	0x1fffb2c4
    e1e8:	1fffb2c5 	.word	0x1fffb2c5

0000e1ec <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    e1ec:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    e1ee:	4b38      	ldr	r3, [pc, #224]	; (e2d0 <uart0_status_isr+0xe4>)
    e1f0:	791a      	ldrb	r2, [r3, #4]
    e1f2:	f012 0f30 	tst.w	r2, #48	; 0x30
    e1f6:	d02c      	beq.n	e252 <uart0_status_isr+0x66>
		__disable_irq();
    e1f8:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    e1fa:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    e1fc:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    e200:	2900      	cmp	r1, #0
    e202:	d03d      	beq.n	e280 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    e204:	b662      	cpsie	i
			head = rx_buffer_head;
    e206:	4f33      	ldr	r7, [pc, #204]	; (e2d4 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    e208:	4933      	ldr	r1, [pc, #204]	; (e2d8 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    e20a:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    e20c:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    e20e:	4e33      	ldr	r6, [pc, #204]	; (e2dc <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    e210:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    e212:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    e214:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    e216:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    e218:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    e21a:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    e21c:	bf28      	it	cs
    e21e:	2300      	movcs	r3, #0
				if (newhead != tail) {
    e220:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    e222:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    e226:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    e228:	bf1c      	itt	ne
    e22a:	54f1      	strbne	r1, [r6, r3]
    e22c:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    e22e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    e232:	d1f0      	bne.n	e216 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    e234:	4b2a      	ldr	r3, [pc, #168]	; (e2e0 <uart0_status_isr+0xf4>)
    e236:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    e238:	b2c2      	uxtb	r2, r0
    e23a:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    e23c:	b14b      	cbz	r3, e252 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    e23e:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    e240:	bf36      	itet	cc
    e242:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    e246:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    e248:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    e24a:	2827      	cmp	r0, #39	; 0x27
    e24c:	bfc4      	itt	gt
    e24e:	2201      	movgt	r2, #1
    e250:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    e252:	491f      	ldr	r1, [pc, #124]	; (e2d0 <uart0_status_isr+0xe4>)
    e254:	78ca      	ldrb	r2, [r1, #3]
    e256:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    e258:	0615      	lsls	r5, r2, #24
    e25a:	d416      	bmi.n	e28a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    e25c:	0652      	lsls	r2, r2, #25
    e25e:	d50d      	bpl.n	e27c <uart0_status_isr+0x90>
    e260:	4b1b      	ldr	r3, [pc, #108]	; (e2d0 <uart0_status_isr+0xe4>)
    e262:	791b      	ldrb	r3, [r3, #4]
    e264:	065b      	lsls	r3, r3, #25
    e266:	d509      	bpl.n	e27c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    e268:	4b1e      	ldr	r3, [pc, #120]	; (e2e4 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    e26a:	491f      	ldr	r1, [pc, #124]	; (e2e8 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    e26c:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    e26e:	2200      	movs	r2, #0
    e270:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    e272:	b103      	cbz	r3, e276 <uart0_status_isr+0x8a>
    e274:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    e276:	4b16      	ldr	r3, [pc, #88]	; (e2d0 <uart0_status_isr+0xe4>)
    e278:	223c      	movs	r2, #60	; 0x3c
    e27a:	70da      	strb	r2, [r3, #3]
	}
}
    e27c:	bcf0      	pop	{r4, r5, r6, r7}
    e27e:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    e280:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    e282:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    e284:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    e286:	b662      	cpsie	i
    e288:	e7e3      	b.n	e252 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    e28a:	790b      	ldrb	r3, [r1, #4]
    e28c:	061c      	lsls	r4, r3, #24
    e28e:	d5e5      	bpl.n	e25c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    e290:	4b16      	ldr	r3, [pc, #88]	; (e2ec <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    e292:	4e17      	ldr	r6, [pc, #92]	; (e2f0 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    e294:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    e296:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    e298:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    e29a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    e29c:	429c      	cmp	r4, r3
    e29e:	d00e      	beq.n	e2be <uart0_status_isr+0xd2>
    e2a0:	4d14      	ldr	r5, [pc, #80]	; (e2f4 <uart0_status_isr+0x108>)
    e2a2:	e001      	b.n	e2a8 <uart0_status_isr+0xbc>
    e2a4:	42a3      	cmp	r3, r4
    e2a6:	d00a      	beq.n	e2be <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    e2a8:	3301      	adds	r3, #1
    e2aa:	2b40      	cmp	r3, #64	; 0x40
    e2ac:	bf28      	it	cs
    e2ae:	2300      	movcs	r3, #0
			avail = UART0_S1;
    e2b0:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    e2b2:	5ce8      	ldrb	r0, [r5, r3]
    e2b4:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    e2b6:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    e2b8:	7d08      	ldrb	r0, [r1, #20]
    e2ba:	2807      	cmp	r0, #7
    e2bc:	d9f2      	bls.n	e2a4 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    e2be:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    e2c0:	4903      	ldr	r1, [pc, #12]	; (e2d0 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    e2c2:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    e2c4:	790b      	ldrb	r3, [r1, #4]
    e2c6:	0618      	lsls	r0, r3, #24
    e2c8:	bf44      	itt	mi
    e2ca:	237c      	movmi	r3, #124	; 0x7c
    e2cc:	70cb      	strbmi	r3, [r1, #3]
    e2ce:	e7c5      	b.n	e25c <uart0_status_isr+0x70>
    e2d0:	4006a000 	.word	0x4006a000
    e2d4:	1fffb2c4 	.word	0x1fffb2c4
    e2d8:	1fffb2c5 	.word	0x1fffb2c5
    e2dc:	1fffb308 	.word	0x1fffb308
    e2e0:	1fffb2c0 	.word	0x1fffb2c0
    e2e4:	1fffb34c 	.word	0x1fffb34c
    e2e8:	1fffb348 	.word	0x1fffb348
    e2ec:	1fffb350 	.word	0x1fffb350
    e2f0:	1fffb349 	.word	0x1fffb349
    e2f4:	1fffb2c8 	.word	0x1fffb2c8

0000e2f8 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    e2f8:	4a05      	ldr	r2, [pc, #20]	; (e310 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    e2fa:	4b06      	ldr	r3, [pc, #24]	; (e314 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    e2fc:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    e2fe:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    e300:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    e302:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    e304:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    e306:	bf38      	it	cc
    e308:	3040      	addcc	r0, #64	; 0x40
    e30a:	1ac0      	subs	r0, r0, r3
}
    e30c:	4770      	bx	lr
    e30e:	bf00      	nop
    e310:	1fffb3c4 	.word	0x1fffb3c4
    e314:	1fffb359 	.word	0x1fffb359

0000e318 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    e318:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    e31a:	4b38      	ldr	r3, [pc, #224]	; (e3fc <uart1_status_isr+0xe4>)
    e31c:	791a      	ldrb	r2, [r3, #4]
    e31e:	f012 0f30 	tst.w	r2, #48	; 0x30
    e322:	d02c      	beq.n	e37e <uart1_status_isr+0x66>
		__disable_irq();
    e324:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    e326:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    e328:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    e32c:	2900      	cmp	r1, #0
    e32e:	d03d      	beq.n	e3ac <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    e330:	b662      	cpsie	i
			head = rx_buffer_head;
    e332:	4f33      	ldr	r7, [pc, #204]	; (e400 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    e334:	4933      	ldr	r1, [pc, #204]	; (e404 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    e336:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    e338:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    e33a:	4e33      	ldr	r6, [pc, #204]	; (e408 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    e33c:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    e33e:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    e340:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    e342:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    e344:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    e346:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    e348:	bf28      	it	cs
    e34a:	2300      	movcs	r3, #0
				if (newhead != tail) {
    e34c:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    e34e:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    e352:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    e354:	bf1c      	itt	ne
    e356:	54f1      	strbne	r1, [r6, r3]
    e358:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    e35a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    e35e:	d1f0      	bne.n	e342 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    e360:	4b2a      	ldr	r3, [pc, #168]	; (e40c <uart1_status_isr+0xf4>)
    e362:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    e364:	b2c2      	uxtb	r2, r0
    e366:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    e368:	b14b      	cbz	r3, e37e <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    e36a:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    e36c:	bf36      	itet	cc
    e36e:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    e372:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    e374:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    e376:	2827      	cmp	r0, #39	; 0x27
    e378:	bfc4      	itt	gt
    e37a:	2201      	movgt	r2, #1
    e37c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    e37e:	491f      	ldr	r1, [pc, #124]	; (e3fc <uart1_status_isr+0xe4>)
    e380:	78ca      	ldrb	r2, [r1, #3]
    e382:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    e384:	0615      	lsls	r5, r2, #24
    e386:	d416      	bmi.n	e3b6 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    e388:	0652      	lsls	r2, r2, #25
    e38a:	d50d      	bpl.n	e3a8 <uart1_status_isr+0x90>
    e38c:	4b1b      	ldr	r3, [pc, #108]	; (e3fc <uart1_status_isr+0xe4>)
    e38e:	791b      	ldrb	r3, [r3, #4]
    e390:	065b      	lsls	r3, r3, #25
    e392:	d509      	bpl.n	e3a8 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    e394:	4b1e      	ldr	r3, [pc, #120]	; (e410 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    e396:	491f      	ldr	r1, [pc, #124]	; (e414 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    e398:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    e39a:	2200      	movs	r2, #0
    e39c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    e39e:	b103      	cbz	r3, e3a2 <uart1_status_isr+0x8a>
    e3a0:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    e3a2:	4b16      	ldr	r3, [pc, #88]	; (e3fc <uart1_status_isr+0xe4>)
    e3a4:	223c      	movs	r2, #60	; 0x3c
    e3a6:	70da      	strb	r2, [r3, #3]
	}
}
    e3a8:	bcf0      	pop	{r4, r5, r6, r7}
    e3aa:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    e3ac:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    e3ae:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    e3b0:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    e3b2:	b662      	cpsie	i
    e3b4:	e7e3      	b.n	e37e <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    e3b6:	790b      	ldrb	r3, [r1, #4]
    e3b8:	061c      	lsls	r4, r3, #24
    e3ba:	d5e5      	bpl.n	e388 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    e3bc:	4b16      	ldr	r3, [pc, #88]	; (e418 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    e3be:	4e17      	ldr	r6, [pc, #92]	; (e41c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    e3c0:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    e3c2:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    e3c4:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    e3c6:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    e3c8:	429c      	cmp	r4, r3
    e3ca:	d00e      	beq.n	e3ea <uart1_status_isr+0xd2>
    e3cc:	4d14      	ldr	r5, [pc, #80]	; (e420 <uart1_status_isr+0x108>)
    e3ce:	e001      	b.n	e3d4 <uart1_status_isr+0xbc>
    e3d0:	42a3      	cmp	r3, r4
    e3d2:	d00a      	beq.n	e3ea <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    e3d4:	3301      	adds	r3, #1
    e3d6:	2b28      	cmp	r3, #40	; 0x28
    e3d8:	bf28      	it	cs
    e3da:	2300      	movcs	r3, #0
			avail = UART1_S1;
    e3dc:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    e3de:	5ce8      	ldrb	r0, [r5, r3]
    e3e0:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    e3e2:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    e3e4:	7d08      	ldrb	r0, [r1, #20]
    e3e6:	2807      	cmp	r0, #7
    e3e8:	d9f2      	bls.n	e3d0 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    e3ea:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    e3ec:	4903      	ldr	r1, [pc, #12]	; (e3fc <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    e3ee:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    e3f0:	790b      	ldrb	r3, [r1, #4]
    e3f2:	0618      	lsls	r0, r3, #24
    e3f4:	bf44      	itt	mi
    e3f6:	237c      	movmi	r3, #124	; 0x7c
    e3f8:	70cb      	strbmi	r3, [r1, #3]
    e3fa:	e7c5      	b.n	e388 <uart1_status_isr+0x70>
    e3fc:	4006b000 	.word	0x4006b000
    e400:	1fffb3c4 	.word	0x1fffb3c4
    e404:	1fffb359 	.word	0x1fffb359
    e408:	1fffb384 	.word	0x1fffb384
    e40c:	1fffb354 	.word	0x1fffb354
    e410:	1fffb3c8 	.word	0x1fffb3c8
    e414:	1fffb358 	.word	0x1fffb358
    e418:	1fffb3cc 	.word	0x1fffb3cc
    e41c:	1fffb3c5 	.word	0x1fffb3c5
    e420:	1fffb35c 	.word	0x1fffb35c

0000e424 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    e424:	4a05      	ldr	r2, [pc, #20]	; (e43c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    e426:	4b06      	ldr	r3, [pc, #24]	; (e440 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    e428:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    e42a:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    e42c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    e42e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    e430:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    e432:	bf38      	it	cc
    e434:	3040      	addcc	r0, #64	; 0x40
    e436:	1ac0      	subs	r0, r0, r3
}
    e438:	4770      	bx	lr
    e43a:	bf00      	nop
    e43c:	1fffb3d4 	.word	0x1fffb3d4
    e440:	1fffb3d5 	.word	0x1fffb3d5

0000e444 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    e444:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    e446:	4b2b      	ldr	r3, [pc, #172]	; (e4f4 <uart2_status_isr+0xb0>)
    e448:	791a      	ldrb	r2, [r3, #4]
    e44a:	0694      	lsls	r4, r2, #26
    e44c:	d51f      	bpl.n	e48e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    e44e:	482a      	ldr	r0, [pc, #168]	; (e4f8 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    e450:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    e452:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    e454:	4929      	ldr	r1, [pc, #164]	; (e4fc <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    e456:	3301      	adds	r3, #1
    e458:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    e45a:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    e45c:	bfc8      	it	gt
    e45e:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    e460:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    e462:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    e464:	d003      	beq.n	e46e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    e466:	4c26      	ldr	r4, [pc, #152]	; (e500 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    e468:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    e46a:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    e46c:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    e46e:	4a25      	ldr	r2, [pc, #148]	; (e504 <uart2_status_isr+0xc0>)
    e470:	6811      	ldr	r1, [r2, #0]
    e472:	b161      	cbz	r1, e48e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    e474:	4a24      	ldr	r2, [pc, #144]	; (e508 <uart2_status_isr+0xc4>)
    e476:	7812      	ldrb	r2, [r2, #0]
    e478:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    e47a:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    e47c:	bf36      	itet	cc
    e47e:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    e482:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    e484:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    e486:	2b27      	cmp	r3, #39	; 0x27
    e488:	bfc4      	itt	gt
    e48a:	2301      	movgt	r3, #1
    e48c:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    e48e:	4a19      	ldr	r2, [pc, #100]	; (e4f4 <uart2_status_isr+0xb0>)
    e490:	78d3      	ldrb	r3, [r2, #3]
    e492:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    e494:	0618      	lsls	r0, r3, #24
    e496:	d411      	bmi.n	e4bc <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    e498:	065a      	lsls	r2, r3, #25
    e49a:	d50d      	bpl.n	e4b8 <uart2_status_isr+0x74>
    e49c:	4b15      	ldr	r3, [pc, #84]	; (e4f4 <uart2_status_isr+0xb0>)
    e49e:	791b      	ldrb	r3, [r3, #4]
    e4a0:	065b      	lsls	r3, r3, #25
    e4a2:	d509      	bpl.n	e4b8 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    e4a4:	4b19      	ldr	r3, [pc, #100]	; (e50c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    e4a6:	491a      	ldr	r1, [pc, #104]	; (e510 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    e4a8:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    e4aa:	2200      	movs	r2, #0
    e4ac:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    e4ae:	b103      	cbz	r3, e4b2 <uart2_status_isr+0x6e>
    e4b0:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    e4b2:	4b10      	ldr	r3, [pc, #64]	; (e4f4 <uart2_status_isr+0xb0>)
    e4b4:	222c      	movs	r2, #44	; 0x2c
    e4b6:	70da      	strb	r2, [r3, #3]
	}
}
    e4b8:	bc30      	pop	{r4, r5}
    e4ba:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    e4bc:	7911      	ldrb	r1, [r2, #4]
    e4be:	0609      	lsls	r1, r1, #24
    e4c0:	d5ea      	bpl.n	e498 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    e4c2:	4914      	ldr	r1, [pc, #80]	; (e514 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    e4c4:	4810      	ldr	r0, [pc, #64]	; (e508 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    e4c6:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    e4c8:	7801      	ldrb	r1, [r0, #0]
    e4ca:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    e4cc:	428c      	cmp	r4, r1
    e4ce:	d00d      	beq.n	e4ec <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    e4d0:	1c4a      	adds	r2, r1, #1
    e4d2:	2a27      	cmp	r2, #39	; 0x27
    e4d4:	bf84      	itt	hi
    e4d6:	2100      	movhi	r1, #0
    e4d8:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    e4da:	4d0f      	ldr	r5, [pc, #60]	; (e518 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    e4dc:	4c05      	ldr	r4, [pc, #20]	; (e4f4 <uart2_status_isr+0xb0>)
    e4de:	bf98      	it	ls
    e4e0:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    e4e2:	5caa      	ldrb	r2, [r5, r2]
    e4e4:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    e4e6:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    e4e8:	7001      	strb	r1, [r0, #0]
    e4ea:	e7d5      	b.n	e498 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    e4ec:	216c      	movs	r1, #108	; 0x6c
    e4ee:	70d1      	strb	r1, [r2, #3]
    e4f0:	e7d2      	b.n	e498 <uart2_status_isr+0x54>
    e4f2:	bf00      	nop
    e4f4:	4006c000 	.word	0x4006c000
    e4f8:	1fffb3d4 	.word	0x1fffb3d4
    e4fc:	1fffb3d5 	.word	0x1fffb3d5
    e500:	1fffb400 	.word	0x1fffb400
    e504:	1fffb3d0 	.word	0x1fffb3d0
    e508:	1fffb441 	.word	0x1fffb441
    e50c:	1fffb444 	.word	0x1fffb444
    e510:	1fffb440 	.word	0x1fffb440
    e514:	1fffb448 	.word	0x1fffb448
    e518:	1fffb3d8 	.word	0x1fffb3d8

0000e51c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    e51c:	b570      	push	{r4, r5, r6, lr}
    e51e:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    e520:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    e522:	4b19      	ldr	r3, [pc, #100]	; (e588 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    e524:	4d19      	ldr	r5, [pc, #100]	; (e58c <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    e526:	481a      	ldr	r0, [pc, #104]	; (e590 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    e528:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    e52a:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    e52c:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    e52e:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    e530:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    e532:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    e534:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    e536:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    e538:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    e53a:	7813      	ldrb	r3, [r2, #0]
    e53c:	061b      	lsls	r3, r3, #24
    e53e:	d5fc      	bpl.n	e53a <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    e540:	4b14      	ldr	r3, [pc, #80]	; (e594 <usb_init_serialnumber+0x78>)
    e542:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    e544:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e546:	4b14      	ldr	r3, [pc, #80]	; (e598 <usb_init_serialnumber+0x7c>)
    e548:	4c14      	ldr	r4, [pc, #80]	; (e59c <usb_init_serialnumber+0x80>)
    e54a:	4298      	cmp	r0, r3
    e54c:	bf98      	it	ls
    e54e:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    e552:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e554:	bf98      	it	ls
    e556:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    e558:	220a      	movs	r2, #10
    e55a:	f7ff fe11 	bl	e180 <ultoa>
    e55e:	a901      	add	r1, sp, #4
    e560:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    e562:	2300      	movs	r3, #0
		char c = buf[i];
    e564:	f811 2b01 	ldrb.w	r2, [r1], #1
    e568:	3301      	adds	r3, #1
		if (!c) break;
    e56a:	b13a      	cbz	r2, e57c <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    e56c:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    e56e:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    e572:	d1f7      	bne.n	e564 <usb_init_serialnumber+0x48>
    e574:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e576:	7023      	strb	r3, [r4, #0]
}
    e578:	b004      	add	sp, #16
    e57a:	bd70      	pop	{r4, r5, r6, pc}
    e57c:	005b      	lsls	r3, r3, #1
    e57e:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e580:	7023      	strb	r3, [r4, #0]
}
    e582:	b004      	add	sp, #16
    e584:	bd70      	pop	{r4, r5, r6, pc}
    e586:	bf00      	nop
    e588:	40020000 	.word	0x40020000
    e58c:	40020007 	.word	0x40020007
    e590:	40020006 	.word	0x40020006
    e594:	40020008 	.word	0x40020008
    e598:	0098967f 	.word	0x0098967f
    e59c:	1fff882c 	.word	0x1fff882c

0000e5a0 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    e5a0:	4770      	bx	lr
    e5a2:	bf00      	nop

0000e5a4 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    e5a4:	4770      	bx	lr
    e5a6:	bf00      	nop

0000e5a8 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    e5a8:	4770      	bx	lr
    e5aa:	bf00      	nop

0000e5ac <__aeabi_drsub>:
    e5ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    e5b0:	e002      	b.n	e5b8 <__adddf3>
    e5b2:	bf00      	nop

0000e5b4 <__aeabi_dsub>:
    e5b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000e5b8 <__adddf3>:
    e5b8:	b530      	push	{r4, r5, lr}
    e5ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
    e5be:	ea4f 0543 	mov.w	r5, r3, lsl #1
    e5c2:	ea94 0f05 	teq	r4, r5
    e5c6:	bf08      	it	eq
    e5c8:	ea90 0f02 	teqeq	r0, r2
    e5cc:	bf1f      	itttt	ne
    e5ce:	ea54 0c00 	orrsne.w	ip, r4, r0
    e5d2:	ea55 0c02 	orrsne.w	ip, r5, r2
    e5d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    e5da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e5de:	f000 80e2 	beq.w	e7a6 <__adddf3+0x1ee>
    e5e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    e5e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    e5ea:	bfb8      	it	lt
    e5ec:	426d      	neglt	r5, r5
    e5ee:	dd0c      	ble.n	e60a <__adddf3+0x52>
    e5f0:	442c      	add	r4, r5
    e5f2:	ea80 0202 	eor.w	r2, r0, r2
    e5f6:	ea81 0303 	eor.w	r3, r1, r3
    e5fa:	ea82 0000 	eor.w	r0, r2, r0
    e5fe:	ea83 0101 	eor.w	r1, r3, r1
    e602:	ea80 0202 	eor.w	r2, r0, r2
    e606:	ea81 0303 	eor.w	r3, r1, r3
    e60a:	2d36      	cmp	r5, #54	; 0x36
    e60c:	bf88      	it	hi
    e60e:	bd30      	pophi	{r4, r5, pc}
    e610:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    e614:	ea4f 3101 	mov.w	r1, r1, lsl #12
    e618:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    e61c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    e620:	d002      	beq.n	e628 <__adddf3+0x70>
    e622:	4240      	negs	r0, r0
    e624:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e628:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    e62c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    e630:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    e634:	d002      	beq.n	e63c <__adddf3+0x84>
    e636:	4252      	negs	r2, r2
    e638:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e63c:	ea94 0f05 	teq	r4, r5
    e640:	f000 80a7 	beq.w	e792 <__adddf3+0x1da>
    e644:	f1a4 0401 	sub.w	r4, r4, #1
    e648:	f1d5 0e20 	rsbs	lr, r5, #32
    e64c:	db0d      	blt.n	e66a <__adddf3+0xb2>
    e64e:	fa02 fc0e 	lsl.w	ip, r2, lr
    e652:	fa22 f205 	lsr.w	r2, r2, r5
    e656:	1880      	adds	r0, r0, r2
    e658:	f141 0100 	adc.w	r1, r1, #0
    e65c:	fa03 f20e 	lsl.w	r2, r3, lr
    e660:	1880      	adds	r0, r0, r2
    e662:	fa43 f305 	asr.w	r3, r3, r5
    e666:	4159      	adcs	r1, r3
    e668:	e00e      	b.n	e688 <__adddf3+0xd0>
    e66a:	f1a5 0520 	sub.w	r5, r5, #32
    e66e:	f10e 0e20 	add.w	lr, lr, #32
    e672:	2a01      	cmp	r2, #1
    e674:	fa03 fc0e 	lsl.w	ip, r3, lr
    e678:	bf28      	it	cs
    e67a:	f04c 0c02 	orrcs.w	ip, ip, #2
    e67e:	fa43 f305 	asr.w	r3, r3, r5
    e682:	18c0      	adds	r0, r0, r3
    e684:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    e688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e68c:	d507      	bpl.n	e69e <__adddf3+0xe6>
    e68e:	f04f 0e00 	mov.w	lr, #0
    e692:	f1dc 0c00 	rsbs	ip, ip, #0
    e696:	eb7e 0000 	sbcs.w	r0, lr, r0
    e69a:	eb6e 0101 	sbc.w	r1, lr, r1
    e69e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    e6a2:	d31b      	bcc.n	e6dc <__adddf3+0x124>
    e6a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    e6a8:	d30c      	bcc.n	e6c4 <__adddf3+0x10c>
    e6aa:	0849      	lsrs	r1, r1, #1
    e6ac:	ea5f 0030 	movs.w	r0, r0, rrx
    e6b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    e6b4:	f104 0401 	add.w	r4, r4, #1
    e6b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    e6bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    e6c0:	f080 809a 	bcs.w	e7f8 <__adddf3+0x240>
    e6c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    e6c8:	bf08      	it	eq
    e6ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    e6ce:	f150 0000 	adcs.w	r0, r0, #0
    e6d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    e6d6:	ea41 0105 	orr.w	r1, r1, r5
    e6da:	bd30      	pop	{r4, r5, pc}
    e6dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    e6e0:	4140      	adcs	r0, r0
    e6e2:	eb41 0101 	adc.w	r1, r1, r1
    e6e6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    e6ea:	f1a4 0401 	sub.w	r4, r4, #1
    e6ee:	d1e9      	bne.n	e6c4 <__adddf3+0x10c>
    e6f0:	f091 0f00 	teq	r1, #0
    e6f4:	bf04      	itt	eq
    e6f6:	4601      	moveq	r1, r0
    e6f8:	2000      	moveq	r0, #0
    e6fa:	fab1 f381 	clz	r3, r1
    e6fe:	bf08      	it	eq
    e700:	3320      	addeq	r3, #32
    e702:	f1a3 030b 	sub.w	r3, r3, #11
    e706:	f1b3 0220 	subs.w	r2, r3, #32
    e70a:	da0c      	bge.n	e726 <__adddf3+0x16e>
    e70c:	320c      	adds	r2, #12
    e70e:	dd08      	ble.n	e722 <__adddf3+0x16a>
    e710:	f102 0c14 	add.w	ip, r2, #20
    e714:	f1c2 020c 	rsb	r2, r2, #12
    e718:	fa01 f00c 	lsl.w	r0, r1, ip
    e71c:	fa21 f102 	lsr.w	r1, r1, r2
    e720:	e00c      	b.n	e73c <__adddf3+0x184>
    e722:	f102 0214 	add.w	r2, r2, #20
    e726:	bfd8      	it	le
    e728:	f1c2 0c20 	rsble	ip, r2, #32
    e72c:	fa01 f102 	lsl.w	r1, r1, r2
    e730:	fa20 fc0c 	lsr.w	ip, r0, ip
    e734:	bfdc      	itt	le
    e736:	ea41 010c 	orrle.w	r1, r1, ip
    e73a:	4090      	lslle	r0, r2
    e73c:	1ae4      	subs	r4, r4, r3
    e73e:	bfa2      	ittt	ge
    e740:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    e744:	4329      	orrge	r1, r5
    e746:	bd30      	popge	{r4, r5, pc}
    e748:	ea6f 0404 	mvn.w	r4, r4
    e74c:	3c1f      	subs	r4, #31
    e74e:	da1c      	bge.n	e78a <__adddf3+0x1d2>
    e750:	340c      	adds	r4, #12
    e752:	dc0e      	bgt.n	e772 <__adddf3+0x1ba>
    e754:	f104 0414 	add.w	r4, r4, #20
    e758:	f1c4 0220 	rsb	r2, r4, #32
    e75c:	fa20 f004 	lsr.w	r0, r0, r4
    e760:	fa01 f302 	lsl.w	r3, r1, r2
    e764:	ea40 0003 	orr.w	r0, r0, r3
    e768:	fa21 f304 	lsr.w	r3, r1, r4
    e76c:	ea45 0103 	orr.w	r1, r5, r3
    e770:	bd30      	pop	{r4, r5, pc}
    e772:	f1c4 040c 	rsb	r4, r4, #12
    e776:	f1c4 0220 	rsb	r2, r4, #32
    e77a:	fa20 f002 	lsr.w	r0, r0, r2
    e77e:	fa01 f304 	lsl.w	r3, r1, r4
    e782:	ea40 0003 	orr.w	r0, r0, r3
    e786:	4629      	mov	r1, r5
    e788:	bd30      	pop	{r4, r5, pc}
    e78a:	fa21 f004 	lsr.w	r0, r1, r4
    e78e:	4629      	mov	r1, r5
    e790:	bd30      	pop	{r4, r5, pc}
    e792:	f094 0f00 	teq	r4, #0
    e796:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    e79a:	bf06      	itte	eq
    e79c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    e7a0:	3401      	addeq	r4, #1
    e7a2:	3d01      	subne	r5, #1
    e7a4:	e74e      	b.n	e644 <__adddf3+0x8c>
    e7a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    e7aa:	bf18      	it	ne
    e7ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    e7b0:	d029      	beq.n	e806 <__adddf3+0x24e>
    e7b2:	ea94 0f05 	teq	r4, r5
    e7b6:	bf08      	it	eq
    e7b8:	ea90 0f02 	teqeq	r0, r2
    e7bc:	d005      	beq.n	e7ca <__adddf3+0x212>
    e7be:	ea54 0c00 	orrs.w	ip, r4, r0
    e7c2:	bf04      	itt	eq
    e7c4:	4619      	moveq	r1, r3
    e7c6:	4610      	moveq	r0, r2
    e7c8:	bd30      	pop	{r4, r5, pc}
    e7ca:	ea91 0f03 	teq	r1, r3
    e7ce:	bf1e      	ittt	ne
    e7d0:	2100      	movne	r1, #0
    e7d2:	2000      	movne	r0, #0
    e7d4:	bd30      	popne	{r4, r5, pc}
    e7d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    e7da:	d105      	bne.n	e7e8 <__adddf3+0x230>
    e7dc:	0040      	lsls	r0, r0, #1
    e7de:	4149      	adcs	r1, r1
    e7e0:	bf28      	it	cs
    e7e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    e7e6:	bd30      	pop	{r4, r5, pc}
    e7e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    e7ec:	bf3c      	itt	cc
    e7ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    e7f2:	bd30      	popcc	{r4, r5, pc}
    e7f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e7f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    e7fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e800:	f04f 0000 	mov.w	r0, #0
    e804:	bd30      	pop	{r4, r5, pc}
    e806:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    e80a:	bf1a      	itte	ne
    e80c:	4619      	movne	r1, r3
    e80e:	4610      	movne	r0, r2
    e810:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    e814:	bf1c      	itt	ne
    e816:	460b      	movne	r3, r1
    e818:	4602      	movne	r2, r0
    e81a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    e81e:	bf06      	itte	eq
    e820:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    e824:	ea91 0f03 	teqeq	r1, r3
    e828:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    e82c:	bd30      	pop	{r4, r5, pc}
    e82e:	bf00      	nop

0000e830 <__aeabi_ui2d>:
    e830:	f090 0f00 	teq	r0, #0
    e834:	bf04      	itt	eq
    e836:	2100      	moveq	r1, #0
    e838:	4770      	bxeq	lr
    e83a:	b530      	push	{r4, r5, lr}
    e83c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e840:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e844:	f04f 0500 	mov.w	r5, #0
    e848:	f04f 0100 	mov.w	r1, #0
    e84c:	e750      	b.n	e6f0 <__adddf3+0x138>
    e84e:	bf00      	nop

0000e850 <__aeabi_i2d>:
    e850:	f090 0f00 	teq	r0, #0
    e854:	bf04      	itt	eq
    e856:	2100      	moveq	r1, #0
    e858:	4770      	bxeq	lr
    e85a:	b530      	push	{r4, r5, lr}
    e85c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e860:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e864:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    e868:	bf48      	it	mi
    e86a:	4240      	negmi	r0, r0
    e86c:	f04f 0100 	mov.w	r1, #0
    e870:	e73e      	b.n	e6f0 <__adddf3+0x138>
    e872:	bf00      	nop

0000e874 <__aeabi_f2d>:
    e874:	0042      	lsls	r2, r0, #1
    e876:	ea4f 01e2 	mov.w	r1, r2, asr #3
    e87a:	ea4f 0131 	mov.w	r1, r1, rrx
    e87e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    e882:	bf1f      	itttt	ne
    e884:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    e888:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    e88c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    e890:	4770      	bxne	lr
    e892:	f092 0f00 	teq	r2, #0
    e896:	bf14      	ite	ne
    e898:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    e89c:	4770      	bxeq	lr
    e89e:	b530      	push	{r4, r5, lr}
    e8a0:	f44f 7460 	mov.w	r4, #896	; 0x380
    e8a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    e8a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    e8ac:	e720      	b.n	e6f0 <__adddf3+0x138>
    e8ae:	bf00      	nop

0000e8b0 <__aeabi_ul2d>:
    e8b0:	ea50 0201 	orrs.w	r2, r0, r1
    e8b4:	bf08      	it	eq
    e8b6:	4770      	bxeq	lr
    e8b8:	b530      	push	{r4, r5, lr}
    e8ba:	f04f 0500 	mov.w	r5, #0
    e8be:	e00a      	b.n	e8d6 <__aeabi_l2d+0x16>

0000e8c0 <__aeabi_l2d>:
    e8c0:	ea50 0201 	orrs.w	r2, r0, r1
    e8c4:	bf08      	it	eq
    e8c6:	4770      	bxeq	lr
    e8c8:	b530      	push	{r4, r5, lr}
    e8ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    e8ce:	d502      	bpl.n	e8d6 <__aeabi_l2d+0x16>
    e8d0:	4240      	negs	r0, r0
    e8d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e8d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e8da:	f104 0432 	add.w	r4, r4, #50	; 0x32
    e8de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    e8e2:	f43f aedc 	beq.w	e69e <__adddf3+0xe6>
    e8e6:	f04f 0203 	mov.w	r2, #3
    e8ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    e8ee:	bf18      	it	ne
    e8f0:	3203      	addne	r2, #3
    e8f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    e8f6:	bf18      	it	ne
    e8f8:	3203      	addne	r2, #3
    e8fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    e8fe:	f1c2 0320 	rsb	r3, r2, #32
    e902:	fa00 fc03 	lsl.w	ip, r0, r3
    e906:	fa20 f002 	lsr.w	r0, r0, r2
    e90a:	fa01 fe03 	lsl.w	lr, r1, r3
    e90e:	ea40 000e 	orr.w	r0, r0, lr
    e912:	fa21 f102 	lsr.w	r1, r1, r2
    e916:	4414      	add	r4, r2
    e918:	e6c1      	b.n	e69e <__adddf3+0xe6>
    e91a:	bf00      	nop

0000e91c <__aeabi_dmul>:
    e91c:	b570      	push	{r4, r5, r6, lr}
    e91e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    e922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    e926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    e92a:	bf1d      	ittte	ne
    e92c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    e930:	ea94 0f0c 	teqne	r4, ip
    e934:	ea95 0f0c 	teqne	r5, ip
    e938:	f000 f8de 	bleq	eaf8 <__aeabi_dmul+0x1dc>
    e93c:	442c      	add	r4, r5
    e93e:	ea81 0603 	eor.w	r6, r1, r3
    e942:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    e946:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    e94a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    e94e:	bf18      	it	ne
    e950:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    e954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e95c:	d038      	beq.n	e9d0 <__aeabi_dmul+0xb4>
    e95e:	fba0 ce02 	umull	ip, lr, r0, r2
    e962:	f04f 0500 	mov.w	r5, #0
    e966:	fbe1 e502 	umlal	lr, r5, r1, r2
    e96a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    e96e:	fbe0 e503 	umlal	lr, r5, r0, r3
    e972:	f04f 0600 	mov.w	r6, #0
    e976:	fbe1 5603 	umlal	r5, r6, r1, r3
    e97a:	f09c 0f00 	teq	ip, #0
    e97e:	bf18      	it	ne
    e980:	f04e 0e01 	orrne.w	lr, lr, #1
    e984:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    e988:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    e98c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    e990:	d204      	bcs.n	e99c <__aeabi_dmul+0x80>
    e992:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    e996:	416d      	adcs	r5, r5
    e998:	eb46 0606 	adc.w	r6, r6, r6
    e99c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    e9a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    e9a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    e9a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    e9ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    e9b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    e9b4:	bf88      	it	hi
    e9b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    e9ba:	d81e      	bhi.n	e9fa <__aeabi_dmul+0xde>
    e9bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    e9c0:	bf08      	it	eq
    e9c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    e9c6:	f150 0000 	adcs.w	r0, r0, #0
    e9ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    e9ce:	bd70      	pop	{r4, r5, r6, pc}
    e9d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    e9d4:	ea46 0101 	orr.w	r1, r6, r1
    e9d8:	ea40 0002 	orr.w	r0, r0, r2
    e9dc:	ea81 0103 	eor.w	r1, r1, r3
    e9e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    e9e4:	bfc2      	ittt	gt
    e9e6:	ebd4 050c 	rsbsgt	r5, r4, ip
    e9ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    e9ee:	bd70      	popgt	{r4, r5, r6, pc}
    e9f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e9f4:	f04f 0e00 	mov.w	lr, #0
    e9f8:	3c01      	subs	r4, #1
    e9fa:	f300 80ab 	bgt.w	eb54 <__aeabi_dmul+0x238>
    e9fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
    ea02:	bfde      	ittt	le
    ea04:	2000      	movle	r0, #0
    ea06:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    ea0a:	bd70      	pople	{r4, r5, r6, pc}
    ea0c:	f1c4 0400 	rsb	r4, r4, #0
    ea10:	3c20      	subs	r4, #32
    ea12:	da35      	bge.n	ea80 <__aeabi_dmul+0x164>
    ea14:	340c      	adds	r4, #12
    ea16:	dc1b      	bgt.n	ea50 <__aeabi_dmul+0x134>
    ea18:	f104 0414 	add.w	r4, r4, #20
    ea1c:	f1c4 0520 	rsb	r5, r4, #32
    ea20:	fa00 f305 	lsl.w	r3, r0, r5
    ea24:	fa20 f004 	lsr.w	r0, r0, r4
    ea28:	fa01 f205 	lsl.w	r2, r1, r5
    ea2c:	ea40 0002 	orr.w	r0, r0, r2
    ea30:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    ea34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ea38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ea3c:	fa21 f604 	lsr.w	r6, r1, r4
    ea40:	eb42 0106 	adc.w	r1, r2, r6
    ea44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ea48:	bf08      	it	eq
    ea4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ea4e:	bd70      	pop	{r4, r5, r6, pc}
    ea50:	f1c4 040c 	rsb	r4, r4, #12
    ea54:	f1c4 0520 	rsb	r5, r4, #32
    ea58:	fa00 f304 	lsl.w	r3, r0, r4
    ea5c:	fa20 f005 	lsr.w	r0, r0, r5
    ea60:	fa01 f204 	lsl.w	r2, r1, r4
    ea64:	ea40 0002 	orr.w	r0, r0, r2
    ea68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ea6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ea70:	f141 0100 	adc.w	r1, r1, #0
    ea74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ea78:	bf08      	it	eq
    ea7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ea7e:	bd70      	pop	{r4, r5, r6, pc}
    ea80:	f1c4 0520 	rsb	r5, r4, #32
    ea84:	fa00 f205 	lsl.w	r2, r0, r5
    ea88:	ea4e 0e02 	orr.w	lr, lr, r2
    ea8c:	fa20 f304 	lsr.w	r3, r0, r4
    ea90:	fa01 f205 	lsl.w	r2, r1, r5
    ea94:	ea43 0302 	orr.w	r3, r3, r2
    ea98:	fa21 f004 	lsr.w	r0, r1, r4
    ea9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    eaa0:	fa21 f204 	lsr.w	r2, r1, r4
    eaa4:	ea20 0002 	bic.w	r0, r0, r2
    eaa8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    eaac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    eab0:	bf08      	it	eq
    eab2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    eab6:	bd70      	pop	{r4, r5, r6, pc}
    eab8:	f094 0f00 	teq	r4, #0
    eabc:	d10f      	bne.n	eade <__aeabi_dmul+0x1c2>
    eabe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    eac2:	0040      	lsls	r0, r0, #1
    eac4:	eb41 0101 	adc.w	r1, r1, r1
    eac8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    eacc:	bf08      	it	eq
    eace:	3c01      	subeq	r4, #1
    ead0:	d0f7      	beq.n	eac2 <__aeabi_dmul+0x1a6>
    ead2:	ea41 0106 	orr.w	r1, r1, r6
    ead6:	f095 0f00 	teq	r5, #0
    eada:	bf18      	it	ne
    eadc:	4770      	bxne	lr
    eade:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    eae2:	0052      	lsls	r2, r2, #1
    eae4:	eb43 0303 	adc.w	r3, r3, r3
    eae8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    eaec:	bf08      	it	eq
    eaee:	3d01      	subeq	r5, #1
    eaf0:	d0f7      	beq.n	eae2 <__aeabi_dmul+0x1c6>
    eaf2:	ea43 0306 	orr.w	r3, r3, r6
    eaf6:	4770      	bx	lr
    eaf8:	ea94 0f0c 	teq	r4, ip
    eafc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    eb00:	bf18      	it	ne
    eb02:	ea95 0f0c 	teqne	r5, ip
    eb06:	d00c      	beq.n	eb22 <__aeabi_dmul+0x206>
    eb08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    eb0c:	bf18      	it	ne
    eb0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    eb12:	d1d1      	bne.n	eab8 <__aeabi_dmul+0x19c>
    eb14:	ea81 0103 	eor.w	r1, r1, r3
    eb18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    eb1c:	f04f 0000 	mov.w	r0, #0
    eb20:	bd70      	pop	{r4, r5, r6, pc}
    eb22:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    eb26:	bf06      	itte	eq
    eb28:	4610      	moveq	r0, r2
    eb2a:	4619      	moveq	r1, r3
    eb2c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    eb30:	d019      	beq.n	eb66 <__aeabi_dmul+0x24a>
    eb32:	ea94 0f0c 	teq	r4, ip
    eb36:	d102      	bne.n	eb3e <__aeabi_dmul+0x222>
    eb38:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    eb3c:	d113      	bne.n	eb66 <__aeabi_dmul+0x24a>
    eb3e:	ea95 0f0c 	teq	r5, ip
    eb42:	d105      	bne.n	eb50 <__aeabi_dmul+0x234>
    eb44:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    eb48:	bf1c      	itt	ne
    eb4a:	4610      	movne	r0, r2
    eb4c:	4619      	movne	r1, r3
    eb4e:	d10a      	bne.n	eb66 <__aeabi_dmul+0x24a>
    eb50:	ea81 0103 	eor.w	r1, r1, r3
    eb54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    eb58:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    eb5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    eb60:	f04f 0000 	mov.w	r0, #0
    eb64:	bd70      	pop	{r4, r5, r6, pc}
    eb66:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    eb6a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    eb6e:	bd70      	pop	{r4, r5, r6, pc}

0000eb70 <__aeabi_ddiv>:
    eb70:	b570      	push	{r4, r5, r6, lr}
    eb72:	f04f 0cff 	mov.w	ip, #255	; 0xff
    eb76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    eb7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    eb7e:	bf1d      	ittte	ne
    eb80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    eb84:	ea94 0f0c 	teqne	r4, ip
    eb88:	ea95 0f0c 	teqne	r5, ip
    eb8c:	f000 f8a7 	bleq	ecde <__aeabi_ddiv+0x16e>
    eb90:	eba4 0405 	sub.w	r4, r4, r5
    eb94:	ea81 0e03 	eor.w	lr, r1, r3
    eb98:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    eb9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    eba0:	f000 8088 	beq.w	ecb4 <__aeabi_ddiv+0x144>
    eba4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    eba8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ebac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    ebb0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    ebb4:	ea4f 2202 	mov.w	r2, r2, lsl #8
    ebb8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    ebbc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    ebc0:	ea4f 2600 	mov.w	r6, r0, lsl #8
    ebc4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    ebc8:	429d      	cmp	r5, r3
    ebca:	bf08      	it	eq
    ebcc:	4296      	cmpeq	r6, r2
    ebce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    ebd2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    ebd6:	d202      	bcs.n	ebde <__aeabi_ddiv+0x6e>
    ebd8:	085b      	lsrs	r3, r3, #1
    ebda:	ea4f 0232 	mov.w	r2, r2, rrx
    ebde:	1ab6      	subs	r6, r6, r2
    ebe0:	eb65 0503 	sbc.w	r5, r5, r3
    ebe4:	085b      	lsrs	r3, r3, #1
    ebe6:	ea4f 0232 	mov.w	r2, r2, rrx
    ebea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ebee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    ebf2:	ebb6 0e02 	subs.w	lr, r6, r2
    ebf6:	eb75 0e03 	sbcs.w	lr, r5, r3
    ebfa:	bf22      	ittt	cs
    ebfc:	1ab6      	subcs	r6, r6, r2
    ebfe:	4675      	movcs	r5, lr
    ec00:	ea40 000c 	orrcs.w	r0, r0, ip
    ec04:	085b      	lsrs	r3, r3, #1
    ec06:	ea4f 0232 	mov.w	r2, r2, rrx
    ec0a:	ebb6 0e02 	subs.w	lr, r6, r2
    ec0e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ec12:	bf22      	ittt	cs
    ec14:	1ab6      	subcs	r6, r6, r2
    ec16:	4675      	movcs	r5, lr
    ec18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ec1c:	085b      	lsrs	r3, r3, #1
    ec1e:	ea4f 0232 	mov.w	r2, r2, rrx
    ec22:	ebb6 0e02 	subs.w	lr, r6, r2
    ec26:	eb75 0e03 	sbcs.w	lr, r5, r3
    ec2a:	bf22      	ittt	cs
    ec2c:	1ab6      	subcs	r6, r6, r2
    ec2e:	4675      	movcs	r5, lr
    ec30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ec34:	085b      	lsrs	r3, r3, #1
    ec36:	ea4f 0232 	mov.w	r2, r2, rrx
    ec3a:	ebb6 0e02 	subs.w	lr, r6, r2
    ec3e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ec42:	bf22      	ittt	cs
    ec44:	1ab6      	subcs	r6, r6, r2
    ec46:	4675      	movcs	r5, lr
    ec48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ec4c:	ea55 0e06 	orrs.w	lr, r5, r6
    ec50:	d018      	beq.n	ec84 <__aeabi_ddiv+0x114>
    ec52:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ec56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ec5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ec5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ec62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    ec66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    ec6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    ec6e:	d1c0      	bne.n	ebf2 <__aeabi_ddiv+0x82>
    ec70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ec74:	d10b      	bne.n	ec8e <__aeabi_ddiv+0x11e>
    ec76:	ea41 0100 	orr.w	r1, r1, r0
    ec7a:	f04f 0000 	mov.w	r0, #0
    ec7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    ec82:	e7b6      	b.n	ebf2 <__aeabi_ddiv+0x82>
    ec84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ec88:	bf04      	itt	eq
    ec8a:	4301      	orreq	r1, r0
    ec8c:	2000      	moveq	r0, #0
    ec8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ec92:	bf88      	it	hi
    ec94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ec98:	f63f aeaf 	bhi.w	e9fa <__aeabi_dmul+0xde>
    ec9c:	ebb5 0c03 	subs.w	ip, r5, r3
    eca0:	bf04      	itt	eq
    eca2:	ebb6 0c02 	subseq.w	ip, r6, r2
    eca6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ecaa:	f150 0000 	adcs.w	r0, r0, #0
    ecae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ecb2:	bd70      	pop	{r4, r5, r6, pc}
    ecb4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    ecb8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    ecbc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    ecc0:	bfc2      	ittt	gt
    ecc2:	ebd4 050c 	rsbsgt	r5, r4, ip
    ecc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ecca:	bd70      	popgt	{r4, r5, r6, pc}
    eccc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ecd0:	f04f 0e00 	mov.w	lr, #0
    ecd4:	3c01      	subs	r4, #1
    ecd6:	e690      	b.n	e9fa <__aeabi_dmul+0xde>
    ecd8:	ea45 0e06 	orr.w	lr, r5, r6
    ecdc:	e68d      	b.n	e9fa <__aeabi_dmul+0xde>
    ecde:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ece2:	ea94 0f0c 	teq	r4, ip
    ece6:	bf08      	it	eq
    ece8:	ea95 0f0c 	teqeq	r5, ip
    ecec:	f43f af3b 	beq.w	eb66 <__aeabi_dmul+0x24a>
    ecf0:	ea94 0f0c 	teq	r4, ip
    ecf4:	d10a      	bne.n	ed0c <__aeabi_ddiv+0x19c>
    ecf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ecfa:	f47f af34 	bne.w	eb66 <__aeabi_dmul+0x24a>
    ecfe:	ea95 0f0c 	teq	r5, ip
    ed02:	f47f af25 	bne.w	eb50 <__aeabi_dmul+0x234>
    ed06:	4610      	mov	r0, r2
    ed08:	4619      	mov	r1, r3
    ed0a:	e72c      	b.n	eb66 <__aeabi_dmul+0x24a>
    ed0c:	ea95 0f0c 	teq	r5, ip
    ed10:	d106      	bne.n	ed20 <__aeabi_ddiv+0x1b0>
    ed12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ed16:	f43f aefd 	beq.w	eb14 <__aeabi_dmul+0x1f8>
    ed1a:	4610      	mov	r0, r2
    ed1c:	4619      	mov	r1, r3
    ed1e:	e722      	b.n	eb66 <__aeabi_dmul+0x24a>
    ed20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ed24:	bf18      	it	ne
    ed26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ed2a:	f47f aec5 	bne.w	eab8 <__aeabi_dmul+0x19c>
    ed2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ed32:	f47f af0d 	bne.w	eb50 <__aeabi_dmul+0x234>
    ed36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ed3a:	f47f aeeb 	bne.w	eb14 <__aeabi_dmul+0x1f8>
    ed3e:	e712      	b.n	eb66 <__aeabi_dmul+0x24a>

0000ed40 <__aeabi_d2f>:
    ed40:	ea4f 0241 	mov.w	r2, r1, lsl #1
    ed44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    ed48:	bf24      	itt	cs
    ed4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    ed4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    ed52:	d90d      	bls.n	ed70 <__aeabi_d2f+0x30>
    ed54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    ed58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    ed5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    ed60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ed64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    ed68:	bf08      	it	eq
    ed6a:	f020 0001 	biceq.w	r0, r0, #1
    ed6e:	4770      	bx	lr
    ed70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    ed74:	d121      	bne.n	edba <__aeabi_d2f+0x7a>
    ed76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    ed7a:	bfbc      	itt	lt
    ed7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    ed80:	4770      	bxlt	lr
    ed82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ed86:	ea4f 5252 	mov.w	r2, r2, lsr #21
    ed8a:	f1c2 0218 	rsb	r2, r2, #24
    ed8e:	f1c2 0c20 	rsb	ip, r2, #32
    ed92:	fa10 f30c 	lsls.w	r3, r0, ip
    ed96:	fa20 f002 	lsr.w	r0, r0, r2
    ed9a:	bf18      	it	ne
    ed9c:	f040 0001 	orrne.w	r0, r0, #1
    eda0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    eda4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    eda8:	fa03 fc0c 	lsl.w	ip, r3, ip
    edac:	ea40 000c 	orr.w	r0, r0, ip
    edb0:	fa23 f302 	lsr.w	r3, r3, r2
    edb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    edb8:	e7cc      	b.n	ed54 <__aeabi_d2f+0x14>
    edba:	ea7f 5362 	mvns.w	r3, r2, asr #21
    edbe:	d107      	bne.n	edd0 <__aeabi_d2f+0x90>
    edc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    edc4:	bf1e      	ittt	ne
    edc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    edca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    edce:	4770      	bxne	lr
    edd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    edd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    edd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    eddc:	4770      	bx	lr
    edde:	bf00      	nop

0000ede0 <__aeabi_frsub>:
    ede0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    ede4:	e002      	b.n	edec <__addsf3>
    ede6:	bf00      	nop

0000ede8 <__aeabi_fsub>:
    ede8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000edec <__addsf3>:
    edec:	0042      	lsls	r2, r0, #1
    edee:	bf1f      	itttt	ne
    edf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    edf4:	ea92 0f03 	teqne	r2, r3
    edf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    edfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    ee00:	d06a      	beq.n	eed8 <__addsf3+0xec>
    ee02:	ea4f 6212 	mov.w	r2, r2, lsr #24
    ee06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    ee0a:	bfc1      	itttt	gt
    ee0c:	18d2      	addgt	r2, r2, r3
    ee0e:	4041      	eorgt	r1, r0
    ee10:	4048      	eorgt	r0, r1
    ee12:	4041      	eorgt	r1, r0
    ee14:	bfb8      	it	lt
    ee16:	425b      	neglt	r3, r3
    ee18:	2b19      	cmp	r3, #25
    ee1a:	bf88      	it	hi
    ee1c:	4770      	bxhi	lr
    ee1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    ee22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ee26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ee2a:	bf18      	it	ne
    ee2c:	4240      	negne	r0, r0
    ee2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ee32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    ee36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ee3a:	bf18      	it	ne
    ee3c:	4249      	negne	r1, r1
    ee3e:	ea92 0f03 	teq	r2, r3
    ee42:	d03f      	beq.n	eec4 <__addsf3+0xd8>
    ee44:	f1a2 0201 	sub.w	r2, r2, #1
    ee48:	fa41 fc03 	asr.w	ip, r1, r3
    ee4c:	eb10 000c 	adds.w	r0, r0, ip
    ee50:	f1c3 0320 	rsb	r3, r3, #32
    ee54:	fa01 f103 	lsl.w	r1, r1, r3
    ee58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    ee5c:	d502      	bpl.n	ee64 <__addsf3+0x78>
    ee5e:	4249      	negs	r1, r1
    ee60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    ee64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ee68:	d313      	bcc.n	ee92 <__addsf3+0xa6>
    ee6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    ee6e:	d306      	bcc.n	ee7e <__addsf3+0x92>
    ee70:	0840      	lsrs	r0, r0, #1
    ee72:	ea4f 0131 	mov.w	r1, r1, rrx
    ee76:	f102 0201 	add.w	r2, r2, #1
    ee7a:	2afe      	cmp	r2, #254	; 0xfe
    ee7c:	d251      	bcs.n	ef22 <__addsf3+0x136>
    ee7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    ee82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ee86:	bf08      	it	eq
    ee88:	f020 0001 	biceq.w	r0, r0, #1
    ee8c:	ea40 0003 	orr.w	r0, r0, r3
    ee90:	4770      	bx	lr
    ee92:	0049      	lsls	r1, r1, #1
    ee94:	eb40 0000 	adc.w	r0, r0, r0
    ee98:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    ee9c:	f1a2 0201 	sub.w	r2, r2, #1
    eea0:	d1ed      	bne.n	ee7e <__addsf3+0x92>
    eea2:	fab0 fc80 	clz	ip, r0
    eea6:	f1ac 0c08 	sub.w	ip, ip, #8
    eeaa:	ebb2 020c 	subs.w	r2, r2, ip
    eeae:	fa00 f00c 	lsl.w	r0, r0, ip
    eeb2:	bfaa      	itet	ge
    eeb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    eeb8:	4252      	neglt	r2, r2
    eeba:	4318      	orrge	r0, r3
    eebc:	bfbc      	itt	lt
    eebe:	40d0      	lsrlt	r0, r2
    eec0:	4318      	orrlt	r0, r3
    eec2:	4770      	bx	lr
    eec4:	f092 0f00 	teq	r2, #0
    eec8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    eecc:	bf06      	itte	eq
    eece:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    eed2:	3201      	addeq	r2, #1
    eed4:	3b01      	subne	r3, #1
    eed6:	e7b5      	b.n	ee44 <__addsf3+0x58>
    eed8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    eedc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    eee0:	bf18      	it	ne
    eee2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    eee6:	d021      	beq.n	ef2c <__addsf3+0x140>
    eee8:	ea92 0f03 	teq	r2, r3
    eeec:	d004      	beq.n	eef8 <__addsf3+0x10c>
    eeee:	f092 0f00 	teq	r2, #0
    eef2:	bf08      	it	eq
    eef4:	4608      	moveq	r0, r1
    eef6:	4770      	bx	lr
    eef8:	ea90 0f01 	teq	r0, r1
    eefc:	bf1c      	itt	ne
    eefe:	2000      	movne	r0, #0
    ef00:	4770      	bxne	lr
    ef02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    ef06:	d104      	bne.n	ef12 <__addsf3+0x126>
    ef08:	0040      	lsls	r0, r0, #1
    ef0a:	bf28      	it	cs
    ef0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    ef10:	4770      	bx	lr
    ef12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    ef16:	bf3c      	itt	cc
    ef18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    ef1c:	4770      	bxcc	lr
    ef1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    ef22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    ef26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ef2a:	4770      	bx	lr
    ef2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    ef30:	bf16      	itet	ne
    ef32:	4608      	movne	r0, r1
    ef34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    ef38:	4601      	movne	r1, r0
    ef3a:	0242      	lsls	r2, r0, #9
    ef3c:	bf06      	itte	eq
    ef3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    ef42:	ea90 0f01 	teqeq	r0, r1
    ef46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    ef4a:	4770      	bx	lr

0000ef4c <__aeabi_ui2f>:
    ef4c:	f04f 0300 	mov.w	r3, #0
    ef50:	e004      	b.n	ef5c <__aeabi_i2f+0x8>
    ef52:	bf00      	nop

0000ef54 <__aeabi_i2f>:
    ef54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    ef58:	bf48      	it	mi
    ef5a:	4240      	negmi	r0, r0
    ef5c:	ea5f 0c00 	movs.w	ip, r0
    ef60:	bf08      	it	eq
    ef62:	4770      	bxeq	lr
    ef64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    ef68:	4601      	mov	r1, r0
    ef6a:	f04f 0000 	mov.w	r0, #0
    ef6e:	e01c      	b.n	efaa <__aeabi_l2f+0x2a>

0000ef70 <__aeabi_ul2f>:
    ef70:	ea50 0201 	orrs.w	r2, r0, r1
    ef74:	bf08      	it	eq
    ef76:	4770      	bxeq	lr
    ef78:	f04f 0300 	mov.w	r3, #0
    ef7c:	e00a      	b.n	ef94 <__aeabi_l2f+0x14>
    ef7e:	bf00      	nop

0000ef80 <__aeabi_l2f>:
    ef80:	ea50 0201 	orrs.w	r2, r0, r1
    ef84:	bf08      	it	eq
    ef86:	4770      	bxeq	lr
    ef88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    ef8c:	d502      	bpl.n	ef94 <__aeabi_l2f+0x14>
    ef8e:	4240      	negs	r0, r0
    ef90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ef94:	ea5f 0c01 	movs.w	ip, r1
    ef98:	bf02      	ittt	eq
    ef9a:	4684      	moveq	ip, r0
    ef9c:	4601      	moveq	r1, r0
    ef9e:	2000      	moveq	r0, #0
    efa0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    efa4:	bf08      	it	eq
    efa6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    efaa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    efae:	fabc f28c 	clz	r2, ip
    efb2:	3a08      	subs	r2, #8
    efb4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    efb8:	db10      	blt.n	efdc <__aeabi_l2f+0x5c>
    efba:	fa01 fc02 	lsl.w	ip, r1, r2
    efbe:	4463      	add	r3, ip
    efc0:	fa00 fc02 	lsl.w	ip, r0, r2
    efc4:	f1c2 0220 	rsb	r2, r2, #32
    efc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    efcc:	fa20 f202 	lsr.w	r2, r0, r2
    efd0:	eb43 0002 	adc.w	r0, r3, r2
    efd4:	bf08      	it	eq
    efd6:	f020 0001 	biceq.w	r0, r0, #1
    efda:	4770      	bx	lr
    efdc:	f102 0220 	add.w	r2, r2, #32
    efe0:	fa01 fc02 	lsl.w	ip, r1, r2
    efe4:	f1c2 0220 	rsb	r2, r2, #32
    efe8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    efec:	fa21 f202 	lsr.w	r2, r1, r2
    eff0:	eb43 0002 	adc.w	r0, r3, r2
    eff4:	bf08      	it	eq
    eff6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    effa:	4770      	bx	lr

0000effc <__aeabi_fmul>:
    effc:	f04f 0cff 	mov.w	ip, #255	; 0xff
    f000:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    f004:	bf1e      	ittt	ne
    f006:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    f00a:	ea92 0f0c 	teqne	r2, ip
    f00e:	ea93 0f0c 	teqne	r3, ip
    f012:	d06f      	beq.n	f0f4 <__aeabi_fmul+0xf8>
    f014:	441a      	add	r2, r3
    f016:	ea80 0c01 	eor.w	ip, r0, r1
    f01a:	0240      	lsls	r0, r0, #9
    f01c:	bf18      	it	ne
    f01e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    f022:	d01e      	beq.n	f062 <__aeabi_fmul+0x66>
    f024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    f028:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    f02c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    f030:	fba0 3101 	umull	r3, r1, r0, r1
    f034:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    f038:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    f03c:	bf3e      	ittt	cc
    f03e:	0049      	lslcc	r1, r1, #1
    f040:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    f044:	005b      	lslcc	r3, r3, #1
    f046:	ea40 0001 	orr.w	r0, r0, r1
    f04a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    f04e:	2afd      	cmp	r2, #253	; 0xfd
    f050:	d81d      	bhi.n	f08e <__aeabi_fmul+0x92>
    f052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    f056:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    f05a:	bf08      	it	eq
    f05c:	f020 0001 	biceq.w	r0, r0, #1
    f060:	4770      	bx	lr
    f062:	f090 0f00 	teq	r0, #0
    f066:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    f06a:	bf08      	it	eq
    f06c:	0249      	lsleq	r1, r1, #9
    f06e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    f072:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    f076:	3a7f      	subs	r2, #127	; 0x7f
    f078:	bfc2      	ittt	gt
    f07a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    f07e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    f082:	4770      	bxgt	lr
    f084:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    f088:	f04f 0300 	mov.w	r3, #0
    f08c:	3a01      	subs	r2, #1
    f08e:	dc5d      	bgt.n	f14c <__aeabi_fmul+0x150>
    f090:	f112 0f19 	cmn.w	r2, #25
    f094:	bfdc      	itt	le
    f096:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    f09a:	4770      	bxle	lr
    f09c:	f1c2 0200 	rsb	r2, r2, #0
    f0a0:	0041      	lsls	r1, r0, #1
    f0a2:	fa21 f102 	lsr.w	r1, r1, r2
    f0a6:	f1c2 0220 	rsb	r2, r2, #32
    f0aa:	fa00 fc02 	lsl.w	ip, r0, r2
    f0ae:	ea5f 0031 	movs.w	r0, r1, rrx
    f0b2:	f140 0000 	adc.w	r0, r0, #0
    f0b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    f0ba:	bf08      	it	eq
    f0bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    f0c0:	4770      	bx	lr
    f0c2:	f092 0f00 	teq	r2, #0
    f0c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    f0ca:	bf02      	ittt	eq
    f0cc:	0040      	lsleq	r0, r0, #1
    f0ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    f0d2:	3a01      	subeq	r2, #1
    f0d4:	d0f9      	beq.n	f0ca <__aeabi_fmul+0xce>
    f0d6:	ea40 000c 	orr.w	r0, r0, ip
    f0da:	f093 0f00 	teq	r3, #0
    f0de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    f0e2:	bf02      	ittt	eq
    f0e4:	0049      	lsleq	r1, r1, #1
    f0e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    f0ea:	3b01      	subeq	r3, #1
    f0ec:	d0f9      	beq.n	f0e2 <__aeabi_fmul+0xe6>
    f0ee:	ea41 010c 	orr.w	r1, r1, ip
    f0f2:	e78f      	b.n	f014 <__aeabi_fmul+0x18>
    f0f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    f0f8:	ea92 0f0c 	teq	r2, ip
    f0fc:	bf18      	it	ne
    f0fe:	ea93 0f0c 	teqne	r3, ip
    f102:	d00a      	beq.n	f11a <__aeabi_fmul+0x11e>
    f104:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    f108:	bf18      	it	ne
    f10a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    f10e:	d1d8      	bne.n	f0c2 <__aeabi_fmul+0xc6>
    f110:	ea80 0001 	eor.w	r0, r0, r1
    f114:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    f118:	4770      	bx	lr
    f11a:	f090 0f00 	teq	r0, #0
    f11e:	bf17      	itett	ne
    f120:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    f124:	4608      	moveq	r0, r1
    f126:	f091 0f00 	teqne	r1, #0
    f12a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    f12e:	d014      	beq.n	f15a <__aeabi_fmul+0x15e>
    f130:	ea92 0f0c 	teq	r2, ip
    f134:	d101      	bne.n	f13a <__aeabi_fmul+0x13e>
    f136:	0242      	lsls	r2, r0, #9
    f138:	d10f      	bne.n	f15a <__aeabi_fmul+0x15e>
    f13a:	ea93 0f0c 	teq	r3, ip
    f13e:	d103      	bne.n	f148 <__aeabi_fmul+0x14c>
    f140:	024b      	lsls	r3, r1, #9
    f142:	bf18      	it	ne
    f144:	4608      	movne	r0, r1
    f146:	d108      	bne.n	f15a <__aeabi_fmul+0x15e>
    f148:	ea80 0001 	eor.w	r0, r0, r1
    f14c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    f150:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    f154:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    f158:	4770      	bx	lr
    f15a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    f15e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    f162:	4770      	bx	lr

0000f164 <__aeabi_fdiv>:
    f164:	f04f 0cff 	mov.w	ip, #255	; 0xff
    f168:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    f16c:	bf1e      	ittt	ne
    f16e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    f172:	ea92 0f0c 	teqne	r2, ip
    f176:	ea93 0f0c 	teqne	r3, ip
    f17a:	d069      	beq.n	f250 <__aeabi_fdiv+0xec>
    f17c:	eba2 0203 	sub.w	r2, r2, r3
    f180:	ea80 0c01 	eor.w	ip, r0, r1
    f184:	0249      	lsls	r1, r1, #9
    f186:	ea4f 2040 	mov.w	r0, r0, lsl #9
    f18a:	d037      	beq.n	f1fc <__aeabi_fdiv+0x98>
    f18c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f190:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    f194:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    f198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    f19c:	428b      	cmp	r3, r1
    f19e:	bf38      	it	cc
    f1a0:	005b      	lslcc	r3, r3, #1
    f1a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    f1a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    f1aa:	428b      	cmp	r3, r1
    f1ac:	bf24      	itt	cs
    f1ae:	1a5b      	subcs	r3, r3, r1
    f1b0:	ea40 000c 	orrcs.w	r0, r0, ip
    f1b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    f1b8:	bf24      	itt	cs
    f1ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    f1be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    f1c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    f1c6:	bf24      	itt	cs
    f1c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    f1cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    f1d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    f1d4:	bf24      	itt	cs
    f1d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    f1da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    f1de:	011b      	lsls	r3, r3, #4
    f1e0:	bf18      	it	ne
    f1e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    f1e6:	d1e0      	bne.n	f1aa <__aeabi_fdiv+0x46>
    f1e8:	2afd      	cmp	r2, #253	; 0xfd
    f1ea:	f63f af50 	bhi.w	f08e <__aeabi_fmul+0x92>
    f1ee:	428b      	cmp	r3, r1
    f1f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    f1f4:	bf08      	it	eq
    f1f6:	f020 0001 	biceq.w	r0, r0, #1
    f1fa:	4770      	bx	lr
    f1fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    f200:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    f204:	327f      	adds	r2, #127	; 0x7f
    f206:	bfc2      	ittt	gt
    f208:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    f20c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    f210:	4770      	bxgt	lr
    f212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    f216:	f04f 0300 	mov.w	r3, #0
    f21a:	3a01      	subs	r2, #1
    f21c:	e737      	b.n	f08e <__aeabi_fmul+0x92>
    f21e:	f092 0f00 	teq	r2, #0
    f222:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    f226:	bf02      	ittt	eq
    f228:	0040      	lsleq	r0, r0, #1
    f22a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    f22e:	3a01      	subeq	r2, #1
    f230:	d0f9      	beq.n	f226 <__aeabi_fdiv+0xc2>
    f232:	ea40 000c 	orr.w	r0, r0, ip
    f236:	f093 0f00 	teq	r3, #0
    f23a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    f23e:	bf02      	ittt	eq
    f240:	0049      	lsleq	r1, r1, #1
    f242:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    f246:	3b01      	subeq	r3, #1
    f248:	d0f9      	beq.n	f23e <__aeabi_fdiv+0xda>
    f24a:	ea41 010c 	orr.w	r1, r1, ip
    f24e:	e795      	b.n	f17c <__aeabi_fdiv+0x18>
    f250:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    f254:	ea92 0f0c 	teq	r2, ip
    f258:	d108      	bne.n	f26c <__aeabi_fdiv+0x108>
    f25a:	0242      	lsls	r2, r0, #9
    f25c:	f47f af7d 	bne.w	f15a <__aeabi_fmul+0x15e>
    f260:	ea93 0f0c 	teq	r3, ip
    f264:	f47f af70 	bne.w	f148 <__aeabi_fmul+0x14c>
    f268:	4608      	mov	r0, r1
    f26a:	e776      	b.n	f15a <__aeabi_fmul+0x15e>
    f26c:	ea93 0f0c 	teq	r3, ip
    f270:	d104      	bne.n	f27c <__aeabi_fdiv+0x118>
    f272:	024b      	lsls	r3, r1, #9
    f274:	f43f af4c 	beq.w	f110 <__aeabi_fmul+0x114>
    f278:	4608      	mov	r0, r1
    f27a:	e76e      	b.n	f15a <__aeabi_fmul+0x15e>
    f27c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    f280:	bf18      	it	ne
    f282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    f286:	d1ca      	bne.n	f21e <__aeabi_fdiv+0xba>
    f288:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    f28c:	f47f af5c 	bne.w	f148 <__aeabi_fmul+0x14c>
    f290:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    f294:	f47f af3c 	bne.w	f110 <__aeabi_fmul+0x114>
    f298:	e75f      	b.n	f15a <__aeabi_fmul+0x15e>
    f29a:	bf00      	nop

0000f29c <__gesf2>:
    f29c:	f04f 3cff 	mov.w	ip, #4294967295
    f2a0:	e006      	b.n	f2b0 <__cmpsf2+0x4>
    f2a2:	bf00      	nop

0000f2a4 <__lesf2>:
    f2a4:	f04f 0c01 	mov.w	ip, #1
    f2a8:	e002      	b.n	f2b0 <__cmpsf2+0x4>
    f2aa:	bf00      	nop

0000f2ac <__cmpsf2>:
    f2ac:	f04f 0c01 	mov.w	ip, #1
    f2b0:	f84d cd04 	str.w	ip, [sp, #-4]!
    f2b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    f2b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    f2bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    f2c0:	bf18      	it	ne
    f2c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    f2c6:	d011      	beq.n	f2ec <__cmpsf2+0x40>
    f2c8:	b001      	add	sp, #4
    f2ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    f2ce:	bf18      	it	ne
    f2d0:	ea90 0f01 	teqne	r0, r1
    f2d4:	bf58      	it	pl
    f2d6:	ebb2 0003 	subspl.w	r0, r2, r3
    f2da:	bf88      	it	hi
    f2dc:	17c8      	asrhi	r0, r1, #31
    f2de:	bf38      	it	cc
    f2e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    f2e4:	bf18      	it	ne
    f2e6:	f040 0001 	orrne.w	r0, r0, #1
    f2ea:	4770      	bx	lr
    f2ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    f2f0:	d102      	bne.n	f2f8 <__cmpsf2+0x4c>
    f2f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    f2f6:	d105      	bne.n	f304 <__cmpsf2+0x58>
    f2f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    f2fc:	d1e4      	bne.n	f2c8 <__cmpsf2+0x1c>
    f2fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    f302:	d0e1      	beq.n	f2c8 <__cmpsf2+0x1c>
    f304:	f85d 0b04 	ldr.w	r0, [sp], #4
    f308:	4770      	bx	lr
    f30a:	bf00      	nop

0000f30c <__aeabi_cfrcmple>:
    f30c:	4684      	mov	ip, r0
    f30e:	4608      	mov	r0, r1
    f310:	4661      	mov	r1, ip
    f312:	e7ff      	b.n	f314 <__aeabi_cfcmpeq>

0000f314 <__aeabi_cfcmpeq>:
    f314:	b50f      	push	{r0, r1, r2, r3, lr}
    f316:	f7ff ffc9 	bl	f2ac <__cmpsf2>
    f31a:	2800      	cmp	r0, #0
    f31c:	bf48      	it	mi
    f31e:	f110 0f00 	cmnmi.w	r0, #0
    f322:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000f324 <__aeabi_fcmpeq>:
    f324:	f84d ed08 	str.w	lr, [sp, #-8]!
    f328:	f7ff fff4 	bl	f314 <__aeabi_cfcmpeq>
    f32c:	bf0c      	ite	eq
    f32e:	2001      	moveq	r0, #1
    f330:	2000      	movne	r0, #0
    f332:	f85d fb08 	ldr.w	pc, [sp], #8
    f336:	bf00      	nop

0000f338 <__aeabi_fcmplt>:
    f338:	f84d ed08 	str.w	lr, [sp, #-8]!
    f33c:	f7ff ffea 	bl	f314 <__aeabi_cfcmpeq>
    f340:	bf34      	ite	cc
    f342:	2001      	movcc	r0, #1
    f344:	2000      	movcs	r0, #0
    f346:	f85d fb08 	ldr.w	pc, [sp], #8
    f34a:	bf00      	nop

0000f34c <__aeabi_fcmple>:
    f34c:	f84d ed08 	str.w	lr, [sp, #-8]!
    f350:	f7ff ffe0 	bl	f314 <__aeabi_cfcmpeq>
    f354:	bf94      	ite	ls
    f356:	2001      	movls	r0, #1
    f358:	2000      	movhi	r0, #0
    f35a:	f85d fb08 	ldr.w	pc, [sp], #8
    f35e:	bf00      	nop

0000f360 <__aeabi_fcmpge>:
    f360:	f84d ed08 	str.w	lr, [sp, #-8]!
    f364:	f7ff ffd2 	bl	f30c <__aeabi_cfrcmple>
    f368:	bf94      	ite	ls
    f36a:	2001      	movls	r0, #1
    f36c:	2000      	movhi	r0, #0
    f36e:	f85d fb08 	ldr.w	pc, [sp], #8
    f372:	bf00      	nop

0000f374 <__aeabi_fcmpgt>:
    f374:	f84d ed08 	str.w	lr, [sp, #-8]!
    f378:	f7ff ffc8 	bl	f30c <__aeabi_cfrcmple>
    f37c:	bf34      	ite	cc
    f37e:	2001      	movcc	r0, #1
    f380:	2000      	movcs	r0, #0
    f382:	f85d fb08 	ldr.w	pc, [sp], #8
    f386:	bf00      	nop

0000f388 <__aeabi_f2iz>:
    f388:	ea4f 0240 	mov.w	r2, r0, lsl #1
    f38c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    f390:	d30f      	bcc.n	f3b2 <__aeabi_f2iz+0x2a>
    f392:	f04f 039e 	mov.w	r3, #158	; 0x9e
    f396:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    f39a:	d90d      	bls.n	f3b8 <__aeabi_f2iz+0x30>
    f39c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    f3a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f3a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    f3a8:	fa23 f002 	lsr.w	r0, r3, r2
    f3ac:	bf18      	it	ne
    f3ae:	4240      	negne	r0, r0
    f3b0:	4770      	bx	lr
    f3b2:	f04f 0000 	mov.w	r0, #0
    f3b6:	4770      	bx	lr
    f3b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
    f3bc:	d101      	bne.n	f3c2 <__aeabi_f2iz+0x3a>
    f3be:	0242      	lsls	r2, r0, #9
    f3c0:	d105      	bne.n	f3ce <__aeabi_f2iz+0x46>
    f3c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    f3c6:	bf08      	it	eq
    f3c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    f3cc:	4770      	bx	lr
    f3ce:	f04f 0000 	mov.w	r0, #0
    f3d2:	4770      	bx	lr

0000f3d4 <__aeabi_f2uiz>:
    f3d4:	0042      	lsls	r2, r0, #1
    f3d6:	d20e      	bcs.n	f3f6 <__aeabi_f2uiz+0x22>
    f3d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    f3dc:	d30b      	bcc.n	f3f6 <__aeabi_f2uiz+0x22>
    f3de:	f04f 039e 	mov.w	r3, #158	; 0x9e
    f3e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    f3e6:	d409      	bmi.n	f3fc <__aeabi_f2uiz+0x28>
    f3e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    f3ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f3f0:	fa23 f002 	lsr.w	r0, r3, r2
    f3f4:	4770      	bx	lr
    f3f6:	f04f 0000 	mov.w	r0, #0
    f3fa:	4770      	bx	lr
    f3fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    f400:	d101      	bne.n	f406 <__aeabi_f2uiz+0x32>
    f402:	0242      	lsls	r2, r0, #9
    f404:	d102      	bne.n	f40c <__aeabi_f2uiz+0x38>
    f406:	f04f 30ff 	mov.w	r0, #4294967295
    f40a:	4770      	bx	lr
    f40c:	f04f 0000 	mov.w	r0, #0
    f410:	4770      	bx	lr
    f412:	bf00      	nop

0000f414 <__libc_init_array>:
    f414:	b570      	push	{r4, r5, r6, lr}
    f416:	4e0f      	ldr	r6, [pc, #60]	; (f454 <__libc_init_array+0x40>)
    f418:	4d0f      	ldr	r5, [pc, #60]	; (f458 <__libc_init_array+0x44>)
    f41a:	1b76      	subs	r6, r6, r5
    f41c:	10b6      	asrs	r6, r6, #2
    f41e:	bf18      	it	ne
    f420:	2400      	movne	r4, #0
    f422:	d005      	beq.n	f430 <__libc_init_array+0x1c>
    f424:	3401      	adds	r4, #1
    f426:	f855 3b04 	ldr.w	r3, [r5], #4
    f42a:	4798      	blx	r3
    f42c:	42a6      	cmp	r6, r4
    f42e:	d1f9      	bne.n	f424 <__libc_init_array+0x10>
    f430:	4e0a      	ldr	r6, [pc, #40]	; (f45c <__libc_init_array+0x48>)
    f432:	4d0b      	ldr	r5, [pc, #44]	; (f460 <__libc_init_array+0x4c>)
    f434:	1b76      	subs	r6, r6, r5
    f436:	f003 fb1f 	bl	12a78 <_init>
    f43a:	10b6      	asrs	r6, r6, #2
    f43c:	bf18      	it	ne
    f43e:	2400      	movne	r4, #0
    f440:	d006      	beq.n	f450 <__libc_init_array+0x3c>
    f442:	3401      	adds	r4, #1
    f444:	f855 3b04 	ldr.w	r3, [r5], #4
    f448:	4798      	blx	r3
    f44a:	42a6      	cmp	r6, r4
    f44c:	d1f9      	bne.n	f442 <__libc_init_array+0x2e>
    f44e:	bd70      	pop	{r4, r5, r6, pc}
    f450:	bd70      	pop	{r4, r5, r6, pc}
    f452:	bf00      	nop
    f454:	00012a84 	.word	0x00012a84
    f458:	00012a84 	.word	0x00012a84
    f45c:	00012a98 	.word	0x00012a98
    f460:	00012a84 	.word	0x00012a84

0000f464 <memmove>:
    f464:	4288      	cmp	r0, r1
    f466:	b5f0      	push	{r4, r5, r6, r7, lr}
    f468:	d90d      	bls.n	f486 <memmove+0x22>
    f46a:	188b      	adds	r3, r1, r2
    f46c:	4298      	cmp	r0, r3
    f46e:	d20a      	bcs.n	f486 <memmove+0x22>
    f470:	1881      	adds	r1, r0, r2
    f472:	2a00      	cmp	r2, #0
    f474:	d051      	beq.n	f51a <memmove+0xb6>
    f476:	1a9a      	subs	r2, r3, r2
    f478:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    f47c:	f801 4d01 	strb.w	r4, [r1, #-1]!
    f480:	4293      	cmp	r3, r2
    f482:	d1f9      	bne.n	f478 <memmove+0x14>
    f484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f486:	2a0f      	cmp	r2, #15
    f488:	d948      	bls.n	f51c <memmove+0xb8>
    f48a:	ea41 0300 	orr.w	r3, r1, r0
    f48e:	079b      	lsls	r3, r3, #30
    f490:	d146      	bne.n	f520 <memmove+0xbc>
    f492:	f100 0410 	add.w	r4, r0, #16
    f496:	f101 0310 	add.w	r3, r1, #16
    f49a:	4615      	mov	r5, r2
    f49c:	f853 6c10 	ldr.w	r6, [r3, #-16]
    f4a0:	f844 6c10 	str.w	r6, [r4, #-16]
    f4a4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    f4a8:	f844 6c0c 	str.w	r6, [r4, #-12]
    f4ac:	f853 6c08 	ldr.w	r6, [r3, #-8]
    f4b0:	f844 6c08 	str.w	r6, [r4, #-8]
    f4b4:	3d10      	subs	r5, #16
    f4b6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    f4ba:	f844 6c04 	str.w	r6, [r4, #-4]
    f4be:	2d0f      	cmp	r5, #15
    f4c0:	f103 0310 	add.w	r3, r3, #16
    f4c4:	f104 0410 	add.w	r4, r4, #16
    f4c8:	d8e8      	bhi.n	f49c <memmove+0x38>
    f4ca:	f1a2 0310 	sub.w	r3, r2, #16
    f4ce:	f023 030f 	bic.w	r3, r3, #15
    f4d2:	f002 0e0f 	and.w	lr, r2, #15
    f4d6:	3310      	adds	r3, #16
    f4d8:	f1be 0f03 	cmp.w	lr, #3
    f4dc:	4419      	add	r1, r3
    f4de:	4403      	add	r3, r0
    f4e0:	d921      	bls.n	f526 <memmove+0xc2>
    f4e2:	1f1e      	subs	r6, r3, #4
    f4e4:	460d      	mov	r5, r1
    f4e6:	4674      	mov	r4, lr
    f4e8:	3c04      	subs	r4, #4
    f4ea:	f855 7b04 	ldr.w	r7, [r5], #4
    f4ee:	f846 7f04 	str.w	r7, [r6, #4]!
    f4f2:	2c03      	cmp	r4, #3
    f4f4:	d8f8      	bhi.n	f4e8 <memmove+0x84>
    f4f6:	f1ae 0404 	sub.w	r4, lr, #4
    f4fa:	f024 0403 	bic.w	r4, r4, #3
    f4fe:	3404      	adds	r4, #4
    f500:	4423      	add	r3, r4
    f502:	4421      	add	r1, r4
    f504:	f002 0203 	and.w	r2, r2, #3
    f508:	b162      	cbz	r2, f524 <memmove+0xc0>
    f50a:	3b01      	subs	r3, #1
    f50c:	440a      	add	r2, r1
    f50e:	f811 4b01 	ldrb.w	r4, [r1], #1
    f512:	f803 4f01 	strb.w	r4, [r3, #1]!
    f516:	428a      	cmp	r2, r1
    f518:	d1f9      	bne.n	f50e <memmove+0xaa>
    f51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f51c:	4603      	mov	r3, r0
    f51e:	e7f3      	b.n	f508 <memmove+0xa4>
    f520:	4603      	mov	r3, r0
    f522:	e7f2      	b.n	f50a <memmove+0xa6>
    f524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f526:	4672      	mov	r2, lr
    f528:	e7ee      	b.n	f508 <memmove+0xa4>
    f52a:	bf00      	nop

0000f52c <memset>:
    f52c:	b470      	push	{r4, r5, r6}
    f52e:	0784      	lsls	r4, r0, #30
    f530:	d046      	beq.n	f5c0 <memset+0x94>
    f532:	1e54      	subs	r4, r2, #1
    f534:	2a00      	cmp	r2, #0
    f536:	d041      	beq.n	f5bc <memset+0x90>
    f538:	b2cd      	uxtb	r5, r1
    f53a:	4603      	mov	r3, r0
    f53c:	e002      	b.n	f544 <memset+0x18>
    f53e:	1e62      	subs	r2, r4, #1
    f540:	b3e4      	cbz	r4, f5bc <memset+0x90>
    f542:	4614      	mov	r4, r2
    f544:	f803 5b01 	strb.w	r5, [r3], #1
    f548:	079a      	lsls	r2, r3, #30
    f54a:	d1f8      	bne.n	f53e <memset+0x12>
    f54c:	2c03      	cmp	r4, #3
    f54e:	d92e      	bls.n	f5ae <memset+0x82>
    f550:	b2cd      	uxtb	r5, r1
    f552:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    f556:	2c0f      	cmp	r4, #15
    f558:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    f55c:	d919      	bls.n	f592 <memset+0x66>
    f55e:	f103 0210 	add.w	r2, r3, #16
    f562:	4626      	mov	r6, r4
    f564:	3e10      	subs	r6, #16
    f566:	2e0f      	cmp	r6, #15
    f568:	f842 5c10 	str.w	r5, [r2, #-16]
    f56c:	f842 5c0c 	str.w	r5, [r2, #-12]
    f570:	f842 5c08 	str.w	r5, [r2, #-8]
    f574:	f842 5c04 	str.w	r5, [r2, #-4]
    f578:	f102 0210 	add.w	r2, r2, #16
    f57c:	d8f2      	bhi.n	f564 <memset+0x38>
    f57e:	f1a4 0210 	sub.w	r2, r4, #16
    f582:	f022 020f 	bic.w	r2, r2, #15
    f586:	f004 040f 	and.w	r4, r4, #15
    f58a:	3210      	adds	r2, #16
    f58c:	2c03      	cmp	r4, #3
    f58e:	4413      	add	r3, r2
    f590:	d90d      	bls.n	f5ae <memset+0x82>
    f592:	461e      	mov	r6, r3
    f594:	4622      	mov	r2, r4
    f596:	3a04      	subs	r2, #4
    f598:	2a03      	cmp	r2, #3
    f59a:	f846 5b04 	str.w	r5, [r6], #4
    f59e:	d8fa      	bhi.n	f596 <memset+0x6a>
    f5a0:	1f22      	subs	r2, r4, #4
    f5a2:	f022 0203 	bic.w	r2, r2, #3
    f5a6:	3204      	adds	r2, #4
    f5a8:	4413      	add	r3, r2
    f5aa:	f004 0403 	and.w	r4, r4, #3
    f5ae:	b12c      	cbz	r4, f5bc <memset+0x90>
    f5b0:	b2c9      	uxtb	r1, r1
    f5b2:	441c      	add	r4, r3
    f5b4:	f803 1b01 	strb.w	r1, [r3], #1
    f5b8:	42a3      	cmp	r3, r4
    f5ba:	d1fb      	bne.n	f5b4 <memset+0x88>
    f5bc:	bc70      	pop	{r4, r5, r6}
    f5be:	4770      	bx	lr
    f5c0:	4614      	mov	r4, r2
    f5c2:	4603      	mov	r3, r0
    f5c4:	e7c2      	b.n	f54c <memset+0x20>
    f5c6:	bf00      	nop

0000f5c8 <random>:
    f5c8:	b410      	push	{r4}
    f5ca:	4b0c      	ldr	r3, [pc, #48]	; (f5fc <random+0x34>)
    f5cc:	4c0c      	ldr	r4, [pc, #48]	; (f600 <random+0x38>)
    f5ce:	6819      	ldr	r1, [r3, #0]
    f5d0:	4a0c      	ldr	r2, [pc, #48]	; (f604 <random+0x3c>)
    f5d2:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    f5d6:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
    f5da:	fb04 f403 	mul.w	r4, r4, r3
    f5de:	fb02 4000 	mla	r0, r2, r0, r4
    f5e2:	fba3 2302 	umull	r2, r3, r3, r2
    f5e6:	4403      	add	r3, r0
    f5e8:	3201      	adds	r2, #1
    f5ea:	f143 0300 	adc.w	r3, r3, #0
    f5ee:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    f5f2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    f5f6:	bc10      	pop	{r4}
    f5f8:	4770      	bx	lr
    f5fa:	bf00      	nop
    f5fc:	1fff8c70 	.word	0x1fff8c70
    f600:	5851f42d 	.word	0x5851f42d
    f604:	4c957f2d 	.word	0x4c957f2d
    f608:	ffffffff 	.word	0xffffffff
    f60c:	ffffffff 	.word	0xffffffff
    f610:	ffffffff 	.word	0xffffffff
    f614:	ffffffff 	.word	0xffffffff
    f618:	ffffffff 	.word	0xffffffff
    f61c:	ffffffff 	.word	0xffffffff
    f620:	ffffffff 	.word	0xffffffff
    f624:	ffffffff 	.word	0xffffffff
    f628:	ffffffff 	.word	0xffffffff
    f62c:	ffffffff 	.word	0xffffffff
    f630:	ffffffff 	.word	0xffffffff
    f634:	ffffffff 	.word	0xffffffff
    f638:	ffffffff 	.word	0xffffffff
    f63c:	ffffffff 	.word	0xffffffff

0000f640 <strlen>:
    f640:	f890 f000 	pld	[r0]
    f644:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    f648:	f020 0107 	bic.w	r1, r0, #7
    f64c:	f06f 0c00 	mvn.w	ip, #0
    f650:	f010 0407 	ands.w	r4, r0, #7
    f654:	f891 f020 	pld	[r1, #32]
    f658:	f040 8049 	bne.w	f6ee <strlen+0xae>
    f65c:	f04f 0400 	mov.w	r4, #0
    f660:	f06f 0007 	mvn.w	r0, #7
    f664:	e9d1 2300 	ldrd	r2, r3, [r1]
    f668:	f891 f040 	pld	[r1, #64]	; 0x40
    f66c:	f100 0008 	add.w	r0, r0, #8
    f670:	fa82 f24c 	uadd8	r2, r2, ip
    f674:	faa4 f28c 	sel	r2, r4, ip
    f678:	fa83 f34c 	uadd8	r3, r3, ip
    f67c:	faa2 f38c 	sel	r3, r2, ip
    f680:	bb4b      	cbnz	r3, f6d6 <strlen+0x96>
    f682:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    f686:	fa82 f24c 	uadd8	r2, r2, ip
    f68a:	f100 0008 	add.w	r0, r0, #8
    f68e:	faa4 f28c 	sel	r2, r4, ip
    f692:	fa83 f34c 	uadd8	r3, r3, ip
    f696:	faa2 f38c 	sel	r3, r2, ip
    f69a:	b9e3      	cbnz	r3, f6d6 <strlen+0x96>
    f69c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    f6a0:	fa82 f24c 	uadd8	r2, r2, ip
    f6a4:	f100 0008 	add.w	r0, r0, #8
    f6a8:	faa4 f28c 	sel	r2, r4, ip
    f6ac:	fa83 f34c 	uadd8	r3, r3, ip
    f6b0:	faa2 f38c 	sel	r3, r2, ip
    f6b4:	b97b      	cbnz	r3, f6d6 <strlen+0x96>
    f6b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    f6ba:	f101 0120 	add.w	r1, r1, #32
    f6be:	fa82 f24c 	uadd8	r2, r2, ip
    f6c2:	f100 0008 	add.w	r0, r0, #8
    f6c6:	faa4 f28c 	sel	r2, r4, ip
    f6ca:	fa83 f34c 	uadd8	r3, r3, ip
    f6ce:	faa2 f38c 	sel	r3, r2, ip
    f6d2:	2b00      	cmp	r3, #0
    f6d4:	d0c6      	beq.n	f664 <strlen+0x24>
    f6d6:	2a00      	cmp	r2, #0
    f6d8:	bf04      	itt	eq
    f6da:	3004      	addeq	r0, #4
    f6dc:	461a      	moveq	r2, r3
    f6de:	ba12      	rev	r2, r2
    f6e0:	fab2 f282 	clz	r2, r2
    f6e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    f6e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    f6ec:	4770      	bx	lr
    f6ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    f6f2:	f004 0503 	and.w	r5, r4, #3
    f6f6:	f1c4 0000 	rsb	r0, r4, #0
    f6fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    f6fe:	f014 0f04 	tst.w	r4, #4
    f702:	f891 f040 	pld	[r1, #64]	; 0x40
    f706:	fa0c f505 	lsl.w	r5, ip, r5
    f70a:	ea62 0205 	orn	r2, r2, r5
    f70e:	bf1c      	itt	ne
    f710:	ea63 0305 	ornne	r3, r3, r5
    f714:	4662      	movne	r2, ip
    f716:	f04f 0400 	mov.w	r4, #0
    f71a:	e7a9      	b.n	f670 <strlen+0x30>

0000f71c <register_fini>:
    f71c:	4b02      	ldr	r3, [pc, #8]	; (f728 <register_fini+0xc>)
    f71e:	b113      	cbz	r3, f726 <register_fini+0xa>
    f720:	4802      	ldr	r0, [pc, #8]	; (f72c <register_fini+0x10>)
    f722:	f7fc bc01 	b.w	bf28 <atexit>
    f726:	4770      	bx	lr
    f728:	00000000 	.word	0x00000000
    f72c:	0000f731 	.word	0x0000f731

0000f730 <__libc_fini_array>:
    f730:	b538      	push	{r3, r4, r5, lr}
    f732:	4d07      	ldr	r5, [pc, #28]	; (f750 <__libc_fini_array+0x20>)
    f734:	4c07      	ldr	r4, [pc, #28]	; (f754 <__libc_fini_array+0x24>)
    f736:	1b2c      	subs	r4, r5, r4
    f738:	10a4      	asrs	r4, r4, #2
    f73a:	d005      	beq.n	f748 <__libc_fini_array+0x18>
    f73c:	3c01      	subs	r4, #1
    f73e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    f742:	4798      	blx	r3
    f744:	2c00      	cmp	r4, #0
    f746:	d1f9      	bne.n	f73c <__libc_fini_array+0xc>
    f748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f74c:	f003 b9a4 	b.w	12a98 <__init_array_end>
	...

0000f758 <vtable for APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>>:
	...
    f760:	08b1 0000 07ed 0000 0631 0000 066d 0000     ........1...m...
    f770:	046d 0000 0471 0000 b319 0000               m...q.......

0000f77c <stratosphere_sunset_gp>:
    f77c:	0100 0902 0104 0902 0108 0a02 010d 0b02     ................
    f78c:	0111 0b02 0115 0d03 011a 0f03 011e 1003     ................
    f79c:	0123 1204 0127 1304 012b 1504 0130 1705     #...'...+...0...
    f7ac:	0134 1b05 0139 2006 013d 2607 0141 3109     4...9.. =..&A..1
    f7bc:	0146 3d0b 014a 5011 014f 6717 0153 871f     F..=J..PO..gS...
    f7cc:	0257 ac2a 045c be30 0960 d236 0b65 d637     W.*.\.0.`.6.e.7.
    f7dc:	0d69 dd3a 106d db3c 1372 d83e 1876 d242     i.:.m.<.r.>.v.B.
    f7ec:	1e7b c945 237f b446 2783 a246 4088 9054     {.E..#F..'F..@T.
    f7fc:	618c 8061 9491 7b79 d295 7792 b899 5c7a     .aa...y{...w..z\
    f80c:	9f9e 4564 85a2 2144 6ea7 0b2a 98ab 0635     ..dE..D!.n*...5.
    f81c:	cbaf 0341 deb4 0563 f2b8 078e debd 057a     ..A...c.......z.
    f82c:	cbc1 0369 d0c5 0149 d2ca 0130 dece 012d     ..i...I...0...-.
    f83c:	ead3 012a 96d7 0117 56db 010a 23e0 0103     ..*......V...#..
    f84c:	09e4 0101 04e9 0101 01ed 0101 01f1 0101     ................
    f85c:	01f6 0101 01fa 0101 01ff 0101               ............

0000f868 <Orange_to_Purple_gp>:
    f868:	d000 0132 927f 2d1b 61ff b20c               ..2....-.a..

0000f874 <BlacK_Magenta_Red_gp>:
    f874:	0000 0000 2a3f 2d00 ff7f ff00 ffbf 2d00     ....?*.-.......-
    f884:	ffff 0000 5328 2029 6843 6e61 6567 6d20     ....(S) Change m
    f894:	646f 7365 093a 0000 5228 2029 6152 646e     odes:...(R) Rand
    f8a4:	6d6f 4d20 646f 3a65 0009 0000 5128 2029     om Mode:....(Q) 
    f8b4:	6843 6e61 6567 5020 6c61 7465 6574 3a73     Change Palettes:
    f8c4:	0009 0000 5428 2029 6f4d 6564 5420 6d69     ....(T) Mode Tim
    f8d4:	7265 093a 0009 0000 6f4d 6564 6320 6168     er:.....Mode cha
    f8e4:	676e 2065 756e 626d 7265 093a 0000 0000     nge number:.....
    f8f4:	7552 6e6e 6e69 2067 6974 656d 093a 0009     Running time:...
    f904:	206d 0000 0073 0000 7953 7473 6d65 7420     m ..s...System t
    f914:	6d69 3a65 0909 0000 7c7c 2820 2950 5020     ime:....|| (P) P
    f924:	6c61 7465 6574 2820 0000 0000 2029 0000     alette (....) ..
    f934:	6269 6a5f 6c75 3130 675f 0070 6772 5f69     ib_jul01_gp.rgi_
    f944:	3531 675f 0070 0000 6e41 6c61 676f 756f     15_gp...Analogou
    f954:	5f73 5f31 7067 0000 7365 705f 6e69 736b     s_1_gp..es_pinks
    f964:	6c70 7361 5f68 3830 675f 0070 7365 705f     plash_08_gp.es_p
    f974:	6e69 736b 6c70 7361 5f68 3730 675f 0070     inksplash_07_gp.
    f984:	6f43 6172 5f6c 6572 6665 675f 0070 0000     Coral_reef_gp...
    f994:	7365 6f5f 6563 6e61 625f 6572 7a65 5f65     es_ocean_breeze_
    f9a4:	3630 5f38 7067 0000 7365 6f5f 6563 6e61     068_gp..es_ocean
    f9b4:	625f 6572 7a65 5f65 3330 5f36 7067 0000     _breeze_036_gp..
    f9c4:	7365 6c5f 6e61 7364 6163 6570 365f 5f34     es_landscape_64_
    f9d4:	7067 0000 7365 6c5f 6e61 7364 6163 6570     gp..es_landscape
    f9e4:	335f 5f33 7067 0000 6172 6e69 6f62 7377     _33_gp..rainbows
    f9f4:	6568 6272 7465 675f 0070 0000 7267 3536     herbet_gp...gr65
    fa04:	685f 6c75 5f74 7067 0000 0000 7267 3436     _hult_gp....gr64
    fa14:	685f 6c75 5f74 7067 0000 0000 4d47 5f54     _hult_gp....GMT_
    fa24:	7264 7779 7465 675f 0070 0000 6269 3531     drywet_gp...ib15
    fa34:	675f 0070 7546 6373 6968 5f61 5f37 7067     _gp.Fuschia_7_gp
    fa44:	0000 0000 7365 655f 656d 6172 646c 645f     ....es_emerald_d
    fa54:	6172 6f67 5f6e 3830 675f 0070 616c 6176     ragon_08_gp.lava
    fa64:	675f 0070 6966 6572 675f 0070 6f43 6f6c     _gp.fire_gp.Colo
    fa74:	6672 6c75 5f6c 7067 0000 0000 614d 6567     rfull_gp....Mage
    fa84:	746e 5f61 7645 6e65 6e69 5f67 7067 0000     nta_Evening_gp..
    fa94:	7553 736e 7465 525f 6165 5f6c 7067 0000     Sunset_Real_gp..
    faa4:	7365 615f 7475 6d75 5f6e 3931 675f 0070     es_autumn_19_gp.
    fab4:	6c42 6361 5f4b 6c42 6575 4d5f 6761 6e65     BlacK_Blue_Magen
    fac4:	6174 575f 6968 6574 675f 0070 6c42 6361     ta_White_gp.Blac
    fad4:	5f4b 614d 6567 746e 5f61 6552 5f64 7067     K_Magenta_Red_gp
    fae4:	0000 0000 6c42 6361 5f4b 6552 5f64 614d     ....BlacK_Red_Ma
    faf4:	6567 746e 5f61 6559 6c6c 776f 675f 0070     genta_Yellow_gp.
    fb04:	6c42 6575 435f 6179 5f6e 6559 6c6c 776f     Blue_Cyan_Yellow
    fb14:	675f 0070 6862 3177 675f 6572 6e65 5f79     _gp.bhw1_greeny_
    fb24:	7067 0000 6862 3177 325f 5f36 7067 0000     gp..bhw1_26_gp..
    fb34:	6862 3177 325f 5f38 7067 0000 6862 3277     bhw1_28_gp..bhw2
    fb44:	325f 5f33 7067 0000 6862 3277 325f 5f32     _23_gp..bhw2_22_
    fb54:	7067 0000 6862 3277 345f 5f39 7067 0000     gp..bhw2_49_gp..
    fb64:	6862 3277 315f 5f30 7067 0000 6862 3277     bhw2_10_gp..bhw2
    fb74:	315f 5f34 7067 0000 6862 3377 325f 5f31     _14_gp..bhw3_21_
    fb84:	7067 0000 6862 3377 335f 5f30 7067 0000     gp..bhw3_30_gp..
    fb94:	6976 7262 6e61 5f74 7067 0000 7763 5f31     vibrant_gp..cw1_
    fba4:	3230 5f39 7067 0000 6c61 7261 5f6d 3470     029_gp..alarm_p4
    fbb4:	305f 325f 675f 0070 6952 6262 6e6f 435f     _0_2_gp.Ribbon_C
    fbc4:	6c6f 726f 5f73 7067 0000 0000 724f 6e61     olors_gp....Oran
    fbd4:	6567 745f 5f6f 7550 7072 656c 675f 0070     ge_to_Purple_gp.
    fbe4:	6946 6572 315f 675f 0070 0000 7473 6e61     Fire_1_gp...stan
    fbf4:	6164 6472 675f 0070 5f62 7067 0000 0000     dard_gp.b_gp....
    fc04:	7365 655f 656d 6172 646c 645f 6172 6f67     es_emerald_drago
    fc14:	5f6e 3130 675f 0070 7266 746f 3368 3631     n_01_gp.froth316
    fc24:	675f 0070 6b53 6479 6579 3131 675f 0070     _gp.Skydye11_gp.
    fc34:	6957 7a7a 306c 3931 675f 0070 7254 706f     Wizzl019_gp.Trop
    fc44:	6369 6c61 435f 6c6f 726f 5f73 7067 0000     ical_Colors_gp..
    fc54:	6c73 706f 5f65 7067 0000 0000 666f 7561     slope_gp....ofau
    fc64:	6f72 6172 675f 0070 6168 6c6c 776f 5f73     rora_gp.hallows_
    fc74:	7067 0000 6573 5f61 7274 6165 7573 6572     gp..sea_treasure
    fc84:	675f 0070 6553 6f63 646e 7261 5f79 3130     _gp.Secondary_01
    fc94:	5f61 7067 0000 0000 7053 696c 5f74 3330     a_gp....Split_03
    fca4:	675f 0070 4d47 5f54 6573 6661 6f6c 726f     _gp.GMT_seafloor
    fcb4:	675f 0070 6172 6e69 6f62 5f77 7067 0000     _gp.rainbow_gp..
    fcc4:	6c63 756f 6364 6c6f 726f 5f73 7067 0000     cloudcolors_gp..
    fcd4:	6563 7571 6c61 675f 0070 0000 7570 7072     cequal_gp...purp
    fce4:	656c 665f 6f6c 6577 5f72 7067 0000 0000     le_flower_gp....
    fcf4:	6966 7265 6563 695f 6563 675f 0070 0000     fierce_ice_gp...
    fd04:	6c62 6575 6369 5f65 7067 0000 7774 6c69     blueice_gp..twil
    fd14:	6769 7468 675f 0070 7267 6565 5f6e 7067     ight_gp.green_gp
    fd24:	0000 0000 6c75 7274 7661 6f69 656c 5f74     ....ultraviolet_
    fd34:	6f6d 646c 675f 0070 7061 6c70 5f65 7267     mold_gp.apple_gr
    fd44:	6565 5f6e 7067 0000 6166 6e69 5f74 6172     een_gp..faint_ra
    fd54:	6e69 6f62 5f77 7067 0000 0000 746f 7369     inbow_gp....otis
    fd64:	675f 0070 6170 7272 746f 675f 0070 0000     _gp.parrot_gp...
    fd74:	6373 756f 6974 5f65 7067 0000 7573 6c6e     scoutie_gp..sunl
    fd84:	7469 6177 6576 675f 0070 0000 4d47 5f54     itwave_gp...GMT_
    fd94:	6f63 6c6f 675f 0070 6862 3177 735f 6e75     cool_gp.bhw1_sun
    fda4:	6f63 756e 6572 675f 0070 0000 6862 3177     conure_gp...bhw1
    fdb4:	305f 5f35 7067 0000 6862 3277 745f 7275     _05_gp..bhw2_tur
    fdc4:	5f71 7067 0000 0000 6862 3377 315f 5f33     q_gp....bhw3_13_
    fdd4:	7067 0000 6862 3377 365f 5f31 7067 0000     gp..bhw3_61_gp..
    fde4:	6862 3477 305f 3930 675f 0070 6862 3377     bhw4_009_gp.bhw3
    fdf4:	335f 5f34 7067 0000 7365 655f 656d 6172     _34_gp..es_emera
    fe04:	646c 645f 6172 6f67 5f6e 3930 675f 0070     ld_dragon_09_gp.
    fe14:	6178 696e 7564 325f 675f 0070 6177 6574     xanidu_2_gp.wate
    fe24:	3172 675f 0070 0000 7473 6172 6f74 7073     r1_gp...stratosp
    fe34:	6568 6572 735f 6e75 6573 5f74 7067 0000     here_sunset_gp..
    fe44:	6552 7364 6e61 4364 6179 736e 675f 0070     RedsandCyans_gp.
    fe54:	7943 6e61 4d5f 6761 6e65 6174 425f 756c     Cyan_Magenta_Blu
    fe64:	5f65 7067 0000 0000 6f43 706d 656c 656d     e_gp....Compleme
    fe74:	746e 7261 5f79 3130 5f61 7067 0000 0000     ntary_01a_gp....
    fe84:	7963 6562 7072 6e75 5f6b 656e 6e6f 675f     cyberpunk_neon_g
    fe94:	0070 0000 6c62 6575 665f 7269 5f65 7067     p...blue_fire_gp
    fea4:	0000 0000 7570 7072 656c 6c66 5f79 7067     ....purplefly_gp
    feb4:	0000 0000 6172 6e69 6f62 3277 675f 0070     ....rainbow2_gp.
    fec4:	6c62 6461 5f65 7572 6e6e 7265 325f 3430     blade_runner_204
    fed4:	5f39 7067 0000 0000 6f4e 2074 2061 7267     9_gp....Not a gr
    fee4:	6461 6569 746e 7020 6c61 7465 6574 0000     adient palette..
    fef4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
    ff04:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
    ff14:	3d3d 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ==..============
    ff24:	3d3d 5543 5252 4e45 3d54 3d3d 3d3d 3d3d     ==CURRENT=======
    ff34:	3d3d 3d3d 3d3d 0000 7e7e 7e7e 7e7e 7e7e     ======..~~~~~~~~
    ff44:	7e7e 7e7e 7e7e 4e7e 5845 7e54 7e7e 7e7e     ~~~~~~~NEXT~~~~~
    ff54:	7e7e 7e7e 7e7e 7e7e 7e7e 0000 7c7c 2820     ~~~~~~~~~~..|| (
    ff64:	2942 4220 6972 6867 6e74 7365 3a73 0009     B) Brightness:..
    ff74:	7c09 007c 7c7c 2820 2944 6420 6c65 7961     .||.|| (D) delay
    ff84:	745f 6d69 3a65 0009 7c7c 2820 294e 7420     _time:..|| (N) t
    ff94:	6968 5f73 6964 3a72 0009 0000 7c7c 2820     his_dir:....|| (
    ffa4:	2946 6220 656c 646e 6e69 3a67 0009 0000     F) blending:....
    ffb4:	494c 454e 5241 0000 4f4e 4c42 4e45 0044     LINEAR..NOBLEND.
    ffc4:	7c7c 2820 294d 6d20 646f 5f65 756e 626d     || (M) mode_numb
    ffd4:	7265 093a 0000 0000 7c7c 6d20 646f 5f65     er:.....|| mode_
    ffe4:	6e69 7469 6169 696c 657a 3a64 0009 0000     initialized:....
    fff4:	7c7c 7520 6573 705f 6c61 7465 6574 093a     || use_palette:.
   10004:	0009 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ....============
   10014:	554a 4747 454c 4820 4c41 3d46 3d3d 3d3d     JUGGLE HALF=====
   10024:	3d3d 3d3d 3d3d 0000 3d3d 3d3d 3d3d 3d3d     ======..========
   10034:	3d3d 4d3d 4c55 4954 4a20 4755 4c47 3d45     ===MULTI JUGGLE=
   10044:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 3d3d 3d3d     ==========..====
   10054:	3d3d 3d3d 3d3d 3d3d 3d3d 554a 4747 454c     ==========JUGGLE
   10064:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     ==============..
   10074:	7c7c 2820 2961 7520 6573 665f 6c75 5f6c     || (a) use_full_
   10084:	6172 676e 3a65 0009 7c7c 2820 2962 6f20     range:..|| (b) o
   10094:	656e 645f 7269 093a 0009 0000 7c7c 2820     ne_dir:.....|| (
   100a4:	2963 7020 6168 6573 3a64 0909 0000 0000     c) phased:......
   100b4:	7c7c 2820 2964 6e20 6d75 6f64 7374 093a     || (d) numdots:.
   100c4:	0009 0000 7c7c 2820 2965 6220 6165 3a74     ....|| (e) beat:
   100d4:	0909 0000 7c7c 2820 2966 6620 6461 3a65     ....|| (f) fade:
   100e4:	0909 0000 7c7c 2820 2967 6420 6669 3a66     ....|| (g) diff:
   100f4:	0909 0000 7c7c 2820 2968 6920 646e 7865     ....|| (h) index
   10104:	725f 7365 7465 093a 0000 0000 3d3d 3d3d     _reset:.....====
   10114:	3d3d 3d3d 3d3d 4152 4e49 4f42 2057 414d     ======RAINBOW MA
   10124:	4352 3d48 3d3d 3d3d 3d3d 3d3d 3d3d 0000     RCH===========..
   10134:	3d3d 3d3d 3d3d 523d 4941 424e 574f 4d20     =======RAINBOW M
   10144:	5241 4843 5320 4c50 5449 3d3d 3d3d 3d3d     ARCH SPLIT======
   10154:	3d3d 0000 3d3d 3d3d 3d3d 523d 4941 424e     ==..=======RAINB
   10164:	574f 4d20 5241 4843 4220 4145 3d54 3d3d     OW MARCH BEAT===
   10174:	3d3d 3d3d 3d3d 0000 7c7c 2820 2962 7320     ======..|| (b) s
   10184:	6c70 7469 093a 0009 7c7c 2820 2963 6420     plit:...|| (c) d
   10194:	6669 3a66 0909 0000 7c7c 2820 2964 7220     iff:....|| (d) r
   101a4:	746f 093a 0009 0000 7c7c 2820 2965 6a20     ot:.....|| (e) j
   101b4:	6775 6c67 5f65 6562 7461 093a 0000 0000     uggle_beat:.....
   101c4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 4f54     ==============TO
   101d4:	4352 3d48 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     RCH=============
   101e4:	3d3d 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ==..============
   101f4:	4f54 4352 2048 5953 434e 3d3d 3d3d 3d3d     TORCH SYNC======
   10204:	3d3d 3d3d 3d3d 0000 3d3d 3d3d 3d3d 3d3d     ======..========
   10214:	3d3d 3d3d 3d3d 4946 4552 3d3d 3d3d 3d3d     ======FIRE======
   10224:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 3d3d 3d3d     ==========..====
   10234:	3d3d 3d3d 3d3d 3d3d 4946 4552 5320 4e59     ========FIRE SYN
   10244:	3d43 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     C=============..
   10254:	3d3d 3d3d 3d3d 3d3d 3d3d 463d 5249 2045     ===========FIRE 
   10264:	494d 5252 524f 3d3d 3d3d 3d3d 3d3d 3d3d     MIRROR==========
   10274:	3d3d 0000 3d3d 3d3d 3d3d 3d3d 4946 4552     ==..========FIRE
   10284:	4d20 5249 4f52 2052 5953 434e 3d3d 3d3d      MIRROR SYNC====
   10294:	3d3d 3d3d 3d3d 0000 7c7c 2820 2961 7320     ======..|| (a) s
   102a4:	6170 6b72 6e69 3a67 0009 0000 7c7c 2820     parking:....|| (
   102b4:	2962 6320 6f6f 696c 676e 093a 0009 0000     b) cooling:.....
   102c4:	7c7c 2820 2963 7320 6170 6b72 6e69 3267     || (c) sparking2
   102d4:	093a 0000 7c7c 2820 2964 6320 6f6f 696c     :...|| (d) cooli
   102e4:	676e 3a32 0009 0000 7c7c 2820 2965 7320     ng2:....|| (e) s
   102f4:	6e79 3a63 0909 0000 7c7c 2820 2966 7420     ync:....|| (f) t
   10304:	726f 6863 645f 6669 3a66 0009 3d3d 3d3d     orch_diff:..====
   10314:	3d3d 3d3d 3d3d 3d3d 4f43 4f4c 5752 5641     ========COLORWAV
   10324:	3d45 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     E=============..
   10334:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 5250     ==============PR
   10344:	4449 3d45 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     IDE=============
   10354:	3d3d 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ==..============
   10364:	503d 4341 4649 4943 3d41 3d3d 3d3d 3d3d     =PACIFCIA=======
   10374:	3d3d 3d3d 3d3d 0000 3d3d 3d3d 3d3d 3d3d     ======..========
   10384:	3d3d 3d3d 433d 4e4f 4546 5454 3d49 3d3d     =====CONFETTI===
   10394:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 7c7c 2820     ==========..|| (
   103a4:	2962 6320 6e6f 6566 7474 5f69 6166 6564     b) confetti_fade
   103b4:	093a 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     :...============
   103c4:	4946 4552 4f57 4b52 3d53 3d3d 3d3d 3d3d     FIREWORKS=======
   103d4:	3d3d 3d3d 3d3d 0000 7c7c 4320 7275 6572     ======..|| Curre
   103e4:	746e 5320 6174 6567 093a 0000 4157 5449     nt Stage:...WAIT
   103f4:	4e49 0047 4146 4544 5055 0000 5845 4c50     ING.FADEUP..EXPL
   10404:	534f 4f49 7c4e 0000 7c7c 6620 7269 7765     OSION|..|| firew
   10414:	726f 5f6b 6f70 6973 6974 6e6f 093a 0000     ork_position:...
   10424:	7c7c 4e20 6d75 6562 2072 666f 7320 6170     || Number of spa
   10434:	6b72 3a73 0009 0000 7c7c 4220 6972 6867     rks:....|| Brigh
   10444:	6574 7473 7320 6170 6b72 093a 0000 0000     test spark:.....
   10454:	7c7c 4e20 7865 2074 7865 6c70 736f 6f69     || Next explosio
   10464:	206e 6974 656d 093a 0000 0000 7c7c 2820     n time:.....|| (
   10474:	2961 7520 6573 6f5f 6576 6c72 7961 093a     a) use_overlay:.
   10484:	0000 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ....============
   10494:	4f3d 454e 5320 4e49 3d3d 3d3d 3d3d 3d3d     =ONE SIN========
   104a4:	3d3d 3d3d 3d3d 0000 7c7c 2820 2962 7320     ======..|| (b) s
   104b4:	6e69 695f 636e 093a 0009 0000 7c7c 2820     in_inc:.....|| (
   104c4:	2963 7320 6e69 735f 6570 6465 093a 0000     c) sin_speed:...
   104d4:	7c7c 2820 2964 7320 6e69 635f 7475 666f     || (d) sin_cutof
   104e4:	3a66 0009 7c7c 2820 2965 7320 6e69 725f     f:..|| (e) sin_r
   104f4:	746f 093a 0009 0000 7c7c 2820 2966 7320     ot:.....|| (f) s
   10504:	6e69 705f 6168 6573 093a 0000 7c7c 2820     in_phase:...|| (
   10514:	2967 6120 6c6c 665f 6572 3a71 0009 0000     g) all_freq:....
   10524:	7c7c 2820 2968 6220 5f67 6c63 3a72 0909     || (h) bg_clr:..
   10534:	0000 0000 7c7c 2820 2969 6220 5f67 7262     ....|| (i) bg_br
   10544:	3a69 0909 0000 0000 3d3d 3d3d 3d3d 3d3d     i:......========
   10554:	3d3d 3d3d 543d 4f57 5320 4e49 3d3d 3d3d     =====TWO SIN====
   10564:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 7c7c 2820     ==========..|| (
   10574:	2962 7320 6e69 685f 6575 093a 0009 0000     b) sin_hue:.....
   10584:	7c7c 2820 2963 7420 6f77 685f 6575 093a     || (c) two_hue:.
   10594:	0009 0000 7c7c 2820 2964 7320 6e69 735f     ....|| (d) sin_s
   105a4:	6570 6465 093a 0000 7c7c 2820 2965 7420     peed:...|| (e) t
   105b4:	6f77 735f 6570 6465 093a 0000 7c7c 2820     wo_speed:...|| (
   105c4:	2966 7320 6e69 725f 746f 093a 0009 0000     f) sin_rot:.....
   105d4:	7c7c 2820 2967 7420 6f77 725f 746f 093a     || (g) two_rot:.
   105e4:	0009 0000 7c7c 2820 2968 7320 6e69 635f     ....|| (h) sin_c
   105f4:	7475 666f 3a66 0009 7c7c 2820 2969 7420     utoff:..|| (i) t
   10604:	6f77 635f 7475 666f 3a66 0009 7c7c 2820     wo_cutoff:..|| (
   10614:	296a 7320 6e69 705f 6168 6573 093a 0000     j) sin_phase:...
   10624:	7c7c 2820 296b 7420 6f77 705f 6168 6573     || (k) two_phase
   10634:	093a 0000 7c7c 2820 296c 6120 6c6c 665f     :...|| (l) all_f
   10644:	6572 3a71 0009 0000 3d3d 3d3d 3d3d 3d3d     req:....========
   10654:	3d3d 4853 4f4f 4954 474e 5020 4c4f 3d45     ==SHOOTING POLE=
   10664:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 7c7c 2820     ==========..|| (
   10674:	2961 7320 7274 7069 725f 6e61 6567 093a     a) strip_range:.
   10684:	0000 0000 7c7c 2820 2962 7020 6c6f 5f65     ....|| (b) pole_
   10694:	6964 6666 093a 0000 7c7c 2820 2963 6a20     diff:...|| (c) j
   106a4:	6775 6c67 5f65 6166 6564 093a 0000 0000     uggle_fade:.....
   106b4:	7c7c 2820 2964 6a20 6775 6c67 5f65 6562     || (d) juggle_be
   106c4:	7461 093a 0000 0000 7c7c 2820 2965 6a20     at:.....|| (e) j
   106d4:	6775 6c67 5f65 6964 6666 093a 0000 0000     uggle_diff:.....
   106e4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 4e3d     ===============N
   106f4:	494f 4553 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     OISE============
   10704:	3d3d 0000 7c7c 2820 2962 6e20 696f 6573     ==..|| (b) noise
   10714:	735f 6163 656c 093a 0000 0000 7c7c 2820     _scale:.....|| (
   10724:	2963 6e20 696f 6573 795f 6373 6c61 3a65     c) noise_yscale:
   10734:	0009 0000 7c7c 2820 2964 6e20 696f 6573     ....|| (d) noise
   10744:	645f 7369 3a74 0009 7c7c 2820 2965 6e20     _dist:..|| (e) n
   10754:	696f 6573 665f 6461 3a65 0009 3d3d 3d3d     oise_fade:..====
   10764:	3d3d 3d3d 3d3d 3d3d 3d3d 4f42 4e55 4543     ==========BOUNCE
   10774:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     ==============..
   10784:	7c7c 2820 2961 6a20 6775 6c67 5f65 6166     || (a) juggle_fa
   10794:	6564 093a 0000 0000 7c7c 2820 2962 6220     de:.....|| (b) b
   107a4:	756f 636e 5f65 656c 676e 6874 093a 0000     ounce_length:...
   107b4:	7c7c 2820 2963 6a20 6775 6c67 5f65 6562     || (c) juggle_be
   107c4:	7461 093a 0000 0000 7c7c 2820 2964 7220     at:.....|| (d) r
   107d4:	6961 626e 776f 645f 6669 3a66 0009 0000     ainbow_diff:....
   107e4:	7c7c 2820 2965 7320 6174 7472 625f 6165     || (e) start_bea
   107f4:	3a74 0009 7c7c 2820 2966 6220 756f 636e     t:..|| (f) bounc
   10804:	5f65 6172 6e69 6f62 3a77 0009 3d3d 3d3d     e_rainbow:..====
   10814:	3d3d 3d3d 3d3d 4f42 4e55 4943 474e 4220     ======BOUNCING B
   10824:	4c41 534c 3d3d 3d3d 3d3d 3d3d 3d3d 0000     ALLS==========..
   10834:	7c7c 2820 2961 6620 6461 3a65 0909 0000     || (a) fade:....
   10844:	7c7c 2820 2962 6e20 6d75 6562 2072 666f     || (b) number of
   10854:	6220 6c61 736c 093a 0000 0000 7c7c 2820      balls:.....|| (
   10864:	2963 7520 6573 705f 6c61 7465 6574 093a     c) use_palette:.
   10874:	0000 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ....============
   10884:	494c 4847 5354 4241 5245 3d3d 3d3d 3d3d     LIGHTSABER======
   10894:	3d3d 3d3d 3d3d 0000 7c7c 2820 2961 7520     ======..|| (a) u
   108a4:	6573 705f 6c61 7465 6574 093a 0000 0000     se_palette:.....
   108b4:	7c7c 2820 2962 6220 616c 6564 635f 6c6f     || (b) blade_col
   108c4:	726f 093a 0000 0000 7c7c 2820 2963 6420     or:.....|| (c) d
   108d4:	6c65 6174 625f 6972 6867 3a74 0009 0000     elta_bright:....
   108e4:	7c7c 2820 2964 6820 6c6f 5f64 6974 656d     || (d) hold_time
   108f4:	093a 0000 7c7c 7320 6261 7265 735f 6174     :...|| saber_sta
   10904:	6567 093a 0009 0000 4f44 4e57 0000 0000     ge:.....DOWN....
   10914:	4157 5449 0000 0000 7c7c 7420 7069 705f     WAIT....|| tip_p
   10924:	736f 093a 0009 0000 3d3d 3d3d 3d3d 3d3d     os:.....========
   10934:	3d3d 3d3d 543d 4957 4b4e 454c 3d3d 3d3d     =====TWINKLE====
   10944:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 7c7c 2820     ==========..|| (
   10954:	2962 7420 6977 6b6e 656c 735f 6570 6465     b) twinkle_speed
   10964:	093a 0000 7c7c 2820 2963 7420 6977 6b6e     :...|| (c) twink
   10974:	656c 645f 6e65 6973 7974 093a 0000 0000     le_density:.....
   10984:	7c7c 2820 2964 6320 6f6f 5f6c 696c 656b     || (d) cool_like
   10994:	695f 636e 6e61 093a 0000 0000 7c7c 2820     _incan:.....|| (
   109a4:	2965 6120 7475 5f6f 6573 656c 7463 625f     e) auto_select_b
   109b4:	3a67 0009 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     g:..============
   109c4:	503d 414c 4d53 3d41 3d3d 3d3d 3d3d 3d3d     =PLASMA=========
   109d4:	3d3d 3d3d 3d3d 0000 7c7c 2820 2962 7020     ======..|| (b) p
   109e4:	616c 6d73 5f61 6562 7461 3a31 0009 0000     lasma_beat1:....
   109f4:	7c7c 2820 2963 7020 616c 6d73 5f61 6562     || (c) plasma_be
   10a04:	7461 3a32 0009 0000 7c7c 2820 2964 7020     at2:....|| (d) p
   10a14:	616c 6d73 5f61 6562 7461 3a33 0009 0000     lasma_beat3:....
   10a24:	7c7c 2820 2965 7020 616c 6d73 5f61 6172     || (e) plasma_ra
   10a34:	676e 3165 093a 0000 7c7c 2820 2966 7020     nge1:...|| (f) p
   10a44:	616c 6d73 5f61 6172 676e 3265 093a 0000     lasma_range2:...
   10a54:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 554f     ==============OU
   10a64:	5754 5241 3d44 3d3d 3d3d 3d3d 3d3d 3d3d     TWARD===========
   10a74:	3d3d 0000 7c7c 2820 2961 6f20 7475 665f     ==..|| (a) out_f
   10a84:	6461 3a65 0009 0000 7c7c 2820 2962 6f20     ade:....|| (b) o
   10a94:	7475 625f 6165 3174 093a 0000 7c7c 2820     ut_beat1:...|| (
   10aa4:	2963 6f20 7475 625f 6165 3274 093a 0000     c) out_beat2:...
   10ab4:	7c7c 2820 2964 6f20 7475 6d5f 6e69 3a31     || (d) out_min1:
   10ac4:	0009 0000 7c7c 2820 2965 6f20 7475 6d5f     ....|| (e) out_m
   10ad4:	6e69 3a32 0009 0000 3d3d 3d3d 3d3d 3d3d     in2:....========
   10ae4:	3d3d 3d3d 3d3d 4157 4556 3d53 3d3d 3d3d     ======WAVES=====
   10af4:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 7c7c 2820     ==========..|| (
   10b04:	2961 7720 7661 5f65 6562 7461 093a 0000     a) wave_beat:...
   10b14:	7c7c 2820 2962 7720 7661 5f65 7073 6565     || (b) wave_spee
   10b24:	3a64 0009 3d3d 3d3d 3d3d 3d3d 3d3d 4f4d     d:..==========MO
   10b34:	4544 5420 5059 2045 5245 4f52 3d52 3d3d     DE TYPE ERROR===
   10b44:	3d3d 3d3d 3d3d 0000 3d3d 3d3d 3d3d 3d3d     ======..========
   10b54:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   10b64:	3d3d 3d3d 3d3d 3d3d 3d3d 000a 5e0a 5e5e     ==========...^^^
   10b74:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
   10b84:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
   10b94:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
   10ba4:	0000 0000 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ....^^^^^^^^^^^^
   10bb4:	5e5e 5e5e 435e 6168 676e 6e69 2067 6150     ^^^^^Changing Pa
   10bc4:	656c 7474 5e65 5e5e 5e5e 5e5e 5e5e 5e5e     lette^^^^^^^^^^^
   10bd4:	5e5e 5e5e 5e5e 005e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^.^^^^^^^^
   10be4:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
   10bf4:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
   10c04:	5e5e 5e5e 5e5e 5e5e 5e5e 005e 2a0a 2a2a     ^^^^^^^^^^^..***
   10c14:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10c24:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10c34:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10c44:	0000 0000 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ....************
   10c54:	2a2a 2a2a 2a2a 432a 6168 676e 6e69 2067     *******Changing 
   10c64:	6f4d 6564 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     Mode************
   10c74:	2a2a 2a2a 2a2a 002a 2a2a 2a2a 2a2a 2a2a     *******.********
   10c84:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10c94:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10ca4:	2a2a 2a2a 2a2a 2a2a 2a2a 002a 2023 0000     ***********.# ..
   10cb4:	0020 0000 4d56 5044 5f56 7c31 5f31 4d56      ...VMDPV_1|1_VM
   10cc4:	5044 0a56 0000 0000 4544 5542 2047 4e4f     DPV.....DEBUG ON
   10cd4:	0000 0000 4553 5554 2050 4f43 504d 454c     ....SETUP COMPLE
   10ce4:	4554 ff00                                   TE..

00010ce8 <vibrant_gp>:
   10ce8:	ff00 ffff 011e 1d90 e547 0cf6 ff77 0801     ........G...w...
   10cf8:	b8a5 cb01 03d6 fa1c 00ff 0000               ............

00010d04 <es_landscape_64_gp>:
   10d04:	0000 0000 0225 0119 0f4c 0573 4f7f 01d5     ....%...L.s..O..
   10d14:	7e80 2fd3 bc82 f7d1 9099 cdb6 3bcc fa75     .~./.........;u.
   10d24:	01ff c025                                   ..%.

00010d28 <Skydye11_gp>:
   10d28:	0800 0400 0801 0400 0c02 0800 1003 0c00     ................
   10d38:	1404 0c00 1405 1000 1806 1000 1c07 1400     ................
   10d48:	1c09 1400 200a 1800 240b 1800 240c 1c00     ..... ...$...$..
   10d58:	280d 1c00 2c0e 2000 300f 2400 3410 2400     .(...,. .0.$.4.$
   10d68:	3811 2800 3c12 2c00 3c14 2c00 4015 3000     .8.(.<.,.<.,.@.0
   10d78:	4416 3400 4817 3400 4c18 3800 4c19 3804     .D.4.H.4.L.8.L.8
   10d88:	501a 3c04 541b 3c04 581c 4004 5c1d 4404     .P.<.T.<.X.@.\.D
   10d98:	601e 4808 601f 4c08 5c20 5008 5821 5408     .`.H.`.L \.P!X.T
   10da8:	5422 5c08 5423 6008 5024 6808 4c25 6c08     "T.\#T.`$P.h%L.l
   10db8:	4826 7008 4827 7808 4428 7c08 4029 8408     &H.p'H.x(D.|)@..
   10dc8:	3c2a 8808 3c2b 9008 382c 9408 342d 9808     *<..+<..,8..-4..
   10dd8:	302e a008 302f a404 2c30 ac04 2831 b004     .0../0..0,..1(..
   10de8:	2432 b404 2433 bc04 2034 c004 1c35 c804     2$..3$..4 ..5...
   10df8:	1836 cc04 1837 d404 1438 d804 1039 dc04     6...7...8...9...
   10e08:	0c3a e404 0c3b e804 083c f004 043d f404     :...;...<...=...
   10e18:	003e fc00 003f f804 0040 f40c 0041 f014     >...?...@...A...
   10e28:	0042 ec1c 0043 e824 0044 e42c 0045 e034     B...C.$.D.,.E.4.
   10e38:	0046 dc3c 0047 d844 0048 d44c 0049 d054     F.<.G.D.H.L.I.T.
   10e48:	004a cc5c 004b c864 004c c46c 004d c074     J.\.K.d.L.l.M.t.
   10e58:	004e bc7c 004f b884 0050 b48c 0051 b094     N.|.O...P...Q...
   10e68:	0052 ac9c 0053 a8a4 0054 a4ac 0055 a0b4     R...S...T...U...
   10e78:	0056 9cbc 0057 98c4 0058 94cc 0059 90d4     V...W...X...Y...
   10e88:	005a 8cdc 005b 88e4 005c 84ec 005d 7ce8     Z...[...\...]..|
   10e98:	005e 78e0 005f 70dc 0060 68d8 0061 60d0     ^..x_..p`..ha..`
   10ea8:	0062 5cc8 0063 58c0 0064 50b8 0065 4cac     b..\c..Xd..Pe..L
   10eb8:	0066 44a4 0067 409c 0068 3894 0069 348c     f..Dg..@h..8i..4
   10ec8:	006a 2c80 006b 2878 006c 2070 006d 1c68     j..,k.x(l.p m.h.
   10ed8:	006e 145c 006f 1054 0070 084c 0071 0040     n.\.o.T.p.L.q.@.
   10ee8:	0072 003c 0073 0038 0074 0034 0075 0030     r.<.s.8.t.4.u.0.
   10ef8:	0076 002c 0077 0028 0078 0024 0479 0020     v.,.w.(.x.$.y. .
   10f08:	047a 001c 047b 0018 047c 0014 047d 0010     z...{...|...}...
   10f18:	047e 000c 047f 0008 0480 0004 0881 0400     ~...............
   10f28:	0c82 0800 1083 0c00 1484 0c00 1485 1000     ................
   10f38:	1886 1000 1c87 1400 2088 1400 2089 1800     ......... ... ..
   10f48:	248a 1800 288b 1c00 2c8c 2000 308d 2400     .$...(...,. .0.$
   10f58:	348e 2404 388f 2804 3891 2804 3c92 2c04     .4.$.8.(.8.(.<.,
   10f68:	4093 3004 4494 3004 4495 3404 4896 3404     .@.0.D.0.D.4.H.4
   10f78:	4c97 3804 5098 3804 5099 3c04 549a 3c04     .L.8.P.8.P.<.T.<
   10f88:	589b 4004 5c9c 4404 609d 4808 609e 4c08     .X.@.\.D.`.H.`.L
   10f98:	689f 4808 70a0 4408 7ca1 4008 84a2 3c08     .h.H.p.D.|.@...<
   10fa8:	90a3 3408 98a4 3008 a4a5 2c08 aca6 2808     ...4...0...,...(
   10fb8:	b4a7 2404 c0a8 2004 c8a9 1c04 d4aa 1404     ...$... ........
   10fc8:	dcab 1004 e8ac 0c04 f0ad 0804 fcae 0000     ................
   10fd8:	fcaf 0008 fcb0 0014 fcb1 001c fcb2 0028     ..............(.
   10fe8:	fcb3 0030 fcb4 003c fcb5 0044 fcb6 0050     ..0...<...D...P.
   10ff8:	fcb7 0058 fcb8 0064 fcb9 006c fcba 0078     ..X...d...l...x.
   11008:	fcbb 0084 fcbc 008c fcbd 0098 fcbe 00a0     ................
   11018:	fcbf 00ac fcc0 00b4 fcc1 00c0 fcc2 00c8     ................
   11028:	fcc3 00d4 fcc4 00dc fcc5 00e8 fcc6 00f0     ................
   11038:	fcc7 00fc fcc8 00f0 fcc9 00e8 fcca 00dc     ................
   11048:	fccb 00d0 fccc 00c4 fccd 00bc fcce 00b0     ................
   11058:	fccf 00a4 fcd0 0098 fcd1 0090 fcd2 0084     ................
   11068:	fcd3 0078 fcd4 0070 fcd5 0064 fcd6 0058     ..x...p...d...X.
   11078:	fcd7 004c fcd8 0044 fcd9 0038 fcda 002c     ..L...D...8...,.
   11088:	fcdb 0020 fcdc 0018 fcdd 000c fcde 0000     .. .............
   11098:	f4df 0400 ece0 0800 e0e1 0c00 d8e2 1000     ................
   110a8:	cce3 1800 c4e4 1c00 b8e5 2000 b0e6 2404     ........... ...$
   110b8:	a8e7 2804 9ce8 2c04 94e9 3004 88ea 3804     ...(...,...0...8
   110c8:	80eb 3c04 74ec 4004 6ced 4404 60ee 4c08     ...<.t.@.l.D.`.L
   110d8:	5cef 4808 54f0 4408 50f1 4008 48f2 3808     .\.H.T.D.P.@.H.8
   110e8:	44f3 3404 3cf4 3004 38f5 2c04 30f6 2804     .D.4.<.0.8.,.0.(
   110f8:	2cf7 2004 24f8 1c04 20f9 1804 18fa 1404     .,. .$... ......
   11108:	14fb 1000 0cfc 0800 00fd 0000 04fe 0400     ................
   11118:	04ff 0400                                   ....

0001111c <sin16_C(unsigned short)::base>:
   1111c:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

0001112c <bhw3_61_gp>:
   1112c:	0e00 1b01 1130 5801 0168 9c58 01a0 2a36     ....0..Xh.X...6*
   1113c:	09db 34eb 8bff e9eb                         ...4....

00011144 <bhw4_009_gp>:
   11144:	4200 c0ba 012b 4716 024f 8e68 4275 c0ba     .B..+..GO.h.uB..
   11154:	0293 8e68 01ba 4716 02e0 8e68 04ff 1c1b     ..h....G..h.....

00011164 <twilight_gp>:
   11164:	0000 0000 0102 0101 0105 0101 0107 0101     ................
   11174:	010a 0101 010c 0101 010f 0101 0111 0101     ................
   11184:	0114 0101 0116 0101 0119 0101 011b 0101     ................
   11194:	011e 0101 0120 0102 0123 0102 0125 0102     .... ...#...%...
   111a4:	0228 0203 022a 0203 022d 0203 032f 0304     (...*...-.../...
   111b4:	0332 0304 0435 0405 0437 0405 053a 0505     2...5...7...:...
   111c4:	063c 0606 063f 0606 0741 0707 0844 0807     <...?...A...D...
   111d4:	0946 0908 0949 0a08 0a4b 0b08 0b4e 0d09     F...I...K...N...
   111e4:	0c50 0e09 0d53 0f09 0e55 100a 0e58 110a     P...S...U...X...
   111f4:	1185 330e 1088 340e 0f8a 370e 0e8d 390e     ...3...4...7...9
   11204:	0d8f 3d0e 0c92 3f0e 0c95 420e 0a97 450d     ...=...?...B...E
   11214:	0a9a 480d 099c 4b0d 089f 4e0d 07a1 520e     ...H...K...N...R
   11224:	07a4 5410 07a6 5811 07a9 5b13 07ab 5f15     ...T...X...[..._
   11234:	07ae 6216 07b0 6619 06b3 691b 06b5 6d1d     ...b...f...i...m
   11244:	06b8 7020 07ba 7525 08bd 782a 09bf 7d2f     .. p..%u..*x../}
   11254:	0ac2 8036 0bc4 843b 0cc7 8942 0ec9 8c49     ..6...;...B...I.
   11264:	10cc 9150 12ce 9557 14d0 995f 16d3 9e67     ..P...W..._...g.
   11274:	18d5 a26f 1bd8 a877 1eda ac80 20dd b08a     ..o...w...... ..
   11284:	23df b693 27e2 ba9c 2ae4 c0a6 2ee7 c5b0     .#...'...*......
   11294:	34e9 c9b6 3aeb cfbb 41ee d4c1 49f0 dbc7     .4...:...A...I..
   112a4:	50f2 dfcd 5af5 e6d5 64f7 ebdb 6dfa f2e1     .P...Z...d...m..
   112b4:	78fc f7e7 84ff ffed                         .x......

000112bc <b_m16_interleave>:
   112bc:	3100 2931 1b5a 0a75                         .11)Z.u.

000112c4 <water1_gp>:
   112c4:	0100 2e01 4f1c be88 1035 b851 4f49 be88     .....O..5.Q.IO..
   112d4:	4b63 e9c9 067c 670c 4b9e e9c9 54ba 6c6d     cK..|..g.K...Tml
   112e4:	10c6 b851 4fe8 be88 01ff 2e01               ..Q..O......

000112f0 <ib15_gp>:
   112f0:	7100 935b 9d48 4e58 d059 2155 ff6b 0b1d     .q[.H.XNY.U!k...
   11300:	898d 271f 3bff 5921                         ...'.;!Y

00011308 <apple_green_gp>:
   11308:	0000 0000 0102 0101 0104 0101 0107 0101     ................
   11318:	010a 0101 010c 0101 010f 0101 0111 0101     ................
   11328:	0114 0101 0116 0101 0119 0101 011b 0101     ................
   11338:	011e 0102 0120 0102 0123 0103 0125 0103     .... ...#...%...
   11348:	0128 0104 012a 0105 012d 0105 012f 0106     (...*...-.../...
   11358:	0132 0107 0134 0108 0137 0108 0139 0209     2...4...7...9...
   11368:	013c 020a 013e 030b 0141 040c 0143 050d     <...>...A...C...
   11378:	0146 070e 0148 0710 014b 0811 014d 0812     F...H...K...M...
   11388:	0150 0813 0152 0915 0155 0916 0157 0918     P...R...U...W...
   11398:	0182 083a 0185 073c 0187 073f 018a 0642     ..:...<...?...B.
   113a8:	018d 0645 018f 0547 0192 054a 0194 044e     ..E...G...J...N.
   113b8:	0197 0450 0199 0354 019c 0356 019e 025a     ..P...T...V...Z.
   113c8:	01a1 025c 01a3 0160 01a6 0163 01a8 0167     ..\...`...c...g.
   113d8:	01ab 0169 02ad 016d 02b0 0170 03b3 0175     ..i...m...p...u.
   113e8:	03b5 0177 04b8 017c 05ba 0180 05bd 0183     ..w...|.........
   113f8:	06bf 0188 07c2 018b 09c4 0190 0ac7 0193     ................
   11408:	0bc9 0198 0dcc 019c 0fce 01a1 11d1 01a4     ................
   11418:	13d3 01a9 16d6 01ad 18d9 01b2 1bdb 01b8     ................
   11428:	1fde 01bb 23e0 01c1 27e3 01c5 2ce5 01cb     .....#...'...,..
   11438:	31e8 01cf 36ea 01d5 3ced 01d9 43ef 01df     .1...6...<...C..
   11448:	4af2 01e3 52f4 01e9 5bf7 01ed 64f9 01f4     .J...R...[...d..
   11458:	6efc 01f8 79ff 00ff                         .n...y..

00011460 <RedsandCyans_gp>:
   11460:	0f00 8760 284e 4a57 5366 2250 7172 1d47     ..`.N(WJfSP"rqG.
   11470:	967f 193f 3c8f 424f 0fb6 8760 0fdf 8760     ..?..<OB..`...`.
   11480:	0fff 8760                                   ..`.

00011484 <b_gp>:
   11484:	0000 0000 003f ff00 ff7f 0000 ffbf 00ff     ....?...........
   11494:	ffff ffff                                   ....

00011498 <es_pinksplash_07_gp>:
   11498:	e500 0101 f23d 3f04 ff65 ff0c f97f fc51     ....=..?e.....Q.
   114a8:	ff99 eb0b f4c1 4405 e8ff 0501               .......D....

000114b4 <faint_rainbow_gp>:
   114b4:	4300 4700 4502 4101 4805 3b01 4a07 3501     .C.G.E.A.H.;.J.5
   114c4:	4d0a 3001 4e0c 2b01 500f 2601 5311 2201     .M.0.N.+.P.&.S."
   114d4:	5614 1d01 5816 1901 5b19 1601 5e1b 1201     .V...X...[...^..
   114e4:	611e 0f01 6220 0c01 6523 0a01 6825 0701     .a.. b..#e..%h..
   114f4:	6b28 0501 6e2a 0401 712d 0201 752f 0101     (k..*n..-q../u..
   11504:	7832 0101 7935 0101 7d37 0101 803a 0101     2x..5y..7}..:...
   11514:	843c 0103 873f 0105 8b41 0108 8e44 010c     <...?...A...D...
   11524:	9046 010e 9049 0110 924b 0111 944e 0113     F...I...K...N...
   11534:	9450 0116 9653 0117 9855 011a af83 0158     P...S...U.....X.
   11544:	b185 015d b388 0163 b38a 0168 b68d 016c     ..]...c...h...l.
   11554:	b88f 0172 b892 0177 ba94 017d bc97 0183     ..r...w...}.....
   11564:	bc9a 018a be9c 0190 c09f 0197 c0a1 019d     ................
   11574:	c2a4 01a4 c5a6 01ab c7a9 01b2 c7ab 01ba     ................
   11584:	c9ae 01c1 cbb0 02c9 cbb3 02d1 c9b5 02d5     ................
   11594:	c5b8 02d7 beba 02d7 b8bd 02d9 b3bf 02db     ................
   115a4:	adc2 02db a7c4 02dd a1c7 02df 9dc9 02df     ................
   115b4:	98cc 02e1 92cf 02e3 8ed1 02e5 89d4 02e5     ................
   115c4:	84d6 03e7 7ed9 03e9 79db 03e9 76de 03eb     .....~...y...v..
   115d4:	71e0 03ed 6de3 03ed 68e5 03ef 65e8 03f1     .q...m...h...e..
   115e4:	61ea 03f1 5ced 03f4 58ef 03f6 54f2 04f8     .a...\...X...T..
   115f4:	50f4 04f8 4ef7 04fa 4af9 04fc 47fc 04fc     .P...N...J...G..
   11604:	43ff 04ff                                   .C..

00011608 <bhw1_28_gp>:
   11608:	4b00 dd01 fc1e ff49 a930 f200 0077 f295     .K....I.0...w...
   11618:	2baa f200 fcce ff49 4ee8 d60c 00ff f295     .+....I..N......

00011628 <blue_fire_gp>:
   11628:	0000 0000 0040 ff00 00c8 ffff ffff ffff     ....@...........

00011638 <Cyan_Magenta_Blue_gp>:
   11638:	0000 ffff 2a3f ff37 ff7f ff00 2abf ff00     ....?*7......*..
   11648:	00ff ff00                                   ....

0001164c <Fuschia_7_gp>:
   1164c:	2b00 9903 643f 6704 bc7f 4205 a1bf 730b     .+..?d.g...B...s
   1165c:	87ff b614                                   ....

00011660 <bhw2_turq_gp>:
   11660:	0100 5f21 0126 256b 2a4c 2dff ff7f 2dff     ..!_&.k%L*.-...-
   11670:	2ab2 2dff 01d8 256b 01ff 5f21               .*.-..k%..!_

0001167c <es_ocean_breeze_068_gp>:
   1167c:	6400 999c 0133 8963 0165 5444 2368 a88e     .d..3.c.e.DTh#..
   1168c:	00b2 753f 01ff 0a0a                         ..?u....

00011694 <purple_flower_gp>:
   11694:	0000 0000 1442 2d04 7984 ff14 b3b4 ff49     ....B..-.y....I.
   116a4:	ffe4 ffa4 fff1 ffcf ffff ffff               ............

000116b0 <palettes>:
   116b0:	2254 0001 23f8 0001 2634 0001 18cc 0001     T"...#..4&......
   116c0:	1498 0001 223c 0001 167c 0001 1c18 0001     ....<"..|.......
   116d0:	0d04 0001 1910 0001 26a0 0001 185c 0001     .........&..\...
   116e0:	1a88 0001 2684 0001 12f0 0001 164c 0001     .....&......L...
   116f0:	1928 0001 1d84 0001 2298 0001 23a8 0001     (........"...#..
   11700:	2454 0001 1a48 0001 24e4 0001 1aa8 0001     T$..H....$......
   11710:	f874 0000 1824 0001 1c5c 0001 241c 0001     t...$...\....$..
   11720:	2208 0001 1608 0001 1cbc 0001 1a18 0001     ."..............
   11730:	2264 0001 1888 0001 18f4 0001 19f4 0001     d"..............
   11740:	1c28 0001 0ce8 0001 2648 0001 2490 0001     (.......H&...$..
   11750:	23d4 0001 f868 0000 253c 0001 2390 0001     .#..h...<%...#..
   11760:	25c0 0001 1484 0001 21f4 0001 2548 0001     .%.......!..H%..
   11770:	0d28 0001 1dc8 0001 1cf8 0001 2470 0001     (...........p$..
   11780:	26c8 0001 1984 0001 1c8c 0001 18e0 0001     .&..............
   11790:	1840 0001 25dc 0001 2430 0001 1938 0001     @....%..0$..8...
   117a0:	2518 0001 1694 0001 1968 0001 22b4 0001     .%......h...."..
   117b0:	1164 0001 21c8 0001 1ac4 0001 1308 0001     d....!..........
   117c0:	14b4 0001 19e4 0001 1a64 0001 1db8 0001     ........d.......
   117d0:	1cd8 0001 19dc 0001 2280 0001 2290 0001     ........."..."..
   117e0:	1660 0001 1d6c 0001 112c 0001 1144 0001     `...l...,...D...
   117f0:	1c70 0001 21e4 0001 1a2c 0001 12c4 0001     p....!..,.......
   11800:	f77c 0000 1460 0001 1638 0001 26bc 0001     |...`...8....&..
   11810:	1874 0001 1628 0001 1a78 0001 2654 0001     t...(...x...T&..
   11820:	18a4 0001                                   ....

00011824 <BlacK_Red_Magenta_Yellow_gp>:
   11824:	0000 0000 2a2a 0000 ff54 0000 ff7f 2d00     ....**..T......-
   11834:	ffaa ff00 ffd4 2d37 ffff 00ff               ......7-....

00011840 <Split_03_gp>:
   11840:	0000 7b12 003f 1d4b 007f 01b2 1bbf 0130     ...{?.K.......0.
   11850:	a7ff 0201                                   ....

00011854 <sin16_C(unsigned short)::slope>:
   11854:	3031 262c 171f 040e                         10,&....

0001185c <gr65_hult_gp>:
   1185c:	f700 f7b0 ff30 ff88 dc59 e21d 07a0 b252     ....0...Y.....R.
   1186c:	01d8 6d7c 01ff 6d7c                         ..|m..|m

00011874 <cyberpunk_neon_gp>:
   11874:	7100 911c ea3f d900 0a7f c6bd 13bf 7c3e     .q..?.........>|
   11884:	09ff 3318                                   ...3

00011888 <bhw2_10_gp>:
   11888:	0000 000c 993d 70ef 007f 000c 6aa5 02ef     ....=..p.....j..
   11898:	a7c4 47e5 6ae5 02ef 00ff 000c               ...G.j......

000118a4 <blade_runner_2049_gp>:
   118a4:	c900 ad50 ab19 9b39 6832 7323 5e4b 6e21     ..P...9.2h#sK^!n
   118b4:	7f64 ac78 4d7d a98d 74a0 b255 14aa 731b     d.x.}M...tU....s
   118c4:	4bc8 4915 2cff 2a09                         .K.I.,.*

000118cc <es_pinksplash_08_gp>:
   118cc:	7e00 ff0b c57f 1601 d2af ac9d 9ddd 7003     .~.............p
   118dc:	9dff 7003                                   ...p

000118e0 <Secondary_01a_gp>:
   118e0:	0300 ff00 433f 2d07 ff7f 0021 2abf 0173     ....?C.-..!..*s.
   118f0:	00ff 01ff                                   ....

000118f4 <bhw2_14_gp>:
   118f4:	0000 0800 002d 2d00 074f ff0c 2a77 ff37     ....-..-O...w*7.
   11904:	079e ff0c 00d1 2d00 00ff 0800               .......-....

00011910 <es_landscape_33_gp>:
   11910:	0100 0005 2013 0117 a126 0137 e53f 0190     ..... ..&.7.?...
   11920:	2742 4a8e 01ff 0104                         B'.J....

00011928 <es_emerald_dragon_08_gp>:
   11928:	6100 01ff 2f65 0185 0db2 012b 02ff 010a     .a..e/....+.....

00011938 <cloudcolors_gp>:
   11938:	0000 ff00 000f 8b00 006f 8b00 007f ff00     ........o.......
   11948:	008f 8b00 879f face 87af face adbf e6d8     ................
   11958:	c8cf c8c8 addf e6d8 87ef ebce 00ff ffbf     ................

00011968 <fierce_ice_gp>:
   11968:	0000 0000 003b 2d07 0077 ff21 0395 ff52     ....;..-w.!...R.
   11978:	17b4 ff9c 64d9 ffcb ffff ffff               .....d......

00011984 <hallows_gp>:
   11984:	0100 0101 f714 011c ea19 0388 0123 0101     ............#...
   11994:	f730 011c ea33 0388 013d 0101 f74c 011c     0...3...=...L...
   119a4:	f45b 01b0 ea6b 0388 017a 0101 ea8c 0388     [...k...z.......
   119b4:	f499 01b0 f7a8 011c 01ba 0101 f7c4 011c     ................
   119c4:	eacc 0388 01d8 0101 eae5 0388 f7ef 011c     ................
   119d4:	01f9 0101 01ff 0101                         ........

000119dc <GMT_cool_gp>:
   119dc:	0000 ffff ffff ff00                         ........

000119e4 <otis_gp>:
   119e4:	1a00 5901 117f 00c1 00d8 6222 00ff 6222     ...Y......"b.."b

000119f4 <bhw3_21_gp>:
   119f4:	0100 6228 0130 4441 024c 60a1 0068 1951     ..(b0.ADL..`h.Q.
   11a04:	4182 52b6 0099 aa56 11b5 b6cf 11cc b6cf     .A.R..V.........
   11a14:	01ff 2e17                                   ....

00011a18 <bhw2_22_gp>:
   11a18:	0000 0000 e363 0101 f982 5fc7 e39b 0101     ....c......_....
   11a28:	00ff 0000                                   ....

00011a2c <xanidu_2_gp>:
   11a2c:	7600 e2a1 4f35 a201 435e 0701 0184 9c37     .v..5O..^C....7.
   11a3c:	01ad 3d7f 27d3 482d 76ff e2a1               ...=.'-H.v..

00011a48 <Sunset_Real_gp>:
   11a48:	7800 0000 b316 0016 ff33 0068 a755 1216     .x......3.h.U...
   11a58:	6487 6700 10c6 8200 00ff a000               .d.g........

00011a64 <parrot_gp>:
   11a64:	7e00 0100 c572 10a8 c58c 10a8 00d8 2002     .~..r.......... 
   11a74:	00ff 2002                                   ... 

00011a78 <purplefly_gp>:
   11a78:	0000 0000 ef3f 7a00 fcbf 4eff 00ff 0000     ....?..z...N....

00011a88 <gr64_hult_gp>:
   11a88:	0100 6d7c 0142 4f5d 3468 0141 7382 017f     ..|mB.]Oh4A..s..
   11a98:	3496 0141 01c9 4856 00ef 2d37 00ff 2d37     .4A...VH..7-..7-

00011aa8 <BlacK_Blue_Magenta_White_gp>:
   11aa8:	0000 0000 002a 2d00 0054 ff00 2a7f ff00     ....*..-T....*..
   11ab8:	ffaa ff00 ffd4 ff37 ffff ffff               ......7.....

00011ac4 <ultraviolet_mold_gp>:
   11ac4:	0000 0000 0102 0101 0105 0101 0107 0101     ................
   11ad4:	010a 0101 010c 0101 010f 0101 0111 0101     ................
   11ae4:	0114 0101 0116 0101 0119 0101 011b 0101     ................
   11af4:	011e 0101 0120 0102 0123 0102 0125 0202     .... ...#...%...
   11b04:	0228 0203 022a 0203 022d 0303 032f 0304     (...*...-.../...
   11b14:	0332 0404 0335 0504 0437 0505 043a 0605     2...5...7...:...
   11b24:	043c 0705 053f 0706 0541 0806 0544 0907     <...?...A...D...
   11b34:	0546 0a07 0649 0b08 064b 0c08 064e 0d08     F...I...K...N...
   11b44:	0650 0e09 0653 0f09 0655 1009 0783 3034     P...S...U.....40
   11b54:	0785 3339 0788 343f 078a 3443 078d 3245     ..93..?4..C4..E2
   11b64:	078f 3048 0792 2e4a 0794 2b4e 0697 2950     ..H0..J...N+..P)
   11b74:	069a 2554 069c 2257 069f 1f5a 06a1 1c5d     ..T%..W"..Z...].
   11b84:	05a4 1960 05a6 1664 05a9 1267 05ab 0f6b     ..`...d...g...k.
   11b94:	05ae 0d6d 05b0 0a72 04b3 0775 04b5 0579     ..m...r...u...y.
   11ba4:	05b8 057c 07ba 0480 09bd 0483 0cbf 0488     ..|.............
   11bb4:	10c2 048b 14c4 0390 19c7 0393 1ec9 0398     ................
   11bc4:	26cc 039d 2ecf 02a1 37d1 02a6 43d4 02a9     .&.......7...C..
   11bd4:	50d6 02af 5fd9 01b2 71db 01b8 85de 01bb     .P..._...q......
   11be4:	9de0 01c1 b8e3 01c5 c2e5 01b8 c7e8 01a8     ................
   11bf4:	ceea 0198 d2ed 0187 d9ef 0177 def2 0167     ..........w...g.
   11c04:	e5f4 0158 eaf7 0149 f2f9 013b f7fc 012f     ..X...I...;.../.
   11c14:	ffff 0124                                   ..$.

00011c18 <es_ocean_breeze_036_gp>:
   11c18:	0100 0706 0159 6f63 9099 ffd1 00ff 5249     ....Y.co......IR

00011c28 <bhw3_30_gp>:
   11c28:	0100 0104 010c 021c 101c 0b44 123a 1c0b     ..........D.:...
   11c38:	1f4f 301b 0260 220d 1e75 7b56 0287 3e2a     O..0`.."u.V{..*>
   11c48:	4a99 9b80 3cb5 291f a7d6 dfd3 b3ed 4e46     .J...<.)......FN
   11c58:	39ff 0702                                   .9..

00011c5c <Blue_Cyan_Yellow_gp>:
   11c5c:	0000 ff00 003f ff37 007f ffff 2abf 2dff     ....?.7......*.-
   11c6c:	ffff 00ff                                   ....

00011c70 <bhw3_34_gp>:
   11c70:	1d00 cd70 5c30 faff 345b 0cdf 047c 150d     ..p.0\..[4..|...
   11c80:	09b7 0f67 0ad8 0250 26ff 34ff               ..g...P..&.4

00011c8c <sea_treasure_gp>:
   11c8c:	0100 050d 0319 1939 122d acbf 023d 0c1d     ......9.-...=...
   11c9c:	034c 1939 1265 acbf 0a7c 1436 0199 0c1e     L.9.e...|.6.....
   11cac:	0ab2 160e 09d1 2f5d 08e8 1637 01ff 050d     ......]/..7.....

00011cbc <bhw2_23_gp>:
   11cbc:	0000 0000 3942 e9e3 ff60 08ff ff7c ffff     ....B9..`...|...
   11ccc:	ff99 08ff 39bc e9e3 00ff 0000               .....9......

00011cd8 <sunlitwave_gp>:
   11cd8:	0500 5409 252d 6f18 1051 3b05 1870 1401     ...T-%.oQ..;p...
   11ce8:	2296 0201 afc6 0724 d0ed 1068 efff 9ed3     ."....$...h.....

00011cf8 <Tropical_Colors_gp>:
   11cf8:	0100 0104 010e 010a 0115 0013 0123 012a     ............#.*.
   11d08:	0331 014b 383b 0167 d046 0487 d954 0236     1.K.;8g.F...T.6.
   11d18:	e062 010a 7582 030f 308d 0614 2a9b 4d12     b....u...0...*.M
   11d28:	24aa ff11 37c5 f261 50d2 e4ff 2fdc 4ddb     .$...7a..P.../.M
   11d38:	18e1 0abb 18e4 09b4 18e6 08ab 17e8 06a1     ................
   11d48:	17eb 0595 16ed 0488 16f0 027c 15f2 0170     ..........|...p.
   11d58:	15f5 0164 14f7 0158 13fa 014d 13fc 0142     ..d...X...M...B.
   11d68:	12ff 0037                                   ..7.

00011d6c <bhw3_13_gp>:
   11d6c:	0300 4806 0c26 bc32 d96d 0123 f287 0caf     ...H&.2.m.#.....
   11d7c:	a1b2 5720 18ff 6c06                         .. W...l

00011d84 <lava_gp>:
   11d84:	0000 0000 122e 0000 7160 0000 8e6c 0103     ........`q..l...
   11d94:	af77 0111 d592 022c ffae 0452 ffbc 0473     w.....,...R...s.
   11da4:	ffca 049c ffda 04cb ffea 04ff fff4 47ff     ...............G
   11db4:	ffff ffff                                   ....

00011db8 <scoutie_gp>:
   11db8:	ff00 009c 007f 12c3 01d8 2700 01ff 2700     ...........'...'

00011dc8 <Wizzl019_gp>:
   11dc8:	8c00 ac14 8c01 ac14 9402 b814 a003 c810     ................
   11dd8:	9c04 c410 9805 bc10 9406 b410 8c07 ac0c     ................
   11de8:	8808 a40c 8409 9c0c 800a 940c 780b 8c08     .............x..
   11df8:	740c 8808 700d 8008 6c0e 7808 640f 7004     .t...p...l.x.d.p
   11e08:	6010 6804 5c11 6004 5812 5804 5013 5000     .`.h.\.`.X.X.P.P
   11e18:	5414 4c04 5c15 480c 6416 4414 6c17 3c1c     .T.L.\.H.d.D.l.<
   11e28:	7418 3824 7c19 342c 841a 3034 8c1b 283c     .t$8.|,4..40..<(
   11e38:	901c 2440 981d 2048 a01e 1c50 a81f 1458     ..@$..H ..P...X.
   11e48:	b020 1060 b821 0c68 c022 0870 c823 0078      .`.!.h.".p.#.x.
   11e58:	c424 0074 bc25 0070 b426 006c ac27 0064     $.t.%.p.&.l.'.d.
   11e68:	a428 0060 9c29 005c 942a 0058 8c2b 0050     (.`.).\.*.X.+.P.
   11e78:	882c 004c 802d 0048 782e 0044 702f 003c     ,.L.-.H..xD./p<.
   11e88:	6830 0038 6031 0034 5832 0030 5033 0028     0h8.1`4.2X0.3P(.
   11e98:	4c34 0430 4835 083c 4436 0c44 3c37 1450     4L0.5H<.6DD.7<P.
   11ea8:	3838 1858 3439 1c64 303a 206c 283b 2878     88X.94d.:0l ;(x(
   11eb8:	243c 2c80 203d 308c 1c3e 3494 143f 3ca0     <$.,= .0>..4?..<
   11ec8:	1040 40a8 0c41 44b4 0842 48bc 0043 50c8     @..@A..DB..HC..P
   11ed8:	0044 4cc0 0045 48b4 0046 44ac 0047 3ca0     D..LE..HF..DG..<
   11ee8:	0048 3898 0049 348c 004a 3084 004b 2878     H..8I..4J..0K.x(
   11ef8:	004c 2470 004d 2064 004e 1c5c 004f 1450     L.p$M.d N.\.O.P.
   11f08:	0050 1048 0051 0c3c 0052 0834 0053 0028     P.H.Q.<.R.4.S.(.
   11f18:	0054 0c28 0455 1c24 0456 2c24 0857 3c20     T.(.U.$.V.$,W. <
   11f28:	0c58 481c 0c59 581c 105a 6818 145b 7814     X..HY..XZ..h[..x
   11f38:	145c 8414 185d 9410 185e a410 1c5f b40c     \...]...^..._...
   11f48:	2060 c008 2061 d008 2462 e004 2863 f000     ` ..a ..b$..c(..
   11f58:	2864 e800 2465 dc00 2466 d400 2067 c800     d(..e$..f$..g ..
   11f68:	1c68 c000 1c69 b400 186a ac00 146b a000     h...i...j...k...
   11f78:	146c 9800 106d 8c00 106e 8400 0c6f 7800     l...m...n...o..x
   11f88:	0870 7000 0871 6400 0472 5c00 0073 5000     p..pq..dr..\s..P
   11f98:	0c74 5400 1875 5c00 2476 6400 3077 6c00     t..Tu..\v$.dw0.l
   11fa8:	3c78 7400 4879 7c00 547a 8400 647b 8c00     x<.tyH.|zT..{d..
   11fb8:	707c 9000 7c7d 9800 887e a000 947f a800     |p..}|..~.......
   11fc8:	a080 b000 ac81 b800 b882 c000 c883 c800     ................
   11fd8:	c084 c000 b485 b400 ac86 ac00 a087 a000     ................
   11fe8:	9888 9800 8c89 8c00 848a 8400 788b 7800     .............x.x
   11ff8:	708c 7000 648d 6400 5c8e 5c00 508f 5000     .p.p.d.d.\.\.P.P
   12008:	4890 4800 3c91 3c00 3492 3400 2893 2800     .H.H.<.<.4.4.(.(
   12018:	3494 2800 4095 2800 4c96 2800 5897 2800     .4.(.@.(.L.(.X.(
   12028:	6498 2800 7099 2800 7c9a 2800 8c9b 2400     .d.(.p.(.|.(...$
   12038:	989c 2400 a49d 2400 b09e 2400 bc9f 2400     ...$...$...$...$
   12048:	c8a0 2400 d4a1 2400 e0a2 2400 f0a3 2000     ...$...$...$... 
   12058:	e8a4 2000 dca5 1c00 d4a6 1c00 c8a7 1800     ... ............
   12068:	c0a8 1800 b4a9 1400 acaa 1400 a0ab 1000     ................
   12078:	98ac 1000 8cad 0c00 84ae 0c00 78af 0800     .............x..
   12088:	70b0 0800 64b1 0400 5cb2 0400 50b3 0000     .p...d...\...P..
   12098:	58b4 0008 60b5 0010 68b6 0018 74b7 0020     .X...`...h...t .
   120a8:	7cb8 0028 84b9 0030 8cba 0038 98bb 0040     .|(...0...8...@.
   120b8:	a0bc 0048 a8bd 0050 b0be 0058 bcbf 0060     ..H...P...X...`.
   120c8:	c4c0 0068 ccc1 0070 d4c2 0078 e0c3 0080     ..h...p...x.....
   120d8:	d8c4 007c ccc5 0074 c0c6 0070 b4c7 0068     ..|...t...p...h.
   120e8:	a8c8 0064 a0c9 005c 94ca 0058 88cb 0050     ..d...\...X...P.
   120f8:	7ccc 0048 70cd 0044 68ce 003c 5ccf 0038     .|H..pD..h<..\8.
   12108:	50d0 0030 44d1 002c 38d2 0024 40d3 0824     .P0..D,..8$..@$.
   12118:	4cd4 1424 58d5 1c24 64d6 2820 70d7 3020     .L$..X$..d (.p 0
   12128:	7cd8 3c20 88d9 4420 94da 501c 9cdb 581c     .| <.. D...P...X
   12138:	a8dc 641c b4dd 6c1c c0de 7818 ccdf 8018     ...d...l...x....
   12148:	d8e0 8c18 e4e1 9418 f0e2 a014 e4e3 9814     ................
   12158:	d4e4 8c14 c4e5 8418 b4e6 7818 a8e7 7018     ...........x...p
   12168:	98e8 641c 88e9 5c1c 78ea 5020 6ceb 4820     ...d...\.x P.l H
   12178:	5cec 3c20 4ced 3424 3cee 2824 30ef 2024     .\ <.L$4.<$(.0$ 
   12188:	20f0 1428 10f1 0c28 00f2 002c 08f3 0c2c     . (...(...,...,.
   12198:	14f4 182c 1cf5 2428 28f6 3028 30f7 3c24     ..,...($.((0.0$<
   121a8:	3cf8 4824 44f9 5420 50fa 6420 58fb 7020     .<$H.D T.P d.X p
   121b8:	64fc 7c1c 6cfd 881c 78fe 9418 80ff a018     .d.|.l...x......

000121c8 <green_gp>:
   121c8:	0000 0000 003f 0011 007e 0052 009b 0080     ....?...~.R.....
   121d8:	00b8 00ba 2adb 2ddb ffff ffff               .....*.-....

000121e4 <es_emerald_dragon_09_gp>:
   121e4:	0100 0101 014c 0102 0a99 012f 61ff 01ff     ....L...../..a..

000121f4 <es_emerald_dragon_01_gp>:
   121f4:	0100 0101 014f 0713 0182 193b 1ce5 ffff     ....O.....;.....
   12204:	1cff ffff                                   ....

00012208 <bhw1_26_gp>:
   12208:	6b00 cd01 ff23 ffff 6b49 cd01 0a6b d295     .k..#...Ik..k...
   12218:	ff82 ffff 0a99 d295 1baa 77af 35c6 38cb     ...........w.5.8
   12228:	84cf 87e5 ffdb ffff 84e7 87e5 35fc 38cb     .............5.8
   12238:	35ff 38cb                                   .5.8

0001223c <Coral_reef_gp>:
   1223c:	2800 c5c7 0a32 9b98 0160 786f 2b60 a27f     .(..2...`.ox`+..
   1224c:	0a8b 6f49 01ff 4722                         ..Io.."G

00012254 <ib_jul01_gp>:
   12254:	c200 0101 015e 121d 3984 1c83 71ff 0101     ....^....9...q..

00012264 <bhw2_49_gp>:
   12264:	0900 0f0f 0028 2d37 0956 0f0f 1d82 3e29     ....(.7-V.....)>
   12274:	09aa 0f0f 40d3 c708 06ff 1601               .....@......

00012280 <bhw1_sunconure_gp>:
   12280:	1400 0ddf e8a0 0141 e8fc 0105 e8ff 0105     ......A.........

00012290 <bhw1_05_gp>:
   12290:	0100 35dd 49ff b203                         ...5.I..

00012298 <fire_gp>:
   12298:	0100 0001 204c 0005 c092 0018 dcc5 0569     ....L ........i.
   122a8:	fcf0 1fff fcfa 6fff ffff ffff               .......o....

000122b4 <blueice_gp>:
   122b4:	0000 0000 011f 0f02 013f 590a 0142 5d0c     ........?..YB..]
   122c4:	0144 600d 0147 640f 0149 6910 014c 6c12     D..`G..dI..iL..l
   122d4:	014e 7014 0151 7316 0153 7817 0156 7b1a     N..pQ..sS..xV..{
   122e4:	0158 801d 015b 841f 015d 8921 0160 8c24     X...[...].!.`.$.
   122f4:	0162 9128 0165 972b 0167 9b2e 016a a032     b.(.e.+.g...j.2.
   12304:	016c a436 016f a638 0171 aa3c 0174 ac41     l.6.o.8.q.<.t.A.
   12314:	0176 ae45 0179 b248 017b b44d 017e b651     v.E.y.H.{.M.~.Q.
   12324:	0180 b856 0183 bc5b 0186 be60 0188 c065     ..V...[...`...e.
   12334:	018b c56b 018d c770 0190 c976 0192 cb7c     ..k...p...v...|.
   12344:	0195 cf82 0197 d28a 019a d490 019c d697     ................
   12354:	019f db9f 01a1 dda6 01a4 dfad 01a6 e4b6     ................
   12364:	01a9 e6bd 01ab e9c7 01ae ebcf 01b0 f0d9     ................
   12374:	01b3 f2e1 01b5 f5eb 02b8 f7f6 02ba f7fc     ................
   12384:	02bd f2ff 3dde f7ff ffff ffff               .....=......

00012390 <standard_gp>:
   12390:	0000 0000 0a54 ff11 0054 0011 0aa9 0cff     ....T...T.......
   123a0:	0aa9 0000 ffff 0c11                         ........

000123a8 <Colorfull_gp>:
   123a8:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
   123b8:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
   123c8:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

000123d4 <Ribbon_Colors_gp>:
   123d4:	e300 0902 c21f 0933 a73f 08af 1b5f 4ed1     ......3.?..._..N
   123e4:	017f f7f8 019f a64e 01bf 6605 2adf 124f     ......N....f.*O.
   123f4:	ffff 00ff                                   ....

000123f8 <rgi_15_gp>:
   123f8:	0400 1f01 371f 1001 c53f 0703 3b5f 1102     .....7..?..._;..
   12408:	067f 2202 279f 2106 70bf 200d 38df 2309     ...".'.!.p. .8.#
   12418:	16ff 2606                                   ...&

0001241c <bhw1_greeny_gp>:
   1241c:	0000 0000 0727 0837 2a63 2dff 0799 0837     ....'.7.c*.-..7.
   1242c:	00ff 0000                                   ....

00012430 <rainbow_gp>:
   12430:	ff00 0000 ab20 0055 ab40 00ab 0060 00ff     .... .U.@...`...
   12440:	0080 55ab 00a0 ff00 55c0 ab00 abe0 5500     ...U.....U.....U
   12450:	ffff 0000                                   ....

00012454 <Magenta_Evening_gp>:
   12454:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
   12464:	fc4c 4501 7b6c 3302 2eff 2309               L..El{.3...#

00012470 <slope_gp>:
   12470:	ff00 ffff ff05 00ff 000e 00ff 001c ffff     ................
   12480:	002a ff00 ff54 ff00 ff8d 0000 00ff 0000     *...T...........

00012490 <alarm_p4_0_2_gp>:
   12490:	e300 dfff ff0c 0424 ff19 0102 ff26 1001     ......$.....&...
   124a0:	ff33 6201 ff3f e601 8c4c ff01 3f59 ff01     3..b?...L...Y?..
   124b0:	1866 ff01 0572 ff01 017f ff01 018c ff04     f...r...........
   124c0:	0199 ff10 01a5 ff24 01b2 ff3e 01bf ff5f     ......$...>..._.
   124d0:	01cc ff83 01d8 ffad 01e5 ffdd 01f2 ebff     ................
   124e0:	01ff baff                                   ....

000124e4 <es_autumn_19_gp>:
   124e4:	1a00 0101 4333 0104 7654 010e 8968 3498     ....3C..Tv..h..4
   124f4:	7170 0141 857a 3b95 897c 3498 7187 0141     pqA.z..;|..4.qA.
   12504:	8b8e 2e9a 71a3 010d 37cc 0103 11f9 0101     .....q...7......
   12514:	11ff 0101                                   ....

00012518 <cequal_gp>:
   12518:	0100 0101 0124 0103 014c 7b29 3b70 fc01     ....$...L.){p;..
   12528:	757f b401 efac 0151 fcc3 01b4 fcde 93fa     .u....Q.........
   12538:	fcff fcfc                                   ....

0001253c <Fire_1_gp>:
   1253c:	ff00 0000 ff7f 0037 ffff 00ff               ......7.....

00012548 <froth316_gp>:
   12548:	f700 0000 f711 0000 9d11 0000 9d21 0000     ............!...
   12558:	5621 0000 5633 0000 2733 0000 2744 0000     !V..3V..3'..D'..
   12568:	0c44 0000 0c54 0000 0054 00f8 0066 00f8     D...T...T...f...
   12578:	0066 00a9 0077 00a9 0077 0065 0087 0065     f...w...w.e...e.
   12588:	0087 0034 0099 0034 0099 0013 00aa 0013     ..4...4.........
   12598:	00aa f700 00ba f700 00ba a000 00cc a000     ................
   125a8:	00cc 5900 00dd 5900 00dd 2a00 00ed 2a00     ...Y...Y...*...*
   125b8:	00ed 0e00 00ff 0e00                         ........

000125c0 <a_gp>:
   125c0:	0000 0000 001f 0037 003f 2dff ff7f ff00     ......7.?..-....
   125d0:	ffa3 2d00 ffc4 0000 ffff 00ff               ...-........

000125dc <GMT_seafloor_gp>:
   125dc:	1900 6d00 1c0a 7700 2015 7f00 231f 8c00     ...m...w. ...#..
   125ec:	1b2a 9101 1435 9701 0e4a 9c04 0954 a409     *...5...J...T...
   125fc:	055f aa0f 026a b018 0174 b623 018a bc31     _...j...t.#...1.
   1260c:	0094 c542 019f cb4f 03aa d25d 0ab4 d86d     ..B...O...]...m.
   1261c:	18bf df80 2bd4 e695 48df f0ad 70e9 f7c5     .....+...H...p..
   1262c:	a3f4 ffe1 dcff fff8                         ........

00012634 <Analogous_1_gp>:
   12634:	0300 ff00 173f ff00 437f ff00 8ebf 2d00     ....?....C.....-
   12644:	ffff 0000                                   ....

00012648 <cw1_029_gp>:
   12648:	0c00 d250 ff7f 13eb e0ff 0f42               ..P.......B.

00012654 <rainbow2_gp>:
   12654:	7e00 8e01 ab19 1a01 e030 0109 ed47 018a     .~......0...G...
   12664:	345e 01ad 0175 01c9 018c 36d3 01a3 a87c     ^4..u......6..|.
   12674:	01ba 9508 0cd1 9701 0ce8 9701 abff be01     ................

00012684 <GMT_drywet_gp>:
   12684:	2f00 021e d52a 1893 6754 34db 037f cfdb     ./..*...Tg.4....
   12694:	01aa d630 01d4 6f01 01ff 2107               ..0....o...!

000126a0 <rainbowsherbet_gp>:
   126a0:	ff00 0421 ff2b 1944 ff56 1907 ff7f 6752     ..!.+.D.V.....Rg
   126b0:	ffaa f2ff 2ad1 16ff 57ff 41ff               .....*...W.A

000126bc <Complementary_01a_gp>:
   126bc:	0000 ff21 2a7f 2d21 ffff 0021               ..!..*!-..!.

000126c8 <ofaurora_gp>:
   126c8:	ff00 f2f1 ed0a 0901 2a0f 0201 0116 0101     .........*......
   126d8:	ed23 0901 ff30 f2f1 ef3a 0139 0142 0101     #...0...:.9.B...
   126e8:	ef4c 0139 ff54 f2f1 f25e 01d9 0165 0101     L.9.T...^...e...
   126f8:	f26d 01d9 ff77 f2f1 097f 2490 0184 0101     m...w......$....
   12708:	098c 2490 ff93 f2f1 019e ba9c 01a8 0101     ...$............
   12718:	01b2 ba9c ffba f2f1 10c6 ff0d 01ce 0101     ................
   12728:	10d8 ff0d ffe0 f2f1 4eea 9c01 0eed 1e01     .........N......
   12738:	01ef 0101 4ef4 9c01 ffff f2f1               .....N......

00012744 <p>:
   12744:	a097 5b89 0f5a 0d83 5fc9 3560 e9c2 e107     ...[Z...._`5....
   12754:	248c 1e67 8e45 6308 f025 0a15 be17 9406     .$g.E..c%.......
   12764:	78f7 4bea 1a00 3ec5 fc5e cbdb 2375 200b     .x.K...>^...u#. 
   12774:	b139 5821 95ed 5738 14ae 887d a8ab af44     9.!X..8W..}...D.
   12784:	a54a 8647 308b a61b 924d e79e 6f53 7ae5     J.G..0..M...So.z
   12794:	d33c e685 69dc 295c 2e37 28f5 66f4 368f     <....i\)7..(.f.6
   127a4:	1941 a13f d801 4950 4cd1 bb84 59d0 a912     A.?...PI.L...Y..
   127b4:	c4c8 8287 bc74 569f 64a4 c66d baad 4003     ....t..V.dm....@
   127c4:	d934 fae2 7b7c ca05 9326 7e76 52ff d455     4...|{..&.v~.RU.
   127d4:	cecf e33b 102f 113a bdb6 2a1c b7df d5aa     ..;./.:....*....
   127e4:	f877 0298 9a2c 46a3 99dd 9b65 2ba7 09ac     w...,..F..e..+..
   127f4:	1681 fd27 6213 6e6c 714f e8e0 b9b2 6870     ..'..blnOq....ph
   12804:	f6da e461 22fb c1f2 d2ee 0c90 b3bf f1a2     ..a.."..........
   12814:	3351 eb91 0ef9 6bef c031 1fd6 c7b5 9d6a     Q3.....k1.....j.
   12824:	54b8 b0cc 7973 2d32 047f fe96 ec8a 5dcd     .T..sy2-.......]
   12834:	72de 1d43 4818 8df3 c380 424e 3dd7 b49c     .rC..H....NB.=..
   12844:	ff97 ffff 4d56 5044 5f45 0000 323a 003a     ....VMDPE_..:2:.
   12854:	003a 0000 565f 444d 4550 0000 4d56 5044     :..._VMDPE..VMDP
   12864:	5f43 0000 565f 444d 4350 0000 7245 6f72     C_.._VMDPC..Erro
   12874:	3a72 4120 7474 6d65 7470 7420 206f 6573     r: Attempt to se
   12884:	2074 2061 6572 6461 6f2d 6c6e 2079 6176     t a read-only va
   12894:	6972 6261 656c 6f20 2072 6164 6174 7420     riable or data t
   128a4:	7079 2065 6f6e 2074 7573 7070 726f 6574     ype not supporte
   128b4:	0d64 000a                                   d...

000128b8 <pin2sc1a>:
   128b8:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
   128c8:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
   128d8:	ffff 1300 9303 921a ff17 ffff               ............

000128e4 <digital_pin_to_info_PGM>:
   128e4:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
   128f4:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
   12904:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
   12914:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
   12924:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
   12934:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
   12944:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
   12954:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
   12964:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
   12974:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
   12984:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
   12994:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
   129a4:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
   129b4:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
   129c4:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
   129d4:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
   129e4:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
   129f4:	0a0d ffff                                   ....

000129f8 <vtable for usb_serial_class>:
	...
   12a00:	e055 0000 e04d 0000 e049 0000 e045 0000     U...M...I...E...
   12a10:	e041 0000 e03d 0000 e039 0000 e035 0000     A...=...9...5...

00012a20 <usb_endpoint_config_table>:
   12a20:	1500 1519                                   ....

00012a24 <usb_descriptor_list>:
   12a24:	0100 0000 87a0 1fff 0012 0000 0200 0000     ................
   12a34:	87cc 1fff 0043 0000 0300 0000 8828 1fff     ....C.......(...
   12a44:	0000 0000 0301 0409 87b4 1fff 0000 0000     ................
   12a54:	0302 0409 8810 1fff 0000 0000 0303 0409     ................
   12a64:	882c 1fff 0000 0000 0000 0000 0000 0000     ,...............
   12a74:	0000 0000                                   ....

00012a78 <_init>:
   12a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a7a:	bf00      	nop
   12a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12a7e:	bc08      	pop	{r3}
   12a80:	469e      	mov	lr, r3
   12a82:	4770      	bx	lr

00012a84 <__init_array_start>:
   12a84:	0000f71d 	.word	0x0000f71d

00012a88 <__frame_dummy_init_array_entry>:
   12a88:	00000435 0000b44d 0000bf2d 0000c5e9     5...M...-.......

Disassembly of section .fini:

00012a98 <_fini>:
   12a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a9a:	bf00      	nop
