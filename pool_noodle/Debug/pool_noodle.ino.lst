
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 b1 c3 00 00 69 c3 00 00     ... ........i...
      10:	69 c3 00 00 69 c3 00 00 69 c3 00 00 69 c3 00 00     i...i...i...i...
      20:	69 c3 00 00 69 c3 00 00 69 c3 00 00 b1 c3 00 00     i...i...i.......
      30:	b1 c3 00 00 69 c3 00 00 dd d7 00 00 e1 d8 00 00     ....i...........
      40:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      50:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      60:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      70:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      80:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      90:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      a0:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      b0:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      c0:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      d0:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      e0:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
      f0:	b1 c3 00 00 39 dc 00 00 b1 c3 00 00 65 dd 00 00     ....9.......e...
     100:	b1 c3 00 00 91 de 00 00 b1 c3 00 00 b1 c3 00 00     ................
     110:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
     120:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
     130:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
     140:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
     150:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
     160:	b1 c3 00 00 f9 c7 00 00 b1 c3 00 00 b1 c3 00 00     ................
     170:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
     180:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
     190:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
     1a0:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00 b1 c3 00 00     ................
     1b0:	b1 c3 00 00 b1 c3 00 00 b1 c3 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00c f8f2 	bl	c3b8 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00c f946 	bl	c564 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00c f8b7 	bl	c454 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00c f8a8 	bl	c454 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00e fdaa 	bl	ee60 <__libc_init_array>

	startup_late_hook();
     30c:	f00c f85a 	bl	c3c4 <startup_late_hook>
	main();
     310:	f00d faee 	bl	d8f0 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c74 	.word	0x1fff8c74
     33c:	0001243c 	.word	0x0001243c
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c74 	.word	0x1fff8c74
     348:	1fffb450 	.word	0x1fffb450
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e442899 	.word	0x5e442899
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c74 	.word	0x1fff8c74
     42c:	00000000 	.word	0x00000000
     430:	00012440 	.word	0x00012440

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c78 	.word	0x1fff8c78
     460:	00012440 	.word	0x00012440
     464:	1fff8c74 	.word	0x1fff8c74
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <waveit(LEDStruct&) [clone .part.11]>:
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
	}
}

void waveit(LEDStruct& leds) {                                                          // Shifting pixels from the center to the left and right.
     490:	b4f0      	push	{r4, r5, r6, r7}
     492:	4603      	mov	r3, r0
     494:	f100 076f 	add.w	r7, r0, #111	; 0x6f
     498:	4602      	mov	r2, r0
     49a:	4601      	mov	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     49c:	f891 60db 	ldrb.w	r6, [r1, #219]	; 0xdb
        g = rhs.g;
     4a0:	f891 50dc 	ldrb.w	r5, [r1, #220]	; 0xdc
        b = rhs.b;
     4a4:	f891 40dd 	ldrb.w	r4, [r1, #221]	; 0xdd
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     4a8:	f881 60de 	strb.w	r6, [r1, #222]	; 0xde
        g = rhs.g;
     4ac:	f881 50df 	strb.w	r5, [r1, #223]	; 0xdf
        b = rhs.b;
     4b0:	f881 40e0 	strb.w	r4, [r1, #224]	; 0xe0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     4b4:	f892 60e4 	ldrb.w	r6, [r2, #228]	; 0xe4
        g = rhs.g;
     4b8:	f892 50e5 	ldrb.w	r5, [r2, #229]	; 0xe5
        b = rhs.b;
     4bc:	f892 40e6 	ldrb.w	r4, [r2, #230]	; 0xe6
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     4c0:	f882 60e1 	strb.w	r6, [r2, #225]	; 0xe1
        g = rhs.g;
     4c4:	f882 50e2 	strb.w	r5, [r2, #226]	; 0xe2
        b = rhs.b;
     4c8:	f882 40e3 	strb.w	r4, [r2, #227]	; 0xe3
     4cc:	3203      	adds	r2, #3
	if (!leds.use_full_range) {
		for (int i = ONE_SIDE - 1; i > ONE_SIDE / 2; i--) {                             // Move to the right.
     4ce:	42ba      	cmp	r2, r7
     4d0:	f1a1 0103 	sub.w	r1, r1, #3
     4d4:	d1e2      	bne.n	49c <waveit(LEDStruct&) [clone .part.11]+0xc>
     4d6:	1cc2      	adds	r2, r0, #3
     4d8:	386f      	subs	r0, #111	; 0x6f
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     4da:	7815      	ldrb	r5, [r2, #0]
        g = rhs.g;
     4dc:	7854      	ldrb	r4, [r2, #1]
        b = rhs.b;
     4de:	7891      	ldrb	r1, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     4e0:	f802 5c03 	strb.w	r5, [r2, #-3]
        g = rhs.g;
     4e4:	f802 4c02 	strb.w	r4, [r2, #-2]
        b = rhs.b;
     4e8:	f802 1c01 	strb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     4ec:	f893 51bc 	ldrb.w	r5, [r3, #444]	; 0x1bc
        g = rhs.g;
     4f0:	f893 41bd 	ldrb.w	r4, [r3, #445]	; 0x1bd
        b = rhs.b;
     4f4:	f893 11be 	ldrb.w	r1, [r3, #446]	; 0x1be
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     4f8:	f883 51bf 	strb.w	r5, [r3, #447]	; 0x1bf
        g = rhs.g;
     4fc:	f883 41c0 	strb.w	r4, [r3, #448]	; 0x1c0
        b = rhs.b;
     500:	f883 11c1 	strb.w	r1, [r3, #449]	; 0x1c1
     504:	3b03      	subs	r3, #3
			leds.led_data[i] = leds.led_data[i - 1];
			leds.led_data[NUM_LEDS - (i + 1)] = leds.led_data[NUM_LEDS - i];
		}
		for (int i = 0; i < ONE_SIDE / 2; i++) {                                        // Move to the left.
     506:	4283      	cmp	r3, r0
     508:	f102 0203 	add.w	r2, r2, #3
     50c:	d1e5      	bne.n	4da <waveit(LEDStruct&) [clone .part.11]+0x4a>
			leds.led_data[i] = leds.led_data[i + 1];
			leds.led_data[NUM_LEDS - 1 - i] = leds.led_data[NUM_LEDS - 1 - i - 1];
		}
	}
} // waveit()
     50e:	bcf0      	pop	{r4, r5, r6, r7}
     510:	4770      	bx	lr
     512:	bf00      	nop

00000514 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.17]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     514:	3980      	subs	r1, #128	; 0x80
     516:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     518:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     51a:	004b      	lsls	r3, r1, #1
     51c:	7844      	ldrb	r4, [r0, #1]
     51e:	7882      	ldrb	r2, [r0, #2]
     520:	b2c9      	uxtb	r1, r1
     522:	b2db      	uxtb	r3, r3
     524:	1a61      	subs	r1, r4, r1
     526:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     528:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     52c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     530:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     532:	7083      	strb	r3, [r0, #2]
}
     534:	bc10      	pop	{r4}
     536:	4770      	bx	lr

00000538 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     538:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     53a:	4c1d      	ldr	r4, [pc, #116]	; (5b0 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x78>)
     53c:	b083      	sub	sp, #12
     53e:	6824      	ldr	r4, [r4, #0]
     540:	9401      	str	r4, [sp, #4]
	return ret;
     542:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     544:	28ff      	cmp	r0, #255	; 0xff
     546:	bf98      	it	ls
     548:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     54a:	f44f 748c 	mov.w	r4, #280	; 0x118
     54e:	eba5 0303 	sub.w	r3, r5, r3
     552:	fb04 f303 	mul.w	r3, r4, r3
     556:	bf98      	it	ls
     558:	b280      	uxthls	r0, r0
     55a:	fb00 f003 	mul.w	r0, r0, r3
     55e:	f3c0 400e 	ubfx	r0, r0, #16, #15
     562:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     566:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     568:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     56c:	d503      	bpl.n	576 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x3e>
     56e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     572:	3307      	adds	r3, #7
     574:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     576:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     578:	4e0e      	ldr	r6, [pc, #56]	; (5b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     57a:	4c0f      	ldr	r4, [pc, #60]	; (5b8 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     57c:	5d76      	ldrb	r6, [r6, r5]
     57e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     582:	f3c3 0546 	ubfx	r5, r3, #1, #7
     586:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     58a:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     58c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     58e:	bf4a      	itet	mi
     590:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     592:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     594:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     596:	1a52      	subs	r2, r2, r1
     598:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     59c:	b292      	uxth	r2, r2
     59e:	b2a3      	uxth	r3, r4
     5a0:	fb02 3303 	mla	r3, r2, r3, r3
     5a4:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     5a8:	b280      	uxth	r0, r0
     5aa:	b003      	add	sp, #12
     5ac:	bc70      	pop	{r4, r5, r6}
     5ae:	4770      	bx	lr
     5b0:	1fffb18c 	.word	0x1fffb18c
     5b4:	000111f8 	.word	0x000111f8
     5b8:	00010ac0 	.word	0x00010ac0

000005bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     5bc:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5be:	4c1e      	ldr	r4, [pc, #120]	; (638 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x7c>)
     5c0:	b083      	sub	sp, #12
     5c2:	6824      	ldr	r4, [r4, #0]
     5c4:	9401      	str	r4, [sp, #4]
	return ret;
     5c6:	9d01      	ldr	r5, [sp, #4]
     5c8:	28ff      	cmp	r0, #255	; 0xff
     5ca:	bf98      	it	ls
     5cc:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     5ce:	f44f 748c 	mov.w	r4, #280	; 0x118
     5d2:	eba5 0303 	sub.w	r3, r5, r3
     5d6:	fb04 f303 	mul.w	r3, r4, r3
     5da:	bf98      	it	ls
     5dc:	b280      	uxthls	r0, r0
     5de:	fb00 f003 	mul.w	r0, r0, r3
     5e2:	f3c0 400e 	ubfx	r0, r0, #16, #15
     5e6:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     5ea:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     5ec:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     5ee:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     5f2:	d503      	bpl.n	5fc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x40>
     5f4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     5f8:	3307      	adds	r3, #7
     5fa:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5fc:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     5fe:	4e0f      	ldr	r6, [pc, #60]	; (63c <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     600:	4c0f      	ldr	r4, [pc, #60]	; (640 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     602:	5d76      	ldrb	r6, [r6, r5]
     604:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     608:	f3c3 0546 	ubfx	r5, r3, #1, #7
     60c:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     610:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     612:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     614:	bf4a      	itet	mi
     616:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     618:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     61a:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     61c:	1a52      	subs	r2, r2, r1
     61e:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     622:	b292      	uxth	r2, r2
     624:	b2a3      	uxth	r3, r4
     626:	fb02 3303 	mla	r3, r2, r3, r3
     62a:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     62e:	b280      	uxth	r0, r0
     630:	b003      	add	sp, #12
     632:	bc70      	pop	{r4, r5, r6}
     634:	4770      	bx	lr
     636:	bf00      	nop
     638:	1fffb18c 	.word	0x1fffb18c
     63c:	000111f8 	.word	0x000111f8
     640:	00010ac0 	.word	0x00010ac0

00000644 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     644:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     646:	4b18      	ldr	r3, [pc, #96]	; (6a8 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x64>)
     648:	b083      	sub	sp, #12
     64a:	681b      	ldr	r3, [r3, #0]
     64c:	9301      	str	r3, [sp, #4]
	return ret;
     64e:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     650:	f44f 738c 	mov.w	r3, #280	; 0x118
     654:	fb03 f606 	mul.w	r6, r3, r6
     658:	fb00 f006 	mul.w	r0, r0, r6
     65c:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     65e:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     660:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     664:	d503      	bpl.n	66e <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x2a>
     666:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     66a:	3307      	adds	r3, #7
     66c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     66e:	0a18      	lsrs	r0, r3, #8
     670:	4d0e      	ldr	r5, [pc, #56]	; (6ac <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x68>)
    uint8_t  m   = slope[section];
     672:	4c0f      	ldr	r4, [pc, #60]	; (6b0 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     674:	5c24      	ldrb	r4, [r4, r0]
     676:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     67a:	f3c3 0546 	ubfx	r5, r3, #1, #7
     67e:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     682:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     684:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     686:	bf48      	it	mi
     688:	4264      	negmi	r4, r4
     68a:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     68c:	1a53      	subs	r3, r2, r1
     68e:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     692:	b29a      	uxth	r2, r3
     694:	b2a3      	uxth	r3, r4
     696:	fb02 3303 	mla	r3, r2, r3, r3
     69a:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     69e:	b280      	uxth	r0, r0
     6a0:	b003      	add	sp, #12
     6a2:	bc70      	pop	{r4, r5, r6}
     6a4:	4770      	bx	lr
     6a6:	bf00      	nop
     6a8:	1fffb18c 	.word	0x1fffb18c
     6ac:	00010ac0 	.word	0x00010ac0
     6b0:	000111f8 	.word	0x000111f8

000006b4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     6b4:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     6b6:	2101      	movs	r1, #1
     6b8:	4604      	mov	r4, r0
     6ba:	200e      	movs	r0, #14
     6bc:	f00b fedc 	bl	c478 <pinMode>
     6c0:	2007      	movs	r0, #7
     6c2:	2101      	movs	r1, #1
     6c4:	f00b fed8 	bl	c478 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     6c8:	69a0      	ldr	r0, [r4, #24]
     6ca:	b158      	cbz	r0, 6e4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     6cc:	6803      	ldr	r3, [r0, #0]
     6ce:	4a07      	ldr	r2, [pc, #28]	; (6ec <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     6d0:	685b      	ldr	r3, [r3, #4]
     6d2:	4293      	cmp	r3, r2
     6d4:	d107      	bne.n	6e6 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     6d6:	6842      	ldr	r2, [r0, #4]
     6d8:	7b01      	ldrb	r1, [r0, #12]
     6da:	7813      	ldrb	r3, [r2, #0]
     6dc:	ea23 0301 	bic.w	r3, r3, r1
     6e0:	7013      	strb	r3, [r2, #0]
     6e2:	bd10      	pop	{r4, pc}
     6e4:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     6e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     6ea:	4718      	bx	r3
     6ec:	00000481 	.word	0x00000481

000006f0 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6f2:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     6f4:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     6f6:	6805      	ldr	r5, [r0, #0]
     6f8:	f88d 3004 	strb.w	r3, [sp, #4]
     6fc:	f88d 3005 	strb.w	r3, [sp, #5]
     700:	f88d 3006 	strb.w	r3, [sp, #6]
     704:	682e      	ldr	r6, [r5, #0]
     706:	4a37      	ldr	r2, [pc, #220]	; (7e4 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     708:	f88d 3008 	strb.w	r3, [sp, #8]
     70c:	4296      	cmp	r6, r2
     70e:	f88d 3009 	strb.w	r3, [sp, #9]
     712:	f88d 300a 	strb.w	r3, [sp, #10]
     716:	d15f      	bne.n	7d8 <CLEDController::clearLeds(int)+0xe8>
     718:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     71a:	9104      	str	r1, [sp, #16]
     71c:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     71e:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     720:	a801      	add	r0, sp, #4
     722:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     724:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     728:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     72c:	f88d 3020 	strb.w	r3, [sp, #32]
     730:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     732:	d015      	beq.n	760 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     734:	f88d 301d 	strb.w	r3, [sp, #29]
     738:	f88d 301c 	strb.w	r3, [sp, #28]
     73c:	f88d 301b 	strb.w	r3, [sp, #27]
     740:	f88d 301a 	strb.w	r3, [sp, #26]
     744:	f88d 3019 	strb.w	r3, [sp, #25]
     748:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     74c:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     74e:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     750:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     754:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     756:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     758:	a903      	add	r1, sp, #12
     75a:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     75c:	b00b      	add	sp, #44	; 0x2c
     75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     760:	4a21      	ldr	r2, [pc, #132]	; (7e8 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     762:	7813      	ldrb	r3, [r2, #0]
     764:	3301      	adds	r3, #1
     766:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     76a:	f013 0f01 	tst.w	r3, #1
     76e:	bf14      	ite	ne
     770:	2180      	movne	r1, #128	; 0x80
     772:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     774:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     776:	079a      	lsls	r2, r3, #30
     778:	bf44      	itt	mi
     77a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     77e:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     780:	075b      	lsls	r3, r3, #29
     782:	bf48      	it	mi
     784:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     788:	3110      	adds	r1, #16
     78a:	2200      	movs	r2, #0
     78c:	b2c9      	uxtb	r1, r1
     78e:	f10d 031b 	add.w	r3, sp, #27
     792:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     796:	f44f 7e80 	mov.w	lr, #256	; 0x100
     79a:	b1aa      	cbz	r2, 7c8 <CLEDController::clearLeds(int)+0xd8>
     79c:	fb9e f2f2 	sdiv	r2, lr, r2
     7a0:	b2d2      	uxtb	r2, r2
     7a2:	1c50      	adds	r0, r2, #1
     7a4:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     7a6:	fb00 1501 	mla	r5, r0, r1, r1
     7aa:	122d      	asrs	r5, r5, #8
     7ac:	7018      	strb	r0, [r3, #0]
     7ae:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     7b0:	b105      	cbz	r5, 7b4 <CLEDController::clearLeds(int)+0xc4>
     7b2:	3e01      	subs	r6, #1
     7b4:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7b8:	b100      	cbz	r0, 7bc <CLEDController::clearLeds(int)+0xcc>
     7ba:	701a      	strb	r2, [r3, #0]
     7bc:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7be:	429f      	cmp	r7, r3
     7c0:	d008      	beq.n	7d4 <CLEDController::clearLeds(int)+0xe4>
     7c2:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7c4:	2a00      	cmp	r2, #0
     7c6:	d1e9      	bne.n	79c <CLEDController::clearLeds(int)+0xac>
     7c8:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7ca:	f803 2c03 	strb.w	r2, [r3, #-3]
     7ce:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7d0:	429f      	cmp	r7, r3
     7d2:	d1f6      	bne.n	7c2 <CLEDController::clearLeds(int)+0xd2>
     7d4:	6825      	ldr	r5, [r4, #0]
     7d6:	e7b9      	b.n	74c <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     7d8:	460a      	mov	r2, r1
     7da:	ab02      	add	r3, sp, #8
     7dc:	a901      	add	r1, sp, #4
     7de:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     7e0:	b00b      	add	sp, #44	; 0x2c
     7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7e4:	000007ed 	.word	0x000007ed
     7e8:	1fff8c90 	.word	0x1fff8c90

000007ec <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ee:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7f0:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     7f2:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     7f4:	789b      	ldrb	r3, [r3, #2]
     7f6:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7f8:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     7fa:	9101      	str	r1, [sp, #4]
     7fc:	9202      	str	r2, [sp, #8]
     7fe:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     800:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     804:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     808:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     80c:	d016      	beq.n	83c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     80e:	2300      	movs	r3, #0
     810:	f88d 3015 	strb.w	r3, [sp, #21]
     814:	f88d 3014 	strb.w	r3, [sp, #20]
     818:	f88d 3013 	strb.w	r3, [sp, #19]
     81c:	f88d 3012 	strb.w	r3, [sp, #18]
     820:	f88d 3011 	strb.w	r3, [sp, #17]
     824:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     828:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     82a:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     82c:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     82e:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     832:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     834:	a901      	add	r1, sp, #4
     836:	4790      	blx	r2
  }
     838:	b009      	add	sp, #36	; 0x24
     83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     83c:	4a1b      	ldr	r2, [pc, #108]	; (8ac <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     83e:	7813      	ldrb	r3, [r2, #0]
     840:	3301      	adds	r3, #1
     842:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     846:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     84a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     84c:	bf14      	ite	ne
     84e:	2280      	movne	r2, #128	; 0x80
     850:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     852:	0799      	lsls	r1, r3, #30
     854:	bf44      	itt	mi
     856:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     85a:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     85c:	075b      	lsls	r3, r3, #29
     85e:	bf48      	it	mi
     860:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     864:	3210      	adds	r2, #16
     866:	b2d2      	uxtb	r2, r2
     868:	f10d 0313 	add.w	r3, sp, #19
     86c:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     870:	f44f 7e80 	mov.w	lr, #256	; 0x100
     874:	b1ac      	cbz	r4, 8a2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     876:	fb9e f4f4 	sdiv	r4, lr, r4
     87a:	b2e4      	uxtb	r4, r4
     87c:	1c61      	adds	r1, r4, #1
     87e:	b2c9      	uxtb	r1, r1
     880:	fb01 2502 	mla	r5, r1, r2, r2
     884:	122d      	asrs	r5, r5, #8
     886:	7019      	strb	r1, [r3, #0]
     888:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     88a:	b105      	cbz	r5, 88e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     88c:	3e01      	subs	r6, #1
     88e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     892:	b101      	cbz	r1, 896 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     894:	701c      	strb	r4, [r3, #0]
     896:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     898:	42bb      	cmp	r3, r7
     89a:	d0c5      	beq.n	828 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     89c:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     89e:	2c00      	cmp	r4, #0
     8a0:	d1e9      	bne.n	876 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     8a2:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     8a4:	f803 4c03 	strb.w	r4, [r3, #-3]
     8a8:	e7f5      	b.n	896 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     8aa:	bf00      	nop
     8ac:	1fff8c90 	.word	0x1fff8c90

000008b0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b2:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8b4:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     8b6:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     8b8:	789b      	ldrb	r3, [r3, #2]
     8ba:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8bc:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     8be:	9101      	str	r1, [sp, #4]
     8c0:	9202      	str	r2, [sp, #8]
     8c2:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8c4:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     8c8:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     8cc:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8d0:	d017      	beq.n	902 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     8d2:	2300      	movs	r3, #0
     8d4:	f88d 3015 	strb.w	r3, [sp, #21]
     8d8:	f88d 3014 	strb.w	r3, [sp, #20]
     8dc:	f88d 3013 	strb.w	r3, [sp, #19]
     8e0:	f88d 3012 	strb.w	r3, [sp, #18]
     8e4:	f88d 3011 	strb.w	r3, [sp, #17]
     8e8:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8ec:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     8ee:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     8f0:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8f2:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     8f4:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     8f8:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8fa:	a901      	add	r1, sp, #4
     8fc:	4798      	blx	r3
  }
     8fe:	b009      	add	sp, #36	; 0x24
     900:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     902:	4a1b      	ldr	r2, [pc, #108]	; (970 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     904:	7813      	ldrb	r3, [r2, #0]
     906:	3301      	adds	r3, #1
     908:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     90c:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     910:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     912:	bf14      	ite	ne
     914:	2280      	movne	r2, #128	; 0x80
     916:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     918:	0799      	lsls	r1, r3, #30
     91a:	bf44      	itt	mi
     91c:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     920:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     922:	075b      	lsls	r3, r3, #29
     924:	bf48      	it	mi
     926:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     92a:	3210      	adds	r2, #16
     92c:	b2d2      	uxtb	r2, r2
     92e:	f10d 0313 	add.w	r3, sp, #19
     932:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     936:	f44f 7e80 	mov.w	lr, #256	; 0x100
     93a:	b1ac      	cbz	r4, 968 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     93c:	fb9e f4f4 	sdiv	r4, lr, r4
     940:	b2e4      	uxtb	r4, r4
     942:	1c61      	adds	r1, r4, #1
     944:	b2c9      	uxtb	r1, r1
     946:	fb01 2502 	mla	r5, r1, r2, r2
     94a:	122d      	asrs	r5, r5, #8
     94c:	7019      	strb	r1, [r3, #0]
     94e:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     950:	b105      	cbz	r5, 954 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     952:	3e01      	subs	r6, #1
     954:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     958:	b101      	cbz	r1, 95c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     95a:	701c      	strb	r4, [r3, #0]
     95c:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     95e:	42bb      	cmp	r3, r7
     960:	d0c4      	beq.n	8ec <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     962:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     964:	2c00      	cmp	r4, #0
     966:	d1e9      	bne.n	93c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     968:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     96a:	f803 4c03 	strb.w	r4, [r3, #-3]
     96e:	e7f5      	b.n	95c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     970:	1fff8c90 	.word	0x1fff8c90

00000974 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     974:	b570      	push	{r4, r5, r6, lr}
     976:	4604      	mov	r4, r0
     978:	4608      	mov	r0, r1
     97a:	460d      	mov	r5, r1
     97c:	f00e fb80 	bl	f080 <strlen>
     980:	6823      	ldr	r3, [r4, #0]
     982:	4602      	mov	r2, r0
     984:	4629      	mov	r1, r5
     986:	4620      	mov	r0, r4
     988:	685b      	ldr	r3, [r3, #4]
     98a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     98e:	4718      	bx	r3

00000990 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     990:	b538      	push	{r3, r4, r5, lr}
     992:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     994:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     996:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     998:	f00e fb72 	bl	f080 <strlen>
     99c:	6823      	ldr	r3, [r4, #0]
     99e:	4602      	mov	r2, r0
     9a0:	4629      	mov	r1, r5
     9a2:	685b      	ldr	r3, [r3, #4]
     9a4:	4620      	mov	r0, r4
     9a6:	4798      	blx	r3
     9a8:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9aa:	4620      	mov	r0, r4
     9ac:	f00c ffa8 	bl	d900 <Print::println()>
     9b0:	4428      	add	r0, r5
     9b2:	bd38      	pop	{r3, r4, r5, pc}

000009b4 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9b8:	780d      	ldrb	r5, [r1, #0]
     9ba:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     9bc:	784d      	ldrb	r5, [r1, #1]
     9be:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     9c0:	7889      	ldrb	r1, [r1, #2]
     9c2:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9c4:	7811      	ldrb	r1, [r2, #0]
     9c6:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     9c8:	7851      	ldrb	r1, [r2, #1]
     9ca:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     9cc:	7892      	ldrb	r2, [r2, #2]
     9ce:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9d0:	781a      	ldrb	r2, [r3, #0]
     9d2:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     9d4:	785a      	ldrb	r2, [r3, #1]
     9d6:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     9d8:	789b      	ldrb	r3, [r3, #2]
     9da:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     9de:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9e0:	f89a b000 	ldrb.w	fp, [sl]
     9e4:	f880 b009 	strb.w	fp, [r0, #9]
     9e8:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     9ec:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     9f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     9f4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     9f6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     9f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
     9fa:	9911      	ldr	r1, [sp, #68]	; 0x44
     9fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
     9fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     a00:	f89a b001 	ldrb.w	fp, [sl, #1]
     a04:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     a08:	f89a a002 	ldrb.w	sl, [sl, #2]
     a0c:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a10:	f899 a000 	ldrb.w	sl, [r9]
     a14:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     a18:	f899 a001 	ldrb.w	sl, [r9, #1]
     a1c:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     a20:	f899 9002 	ldrb.w	r9, [r9, #2]
     a24:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a28:	f898 9000 	ldrb.w	r9, [r8]
     a2c:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     a30:	f898 9001 	ldrb.w	r9, [r8, #1]
     a34:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     a38:	f898 8002 	ldrb.w	r8, [r8, #2]
     a3c:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a40:	f89c 8000 	ldrb.w	r8, [ip]
     a44:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     a48:	f89c 8001 	ldrb.w	r8, [ip, #1]
     a4c:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     a50:	f89c c002 	ldrb.w	ip, [ip, #2]
     a54:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a58:	f89e c000 	ldrb.w	ip, [lr]
     a5c:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     a60:	f89e c001 	ldrb.w	ip, [lr, #1]
     a64:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     a68:	f89e e002 	ldrb.w	lr, [lr, #2]
     a6c:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a70:	f897 e000 	ldrb.w	lr, [r7]
     a74:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     a78:	f897 e001 	ldrb.w	lr, [r7, #1]
     a7c:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     a80:	78bf      	ldrb	r7, [r7, #2]
     a82:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a84:	7837      	ldrb	r7, [r6, #0]
     a86:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     a88:	7877      	ldrb	r7, [r6, #1]
     a8a:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     a8c:	78b6      	ldrb	r6, [r6, #2]
     a8e:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a90:	782e      	ldrb	r6, [r5, #0]
     a92:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     a94:	786e      	ldrb	r6, [r5, #1]
     a96:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     a98:	78ad      	ldrb	r5, [r5, #2]
     a9a:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a9e:	780d      	ldrb	r5, [r1, #0]
     aa0:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     aa4:	784d      	ldrb	r5, [r1, #1]
     aa6:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     aaa:	7889      	ldrb	r1, [r1, #2]
     aac:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ab0:	7811      	ldrb	r1, [r2, #0]
     ab2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     ab6:	7851      	ldrb	r1, [r2, #1]
     ab8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     abc:	7892      	ldrb	r2, [r2, #2]
     abe:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     ac4:	7812      	ldrb	r2, [r2, #0]
     ac6:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     aca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     acc:	7852      	ldrb	r2, [r2, #1]
     ace:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     ad2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     ad4:	7892      	ldrb	r2, [r2, #2]
     ad6:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ada:	9a14      	ldr	r2, [sp, #80]	; 0x50
     adc:	7812      	ldrb	r2, [r2, #0]
     ade:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     ae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
     ae4:	7852      	ldrb	r2, [r2, #1]
     ae6:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
     aec:	7892      	ldrb	r2, [r2, #2]
     aee:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     af2:	781a      	ldrb	r2, [r3, #0]
     af4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     af8:	785a      	ldrb	r2, [r3, #1]
     afa:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     afe:	789b      	ldrb	r3, [r3, #2]
     b00:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000b08 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     b0e:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     b10:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     b12:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     b16:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b18:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b1a:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b1c:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b1e:	d1f8      	bne.n	b12 <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b20:	680b      	ldr	r3, [r1, #0]
     b22:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     b24:	ea4f 6813 	mov.w	r8, r3, lsr #24
     b28:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b2c:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b30:	f04f 33ff 	mov.w	r3, #4294967295
     b34:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b36:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b38:	9305      	str	r3, [sp, #20]
     b3a:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b3c:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b40:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b42:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     b46:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b4a:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b4e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b50:	b2f9      	uxtb	r1, r7
     b52:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b56:	9103      	str	r1, [sp, #12]
     b58:	b2e9      	uxtb	r1, r5
     b5a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b5c:	fa5f f18c 	uxtb.w	r1, ip
     b60:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b62:	9907      	ldr	r1, [sp, #28]
     b64:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b66:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b68:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b6c:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b70:	d80c      	bhi.n	b8c <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b72:	9905      	ldr	r1, [sp, #20]
     b74:	458c      	cmp	ip, r1
     b76:	dc07      	bgt.n	b88 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     b78:	290f      	cmp	r1, #15
     b7a:	d005      	beq.n	b88 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     b7c:	3101      	adds	r1, #1
     b7e:	b2c9      	uxtb	r1, r1
     b80:	428b      	cmp	r3, r1
     b82:	9102      	str	r1, [sp, #8]
     b84:	bf38      	it	cc
     b86:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b88:	b259      	sxtb	r1, r3
     b8a:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b8c:	a909      	add	r1, sp, #36	; 0x24
     b8e:	9100      	str	r1, [sp, #0]
     b90:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b92:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     b96:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     b9a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b9e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     ba2:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     ba6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     baa:	f00a fc01 	bl	b3b0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     bae:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     bb0:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bb4:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     bb8:	46d1      	mov	r9, sl
     bba:	d1bf      	bne.n	b3c <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     bbc:	9806      	ldr	r0, [sp, #24]
     bbe:	b00b      	add	sp, #44	; 0x2c
     bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000bc4 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     bc4:	4b48      	ldr	r3, [pc, #288]	; (ce8 <updatePaletteIndex(LEDStruct&)+0x124>)
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	2b00      	cmp	r3, #0
     bca:	f000 808b 	beq.w	ce4 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     bce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bd2:	b09b      	sub	sp, #108	; 0x6c
     bd4:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     bd8:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     bda:	2300      	movs	r3, #0
     bdc:	4a43      	ldr	r2, [pc, #268]	; (cec <updatePaletteIndex(LEDStruct&)+0x128>)
     bde:	9307      	str	r3, [sp, #28]
     be0:	f8df 910c 	ldr.w	r9, [pc, #268]	; cf0 <updatePaletteIndex(LEDStruct&)+0x12c>
     be4:	9009      	str	r0, [sp, #36]	; 0x24
     be6:	f200 2327 	addw	r3, r0, #551	; 0x227
     bea:	9208      	str	r2, [sp, #32]
     bec:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     bee:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     bf0:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     bf4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     bf6:	3701      	adds	r7, #1
        } while ( u.index != 255);
     bf8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     bfa:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     bfc:	d1f8      	bne.n	bf0 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     bfe:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     c02:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c04:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c08:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c0c:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c0e:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     c12:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     c16:	2400      	movs	r4, #0
     c18:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c1a:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c1e:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     c22:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c26:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     c2a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     c2c:	b2f1      	uxtb	r1, r6
     c2e:	f3c5 6507 	ubfx	r5, r5, #24, #8
     c32:	9103      	str	r1, [sp, #12]
     c34:	b2e9      	uxtb	r1, r5
     c36:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     c38:	fa5f f18c 	uxtb.w	r1, ip
     c3c:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     c3e:	9906      	ldr	r1, [sp, #24]
     c40:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c42:	aa0c      	add	r2, sp, #48	; 0x30
     c44:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     c46:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c4a:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     c4e:	d80c      	bhi.n	c6a <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     c50:	9905      	ldr	r1, [sp, #20]
     c52:	458c      	cmp	ip, r1
     c54:	dc07      	bgt.n	c66 <updatePaletteIndex(LEDStruct&)+0xa2>
     c56:	290f      	cmp	r1, #15
     c58:	d005      	beq.n	c66 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     c5a:	3101      	adds	r1, #1
     c5c:	b2c9      	uxtb	r1, r1
     c5e:	428b      	cmp	r3, r1
     c60:	9102      	str	r1, [sp, #8]
     c62:	bf38      	it	cc
     c64:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     c66:	b259      	sxtb	r1, r3
     c68:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c6a:	a90d      	add	r1, sp, #52	; 0x34
     c6c:	9100      	str	r1, [sp, #0]
     c6e:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c70:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     c74:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     c78:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c7c:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     c80:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     c84:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     c88:	f00a fb92 	bl	b3b0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     c8c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c8e:	46d3      	mov	fp, sl
        g = rhs.g;
     c90:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     c94:	f8dd 8010 	ldr.w	r8, [sp, #16]
     c98:	d1bf      	bne.n	c1a <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     c9c:	aa0e      	add	r2, sp, #56	; 0x38
     c9e:	4293      	cmp	r3, r2
     ca0:	d018      	beq.n	cd4 <updatePaletteIndex(LEDStruct&)+0x110>
     ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ca4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     ca6:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     caa:	e001      	b.n	cb0 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     cac:	42a3      	cmp	r3, r4
     cae:	d011      	beq.n	cd4 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     cb0:	f812 1b01 	ldrb.w	r1, [r2], #1
     cb4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     cb8:	4288      	cmp	r0, r1
     cba:	d0f7      	beq.n	cac <updatePaletteIndex(LEDStruct&)+0xe8>
     cbc:	4b0a      	ldr	r3, [pc, #40]	; (ce8 <updatePaletteIndex(LEDStruct&)+0x124>)
     cbe:	9a07      	ldr	r2, [sp, #28]
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	3201      	adds	r2, #1
     cc4:	4293      	cmp	r3, r2
     cc6:	9207      	str	r2, [sp, #28]
     cc8:	dd09      	ble.n	cde <updatePaletteIndex(LEDStruct&)+0x11a>
     cca:	9b08      	ldr	r3, [sp, #32]
     ccc:	f853 9f04 	ldr.w	r9, [r3, #4]!
     cd0:	9308      	str	r3, [sp, #32]
     cd2:	e78c      	b.n	bee <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cd6:	f89d 201c 	ldrb.w	r2, [sp, #28]
     cda:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     cde:	b01b      	add	sp, #108	; 0x6c
     ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ce4:	4770      	bx	lr
     ce6:	bf00      	nop
     ce8:	1fff8758 	.word	0x1fff8758
     cec:	00011054 	.word	0x00011054
     cf0:	00011bf8 	.word	0x00011bf8

00000cf4 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     cf8:	4d42      	ldr	r5, [pc, #264]	; (e04 <initialize()+0x110>)
		}
	}
}

// Initialization function
void initialize() {
     cfa:	b082      	sub	sp, #8
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     cfc:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     cfe:	2400      	movs	r4, #0
     d00:	4628      	mov	r0, r5
     d02:	2196      	movs	r1, #150	; 0x96
     d04:	f88d 4004 	strb.w	r4, [sp, #4]
     d08:	f88d 4005 	strb.w	r4, [sp, #5]
     d0c:	f88d 4006 	strb.w	r4, [sp, #6]
     d10:	f00a fb1e 	bl	b350 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     d14:	493c      	ldr	r1, [pc, #240]	; (e08 <initialize()+0x114>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     d16:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     d1a:	f505 70e4 	add.w	r0, r5, #456	; 0x1c8
     d1e:	f7ff fef3 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     d22:	493a      	ldr	r1, [pc, #232]	; (e0c <initialize()+0x118>)
     d24:	f505 70fc 	add.w	r0, r5, #504	; 0x1f8
     d28:	f7ff feee 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     d2c:	4628      	mov	r0, r5
     d2e:	f7ff ff49 	bl	bc4 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     d32:	4b37      	ldr	r3, [pc, #220]	; (e10 <initialize()+0x11c>)
     d34:	4a37      	ldr	r2, [pc, #220]	; (e14 <initialize()+0x120>)
     d36:	7818      	ldrb	r0, [r3, #0]
     d38:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
     d3c:	4623      	mov	r3, r4
     d3e:	e001      	b.n	d44 <initialize()+0x50>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     d40:	2b21      	cmp	r3, #33	; 0x21
     d42:	d008      	beq.n	d56 <initialize()+0x62>
		if (leds.mode_name == ModeList[i]) {
     d44:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     d48:	4281      	cmp	r1, r0
     d4a:	b2dc      	uxtb	r4, r3
     d4c:	f103 0301 	add.w	r3, r3, #1
     d50:	d1f6      	bne.n	d40 <initialize()+0x4c>
			leds.mode_number = i;
     d52:	f885 422b 	strb.w	r4, [r5, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d56:	4e30      	ldr	r6, [pc, #192]	; (e18 <initialize()+0x124>)
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; e2c <initialize()+0x138>
	curr_over_leds.array_type		= CURR_OVERLAY;
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d5c:	4f2f      	ldr	r7, [pc, #188]	; (e1c <initialize()+0x128>)
     d5e:	2400      	movs	r4, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d60:	aa01      	add	r2, sp, #4
     d62:	4630      	mov	r0, r6
     d64:	2196      	movs	r1, #150	; 0x96
     d66:	f88d 4004 	strb.w	r4, [sp, #4]
     d6a:	f88d 4005 	strb.w	r4, [sp, #5]
     d6e:	f88d 4006 	strb.w	r4, [sp, #6]
     d72:	f00a faed 	bl	b350 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     d76:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     d78:	f506 70e4 	add.w	r0, r6, #456	; 0x1c8
     d7c:	4928      	ldr	r1, [pc, #160]	; (e20 <initialize()+0x12c>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     d7e:	f886 31c6 	strb.w	r3, [r6, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     d82:	f7ff fec1 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     d86:	4927      	ldr	r1, [pc, #156]	; (e24 <initialize()+0x130>)
     d88:	f506 70fc 	add.w	r0, r6, #504	; 0x1f8
     d8c:	f7ff febc 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     d90:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
     d94:	f886 322b 	strb.w	r3, [r6, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     d98:	4630      	mov	r0, r6
     d9a:	f7ff ff13 	bl	bc4 <updatePaletteIndex(LEDStruct&)>

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d9e:	aa01      	add	r2, sp, #4
     da0:	4640      	mov	r0, r8
     da2:	2196      	movs	r1, #150	; 0x96
     da4:	f88d 4004 	strb.w	r4, [sp, #4]
     da8:	f88d 4005 	strb.w	r4, [sp, #5]
     dac:	f88d 4006 	strb.w	r4, [sp, #6]
     db0:	f00a face 	bl	b350 <fill_solid(CRGB*, int, CRGB const&)>
	curr_over_leds.array_type		= CURR_OVERLAY;
     db4:	2302      	movs	r3, #2
	curr_over_leds.current_palette	= cequal_gp;
     db6:	f508 70e4 	add.w	r0, r8, #456	; 0x1c8
     dba:	491b      	ldr	r1, [pc, #108]	; (e28 <initialize()+0x134>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_over_leds.array_type		= CURR_OVERLAY;
     dbc:	f888 31c6 	strb.w	r3, [r8, #454]	; 0x1c6
	curr_over_leds.current_palette	= cequal_gp;
     dc0:	f7ff fea2 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	curr_over_leds.target_palette	= cequal_gp;
     dc4:	f508 70fc 	add.w	r0, r8, #504	; 0x1f8
     dc8:	4917      	ldr	r1, [pc, #92]	; (e28 <initialize()+0x134>)
     dca:	f7ff fe9d 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     dce:	aa01      	add	r2, sp, #4
     dd0:	4638      	mov	r0, r7
     dd2:	2196      	movs	r1, #150	; 0x96
     dd4:	f88d 4004 	strb.w	r4, [sp, #4]
     dd8:	f88d 4005 	strb.w	r4, [sp, #5]
     ddc:	f88d 4006 	strb.w	r4, [sp, #6]
     de0:	f00a fab6 	bl	b350 <fill_solid(CRGB*, int, CRGB const&)>
	next_over_leds.array_type = NEXT_OVERLAY;
     de4:	2303      	movs	r3, #3
	next_over_leds.current_palette = cequal_gp;
     de6:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
     dea:	490f      	ldr	r1, [pc, #60]	; (e28 <initialize()+0x134>)
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
	next_over_leds.array_type = NEXT_OVERLAY;
     dec:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
	next_over_leds.current_palette = cequal_gp;
     df0:	f7ff fe8a 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
	next_over_leds.target_palette = cequal_gp;
     df4:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
     df8:	490b      	ldr	r1, [pc, #44]	; (e28 <initialize()+0x134>)
     dfa:	f7ff fe85 	bl	b08 <CRGBPalette16::operator=(unsigned char const*)>
}
     dfe:	b002      	add	sp, #8
     e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e04:	1fffa6f4 	.word	0x1fffa6f4
     e08:	00012044 	.word	0x00012044
     e0c:	0001169c 	.word	0x0001169c
     e10:	1fff8751 	.word	0x1fff8751
     e14:	1fff8727 	.word	0x1fff8727
     e18:	1fff8cb8 	.word	0x1fff8cb8
     e1c:	1fff9e98 	.word	0x1fff9e98
     e20:	00011e14 	.word	0x00011e14
     e24:	00011dd4 	.word	0x00011dd4
     e28:	00011ebc 	.word	0x00011ebc
     e2c:	1fff9628 	.word	0x1fff9628

00000e30 <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     e30:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e32:	2112      	movs	r1, #18
     e34:	b082      	sub	sp, #8
     e36:	4834      	ldr	r0, [pc, #208]	; (f08 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e38:	4c34      	ldr	r4, [pc, #208]	; (f0c <global_debug()+0xdc>)
     e3a:	f00c fb5d 	bl	d4f8 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     e3e:	4b34      	ldr	r3, [pc, #208]	; (f10 <global_debug()+0xe0>)
     e40:	4620      	mov	r0, r4
     e42:	7819      	ldrb	r1, [r3, #0]
     e44:	f00c fdac 	bl	d9a0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e48:	4620      	mov	r0, r4
     e4a:	f00c fd59 	bl	d900 <Print::println()>
     e4e:	2111      	movs	r1, #17
     e50:	4830      	ldr	r0, [pc, #192]	; (f14 <global_debug()+0xe4>)
     e52:	f00c fb51 	bl	d4f8 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     e56:	4b30      	ldr	r3, [pc, #192]	; (f18 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e58:	4620      	mov	r0, r4
     e5a:	7819      	ldrb	r1, [r3, #0]
     e5c:	f00c fda0 	bl	d9a0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e60:	4620      	mov	r0, r4
     e62:	f00c fd4d 	bl	d900 <Print::println()>
     e66:	2115      	movs	r1, #21
     e68:	482c      	ldr	r0, [pc, #176]	; (f1c <global_debug()+0xec>)
     e6a:	f00c fb45 	bl	d4f8 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     e6e:	4b2c      	ldr	r3, [pc, #176]	; (f20 <global_debug()+0xf0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e70:	4620      	mov	r0, r4
     e72:	7819      	ldrb	r1, [r3, #0]
     e74:	f00c fd94 	bl	d9a0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e78:	4620      	mov	r0, r4
     e7a:	f00c fd41 	bl	d900 <Print::println()>
     e7e:	2110      	movs	r1, #16
     e80:	4828      	ldr	r0, [pc, #160]	; (f24 <global_debug()+0xf4>)
     e82:	f00c fb39 	bl	d4f8 <usb_serial_write>
	Serial.print("(T) Mode Timer:\t");
	Serial.println(mode_change_time);
     e86:	4b28      	ldr	r3, [pc, #160]	; (f28 <global_debug()+0xf8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e88:	4620      	mov	r0, r4
     e8a:	8819      	ldrh	r1, [r3, #0]
     e8c:	f00c fd88 	bl	d9a0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e90:	4620      	mov	r0, r4
     e92:	f00c fd35 	bl	d900 <Print::println()>
     e96:	2114      	movs	r1, #20
     e98:	4824      	ldr	r0, [pc, #144]	; (f2c <global_debug()+0xfc>)
     e9a:	f00c fb2d 	bl	d4f8 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     e9e:	4b24      	ldr	r3, [pc, #144]	; (f30 <global_debug()+0x100>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ea0:	4620      	mov	r0, r4
     ea2:	8819      	ldrh	r1, [r3, #0]
     ea4:	f00c fd7c 	bl	d9a0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ea8:	4620      	mov	r0, r4
     eaa:	f00c fd29 	bl	d900 <Print::println()>
     eae:	210f      	movs	r1, #15
     eb0:	4820      	ldr	r0, [pc, #128]	; (f34 <global_debug()+0x104>)
     eb2:	f00c fb21 	bl	d4f8 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     eb6:	4b20      	ldr	r3, [pc, #128]	; (f38 <global_debug()+0x108>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     eb8:	4620      	mov	r0, r4
     eba:	8819      	ldrh	r1, [r3, #0]
     ebc:	f00c fd70 	bl	d9a0 <Print::print(long)>
     ec0:	2102      	movs	r1, #2
     ec2:	481e      	ldr	r0, [pc, #120]	; (f3c <global_debug()+0x10c>)
     ec4:	f00c fb18 	bl	d4f8 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     ec8:	4b1d      	ldr	r3, [pc, #116]	; (f40 <global_debug()+0x110>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     eca:	220a      	movs	r2, #10
     ecc:	7819      	ldrb	r1, [r3, #0]
     ece:	4620      	mov	r0, r4
     ed0:	2300      	movs	r3, #0
     ed2:	f00c fd25 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ed6:	2101      	movs	r1, #1
     ed8:	481a      	ldr	r0, [pc, #104]	; (f44 <global_debug()+0x114>)
     eda:	f00c fb0d 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ede:	4620      	mov	r0, r4
     ee0:	f00c fd0e 	bl	d900 <Print::println()>
     ee4:	210e      	movs	r1, #14
     ee6:	4818      	ldr	r0, [pc, #96]	; (f48 <global_debug()+0x118>)
     ee8:	f00c fb06 	bl	d4f8 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eec:	4b17      	ldr	r3, [pc, #92]	; (f4c <global_debug()+0x11c>)
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	9301      	str	r3, [sp, #4]
	return ret;
     ef2:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     ef4:	2300      	movs	r3, #0
     ef6:	220a      	movs	r2, #10
     ef8:	4620      	mov	r0, r4
     efa:	f00c fd11 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     efe:	4620      	mov	r0, r4
     f00:	f00c fcfe 	bl	d900 <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     f04:	b002      	add	sp, #8
     f06:	bd10      	pop	{r4, pc}
     f08:	0000f2c8 	.word	0x0000f2c8
     f0c:	1fff8790 	.word	0x1fff8790
     f10:	1fff8787 	.word	0x1fff8787
     f14:	0000f2dc 	.word	0x0000f2dc
     f18:	1fff8752 	.word	0x1fff8752
     f1c:	0000f2f0 	.word	0x0000f2f0
     f20:	1fff8722 	.word	0x1fff8722
     f24:	0000f308 	.word	0x0000f308
     f28:	1fff8720 	.word	0x1fff8720
     f2c:	0000f31c 	.word	0x0000f31c
     f30:	1fff8cb4 	.word	0x1fff8cb4
     f34:	0000f334 	.word	0x0000f334
     f38:	1fff9622 	.word	0x1fff9622
     f3c:	0000f344 	.word	0x0000f344
     f40:	1fff957d 	.word	0x1fff957d
     f44:	0000f348 	.word	0x0000f348
     f48:	0000f34c 	.word	0x0000f34c
     f4c:	1fffb18c 	.word	0x1fffb18c

00000f50 <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f50:	491e      	ldr	r1, [pc, #120]	; (fcc <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     f52:	481f      	ldr	r0, [pc, #124]	; (fd0 <begin_transition()+0x80>)
     f54:	880b      	ldrh	r3, [r1, #0]
     f56:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f5e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     f62:	3319      	adds	r3, #25
     f64:	b29b      	uxth	r3, r3
     f66:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f6a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     f6e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f72:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f76:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f78:	b2db      	uxtb	r3, r3
     f7a:	b292      	uxth	r2, r2
     f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     f80:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f82:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f84:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     f88:	4e12      	ldr	r6, [pc, #72]	; (fd4 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     f8a:	4d13      	ldr	r5, [pc, #76]	; (fd8 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f8c:	5cf3      	ldrb	r3, [r6, r3]
     f8e:	4c13      	ldr	r4, [pc, #76]	; (fdc <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f90:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     f92:	b2ff      	uxtb	r7, r7
     f94:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     f98:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     f9a:	123f      	asrs	r7, r7, #8
     f9c:	3703      	adds	r7, #3
	switch (transition_type) {
     f9e:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fa0:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fa2:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fa4:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     fa6:	d00c      	beq.n	fc2 <begin_transition()+0x72>
     fa8:	d306      	bcc.n	fb8 <begin_transition()+0x68>
     faa:	2b02      	cmp	r3, #2
     fac:	d102      	bne.n	fb4 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     fae:	4b0c      	ldr	r3, [pc, #48]	; (fe0 <begin_transition()+0x90>)
     fb0:	2200      	movs	r2, #0
     fb2:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fb4:	bcf0      	pop	{r4, r5, r6, r7}
     fb6:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     fb8:	4b0a      	ldr	r3, [pc, #40]	; (fe4 <begin_transition()+0x94>)
     fba:	2200      	movs	r2, #0
     fbc:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fbe:	bcf0      	pop	{r4, r5, r6, r7}
     fc0:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     fc2:	4b07      	ldr	r3, [pc, #28]	; (fe0 <begin_transition()+0x90>)
     fc4:	224a      	movs	r2, #74	; 0x4a
     fc6:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fc8:	bcf0      	pop	{r4, r5, r6, r7}
     fca:	4770      	bx	lr
     fcc:	1fff8788 	.word	0x1fff8788
     fd0:	1fff9520 	.word	0x1fff9520
     fd4:	1fff8724 	.word	0x1fff8724
     fd8:	1fff9e85 	.word	0x1fff9e85
     fdc:	1fff9534 	.word	0x1fff9534
     fe0:	1fff955c 	.word	0x1fff955c
     fe4:	1fff8cb6 	.word	0x1fff8cb6

00000fe8 <LEDStruct::operator=(LEDStruct const&)>:
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fea:	1cca      	adds	r2, r1, #3
     fec:	4604      	mov	r4, r0
     fee:	1cc3      	adds	r3, r0, #3
     ff0:	460d      	mov	r5, r1
     ff2:	f200 10c5 	addw	r0, r0, #453	; 0x1c5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ff6:	f812 1c03 	ldrb.w	r1, [r2, #-3]
     ffa:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
     ffe:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    1002:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    1006:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    100a:	f803 1c01 	strb.w	r1, [r3, #-1]
    100e:	3303      	adds	r3, #3
    1010:	4298      	cmp	r0, r3
    1012:	f102 0203 	add.w	r2, r2, #3
    1016:	d1ee      	bne.n	ff6 <LEDStruct::operator=(LEDStruct const&)+0xe>
    1018:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    101c:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
    1020:	f895 31c3 	ldrb.w	r3, [r5, #451]	; 0x1c3
    1024:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
    1028:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    102c:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
    1030:	f895 11c5 	ldrb.w	r1, [r5, #453]	; 0x1c5
    1034:	f895 21c6 	ldrb.w	r2, [r5, #454]	; 0x1c6
    1038:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
    103c:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
    1040:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
    1044:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    1048:	2230      	movs	r2, #48	; 0x30
    104a:	f505 71e4 	add.w	r1, r5, #456	; 0x1c8
    104e:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
    1052:	f00d ff2d 	bl	eeb0 <memmove>
    1056:	2230      	movs	r2, #48	; 0x30
    1058:	f505 71fc 	add.w	r1, r5, #504	; 0x1f8
    105c:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    1060:	f00d ff26 	bl	eeb0 <memmove>
    1064:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
    1068:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
    106c:	f895 3229 	ldrb.w	r3, [r5, #553]	; 0x229
    1070:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    1074:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
    1078:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    107c:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
    1080:	f884 322b 	strb.w	r3, [r4, #555]	; 0x22b
    1084:	f895 122c 	ldrb.w	r1, [r5, #556]	; 0x22c
    1088:	f895 222d 	ldrb.w	r2, [r5, #557]	; 0x22d
    108c:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
    1090:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    1094:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    1098:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
    109c:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    10a0:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    10a4:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    10a8:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    10ac:	f895 3231 	ldrb.w	r3, [r5, #561]	; 0x231
    10b0:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
    10b4:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
    10b8:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    10bc:	f895 3233 	ldrb.w	r3, [r5, #563]	; 0x233
    10c0:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    10c4:	f895 2235 	ldrb.w	r2, [r5, #565]	; 0x235
    10c8:	f895 3236 	ldrb.w	r3, [r5, #566]	; 0x236
    10cc:	f895 1234 	ldrb.w	r1, [r5, #564]	; 0x234
    10d0:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    10d4:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    10d8:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
    10dc:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
    10e0:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    10e4:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
    10e8:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    10ec:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
    10f0:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    10f4:	f895 323a 	ldrb.w	r3, [r5, #570]	; 0x23a
    10f8:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
    10fc:	f205 223e 	addw	r2, r5, #574	; 0x23e
    1100:	f204 233e 	addw	r3, r4, #574	; 0x23e
    1104:	f204 207a 	addw	r0, r4, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1108:	f812 1c03 	ldrb.w	r1, [r2, #-3]
    110c:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
    1110:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    1114:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    1118:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    111c:	f803 1c01 	strb.w	r1, [r3, #-1]
    1120:	3303      	adds	r3, #3
    1122:	4298      	cmp	r0, r3
    1124:	f102 0203 	add.w	r2, r2, #3
    1128:	d1ee      	bne.n	1108 <LEDStruct::operator=(LEDStruct const&)+0x120>
    112a:	f895 3277 	ldrb.w	r3, [r5, #631]	; 0x277
    112e:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
    1132:	f895 3278 	ldrb.w	r3, [r5, #632]	; 0x278
    1136:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    113a:	f895 3279 	ldrb.w	r3, [r5, #633]	; 0x279
    113e:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    1142:	f895 327a 	ldrb.w	r3, [r5, #634]	; 0x27a
    1146:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
    114a:	f895 327b 	ldrb.w	r3, [r5, #635]	; 0x27b
    114e:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
    1152:	f895 327c 	ldrb.w	r3, [r5, #636]	; 0x27c
    1156:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
    115a:	f895 327d 	ldrb.w	r3, [r5, #637]	; 0x27d
    115e:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
    1162:	f895 327e 	ldrb.w	r3, [r5, #638]	; 0x27e
    1166:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
    116a:	f895 327f 	ldrb.w	r3, [r5, #639]	; 0x27f
    116e:	f884 327f 	strb.w	r3, [r4, #639]	; 0x27f
    1172:	f205 227f 	addw	r2, r5, #639	; 0x27f
    1176:	f504 7320 	add.w	r3, r4, #640	; 0x280
    117a:	f204 20cb 	addw	r0, r4, #715	; 0x2cb
    117e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1182:	f803 1b01 	strb.w	r1, [r3], #1
    1186:	4283      	cmp	r3, r0
    1188:	d1f9      	bne.n	117e <LEDStruct::operator=(LEDStruct const&)+0x196>
    118a:	f205 22ca 	addw	r2, r5, #714	; 0x2ca
    118e:	f204 3016 	addw	r0, r4, #790	; 0x316
    1192:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1196:	f803 1b01 	strb.w	r1, [r3], #1
    119a:	4283      	cmp	r3, r0
    119c:	d1f9      	bne.n	1192 <LEDStruct::operator=(LEDStruct const&)+0x1aa>
    119e:	f895 3316 	ldrb.w	r3, [r5, #790]	; 0x316
    11a2:	f884 3316 	strb.w	r3, [r4, #790]	; 0x316
    11a6:	f895 3317 	ldrb.w	r3, [r5, #791]	; 0x317
    11aa:	f884 3317 	strb.w	r3, [r4, #791]	; 0x317
    11ae:	f895 2318 	ldrb.w	r2, [r5, #792]	; 0x318
    11b2:	f895 3319 	ldrb.w	r3, [r5, #793]	; 0x319
    11b6:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
    11ba:	f884 2318 	strb.w	r2, [r4, #792]	; 0x318
    11be:	f895 331a 	ldrb.w	r3, [r5, #794]	; 0x31a
    11c2:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
    11c6:	f895 331b 	ldrb.w	r3, [r5, #795]	; 0x31b
    11ca:	f884 331b 	strb.w	r3, [r4, #795]	; 0x31b
    11ce:	f8b5 131c 	ldrh.w	r1, [r5, #796]	; 0x31c
    11d2:	f8b5 231e 	ldrh.w	r2, [r5, #798]	; 0x31e
    11d6:	f8b5 3320 	ldrh.w	r3, [r5, #800]	; 0x320
    11da:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
    11de:	f8a4 131c 	strh.w	r1, [r4, #796]	; 0x31c
    11e2:	f8a4 231e 	strh.w	r2, [r4, #798]	; 0x31e
    11e6:	f895 3322 	ldrb.w	r3, [r5, #802]	; 0x322
    11ea:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
    11ee:	f895 3323 	ldrb.w	r3, [r5, #803]	; 0x323
    11f2:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
    11f6:	f895 3324 	ldrb.w	r3, [r5, #804]	; 0x324
    11fa:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
    11fe:	f895 3325 	ldrb.w	r3, [r5, #805]	; 0x325
    1202:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
    1206:	f895 3326 	ldrb.w	r3, [r5, #806]	; 0x326
    120a:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
    120e:	f895 3327 	ldrb.w	r3, [r5, #807]	; 0x327
    1212:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
    1216:	f8b5 3328 	ldrh.w	r3, [r5, #808]	; 0x328
    121a:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    121e:	f8b5 032a 	ldrh.w	r0, [r5, #810]	; 0x32a
    1222:	f8b5 132c 	ldrh.w	r1, [r5, #812]	; 0x32c
    1226:	f8b5 232e 	ldrh.w	r2, [r5, #814]	; 0x32e
    122a:	f8b5 3330 	ldrh.w	r3, [r5, #816]	; 0x330
    122e:	f8b5 7332 	ldrh.w	r7, [r5, #818]	; 0x332
    1232:	f8b5 6334 	ldrh.w	r6, [r5, #820]	; 0x334
    1236:	f8a4 032a 	strh.w	r0, [r4, #810]	; 0x32a
    123a:	f8b5 0336 	ldrh.w	r0, [r5, #822]	; 0x336
    123e:	f8a4 132c 	strh.w	r1, [r4, #812]	; 0x32c
    1242:	f8b5 1338 	ldrh.w	r1, [r5, #824]	; 0x338
    1246:	f8a4 232e 	strh.w	r2, [r4, #814]	; 0x32e
    124a:	f8b5 233a 	ldrh.w	r2, [r5, #826]	; 0x33a
    124e:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    1252:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    1256:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    125a:	f8a4 1338 	strh.w	r1, [r4, #824]	; 0x338
    125e:	f8a4 233a 	strh.w	r2, [r4, #826]	; 0x33a
    1262:	f8a4 7332 	strh.w	r7, [r4, #818]	; 0x332
    1266:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
    126a:	f8a4 0336 	strh.w	r0, [r4, #822]	; 0x336
    126e:	f895 333e 	ldrb.w	r3, [r5, #830]	; 0x33e
    1272:	f884 333e 	strb.w	r3, [r4, #830]	; 0x33e
    1276:	f895 333f 	ldrb.w	r3, [r5, #831]	; 0x33f
    127a:	f884 333f 	strb.w	r3, [r4, #831]	; 0x33f
    127e:	f895 3340 	ldrb.w	r3, [r5, #832]	; 0x340
    1282:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
    1286:	f895 3341 	ldrb.w	r3, [r5, #833]	; 0x341
    128a:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
    128e:	f895 3342 	ldrb.w	r3, [r5, #834]	; 0x342
    1292:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
    1296:	f895 3343 	ldrb.w	r3, [r5, #835]	; 0x343
    129a:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
    129e:	f895 3344 	ldrb.w	r3, [r5, #836]	; 0x344
    12a2:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
    12a6:	f895 3345 	ldrb.w	r3, [r5, #837]	; 0x345
    12aa:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
    12ae:	f895 3346 	ldrb.w	r3, [r5, #838]	; 0x346
    12b2:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    12b6:	f895 3347 	ldrb.w	r3, [r5, #839]	; 0x347
    12ba:	f884 3347 	strb.w	r3, [r4, #839]	; 0x347
    12be:	f895 3348 	ldrb.w	r3, [r5, #840]	; 0x348
    12c2:	f884 3348 	strb.w	r3, [r4, #840]	; 0x348
    12c6:	f895 3349 	ldrb.w	r3, [r5, #841]	; 0x349
    12ca:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349
    12ce:	f895 334a 	ldrb.w	r3, [r5, #842]	; 0x34a
    12d2:	f884 334a 	strb.w	r3, [r4, #842]	; 0x34a
    12d6:	f895 334b 	ldrb.w	r3, [r5, #843]	; 0x34b
    12da:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
    12de:	f895 334c 	ldrb.w	r3, [r5, #844]	; 0x34c
    12e2:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    12e6:	f895 334d 	ldrb.w	r3, [r5, #845]	; 0x34d
    12ea:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
    12ee:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    12f2:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    12f6:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
    12fa:	f884 334f 	strb.w	r3, [r4, #847]	; 0x34f
    12fe:	f895 3350 	ldrb.w	r3, [r5, #848]	; 0x350
    1302:	f884 3350 	strb.w	r3, [r4, #848]	; 0x350
    1306:	f895 3351 	ldrb.w	r3, [r5, #849]	; 0x351
    130a:	f884 3351 	strb.w	r3, [r4, #849]	; 0x351
    130e:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    1312:	f884 3352 	strb.w	r3, [r4, #850]	; 0x352
    1316:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    131a:	f884 3353 	strb.w	r3, [r4, #851]	; 0x353
    131e:	f895 1354 	ldrb.w	r1, [r5, #852]	; 0x354
    1322:	f8d5 2358 	ldr.w	r2, [r5, #856]	; 0x358
    1326:	f895 335c 	ldrb.w	r3, [r5, #860]	; 0x35c
    132a:	f884 335c 	strb.w	r3, [r4, #860]	; 0x35c
    132e:	f884 1354 	strb.w	r1, [r4, #852]	; 0x354
    1332:	f8c4 2358 	str.w	r2, [r4, #856]	; 0x358
    1336:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
    133a:	f884 335d 	strb.w	r3, [r4, #861]	; 0x35d
    133e:	f504 7258 	add.w	r2, r4, #864	; 0x360
    1342:	f505 7157 	add.w	r1, r5, #860	; 0x35c
    1346:	f504 638a 	add.w	r3, r4, #1104	; 0x450
    134a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    134e:	f842 0b04 	str.w	r0, [r2], #4
    1352:	4293      	cmp	r3, r2
    1354:	d1f9      	bne.n	134a <LEDStruct::operator=(LEDStruct const&)+0x362>
    1356:	f205 424c 	addw	r2, r5, #1100	; 0x44c
    135a:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
    135e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1362:	f843 1b04 	str.w	r1, [r3], #4
    1366:	4283      	cmp	r3, r0
    1368:	d1f9      	bne.n	135e <LEDStruct::operator=(LEDStruct const&)+0x376>
    136a:	f205 523f 	addw	r2, r5, #1343	; 0x53f
    136e:	f204 507c 	addw	r0, r4, #1404	; 0x57c
    1372:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1376:	f803 1b01 	strb.w	r1, [r3], #1
    137a:	4283      	cmp	r3, r0
    137c:	d1f9      	bne.n	1372 <LEDStruct::operator=(LEDStruct const&)+0x38a>
    137e:	f505 61af 	add.w	r1, r5, #1400	; 0x578
    1382:	f204 626c 	addw	r2, r4, #1644	; 0x66c
    1386:	f851 0f04 	ldr.w	r0, [r1, #4]!
    138a:	f843 0b04 	str.w	r0, [r3], #4
    138e:	429a      	cmp	r2, r3
    1390:	d1f9      	bne.n	1386 <LEDStruct::operator=(LEDStruct const&)+0x39e>
    1392:	4613      	mov	r3, r2
    1394:	f204 705c 	addw	r0, r4, #1884	; 0x75c
    1398:	f505 62cd 	add.w	r2, r5, #1640	; 0x668
    139c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13a0:	f843 1b04 	str.w	r1, [r3], #4
    13a4:	4298      	cmp	r0, r3
    13a6:	d1f9      	bne.n	139c <LEDStruct::operator=(LEDStruct const&)+0x3b4>
    13a8:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    13ac:	f884 375c 	strb.w	r3, [r4, #1884]	; 0x75c
    13b0:	f895 375d 	ldrb.w	r3, [r5, #1885]	; 0x75d
    13b4:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    13b8:	f895 375e 	ldrb.w	r3, [r5, #1886]	; 0x75e
    13bc:	f884 375e 	strb.w	r3, [r4, #1886]	; 0x75e
    13c0:	f8b5 1760 	ldrh.w	r1, [r5, #1888]	; 0x760
    13c4:	f8b5 2762 	ldrh.w	r2, [r5, #1890]	; 0x762
    13c8:	f8b5 3764 	ldrh.w	r3, [r5, #1892]	; 0x764
    13cc:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764
    13d0:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
    13d4:	f8a4 2762 	strh.w	r2, [r4, #1890]	; 0x762
    13d8:	f895 3766 	ldrb.w	r3, [r5, #1894]	; 0x766
    13dc:	f884 3766 	strb.w	r3, [r4, #1894]	; 0x766
    13e0:	f895 3767 	ldrb.w	r3, [r5, #1895]	; 0x767
    13e4:	f884 3767 	strb.w	r3, [r4, #1895]	; 0x767
    13e8:	f895 3768 	ldrb.w	r3, [r5, #1896]	; 0x768
    13ec:	f884 3768 	strb.w	r3, [r4, #1896]	; 0x768
    13f0:	f895 3769 	ldrb.w	r3, [r5, #1897]	; 0x769
    13f4:	f884 3769 	strb.w	r3, [r4, #1897]	; 0x769
    13f8:	f895 376a 	ldrb.w	r3, [r5, #1898]	; 0x76a
    13fc:	f884 376a 	strb.w	r3, [r4, #1898]	; 0x76a
    1400:	f505 61ed 	add.w	r1, r5, #1896	; 0x768
    1404:	f204 736c 	addw	r3, r4, #1900	; 0x76c
    1408:	f204 728c 	addw	r2, r4, #1932	; 0x78c
    140c:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1410:	f843 0b04 	str.w	r0, [r3], #4
    1414:	429a      	cmp	r2, r3
    1416:	d1f9      	bne.n	140c <LEDStruct::operator=(LEDStruct const&)+0x424>
    1418:	f505 61f1 	add.w	r1, r5, #1928	; 0x788
    141c:	f204 73ac 	addw	r3, r4, #1964	; 0x7ac
    1420:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1424:	f842 0b04 	str.w	r0, [r2], #4
    1428:	4293      	cmp	r3, r2
    142a:	d1f9      	bne.n	1420 <LEDStruct::operator=(LEDStruct const&)+0x438>
    142c:	f505 62f5 	add.w	r2, r5, #1960	; 0x7a8
    1430:	f204 70cc 	addw	r0, r4, #1996	; 0x7cc
    1434:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1438:	f843 1b04 	str.w	r1, [r3], #4
    143c:	4283      	cmp	r3, r0
    143e:	d1f9      	bne.n	1434 <LEDStruct::operator=(LEDStruct const&)+0x44c>
    1440:	f505 62f9 	add.w	r2, r5, #1992	; 0x7c8
    1444:	f204 70ec 	addw	r0, r4, #2028	; 0x7ec
    1448:	f852 1f04 	ldr.w	r1, [r2, #4]!
    144c:	f843 1b04 	str.w	r1, [r3], #4
    1450:	4283      	cmp	r3, r0
    1452:	d1f9      	bne.n	1448 <LEDStruct::operator=(LEDStruct const&)+0x460>
    1454:	f505 62fd 	add.w	r2, r5, #2024	; 0x7e8
    1458:	f604 000c 	addw	r0, r4, #2060	; 0x80c
    145c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1460:	f843 1b04 	str.w	r1, [r3], #4
    1464:	4283      	cmp	r3, r0
    1466:	d1f9      	bne.n	145c <LEDStruct::operator=(LEDStruct const&)+0x474>
    1468:	f605 0208 	addw	r2, r5, #2056	; 0x808
    146c:	f604 002c 	addw	r0, r4, #2092	; 0x82c
    1470:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1474:	f843 1b04 	str.w	r1, [r3], #4
    1478:	4283      	cmp	r3, r0
    147a:	d1f9      	bne.n	1470 <LEDStruct::operator=(LEDStruct const&)+0x488>
    147c:	f8b5 382c 	ldrh.w	r3, [r5, #2092]	; 0x82c
    1480:	f8a4 382c 	strh.w	r3, [r4, #2092]	; 0x82c
    1484:	f895 382e 	ldrb.w	r3, [r5, #2094]	; 0x82e
    1488:	f884 382e 	strb.w	r3, [r4, #2094]	; 0x82e
    148c:	f8b5 1830 	ldrh.w	r1, [r5, #2096]	; 0x830
    1490:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    1494:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
    1498:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    149c:	f8a4 1830 	strh.w	r1, [r4, #2096]	; 0x830
    14a0:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
    14a4:	f895 383c 	ldrb.w	r3, [r5, #2108]	; 0x83c
    14a8:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    14ac:	f895 383d 	ldrb.w	r3, [r5, #2109]	; 0x83d
    14b0:	f884 383d 	strb.w	r3, [r4, #2109]	; 0x83d
    14b4:	f895 383e 	ldrb.w	r3, [r5, #2110]	; 0x83e
    14b8:	f884 383e 	strb.w	r3, [r4, #2110]	; 0x83e
    14bc:	f895 383f 	ldrb.w	r3, [r5, #2111]	; 0x83f
    14c0:	f884 383f 	strb.w	r3, [r4, #2111]	; 0x83f
    14c4:	f895 3840 	ldrb.w	r3, [r5, #2112]	; 0x840
    14c8:	f884 3840 	strb.w	r3, [r4, #2112]	; 0x840
    14cc:	f895 0841 	ldrb.w	r0, [r5, #2113]	; 0x841
    14d0:	f8d5 3848 	ldr.w	r3, [r5, #2120]	; 0x848
    14d4:	f895 1842 	ldrb.w	r1, [r5, #2114]	; 0x842
    14d8:	f8d5 2844 	ldr.w	r2, [r5, #2116]	; 0x844
    14dc:	f8c4 2844 	str.w	r2, [r4, #2116]	; 0x844
    14e0:	f884 0841 	strb.w	r0, [r4, #2113]	; 0x841
    14e4:	f884 1842 	strb.w	r1, [r4, #2114]	; 0x842
    14e8:	f8c4 3848 	str.w	r3, [r4, #2120]	; 0x848
    14ec:	f895 384c 	ldrb.w	r3, [r5, #2124]	; 0x84c
    14f0:	f884 384c 	strb.w	r3, [r4, #2124]	; 0x84c
    14f4:	f895 384d 	ldrb.w	r3, [r5, #2125]	; 0x84d
    14f8:	f884 384d 	strb.w	r3, [r4, #2125]	; 0x84d
    14fc:	f895 384e 	ldrb.w	r3, [r5, #2126]	; 0x84e
    1500:	f884 384e 	strb.w	r3, [r4, #2126]	; 0x84e
    1504:	f895 384f 	ldrb.w	r3, [r5, #2127]	; 0x84f
    1508:	f884 384f 	strb.w	r3, [r4, #2127]	; 0x84f
    150c:	f895 3850 	ldrb.w	r3, [r5, #2128]	; 0x850
    1510:	f884 3850 	strb.w	r3, [r4, #2128]	; 0x850
    1514:	f895 3851 	ldrb.w	r3, [r5, #2129]	; 0x851
    1518:	f884 3851 	strb.w	r3, [r4, #2129]	; 0x851
    151c:	f895 3852 	ldrb.w	r3, [r5, #2130]	; 0x852
    1520:	f884 3852 	strb.w	r3, [r4, #2130]	; 0x852
    1524:	f895 3853 	ldrb.w	r3, [r5, #2131]	; 0x853
    1528:	f884 3853 	strb.w	r3, [r4, #2131]	; 0x853
    152c:	f895 3854 	ldrb.w	r3, [r5, #2132]	; 0x854
    1530:	f884 3854 	strb.w	r3, [r4, #2132]	; 0x854
    1534:	f895 3855 	ldrb.w	r3, [r5, #2133]	; 0x855
    1538:	f884 3855 	strb.w	r3, [r4, #2133]	; 0x855
    153c:	4620      	mov	r0, r4
    153e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001540 <finish_transition()>:

void finish_transition() {
    1540:	b530      	push	{r4, r5, lr}
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1542:	4d1d      	ldr	r5, [pc, #116]	; (15b8 <finish_transition()+0x78>)
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    1544:	4c1d      	ldr	r4, [pc, #116]	; (15bc <finish_transition()+0x7c>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
    1546:	b083      	sub	sp, #12
	in_transition = 0;
    1548:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    154a:	4628      	mov	r0, r5
    154c:	aa01      	add	r2, sp, #4
    154e:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    1550:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1552:	f88d 3004 	strb.w	r3, [sp, #4]
    1556:	f88d 3005 	strb.w	r3, [sp, #5]
    155a:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    155e:	f009 fef7 	bl	b350 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds = next_leds;
    1562:	4628      	mov	r0, r5
    1564:	4916      	ldr	r1, [pc, #88]	; (15c0 <finish_transition()+0x80>)
    1566:	f7ff fd3f 	bl	fe8 <LEDStruct::operator=(LEDStruct const&)>
	if (curr_leds.use_overlay) { curr_over_leds = next_over_leds; curr_over_leds.array_type = CURR_OVERLAY; }
    156a:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    156e:	b13b      	cbz	r3, 1580 <finish_transition()+0x40>
    1570:	4c14      	ldr	r4, [pc, #80]	; (15c4 <finish_transition()+0x84>)
    1572:	4915      	ldr	r1, [pc, #84]	; (15c8 <finish_transition()+0x88>)
    1574:	4620      	mov	r0, r4
    1576:	f7ff fd37 	bl	fe8 <LEDStruct::operator=(LEDStruct const&)>
    157a:	2302      	movs	r3, #2
    157c:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
    1580:	2400      	movs	r4, #0
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1582:	aa01      	add	r2, sp, #4
    1584:	2196      	movs	r1, #150	; 0x96
    1586:	480e      	ldr	r0, [pc, #56]	; (15c0 <finish_transition()+0x80>)
    1588:	f88d 4004 	strb.w	r4, [sp, #4]
    158c:	f88d 4005 	strb.w	r4, [sp, #5]
    1590:	f88d 4006 	strb.w	r4, [sp, #6]
    1594:	f009 fedc 	bl	b350 <fill_solid(CRGB*, int, CRGB const&)>
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
    1598:	aa01      	add	r2, sp, #4
    159a:	2196      	movs	r1, #150	; 0x96
    159c:	480a      	ldr	r0, [pc, #40]	; (15c8 <finish_transition()+0x88>)
    159e:	f88d 4004 	strb.w	r4, [sp, #4]
    15a2:	f88d 4005 	strb.w	r4, [sp, #5]
    15a6:	f88d 4006 	strb.w	r4, [sp, #6]
    15aa:	f009 fed1 	bl	b350 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    15ae:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
}
    15b2:	b003      	add	sp, #12
    15b4:	bd30      	pop	{r4, r5, pc}
    15b6:	bf00      	nop
    15b8:	1fffa6f4 	.word	0x1fffa6f4
    15bc:	1fff9520 	.word	0x1fff9520
    15c0:	1fff8cb8 	.word	0x1fff8cb8
    15c4:	1fff9628 	.word	0x1fff9628
    15c8:	1fff9e98 	.word	0x1fff9e98

000015cc <blending()>:

void blending() {
    15cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15d0:	4d2f      	ldr	r5, [pc, #188]	; (1690 <blending()+0xc4>)
    15d2:	4e30      	ldr	r6, [pc, #192]	; (1694 <blending()+0xc8>)
    15d4:	4c30      	ldr	r4, [pc, #192]	; (1698 <blending()+0xcc>)
    15d6:	4f31      	ldr	r7, [pc, #196]	; (169c <blending()+0xd0>)
    15d8:	b085      	sub	sp, #20
    15da:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    15de:	4632      	mov	r2, r6
    15e0:	4629      	mov	r1, r5
    15e2:	783b      	ldrb	r3, [r7, #0]
    15e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 169c <blending()+0xd0>
    15e8:	a803      	add	r0, sp, #12
    15ea:	3503      	adds	r5, #3
    15ec:	f009 ffa2 	bl	b534 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    15f4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    15f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15fc:	7021      	strb	r1, [r4, #0]
    15fe:	4545      	cmp	r5, r8
        g = rhs.g;
    1600:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1602:	70a3      	strb	r3, [r4, #2]
    1604:	f106 0603 	add.w	r6, r6, #3
    1608:	f104 0403 	add.w	r4, r4, #3
    160c:	d1e7      	bne.n	15de <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    160e:	4e24      	ldr	r6, [pc, #144]	; (16a0 <blending()+0xd4>)
    1610:	6833      	ldr	r3, [r6, #0]
    1612:	07db      	lsls	r3, r3, #31
    1614:	d51f      	bpl.n	1656 <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1616:	4d23      	ldr	r5, [pc, #140]	; (16a4 <blending()+0xd8>)
    1618:	4c23      	ldr	r4, [pc, #140]	; (16a8 <blending()+0xdc>)
    161a:	682b      	ldr	r3, [r5, #0]
    161c:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    161e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1622:	9b03      	ldr	r3, [sp, #12]
    1624:	1a5b      	subs	r3, r3, r1
    1626:	4293      	cmp	r3, r2
    1628:	d30c      	bcc.n	1644 <blending()+0x78>
    162a:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    162c:	682a      	ldr	r2, [r5, #0]
    162e:	9202      	str	r2, [sp, #8]
    1630:	3301      	adds	r3, #1
	return ret;
    1632:	9a02      	ldr	r2, [sp, #8]
    1634:	6022      	str	r2, [r4, #0]
    1636:	b2db      	uxtb	r3, r3
    1638:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    163a:	2bff      	cmp	r3, #255	; 0xff
    163c:	d006      	beq.n	164c <blending()+0x80>
		finish_transition();
	}
}
    163e:	b005      	add	sp, #20
    1640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1644:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    1648:	2bff      	cmp	r3, #255	; 0xff
    164a:	d1f8      	bne.n	163e <blending()+0x72>
		finish_transition();
    164c:	f7ff ff78 	bl	1540 <finish_transition()>
	}
}
    1650:	b005      	add	sp, #20
    1652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1656:	4630      	mov	r0, r6
    1658:	f00a feb6 	bl	c3c8 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    165c:	4d11      	ldr	r5, [pc, #68]	; (16a4 <blending()+0xd8>)
    165e:	b950      	cbnz	r0, 1676 <blending()+0xaa>
    1660:	4c11      	ldr	r4, [pc, #68]	; (16a8 <blending()+0xdc>)
    1662:	682b      	ldr	r3, [r5, #0]
    1664:	9303      	str	r3, [sp, #12]
    1666:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    166a:	9b03      	ldr	r3, [sp, #12]
    166c:	1a5b      	subs	r3, r3, r1
    166e:	4293      	cmp	r3, r2
    1670:	d2db      	bcs.n	162a <blending()+0x5e>
    1672:	783b      	ldrb	r3, [r7, #0]
    1674:	e7e1      	b.n	163a <blending()+0x6e>
    1676:	4b0d      	ldr	r3, [pc, #52]	; (16ac <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1678:	682a      	ldr	r2, [r5, #0]
    167a:	781b      	ldrb	r3, [r3, #0]
    167c:	4c0a      	ldr	r4, [pc, #40]	; (16a8 <blending()+0xdc>)
    167e:	9201      	str	r2, [sp, #4]
	return ret;
    1680:	9a01      	ldr	r2, [sp, #4]
    1682:	6022      	str	r2, [r4, #0]
    1684:	009b      	lsls	r3, r3, #2
    1686:	4630      	mov	r0, r6
    1688:	6063      	str	r3, [r4, #4]
    168a:	f00a fea3 	bl	c3d4 <__cxa_guard_release>
    168e:	e7e8      	b.n	1662 <blending()+0x96>
    1690:	1fffa6f4 	.word	0x1fffa6f4
    1694:	1fff8cb8 	.word	0x1fff8cb8
    1698:	1fffaf4c 	.word	0x1fffaf4c
    169c:	1fff8cb6 	.word	0x1fff8cb6
    16a0:	1fff9614 	.word	0x1fff9614
    16a4:	1fffb18c 	.word	0x1fffb18c
    16a8:	1fff9524 	.word	0x1fff9524
    16ac:	1fff9e85 	.word	0x1fff9e85

000016b0 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    16b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    16b4:	4e94      	ldr	r6, [pc, #592]	; (1908 <wipedown()+0x258>)
    16b6:	f896 c000 	ldrb.w	ip, [r6]
    16ba:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    16be:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    16c0:	2b00      	cmp	r3, #0
    16c2:	f000 811e 	beq.w	1902 <wipedown()+0x252>
    16c6:	f103 3bff 	add.w	fp, r3, #4294967295
    16ca:	fa1f fb8b 	uxth.w	fp, fp
    16ce:	488f      	ldr	r0, [pc, #572]	; (190c <wipedown()+0x25c>)
    16d0:	498f      	ldr	r1, [pc, #572]	; (1910 <wipedown()+0x260>)
    16d2:	f10b 0b01 	add.w	fp, fp, #1
    16d6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    16da:	4483      	add	fp, r0
    16dc:	4602      	mov	r2, r0
    16de:	460d      	mov	r5, r1
    16e0:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16e2:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    16e4:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    16e8:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16ec:	7027      	strb	r7, [r4, #0]
    16ee:	3203      	adds	r2, #3
    16f0:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    16f4:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    16f8:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16fc:	f884 a001 	strb.w	sl, [r4, #1]
    1700:	455a      	cmp	r2, fp
        b = rhs.b;
    1702:	f884 9002 	strb.w	r9, [r4, #2]
    1706:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    170a:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    170e:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    1712:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    1716:	f104 0403 	add.w	r4, r4, #3
    171a:	f1a1 0103 	sub.w	r1, r1, #3
    171e:	d1e0      	bne.n	16e2 <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1720:	2b4a      	cmp	r3, #74	; 0x4a
    1722:	d827      	bhi.n	1774 <wipedown()+0xc4>
    1724:	487b      	ldr	r0, [pc, #492]	; (1914 <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    1726:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    172a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    172e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1732:	eb00 0801 	add.w	r8, r0, r1
    1736:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    173a:	3301      	adds	r3, #1
    173c:	186f      	adds	r7, r5, r1
    173e:	f810 b001 	ldrb.w	fp, [r0, r1]
    1742:	f805 b001 	strb.w	fp, [r5, r1]
    1746:	18ac      	adds	r4, r5, r2
    1748:	b29b      	uxth	r3, r3
        g = rhs.g;
    174a:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    174e:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1752:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1756:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    175a:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    175e:	f887 a001 	strb.w	sl, [r7, #1]
    1762:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1764:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1768:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    176c:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1770:	70a1      	strb	r1, [r4, #2]
    1772:	d1d8      	bne.n	1726 <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1774:	f10c 3aff 	add.w	sl, ip, #4294967295
    1778:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    177c:	2480      	movs	r4, #128	; 0x80
    177e:	eb05 0b0a 	add.w	fp, r5, sl
    1782:	4659      	mov	r1, fp
    1784:	4623      	mov	r3, r4
    1786:	a803      	add	r0, sp, #12
    1788:	aa02      	add	r2, sp, #8
    178a:	2700      	movs	r7, #0
    178c:	f88d 4009 	strb.w	r4, [sp, #9]
    1790:	f88d 400a 	strb.w	r4, [sp, #10]
    1794:	f88d 7008 	strb.w	r7, [sp, #8]
    1798:	f009 fecc 	bl	b534 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    179c:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    17a4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    17a8:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17ac:	f805 300a 	strb.w	r3, [r5, sl]
    17b0:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    17b4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    17b8:	eb05 0908 	add.w	r9, r5, r8
    17bc:	4649      	mov	r1, r9
    17be:	4623      	mov	r3, r4
        g = rhs.g;
    17c0:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    17c4:	f88b 0002 	strb.w	r0, [fp, #2]
    17c8:	aa02      	add	r2, sp, #8
    17ca:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    17cc:	f88d 7008 	strb.w	r7, [sp, #8]
    17d0:	f88d 4009 	strb.w	r4, [sp, #9]
    17d4:	f88d 400a 	strb.w	r4, [sp, #10]
    17d8:	f009 feac 	bl	b534 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    17dc:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17de:	f89d 100c 	ldrb.w	r1, [sp, #12]
    17e2:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    17e6:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    17ea:	f89d 000d 	ldrb.w	r0, [sp, #13]
    17ee:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17f2:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    17f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    17fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    17fe:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1802:	eb05 0e0c 	add.w	lr, r5, ip
    1806:	1868      	adds	r0, r5, r1
    1808:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos < ONE_SIDE - 1) {
    180a:	2a49      	cmp	r2, #73	; 0x49
    180c:	f805 300c 	strb.w	r3, [r5, ip]
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1810:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1910 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    1814:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1818:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    181c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1908 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1820:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    1822:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    1824:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
    1826:	d92e      	bls.n	1886 <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1828:	4f3b      	ldr	r7, [pc, #236]	; (1918 <wipedown()+0x268>)
    182a:	683b      	ldr	r3, [r7, #0]
    182c:	07db      	lsls	r3, r3, #31
    182e:	d517      	bpl.n	1860 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1830:	4d3a      	ldr	r5, [pc, #232]	; (191c <wipedown()+0x26c>)
    1832:	4c3b      	ldr	r4, [pc, #236]	; (1920 <wipedown()+0x270>)
    1834:	682b      	ldr	r3, [r5, #0]
    1836:	9303      	str	r3, [sp, #12]
    1838:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    183c:	9b03      	ldr	r3, [sp, #12]
    183e:	1a5b      	subs	r3, r3, r1
    1840:	4293      	cmp	r3, r2
    1842:	7833      	ldrb	r3, [r6, #0]
    1844:	d306      	bcc.n	1854 <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1846:	682a      	ldr	r2, [r5, #0]
    1848:	9202      	str	r2, [sp, #8]
    184a:	3b01      	subs	r3, #1
	return ret;
    184c:	9a02      	ldr	r2, [sp, #8]
    184e:	6022      	str	r2, [r4, #0]
    1850:	b2db      	uxtb	r3, r3
    1852:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    1854:	b90b      	cbnz	r3, 185a <wipedown()+0x1aa>
		finish_transition();
    1856:	f7ff fe73 	bl	1540 <finish_transition()>
	}
}
    185a:	b005      	add	sp, #20
    185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1860:	4638      	mov	r0, r7
    1862:	f00a fdb1 	bl	c3c8 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1866:	4d2d      	ldr	r5, [pc, #180]	; (191c <wipedown()+0x26c>)
    1868:	2800      	cmp	r0, #0
    186a:	d0e2      	beq.n	1832 <wipedown()+0x182>
    186c:	4b2d      	ldr	r3, [pc, #180]	; (1924 <wipedown()+0x274>)
    186e:	682a      	ldr	r2, [r5, #0]
    1870:	781b      	ldrb	r3, [r3, #0]
    1872:	4c2b      	ldr	r4, [pc, #172]	; (1920 <wipedown()+0x270>)
    1874:	9201      	str	r2, [sp, #4]
	return ret;
    1876:	9a01      	ldr	r2, [sp, #4]
    1878:	6022      	str	r2, [r4, #0]
    187a:	009b      	lsls	r3, r3, #2
    187c:	4638      	mov	r0, r7
    187e:	6063      	str	r3, [r4, #4]
    1880:	f00a fda8 	bl	c3d4 <__cxa_guard_release>
    1884:	e7d6      	b.n	1834 <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1886:	1c55      	adds	r5, r2, #1
    1888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    188c:	eb08 0a05 	add.w	sl, r8, r5
    1890:	4651      	mov	r1, sl
    1892:	4623      	mov	r3, r4
    1894:	aa02      	add	r2, sp, #8
    1896:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1898:	f88d 7008 	strb.w	r7, [sp, #8]
    189c:	f88d 4009 	strb.w	r4, [sp, #9]
    18a0:	f88d 400a 	strb.w	r4, [sp, #10]
    18a4:	f009 fe46 	bl	b534 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    18a8:	f899 3000 	ldrb.w	r3, [r9]
    18ac:	f88d 7008 	strb.w	r7, [sp, #8]
    18b0:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    18b4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    18b8:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18bc:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    18c0:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    18c4:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18c8:	f808 c005 	strb.w	ip, [r8, r5]
    18cc:	aa02      	add	r2, sp, #8
    18ce:	4623      	mov	r3, r4
    18d0:	4649      	mov	r1, r9
    18d2:	a803      	add	r0, sp, #12
        g = rhs.g;
    18d4:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    18d8:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18dc:	f88d 4009 	strb.w	r4, [sp, #9]
    18e0:	f88d 400a 	strb.w	r4, [sp, #10]
    18e4:	f009 fe26 	bl	b534 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    18ec:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    18f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18f4:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    18f8:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    18fc:	f889 3002 	strb.w	r3, [r9, #2]
    1900:	e792      	b.n	1828 <wipedown()+0x178>
    1902:	4d03      	ldr	r5, [pc, #12]	; (1910 <wipedown()+0x260>)
    1904:	e70e      	b.n	1724 <wipedown()+0x74>
    1906:	bf00      	nop
    1908:	1fff955c 	.word	0x1fff955c
    190c:	1fffa6f4 	.word	0x1fffa6f4
    1910:	1fffaf4c 	.word	0x1fffaf4c
    1914:	1fff8cb8 	.word	0x1fff8cb8
    1918:	1fff9618 	.word	0x1fff9618
    191c:	1fffb18c 	.word	0x1fffb18c
    1920:	1fff9538 	.word	0x1fff9538
    1924:	1fff9e85 	.word	0x1fff9e85

00001928 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    192c:	4ba2      	ldr	r3, [pc, #648]	; (1bb8 <wipeup()+0x290>)
    192e:	781d      	ldrb	r5, [r3, #0]
    1930:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1932:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1934:	2b00      	cmp	r3, #0
    1936:	f000 8130 	beq.w	1b9a <wipeup()+0x272>
    193a:	f103 3bff 	add.w	fp, r3, #4294967295
    193e:	fa1f fb8b 	uxth.w	fp, fp
    1942:	489e      	ldr	r0, [pc, #632]	; (1bbc <wipeup()+0x294>)
    1944:	499e      	ldr	r1, [pc, #632]	; (1bc0 <wipeup()+0x298>)
    1946:	f10b 0b01 	add.w	fp, fp, #1
    194a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    194e:	4483      	add	fp, r0
    1950:	4602      	mov	r2, r0
    1952:	460c      	mov	r4, r1
    1954:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1956:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    195a:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    195e:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1962:	f886 e000 	strb.w	lr, [r6]
    1966:	3203      	adds	r2, #3
    1968:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    196c:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    1970:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1974:	f886 a001 	strb.w	sl, [r6, #1]
    1978:	455a      	cmp	r2, fp
        b = rhs.b;
    197a:	f886 9002 	strb.w	r9, [r6, #2]
    197e:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1982:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    1986:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    198a:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    198e:	f106 0603 	add.w	r6, r6, #3
    1992:	f1a1 0103 	sub.w	r1, r1, #3
    1996:	d1de      	bne.n	1956 <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1998:	2b4a      	cmp	r3, #74	; 0x4a
    199a:	d828      	bhi.n	19ee <wipeup()+0xc6>
    199c:	4889      	ldr	r0, [pc, #548]	; (1bc4 <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    199e:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19a2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    19a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    19aa:	eb00 0801 	add.w	r8, r0, r1
    19ae:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    19b2:	3301      	adds	r3, #1
    19b4:	eb04 0e01 	add.w	lr, r4, r1
    19b8:	f810 b001 	ldrb.w	fp, [r0, r1]
    19bc:	f804 b001 	strb.w	fp, [r4, r1]
    19c0:	18a6      	adds	r6, r4, r2
    19c2:	b29b      	uxth	r3, r3
        g = rhs.g;
    19c4:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    19c8:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19cc:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19d0:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    19d4:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19d8:	f88e a001 	strb.w	sl, [lr, #1]
    19dc:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    19de:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19e2:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    19e6:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    19ea:	70b1      	strb	r1, [r6, #2]
    19ec:	d1d7      	bne.n	199e <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    19ee:	2d00      	cmp	r5, #0
    19f0:	f040 808f 	bne.w	1b12 <wipeup()+0x1ea>
    19f4:	f10d 0a0c 	add.w	sl, sp, #12
    19f8:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    19fc:	4b6e      	ldr	r3, [pc, #440]	; (1bb8 <wipeup()+0x290>)
    19fe:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1a00:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a04:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1a08:	1c5a      	adds	r2, r3, #1
    1a0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a0e:	eb04 0e03 	add.w	lr, r4, r3
    1a12:	1825      	adds	r5, r4, r0
    1a14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a18:	2680      	movs	r6, #128	; 0x80
    1a1a:	eb04 0902 	add.w	r9, r4, r2
    1a1e:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a20:	22ff      	movs	r2, #255	; 0xff
    1a22:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a24:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    1a28:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1a2c:	f88e 2002 	strb.w	r2, [lr, #2]
    1a30:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a32:	5422      	strb	r2, [r4, r0]
    1a34:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1a36:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1a38:	70aa      	strb	r2, [r5, #2]
    1a3a:	4650      	mov	r0, sl
    1a3c:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a3e:	f88d 6009 	strb.w	r6, [sp, #9]
    1a42:	f88d 600a 	strb.w	r6, [sp, #10]
    1a46:	f88d 8008 	strb.w	r8, [sp, #8]
    1a4a:	f009 fd73 	bl	b534 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1a4e:	4b5a      	ldr	r3, [pc, #360]	; (1bb8 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a50:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1a54:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1a56:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a5a:	f88d 8008 	strb.w	r8, [sp, #8]
    1a5e:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1a62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1a66:	eb04 0805 	add.w	r8, r4, r5
    1a6a:	4633      	mov	r3, r6
    1a6c:	f88d 6009 	strb.w	r6, [sp, #9]
    1a70:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1a74:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a78:	55e1      	strb	r1, [r4, r7]
    1a7a:	465a      	mov	r2, fp
    1a7c:	4650      	mov	r0, sl
    1a7e:	4641      	mov	r1, r8
        g = rhs.g;
    1a80:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1a84:	f889 6002 	strb.w	r6, [r9, #2]
    1a88:	f009 fd54 	bl	b534 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a8c:	4b4e      	ldr	r3, [pc, #312]	; (1bc8 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a8e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1a92:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1a94:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1a98:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a9c:	5560      	strb	r0, [r4, r5]
    1a9e:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1aa0:	4845      	ldr	r0, [pc, #276]	; (1bb8 <wipeup()+0x290>)
        g = rhs.g;
    1aa2:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1aa6:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1aaa:	d520      	bpl.n	1aee <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1aac:	4d47      	ldr	r5, [pc, #284]	; (1bcc <wipeup()+0x2a4>)
    1aae:	4c48      	ldr	r4, [pc, #288]	; (1bd0 <wipeup()+0x2a8>)
    1ab0:	682b      	ldr	r3, [r5, #0]
    1ab2:	9303      	str	r3, [sp, #12]
    1ab4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1ab8:	9b03      	ldr	r3, [sp, #12]
    1aba:	1a5b      	subs	r3, r3, r1
    1abc:	4293      	cmp	r3, r2
    1abe:	d30e      	bcc.n	1ade <wipeup()+0x1b6>
    1ac0:	4b3d      	ldr	r3, [pc, #244]	; (1bb8 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ac2:	682a      	ldr	r2, [r5, #0]
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	9202      	str	r2, [sp, #8]
	return ret;
    1ac8:	9a02      	ldr	r2, [sp, #8]
    1aca:	6022      	str	r2, [r4, #0]
    1acc:	3301      	adds	r3, #1
    1ace:	4a3a      	ldr	r2, [pc, #232]	; (1bb8 <wipeup()+0x290>)
    1ad0:	b2db      	uxtb	r3, r3
    1ad2:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1ad4:	2b4a      	cmp	r3, #74	; 0x4a
    1ad6:	d005      	beq.n	1ae4 <wipeup()+0x1bc>
		finish_transition();
	}
}
    1ad8:	b005      	add	sp, #20
    1ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ade:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1ae0:	2b4a      	cmp	r3, #74	; 0x4a
    1ae2:	d1f9      	bne.n	1ad8 <wipeup()+0x1b0>
		finish_transition();
    1ae4:	f7ff fd2c 	bl	1540 <finish_transition()>
	}
}
    1ae8:	b005      	add	sp, #20
    1aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1aee:	4836      	ldr	r0, [pc, #216]	; (1bc8 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1af0:	4d36      	ldr	r5, [pc, #216]	; (1bcc <wipeup()+0x2a4>)
    1af2:	f00a fc69 	bl	c3c8 <__cxa_guard_acquire>
    1af6:	2800      	cmp	r0, #0
    1af8:	d151      	bne.n	1b9e <wipeup()+0x276>
    1afa:	4c35      	ldr	r4, [pc, #212]	; (1bd0 <wipeup()+0x2a8>)
    1afc:	682b      	ldr	r3, [r5, #0]
    1afe:	9303      	str	r3, [sp, #12]
    1b00:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1b04:	9b03      	ldr	r3, [sp, #12]
    1b06:	1a5b      	subs	r3, r3, r1
    1b08:	4293      	cmp	r3, r2
    1b0a:	d2d9      	bcs.n	1ac0 <wipeup()+0x198>
    1b0c:	4b2a      	ldr	r3, [pc, #168]	; (1bb8 <wipeup()+0x290>)
    1b0e:	781b      	ldrb	r3, [r3, #0]
    1b10:	e7e0      	b.n	1ad4 <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1b12:	3d01      	subs	r5, #1
    1b14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b18:	2680      	movs	r6, #128	; 0x80
    1b1a:	eb04 0905 	add.w	r9, r4, r5
    1b1e:	f10d 0a0c 	add.w	sl, sp, #12
    1b22:	f10d 0b08 	add.w	fp, sp, #8
    1b26:	f04f 0800 	mov.w	r8, #0
    1b2a:	4649      	mov	r1, r9
    1b2c:	4633      	mov	r3, r6
    1b2e:	4650      	mov	r0, sl
    1b30:	465a      	mov	r2, fp
    1b32:	f88d 8008 	strb.w	r8, [sp, #8]
    1b36:	f88d 6009 	strb.w	r6, [sp, #9]
    1b3a:	f88d 600a 	strb.w	r6, [sp, #10]
    1b3e:	f009 fcf9 	bl	b534 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1b42:	4b1d      	ldr	r3, [pc, #116]	; (1bb8 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b44:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1b48:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1b4a:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1b4e:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b52:	f88d 8008 	strb.w	r8, [sp, #8]
    1b56:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1b5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b5e:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b62:	5562      	strb	r2, [r4, r5]
    1b64:	461f      	mov	r7, r3
    1b66:	4641      	mov	r1, r8
    1b68:	4633      	mov	r3, r6
    1b6a:	465a      	mov	r2, fp
    1b6c:	4650      	mov	r0, sl
        g = rhs.g;
    1b6e:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1b72:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b76:	f88d 6009 	strb.w	r6, [sp, #9]
    1b7a:	f88d 600a 	strb.w	r6, [sp, #10]
    1b7e:	f009 fcd9 	bl	b534 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b82:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1b86:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1b8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b8e:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1b90:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1b94:	f888 3002 	strb.w	r3, [r8, #2]
    1b98:	e730      	b.n	19fc <wipeup()+0xd4>
    1b9a:	4c09      	ldr	r4, [pc, #36]	; (1bc0 <wipeup()+0x298>)
    1b9c:	e6fe      	b.n	199c <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1b9e:	4b0d      	ldr	r3, [pc, #52]	; (1bd4 <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ba0:	682a      	ldr	r2, [r5, #0]
    1ba2:	781b      	ldrb	r3, [r3, #0]
    1ba4:	4c0a      	ldr	r4, [pc, #40]	; (1bd0 <wipeup()+0x2a8>)
    1ba6:	9201      	str	r2, [sp, #4]
	return ret;
    1ba8:	9a01      	ldr	r2, [sp, #4]
    1baa:	6022      	str	r2, [r4, #0]
    1bac:	009b      	lsls	r3, r3, #2
    1bae:	4806      	ldr	r0, [pc, #24]	; (1bc8 <wipeup()+0x2a0>)
    1bb0:	6063      	str	r3, [r4, #4]
    1bb2:	f00a fc0f 	bl	c3d4 <__cxa_guard_release>
    1bb6:	e7a1      	b.n	1afc <wipeup()+0x1d4>
    1bb8:	1fff955c 	.word	0x1fff955c
    1bbc:	1fff8cb8 	.word	0x1fff8cb8
    1bc0:	1fffaf4c 	.word	0x1fffaf4c
    1bc4:	1fffa6f4 	.word	0x1fffa6f4
    1bc8:	1fff961c 	.word	0x1fff961c
    1bcc:	1fffb18c 	.word	0x1fffb18c
    1bd0:	1fff9e88 	.word	0x1fff9e88
    1bd4:	1fff9e85 	.word	0x1fff9e85

00001bd8 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1bd8:	2801      	cmp	r0, #1
    1bda:	d006      	beq.n	1bea <switch_transition(TransitionType)+0x12>
    1bdc:	d303      	bcc.n	1be6 <switch_transition(TransitionType)+0xe>
    1bde:	2802      	cmp	r0, #2
    1be0:	d101      	bne.n	1be6 <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1be2:	f7ff bea1 	b.w	1928 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1be6:	f7ff bcf1 	b.w	15cc <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1bea:	f7ff bd61 	b.w	16b0 <wipedown()>
    1bee:	bf00      	nop

00001bf0 <print_palette(unsigned char)>:
} // waveit()



// Print palettes
void print_palette(uint8_t pn) {
    1bf0:	b510      	push	{r4, lr}
    1bf2:	2110      	movs	r1, #16
    1bf4:	4604      	mov	r4, r0
    1bf6:	4894      	ldr	r0, [pc, #592]	; (1e48 <print_palette(unsigned char)+0x258>)
    1bf8:	f00b fc7e 	bl	d4f8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1bfc:	4621      	mov	r1, r4
    1bfe:	2300      	movs	r3, #0
    1c00:	220a      	movs	r2, #10
    1c02:	4892      	ldr	r0, [pc, #584]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1c04:	f00b fe8c 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c08:	2102      	movs	r1, #2
    1c0a:	4891      	ldr	r0, [pc, #580]	; (1e50 <print_palette(unsigned char)+0x260>)
    1c0c:	f00b fc74 	bl	d4f8 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1c10:	2c5c      	cmp	r4, #92	; 0x5c
    1c12:	f200 8281 	bhi.w	2118 <print_palette(unsigned char)+0x528>
    1c16:	e8df f014 	tbh	[pc, r4, lsl #1]
    1c1a:	027a      	.short	0x027a
    1c1c:	02700275 	.word	0x02700275
    1c20:	0266026b 	.word	0x0266026b
    1c24:	025c0261 	.word	0x025c0261
    1c28:	02520257 	.word	0x02520257
    1c2c:	0248024d 	.word	0x0248024d
    1c30:	023e0243 	.word	0x023e0243
    1c34:	02340239 	.word	0x02340239
    1c38:	022a022f 	.word	0x022a022f
    1c3c:	02200225 	.word	0x02200225
    1c40:	0216021b 	.word	0x0216021b
    1c44:	020c0211 	.word	0x020c0211
    1c48:	02020207 	.word	0x02020207
    1c4c:	01f801fd 	.word	0x01f801fd
    1c50:	01ee01f3 	.word	0x01ee01f3
    1c54:	01e401e9 	.word	0x01e401e9
    1c58:	01da01df 	.word	0x01da01df
    1c5c:	01d001d5 	.word	0x01d001d5
    1c60:	01c601cb 	.word	0x01c601cb
    1c64:	01bc01c1 	.word	0x01bc01c1
    1c68:	01b201b7 	.word	0x01b201b7
    1c6c:	01a801ad 	.word	0x01a801ad
    1c70:	019e01a3 	.word	0x019e01a3
    1c74:	01940199 	.word	0x01940199
    1c78:	018a018f 	.word	0x018a018f
    1c7c:	01800185 	.word	0x01800185
    1c80:	0176017b 	.word	0x0176017b
    1c84:	016c0171 	.word	0x016c0171
    1c88:	01110167 	.word	0x01110167
    1c8c:	0107010c 	.word	0x0107010c
    1c90:	00fd0102 	.word	0x00fd0102
    1c94:	00f300f8 	.word	0x00f300f8
    1c98:	00e900ee 	.word	0x00e900ee
    1c9c:	00df00e4 	.word	0x00df00e4
    1ca0:	00d500da 	.word	0x00d500da
    1ca4:	00cb00d0 	.word	0x00cb00d0
    1ca8:	00c100c6 	.word	0x00c100c6
    1cac:	00b700bc 	.word	0x00b700bc
    1cb0:	00ad00b2 	.word	0x00ad00b2
    1cb4:	00a300a8 	.word	0x00a300a8
    1cb8:	0099009e 	.word	0x0099009e
    1cbc:	008f0094 	.word	0x008f0094
    1cc0:	0085008a 	.word	0x0085008a
    1cc4:	007b0080 	.word	0x007b0080
    1cc8:	00710076 	.word	0x00710076
    1ccc:	0067006c 	.word	0x0067006c
    1cd0:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1cd4:	495f      	ldr	r1, [pc, #380]	; (1e54 <print_palette(unsigned char)+0x264>)
    1cd6:	485d      	ldr	r0, [pc, #372]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1cd8:	f7fe fe5a 	bl	990 <Print::println(char const*)>
    1cdc:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1cde:	495e      	ldr	r1, [pc, #376]	; (1e58 <print_palette(unsigned char)+0x268>)
    1ce0:	485a      	ldr	r0, [pc, #360]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1ce2:	f7fe fe55 	bl	990 <Print::println(char const*)>
    1ce6:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1ce8:	495c      	ldr	r1, [pc, #368]	; (1e5c <print_palette(unsigned char)+0x26c>)
    1cea:	4858      	ldr	r0, [pc, #352]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1cec:	f7fe fe50 	bl	990 <Print::println(char const*)>
    1cf0:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1cf2:	495b      	ldr	r1, [pc, #364]	; (1e60 <print_palette(unsigned char)+0x270>)
    1cf4:	4855      	ldr	r0, [pc, #340]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1cf6:	f7fe fe4b 	bl	990 <Print::println(char const*)>
    1cfa:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1cfc:	4959      	ldr	r1, [pc, #356]	; (1e64 <print_palette(unsigned char)+0x274>)
    1cfe:	4853      	ldr	r0, [pc, #332]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d00:	f7fe fe46 	bl	990 <Print::println(char const*)>
    1d04:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1d06:	4958      	ldr	r1, [pc, #352]	; (1e68 <print_palette(unsigned char)+0x278>)
    1d08:	4850      	ldr	r0, [pc, #320]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d0a:	f7fe fe41 	bl	990 <Print::println(char const*)>
    1d0e:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1d10:	4956      	ldr	r1, [pc, #344]	; (1e6c <print_palette(unsigned char)+0x27c>)
    1d12:	484e      	ldr	r0, [pc, #312]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d14:	f7fe fe3c 	bl	990 <Print::println(char const*)>
    1d18:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1d1a:	4955      	ldr	r1, [pc, #340]	; (1e70 <print_palette(unsigned char)+0x280>)
    1d1c:	484b      	ldr	r0, [pc, #300]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d1e:	f7fe fe37 	bl	990 <Print::println(char const*)>
    1d22:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1d24:	4953      	ldr	r1, [pc, #332]	; (1e74 <print_palette(unsigned char)+0x284>)
    1d26:	4849      	ldr	r0, [pc, #292]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d28:	f7fe fe32 	bl	990 <Print::println(char const*)>
    1d2c:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1d2e:	4952      	ldr	r1, [pc, #328]	; (1e78 <print_palette(unsigned char)+0x288>)
    1d30:	4846      	ldr	r0, [pc, #280]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d32:	f7fe fe2d 	bl	990 <Print::println(char const*)>
    1d36:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1d38:	4950      	ldr	r1, [pc, #320]	; (1e7c <print_palette(unsigned char)+0x28c>)
    1d3a:	4844      	ldr	r0, [pc, #272]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d3c:	f7fe fe28 	bl	990 <Print::println(char const*)>
    1d40:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1d42:	494f      	ldr	r1, [pc, #316]	; (1e80 <print_palette(unsigned char)+0x290>)
    1d44:	4841      	ldr	r0, [pc, #260]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d46:	f7fe fe23 	bl	990 <Print::println(char const*)>
    1d4a:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1d4c:	494d      	ldr	r1, [pc, #308]	; (1e84 <print_palette(unsigned char)+0x294>)
    1d4e:	483f      	ldr	r0, [pc, #252]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d50:	f7fe fe1e 	bl	990 <Print::println(char const*)>
    1d54:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1d56:	494c      	ldr	r1, [pc, #304]	; (1e88 <print_palette(unsigned char)+0x298>)
    1d58:	483c      	ldr	r0, [pc, #240]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d5a:	f7fe fe19 	bl	990 <Print::println(char const*)>
    1d5e:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1d60:	494a      	ldr	r1, [pc, #296]	; (1e8c <print_palette(unsigned char)+0x29c>)
    1d62:	483a      	ldr	r0, [pc, #232]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d64:	f7fe fe14 	bl	990 <Print::println(char const*)>
    1d68:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1d6a:	4949      	ldr	r1, [pc, #292]	; (1e90 <print_palette(unsigned char)+0x2a0>)
    1d6c:	4837      	ldr	r0, [pc, #220]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d6e:	f7fe fe0f 	bl	990 <Print::println(char const*)>
    1d72:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1d74:	4947      	ldr	r1, [pc, #284]	; (1e94 <print_palette(unsigned char)+0x2a4>)
    1d76:	4835      	ldr	r0, [pc, #212]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d78:	f7fe fe0a 	bl	990 <Print::println(char const*)>
    1d7c:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1d7e:	4946      	ldr	r1, [pc, #280]	; (1e98 <print_palette(unsigned char)+0x2a8>)
    1d80:	4832      	ldr	r0, [pc, #200]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d82:	f7fe fe05 	bl	990 <Print::println(char const*)>
    1d86:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1d88:	4944      	ldr	r1, [pc, #272]	; (1e9c <print_palette(unsigned char)+0x2ac>)
    1d8a:	4830      	ldr	r0, [pc, #192]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d8c:	f7fe fe00 	bl	990 <Print::println(char const*)>
    1d90:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1d92:	4943      	ldr	r1, [pc, #268]	; (1ea0 <print_palette(unsigned char)+0x2b0>)
    1d94:	482d      	ldr	r0, [pc, #180]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d96:	f7fe fdfb 	bl	990 <Print::println(char const*)>
    1d9a:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1d9c:	4941      	ldr	r1, [pc, #260]	; (1ea4 <print_palette(unsigned char)+0x2b4>)
    1d9e:	482b      	ldr	r0, [pc, #172]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1da0:	f7fe fdf6 	bl	990 <Print::println(char const*)>
    1da4:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1da6:	4940      	ldr	r1, [pc, #256]	; (1ea8 <print_palette(unsigned char)+0x2b8>)
    1da8:	4828      	ldr	r0, [pc, #160]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1daa:	f7fe fdf1 	bl	990 <Print::println(char const*)>
    1dae:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1db0:	493e      	ldr	r1, [pc, #248]	; (1eac <print_palette(unsigned char)+0x2bc>)
    1db2:	4826      	ldr	r0, [pc, #152]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1db4:	f7fe fdec 	bl	990 <Print::println(char const*)>
    1db8:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1dba:	493d      	ldr	r1, [pc, #244]	; (1eb0 <print_palette(unsigned char)+0x2c0>)
    1dbc:	4823      	ldr	r0, [pc, #140]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1dbe:	f7fe fde7 	bl	990 <Print::println(char const*)>
    1dc2:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1dc4:	493b      	ldr	r1, [pc, #236]	; (1eb4 <print_palette(unsigned char)+0x2c4>)
    1dc6:	4821      	ldr	r0, [pc, #132]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1dc8:	f7fe fde2 	bl	990 <Print::println(char const*)>
    1dcc:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1dce:	493a      	ldr	r1, [pc, #232]	; (1eb8 <print_palette(unsigned char)+0x2c8>)
    1dd0:	481e      	ldr	r0, [pc, #120]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1dd2:	f7fe fddd 	bl	990 <Print::println(char const*)>
    1dd6:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1dd8:	4938      	ldr	r1, [pc, #224]	; (1ebc <print_palette(unsigned char)+0x2cc>)
    1dda:	481c      	ldr	r0, [pc, #112]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1ddc:	f7fe fdd8 	bl	990 <Print::println(char const*)>
    1de0:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1de2:	4937      	ldr	r1, [pc, #220]	; (1ec0 <print_palette(unsigned char)+0x2d0>)
    1de4:	4819      	ldr	r0, [pc, #100]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1de6:	f7fe fdd3 	bl	990 <Print::println(char const*)>
    1dea:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1dec:	4935      	ldr	r1, [pc, #212]	; (1ec4 <print_palette(unsigned char)+0x2d4>)
    1dee:	4817      	ldr	r0, [pc, #92]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1df0:	f7fe fdce 	bl	990 <Print::println(char const*)>
    1df4:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1df6:	4934      	ldr	r1, [pc, #208]	; (1ec8 <print_palette(unsigned char)+0x2d8>)
    1df8:	4814      	ldr	r0, [pc, #80]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1dfa:	f7fe fdc9 	bl	990 <Print::println(char const*)>
    1dfe:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1e00:	4932      	ldr	r1, [pc, #200]	; (1ecc <print_palette(unsigned char)+0x2dc>)
    1e02:	4812      	ldr	r0, [pc, #72]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e04:	f7fe fdc4 	bl	990 <Print::println(char const*)>
    1e08:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1e0a:	4931      	ldr	r1, [pc, #196]	; (1ed0 <print_palette(unsigned char)+0x2e0>)
    1e0c:	480f      	ldr	r0, [pc, #60]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e0e:	f7fe fdbf 	bl	990 <Print::println(char const*)>
    1e12:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1e14:	492f      	ldr	r1, [pc, #188]	; (1ed4 <print_palette(unsigned char)+0x2e4>)
    1e16:	480d      	ldr	r0, [pc, #52]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e18:	f7fe fdba 	bl	990 <Print::println(char const*)>
    1e1c:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1e1e:	492e      	ldr	r1, [pc, #184]	; (1ed8 <print_palette(unsigned char)+0x2e8>)
    1e20:	480a      	ldr	r0, [pc, #40]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e22:	f7fe fdb5 	bl	990 <Print::println(char const*)>
    1e26:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1e28:	492c      	ldr	r1, [pc, #176]	; (1edc <print_palette(unsigned char)+0x2ec>)
    1e2a:	4808      	ldr	r0, [pc, #32]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e2c:	f7fe fdb0 	bl	990 <Print::println(char const*)>
    1e30:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1e32:	492b      	ldr	r1, [pc, #172]	; (1ee0 <print_palette(unsigned char)+0x2f0>)
    1e34:	4805      	ldr	r0, [pc, #20]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e36:	f7fe fdab 	bl	990 <Print::println(char const*)>
    1e3a:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1e3c:	4929      	ldr	r1, [pc, #164]	; (1ee4 <print_palette(unsigned char)+0x2f4>)
    1e3e:	4803      	ldr	r0, [pc, #12]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e40:	f7fe fda6 	bl	990 <Print::println(char const*)>
    1e44:	bd10      	pop	{r4, pc}
    1e46:	bf00      	nop
    1e48:	0000f35c 	.word	0x0000f35c
    1e4c:	1fff8790 	.word	0x1fff8790
    1e50:	0000f370 	.word	0x0000f370
    1e54:	0000f904 	.word	0x0000f904
    1e58:	0000f8f8 	.word	0x0000f8f8
    1e5c:	0000f8e8 	.word	0x0000f8e8
    1e60:	0000f8d8 	.word	0x0000f8d8
    1e64:	0000f8c4 	.word	0x0000f8c4
    1e68:	0000f8ac 	.word	0x0000f8ac
    1e6c:	0000f894 	.word	0x0000f894
    1e70:	0000f884 	.word	0x0000f884
    1e74:	0000f86c 	.word	0x0000f86c
    1e78:	0000f860 	.word	0x0000f860
    1e7c:	0000f854 	.word	0x0000f854
    1e80:	0000f83c 	.word	0x0000f83c
    1e84:	0000f830 	.word	0x0000f830
    1e88:	0000f824 	.word	0x0000f824
    1e8c:	0000f818 	.word	0x0000f818
    1e90:	0000f80c 	.word	0x0000f80c
    1e94:	0000f7fc 	.word	0x0000f7fc
    1e98:	0000f7f0 	.word	0x0000f7f0
    1e9c:	0000f7dc 	.word	0x0000f7dc
    1ea0:	0000f7d0 	.word	0x0000f7d0
    1ea4:	0000f7c0 	.word	0x0000f7c0
    1ea8:	0000f7b4 	.word	0x0000f7b4
    1eac:	0000f7a8 	.word	0x0000f7a8
    1eb0:	0000f7a0 	.word	0x0000f7a0
    1eb4:	0000f78c 	.word	0x0000f78c
    1eb8:	0000f77c 	.word	0x0000f77c
    1ebc:	0000f768 	.word	0x0000f768
    1ec0:	0000f75c 	.word	0x0000f75c
    1ec4:	0000f750 	.word	0x0000f750
    1ec8:	0000f744 	.word	0x0000f744
    1ecc:	0000f734 	.word	0x0000f734
    1ed0:	0000f720 	.word	0x0000f720
    1ed4:	0000f714 	.word	0x0000f714
    1ed8:	0000f704 	.word	0x0000f704
    1edc:	0000f6f8 	.word	0x0000f6f8
    1ee0:	0000f6e8 	.word	0x0000f6e8
    1ee4:	0000f6dc 	.word	0x0000f6dc
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1ee8:	498e      	ldr	r1, [pc, #568]	; (2124 <print_palette(unsigned char)+0x534>)
    1eea:	488f      	ldr	r0, [pc, #572]	; (2128 <print_palette(unsigned char)+0x538>)
    1eec:	f7fe fd50 	bl	990 <Print::println(char const*)>
    1ef0:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1ef2:	498e      	ldr	r1, [pc, #568]	; (212c <print_palette(unsigned char)+0x53c>)
    1ef4:	488c      	ldr	r0, [pc, #560]	; (2128 <print_palette(unsigned char)+0x538>)
    1ef6:	f7fe fd4b 	bl	990 <Print::println(char const*)>
    1efa:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1efc:	498c      	ldr	r1, [pc, #560]	; (2130 <print_palette(unsigned char)+0x540>)
    1efe:	488a      	ldr	r0, [pc, #552]	; (2128 <print_palette(unsigned char)+0x538>)
    1f00:	f7fe fd46 	bl	990 <Print::println(char const*)>
    1f04:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1f06:	498b      	ldr	r1, [pc, #556]	; (2134 <print_palette(unsigned char)+0x544>)
    1f08:	4887      	ldr	r0, [pc, #540]	; (2128 <print_palette(unsigned char)+0x538>)
    1f0a:	f7fe fd41 	bl	990 <Print::println(char const*)>
    1f0e:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1f10:	4989      	ldr	r1, [pc, #548]	; (2138 <print_palette(unsigned char)+0x548>)
    1f12:	4885      	ldr	r0, [pc, #532]	; (2128 <print_palette(unsigned char)+0x538>)
    1f14:	f7fe fd3c 	bl	990 <Print::println(char const*)>
    1f18:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1f1a:	4988      	ldr	r1, [pc, #544]	; (213c <print_palette(unsigned char)+0x54c>)
    1f1c:	4882      	ldr	r0, [pc, #520]	; (2128 <print_palette(unsigned char)+0x538>)
    1f1e:	f7fe fd37 	bl	990 <Print::println(char const*)>
    1f22:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1f24:	4986      	ldr	r1, [pc, #536]	; (2140 <print_palette(unsigned char)+0x550>)
    1f26:	4880      	ldr	r0, [pc, #512]	; (2128 <print_palette(unsigned char)+0x538>)
    1f28:	f7fe fd32 	bl	990 <Print::println(char const*)>
    1f2c:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1f2e:	4985      	ldr	r1, [pc, #532]	; (2144 <print_palette(unsigned char)+0x554>)
    1f30:	487d      	ldr	r0, [pc, #500]	; (2128 <print_palette(unsigned char)+0x538>)
    1f32:	f7fe fd2d 	bl	990 <Print::println(char const*)>
    1f36:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1f38:	4983      	ldr	r1, [pc, #524]	; (2148 <print_palette(unsigned char)+0x558>)
    1f3a:	487b      	ldr	r0, [pc, #492]	; (2128 <print_palette(unsigned char)+0x538>)
    1f3c:	f7fe fd28 	bl	990 <Print::println(char const*)>
    1f40:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1f42:	4982      	ldr	r1, [pc, #520]	; (214c <print_palette(unsigned char)+0x55c>)
    1f44:	4878      	ldr	r0, [pc, #480]	; (2128 <print_palette(unsigned char)+0x538>)
    1f46:	f7fe fd23 	bl	990 <Print::println(char const*)>
    1f4a:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1f4c:	4980      	ldr	r1, [pc, #512]	; (2150 <print_palette(unsigned char)+0x560>)
    1f4e:	4876      	ldr	r0, [pc, #472]	; (2128 <print_palette(unsigned char)+0x538>)
    1f50:	f7fe fd1e 	bl	990 <Print::println(char const*)>
    1f54:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1f56:	497f      	ldr	r1, [pc, #508]	; (2154 <print_palette(unsigned char)+0x564>)
    1f58:	4873      	ldr	r0, [pc, #460]	; (2128 <print_palette(unsigned char)+0x538>)
    1f5a:	f7fe fd19 	bl	990 <Print::println(char const*)>
    1f5e:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1f60:	497d      	ldr	r1, [pc, #500]	; (2158 <print_palette(unsigned char)+0x568>)
    1f62:	4871      	ldr	r0, [pc, #452]	; (2128 <print_palette(unsigned char)+0x538>)
    1f64:	f7fe fd14 	bl	990 <Print::println(char const*)>
    1f68:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1f6a:	497c      	ldr	r1, [pc, #496]	; (215c <print_palette(unsigned char)+0x56c>)
    1f6c:	486e      	ldr	r0, [pc, #440]	; (2128 <print_palette(unsigned char)+0x538>)
    1f6e:	f7fe fd0f 	bl	990 <Print::println(char const*)>
    1f72:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1f74:	497a      	ldr	r1, [pc, #488]	; (2160 <print_palette(unsigned char)+0x570>)
    1f76:	486c      	ldr	r0, [pc, #432]	; (2128 <print_palette(unsigned char)+0x538>)
    1f78:	f7fe fd0a 	bl	990 <Print::println(char const*)>
    1f7c:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1f7e:	4979      	ldr	r1, [pc, #484]	; (2164 <print_palette(unsigned char)+0x574>)
    1f80:	4869      	ldr	r0, [pc, #420]	; (2128 <print_palette(unsigned char)+0x538>)
    1f82:	f7fe fd05 	bl	990 <Print::println(char const*)>
    1f86:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1f88:	4977      	ldr	r1, [pc, #476]	; (2168 <print_palette(unsigned char)+0x578>)
    1f8a:	4867      	ldr	r0, [pc, #412]	; (2128 <print_palette(unsigned char)+0x538>)
    1f8c:	f7fe fd00 	bl	990 <Print::println(char const*)>
    1f90:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1f92:	4976      	ldr	r1, [pc, #472]	; (216c <print_palette(unsigned char)+0x57c>)
    1f94:	4864      	ldr	r0, [pc, #400]	; (2128 <print_palette(unsigned char)+0x538>)
    1f96:	f7fe fcfb 	bl	990 <Print::println(char const*)>
    1f9a:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1f9c:	4974      	ldr	r1, [pc, #464]	; (2170 <print_palette(unsigned char)+0x580>)
    1f9e:	4862      	ldr	r0, [pc, #392]	; (2128 <print_palette(unsigned char)+0x538>)
    1fa0:	f7fe fcf6 	bl	990 <Print::println(char const*)>
    1fa4:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1fa6:	4973      	ldr	r1, [pc, #460]	; (2174 <print_palette(unsigned char)+0x584>)
    1fa8:	485f      	ldr	r0, [pc, #380]	; (2128 <print_palette(unsigned char)+0x538>)
    1faa:	f7fe fcf1 	bl	990 <Print::println(char const*)>
    1fae:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1fb0:	4971      	ldr	r1, [pc, #452]	; (2178 <print_palette(unsigned char)+0x588>)
    1fb2:	485d      	ldr	r0, [pc, #372]	; (2128 <print_palette(unsigned char)+0x538>)
    1fb4:	f7fe fcec 	bl	990 <Print::println(char const*)>
    1fb8:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1fba:	4970      	ldr	r1, [pc, #448]	; (217c <print_palette(unsigned char)+0x58c>)
    1fbc:	485a      	ldr	r0, [pc, #360]	; (2128 <print_palette(unsigned char)+0x538>)
    1fbe:	f7fe fce7 	bl	990 <Print::println(char const*)>
    1fc2:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1fc4:	496e      	ldr	r1, [pc, #440]	; (2180 <print_palette(unsigned char)+0x590>)
    1fc6:	4858      	ldr	r0, [pc, #352]	; (2128 <print_palette(unsigned char)+0x538>)
    1fc8:	f7fe fce2 	bl	990 <Print::println(char const*)>
    1fcc:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1fce:	496d      	ldr	r1, [pc, #436]	; (2184 <print_palette(unsigned char)+0x594>)
    1fd0:	4855      	ldr	r0, [pc, #340]	; (2128 <print_palette(unsigned char)+0x538>)
    1fd2:	f7fe fcdd 	bl	990 <Print::println(char const*)>
    1fd6:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1fd8:	496b      	ldr	r1, [pc, #428]	; (2188 <print_palette(unsigned char)+0x598>)
    1fda:	4853      	ldr	r0, [pc, #332]	; (2128 <print_palette(unsigned char)+0x538>)
    1fdc:	f7fe fcd8 	bl	990 <Print::println(char const*)>
    1fe0:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1fe2:	496a      	ldr	r1, [pc, #424]	; (218c <print_palette(unsigned char)+0x59c>)
    1fe4:	4850      	ldr	r0, [pc, #320]	; (2128 <print_palette(unsigned char)+0x538>)
    1fe6:	f7fe fcd3 	bl	990 <Print::println(char const*)>
    1fea:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1fec:	4968      	ldr	r1, [pc, #416]	; (2190 <print_palette(unsigned char)+0x5a0>)
    1fee:	484e      	ldr	r0, [pc, #312]	; (2128 <print_palette(unsigned char)+0x538>)
    1ff0:	f7fe fcce 	bl	990 <Print::println(char const*)>
    1ff4:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1ff6:	4967      	ldr	r1, [pc, #412]	; (2194 <print_palette(unsigned char)+0x5a4>)
    1ff8:	484b      	ldr	r0, [pc, #300]	; (2128 <print_palette(unsigned char)+0x538>)
    1ffa:	f7fe fcc9 	bl	990 <Print::println(char const*)>
    1ffe:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    2000:	4965      	ldr	r1, [pc, #404]	; (2198 <print_palette(unsigned char)+0x5a8>)
    2002:	4849      	ldr	r0, [pc, #292]	; (2128 <print_palette(unsigned char)+0x538>)
    2004:	f7fe fcc4 	bl	990 <Print::println(char const*)>
    2008:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    200a:	4964      	ldr	r1, [pc, #400]	; (219c <print_palette(unsigned char)+0x5ac>)
    200c:	4846      	ldr	r0, [pc, #280]	; (2128 <print_palette(unsigned char)+0x538>)
    200e:	f7fe fcbf 	bl	990 <Print::println(char const*)>
    2012:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    2014:	4962      	ldr	r1, [pc, #392]	; (21a0 <print_palette(unsigned char)+0x5b0>)
    2016:	4844      	ldr	r0, [pc, #272]	; (2128 <print_palette(unsigned char)+0x538>)
    2018:	f7fe fcba 	bl	990 <Print::println(char const*)>
    201c:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    201e:	4961      	ldr	r1, [pc, #388]	; (21a4 <print_palette(unsigned char)+0x5b4>)
    2020:	4841      	ldr	r0, [pc, #260]	; (2128 <print_palette(unsigned char)+0x538>)
    2022:	f7fe fcb5 	bl	990 <Print::println(char const*)>
    2026:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    2028:	495f      	ldr	r1, [pc, #380]	; (21a8 <print_palette(unsigned char)+0x5b8>)
    202a:	483f      	ldr	r0, [pc, #252]	; (2128 <print_palette(unsigned char)+0x538>)
    202c:	f7fe fcb0 	bl	990 <Print::println(char const*)>
    2030:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    2032:	495e      	ldr	r1, [pc, #376]	; (21ac <print_palette(unsigned char)+0x5bc>)
    2034:	483c      	ldr	r0, [pc, #240]	; (2128 <print_palette(unsigned char)+0x538>)
    2036:	f7fe fcab 	bl	990 <Print::println(char const*)>
    203a:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    203c:	495c      	ldr	r1, [pc, #368]	; (21b0 <print_palette(unsigned char)+0x5c0>)
    203e:	483a      	ldr	r0, [pc, #232]	; (2128 <print_palette(unsigned char)+0x538>)
    2040:	f7fe fca6 	bl	990 <Print::println(char const*)>
    2044:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    2046:	495b      	ldr	r1, [pc, #364]	; (21b4 <print_palette(unsigned char)+0x5c4>)
    2048:	4837      	ldr	r0, [pc, #220]	; (2128 <print_palette(unsigned char)+0x538>)
    204a:	f7fe fca1 	bl	990 <Print::println(char const*)>
    204e:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    2050:	4959      	ldr	r1, [pc, #356]	; (21b8 <print_palette(unsigned char)+0x5c8>)
    2052:	4835      	ldr	r0, [pc, #212]	; (2128 <print_palette(unsigned char)+0x538>)
    2054:	f7fe fc9c 	bl	990 <Print::println(char const*)>
    2058:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    205a:	4958      	ldr	r1, [pc, #352]	; (21bc <print_palette(unsigned char)+0x5cc>)
    205c:	4832      	ldr	r0, [pc, #200]	; (2128 <print_palette(unsigned char)+0x538>)
    205e:	f7fe fc97 	bl	990 <Print::println(char const*)>
    2062:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    2064:	4956      	ldr	r1, [pc, #344]	; (21c0 <print_palette(unsigned char)+0x5d0>)
    2066:	4830      	ldr	r0, [pc, #192]	; (2128 <print_palette(unsigned char)+0x538>)
    2068:	f7fe fc92 	bl	990 <Print::println(char const*)>
    206c:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    206e:	4955      	ldr	r1, [pc, #340]	; (21c4 <print_palette(unsigned char)+0x5d4>)
    2070:	482d      	ldr	r0, [pc, #180]	; (2128 <print_palette(unsigned char)+0x538>)
    2072:	f7fe fc8d 	bl	990 <Print::println(char const*)>
    2076:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    2078:	4953      	ldr	r1, [pc, #332]	; (21c8 <print_palette(unsigned char)+0x5d8>)
    207a:	482b      	ldr	r0, [pc, #172]	; (2128 <print_palette(unsigned char)+0x538>)
    207c:	f7fe fc88 	bl	990 <Print::println(char const*)>
    2080:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    2082:	4952      	ldr	r1, [pc, #328]	; (21cc <print_palette(unsigned char)+0x5dc>)
    2084:	4828      	ldr	r0, [pc, #160]	; (2128 <print_palette(unsigned char)+0x538>)
    2086:	f7fe fc83 	bl	990 <Print::println(char const*)>
    208a:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    208c:	4950      	ldr	r1, [pc, #320]	; (21d0 <print_palette(unsigned char)+0x5e0>)
    208e:	4826      	ldr	r0, [pc, #152]	; (2128 <print_palette(unsigned char)+0x538>)
    2090:	f7fe fc7e 	bl	990 <Print::println(char const*)>
    2094:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    2096:	494f      	ldr	r1, [pc, #316]	; (21d4 <print_palette(unsigned char)+0x5e4>)
    2098:	4823      	ldr	r0, [pc, #140]	; (2128 <print_palette(unsigned char)+0x538>)
    209a:	f7fe fc79 	bl	990 <Print::println(char const*)>
    209e:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    20a0:	494d      	ldr	r1, [pc, #308]	; (21d8 <print_palette(unsigned char)+0x5e8>)
    20a2:	4821      	ldr	r0, [pc, #132]	; (2128 <print_palette(unsigned char)+0x538>)
    20a4:	f7fe fc74 	bl	990 <Print::println(char const*)>
    20a8:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    20aa:	494c      	ldr	r1, [pc, #304]	; (21dc <print_palette(unsigned char)+0x5ec>)
    20ac:	481e      	ldr	r0, [pc, #120]	; (2128 <print_palette(unsigned char)+0x538>)
    20ae:	f7fe fc6f 	bl	990 <Print::println(char const*)>
    20b2:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    20b4:	494a      	ldr	r1, [pc, #296]	; (21e0 <print_palette(unsigned char)+0x5f0>)
    20b6:	481c      	ldr	r0, [pc, #112]	; (2128 <print_palette(unsigned char)+0x538>)
    20b8:	f7fe fc6a 	bl	990 <Print::println(char const*)>
    20bc:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    20be:	4949      	ldr	r1, [pc, #292]	; (21e4 <print_palette(unsigned char)+0x5f4>)
    20c0:	4819      	ldr	r0, [pc, #100]	; (2128 <print_palette(unsigned char)+0x538>)
    20c2:	f7fe fc65 	bl	990 <Print::println(char const*)>
    20c6:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    20c8:	4947      	ldr	r1, [pc, #284]	; (21e8 <print_palette(unsigned char)+0x5f8>)
    20ca:	4817      	ldr	r0, [pc, #92]	; (2128 <print_palette(unsigned char)+0x538>)
    20cc:	f7fe fc60 	bl	990 <Print::println(char const*)>
    20d0:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    20d2:	4946      	ldr	r1, [pc, #280]	; (21ec <print_palette(unsigned char)+0x5fc>)
    20d4:	4814      	ldr	r0, [pc, #80]	; (2128 <print_palette(unsigned char)+0x538>)
    20d6:	f7fe fc5b 	bl	990 <Print::println(char const*)>
    20da:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    20dc:	4944      	ldr	r1, [pc, #272]	; (21f0 <print_palette(unsigned char)+0x600>)
    20de:	4812      	ldr	r0, [pc, #72]	; (2128 <print_palette(unsigned char)+0x538>)
    20e0:	f7fe fc56 	bl	990 <Print::println(char const*)>
    20e4:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    20e6:	4943      	ldr	r1, [pc, #268]	; (21f4 <print_palette(unsigned char)+0x604>)
    20e8:	480f      	ldr	r0, [pc, #60]	; (2128 <print_palette(unsigned char)+0x538>)
    20ea:	f7fe fc51 	bl	990 <Print::println(char const*)>
    20ee:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    20f0:	4941      	ldr	r1, [pc, #260]	; (21f8 <print_palette(unsigned char)+0x608>)
    20f2:	480d      	ldr	r0, [pc, #52]	; (2128 <print_palette(unsigned char)+0x538>)
    20f4:	f7fe fc4c 	bl	990 <Print::println(char const*)>
    20f8:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    20fa:	4940      	ldr	r1, [pc, #256]	; (21fc <print_palette(unsigned char)+0x60c>)
    20fc:	480a      	ldr	r0, [pc, #40]	; (2128 <print_palette(unsigned char)+0x538>)
    20fe:	f7fe fc47 	bl	990 <Print::println(char const*)>
    2102:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    2104:	493e      	ldr	r1, [pc, #248]	; (2200 <print_palette(unsigned char)+0x610>)
    2106:	4808      	ldr	r0, [pc, #32]	; (2128 <print_palette(unsigned char)+0x538>)
    2108:	f7fe fc42 	bl	990 <Print::println(char const*)>
    210c:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    210e:	493d      	ldr	r1, [pc, #244]	; (2204 <print_palette(unsigned char)+0x614>)
    2110:	4805      	ldr	r0, [pc, #20]	; (2128 <print_palette(unsigned char)+0x538>)
    2112:	f7fe fc3d 	bl	990 <Print::println(char const*)>
    2116:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    2118:	493b      	ldr	r1, [pc, #236]	; (2208 <print_palette(unsigned char)+0x618>)
    211a:	4803      	ldr	r0, [pc, #12]	; (2128 <print_palette(unsigned char)+0x538>)
    211c:	f7fe fc38 	bl	990 <Print::println(char const*)>
    2120:	bd10      	pop	{r4, pc}
    2122:	bf00      	nop
    2124:	0000f6c8 	.word	0x0000f6c8
    2128:	1fff8790 	.word	0x1fff8790
    212c:	0000f6b8 	.word	0x0000f6b8
    2130:	0000f6ac 	.word	0x0000f6ac
    2134:	0000f6a0 	.word	0x0000f6a0
    2138:	0000f694 	.word	0x0000f694
    213c:	0000f680 	.word	0x0000f680
    2140:	0000f674 	.word	0x0000f674
    2144:	0000f668 	.word	0x0000f668
    2148:	0000f65c 	.word	0x0000f65c
    214c:	0000f644 	.word	0x0000f644
    2150:	0000f63c 	.word	0x0000f63c
    2154:	0000f6d4 	.word	0x0000f6d4
    2158:	0000f630 	.word	0x0000f630
    215c:	0000f624 	.word	0x0000f624
    2160:	0000f610 	.word	0x0000f610
    2164:	0000f5fc 	.word	0x0000f5fc
    2168:	0000f5ec 	.word	0x0000f5ec
    216c:	0000f5e0 	.word	0x0000f5e0
    2170:	0000f5d4 	.word	0x0000f5d4
    2174:	0000f5c8 	.word	0x0000f5c8
    2178:	0000f5bc 	.word	0x0000f5bc
    217c:	0000f5b0 	.word	0x0000f5b0
    2180:	0000f5a4 	.word	0x0000f5a4
    2184:	0000f598 	.word	0x0000f598
    2188:	0000f58c 	.word	0x0000f58c
    218c:	0000f580 	.word	0x0000f580
    2190:	0000f574 	.word	0x0000f574
    2194:	0000f568 	.word	0x0000f568
    2198:	0000f558 	.word	0x0000f558
    219c:	0000f544 	.word	0x0000f544
    21a0:	0000f528 	.word	0x0000f528
    21a4:	0000f510 	.word	0x0000f510
    21a8:	0000f4f4 	.word	0x0000f4f4
    21ac:	0000f4e4 	.word	0x0000f4e4
    21b0:	0000f4d4 	.word	0x0000f4d4
    21b4:	0000f4c0 	.word	0x0000f4c0
    21b8:	0000f4b0 	.word	0x0000f4b0
    21bc:	0000f4a8 	.word	0x0000f4a8
    21c0:	0000f4a0 	.word	0x0000f4a0
    21c4:	0000f488 	.word	0x0000f488
    21c8:	0000f478 	.word	0x0000f478
    21cc:	0000f470 	.word	0x0000f470
    21d0:	0000f460 	.word	0x0000f460
    21d4:	0000f450 	.word	0x0000f450
    21d8:	0000f440 	.word	0x0000f440
    21dc:	0000f42c 	.word	0x0000f42c
    21e0:	0000f418 	.word	0x0000f418
    21e4:	0000f404 	.word	0x0000f404
    21e8:	0000f3ec 	.word	0x0000f3ec
    21ec:	0000f3d4 	.word	0x0000f3d4
    21f0:	0000f3c4 	.word	0x0000f3c4
    21f4:	0000f3b0 	.word	0x0000f3b0
    21f8:	0000f39c 	.word	0x0000f39c
    21fc:	0000f38c 	.word	0x0000f38c
    2200:	0000f380 	.word	0x0000f380
    2204:	0000f374 	.word	0x0000f374
    2208:	0000f91c 	.word	0x0000f91c

0000220c <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    220c:	b538      	push	{r3, r4, r5, lr}
    220e:	2100      	movs	r1, #0
    2210:	4604      	mov	r4, r0
    2212:	488e      	ldr	r0, [pc, #568]	; (244c <LEDDebug(LEDStruct&)+0x240>)
    2214:	f00b f970 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2218:	488d      	ldr	r0, [pc, #564]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    221a:	f00b fb71 	bl	d900 <Print::println()>
    221e:	2122      	movs	r1, #34	; 0x22
    2220:	488c      	ldr	r0, [pc, #560]	; (2454 <LEDDebug(LEDStruct&)+0x248>)
    2222:	f00b f969 	bl	d4f8 <usb_serial_write>
    2226:	488a      	ldr	r0, [pc, #552]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2228:	f00b fb6a 	bl	d900 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    222c:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    2230:	2b00      	cmp	r3, #0
    2232:	f000 80ae 	beq.w	2392 <LEDDebug(LEDStruct&)+0x186>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2236:	2b01      	cmp	r3, #1
    2238:	f000 864e 	beq.w	2ed8 <LEDDebug(LEDStruct&)+0xccc>
    223c:	2113      	movs	r1, #19
    223e:	4886      	ldr	r0, [pc, #536]	; (2458 <LEDDebug(LEDStruct&)+0x24c>)
    2240:	f00b f95a 	bl	d4f8 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    2244:	4b85      	ldr	r3, [pc, #532]	; (245c <LEDDebug(LEDStruct&)+0x250>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2246:	4882      	ldr	r0, [pc, #520]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2248:	7819      	ldrb	r1, [r3, #0]
    224a:	220a      	movs	r2, #10
    224c:	2300      	movs	r3, #0
    224e:	f00b fb67 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2252:	2103      	movs	r1, #3
    2254:	4882      	ldr	r0, [pc, #520]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    2256:	f00b f94f 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    225a:	487d      	ldr	r0, [pc, #500]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    225c:	f00b fb50 	bl	d900 <Print::println()>
    2260:	2113      	movs	r1, #19
    2262:	4880      	ldr	r0, [pc, #512]	; (2464 <LEDDebug(LEDStruct&)+0x258>)
    2264:	f00b f948 	bl	d4f8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2268:	220a      	movs	r2, #10
    226a:	2300      	movs	r3, #0
    226c:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    2270:	4877      	ldr	r0, [pc, #476]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2272:	f00b fb55 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2276:	2103      	movs	r1, #3
    2278:	4879      	ldr	r0, [pc, #484]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    227a:	f00b f93d 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    227e:	4874      	ldr	r0, [pc, #464]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2280:	f00b fb3e 	bl	d900 <Print::println()>
    2284:	2111      	movs	r1, #17
    2286:	4878      	ldr	r0, [pc, #480]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2288:	f00b f936 	bl	d4f8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    228c:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2290:	486f      	ldr	r0, [pc, #444]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2292:	f00b fb85 	bl	d9a0 <Print::print(long)>
    2296:	2103      	movs	r1, #3
    2298:	4871      	ldr	r0, [pc, #452]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    229a:	f00b f92d 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    229e:	486c      	ldr	r0, [pc, #432]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    22a0:	f00b fb2e 	bl	d900 <Print::println()>
    22a4:	2111      	movs	r1, #17
    22a6:	4871      	ldr	r0, [pc, #452]	; (246c <LEDDebug(LEDStruct&)+0x260>)
    22a8:	f00b f926 	bl	d4f8 <usb_serial_write>
	Serial.println("\t||");
	Serial.print("|| (N) this_dir:\t");
	Serial.print(leds.this_dir);
	Serial.println("\t||");
	Serial.print("|| (F) blending:\t");
	if (leds.current_blending == LINEARBLEND) { Serial.print("LINEARBLEND"); }
    22ac:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    22b0:	2b01      	cmp	r3, #1
    22b2:	bf0b      	itete	eq
    22b4:	210b      	moveq	r1, #11
    22b6:	2107      	movne	r1, #7
    22b8:	486d      	ldreq	r0, [pc, #436]	; (2470 <LEDDebug(LEDStruct&)+0x264>)
    22ba:	486e      	ldrne	r0, [pc, #440]	; (2474 <LEDDebug(LEDStruct&)+0x268>)
    22bc:	f00b f91c 	bl	d4f8 <usb_serial_write>
    22c0:	2114      	movs	r1, #20
    22c2:	486d      	ldr	r0, [pc, #436]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    22c4:	f00b f918 	bl	d4f8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    22c8:	2300      	movs	r3, #0
    22ca:	220a      	movs	r2, #10
    22cc:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    22d0:	485f      	ldr	r0, [pc, #380]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    22d2:	f00b fb25 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    22d6:	2103      	movs	r1, #3
    22d8:	4861      	ldr	r0, [pc, #388]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    22da:	f00b f90d 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22de:	485c      	ldr	r0, [pc, #368]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    22e0:	f00b fb0e 	bl	d900 <Print::println()>
    22e4:	2115      	movs	r1, #21
    22e6:	4865      	ldr	r0, [pc, #404]	; (247c <LEDDebug(LEDStruct&)+0x270>)
    22e8:	f00b f906 	bl	d4f8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22ec:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    22f0:	4857      	ldr	r0, [pc, #348]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    22f2:	f00b fb55 	bl	d9a0 <Print::print(long)>
    22f6:	2103      	movs	r1, #3
    22f8:	4859      	ldr	r0, [pc, #356]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    22fa:	f00b f8fd 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22fe:	4854      	ldr	r0, [pc, #336]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2300:	f00b fafe 	bl	d900 <Print::println()>
    2304:	2111      	movs	r1, #17
    2306:	485e      	ldr	r0, [pc, #376]	; (2480 <LEDDebug(LEDStruct&)+0x274>)
    2308:	f00b f8f6 	bl	d4f8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    230c:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2310:	484f      	ldr	r0, [pc, #316]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2312:	f00b fb45 	bl	d9a0 <Print::print(long)>
    2316:	2103      	movs	r1, #3
    2318:	4851      	ldr	r0, [pc, #324]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    231a:	f00b f8ed 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    231e:	484c      	ldr	r0, [pc, #304]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2320:	f00b faee 	bl	d900 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2324:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    2328:	bb73      	cbnz	r3, 2388 <LEDDebug(LEDStruct&)+0x17c>
    232a:	2122      	movs	r1, #34	; 0x22
    232c:	4849      	ldr	r0, [pc, #292]	; (2454 <LEDDebug(LEDStruct&)+0x248>)
    232e:	f00b f8e3 	bl	d4f8 <usb_serial_write>
    2332:	4847      	ldr	r0, [pc, #284]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2334:	f00b fae4 	bl	d900 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    2338:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    233c:	2b20      	cmp	r3, #32
    233e:	f200 85bd 	bhi.w	2ebc <LEDDebug(LEDStruct&)+0xcb0>
    2342:	e8df f013 	tbh	[pc, r3, lsl #1]
    2346:	00af      	.short	0x00af
    2348:	05bb05bb 	.word	0x05bb05bb
    234c:	05bb05bb 	.word	0x05bb05bb
    2350:	012905bb 	.word	0x012905bb
    2354:	05bb05bb 	.word	0x05bb05bb
    2358:	05bb05bb 	.word	0x05bb05bb
    235c:	05bb017b 	.word	0x05bb017b
    2360:	05bb05bb 	.word	0x05bb05bb
    2364:	05bb05bb 	.word	0x05bb05bb
    2368:	05b80189 	.word	0x05b80189
    236c:	043e043c 	.word	0x043e043c
    2370:	05090456 	.word	0x05090456
    2374:	02250194 	.word	0x02250194
    2378:	05bb026a 	.word	0x05bb026a
    237c:	02ff02a9 	.word	0x02ff02a9
    2380:	03c30328 	.word	0x03c30328
    2384:	002b0406 	.word	0x002b0406
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2388:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    238c:	f7ff fc30 	bl	1bf0 <print_palette(unsigned char)>
    2390:	e7cb      	b.n	232a <LEDDebug(LEDStruct&)+0x11e>
void LEDDebug(LEDStruct& leds) {
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    2392:	493c      	ldr	r1, [pc, #240]	; (2484 <LEDDebug(LEDStruct&)+0x278>)
    2394:	482e      	ldr	r0, [pc, #184]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2396:	f7fe fafb 	bl	990 <Print::println(char const*)>
    239a:	e74f      	b.n	223c <LEDDebug(LEDStruct&)+0x30>
			Serial.print(leds.plasma_beat3);
			Serial.println("\t||");
			break;

		case OUTWARD:
			Serial.println("==============OUTWARD=============");
    239c:	493a      	ldr	r1, [pc, #232]	; (2488 <LEDDebug(LEDStruct&)+0x27c>)
    239e:	482c      	ldr	r0, [pc, #176]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23a0:	f7fe faf6 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23a4:	4939      	ldr	r1, [pc, #228]	; (248c <LEDDebug(LEDStruct&)+0x280>)
    23a6:	482a      	ldr	r0, [pc, #168]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23a8:	f7fe fae4 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23ac:	2300      	movs	r3, #0
    23ae:	220a      	movs	r2, #10
    23b0:	f894 1855 	ldrb.w	r1, [r4, #2133]	; 0x855
    23b4:	4826      	ldr	r0, [pc, #152]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23b6:	f00b fab3 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) out_fade:\t");
			Serial.print(leds.out_fade);
			Serial.println("\t||");
    23ba:	4929      	ldr	r1, [pc, #164]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    23bc:	4824      	ldr	r0, [pc, #144]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23be:	f7fe fae7 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23c2:	4933      	ldr	r1, [pc, #204]	; (2490 <LEDDebug(LEDStruct&)+0x284>)
    23c4:	4822      	ldr	r0, [pc, #136]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23c6:	f7fe fad5 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23ca:	2300      	movs	r3, #0
    23cc:	220a      	movs	r2, #10
    23ce:	f894 1851 	ldrb.w	r1, [r4, #2129]	; 0x851
    23d2:	481f      	ldr	r0, [pc, #124]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23d4:	f00b faa4 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) out_beat1:\t");
			Serial.print(leds.out_beat1);
			Serial.println("\t||");
    23d8:	4921      	ldr	r1, [pc, #132]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    23da:	481d      	ldr	r0, [pc, #116]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23dc:	f7fe fad8 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23e0:	492c      	ldr	r1, [pc, #176]	; (2494 <LEDDebug(LEDStruct&)+0x288>)
    23e2:	481b      	ldr	r0, [pc, #108]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23e4:	f7fe fac6 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23e8:	2300      	movs	r3, #0
    23ea:	220a      	movs	r2, #10
    23ec:	f894 1852 	ldrb.w	r1, [r4, #2130]	; 0x852
    23f0:	4817      	ldr	r0, [pc, #92]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23f2:	f00b fa95 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) out_beat2:\t");
			Serial.print(leds.out_beat2);
			Serial.println("\t||");
    23f6:	491a      	ldr	r1, [pc, #104]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    23f8:	4815      	ldr	r0, [pc, #84]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    23fa:	f7fe fac9 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23fe:	4926      	ldr	r1, [pc, #152]	; (2498 <LEDDebug(LEDStruct&)+0x28c>)
    2400:	4813      	ldr	r0, [pc, #76]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2402:	f7fe fab7 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2406:	2300      	movs	r3, #0
    2408:	220a      	movs	r2, #10
    240a:	f894 1853 	ldrb.w	r1, [r4, #2131]	; 0x853
    240e:	4810      	ldr	r0, [pc, #64]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2410:	f00b fa86 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) out_min1:\t");
			Serial.print(leds.out_min1);
			Serial.println("\t||");
    2414:	4912      	ldr	r1, [pc, #72]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    2416:	480e      	ldr	r0, [pc, #56]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2418:	f7fe faba 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    241c:	491f      	ldr	r1, [pc, #124]	; (249c <LEDDebug(LEDStruct&)+0x290>)
    241e:	480c      	ldr	r0, [pc, #48]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2420:	f7fe faa8 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2424:	f894 1854 	ldrb.w	r1, [r4, #2132]	; 0x854
    2428:	4809      	ldr	r0, [pc, #36]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    242a:	2300      	movs	r3, #0
    242c:	220a      	movs	r2, #10
    242e:	f00b fa77 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) out_min2:\t");
			Serial.print(leds.out_min2);
			Serial.println("\t||");
    2432:	490b      	ldr	r1, [pc, #44]	; (2460 <LEDDebug(LEDStruct&)+0x254>)
    2434:	4806      	ldr	r0, [pc, #24]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
    2436:	f7fe faab 	bl	990 <Print::println(char const*)>
    243a:	2123      	movs	r1, #35	; 0x23
    243c:	4818      	ldr	r0, [pc, #96]	; (24a0 <LEDDebug(LEDStruct&)+0x294>)
    243e:	f00b f85b 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2442:	4803      	ldr	r0, [pc, #12]	; (2450 <LEDDebug(LEDStruct&)+0x244>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    2444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2448:	f00b ba5a 	b.w	d900 <Print::println()>
    244c:	0000fad0 	.word	0x0000fad0
    2450:	1fff8790 	.word	0x1fff8790
    2454:	0000f934 	.word	0x0000f934
    2458:	0000f9a0 	.word	0x0000f9a0
    245c:	1fff8723 	.word	0x1fff8723
    2460:	0000f9b4 	.word	0x0000f9b4
    2464:	0000f9b8 	.word	0x0000f9b8
    2468:	0000f9cc 	.word	0x0000f9cc
    246c:	0000f9e0 	.word	0x0000f9e0
    2470:	0000f9f4 	.word	0x0000f9f4
    2474:	0000fa00 	.word	0x0000fa00
    2478:	0000fa08 	.word	0x0000fa08
    247c:	0000fa20 	.word	0x0000fa20
    2480:	0000fa38 	.word	0x0000fa38
    2484:	0000f958 	.word	0x0000f958
    2488:	00010444 	.word	0x00010444
    248c:	00010468 	.word	0x00010468
    2490:	0001047c 	.word	0x0001047c
    2494:	00010490 	.word	0x00010490
    2498:	000104a4 	.word	0x000104a4
    249c:	000104b8 	.word	0x000104b8
    24a0:	000104f0 	.word	0x000104f0
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    24a4:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    24a8:	489f      	ldr	r0, [pc, #636]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    24aa:	2b04      	cmp	r3, #4
    24ac:	bf0c      	ite	eq
    24ae:	499f      	ldreq	r1, [pc, #636]	; (272c <LEDDebug(LEDStruct&)+0x520>)
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    24b0:	499f      	ldrne	r1, [pc, #636]	; (2730 <LEDDebug(LEDStruct&)+0x524>)
    24b2:	f7fe fa6d 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24b6:	499f      	ldr	r1, [pc, #636]	; (2734 <LEDDebug(LEDStruct&)+0x528>)
    24b8:	489b      	ldr	r0, [pc, #620]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    24ba:	f7fe fa5b 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24be:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    24c2:	4899      	ldr	r0, [pc, #612]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    24c4:	f00b fa6c 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    24c8:	499b      	ldr	r1, [pc, #620]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    24ca:	4897      	ldr	r0, [pc, #604]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    24cc:	f7fe fa60 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24d0:	499a      	ldr	r1, [pc, #616]	; (273c <LEDDebug(LEDStruct&)+0x530>)
    24d2:	4895      	ldr	r0, [pc, #596]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    24d4:	f7fe fa4e 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24d8:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    24dc:	4892      	ldr	r0, [pc, #584]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    24de:	f00b fa5f 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    24e2:	4995      	ldr	r1, [pc, #596]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    24e4:	4890      	ldr	r0, [pc, #576]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    24e6:	f7fe fa53 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24ea:	4995      	ldr	r1, [pc, #596]	; (2740 <LEDDebug(LEDStruct&)+0x534>)
    24ec:	488e      	ldr	r0, [pc, #568]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    24ee:	f7fe fa41 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24f2:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    24f6:	488c      	ldr	r0, [pc, #560]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    24f8:	f00b fa52 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    24fc:	498e      	ldr	r1, [pc, #568]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    24fe:	488a      	ldr	r0, [pc, #552]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2500:	f7fe fa46 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2504:	498f      	ldr	r1, [pc, #572]	; (2744 <LEDDebug(LEDStruct&)+0x538>)
    2506:	4888      	ldr	r0, [pc, #544]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2508:	f7fe fa34 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    250c:	2300      	movs	r3, #0
    250e:	220a      	movs	r2, #10
    2510:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2514:	4884      	ldr	r0, [pc, #528]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2516:	f00b fa03 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    251a:	4987      	ldr	r1, [pc, #540]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    251c:	4882      	ldr	r0, [pc, #520]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    251e:	f7fe fa37 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2522:	4989      	ldr	r1, [pc, #548]	; (2748 <LEDDebug(LEDStruct&)+0x53c>)
    2524:	4880      	ldr	r0, [pc, #512]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2526:	f7fe fa25 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    252a:	2300      	movs	r3, #0
    252c:	220a      	movs	r2, #10
    252e:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2532:	487d      	ldr	r0, [pc, #500]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2534:	f00b f9f4 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2538:	497f      	ldr	r1, [pc, #508]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    253a:	487b      	ldr	r0, [pc, #492]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    253c:	f7fe fa28 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2540:	4982      	ldr	r1, [pc, #520]	; (274c <LEDDebug(LEDStruct&)+0x540>)
    2542:	4879      	ldr	r0, [pc, #484]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2544:	f7fe fa16 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2548:	2300      	movs	r3, #0
    254a:	220a      	movs	r2, #10
    254c:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2550:	4875      	ldr	r0, [pc, #468]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2552:	f00b f9e5 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2556:	4978      	ldr	r1, [pc, #480]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    2558:	4873      	ldr	r0, [pc, #460]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    255a:	f7fe fa19 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    255e:	497c      	ldr	r1, [pc, #496]	; (2750 <LEDDebug(LEDStruct&)+0x544>)
    2560:	4871      	ldr	r0, [pc, #452]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2562:	f7fe fa07 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2566:	2300      	movs	r3, #0
    2568:	220a      	movs	r2, #10
    256a:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    256e:	486e      	ldr	r0, [pc, #440]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2570:	f00b f9d6 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    2574:	4970      	ldr	r1, [pc, #448]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    2576:	486c      	ldr	r0, [pc, #432]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2578:	f7fe fa0a 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    257c:	4975      	ldr	r1, [pc, #468]	; (2754 <LEDDebug(LEDStruct&)+0x548>)
    257e:	486a      	ldr	r0, [pc, #424]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2580:	f7fe f9f8 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2584:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    2588:	4867      	ldr	r0, [pc, #412]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    258a:	f00b fa09 	bl	d9a0 <Print::print(long)>
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    258e:	496a      	ldr	r1, [pc, #424]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    2590:	4865      	ldr	r0, [pc, #404]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2592:	f7fe f9fd 	bl	990 <Print::println(char const*)>
			break;
    2596:	e750      	b.n	243a <LEDDebug(LEDStruct&)+0x22e>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
    2598:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    259c:	2b07      	cmp	r3, #7
    259e:	f000 8505 	beq.w	2fac <LEDDebug(LEDStruct&)+0xda0>
    25a2:	2b09      	cmp	r3, #9
    25a4:	f000 852c 	beq.w	3000 <LEDDebug(LEDStruct&)+0xdf4>
    25a8:	2b06      	cmp	r3, #6
    25aa:	d103      	bne.n	25b4 <LEDDebug(LEDStruct&)+0x3a8>
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
    25ac:	496a      	ldr	r1, [pc, #424]	; (2758 <LEDDebug(LEDStruct&)+0x54c>)
    25ae:	485e      	ldr	r0, [pc, #376]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    25b0:	f7fe f9ee 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25b4:	495f      	ldr	r1, [pc, #380]	; (2734 <LEDDebug(LEDStruct&)+0x528>)
    25b6:	485c      	ldr	r0, [pc, #368]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    25b8:	f7fe f9dc 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25bc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    25c0:	4859      	ldr	r0, [pc, #356]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    25c2:	f00b f9ed 	bl	d9a0 <Print::print(long)>
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
				default: break;
			}
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    25c6:	495c      	ldr	r1, [pc, #368]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    25c8:	4857      	ldr	r0, [pc, #348]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    25ca:	f7fe f9e1 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25ce:	4963      	ldr	r1, [pc, #396]	; (275c <LEDDebug(LEDStruct&)+0x550>)
    25d0:	4855      	ldr	r0, [pc, #340]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    25d2:	f7fe f9cf 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25d6:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    25da:	4853      	ldr	r0, [pc, #332]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    25dc:	f00b f9e0 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    25e0:	4955      	ldr	r1, [pc, #340]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    25e2:	4851      	ldr	r0, [pc, #324]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    25e4:	f7fe f9d4 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25e8:	495d      	ldr	r1, [pc, #372]	; (2760 <LEDDebug(LEDStruct&)+0x554>)
    25ea:	484f      	ldr	r0, [pc, #316]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    25ec:	f7fe f9c2 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25f0:	2300      	movs	r3, #0
    25f2:	220a      	movs	r2, #10
    25f4:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    25f8:	484b      	ldr	r0, [pc, #300]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    25fa:	f00b f991 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    25fe:	494e      	ldr	r1, [pc, #312]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    2600:	4849      	ldr	r0, [pc, #292]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2602:	f7fe f9c5 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2606:	4957      	ldr	r1, [pc, #348]	; (2764 <LEDDebug(LEDStruct&)+0x558>)
    2608:	4847      	ldr	r0, [pc, #284]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    260a:	f7fe f9b3 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    260e:	2300      	movs	r3, #0
    2610:	220a      	movs	r2, #10
    2612:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    2616:	4844      	ldr	r0, [pc, #272]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2618:	f00b f982 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rot:\t\t");
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
    261c:	4946      	ldr	r1, [pc, #280]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    261e:	4842      	ldr	r0, [pc, #264]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2620:	f7fe f9b6 	bl	990 <Print::println(char const*)>
			if (leds.mode_name == RAINBOW_MARCH_BEAT) {
    2624:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2628:	2b09      	cmp	r3, #9
    262a:	f47f af06 	bne.w	243a <LEDDebug(LEDStruct&)+0x22e>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    262e:	494e      	ldr	r1, [pc, #312]	; (2768 <LEDDebug(LEDStruct&)+0x55c>)
    2630:	483d      	ldr	r0, [pc, #244]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2632:	f7fe f99f 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2636:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    263a:	e6f5      	b.n	2428 <LEDDebug(LEDStruct&)+0x21c>
				Serial.println("\t||");
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
    263c:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2640:	3b0b      	subs	r3, #11
    2642:	2b05      	cmp	r3, #5
    2644:	f200 8452 	bhi.w	2eec <LEDDebug(LEDStruct&)+0xce0>
    2648:	e8df f013 	tbh	[pc, r3, lsl #1]
    264c:	044c04d0 	.word	0x044c04d0
    2650:	04c604cb 	.word	0x04c604cb
    2654:	04bc04c1 	.word	0x04bc04c1
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    2658:	4944      	ldr	r1, [pc, #272]	; (276c <LEDDebug(LEDStruct&)+0x560>)
    265a:	4833      	ldr	r0, [pc, #204]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    265c:	f7fe f998 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2660:	4934      	ldr	r1, [pc, #208]	; (2734 <LEDDebug(LEDStruct&)+0x528>)
    2662:	4831      	ldr	r0, [pc, #196]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2664:	f7fe f986 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2668:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    266c:	e78c      	b.n	2588 <LEDDebug(LEDStruct&)+0x37c>
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    266e:	4940      	ldr	r1, [pc, #256]	; (2770 <LEDDebug(LEDStruct&)+0x564>)
    2670:	482d      	ldr	r0, [pc, #180]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2672:	f7fe f98d 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2676:	493f      	ldr	r1, [pc, #252]	; (2774 <LEDDebug(LEDStruct&)+0x568>)
    2678:	482b      	ldr	r0, [pc, #172]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    267a:	f7fe f97b 	bl	974 <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    267e:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    2682:	2b01      	cmp	r3, #1
    2684:	f000 8498 	beq.w	2fb8 <LEDDebug(LEDStruct&)+0xdac>
    2688:	f0c0 84c0 	bcc.w	300c <LEDDebug(LEDStruct&)+0xe00>
    268c:	2b02      	cmp	r3, #2
    268e:	d107      	bne.n	26a0 <LEDDebug(LEDStruct&)+0x494>
    2690:	4939      	ldr	r1, [pc, #228]	; (2778 <LEDDebug(LEDStruct&)+0x56c>)
    2692:	4825      	ldr	r0, [pc, #148]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2694:	f7fe f96e 	bl	974 <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    2698:	4927      	ldr	r1, [pc, #156]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    269a:	4823      	ldr	r0, [pc, #140]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    269c:	f7fe f978 	bl	990 <Print::println(char const*)>
    26a0:	4936      	ldr	r1, [pc, #216]	; (277c <LEDDebug(LEDStruct&)+0x570>)
    26a2:	4821      	ldr	r0, [pc, #132]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26a4:	f7fe f966 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26a8:	2300      	movs	r3, #0
    26aa:	220a      	movs	r2, #10
    26ac:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    26b0:	481d      	ldr	r0, [pc, #116]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26b2:	f00b f935 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    26b6:	4920      	ldr	r1, [pc, #128]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    26b8:	481b      	ldr	r0, [pc, #108]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26ba:	f7fe f969 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26be:	4930      	ldr	r1, [pc, #192]	; (2780 <LEDDebug(LEDStruct&)+0x574>)
    26c0:	4819      	ldr	r0, [pc, #100]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26c2:	f7fe f957 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26c6:	2300      	movs	r3, #0
    26c8:	220a      	movs	r2, #10
    26ca:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    26ce:	4816      	ldr	r0, [pc, #88]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26d0:	f00b f926 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    26d4:	4918      	ldr	r1, [pc, #96]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    26d6:	4814      	ldr	r0, [pc, #80]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26d8:	f7fe f95a 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26dc:	4929      	ldr	r1, [pc, #164]	; (2784 <LEDDebug(LEDStruct&)+0x578>)
    26de:	4812      	ldr	r0, [pc, #72]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26e0:	f7fe f948 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26e4:	2300      	movs	r3, #0
    26e6:	220a      	movs	r2, #10
    26e8:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    26ec:	480e      	ldr	r0, [pc, #56]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26ee:	f00b f917 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    26f2:	4911      	ldr	r1, [pc, #68]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    26f4:	480c      	ldr	r0, [pc, #48]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26f6:	f7fe f94b 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26fa:	4923      	ldr	r1, [pc, #140]	; (2788 <LEDDebug(LEDStruct&)+0x57c>)
    26fc:	480a      	ldr	r0, [pc, #40]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26fe:	f7fe f939 	bl	974 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2702:	2300      	movs	r3, #0
    2704:	220a      	movs	r2, #10
    2706:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    270a:	4807      	ldr	r0, [pc, #28]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    270c:	f00b f908 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    2710:	4909      	ldr	r1, [pc, #36]	; (2738 <LEDDebug(LEDStruct&)+0x52c>)
    2712:	4805      	ldr	r0, [pc, #20]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    2714:	f7fe f93c 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2718:	491c      	ldr	r1, [pc, #112]	; (278c <LEDDebug(LEDStruct&)+0x580>)
    271a:	4803      	ldr	r0, [pc, #12]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    271c:	f7fe f92a 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2720:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    2724:	e730      	b.n	2588 <LEDDebug(LEDStruct&)+0x37c>
    2726:	bf00      	nop
    2728:	1fff8790 	.word	0x1fff8790
    272c:	0000fa4c 	.word	0x0000fa4c
    2730:	0000fa70 	.word	0x0000fa70
    2734:	0000fa94 	.word	0x0000fa94
    2738:	0000f9b4 	.word	0x0000f9b4
    273c:	0000faac 	.word	0x0000faac
    2740:	0000fac0 	.word	0x0000fac0
    2744:	0000fad4 	.word	0x0000fad4
    2748:	0000fae8 	.word	0x0000fae8
    274c:	0000faf8 	.word	0x0000faf8
    2750:	0000fb08 	.word	0x0000fb08
    2754:	0000fb18 	.word	0x0000fb18
    2758:	0000fb30 	.word	0x0000fb30
    275c:	0000fb9c 	.word	0x0000fb9c
    2760:	0000fbac 	.word	0x0000fbac
    2764:	0000fbbc 	.word	0x0000fbbc
    2768:	0000fbcc 	.word	0x0000fbcc
    276c:	0000fd30 	.word	0x0000fd30
    2770:	0000fdd8 	.word	0x0000fdd8
    2774:	0000fdfc 	.word	0x0000fdfc
    2778:	0000fe10 	.word	0x0000fe10
    277c:	0000fe2c 	.word	0x0000fe2c
    2780:	0000fe44 	.word	0x0000fe44
    2784:	0000fe5c 	.word	0x0000fe5c
    2788:	0000fe74 	.word	0x0000fe74
    278c:	0000fe90 	.word	0x0000fe90
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    2790:	49ad      	ldr	r1, [pc, #692]	; (2a48 <LEDDebug(LEDStruct&)+0x83c>)
    2792:	48ae      	ldr	r0, [pc, #696]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2794:	f7fe f8fc 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2798:	49ad      	ldr	r1, [pc, #692]	; (2a50 <LEDDebug(LEDStruct&)+0x844>)
    279a:	48ac      	ldr	r0, [pc, #688]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    279c:	f7fe f8ea 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    27a0:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    27a4:	48a9      	ldr	r0, [pc, #676]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    27a6:	f00b f8fb 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    27aa:	49aa      	ldr	r1, [pc, #680]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    27ac:	48a7      	ldr	r0, [pc, #668]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    27ae:	f7fe f8ef 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27b2:	49a9      	ldr	r1, [pc, #676]	; (2a58 <LEDDebug(LEDStruct&)+0x84c>)
    27b4:	48a5      	ldr	r0, [pc, #660]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    27b6:	f7fe f8dd 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27ba:	2300      	movs	r3, #0
    27bc:	220a      	movs	r2, #10
    27be:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    27c2:	48a2      	ldr	r0, [pc, #648]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    27c4:	f00b f8ac 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    27c8:	49a2      	ldr	r1, [pc, #648]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    27ca:	48a0      	ldr	r0, [pc, #640]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    27cc:	f7fe f8e0 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27d0:	49a2      	ldr	r1, [pc, #648]	; (2a5c <LEDDebug(LEDStruct&)+0x850>)
    27d2:	489e      	ldr	r0, [pc, #632]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    27d4:	f7fe f8ce 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27d8:	2300      	movs	r3, #0
    27da:	220a      	movs	r2, #10
    27dc:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    27e0:	489a      	ldr	r0, [pc, #616]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    27e2:	f00b f89d 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    27e6:	499b      	ldr	r1, [pc, #620]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    27e8:	4898      	ldr	r0, [pc, #608]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    27ea:	f7fe f8d1 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27ee:	499c      	ldr	r1, [pc, #624]	; (2a60 <LEDDebug(LEDStruct&)+0x854>)
    27f0:	4896      	ldr	r0, [pc, #600]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    27f2:	f7fe f8bf 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27f6:	2300      	movs	r3, #0
    27f8:	220a      	movs	r2, #10
    27fa:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    27fe:	4893      	ldr	r0, [pc, #588]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2800:	f00b f88e 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2804:	4993      	ldr	r1, [pc, #588]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2806:	4891      	ldr	r0, [pc, #580]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2808:	f7fe f8c2 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    280c:	4995      	ldr	r1, [pc, #596]	; (2a64 <LEDDebug(LEDStruct&)+0x858>)
    280e:	488f      	ldr	r0, [pc, #572]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2810:	f7fe f8b0 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2814:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2818:	e606      	b.n	2428 <LEDDebug(LEDStruct&)+0x21c>
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    281a:	4993      	ldr	r1, [pc, #588]	; (2a68 <LEDDebug(LEDStruct&)+0x85c>)
    281c:	488b      	ldr	r0, [pc, #556]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    281e:	f7fe f8b7 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2822:	4992      	ldr	r1, [pc, #584]	; (2a6c <LEDDebug(LEDStruct&)+0x860>)
    2824:	4889      	ldr	r0, [pc, #548]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2826:	f7fe f8a5 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    282a:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    282e:	4887      	ldr	r0, [pc, #540]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2830:	f00b f8b6 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2834:	4987      	ldr	r1, [pc, #540]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2836:	4885      	ldr	r0, [pc, #532]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2838:	f7fe f8aa 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    283c:	498c      	ldr	r1, [pc, #560]	; (2a70 <LEDDebug(LEDStruct&)+0x864>)
    283e:	4883      	ldr	r0, [pc, #524]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2840:	f7fe f898 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2844:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    2848:	4880      	ldr	r0, [pc, #512]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    284a:	f00b f8a9 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    284e:	4981      	ldr	r1, [pc, #516]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2850:	487e      	ldr	r0, [pc, #504]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2852:	f7fe f89d 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2856:	4987      	ldr	r1, [pc, #540]	; (2a74 <LEDDebug(LEDStruct&)+0x868>)
    2858:	487c      	ldr	r0, [pc, #496]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    285a:	f7fe f88b 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    285e:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    2862:	487a      	ldr	r0, [pc, #488]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2864:	f00b f89c 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2868:	497a      	ldr	r1, [pc, #488]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    286a:	4878      	ldr	r0, [pc, #480]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    286c:	f7fe f890 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2870:	4981      	ldr	r1, [pc, #516]	; (2a78 <LEDDebug(LEDStruct&)+0x86c>)
    2872:	4876      	ldr	r0, [pc, #472]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2874:	f7fe f87e 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2878:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    287c:	4873      	ldr	r0, [pc, #460]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    287e:	f00b f88f 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    2882:	4974      	ldr	r1, [pc, #464]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2884:	4871      	ldr	r0, [pc, #452]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2886:	f7fe f883 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    288a:	497c      	ldr	r1, [pc, #496]	; (2a7c <LEDDebug(LEDStruct&)+0x870>)
    288c:	486f      	ldr	r0, [pc, #444]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    288e:	f7fe f871 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2892:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    2896:	e5c7      	b.n	2428 <LEDDebug(LEDStruct&)+0x21c>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2898:	4979      	ldr	r1, [pc, #484]	; (2a80 <LEDDebug(LEDStruct&)+0x874>)
    289a:	486c      	ldr	r0, [pc, #432]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    289c:	f7fe f878 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28a0:	4978      	ldr	r1, [pc, #480]	; (2a84 <LEDDebug(LEDStruct&)+0x878>)
    28a2:	486a      	ldr	r0, [pc, #424]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28a4:	f7fe f866 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28a8:	2300      	movs	r3, #0
    28aa:	220a      	movs	r2, #10
    28ac:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    28b0:	4866      	ldr	r0, [pc, #408]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28b2:	f00b f835 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    28b6:	4967      	ldr	r1, [pc, #412]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    28b8:	4864      	ldr	r0, [pc, #400]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28ba:	f7fe f869 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28be:	4972      	ldr	r1, [pc, #456]	; (2a88 <LEDDebug(LEDStruct&)+0x87c>)
    28c0:	4862      	ldr	r0, [pc, #392]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28c2:	f7fe f857 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28c6:	2300      	movs	r3, #0
    28c8:	220a      	movs	r2, #10
    28ca:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    28ce:	485f      	ldr	r0, [pc, #380]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28d0:	f00b f826 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    28d4:	495f      	ldr	r1, [pc, #380]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    28d6:	485d      	ldr	r0, [pc, #372]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28d8:	f7fe f85a 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28dc:	496b      	ldr	r1, [pc, #428]	; (2a8c <LEDDebug(LEDStruct&)+0x880>)
    28de:	485b      	ldr	r0, [pc, #364]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28e0:	f7fe f848 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28e4:	2300      	movs	r3, #0
    28e6:	220a      	movs	r2, #10
    28e8:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    28ec:	4857      	ldr	r0, [pc, #348]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28ee:	f00b f817 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    28f2:	4958      	ldr	r1, [pc, #352]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    28f4:	4855      	ldr	r0, [pc, #340]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28f6:	f7fe f84b 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28fa:	4965      	ldr	r1, [pc, #404]	; (2a90 <LEDDebug(LEDStruct&)+0x884>)
    28fc:	4853      	ldr	r0, [pc, #332]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    28fe:	f7fe f839 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2902:	2300      	movs	r3, #0
    2904:	220a      	movs	r2, #10
    2906:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    290a:	4850      	ldr	r0, [pc, #320]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    290c:	f00b f808 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2910:	4950      	ldr	r1, [pc, #320]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2912:	484e      	ldr	r0, [pc, #312]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2914:	f7fe f83c 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2918:	495e      	ldr	r1, [pc, #376]	; (2a94 <LEDDebug(LEDStruct&)+0x888>)
    291a:	484c      	ldr	r0, [pc, #304]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    291c:	f7fe f82a 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2920:	2300      	movs	r3, #0
    2922:	220a      	movs	r2, #10
    2924:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2928:	4848      	ldr	r0, [pc, #288]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    292a:	f00a fff9 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    292e:	4949      	ldr	r1, [pc, #292]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2930:	4846      	ldr	r0, [pc, #280]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2932:	f7fe f82d 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2936:	4958      	ldr	r1, [pc, #352]	; (2a98 <LEDDebug(LEDStruct&)+0x88c>)
    2938:	4844      	ldr	r0, [pc, #272]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    293a:	f7fe f81b 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    293e:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2942:	e621      	b.n	2588 <LEDDebug(LEDStruct&)+0x37c>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2944:	4955      	ldr	r1, [pc, #340]	; (2a9c <LEDDebug(LEDStruct&)+0x890>)
    2946:	4841      	ldr	r0, [pc, #260]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2948:	f7fe f822 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    294c:	4954      	ldr	r1, [pc, #336]	; (2aa0 <LEDDebug(LEDStruct&)+0x894>)
    294e:	483f      	ldr	r0, [pc, #252]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2950:	f7fe f810 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2954:	2300      	movs	r3, #0
    2956:	220a      	movs	r2, #10
    2958:	f894 1769 	ldrb.w	r1, [r4, #1897]	; 0x769
    295c:	483b      	ldr	r0, [pc, #236]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    295e:	f00a ffdf 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2962:	493c      	ldr	r1, [pc, #240]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2964:	4839      	ldr	r0, [pc, #228]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2966:	f7fe f813 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    296a:	494e      	ldr	r1, [pc, #312]	; (2aa4 <LEDDebug(LEDStruct&)+0x898>)
    296c:	4837      	ldr	r0, [pc, #220]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    296e:	f7fe f801 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2972:	2300      	movs	r3, #0
    2974:	220a      	movs	r2, #10
    2976:	f894 176a 	ldrb.w	r1, [r4, #1898]	; 0x76a
    297a:	4834      	ldr	r0, [pc, #208]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    297c:	f00a ffd0 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2980:	4934      	ldr	r1, [pc, #208]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2982:	4832      	ldr	r0, [pc, #200]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2984:	f7fe f804 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2988:	4947      	ldr	r1, [pc, #284]	; (2aa8 <LEDDebug(LEDStruct&)+0x89c>)
    298a:	4830      	ldr	r0, [pc, #192]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    298c:	f7fd fff2 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2990:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2994:	e5f8      	b.n	2588 <LEDDebug(LEDStruct&)+0x37c>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case LIGHTSABER:
			Serial.println("============LIGHTSABER============");
    2996:	4945      	ldr	r1, [pc, #276]	; (2aac <LEDDebug(LEDStruct&)+0x8a0>)
    2998:	482c      	ldr	r0, [pc, #176]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    299a:	f7fd fff9 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    299e:	4944      	ldr	r1, [pc, #272]	; (2ab0 <LEDDebug(LEDStruct&)+0x8a4>)
    29a0:	482a      	ldr	r0, [pc, #168]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29a2:	f7fd ffe7 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29a6:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    29aa:	4828      	ldr	r0, [pc, #160]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29ac:	f00a fff8 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (a) use_palette:\t");
			Serial.print(leds.use_palette);
			Serial.println("\t||");
    29b0:	4928      	ldr	r1, [pc, #160]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    29b2:	4826      	ldr	r0, [pc, #152]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29b4:	f7fd ffec 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29b8:	493e      	ldr	r1, [pc, #248]	; (2ab4 <LEDDebug(LEDStruct&)+0x8a8>)
    29ba:	4824      	ldr	r0, [pc, #144]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29bc:	f7fd ffda 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29c0:	2300      	movs	r3, #0
    29c2:	220a      	movs	r2, #10
    29c4:	f894 182e 	ldrb.w	r1, [r4, #2094]	; 0x82e
    29c8:	4820      	ldr	r0, [pc, #128]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29ca:	f00a ffa9 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) blade_color:\t");
			Serial.print(leds.blade_color);
			Serial.println("\t||");
    29ce:	4921      	ldr	r1, [pc, #132]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    29d0:	481e      	ldr	r0, [pc, #120]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29d2:	f7fd ffdd 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29d6:	4938      	ldr	r1, [pc, #224]	; (2ab8 <LEDDebug(LEDStruct&)+0x8ac>)
    29d8:	481c      	ldr	r0, [pc, #112]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29da:	f7fd ffcb 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29de:	2300      	movs	r3, #0
    29e0:	220a      	movs	r2, #10
    29e2:	f894 183d 	ldrb.w	r1, [r4, #2109]	; 0x83d
    29e6:	4819      	ldr	r0, [pc, #100]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29e8:	f00a ff9a 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) delta_bright:\t");
			Serial.print(leds.delta_bright);
			Serial.println("\t||");
    29ec:	4919      	ldr	r1, [pc, #100]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    29ee:	4817      	ldr	r0, [pc, #92]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29f0:	f7fd ffce 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29f4:	4931      	ldr	r1, [pc, #196]	; (2abc <LEDDebug(LEDStruct&)+0x8b0>)
    29f6:	4815      	ldr	r0, [pc, #84]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    29f8:	f7fd ffbc 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29fc:	f8b4 1830 	ldrh.w	r1, [r4, #2096]	; 0x830
    2a00:	4812      	ldr	r0, [pc, #72]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2a02:	f00a ffcd 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (d) hold_time:\t");
			Serial.print(leds.hold_time);
			Serial.println("\t||");
    2a06:	4913      	ldr	r1, [pc, #76]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2a08:	4810      	ldr	r0, [pc, #64]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2a0a:	f7fd ffc1 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a0e:	492c      	ldr	r1, [pc, #176]	; (2ac0 <LEDDebug(LEDStruct&)+0x8b4>)
    2a10:	480e      	ldr	r0, [pc, #56]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2a12:	f7fd ffaf 	bl	974 <Print::write(char const*)>
			Serial.print("|| saber_stage:\t\t");
			switch (leds.saber_stage) {
    2a16:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    2a1a:	2b01      	cmp	r3, #1
    2a1c:	f000 82c1 	beq.w	2fa2 <LEDDebug(LEDStruct&)+0xd96>
    2a20:	f0c0 82e9 	bcc.w	2ff6 <LEDDebug(LEDStruct&)+0xdea>
    2a24:	2b02      	cmp	r3, #2
    2a26:	d103      	bne.n	2a30 <LEDDebug(LEDStruct&)+0x824>
    2a28:	4926      	ldr	r1, [pc, #152]	; (2ac4 <LEDDebug(LEDStruct&)+0x8b8>)
    2a2a:	4808      	ldr	r0, [pc, #32]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2a2c:	f7fd ffa2 	bl	974 <Print::write(char const*)>
				case UP: Serial.print("UP"); break;
				case DOWN: Serial.print("DOWN"); break;
				case WAIT: Serial.print("WAIT"); break;
			}
			Serial.println("\t||");
    2a30:	4908      	ldr	r1, [pc, #32]	; (2a54 <LEDDebug(LEDStruct&)+0x848>)
    2a32:	4806      	ldr	r0, [pc, #24]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2a34:	f7fd ffac 	bl	990 <Print::println(char const*)>
    2a38:	4923      	ldr	r1, [pc, #140]	; (2ac8 <LEDDebug(LEDStruct&)+0x8bc>)
    2a3a:	4804      	ldr	r0, [pc, #16]	; (2a4c <LEDDebug(LEDStruct&)+0x840>)
    2a3c:	f7fd ff9a 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a40:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    2a44:	e5a0      	b.n	2588 <LEDDebug(LEDStruct&)+0x37c>
    2a46:	bf00      	nop
    2a48:	0001006c 	.word	0x0001006c
    2a4c:	1fff8790 	.word	0x1fff8790
    2a50:	00010090 	.word	0x00010090
    2a54:	0000f9b4 	.word	0x0000f9b4
    2a58:	000100a8 	.word	0x000100a8
    2a5c:	000100bc 	.word	0x000100bc
    2a60:	000100d4 	.word	0x000100d4
    2a64:	000100ec 	.word	0x000100ec
    2a68:	00010104 	.word	0x00010104
    2a6c:	0000fa94 	.word	0x0000fa94
    2a70:	00010128 	.word	0x00010128
    2a74:	00010140 	.word	0x00010140
    2a78:	00010158 	.word	0x00010158
    2a7c:	0001016c 	.word	0x0001016c
    2a80:	00010180 	.word	0x00010180
    2a84:	000101a4 	.word	0x000101a4
    2a88:	000101bc 	.word	0x000101bc
    2a8c:	000101d4 	.word	0x000101d4
    2a90:	000101ec 	.word	0x000101ec
    2a94:	00010204 	.word	0x00010204
    2a98:	00010218 	.word	0x00010218
    2a9c:	00010230 	.word	0x00010230
    2aa0:	00010254 	.word	0x00010254
    2aa4:	00010264 	.word	0x00010264
    2aa8:	00010280 	.word	0x00010280
    2aac:	00010298 	.word	0x00010298
    2ab0:	000102bc 	.word	0x000102bc
    2ab4:	000102d4 	.word	0x000102d4
    2ab8:	000102ec 	.word	0x000102ec
    2abc:	00010304 	.word	0x00010304
    2ac0:	00010318 	.word	0x00010318
    2ac4:	0001032c 	.word	0x0001032c
    2ac8:	0001033c 	.word	0x0001033c
			Serial.print(leds.tip_pos);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    2acc:	498a      	ldr	r1, [pc, #552]	; (2cf8 <LEDDebug(LEDStruct&)+0xaec>)
    2ace:	488b      	ldr	r0, [pc, #556]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2ad0:	f7fd ff5e 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ad4:	498a      	ldr	r1, [pc, #552]	; (2d00 <LEDDebug(LEDStruct&)+0xaf4>)
    2ad6:	4889      	ldr	r0, [pc, #548]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2ad8:	f7fd ff4c 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2adc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2ae0:	4886      	ldr	r0, [pc, #536]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2ae2:	f00a ff5d 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2ae6:	4987      	ldr	r1, [pc, #540]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2ae8:	4884      	ldr	r0, [pc, #528]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2aea:	f7fd ff51 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aee:	4986      	ldr	r1, [pc, #536]	; (2d08 <LEDDebug(LEDStruct&)+0xafc>)
    2af0:	4882      	ldr	r0, [pc, #520]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2af2:	f7fd ff3f 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2af6:	2300      	movs	r3, #0
    2af8:	220a      	movs	r2, #10
    2afa:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    2afe:	487f      	ldr	r0, [pc, #508]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b00:	f00a ff0e 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    2b04:	497f      	ldr	r1, [pc, #508]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2b06:	487d      	ldr	r0, [pc, #500]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b08:	f7fd ff42 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b0c:	497f      	ldr	r1, [pc, #508]	; (2d0c <LEDDebug(LEDStruct&)+0xb00>)
    2b0e:	487b      	ldr	r0, [pc, #492]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b10:	f7fd ff30 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b14:	2300      	movs	r3, #0
    2b16:	220a      	movs	r2, #10
    2b18:	f894 1840 	ldrb.w	r1, [r4, #2112]	; 0x840
    2b1c:	4877      	ldr	r0, [pc, #476]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b1e:	f00a feff 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    2b22:	4978      	ldr	r1, [pc, #480]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2b24:	4875      	ldr	r0, [pc, #468]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b26:	f7fd ff33 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b2a:	4979      	ldr	r1, [pc, #484]	; (2d10 <LEDDebug(LEDStruct&)+0xb04>)
    2b2c:	4873      	ldr	r0, [pc, #460]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b2e:	f7fd ff21 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b32:	f894 1841 	ldrb.w	r1, [r4, #2113]	; 0x841
    2b36:	4871      	ldr	r0, [pc, #452]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b38:	f00a ff32 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    2b3c:	4971      	ldr	r1, [pc, #452]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2b3e:	486f      	ldr	r0, [pc, #444]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b40:	f7fd ff26 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b44:	4973      	ldr	r1, [pc, #460]	; (2d14 <LEDDebug(LEDStruct&)+0xb08>)
    2b46:	486d      	ldr	r0, [pc, #436]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b48:	f7fd ff14 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b4c:	f894 1842 	ldrb.w	r1, [r4, #2114]	; 0x842
    2b50:	e51a      	b.n	2588 <LEDDebug(LEDStruct&)+0x37c>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		case PLASMA:
			Serial.println("=============PLASMA===============");
    2b52:	4971      	ldr	r1, [pc, #452]	; (2d18 <LEDDebug(LEDStruct&)+0xb0c>)
    2b54:	4869      	ldr	r0, [pc, #420]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b56:	f7fd ff1b 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b5a:	4969      	ldr	r1, [pc, #420]	; (2d00 <LEDDebug(LEDStruct&)+0xaf4>)
    2b5c:	4867      	ldr	r0, [pc, #412]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b5e:	f7fd ff09 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b62:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2b66:	4865      	ldr	r0, [pc, #404]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b68:	f00a ff1a 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2b6c:	4965      	ldr	r1, [pc, #404]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2b6e:	4863      	ldr	r0, [pc, #396]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b70:	f7fd ff0e 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b74:	4969      	ldr	r1, [pc, #420]	; (2d1c <LEDDebug(LEDStruct&)+0xb10>)
    2b76:	4861      	ldr	r0, [pc, #388]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b78:	f7fd fefc 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b7c:	2300      	movs	r3, #0
    2b7e:	220a      	movs	r2, #10
    2b80:	f894 184c 	ldrb.w	r1, [r4, #2124]	; 0x84c
    2b84:	485d      	ldr	r0, [pc, #372]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b86:	f00a fecb 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) plasma_beat1:\t");
			Serial.print(leds.plasma_beat1);
			Serial.println("\t||");
    2b8a:	495e      	ldr	r1, [pc, #376]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2b8c:	485b      	ldr	r0, [pc, #364]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b8e:	f7fd feff 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b92:	4963      	ldr	r1, [pc, #396]	; (2d20 <LEDDebug(LEDStruct&)+0xb14>)
    2b94:	4859      	ldr	r0, [pc, #356]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b96:	f7fd feed 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b9a:	2300      	movs	r3, #0
    2b9c:	220a      	movs	r2, #10
    2b9e:	f894 184d 	ldrb.w	r1, [r4, #2125]	; 0x84d
    2ba2:	4856      	ldr	r0, [pc, #344]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2ba4:	f00a febc 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) plasma_beat2:\t");
			Serial.print(leds.plasma_beat2);
			Serial.println("\t||");
    2ba8:	4956      	ldr	r1, [pc, #344]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2baa:	4854      	ldr	r0, [pc, #336]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2bac:	f7fd fef0 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bb0:	495c      	ldr	r1, [pc, #368]	; (2d24 <LEDDebug(LEDStruct&)+0xb18>)
    2bb2:	4852      	ldr	r0, [pc, #328]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2bb4:	f7fd fede 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bb8:	f894 184e 	ldrb.w	r1, [r4, #2126]	; 0x84e
    2bbc:	e434      	b.n	2428 <LEDDebug(LEDStruct&)+0x21c>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    2bbe:	495a      	ldr	r1, [pc, #360]	; (2d28 <LEDDebug(LEDStruct&)+0xb1c>)
    2bc0:	e54b      	b.n	265a <LEDDebug(LEDStruct&)+0x44e>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    2bc2:	495a      	ldr	r1, [pc, #360]	; (2d2c <LEDDebug(LEDStruct&)+0xb20>)
    2bc4:	484d      	ldr	r0, [pc, #308]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2bc6:	f7fd fee3 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bca:	494d      	ldr	r1, [pc, #308]	; (2d00 <LEDDebug(LEDStruct&)+0xaf4>)
    2bcc:	484b      	ldr	r0, [pc, #300]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2bce:	f7fd fed1 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bd2:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2bd6:	4849      	ldr	r0, [pc, #292]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2bd8:	f00a fee2 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2bdc:	4949      	ldr	r1, [pc, #292]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2bde:	4847      	ldr	r0, [pc, #284]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2be0:	f7fd fed6 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2be4:	4952      	ldr	r1, [pc, #328]	; (2d30 <LEDDebug(LEDStruct&)+0xb24>)
    2be6:	4845      	ldr	r0, [pc, #276]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2be8:	f7fd fec4 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bec:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2bf0:	e41a      	b.n	2428 <LEDDebug(LEDStruct&)+0x21c>
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    2bf2:	4950      	ldr	r1, [pc, #320]	; (2d34 <LEDDebug(LEDStruct&)+0xb28>)
    2bf4:	4841      	ldr	r0, [pc, #260]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2bf6:	f7fd fecb 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bfa:	4941      	ldr	r1, [pc, #260]	; (2d00 <LEDDebug(LEDStruct&)+0xaf4>)
    2bfc:	483f      	ldr	r0, [pc, #252]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2bfe:	f7fd feb9 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c02:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2c06:	483d      	ldr	r0, [pc, #244]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c08:	f00a feca 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2c0c:	493d      	ldr	r1, [pc, #244]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2c0e:	483b      	ldr	r0, [pc, #236]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c10:	f7fd febe 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c14:	4948      	ldr	r1, [pc, #288]	; (2d38 <LEDDebug(LEDStruct&)+0xb2c>)
    2c16:	4839      	ldr	r0, [pc, #228]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c18:	f7fd feac 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c1c:	2300      	movs	r3, #0
    2c1e:	220a      	movs	r2, #10
    2c20:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2c24:	4835      	ldr	r0, [pc, #212]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c26:	f00a fe7b 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2c2a:	4936      	ldr	r1, [pc, #216]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2c2c:	4833      	ldr	r0, [pc, #204]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c2e:	f7fd feaf 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c32:	4942      	ldr	r1, [pc, #264]	; (2d3c <LEDDebug(LEDStruct&)+0xb30>)
    2c34:	4831      	ldr	r0, [pc, #196]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c36:	f7fd fe9d 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c3a:	2300      	movs	r3, #0
    2c3c:	220a      	movs	r2, #10
    2c3e:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2c42:	482e      	ldr	r0, [pc, #184]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c44:	f00a fe6c 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2c48:	492e      	ldr	r1, [pc, #184]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2c4a:	482c      	ldr	r0, [pc, #176]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c4c:	f7fd fea0 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c50:	493b      	ldr	r1, [pc, #236]	; (2d40 <LEDDebug(LEDStruct&)+0xb34>)
    2c52:	482a      	ldr	r0, [pc, #168]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c54:	f7fd fe8e 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c58:	2300      	movs	r3, #0
    2c5a:	220a      	movs	r2, #10
    2c5c:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2c60:	4826      	ldr	r0, [pc, #152]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c62:	f00a fe5d 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2c66:	4927      	ldr	r1, [pc, #156]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2c68:	4824      	ldr	r0, [pc, #144]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c6a:	f7fd fe91 	bl	990 <Print::println(char const*)>
    2c6e:	2111      	movs	r1, #17
    2c70:	4834      	ldr	r0, [pc, #208]	; (2d44 <LEDDebug(LEDStruct&)+0xb38>)
    2c72:	f00a fc41 	bl	d4f8 <usb_serial_write>
    2c76:	2300      	movs	r3, #0
    2c78:	220a      	movs	r2, #10
    2c7a:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2c7e:	481f      	ldr	r0, [pc, #124]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c80:	f00a fe4e 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2c84:	491f      	ldr	r1, [pc, #124]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2c86:	481d      	ldr	r0, [pc, #116]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c88:	f7fd fe82 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c8c:	492e      	ldr	r1, [pc, #184]	; (2d48 <LEDDebug(LEDStruct&)+0xb3c>)
    2c8e:	481b      	ldr	r0, [pc, #108]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c90:	f7fd fe70 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c94:	2300      	movs	r3, #0
    2c96:	220a      	movs	r2, #10
    2c98:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    2c9c:	4817      	ldr	r0, [pc, #92]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2c9e:	f00a fe3f 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2ca2:	4918      	ldr	r1, [pc, #96]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2ca4:	4815      	ldr	r0, [pc, #84]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2ca6:	f7fd fe73 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2caa:	4928      	ldr	r1, [pc, #160]	; (2d4c <LEDDebug(LEDStruct&)+0xb40>)
    2cac:	4813      	ldr	r0, [pc, #76]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2cae:	f7fd fe61 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2cb2:	2300      	movs	r3, #0
    2cb4:	220a      	movs	r2, #10
    2cb6:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2cba:	4810      	ldr	r0, [pc, #64]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2cbc:	f00a fe30 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    2cc0:	4910      	ldr	r1, [pc, #64]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2cc2:	480e      	ldr	r0, [pc, #56]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2cc4:	f7fd fe64 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2cc8:	4921      	ldr	r1, [pc, #132]	; (2d50 <LEDDebug(LEDStruct&)+0xb44>)
    2cca:	480c      	ldr	r0, [pc, #48]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2ccc:	f7fd fe52 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2cd0:	2300      	movs	r3, #0
    2cd2:	220a      	movs	r2, #10
    2cd4:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    2cd8:	4808      	ldr	r0, [pc, #32]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2cda:	f00a fe21 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    2cde:	4909      	ldr	r1, [pc, #36]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2ce0:	4806      	ldr	r0, [pc, #24]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2ce2:	f7fd fe55 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ce6:	491b      	ldr	r1, [pc, #108]	; (2d54 <LEDDebug(LEDStruct&)+0xb48>)
    2ce8:	4804      	ldr	r0, [pc, #16]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2cea:	f7fd fe43 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2cee:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    2cf2:	f7ff bb99 	b.w	2428 <LEDDebug(LEDStruct&)+0x21c>
    2cf6:	bf00      	nop
    2cf8:	0001034c 	.word	0x0001034c
    2cfc:	1fff8790 	.word	0x1fff8790
    2d00:	0000fa94 	.word	0x0000fa94
    2d04:	0000f9b4 	.word	0x0000f9b4
    2d08:	00010370 	.word	0x00010370
    2d0c:	00010388 	.word	0x00010388
    2d10:	000103a4 	.word	0x000103a4
    2d14:	000103c0 	.word	0x000103c0
    2d18:	000103d8 	.word	0x000103d8
    2d1c:	000103fc 	.word	0x000103fc
    2d20:	00010414 	.word	0x00010414
    2d24:	0001042c 	.word	0x0001042c
    2d28:	0000fd78 	.word	0x0000fd78
    2d2c:	0000fd9c 	.word	0x0000fd9c
    2d30:	0000fdc0 	.word	0x0000fdc0
    2d34:	0000fea8 	.word	0x0000fea8
    2d38:	0000fecc 	.word	0x0000fecc
    2d3c:	0000fee0 	.word	0x0000fee0
    2d40:	0000fef4 	.word	0x0000fef4
    2d44:	0000ff08 	.word	0x0000ff08
    2d48:	0000ff1c 	.word	0x0000ff1c
    2d4c:	0000ff30 	.word	0x0000ff30
    2d50:	0000ff44 	.word	0x0000ff44
    2d54:	0000ff58 	.word	0x0000ff58
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    2d58:	49ae      	ldr	r1, [pc, #696]	; (3014 <LEDDebug(LEDStruct&)+0xe08>)
    2d5a:	48af      	ldr	r0, [pc, #700]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2d5c:	f7fd fe18 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d60:	49ae      	ldr	r1, [pc, #696]	; (301c <LEDDebug(LEDStruct&)+0xe10>)
    2d62:	48ad      	ldr	r0, [pc, #692]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2d64:	f7fd fe06 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d68:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2d6c:	48aa      	ldr	r0, [pc, #680]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2d6e:	f00a fe17 	bl	d9a0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2d72:	49ab      	ldr	r1, [pc, #684]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2d74:	48a8      	ldr	r0, [pc, #672]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2d76:	f7fd fe0b 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d7a:	49aa      	ldr	r1, [pc, #680]	; (3024 <LEDDebug(LEDStruct&)+0xe18>)
    2d7c:	48a6      	ldr	r0, [pc, #664]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2d7e:	f7fd fdf9 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d82:	2300      	movs	r3, #0
    2d84:	220a      	movs	r2, #10
    2d86:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    2d8a:	48a3      	ldr	r0, [pc, #652]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2d8c:	f00a fdc8 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    2d90:	49a3      	ldr	r1, [pc, #652]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2d92:	48a1      	ldr	r0, [pc, #644]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2d94:	f7fd fdfc 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d98:	49a3      	ldr	r1, [pc, #652]	; (3028 <LEDDebug(LEDStruct&)+0xe1c>)
    2d9a:	489f      	ldr	r0, [pc, #636]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2d9c:	f7fd fdea 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2da0:	2300      	movs	r3, #0
    2da2:	220a      	movs	r2, #10
    2da4:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    2da8:	489b      	ldr	r0, [pc, #620]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2daa:	f00a fdb9 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    2dae:	499c      	ldr	r1, [pc, #624]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2db0:	4899      	ldr	r0, [pc, #612]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2db2:	f7fd fded 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2db6:	499d      	ldr	r1, [pc, #628]	; (302c <LEDDebug(LEDStruct&)+0xe20>)
    2db8:	4897      	ldr	r0, [pc, #604]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2dba:	f7fd fddb 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2dbe:	2300      	movs	r3, #0
    2dc0:	220a      	movs	r2, #10
    2dc2:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2dc6:	4894      	ldr	r0, [pc, #592]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2dc8:	f00a fdaa 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2dcc:	4994      	ldr	r1, [pc, #592]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2dce:	4892      	ldr	r0, [pc, #584]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2dd0:	f7fd fdde 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2dd4:	4996      	ldr	r1, [pc, #600]	; (3030 <LEDDebug(LEDStruct&)+0xe24>)
    2dd6:	4890      	ldr	r0, [pc, #576]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2dd8:	f7fd fdcc 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ddc:	2300      	movs	r3, #0
    2dde:	220a      	movs	r2, #10
    2de0:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    2de4:	488c      	ldr	r0, [pc, #560]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2de6:	f00a fd9b 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    2dea:	498d      	ldr	r1, [pc, #564]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2dec:	488a      	ldr	r0, [pc, #552]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2dee:	f7fd fdcf 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2df2:	4990      	ldr	r1, [pc, #576]	; (3034 <LEDDebug(LEDStruct&)+0xe28>)
    2df4:	4888      	ldr	r0, [pc, #544]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2df6:	f7fd fdbd 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2dfa:	2300      	movs	r3, #0
    2dfc:	220a      	movs	r2, #10
    2dfe:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2e02:	4885      	ldr	r0, [pc, #532]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e04:	f00a fd8c 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2e08:	4985      	ldr	r1, [pc, #532]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2e0a:	4883      	ldr	r0, [pc, #524]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e0c:	f7fd fdc0 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e10:	4989      	ldr	r1, [pc, #548]	; (3038 <LEDDebug(LEDStruct&)+0xe2c>)
    2e12:	4881      	ldr	r0, [pc, #516]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e14:	f7fd fdae 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e18:	2300      	movs	r3, #0
    2e1a:	220a      	movs	r2, #10
    2e1c:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    2e20:	487d      	ldr	r0, [pc, #500]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e22:	f00a fd7d 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    2e26:	497e      	ldr	r1, [pc, #504]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2e28:	487b      	ldr	r0, [pc, #492]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e2a:	f7fd fdb1 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e2e:	4983      	ldr	r1, [pc, #524]	; (303c <LEDDebug(LEDStruct&)+0xe30>)
    2e30:	4879      	ldr	r0, [pc, #484]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e32:	f7fd fd9f 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e36:	2300      	movs	r3, #0
    2e38:	220a      	movs	r2, #10
    2e3a:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2e3e:	4876      	ldr	r0, [pc, #472]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e40:	f00a fd6e 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2e44:	4976      	ldr	r1, [pc, #472]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2e46:	4874      	ldr	r0, [pc, #464]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e48:	f7fd fda2 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e4c:	497c      	ldr	r1, [pc, #496]	; (3040 <LEDDebug(LEDStruct&)+0xe34>)
    2e4e:	4872      	ldr	r0, [pc, #456]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e50:	f7fd fd90 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e54:	2300      	movs	r3, #0
    2e56:	220a      	movs	r2, #10
    2e58:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    2e5c:	486e      	ldr	r0, [pc, #440]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e5e:	f00a fd5f 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    2e62:	496f      	ldr	r1, [pc, #444]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2e64:	486c      	ldr	r0, [pc, #432]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e66:	f7fd fd93 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e6a:	4976      	ldr	r1, [pc, #472]	; (3044 <LEDDebug(LEDStruct&)+0xe38>)
    2e6c:	486a      	ldr	r0, [pc, #424]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e6e:	f7fd fd81 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e72:	2300      	movs	r3, #0
    2e74:	220a      	movs	r2, #10
    2e76:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    2e7a:	4867      	ldr	r0, [pc, #412]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e7c:	f00a fd50 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2e80:	4967      	ldr	r1, [pc, #412]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2e82:	4865      	ldr	r0, [pc, #404]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e84:	f7fd fd84 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e88:	496f      	ldr	r1, [pc, #444]	; (3048 <LEDDebug(LEDStruct&)+0xe3c>)
    2e8a:	4863      	ldr	r0, [pc, #396]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e8c:	f7fd fd72 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e90:	2300      	movs	r3, #0
    2e92:	220a      	movs	r2, #10
    2e94:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    2e98:	485f      	ldr	r0, [pc, #380]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2e9a:	f00a fd41 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    2e9e:	4960      	ldr	r1, [pc, #384]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2ea0:	485d      	ldr	r0, [pc, #372]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2ea2:	f7fd fd75 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ea6:	4969      	ldr	r1, [pc, #420]	; (304c <LEDDebug(LEDStruct&)+0xe40>)
    2ea8:	485b      	ldr	r0, [pc, #364]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2eaa:	f7fd fd63 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2eae:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2eb2:	f7ff bab9 	b.w	2428 <LEDDebug(LEDStruct&)+0x21c>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2eb6:	4966      	ldr	r1, [pc, #408]	; (3050 <LEDDebug(LEDStruct&)+0xe44>)
    2eb8:	f7ff bbcf 	b.w	265a <LEDDebug(LEDStruct&)+0x44e>
			Serial.println("\t||");
			break;


		default:
			Serial.println("");
    2ebc:	4965      	ldr	r1, [pc, #404]	; (3054 <LEDDebug(LEDStruct&)+0xe48>)
    2ebe:	4856      	ldr	r0, [pc, #344]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2ec0:	f7fd fd66 	bl	990 <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2ec4:	4964      	ldr	r1, [pc, #400]	; (3058 <LEDDebug(LEDStruct&)+0xe4c>)
    2ec6:	4854      	ldr	r0, [pc, #336]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2ec8:	f7fd fd62 	bl	990 <Print::println(char const*)>
			Serial.println("");
    2ecc:	4961      	ldr	r1, [pc, #388]	; (3054 <LEDDebug(LEDStruct&)+0xe48>)
    2ece:	4852      	ldr	r0, [pc, #328]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2ed0:	f7fd fd5e 	bl	990 <Print::println(char const*)>
			break;
    2ed4:	f7ff bab1 	b.w	243a <LEDDebug(LEDStruct&)+0x22e>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2ed8:	4960      	ldr	r1, [pc, #384]	; (305c <LEDDebug(LEDStruct&)+0xe50>)
    2eda:	484f      	ldr	r0, [pc, #316]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2edc:	f7fd fd58 	bl	990 <Print::println(char const*)>
    2ee0:	f7ff b9ac 	b.w	223c <LEDDebug(LEDStruct&)+0x30>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2ee4:	495e      	ldr	r1, [pc, #376]	; (3060 <LEDDebug(LEDStruct&)+0xe54>)
    2ee6:	484c      	ldr	r0, [pc, #304]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2ee8:	f7fd fd52 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2eec:	495d      	ldr	r1, [pc, #372]	; (3064 <LEDDebug(LEDStruct&)+0xe58>)
    2eee:	484a      	ldr	r0, [pc, #296]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2ef0:	f7fd fd40 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ef4:	2300      	movs	r3, #0
    2ef6:	220a      	movs	r2, #10
    2ef8:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2efc:	4846      	ldr	r0, [pc, #280]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2efe:	f00a fd0f 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				default: break;
			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2f02:	4947      	ldr	r1, [pc, #284]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2f04:	4844      	ldr	r0, [pc, #272]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f06:	f7fd fd43 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f0a:	4957      	ldr	r1, [pc, #348]	; (3068 <LEDDebug(LEDStruct&)+0xe5c>)
    2f0c:	4842      	ldr	r0, [pc, #264]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f0e:	f7fd fd31 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f12:	2300      	movs	r3, #0
    2f14:	220a      	movs	r2, #10
    2f16:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2f1a:	483f      	ldr	r0, [pc, #252]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f1c:	f00a fd00 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2f20:	493f      	ldr	r1, [pc, #252]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2f22:	483d      	ldr	r0, [pc, #244]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f24:	f7fd fd34 	bl	990 <Print::println(char const*)>
			if (!leds.fire_sync) {
    2f28:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    2f2c:	b1d5      	cbz	r5, 2f64 <LEDDebug(LEDStruct&)+0xd58>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f2e:	494f      	ldr	r1, [pc, #316]	; (306c <LEDDebug(LEDStruct&)+0xe60>)
    2f30:	4839      	ldr	r0, [pc, #228]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f32:	f7fd fd1f 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2f36:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    2f3a:	4837      	ldr	r0, [pc, #220]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f3c:	f00a fd30 	bl	d9a0 <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2f40:	4937      	ldr	r1, [pc, #220]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2f42:	4835      	ldr	r0, [pc, #212]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f44:	f7fd fd24 	bl	990 <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    2f48:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2f4c:	3b0f      	subs	r3, #15
    2f4e:	2b01      	cmp	r3, #1
    2f50:	f63f aa73 	bhi.w	243a <LEDDebug(LEDStruct&)+0x22e>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f54:	4946      	ldr	r1, [pc, #280]	; (3070 <LEDDebug(LEDStruct&)+0xe64>)
    2f56:	4830      	ldr	r0, [pc, #192]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f58:	f7fd fd0c 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f5c:	f894 131b 	ldrb.w	r1, [r4, #795]	; 0x31b
    2f60:	f7ff ba62 	b.w	2428 <LEDDebug(LEDStruct&)+0x21c>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f64:	4943      	ldr	r1, [pc, #268]	; (3074 <LEDDebug(LEDStruct&)+0xe68>)
    2f66:	482c      	ldr	r0, [pc, #176]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f68:	f7fd fd04 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f6c:	462b      	mov	r3, r5
    2f6e:	220a      	movs	r2, #10
    2f70:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2f74:	4828      	ldr	r0, [pc, #160]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f76:	f00a fcd3 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2f7a:	4929      	ldr	r1, [pc, #164]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2f7c:	4826      	ldr	r0, [pc, #152]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f7e:	f7fd fd07 	bl	990 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f82:	493d      	ldr	r1, [pc, #244]	; (3078 <LEDDebug(LEDStruct&)+0xe6c>)
    2f84:	4824      	ldr	r0, [pc, #144]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f86:	f7fd fcf5 	bl	974 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f8a:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    2f8e:	4822      	ldr	r0, [pc, #136]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f90:	462b      	mov	r3, r5
    2f92:	220a      	movs	r2, #10
    2f94:	f00a fcc4 	bl	d920 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2f98:	4921      	ldr	r1, [pc, #132]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2f9a:	481f      	ldr	r0, [pc, #124]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2f9c:	f7fd fcf8 	bl	990 <Print::println(char const*)>
    2fa0:	e7c5      	b.n	2f2e <LEDDebug(LEDStruct&)+0xd22>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2fa2:	4936      	ldr	r1, [pc, #216]	; (307c <LEDDebug(LEDStruct&)+0xe70>)
    2fa4:	481c      	ldr	r0, [pc, #112]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2fa6:	f7fd fce5 	bl	974 <Print::write(char const*)>
    2faa:	e541      	b.n	2a30 <LEDDebug(LEDStruct&)+0x824>
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
    2fac:	4934      	ldr	r1, [pc, #208]	; (3080 <LEDDebug(LEDStruct&)+0xe74>)
    2fae:	481a      	ldr	r0, [pc, #104]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2fb0:	f7fd fcee 	bl	990 <Print::println(char const*)>
    2fb4:	f7ff bafe 	b.w	25b4 <LEDDebug(LEDStruct&)+0x3a8>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2fb8:	4932      	ldr	r1, [pc, #200]	; (3084 <LEDDebug(LEDStruct&)+0xe78>)
    2fba:	4817      	ldr	r0, [pc, #92]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2fbc:	f7fd fce8 	bl	990 <Print::println(char const*)>
    2fc0:	f7ff bb6e 	b.w	26a0 <LEDDebug(LEDStruct&)+0x494>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    2fc4:	4930      	ldr	r1, [pc, #192]	; (3088 <LEDDebug(LEDStruct&)+0xe7c>)
    2fc6:	4814      	ldr	r0, [pc, #80]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2fc8:	f7fd fce2 	bl	990 <Print::println(char const*)>
    2fcc:	e78e      	b.n	2eec <LEDDebug(LEDStruct&)+0xce0>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    2fce:	492f      	ldr	r1, [pc, #188]	; (308c <LEDDebug(LEDStruct&)+0xe80>)
    2fd0:	4811      	ldr	r0, [pc, #68]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2fd2:	f7fd fcdd 	bl	990 <Print::println(char const*)>
    2fd6:	e789      	b.n	2eec <LEDDebug(LEDStruct&)+0xce0>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2fd8:	492d      	ldr	r1, [pc, #180]	; (3090 <LEDDebug(LEDStruct&)+0xe84>)
    2fda:	480f      	ldr	r0, [pc, #60]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2fdc:	f7fd fcd8 	bl	990 <Print::println(char const*)>
    2fe0:	e784      	b.n	2eec <LEDDebug(LEDStruct&)+0xce0>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2fe2:	492c      	ldr	r1, [pc, #176]	; (3094 <LEDDebug(LEDStruct&)+0xe88>)
    2fe4:	480c      	ldr	r0, [pc, #48]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2fe6:	f7fd fcd3 	bl	990 <Print::println(char const*)>
    2fea:	e77f      	b.n	2eec <LEDDebug(LEDStruct&)+0xce0>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    2fec:	492a      	ldr	r1, [pc, #168]	; (3098 <LEDDebug(LEDStruct&)+0xe8c>)
    2fee:	480a      	ldr	r0, [pc, #40]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2ff0:	f7fd fcce 	bl	990 <Print::println(char const*)>
    2ff4:	e77a      	b.n	2eec <LEDDebug(LEDStruct&)+0xce0>
    2ff6:	4929      	ldr	r1, [pc, #164]	; (309c <LEDDebug(LEDStruct&)+0xe90>)
    2ff8:	4807      	ldr	r0, [pc, #28]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2ffa:	f7fd fcbb 	bl	974 <Print::write(char const*)>
    2ffe:	e517      	b.n	2a30 <LEDDebug(LEDStruct&)+0x824>

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
    3000:	4927      	ldr	r1, [pc, #156]	; (30a0 <LEDDebug(LEDStruct&)+0xe94>)
    3002:	4805      	ldr	r0, [pc, #20]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    3004:	f7fd fcc4 	bl	990 <Print::println(char const*)>
    3008:	f7ff bad4 	b.w	25b4 <LEDDebug(LEDStruct&)+0x3a8>
    300c:	4925      	ldr	r1, [pc, #148]	; (30a4 <LEDDebug(LEDStruct&)+0xe98>)
    300e:	f7ff bb40 	b.w	2692 <LEDDebug(LEDStruct&)+0x486>
    3012:	bf00      	nop
    3014:	0000ff6c 	.word	0x0000ff6c
    3018:	1fff8790 	.word	0x1fff8790
    301c:	0000fa94 	.word	0x0000fa94
    3020:	0000f9b4 	.word	0x0000f9b4
    3024:	0000ff90 	.word	0x0000ff90
    3028:	0000ffa4 	.word	0x0000ffa4
    302c:	0000ffb8 	.word	0x0000ffb8
    3030:	0000ffcc 	.word	0x0000ffcc
    3034:	0000ffe0 	.word	0x0000ffe0
    3038:	0000fff4 	.word	0x0000fff4
    303c:	00010008 	.word	0x00010008
    3040:	0001001c 	.word	0x0001001c
    3044:	00010030 	.word	0x00010030
    3048:	00010044 	.word	0x00010044
    304c:	00010058 	.word	0x00010058
    3050:	0000fd54 	.word	0x0000fd54
    3054:	0000fad0 	.word	0x0000fad0
    3058:	000104cc 	.word	0x000104cc
    305c:	0000f97c 	.word	0x0000f97c
    3060:	0000fc50 	.word	0x0000fc50
    3064:	0000fcbc 	.word	0x0000fcbc
    3068:	0000fcd0 	.word	0x0000fcd0
    306c:	0000fd0c 	.word	0x0000fd0c
    3070:	0000fd1c 	.word	0x0000fd1c
    3074:	0000fce4 	.word	0x0000fce4
    3078:	0000fcf8 	.word	0x0000fcf8
    307c:	00010334 	.word	0x00010334
    3080:	0000fb54 	.word	0x0000fb54
    3084:	0000fe20 	.word	0x0000fe20
    3088:	0000fc08 	.word	0x0000fc08
    308c:	0000fbe4 	.word	0x0000fbe4
    3090:	0000fc98 	.word	0x0000fc98
    3094:	0000fc74 	.word	0x0000fc74
    3098:	0000fc2c 	.word	0x0000fc2c
    309c:	0000fe1c 	.word	0x0000fe1c
    30a0:	0000fb78 	.word	0x0000fb78
    30a4:	0000fe18 	.word	0x0000fe18

000030a8 <change_palette(LEDStruct&) [clone .part.12]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    30a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30ac:	b08d      	sub	sp, #52	; 0x34
    30ae:	2134      	movs	r1, #52	; 0x34
    30b0:	4605      	mov	r5, r0
    30b2:	9009      	str	r0, [sp, #36]	; 0x24
    30b4:	4846      	ldr	r0, [pc, #280]	; (31d0 <change_palette(LEDStruct&) [clone .part.12]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    30b6:	4c47      	ldr	r4, [pc, #284]	; (31d4 <change_palette(LEDStruct&) [clone .part.12]+0x12c>)
    30b8:	f00a fa1e 	bl	d4f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    30bc:	4846      	ldr	r0, [pc, #280]	; (31d8 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    30be:	f00a fc1f 	bl	d900 <Print::println()>
    30c2:	2133      	movs	r1, #51	; 0x33
    30c4:	4845      	ldr	r0, [pc, #276]	; (31dc <change_palette(LEDStruct&) [clone .part.12]+0x134>)
    30c6:	f00a fa17 	bl	d4f8 <usb_serial_write>
    30ca:	4843      	ldr	r0, [pc, #268]	; (31d8 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    30cc:	f00a fc18 	bl	d900 <Print::println()>
    30d0:	2133      	movs	r1, #51	; 0x33
    30d2:	4843      	ldr	r0, [pc, #268]	; (31e0 <change_palette(LEDStruct&) [clone .part.12]+0x138>)
    30d4:	f00a fa10 	bl	d4f8 <usb_serial_write>
    30d8:	483f      	ldr	r0, [pc, #252]	; (31d8 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    30da:	f00a fc11 	bl	d900 <Print::println()>
    30de:	4841      	ldr	r0, [pc, #260]	; (31e4 <change_palette(LEDStruct&) [clone .part.12]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    30e0:	4a41      	ldr	r2, [pc, #260]	; (31e8 <change_palette(LEDStruct&) [clone .part.12]+0x140>)
    30e2:	8803      	ldrh	r3, [r0, #0]
    30e4:	7811      	ldrb	r1, [r2, #0]
    30e6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    30ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    30ee:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    30f2:	3319      	adds	r3, #25
    30f4:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    30f6:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    30fa:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    30fc:	fb12 f201 	smulbb	r2, r2, r1
    3100:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3102:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    3104:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    3108:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    310c:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    310e:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    3112:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3114:	3701      	adds	r7, #1
        } while ( u.index != 255);
    3116:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3118:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    311a:	d1f8      	bne.n	310e <change_palette(LEDStruct&) [clone .part.12]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    311c:	f8d8 3000 	ldr.w	r3, [r8]
    3120:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3122:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    3124:	ea4f 6913 	mov.w	r9, r3, lsr #24
    3128:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    312c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    3130:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3134:	f04f 33ff 	mov.w	r3, #4294967295
    3138:	9207      	str	r2, [sp, #28]
    313a:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    313c:	2400      	movs	r4, #0
    313e:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3140:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3144:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3146:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    314a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    314e:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    3152:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    3154:	b2f9      	uxtb	r1, r7
    3156:	f3c5 6507 	ubfx	r5, r5, #24, #8
    315a:	9104      	str	r1, [sp, #16]
    315c:	b2e9      	uxtb	r1, r5
    315e:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    3160:	fa5f f18c 	uxtb.w	r1, ip
    3164:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    3166:	9908      	ldr	r1, [sp, #32]
    3168:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    316a:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    316c:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3170:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3174:	d80c      	bhi.n	3190 <change_palette(LEDStruct&) [clone .part.12]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    3176:	9906      	ldr	r1, [sp, #24]
    3178:	458c      	cmp	ip, r1
    317a:	dc07      	bgt.n	318c <change_palette(LEDStruct&) [clone .part.12]+0xe4>
    317c:	290f      	cmp	r1, #15
    317e:	d005      	beq.n	318c <change_palette(LEDStruct&) [clone .part.12]+0xe4>
                    istart8 = lastSlotUsed + 1;
    3180:	3101      	adds	r1, #1
    3182:	b2c9      	uxtb	r1, r1
    3184:	428b      	cmp	r3, r1
    3186:	9103      	str	r1, [sp, #12]
    3188:	bf38      	it	cc
    318a:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    318c:	b259      	sxtb	r1, r3
    318e:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3190:	a90b      	add	r1, sp, #44	; 0x2c
    3192:	9100      	str	r1, [sp, #0]
    3194:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3196:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    319a:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    319e:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31a2:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    31a6:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    31aa:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    31ae:	f008 f8ff 	bl	b3b0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    31b2:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31b4:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    31b8:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    31bc:	46ca      	mov	sl, r9
    31be:	d1bf      	bne.n	3140 <change_palette(LEDStruct&) [clone .part.12]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    31c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    31c2:	f893 0229 	ldrb.w	r0, [r3, #553]	; 0x229
    31c6:	f7fe fd13 	bl	1bf0 <print_palette(unsigned char)>
	}
}
    31ca:	b00d      	add	sp, #52	; 0x34
    31cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31d0:	00010514 	.word	0x00010514
    31d4:	00011054 	.word	0x00011054
    31d8:	1fff8790 	.word	0x1fff8790
    31dc:	0001054c 	.word	0x0001054c
    31e0:	00010580 	.word	0x00010580
    31e4:	1fff8788 	.word	0x1fff8788
    31e8:	1fff8758 	.word	0x1fff8758

000031ec <juggle_update(LEDStruct&)>:
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    31ec:	4b24      	ldr	r3, [pc, #144]	; (3280 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    31ee:	4a25      	ldr	r2, [pc, #148]	; (3284 <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    31f0:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    31f2:	2100      	movs	r1, #0
    31f4:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    31f6:	2b07      	cmp	r3, #7
    31f8:	d809      	bhi.n	320e <juggle_update(LEDStruct&)+0x22>
    31fa:	e8df f003 	tbb	[pc, r3]
    31fe:	1c13      	.short	0x1c13
    3200:	04342e25 	.word	0x04342e25
    3204:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    3206:	4b20      	ldr	r3, [pc, #128]	; (3288 <juggle_update(LEDStruct&)+0x9c>)
    3208:	881b      	ldrh	r3, [r3, #0]
    320a:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    320e:	f7fe bffd 	b.w	220c <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    3212:	4b1d      	ldr	r3, [pc, #116]	; (3288 <juggle_update(LEDStruct&)+0x9c>)
    3214:	881b      	ldrh	r3, [r3, #0]
    3216:	3300      	adds	r3, #0
    3218:	bf18      	it	ne
    321a:	2301      	movne	r3, #1
    321c:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    3220:	f7fe bff4 	b.w	220c <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    3224:	4b18      	ldr	r3, [pc, #96]	; (3288 <juggle_update(LEDStruct&)+0x9c>)
    3226:	881b      	ldrh	r3, [r3, #0]
    3228:	3300      	adds	r3, #0
    322a:	bf18      	it	ne
    322c:	2301      	movne	r3, #1
    322e:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3232:	f7fe bfeb 	b.w	220c <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    3236:	4b14      	ldr	r3, [pc, #80]	; (3288 <juggle_update(LEDStruct&)+0x9c>)
    3238:	881b      	ldrh	r3, [r3, #0]
    323a:	3300      	adds	r3, #0
    323c:	bf18      	it	ne
    323e:	2301      	movne	r3, #1
    3240:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3244:	f7fe bfe2 	b.w	220c <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    3248:	4b0f      	ldr	r3, [pc, #60]	; (3288 <juggle_update(LEDStruct&)+0x9c>)
    324a:	881b      	ldrh	r3, [r3, #0]
    324c:	3300      	adds	r3, #0
    324e:	bf18      	it	ne
    3250:	2301      	movne	r3, #1
    3252:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3256:	f7fe bfd9 	b.w	220c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    325a:	4b0b      	ldr	r3, [pc, #44]	; (3288 <juggle_update(LEDStruct&)+0x9c>)
    325c:	881b      	ldrh	r3, [r3, #0]
    325e:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3262:	f7fe bfd3 	b.w	220c <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    3266:	4b08      	ldr	r3, [pc, #32]	; (3288 <juggle_update(LEDStruct&)+0x9c>)
    3268:	881b      	ldrh	r3, [r3, #0]
    326a:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    326e:	f7fe bfcd 	b.w	220c <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    3272:	4b05      	ldr	r3, [pc, #20]	; (3288 <juggle_update(LEDStruct&)+0x9c>)
    3274:	881b      	ldrh	r3, [r3, #0]
    3276:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    327a:	f7fe bfc7 	b.w	220c <LEDDebug(LEDStruct&)>
    327e:	bf00      	nop
    3280:	1fff9e84 	.word	0x1fff9e84
    3284:	1fff9621 	.word	0x1fff9621
    3288:	1fff9522 	.word	0x1fff9522

0000328c <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3290:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    3294:	b089      	sub	sp, #36	; 0x24
    3296:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3298:	2b00      	cmp	r3, #0
    329a:	f040 809d 	bne.w	33d8 <juggle(LEDStruct&)+0x14c>
    329e:	4ed4      	ldr	r6, [pc, #848]	; (35f0 <juggle(LEDStruct&)+0x364>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    32a0:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    32a4:	8833      	ldrh	r3, [r6, #0]
    32a6:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    32aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    32ae:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    32b2:	3019      	adds	r0, #25
    32b4:	b280      	uxth	r0, r0
    32b6:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    32ba:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    32be:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    32c2:	3519      	adds	r5, #25
    32c4:	b2ad      	uxth	r5, r5
    32c6:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    32ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    32ce:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    32d2:	3319      	adds	r3, #25
    32d4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    32d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    32dc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    32e0:	3319      	adds	r3, #25
    32e2:	b29b      	uxth	r3, r3
    32e4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    32e8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    32ec:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    32f0:	3119      	adds	r1, #25
    32f2:	b289      	uxth	r1, r1
    32f4:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    32f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    32fc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3300:	3219      	adds	r2, #25
    3302:	b292      	uxth	r2, r2
    3304:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3308:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    330c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3310:	f10e 0e19 	add.w	lr, lr, #25
    3314:	fa1f fe8e 	uxth.w	lr, lr
    3318:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    331c:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3320:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3324:	f10c 0c19 	add.w	ip, ip, #25
    3328:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    332c:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3330:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    3334:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3338:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    333c:	b2ff      	uxtb	r7, r7
    333e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3342:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    3346:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    334a:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    334e:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    3350:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3352:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3356:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    335a:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    335e:	ea4f 2e27 	mov.w	lr, r7, asr #8
    3362:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    3366:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3368:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    336c:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3370:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3374:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3378:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    337a:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    337e:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3382:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3386:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3388:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    338c:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3390:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3394:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3398:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    339a:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    339e:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    33a2:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    33a6:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    33aa:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    33ac:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    33ae:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    33b2:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    33b6:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    33ba:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    33be:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    33c2:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    33c6:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    33ca:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    33ce:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    33d2:	2b00      	cmp	r3, #0
    33d4:	f040 8177 	bne.w	36c6 <juggle(LEDStruct&)+0x43a>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    33d8:	4b86      	ldr	r3, [pc, #536]	; (35f4 <juggle(LEDStruct&)+0x368>)
    33da:	781b      	ldrb	r3, [r3, #0]
    33dc:	2b00      	cmp	r3, #0
    33de:	f040 817d 	bne.w	36dc <juggle(LEDStruct&)+0x450>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    33e2:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    33e6:	b1d3      	cbz	r3, 341e <juggle(LEDStruct&)+0x192>
    33e8:	4b83      	ldr	r3, [pc, #524]	; (35f8 <juggle(LEDStruct&)+0x36c>)
    33ea:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    33ee:	2200      	movs	r2, #0
    33f0:	f103 0027 	add.w	r0, r3, #39	; 0x27
    33f4:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    33f8:	e001      	b.n	33fe <juggle(LEDStruct&)+0x172>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    33fa:	4283      	cmp	r3, r0
    33fc:	d00f      	beq.n	341e <juggle(LEDStruct&)+0x192>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    33fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3402:	428a      	cmp	r2, r1
    3404:	d1f9      	bne.n	33fa <juggle(LEDStruct&)+0x16e>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3406:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    340a:	4a7c      	ldr	r2, [pc, #496]	; (35fc <juggle(LEDStruct&)+0x370>)
    340c:	fba2 2303 	umull	r2, r3, r2, r3
    3410:	08db      	lsrs	r3, r3, #3
    3412:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3414:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3416:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    341a:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    341e:	2196      	movs	r1, #150	; 0x96
    3420:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3424:	4620      	mov	r0, r4
    3426:	f008 f855 	bl	b4d4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    342a:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    342e:	2900      	cmp	r1, #0
    3430:	f040 80ec 	bne.w	360c <juggle(LEDStruct&)+0x380>
		if (leds.juggle_phased) {
    3434:	f894 7236 	ldrb.w	r7, [r4, #566]	; 0x236
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3438:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    343c:	2f00      	cmp	r7, #0
    343e:	f000 81ac 	beq.w	379a <juggle(LEDStruct&)+0x50e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3442:	2b00      	cmp	r3, #0
    3444:	f000 8273 	beq.w	392e <juggle(LEDStruct&)+0x6a2>
    3448:	486d      	ldr	r0, [pc, #436]	; (3600 <juggle(LEDStruct&)+0x374>)
    344a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    344e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 3604 <juggle(LEDStruct&)+0x378>
    3452:	9003      	str	r0, [sp, #12]
    3454:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 3608 <juggle(LEDStruct&)+0x37c>
    3458:	460f      	mov	r7, r1
    345a:	f10d 0a1c 	add.w	sl, sp, #28
    345e:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3462:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    3466:	e05d      	b.n	3524 <juggle(LEDStruct&)+0x298>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3468:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    346c:	443b      	add	r3, r7
    346e:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3470:	f8d9 1000 	ldr.w	r1, [r9]
    3474:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3476:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3478:	9904      	ldr	r1, [sp, #16]
    347a:	bf98      	it	ls
    347c:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    347e:	f44f 708c 	mov.w	r0, #280	; 0x118
    3482:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3486:	bf98      	it	ls
    3488:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    348a:	fb03 f301 	mul.w	r3, r3, r1
    348e:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3490:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3492:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3496:	d503      	bpl.n	34a0 <juggle(LEDStruct&)+0x214>
    3498:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    349c:	3107      	adds	r1, #7
    349e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    34a0:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    34a2:	9e03      	ldr	r6, [sp, #12]
    34a4:	5c36      	ldrb	r6, [r6, r0]
    34a6:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    34aa:	f3c1 0146 	ubfx	r1, r1, #1, #7
    34ae:	fb06 0101 	mla	r1, r6, r1, r0
    34b2:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    34b4:	041e      	lsls	r6, r3, #16
    34b6:	bf48      	it	mi
    34b8:	4249      	negmi	r1, r1
    34ba:	b20e      	sxth	r6, r1
    34bc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    34c0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    34c4:	9100      	str	r1, [sp, #0]
    34c6:	4650      	mov	r0, sl
    34c8:	4641      	mov	r1, r8
    34ca:	f008 f863 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    34ce:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    34d2:	2296      	movs	r2, #150	; 0x96
    34d4:	b29b      	uxth	r3, r3
    34d6:	fb02 f303 	mul.w	r3, r2, r3
    34da:	0c1b      	lsrs	r3, r3, #16
    34dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    34e0:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    34e2:	5ce2      	ldrb	r2, [r4, r3]
    34e4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    34e8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34ec:	54e2      	strb	r2, [r4, r3]
    34ee:	f89d 301d 	ldrb.w	r3, [sp, #29]
    34f2:	784a      	ldrb	r2, [r1, #1]
    34f4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    34f8:	704a      	strb	r2, [r1, #1]
    34fa:	788b      	ldrb	r3, [r1, #2]
    34fc:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3500:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3504:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3506:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    350a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    350e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3512:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3514:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3516:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3518:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    351a:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    351c:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3520:	f240 8205 	bls.w	392e <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3524:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3528:	2900      	cmp	r1, #0
    352a:	d19d      	bne.n	3468 <juggle(LEDStruct&)+0x1dc>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    352c:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3530:	443b      	add	r3, r7
    3532:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3534:	f8d9 1000 	ldr.w	r1, [r9]
    3538:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    353a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    353c:	9905      	ldr	r1, [sp, #20]
    353e:	bf98      	it	ls
    3540:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3542:	f44f 708c 	mov.w	r0, #280	; 0x118
    3546:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    354a:	bf98      	it	ls
    354c:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    354e:	fb03 f301 	mul.w	r3, r3, r1
    3552:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3554:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3556:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    355a:	d503      	bpl.n	3564 <juggle(LEDStruct&)+0x2d8>
    355c:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3560:	3107      	adds	r1, #7
    3562:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3564:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3566:	9e03      	ldr	r6, [sp, #12]
    3568:	5c36      	ldrb	r6, [r6, r0]
    356a:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    356e:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3572:	fb06 0101 	mla	r1, r6, r1, r0
    3576:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3578:	041e      	lsls	r6, r3, #16
    357a:	bf48      	it	mi
    357c:	4249      	negmi	r1, r1
    357e:	b20e      	sxth	r6, r1
    3580:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3584:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3588:	9100      	str	r1, [sp, #0]
    358a:	4650      	mov	r0, sl
    358c:	4641      	mov	r1, r8
    358e:	f008 f801 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3592:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3596:	b29b      	uxth	r3, r3
    3598:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    359c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    35a0:	0c1b      	lsrs	r3, r3, #16
    35a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    35a6:	18e1      	adds	r1, r4, r3
    35a8:	5ce2      	ldrb	r2, [r4, r3]
    35aa:	f89d 001c 	ldrb.w	r0, [sp, #28]
    35ae:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35b2:	54e2      	strb	r2, [r4, r3]
    35b4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    35b8:	784a      	ldrb	r2, [r1, #1]
    35ba:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35be:	704a      	strb	r2, [r1, #1]
    35c0:	788b      	ldrb	r3, [r1, #2]
    35c2:	f89d 201e 	ldrb.w	r2, [sp, #30]
    35c6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    35ca:	708b      	strb	r3, [r1, #2]
    35cc:	4622      	mov	r2, r4
    35ce:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35d0:	7819      	ldrb	r1, [r3, #0]
    35d2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    35d6:	7859      	ldrb	r1, [r3, #1]
    35d8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    35dc:	7899      	ldrb	r1, [r3, #2]
    35de:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    35e2:	3303      	adds	r3, #3
LEDStruct curr_over_leds;
LEDStruct next_over_leds;

// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    35e4:	429d      	cmp	r5, r3
    35e6:	f1a2 0203 	sub.w	r2, r2, #3
    35ea:	d1f1      	bne.n	35d0 <juggle(LEDStruct&)+0x344>
    35ec:	e78b      	b.n	3506 <juggle(LEDStruct&)+0x27a>
    35ee:	bf00      	nop
    35f0:	1fff8788 	.word	0x1fff8788
    35f4:	1fff9621 	.word	0x1fff9621
    35f8:	1fff875f 	.word	0x1fff875f
    35fc:	cccccccd 	.word	0xcccccccd
    3600:	000111f8 	.word	0x000111f8
    3604:	1fffb18c 	.word	0x1fffb18c
    3608:	00010ac0 	.word	0x00010ac0
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    360c:	f894 6236 	ldrb.w	r6, [r4, #566]	; 0x236
    3610:	2e00      	cmp	r6, #0
    3612:	d067      	beq.n	36e4 <juggle(LEDStruct&)+0x458>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3614:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3618:	2b00      	cmp	r3, #0
    361a:	f000 8188 	beq.w	392e <juggle(LEDStruct&)+0x6a2>
    361e:	2500      	movs	r5, #0
    3620:	f10d 0a1c 	add.w	sl, sp, #28
    3624:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3628:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    362c:	e039      	b.n	36a2 <juggle(LEDStruct&)+0x416>
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    362e:	fb06 f305 	mul.w	r3, r6, r5
    3632:	2900      	cmp	r1, #0
    3634:	f000 81b5 	beq.w	39a2 <juggle(LEDStruct&)+0x716>
    3638:	2295      	movs	r2, #149	; 0x95
    363a:	2100      	movs	r1, #0
    363c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3640:	f7fc ff7a 	bl	538 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3644:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3648:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    364c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3650:	9100      	str	r1, [sp, #0]
    3652:	4607      	mov	r7, r0
    3654:	4641      	mov	r1, r8
    3656:	4650      	mov	r0, sl
    3658:	f007 ff9c 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    365c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3660:	18e1      	adds	r1, r4, r3
    3662:	5ce2      	ldrb	r2, [r4, r3]
    3664:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3668:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    366c:	54e2      	strb	r2, [r4, r3]
    366e:	784a      	ldrb	r2, [r1, #1]
    3670:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3674:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3678:	704a      	strb	r2, [r1, #1]
    367a:	788b      	ldrb	r3, [r1, #2]
    367c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3680:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3684:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3686:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    368a:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    368e:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3692:	3501      	adds	r5, #1
    3694:	b2ed      	uxtb	r5, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3696:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3698:	42aa      	cmp	r2, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    369a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    369e:	f240 8146 	bls.w	392e <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    36a2:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    36a6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    36aa:	2b00      	cmp	r3, #0
    36ac:	d1bf      	bne.n	362e <juggle(LEDStruct&)+0x3a2>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    36ae:	2900      	cmp	r1, #0
    36b0:	f000 81b8 	beq.w	3a24 <juggle(LEDStruct&)+0x798>
    36b4:	4619      	mov	r1, r3
    36b6:	2295      	movs	r2, #149	; 0x95
    36b8:	fb06 f305 	mul.w	r3, r6, r5
    36bc:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    36c0:	f7fc ff7c 	bl	5bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    36c4:	e7be      	b.n	3644 <juggle(LEDStruct&)+0x3b8>
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    36c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    36ca:	fa02 f300 	lsl.w	r3, r2, r0
    36ce:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    36d2:	4bd0      	ldr	r3, [pc, #832]	; (3a14 <juggle(LEDStruct&)+0x788>)
    36d4:	781b      	ldrb	r3, [r3, #0]
    36d6:	2b00      	cmp	r3, #0
    36d8:	f43f ae83 	beq.w	33e2 <juggle(LEDStruct&)+0x156>
    36dc:	4620      	mov	r0, r4
    36de:	f7ff fd85 	bl	31ec <juggle_update(LEDStruct&)>
    36e2:	e67e      	b.n	33e2 <juggle(LEDStruct&)+0x156>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    36e4:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    36e8:	2900      	cmp	r1, #0
    36ea:	f000 8120 	beq.w	392e <juggle(LEDStruct&)+0x6a2>
    36ee:	f10d 0a1c 	add.w	sl, sp, #28
    36f2:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    36f6:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    36fa:	e03c      	b.n	3776 <juggle(LEDStruct&)+0x4ea>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    36fc:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3700:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3704:	4431      	add	r1, r6
    3706:	2b00      	cmp	r3, #0
    3708:	f000 8114 	beq.w	3934 <juggle(LEDStruct&)+0x6a8>
    370c:	2300      	movs	r3, #0
    370e:	4408      	add	r0, r1
    3710:	2295      	movs	r2, #149	; 0x95
    3712:	4619      	mov	r1, r3
    3714:	f7fc ff10 	bl	538 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3718:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    371c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3720:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3724:	9100      	str	r1, [sp, #0]
    3726:	4607      	mov	r7, r0
    3728:	4641      	mov	r1, r8
    372a:	4650      	mov	r0, sl
    372c:	f007 ff32 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3730:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3734:	18e1      	adds	r1, r4, r3
    3736:	5ce2      	ldrb	r2, [r4, r3]
    3738:	f89d 001c 	ldrb.w	r0, [sp, #28]
    373c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3740:	54e2      	strb	r2, [r4, r3]
    3742:	784a      	ldrb	r2, [r1, #1]
    3744:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3748:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    374c:	704a      	strb	r2, [r1, #1]
    374e:	788b      	ldrb	r3, [r1, #2]
    3750:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3754:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3758:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    375a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    375e:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3762:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3766:	3601      	adds	r6, #1
    3768:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    376a:	4413      	add	r3, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    376c:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    376e:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3772:	f240 80dc 	bls.w	392e <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    3776:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    377a:	2b00      	cmp	r3, #0
    377c:	d1be      	bne.n	36fc <juggle(LEDStruct&)+0x470>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    377e:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3782:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3786:	4431      	add	r1, r6
    3788:	4408      	add	r0, r1
    378a:	2a00      	cmp	r2, #0
    378c:	f000 8185 	beq.w	3a9a <juggle(LEDStruct&)+0x80e>
    3790:	4619      	mov	r1, r3
    3792:	2295      	movs	r2, #149	; 0x95
    3794:	f7fc ff12 	bl	5bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3798:	e7be      	b.n	3718 <juggle(LEDStruct&)+0x48c>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    379a:	2b00      	cmp	r3, #0
    379c:	f000 80c7 	beq.w	392e <juggle(LEDStruct&)+0x6a2>
    37a0:	4b9d      	ldr	r3, [pc, #628]	; (3a18 <juggle(LEDStruct&)+0x78c>)
    37a2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    37a6:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3a1c <juggle(LEDStruct&)+0x790>
    37aa:	9303      	str	r3, [sp, #12]
    37ac:	f8df b270 	ldr.w	fp, [pc, #624]	; 3a20 <juggle(LEDStruct&)+0x794>
    37b0:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    37b4:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    37b8:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    37bc:	e057      	b.n	386e <juggle(LEDStruct&)+0x5e2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37be:	f8d9 3000 	ldr.w	r3, [r9]
    37c2:	9306      	str	r3, [sp, #24]
	return ret;
    37c4:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    37c6:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    37ca:	fb0a f303 	mul.w	r3, sl, r3
    37ce:	0209      	lsls	r1, r1, #8
    37d0:	fb03 f301 	mul.w	r3, r3, r1
    37d4:	0379      	lsls	r1, r7, #13
    37d6:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    37da:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    37dc:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    37de:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    37e2:	d503      	bpl.n	37ec <juggle(LEDStruct&)+0x560>
    37e4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    37e8:	3307      	adds	r3, #7
    37ea:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    37ec:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    37ee:	9e03      	ldr	r6, [sp, #12]
    37f0:	5c36      	ldrb	r6, [r6, r0]
    37f2:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    37f6:	f3c3 0346 	ubfx	r3, r3, #1, #7
    37fa:	fb06 0303 	mla	r3, r6, r3, r0
    37fe:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3800:	040e      	lsls	r6, r1, #16
    3802:	bf48      	it	mi
    3804:	425b      	negmi	r3, r3
    3806:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    380a:	b21e      	sxth	r6, r3
    380c:	a805      	add	r0, sp, #20
    380e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3812:	9100      	str	r1, [sp, #0]
    3814:	4641      	mov	r1, r8
    3816:	f007 febd 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    381a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    381e:	2296      	movs	r2, #150	; 0x96
    3820:	b29b      	uxth	r3, r3
    3822:	fb02 f303 	mul.w	r3, r2, r3
    3826:	0c1b      	lsrs	r3, r3, #16
    3828:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    382c:	18e1      	adds	r1, r4, r3
    382e:	5ce2      	ldrb	r2, [r4, r3]
    3830:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3834:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3838:	54e2      	strb	r2, [r4, r3]
    383a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    383e:	784a      	ldrb	r2, [r1, #1]
    3840:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3844:	704a      	strb	r2, [r1, #1]
    3846:	788b      	ldrb	r3, [r1, #2]
    3848:	f89d 2016 	ldrb.w	r2, [sp, #22]
    384c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3850:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3852:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3856:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    385a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    385e:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3860:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3862:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3864:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3866:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3868:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    386c:	d95f      	bls.n	392e <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    386e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3872:	2b00      	cmp	r3, #0
    3874:	d1a3      	bne.n	37be <juggle(LEDStruct&)+0x532>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3876:	f8d9 3000 	ldr.w	r3, [r9]
    387a:	9307      	str	r3, [sp, #28]
	return ret;
    387c:	9907      	ldr	r1, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    387e:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    3882:	fb0a f101 	mul.w	r1, sl, r1
    3886:	021b      	lsls	r3, r3, #8
    3888:	fb03 f301 	mul.w	r3, r3, r1
    388c:	0379      	lsls	r1, r7, #13
    388e:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    3892:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3894:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3896:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    389a:	d503      	bpl.n	38a4 <juggle(LEDStruct&)+0x618>
    389c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    38a0:	3307      	adds	r3, #7
    38a2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    38a4:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38a6:	9e03      	ldr	r6, [sp, #12]
    38a8:	5c36      	ldrb	r6, [r6, r0]
    38aa:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    38ae:	f3c3 0346 	ubfx	r3, r3, #1, #7
    38b2:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    38b6:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38b8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    38ba:	bf48      	it	mi
    38bc:	425b      	negmi	r3, r3
    38be:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    38c2:	b21e      	sxth	r6, r3
    38c4:	a805      	add	r0, sp, #20
    38c6:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    38ca:	9100      	str	r1, [sp, #0]
    38cc:	4641      	mov	r1, r8
    38ce:	f007 fe61 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    38d2:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    38d6:	b29b      	uxth	r3, r3
    38d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    38dc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    38e0:	0c1b      	lsrs	r3, r3, #16
    38e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    38e6:	18e1      	adds	r1, r4, r3
    38e8:	5ce2      	ldrb	r2, [r4, r3]
    38ea:	f89d 0014 	ldrb.w	r0, [sp, #20]
    38ee:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    38f2:	54e2      	strb	r2, [r4, r3]
    38f4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    38f8:	784a      	ldrb	r2, [r1, #1]
    38fa:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    38fe:	704a      	strb	r2, [r1, #1]
    3900:	788b      	ldrb	r3, [r1, #2]
    3902:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3906:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    390a:	708b      	strb	r3, [r1, #2]
    390c:	4622      	mov	r2, r4
    390e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3910:	7819      	ldrb	r1, [r3, #0]
    3912:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3916:	7859      	ldrb	r1, [r3, #1]
    3918:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    391c:	7899      	ldrb	r1, [r3, #2]
    391e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3922:	3303      	adds	r3, #3
    3924:	42ab      	cmp	r3, r5
    3926:	f1a2 0203 	sub.w	r2, r2, #3
    392a:	d1f1      	bne.n	3910 <juggle(LEDStruct&)+0x684>
    392c:	e791      	b.n	3852 <juggle(LEDStruct&)+0x5c6>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    392e:	b009      	add	sp, #36	; 0x24
    3930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3934:	4408      	add	r0, r1
    3936:	224a      	movs	r2, #74	; 0x4a
    3938:	4619      	mov	r1, r3
    393a:	f7fc fdfd 	bl	538 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    393e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3942:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3946:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    394a:	9100      	str	r1, [sp, #0]
    394c:	4607      	mov	r7, r0
    394e:	4641      	mov	r1, r8
    3950:	4650      	mov	r0, sl
    3952:	f007 fe1f 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3956:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    395a:	18e1      	adds	r1, r4, r3
    395c:	5ce2      	ldrb	r2, [r4, r3]
    395e:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3962:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3966:	54e2      	strb	r2, [r4, r3]
    3968:	f89d 301d 	ldrb.w	r3, [sp, #29]
    396c:	784a      	ldrb	r2, [r1, #1]
    396e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3972:	704a      	strb	r2, [r1, #1]
    3974:	788b      	ldrb	r3, [r1, #2]
    3976:	f89d 201e 	ldrb.w	r2, [sp, #30]
    397a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    397e:	708b      	strb	r3, [r1, #2]
    3980:	4622      	mov	r2, r4
    3982:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3984:	7819      	ldrb	r1, [r3, #0]
    3986:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    398a:	7859      	ldrb	r1, [r3, #1]
    398c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3990:	7899      	ldrb	r1, [r3, #2]
    3992:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3996:	3303      	adds	r3, #3
    3998:	42ab      	cmp	r3, r5
    399a:	f1a2 0203 	sub.w	r2, r2, #3
    399e:	d1f1      	bne.n	3984 <juggle(LEDStruct&)+0x6f8>
    39a0:	e6db      	b.n	375a <juggle(LEDStruct&)+0x4ce>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    39a2:	224a      	movs	r2, #74	; 0x4a
    39a4:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    39a8:	f7fc fdc6 	bl	538 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    39ac:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    39b0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    39b4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    39b8:	9100      	str	r1, [sp, #0]
    39ba:	4607      	mov	r7, r0
    39bc:	4641      	mov	r1, r8
    39be:	4650      	mov	r0, sl
    39c0:	f007 fde8 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    39c4:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    39c8:	18e1      	adds	r1, r4, r3
    39ca:	5ce2      	ldrb	r2, [r4, r3]
    39cc:	f89d 001c 	ldrb.w	r0, [sp, #28]
    39d0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    39d4:	54e2      	strb	r2, [r4, r3]
    39d6:	f89d 301d 	ldrb.w	r3, [sp, #29]
    39da:	784a      	ldrb	r2, [r1, #1]
    39dc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    39e0:	704a      	strb	r2, [r1, #1]
    39e2:	788b      	ldrb	r3, [r1, #2]
    39e4:	f89d 201e 	ldrb.w	r2, [sp, #30]
    39e8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    39ec:	708b      	strb	r3, [r1, #2]
    39ee:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    39f2:	4623      	mov	r3, r4
    39f4:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    39f6:	7819      	ldrb	r1, [r3, #0]
    39f8:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    39fc:	7859      	ldrb	r1, [r3, #1]
    39fe:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3a02:	7899      	ldrb	r1, [r3, #2]
    3a04:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3a08:	3303      	adds	r3, #3
    3a0a:	4283      	cmp	r3, r0
    3a0c:	f1a2 0203 	sub.w	r2, r2, #3
    3a10:	d1f1      	bne.n	39f6 <juggle(LEDStruct&)+0x76a>
    3a12:	e638      	b.n	3686 <juggle(LEDStruct&)+0x3fa>
    3a14:	1fff9621 	.word	0x1fff9621
    3a18:	000111f8 	.word	0x000111f8
    3a1c:	1fffb18c 	.word	0x1fffb18c
    3a20:	00010ac0 	.word	0x00010ac0
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3a24:	fb06 f305 	mul.w	r3, r6, r5
    3a28:	224a      	movs	r2, #74	; 0x4a
    3a2a:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3a2e:	f7fc fdc5 	bl	5bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3a32:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3a36:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3a3a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3a3e:	9100      	str	r1, [sp, #0]
    3a40:	4607      	mov	r7, r0
    3a42:	4641      	mov	r1, r8
    3a44:	4650      	mov	r0, sl
    3a46:	f007 fda5 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3a4a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3a4e:	18e1      	adds	r1, r4, r3
    3a50:	5ce2      	ldrb	r2, [r4, r3]
    3a52:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3a56:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3a5a:	54e2      	strb	r2, [r4, r3]
    3a5c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3a60:	784a      	ldrb	r2, [r1, #1]
    3a62:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a66:	704a      	strb	r2, [r1, #1]
    3a68:	788b      	ldrb	r3, [r1, #2]
    3a6a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3a6e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a72:	708b      	strb	r3, [r1, #2]
    3a74:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3a78:	4623      	mov	r3, r4
    3a7a:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a7c:	7819      	ldrb	r1, [r3, #0]
    3a7e:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3a82:	7859      	ldrb	r1, [r3, #1]
    3a84:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3a88:	7899      	ldrb	r1, [r3, #2]
    3a8a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3a8e:	3303      	adds	r3, #3
    3a90:	4283      	cmp	r3, r0
    3a92:	f1a2 0203 	sub.w	r2, r2, #3
    3a96:	d1f1      	bne.n	3a7c <juggle(LEDStruct&)+0x7f0>
    3a98:	e5f5      	b.n	3686 <juggle(LEDStruct&)+0x3fa>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3a9a:	4613      	mov	r3, r2
    3a9c:	4611      	mov	r1, r2
    3a9e:	224a      	movs	r2, #74	; 0x4a
    3aa0:	f7fc fd8c 	bl	5bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3aa4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3aa8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3aac:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3ab0:	9100      	str	r1, [sp, #0]
    3ab2:	4607      	mov	r7, r0
    3ab4:	4641      	mov	r1, r8
    3ab6:	4650      	mov	r0, sl
    3ab8:	f007 fd6c 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3abc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3ac0:	18e1      	adds	r1, r4, r3
    3ac2:	5ce2      	ldrb	r2, [r4, r3]
    3ac4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3ac8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3acc:	54e2      	strb	r2, [r4, r3]
    3ace:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3ad2:	784a      	ldrb	r2, [r1, #1]
    3ad4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ad8:	704a      	strb	r2, [r1, #1]
    3ada:	788b      	ldrb	r3, [r1, #2]
    3adc:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3ae0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ae4:	708b      	strb	r3, [r1, #2]
    3ae6:	4622      	mov	r2, r4
    3ae8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3aea:	7819      	ldrb	r1, [r3, #0]
    3aec:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3af0:	7859      	ldrb	r1, [r3, #1]
    3af2:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3af6:	7899      	ldrb	r1, [r3, #2]
    3af8:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3afc:	3303      	adds	r3, #3
    3afe:	42ab      	cmp	r3, r5
    3b00:	f1a2 0203 	sub.w	r2, r2, #3
    3b04:	d1f1      	bne.n	3aea <juggle(LEDStruct&)+0x85e>
    3b06:	e628      	b.n	375a <juggle(LEDStruct&)+0x4ce>

00003b08 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3b0c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    3b10:	b08d      	sub	sp, #52	; 0x34
    3b12:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3b14:	2b00      	cmp	r3, #0
    3b16:	f040 809d 	bne.w	3c54 <juggle_half(LEDStruct&)+0x14c>
    3b1a:	4ec5      	ldr	r6, [pc, #788]	; (3e30 <juggle_half(LEDStruct&)+0x328>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3b1c:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3b20:	8833      	ldrh	r3, [r6, #0]
    3b22:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3b26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3b2a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3b2e:	3019      	adds	r0, #25
    3b30:	b280      	uxth	r0, r0
    3b32:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3b36:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    3b3a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3b3e:	3519      	adds	r5, #25
    3b40:	b2ad      	uxth	r5, r5
    3b42:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    3b46:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3b4a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3b4e:	3319      	adds	r3, #25
    3b50:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3b54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3b58:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3b5c:	3319      	adds	r3, #25
    3b5e:	b29b      	uxth	r3, r3
    3b60:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3b64:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3b68:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3b6c:	3119      	adds	r1, #25
    3b6e:	b289      	uxth	r1, r1
    3b70:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3b74:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3b78:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3b7c:	3219      	adds	r2, #25
    3b7e:	b292      	uxth	r2, r2
    3b80:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3b84:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3b88:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3b8c:	f10e 0e19 	add.w	lr, lr, #25
    3b90:	fa1f fe8e 	uxth.w	lr, lr
    3b94:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3b98:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3b9c:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3ba0:	f10c 0c19 	add.w	ip, ip, #25
    3ba4:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ba8:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bac:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    3bb0:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3bb4:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3bb8:	b2ff      	uxtb	r7, r7
    3bba:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3bbe:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    3bc2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bc6:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    3bca:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    3bcc:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3bce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3bd2:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bd6:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3bda:	ea4f 2e27 	mov.w	lr, r7, asr #8
    3bde:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    3be2:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3be4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3be8:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3bec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3bf0:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3bf4:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3bf6:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    3bfa:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3bfe:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3c02:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c04:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3c08:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3c0c:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3c10:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3c14:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3c16:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3c1a:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3c1e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3c22:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3c26:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3c28:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3c2a:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3c2e:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3c32:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c36:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3c3a:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3c3e:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3c42:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3c46:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3c4a:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3c4e:	2b00      	cmp	r3, #0
    3c50:	f040 8290 	bne.w	4174 <juggle_half(LEDStruct&)+0x66c>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3c54:	4b77      	ldr	r3, [pc, #476]	; (3e34 <juggle_half(LEDStruct&)+0x32c>)
    3c56:	781b      	ldrb	r3, [r3, #0]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	f040 8296 	bne.w	418a <juggle_half(LEDStruct&)+0x682>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    3c5e:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3c62:	b113      	cbz	r3, 3c6a <juggle_half(LEDStruct&)+0x162>
    3c64:	2300      	movs	r3, #0
    3c66:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3c6a:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3c6e:	2196      	movs	r1, #150	; 0x96
    3c70:	4620      	mov	r0, r4
    3c72:	f007 fc2f 	bl	b4d4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3c76:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c7a:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    3c7e:	2f00      	cmp	r7, #0
    3c80:	f040 8199 	bne.w	3fb6 <juggle_half(LEDStruct&)+0x4ae>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c84:	2a00      	cmp	r2, #0
    3c86:	f000 8350 	beq.w	432a <juggle_half(LEDStruct&)+0x822>
    3c8a:	4b6b      	ldr	r3, [pc, #428]	; (3e38 <juggle_half(LEDStruct&)+0x330>)
    3c8c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3e3c <juggle_half(LEDStruct&)+0x334>
    3c90:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 3e40 <juggle_half(LEDStruct&)+0x338>
    3c94:	9303      	str	r3, [sp, #12]
    3c96:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3c9a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3c9e:	b2be      	uxth	r6, r7
    3ca0:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ca2:	9a03      	ldr	r2, [sp, #12]
    3ca4:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3ca8:	6812      	ldr	r2, [r2, #0]
    3caa:	9207      	str	r2, [sp, #28]
    3cac:	440b      	add	r3, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3cae:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3cb0:	9a07      	ldr	r2, [sp, #28]
    3cb2:	bf98      	it	ls
    3cb4:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3cb6:	f44f 718c 	mov.w	r1, #280	; 0x118
    3cba:	bf98      	it	ls
    3cbc:	b29b      	uxthls	r3, r3
    3cbe:	fb01 f202 	mul.w	r2, r1, r2
    3cc2:	fb03 f302 	mul.w	r3, r3, r2
    3cc6:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3cca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3cce:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cd0:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3cd2:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cd6:	d503      	bpl.n	3ce0 <juggle_half(LEDStruct&)+0x1d8>
    3cd8:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3cdc:	3207      	adds	r2, #7
    3cde:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ce0:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ce2:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3ce6:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3cea:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3cee:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3cf2:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3cf4:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3cf6:	bf48      	it	mi
    3cf8:	4255      	negmi	r5, r2
    3cfa:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3cfe:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d02:	bf54      	ite	pl
    3d04:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3d06:	b22d      	sxthmi	r5, r5
    3d08:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3d0c:	9100      	str	r1, [sp, #0]
    3d0e:	4648      	mov	r0, r9
    3d10:	4641      	mov	r1, r8
    3d12:	f007 fc3f 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3d16:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3d1a:	2226      	movs	r2, #38	; 0x26
    3d1c:	b29b      	uxth	r3, r3
    3d1e:	fb02 f303 	mul.w	r3, r2, r3
    3d22:	0c1b      	lsrs	r3, r3, #16
    3d24:	3325      	adds	r3, #37	; 0x25
    3d26:	b29b      	uxth	r3, r3
    3d28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d2c:	18e1      	adds	r1, r4, r3
    3d2e:	5ce2      	ldrb	r2, [r4, r3]
    3d30:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3d34:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3d38:	54e2      	strb	r2, [r4, r3]
    3d3a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3d3e:	784a      	ldrb	r2, [r1, #1]
    3d40:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3d44:	704a      	strb	r2, [r1, #1]
    3d46:	788b      	ldrb	r3, [r1, #2]
    3d48:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3d4c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3d50:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3d52:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3d56:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3d5a:	4416      	add	r6, r2
    3d5c:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d5e:	9b03      	ldr	r3, [sp, #12]
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	9306      	str	r3, [sp, #24]
    3d64:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3d66:	9a06      	ldr	r2, [sp, #24]
    3d68:	bf98      	it	ls
    3d6a:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3d6c:	f44f 738c 	mov.w	r3, #280	; 0x118
    3d70:	bf98      	it	ls
    3d72:	b2b6      	uxthls	r6, r6
    3d74:	fb03 f202 	mul.w	r2, r3, r2
    3d78:	fb06 f202 	mul.w	r2, r6, r2
    3d7c:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3d80:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d84:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d86:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d8a:	d503      	bpl.n	3d94 <juggle_half(LEDStruct&)+0x28c>
    3d8c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3d90:	3307      	adds	r3, #7
    3d92:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d94:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d96:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3d9a:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3d9e:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3da2:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3da6:	0416      	lsls	r6, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3da8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3daa:	bf48      	it	mi
    3dac:	425b      	negmi	r3, r3
    3dae:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3db2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3db6:	b21d      	sxth	r5, r3
    3db8:	4648      	mov	r0, r9
    3dba:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3dbe:	9100      	str	r1, [sp, #0]
    3dc0:	4641      	mov	r1, r8
    3dc2:	f007 fbe7 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3dc6:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3dca:	2226      	movs	r2, #38	; 0x26
    3dcc:	b29b      	uxth	r3, r3
    3dce:	fb02 f303 	mul.w	r3, r2, r3
    3dd2:	0c1b      	lsrs	r3, r3, #16
    3dd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3dd8:	18e1      	adds	r1, r4, r3
    3dda:	5ce2      	ldrb	r2, [r4, r3]
    3ddc:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3de0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3de4:	54e2      	strb	r2, [r4, r3]
    3de6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3dea:	784a      	ldrb	r2, [r1, #1]
    3dec:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3df0:	704a      	strb	r2, [r1, #1]
    3df2:	788b      	ldrb	r3, [r1, #2]
    3df4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3df8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3dfc:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3dfe:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3e02:	3701      	adds	r7, #1
    3e04:	b2ff      	uxtb	r7, r7
    3e06:	42bb      	cmp	r3, r7
    3e08:	461a      	mov	r2, r3
    3e0a:	f63f af48 	bhi.w	3c9e <juggle_half(LEDStruct&)+0x196>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3e0e:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3e12:	2a00      	cmp	r2, #0
    3e14:	f000 819a 	beq.w	414c <juggle_half(LEDStruct&)+0x644>
		if (leds.this_dir) {
    3e18:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3e1c:	2f00      	cmp	r7, #0
    3e1e:	f040 81c1 	bne.w	41a4 <juggle_half(LEDStruct&)+0x69c>
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3e22:	f44f 798c 	mov.w	r9, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3e26:	2b00      	cmp	r3, #0
    3e28:	f000 80c2 	beq.w	3fb0 <juggle_half(LEDStruct&)+0x4a8>
    3e2c:	e00a      	b.n	3e44 <juggle_half(LEDStruct&)+0x33c>
    3e2e:	bf00      	nop
    3e30:	1fff8788 	.word	0x1fff8788
    3e34:	1fff9621 	.word	0x1fff9621
    3e38:	1fffb18c 	.word	0x1fffb18c
    3e3c:	000111f8 	.word	0x000111f8
    3e40:	00010ac0 	.word	0x00010ac0
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e44:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3e48:	3301      	adds	r3, #1
    3e4a:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e4c:	9a03      	ldr	r2, [sp, #12]
    3e4e:	b2be      	uxth	r6, r7
    3e50:	6812      	ldr	r2, [r2, #0]
    3e52:	920b      	str	r2, [sp, #44]	; 0x2c
    3e54:	4433      	add	r3, r6
    3e56:	b29b      	uxth	r3, r3
    3e58:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3e5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3e5c:	bf9c      	itt	ls
    3e5e:	021b      	lslls	r3, r3, #8
    3e60:	b29b      	uxthls	r3, r3
    3e62:	fb09 f202 	mul.w	r2, r9, r2
    3e66:	fb03 f302 	mul.w	r3, r3, r2
    3e6a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e6e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3e72:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e74:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e76:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e7a:	d503      	bpl.n	3e84 <juggle_half(LEDStruct&)+0x37c>
    3e7c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3e80:	3207      	adds	r2, #7
    3e82:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e84:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e86:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3e8a:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3e8e:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    3e92:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3e96:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e98:	b2ad      	uxth	r5, r5
    3e9a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3e9e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3ea2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3ea6:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3ea8:	bf48      	it	mi
    3eaa:	426d      	negmi	r5, r5
    3eac:	4641      	mov	r1, r8
    3eae:	a809      	add	r0, sp, #36	; 0x24
    3eb0:	b22d      	sxth	r5, r5
    3eb2:	f007 fb6f 	bl	b594 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3eb6:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3eba:	2226      	movs	r2, #38	; 0x26
    3ebc:	b29b      	uxth	r3, r3
    3ebe:	fb02 f303 	mul.w	r3, r2, r3
    3ec2:	0c1b      	lsrs	r3, r3, #16
    3ec4:	3370      	adds	r3, #112	; 0x70
    3ec6:	b29b      	uxth	r3, r3
    3ec8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ecc:	18e1      	adds	r1, r4, r3
    3ece:	5ce2      	ldrb	r2, [r4, r3]
    3ed0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3ed4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3ed8:	54e2      	strb	r2, [r4, r3]
    3eda:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3ede:	784a      	ldrb	r2, [r1, #1]
    3ee0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ee4:	704a      	strb	r2, [r1, #1]
    3ee6:	788b      	ldrb	r3, [r1, #2]
    3ee8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3eec:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ef0:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3ef2:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3ef6:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3efa:	4413      	add	r3, r2
    3efc:	3301      	adds	r3, #1
    3efe:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f00:	9b03      	ldr	r3, [sp, #12]
    3f02:	681b      	ldr	r3, [r3, #0]
    3f04:	930a      	str	r3, [sp, #40]	; 0x28
    3f06:	b2b6      	uxth	r6, r6
    3f08:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3f0c:	bf9c      	itt	ls
    3f0e:	0236      	lslls	r6, r6, #8
    3f10:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3f12:	fb09 f202 	mul.w	r2, r9, r2
    3f16:	fb06 f202 	mul.w	r2, r6, r2
    3f1a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3f1e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f22:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3f24:	f3c2 03ca 	u