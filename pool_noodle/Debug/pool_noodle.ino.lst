
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 2d 2d 00 00 e5 2c 00 00     ... ....--...,..
      10:	e5 2c 00 00 e5 2c 00 00 e5 2c 00 00 e5 2c 00 00     .,...,...,...,..
      20:	e5 2c 00 00 e5 2c 00 00 e5 2c 00 00 2d 2d 00 00     .,...,...,..--..
      30:	2d 2d 00 00 e5 2c 00 00 59 41 00 00 5d 42 00 00     --...,..YA..]B..
      40:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      50:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      60:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      70:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      80:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      90:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      a0:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      b0:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      c0:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      d0:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      e0:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
      f0:	2d 2d 00 00 65 44 00 00 2d 2d 00 00 91 45 00 00     --..eD..--...E..
     100:	2d 2d 00 00 bd 46 00 00 2d 2d 00 00 2d 2d 00 00     --...F..--..--..
     110:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
     120:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
     130:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
     140:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
     150:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
     160:	2d 2d 00 00 75 31 00 00 2d 2d 00 00 2d 2d 00 00     --..u1..--..--..
     170:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
     180:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
     190:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
     1a0:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00 2d 2d 00 00     --..--..--..--..
     1b0:	2d 2d 00 00 2d 2d 00 00 2d 2d 00 00                 --..--..--..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f002 fdb0 	bl	2d34 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f002 fe04 	bl	2ee0 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f002 fd75 	bl	2dd0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f002 fd66 	bl	2dd0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f004 fa8c 	bl	4824 <__libc_init_array>

	startup_late_hook();
     30c:	f002 fd18 	bl	2d40 <startup_late_hook>
	main();
     310:	f003 ffac 	bl	426c <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c0c 	.word	0x1fff8c0c
     33c:	000069a0 	.word	0x000069a0
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c0c 	.word	0x1fff8c0c
     348:	1fff9610 	.word	0x1fff9610
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e2873c1 	.word	0x5e2873c1
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c0c 	.word	0x1fff8c0c
     42c:	00000000 	.word	0x00000000
     430:	000069a4 	.word	0x000069a4

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c10 	.word	0x1fff8c10
     460:	000069a4 	.word	0x000069a4
     464:	1fff8c0c 	.word	0x1fff8c0c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     490:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     492:	2101      	movs	r1, #1
     494:	4604      	mov	r4, r0
     496:	200e      	movs	r0, #14
     498:	f002 fcac 	bl	2df4 <pinMode>
     49c:	2007      	movs	r0, #7
     49e:	2101      	movs	r1, #1
     4a0:	f002 fca8 	bl	2df4 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     4a4:	69a0      	ldr	r0, [r4, #24]
     4a6:	b158      	cbz	r0, 4c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()+0x30>
     4a8:	6803      	ldr	r3, [r0, #0]
     4aa:	4a07      	ldr	r2, [pc, #28]	; (4c8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()+0x38>)
     4ac:	685b      	ldr	r3, [r3, #4]
     4ae:	4293      	cmp	r3, r2
     4b0:	d107      	bne.n	4c2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()+0x32>
     4b2:	6842      	ldr	r2, [r0, #4]
     4b4:	7b01      	ldrb	r1, [r0, #12]
     4b6:	7813      	ldrb	r3, [r2, #0]
     4b8:	ea23 0301 	bic.w	r3, r3, r1
     4bc:	7013      	strb	r3, [r2, #0]
     4be:	bd10      	pop	{r4, pc}
     4c0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     4c6:	4718      	bx	r3
     4c8:	00000481 	.word	0x00000481

000004cc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     4d0:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     4d2:	6805      	ldr	r5, [r0, #0]
     4d4:	f88d 3004 	strb.w	r3, [sp, #4]
     4d8:	f88d 3005 	strb.w	r3, [sp, #5]
     4dc:	f88d 3006 	strb.w	r3, [sp, #6]
     4e0:	682e      	ldr	r6, [r5, #0]
     4e2:	4a37      	ldr	r2, [pc, #220]	; (5c0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     4e4:	f88d 3008 	strb.w	r3, [sp, #8]
     4e8:	4296      	cmp	r6, r2
     4ea:	f88d 3009 	strb.w	r3, [sp, #9]
     4ee:	f88d 300a 	strb.w	r3, [sp, #10]
     4f2:	d15f      	bne.n	5b4 <CLEDController::clearLeds(int)+0xe8>
     4f4:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4f6:	9104      	str	r1, [sp, #16]
     4f8:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     4fa:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4fc:	a801      	add	r0, sp, #4
     4fe:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     500:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     504:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     508:	f88d 3020 	strb.w	r3, [sp, #32]
     50c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     50e:	d015      	beq.n	53c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     510:	f88d 301d 	strb.w	r3, [sp, #29]
     514:	f88d 301c 	strb.w	r3, [sp, #28]
     518:	f88d 301b 	strb.w	r3, [sp, #27]
     51c:	f88d 301a 	strb.w	r3, [sp, #26]
     520:	f88d 3019 	strb.w	r3, [sp, #25]
     524:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     528:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     52a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     52c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     530:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     532:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     534:	a903      	add	r1, sp, #12
     536:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     538:	b00b      	add	sp, #44	; 0x2c
     53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     53c:	4a21      	ldr	r2, [pc, #132]	; (5c4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     53e:	7813      	ldrb	r3, [r2, #0]
     540:	3301      	adds	r3, #1
     542:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     546:	f013 0f01 	tst.w	r3, #1
     54a:	bf14      	ite	ne
     54c:	2180      	movne	r1, #128	; 0x80
     54e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     550:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     552:	079a      	lsls	r2, r3, #30
     554:	bf44      	itt	mi
     556:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     55a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     55c:	075b      	lsls	r3, r3, #29
     55e:	bf48      	it	mi
     560:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     564:	3110      	adds	r1, #16
     566:	2200      	movs	r2, #0
     568:	b2c9      	uxtb	r1, r1
     56a:	f10d 031b 	add.w	r3, sp, #27
     56e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     572:	f44f 7e80 	mov.w	lr, #256	; 0x100
     576:	b1aa      	cbz	r2, 5a4 <CLEDController::clearLeds(int)+0xd8>
     578:	fb9e f2f2 	sdiv	r2, lr, r2
     57c:	b2d2      	uxtb	r2, r2
     57e:	1c50      	adds	r0, r2, #1
     580:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     582:	fb00 1501 	mla	r5, r0, r1, r1
     586:	122d      	asrs	r5, r5, #8
     588:	7018      	strb	r0, [r3, #0]
     58a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     58c:	b105      	cbz	r5, 590 <CLEDController::clearLeds(int)+0xc4>
     58e:	3e01      	subs	r6, #1
     590:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     594:	b100      	cbz	r0, 598 <CLEDController::clearLeds(int)+0xcc>
     596:	701a      	strb	r2, [r3, #0]
     598:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     59a:	429f      	cmp	r7, r3
     59c:	d008      	beq.n	5b0 <CLEDController::clearLeds(int)+0xe4>
     59e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5a0:	2a00      	cmp	r2, #0
     5a2:	d1e9      	bne.n	578 <CLEDController::clearLeds(int)+0xac>
     5a4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     5a6:	f803 2c03 	strb.w	r2, [r3, #-3]
     5aa:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5ac:	429f      	cmp	r7, r3
     5ae:	d1f6      	bne.n	59e <CLEDController::clearLeds(int)+0xd2>
     5b0:	6825      	ldr	r5, [r4, #0]
     5b2:	e7b9      	b.n	528 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5b4:	460a      	mov	r2, r1
     5b6:	ab02      	add	r3, sp, #8
     5b8:	a901      	add	r1, sp, #4
     5ba:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5bc:	b00b      	add	sp, #44	; 0x2c
     5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c0:	0000068d 	.word	0x0000068d
     5c4:	1fff8c28 	.word	0x1fff8c28

000005c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5cc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     5ce:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     5d0:	789b      	ldrb	r3, [r3, #2]
     5d2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5d4:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     5d6:	9101      	str	r1, [sp, #4]
     5d8:	9202      	str	r2, [sp, #8]
     5da:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5dc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     5e0:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     5e4:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5e8:	d017      	beq.n	61a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     5ea:	2300      	movs	r3, #0
     5ec:	f88d 3015 	strb.w	r3, [sp, #21]
     5f0:	f88d 3014 	strb.w	r3, [sp, #20]
     5f4:	f88d 3013 	strb.w	r3, [sp, #19]
     5f8:	f88d 3012 	strb.w	r3, [sp, #18]
     5fc:	f88d 3011 	strb.w	r3, [sp, #17]
     600:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     604:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     606:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     608:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     60a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     60c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     610:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     612:	a901      	add	r1, sp, #4
     614:	4798      	blx	r3
  }
     616:	b009      	add	sp, #36	; 0x24
     618:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     61a:	4a1b      	ldr	r2, [pc, #108]	; (688 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     61c:	7813      	ldrb	r3, [r2, #0]
     61e:	3301      	adds	r3, #1
     620:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     624:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     628:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     62a:	bf14      	ite	ne
     62c:	2280      	movne	r2, #128	; 0x80
     62e:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     630:	0799      	lsls	r1, r3, #30
     632:	bf44      	itt	mi
     634:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     638:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     63a:	075b      	lsls	r3, r3, #29
     63c:	bf48      	it	mi
     63e:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     642:	3210      	adds	r2, #16
     644:	b2d2      	uxtb	r2, r2
     646:	f10d 0313 	add.w	r3, sp, #19
     64a:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     64e:	f44f 7e80 	mov.w	lr, #256	; 0x100
     652:	b1ac      	cbz	r4, 680 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     654:	fb9e f4f4 	sdiv	r4, lr, r4
     658:	b2e4      	uxtb	r4, r4
     65a:	1c61      	adds	r1, r4, #1
     65c:	b2c9      	uxtb	r1, r1
     65e:	fb01 2502 	mla	r5, r1, r2, r2
     662:	122d      	asrs	r5, r5, #8
     664:	7019      	strb	r1, [r3, #0]
     666:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     668:	b105      	cbz	r5, 66c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     66a:	3e01      	subs	r6, #1
     66c:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     670:	b101      	cbz	r1, 674 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     672:	701c      	strb	r4, [r3, #0]
     674:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     676:	42bb      	cmp	r3, r7
     678:	d0c4      	beq.n	604 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     67a:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     67c:	2c00      	cmp	r4, #0
     67e:	d1e9      	bne.n	654 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     680:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     682:	f803 4c03 	strb.w	r4, [r3, #-3]
     686:	e7f5      	b.n	674 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     688:	1fff8c28 	.word	0x1fff8c28

0000068c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     690:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     692:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     694:	789b      	ldrb	r3, [r3, #2]
     696:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     698:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     69a:	9101      	str	r1, [sp, #4]
     69c:	9202      	str	r2, [sp, #8]
     69e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6a0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     6a4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     6a8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6ac:	d016      	beq.n	6dc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6ae:	2300      	movs	r3, #0
     6b0:	f88d 3015 	strb.w	r3, [sp, #21]
     6b4:	f88d 3014 	strb.w	r3, [sp, #20]
     6b8:	f88d 3013 	strb.w	r3, [sp, #19]
     6bc:	f88d 3012 	strb.w	r3, [sp, #18]
     6c0:	f88d 3011 	strb.w	r3, [sp, #17]
     6c4:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6c8:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6ca:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6cc:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6ce:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6d2:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d4:	a901      	add	r1, sp, #4
     6d6:	4790      	blx	r2
  }
     6d8:	b009      	add	sp, #36	; 0x24
     6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6dc:	4a1b      	ldr	r2, [pc, #108]	; (74c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6de:	7813      	ldrb	r3, [r2, #0]
     6e0:	3301      	adds	r3, #1
     6e2:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6e6:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ea:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6ec:	bf14      	ite	ne
     6ee:	2280      	movne	r2, #128	; 0x80
     6f0:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6f2:	0799      	lsls	r1, r3, #30
     6f4:	bf44      	itt	mi
     6f6:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6fa:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6fc:	075b      	lsls	r3, r3, #29
     6fe:	bf48      	it	mi
     700:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     704:	3210      	adds	r2, #16
     706:	b2d2      	uxtb	r2, r2
     708:	f10d 0313 	add.w	r3, sp, #19
     70c:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     710:	f44f 7e80 	mov.w	lr, #256	; 0x100
     714:	b1ac      	cbz	r4, 742 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     716:	fb9e f4f4 	sdiv	r4, lr, r4
     71a:	b2e4      	uxtb	r4, r4
     71c:	1c61      	adds	r1, r4, #1
     71e:	b2c9      	uxtb	r1, r1
     720:	fb01 2502 	mla	r5, r1, r2, r2
     724:	122d      	asrs	r5, r5, #8
     726:	7019      	strb	r1, [r3, #0]
     728:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     72a:	b105      	cbz	r5, 72e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     72c:	3e01      	subs	r6, #1
     72e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     732:	b101      	cbz	r1, 736 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     734:	701c      	strb	r4, [r3, #0]
     736:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     738:	42bb      	cmp	r3, r7
     73a:	d0c5      	beq.n	6c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     73c:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     73e:	2c00      	cmp	r4, #0
     740:	d1e9      	bne.n	716 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     742:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     744:	f803 4c03 	strb.w	r4, [r3, #-3]
     748:	e7f5      	b.n	736 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     74a:	bf00      	nop
     74c:	1fff8c28 	.word	0x1fff8c28

00000750 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     754:	b085      	sub	sp, #20
     756:	9003      	str	r0, [sp, #12]
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     758:	6980      	ldr	r0, [r0, #24]
     75a:	b150      	cbz	r0, 772 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x22>
     75c:	6803      	ldr	r3, [r0, #0]
     75e:	4a52      	ldr	r2, [pc, #328]	; (8a8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x158>)
     760:	681b      	ldr	r3, [r3, #0]
     762:	4293      	cmp	r3, r2
     764:	f040 827f 	bne.w	c66 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x516>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     768:	6842      	ldr	r2, [r0, #4]
     76a:	7b00      	ldrb	r0, [r0, #12]
     76c:	7813      	ldrb	r3, [r2, #0]
     76e:	4303      	orrs	r3, r0
     770:	7013      	strb	r3, [r2, #0]
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     772:	484e      	ldr	r0, [pc, #312]	; (8ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x15c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     774:	4a4e      	ldr	r2, [pc, #312]	; (8b0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x160>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     776:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     778:	2304      	movs	r3, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     77a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     77c:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
     77e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     780:	6003      	str	r3, [r0, #0]
     782:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     784:	6013      	str	r3, [r2, #0]
     786:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     788:	6003      	str	r3, [r0, #0]
     78a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     78c:	6013      	str	r3, [r2, #0]
     78e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     790:	6003      	str	r3, [r0, #0]
     792:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     794:	6013      	str	r3, [r2, #0]
     796:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     798:	6003      	str	r3, [r0, #0]
     79a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     79c:	6013      	str	r3, [r2, #0]
     79e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7a0:	6003      	str	r3, [r0, #0]
     7a2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7a4:	6013      	str	r3, [r2, #0]
     7a6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7a8:	6003      	str	r3, [r0, #0]
     7aa:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7ac:	6013      	str	r3, [r2, #0]
     7ae:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7b0:	6003      	str	r3, [r0, #0]
     7b2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7b4:	6013      	str	r3, [r2, #0]
     7b6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7b8:	6003      	str	r3, [r0, #0]
     7ba:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7bc:	6013      	str	r3, [r2, #0]
     7be:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7c0:	6003      	str	r3, [r0, #0]
     7c2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7c4:	6013      	str	r3, [r2, #0]
     7c6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7c8:	6003      	str	r3, [r0, #0]
     7ca:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7cc:	6013      	str	r3, [r2, #0]
     7ce:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7d0:	6003      	str	r3, [r0, #0]
     7d2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7d4:	6013      	str	r3, [r2, #0]
     7d6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7d8:	6003      	str	r3, [r0, #0]
     7da:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7dc:	6013      	str	r3, [r2, #0]
     7de:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7e0:	6003      	str	r3, [r0, #0]
     7e2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7e4:	6013      	str	r3, [r2, #0]
     7e6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7e8:	6003      	str	r3, [r0, #0]
     7ea:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7ec:	6013      	str	r3, [r2, #0]
     7ee:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7f0:	6003      	str	r3, [r0, #0]
     7f2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7f4:	6013      	str	r3, [r2, #0]
     7f6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7f8:	6003      	str	r3, [r0, #0]
     7fa:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7fc:	6013      	str	r3, [r2, #0]
     7fe:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     800:	6003      	str	r3, [r0, #0]
     802:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     804:	6013      	str	r3, [r2, #0]
     806:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     808:	6003      	str	r3, [r0, #0]
     80a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     80c:	6013      	str	r3, [r2, #0]
     80e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     810:	6003      	str	r3, [r0, #0]
     812:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     814:	6013      	str	r3, [r2, #0]
     816:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     818:	6003      	str	r3, [r0, #0]
     81a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     81c:	6013      	str	r3, [r2, #0]
     81e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     820:	6003      	str	r3, [r0, #0]
     822:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     824:	6013      	str	r3, [r2, #0]
     826:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     828:	6003      	str	r3, [r0, #0]
     82a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     82c:	6013      	str	r3, [r2, #0]
     82e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     830:	6003      	str	r3, [r0, #0]
     832:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     834:	6013      	str	r3, [r2, #0]
     836:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     838:	6003      	str	r3, [r0, #0]
     83a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     83c:	6013      	str	r3, [r2, #0]
     83e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     840:	6003      	str	r3, [r0, #0]
     842:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     844:	6013      	str	r3, [r2, #0]
     846:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     848:	6003      	str	r3, [r0, #0]
     84a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     84c:	6013      	str	r3, [r2, #0]
     84e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     850:	6003      	str	r3, [r0, #0]
     852:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     854:	6013      	str	r3, [r2, #0]
     856:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     858:	6003      	str	r3, [r0, #0]
     85a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     85c:	6013      	str	r3, [r2, #0]
     85e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     860:	6003      	str	r3, [r0, #0]
     862:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     864:	6013      	str	r3, [r2, #0]
     866:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     868:	6003      	str	r3, [r0, #0]
     86a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     86c:	6013      	str	r3, [r2, #0]
     86e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     870:	6003      	str	r3, [r0, #0]
     872:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     874:	6013      	str	r3, [r2, #0]
     876:	bf00      	nop
		mSPI.select();

		startBoundary();
		while(pixels.has(1)) {
     878:	f8d1 8008 	ldr.w	r8, [r1, #8]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     87c:	6003      	str	r3, [r0, #0]
     87e:	f1b8 0f00 	cmp.w	r8, #0
     882:	f340 814e 	ble.w	b22 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3d2>
     886:	680e      	ldr	r6, [r1, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     888:	f8cd 8004 	str.w	r8, [sp, #4]
     88c:	4625      	mov	r5, r4
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     88e:	f896 e002 	ldrb.w	lr, [r6, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     892:	f1be 0f00 	cmp.w	lr, #0
     896:	d00d      	beq.n	8b4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x164>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     898:	f891 c00e 	ldrb.w	ip, [r1, #14]
     89c:	fa8e fe5c 	uqadd8	lr, lr, ip
     8a0:	fa5f fe8e 	uxtb.w	lr, lr
     8a4:	e006      	b.n	8b4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x164>
     8a6:	bf00      	nop
     8a8:	00000475 	.word	0x00000475
     8ac:	400ff0c8 	.word	0x400ff0c8
     8b0:	400ff0c4 	.word	0x400ff0c4
			mSPI.writeByte(0xFF);
			mSPI.writeByte(pixels.loadAndScale0());
			mSPI.writeByte(pixels.loadAndScale1());
			mSPI.writeByte(pixels.loadAndScale2());
#else
			uint16_t b = 0xFF00 | (uint16_t)pixels.loadAndScale0();
     8b4:	f891 c014 	ldrb.w	ip, [r1, #20]
     8b8:	6015      	str	r5, [r2, #0]
     8ba:	fb0c ee0e 	mla	lr, ip, lr, lr
     8be:	f3ce 2e07 	ubfx	lr, lr, #8, #8
     8c2:	f44e 4e7f 	orr.w	lr, lr, #65280	; 0xff00
     8c6:	6013      	str	r3, [r2, #0]
     8c8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8ca:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8cc:	6015      	str	r5, [r2, #0]
     8ce:	6013      	str	r3, [r2, #0]
     8d0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8d2:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8d4:	6015      	str	r5, [r2, #0]
     8d6:	6013      	str	r3, [r2, #0]
     8d8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8da:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8dc:	6015      	str	r5, [r2, #0]
     8de:	6013      	str	r3, [r2, #0]
     8e0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8e2:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8e4:	6015      	str	r5, [r2, #0]
     8e6:	6013      	str	r3, [r2, #0]
     8e8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8ea:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8ec:	6015      	str	r5, [r2, #0]
     8ee:	6013      	str	r3, [r2, #0]
     8f0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8f2:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8f4:	6015      	str	r5, [r2, #0]
     8f6:	6013      	str	r3, [r2, #0]
     8f8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8fa:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8fc:	6015      	str	r5, [r2, #0]
     8fe:	6013      	str	r3, [r2, #0]
     900:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     902:	f01e 0f80 	tst.w	lr, #128	; 0x80
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     906:	6003      	str	r3, [r0, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     908:	fa5f fc8e 	uxtb.w	ip, lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     90c:	bf14      	ite	ne
     90e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     910:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     912:	6013      	str	r3, [r2, #0]
     914:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     916:	f01c 0f40 	tst.w	ip, #64	; 0x40
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     91a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     91c:	bf14      	ite	ne
     91e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     920:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     922:	6013      	str	r3, [r2, #0]
     924:	bf00      	nop
     926:	f01c 0f20 	tst.w	ip, #32
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     92a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     92c:	bf14      	ite	ne
     92e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     930:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     932:	6013      	str	r3, [r2, #0]
     934:	bf00      	nop
     936:	f01c 0f10 	tst.w	ip, #16
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     93a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     93c:	bf14      	ite	ne
     93e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     940:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     942:	6013      	str	r3, [r2, #0]
     944:	bf00      	nop
     946:	f01c 0f08 	tst.w	ip, #8
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     94a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     94c:	bf14      	ite	ne
     94e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     950:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     952:	6013      	str	r3, [r2, #0]
     954:	bf00      	nop
     956:	f01c 0f04 	tst.w	ip, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     95a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     95c:	bf14      	ite	ne
     95e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     960:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     962:	6013      	str	r3, [r2, #0]
     964:	bf00      	nop
     966:	f01c 0f02 	tst.w	ip, #2
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     96a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     96c:	bf14      	ite	ne
     96e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     970:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     972:	6013      	str	r3, [r2, #0]
     974:	bf00      	nop
     976:	f01c 0f01 	tst.w	ip, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     97a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     97c:	bf14      	ite	ne
     97e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     980:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     982:	6013      	str	r3, [r2, #0]
     984:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     986:	6003      	str	r3, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     988:	f896 c001 	ldrb.w	ip, [r6, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     98c:	f1bc 0f00 	cmp.w	ip, #0
     990:	d005      	beq.n	99e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24e>
     992:	f891 e00d 	ldrb.w	lr, [r1, #13]
     996:	fa8c fc5e 	uqadd8	ip, ip, lr
     99a:	fa5f fc8c 	uxtb.w	ip, ip
			mSPI.writeWord(b);
			uint16_t w = pixels.loadAndScale1() << 8;
     99e:	f891 8013 	ldrb.w	r8, [r1, #19]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     9a2:	f896 e000 	ldrb.w	lr, [r6]
     9a6:	fb08 cc0c 	mla	ip, r8, ip, ip
     9aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     9ae:	f1be 0f00 	cmp.w	lr, #0
     9b2:	d005      	beq.n	9c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x270>
     9b4:	f891 800c 	ldrb.w	r8, [r1, #12]
     9b8:	fa8e fe58 	uqadd8	lr, lr, r8
     9bc:	fa5f fe8e 	uxtb.w	lr, lr
			w |= pixels.loadAndScale2();
     9c0:	f891 8012 	ldrb.w	r8, [r1, #18]
     9c4:	fb08 ee0e 	mla	lr, r8, lr, lr
     9c8:	ea4c 2e1e 	orr.w	lr, ip, lr, lsr #8
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     9cc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     9d0:	f01c 0f80 	tst.w	ip, #128	; 0x80
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9d4:	bf14      	ite	ne
     9d6:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9d8:	6004      	streq	r4, [r0, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     9da:	fa5f f88c 	uxtb.w	r8, ip
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9de:	6013      	str	r3, [r2, #0]
     9e0:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     9e2:	f018 0f40 	tst.w	r8, #64	; 0x40
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9e6:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9e8:	bf14      	ite	ne
     9ea:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9ec:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9ee:	6013      	str	r3, [r2, #0]
     9f0:	bf00      	nop
     9f2:	f018 0f20 	tst.w	r8, #32
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9f6:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9f8:	bf14      	ite	ne
     9fa:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9fc:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9fe:	6013      	str	r3, [r2, #0]
     a00:	bf00      	nop
     a02:	f018 0f10 	tst.w	r8, #16
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a06:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a08:	bf14      	ite	ne
     a0a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a0c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a0e:	6013      	str	r3, [r2, #0]
     a10:	bf00      	nop
     a12:	f018 0f08 	tst.w	r8, #8
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a16:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a18:	bf14      	ite	ne
     a1a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a1c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a1e:	6013      	str	r3, [r2, #0]
     a20:	bf00      	nop
     a22:	f018 0f04 	tst.w	r8, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a26:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a28:	bf14      	ite	ne
     a2a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a2c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a2e:	6013      	str	r3, [r2, #0]
     a30:	bf00      	nop
     a32:	f018 0f02 	tst.w	r8, #2
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a36:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a38:	bf14      	ite	ne
     a3a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a3c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a3e:	6013      	str	r3, [r2, #0]
     a40:	bf00      	nop
     a42:	f018 0f01 	tst.w	r8, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a46:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a48:	bf14      	ite	ne
     a4a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a4c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a4e:	6013      	str	r3, [r2, #0]
     a50:	bf00      	nop
     a52:	f01e 0f80 	tst.w	lr, #128	; 0x80
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a56:	6003      	str	r3, [r0, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     a58:	fa5f f88e 	uxtb.w	r8, lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a5c:	bf14      	ite	ne
     a5e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a60:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a62:	6013      	str	r3, [r2, #0]
     a64:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     a66:	f018 0f40 	tst.w	r8, #64	; 0x40
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a6a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a6c:	bf14      	ite	ne
     a6e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a70:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a72:	6013      	str	r3, [r2, #0]
     a74:	bf00      	nop
     a76:	f018 0f20 	tst.w	r8, #32
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a7a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a7c:	bf14      	ite	ne
     a7e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a80:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a82:	6013      	str	r3, [r2, #0]
     a84:	bf00      	nop
     a86:	f018 0f10 	tst.w	r8, #16
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a8a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a8c:	bf14      	ite	ne
     a8e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a90:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a92:	6013      	str	r3, [r2, #0]
     a94:	bf00      	nop
     a96:	f018 0f08 	tst.w	r8, #8
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a9a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a9c:	bf14      	ite	ne
     a9e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aa0:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     aa2:	6013      	str	r3, [r2, #0]
     aa4:	bf00      	nop
     aa6:	f018 0f04 	tst.w	r8, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aaa:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     aac:	bf14      	ite	ne
     aae:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ab0:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ab2:	6013      	str	r3, [r2, #0]
     ab4:	bf00      	nop
     ab6:	f018 0f02 	tst.w	r8, #2
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aba:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     abc:	bf14      	ite	ne
     abe:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ac0:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ac2:	6013      	str	r3, [r2, #0]
     ac4:	bf00      	nop
     ac6:	f018 0f01 	tst.w	r8, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aca:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     acc:	bf14      	ite	ne
     ace:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ad0:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ad2:	6013      	str	r3, [r2, #0]
     ad4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ad6:	6003      	str	r3, [r0, #0]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     ad8:	7b8f      	ldrb	r7, [r1, #14]
     ada:	9702      	str	r7, [sp, #8]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     adc:	9f01      	ldr	r7, [sp, #4]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     ade:	f891 e011 	ldrb.w	lr, [r1, #17]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     ae2:	f891 800c 	ldrb.w	r8, [r1, #12]
                d[1] = e[1] - d[1];
     ae6:	f891 a00d 	ldrb.w	sl, [r1, #13]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     aea:	f891 b00f 	ldrb.w	fp, [r1, #15]
                d[1] = e[1] - d[1];
     aee:	f891 c010 	ldrb.w	ip, [r1, #16]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     af2:	f991 9015 	ldrsb.w	r9, [r1, #21]
     af6:	3f01      	subs	r7, #1
     af8:	9701      	str	r7, [sp, #4]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     afa:	9f02      	ldr	r7, [sp, #8]
     afc:	ebc7 0e0e 	rsb	lr, r7, lr

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b00:	9f01      	ldr	r7, [sp, #4]
     b02:	608f      	str	r7, [r1, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b04:	ebc8 080b 	rsb	r8, r8, fp
                d[1] = e[1] - d[1];
     b08:	ebca 0c0c 	rsb	ip, sl, ip

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b0c:	444e      	add	r6, r9

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
		mSPI.select();

		startBoundary();
		while(pixels.has(1)) {
     b0e:	2f00      	cmp	r7, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b10:	f881 800c 	strb.w	r8, [r1, #12]
                d[1] = e[1] - d[1];
     b14:	f881 c00d 	strb.w	ip, [r1, #13]
                d[2] = e[2] - d[2];
     b18:	f881 e00e 	strb.w	lr, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b1c:	600e      	str	r6, [r1, #0]
     b1e:	f73f aeb6 	bgt.w	88e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x13e>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     b22:	684c      	ldr	r4, [r1, #4]
     b24:	4a52      	ldr	r2, [pc, #328]	; (c70 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x520>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b26:	4953      	ldr	r1, [pc, #332]	; (c74 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x524>)
     b28:	2c00      	cmp	r4, #0
     b2a:	bfb8      	it	lt
     b2c:	341f      	addlt	r4, #31
     b2e:	1164      	asrs	r4, r4, #5
     b30:	2002      	movs	r0, #2
     b32:	2304      	movs	r3, #4
     b34:	6008      	str	r0, [r1, #0]
     b36:	600b      	str	r3, [r1, #0]
     b38:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b3a:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b3c:	6008      	str	r0, [r1, #0]
     b3e:	600b      	str	r3, [r1, #0]
     b40:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b42:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b44:	6008      	str	r0, [r1, #0]
     b46:	600b      	str	r3, [r1, #0]
     b48:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b4a:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b4c:	6008      	str	r0, [r1, #0]
     b4e:	600b      	str	r3, [r1, #0]
     b50:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b52:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b54:	6008      	str	r0, [r1, #0]
     b56:	600b      	str	r3, [r1, #0]
     b58:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b5a:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b5c:	6008      	str	r0, [r1, #0]
     b5e:	600b      	str	r3, [r1, #0]
     b60:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b62:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b64:	6008      	str	r0, [r1, #0]
     b66:	600b      	str	r3, [r1, #0]
     b68:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b6a:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b6c:	6008      	str	r0, [r1, #0]
     b6e:	600b      	str	r3, [r1, #0]
     b70:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b72:	6013      	str	r3, [r2, #0]
     b74:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b76:	600b      	str	r3, [r1, #0]
     b78:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b7a:	6013      	str	r3, [r2, #0]
     b7c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b7e:	600b      	str	r3, [r1, #0]
     b80:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b82:	6013      	str	r3, [r2, #0]
     b84:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b86:	600b      	str	r3, [r1, #0]
     b88:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b8a:	6013      	str	r3, [r2, #0]
     b8c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b8e:	600b      	str	r3, [r1, #0]
     b90:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b92:	6013      	str	r3, [r2, #0]
     b94:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b96:	600b      	str	r3, [r1, #0]
     b98:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b9a:	6013      	str	r3, [r2, #0]
     b9c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b9e:	600b      	str	r3, [r1, #0]
     ba0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ba2:	6013      	str	r3, [r2, #0]
     ba4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ba6:	600b      	str	r3, [r1, #0]
     ba8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     baa:	6013      	str	r3, [r2, #0]
     bac:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bae:	600b      	str	r3, [r1, #0]
     bb0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bb2:	6013      	str	r3, [r2, #0]
     bb4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bb6:	600b      	str	r3, [r1, #0]
     bb8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bba:	6013      	str	r3, [r2, #0]
     bbc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bbe:	600b      	str	r3, [r1, #0]
     bc0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bc2:	6013      	str	r3, [r2, #0]
     bc4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bc6:	600b      	str	r3, [r1, #0]
     bc8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bca:	6013      	str	r3, [r2, #0]
     bcc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bce:	600b      	str	r3, [r1, #0]
     bd0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bd2:	6013      	str	r3, [r2, #0]
     bd4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bd6:	600b      	str	r3, [r1, #0]
     bd8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bda:	6013      	str	r3, [r2, #0]
     bdc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bde:	600b      	str	r3, [r1, #0]
     be0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     be2:	6013      	str	r3, [r2, #0]
     be4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     be6:	600b      	str	r3, [r1, #0]
     be8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bea:	6013      	str	r3, [r2, #0]
     bec:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bee:	600b      	str	r3, [r1, #0]
     bf0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bf2:	6013      	str	r3, [r2, #0]
     bf4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bf6:	600b      	str	r3, [r1, #0]
     bf8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bfa:	6013      	str	r3, [r2, #0]
     bfc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bfe:	600b      	str	r3, [r1, #0]
     c00:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c02:	6013      	str	r3, [r2, #0]
     c04:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c06:	600b      	str	r3, [r1, #0]
     c08:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c0a:	6013      	str	r3, [r2, #0]
     c0c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c0e:	600b      	str	r3, [r1, #0]
     c10:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c12:	6013      	str	r3, [r2, #0]
     c14:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c16:	600b      	str	r3, [r1, #0]
     c18:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c1a:	6013      	str	r3, [r2, #0]
     c1c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c1e:	600b      	str	r3, [r1, #0]
     c20:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c22:	6013      	str	r3, [r2, #0]
     c24:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c26:	600b      	str	r3, [r1, #0]
     c28:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c2a:	6013      	str	r3, [r2, #0]
     c2c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c2e:	600b      	str	r3, [r1, #0]
     c30:	bf00      	nop
     c32:	3c01      	subs	r4, #1
     c34:	1c65      	adds	r5, r4, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c36:	6013      	str	r3, [r2, #0]
     c38:	f47f af7c 	bne.w	b34 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3e4>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     c3c:	9b03      	ldr	r3, [sp, #12]
     c3e:	6998      	ldr	r0, [r3, #24]
     c40:	b150      	cbz	r0, c58 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x508>
     c42:	6803      	ldr	r3, [r0, #0]
     c44:	4a0c      	ldr	r2, [pc, #48]	; (c78 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x528>)
     c46:	685b      	ldr	r3, [r3, #4]
     c48:	4293      	cmp	r3, r2
     c4a:	d108      	bne.n	c5e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x50e>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     c4c:	6842      	ldr	r2, [r0, #4]
     c4e:	7b01      	ldrb	r1, [r0, #12]
     c50:	7813      	ldrb	r3, [r2, #0]
     c52:	ea23 0301 	bic.w	r3, r3, r1
     c56:	7013      	strb	r3, [r2, #0]
			pixels.advanceData();
		}
		endBoundary(pixels.size());
		mSPI.waitFully();
		mSPI.release();
	}
     c58:	b005      	add	sp, #20
     c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c5e:	b005      	add	sp, #20
     c60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c64:	4718      	bx	r3
     c66:	9101      	str	r1, [sp, #4]
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     c68:	4798      	blx	r3
     c6a:	9901      	ldr	r1, [sp, #4]
     c6c:	e581      	b.n	772 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x22>
     c6e:	bf00      	nop
     c70:	400ff0c8 	.word	0x400ff0c8
     c74:	400ff0c4 	.word	0x400ff0c4
     c78:	00000481 	.word	0x00000481

00000c7c <LEDDebug(LEDStruct&)>:
}



// Debug function
void LEDDebug(LEDStruct& leds) {
     c7c:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     c7e:	2100      	movs	r1, #0
     c80:	4604      	mov	r4, r0
     c82:	4891      	ldr	r0, [pc, #580]	; (ec8 <LEDDebug(LEDStruct&)+0x24c>)
     c84:	f003 f8f6 	bl	3e74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     c88:	4890      	ldr	r0, [pc, #576]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     c8a:	f003 faf7 	bl	427c <Print::println()>
     c8e:	2116      	movs	r1, #22
     c90:	488f      	ldr	r0, [pc, #572]	; (ed0 <LEDDebug(LEDStruct&)+0x254>)
     c92:	f003 f8ef 	bl	3e74 <usb_serial_write>
     c96:	488d      	ldr	r0, [pc, #564]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     c98:	f003 faf0 	bl	427c <Print::println()>
     c9c:	2116      	movs	r1, #22
     c9e:	488d      	ldr	r0, [pc, #564]	; (ed4 <LEDDebug(LEDStruct&)+0x258>)
     ca0:	f003 f8e8 	bl	3e74 <usb_serial_write>
	Serial.println("");
	Serial.println("======================");

	// Print which Array it is
	Serial.print("LED Array:            ");
	if (leds.array_type == CURRENT) { Serial.println("CURRENT"); }
     ca4:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
     ca8:	2b00      	cmp	r3, #0
     caa:	f000 809f 	beq.w	dec <LEDDebug(LEDStruct&)+0x170>
	else if (leds.array_type == NEXT) { Serial.println("NEXT"); }
     cae:	2b01      	cmp	r3, #1
     cb0:	f000 8101 	beq.w	eb6 <LEDDebug(LEDStruct&)+0x23a>
     cb4:	2116      	movs	r1, #22
     cb6:	4888      	ldr	r0, [pc, #544]	; (ed8 <LEDDebug(LEDStruct&)+0x25c>)
     cb8:	f003 f8dc 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     cbc:	2300      	movs	r3, #0
     cbe:	220a      	movs	r2, #10
     cc0:	f894 11c2 	ldrb.w	r1, [r4, #450]	; 0x1c2
     cc4:	4881      	ldr	r0, [pc, #516]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     cc6:	f003 fae9 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     cca:	4880      	ldr	r0, [pc, #512]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     ccc:	f003 fad6 	bl	427c <Print::println()>
     cd0:	2116      	movs	r1, #22
     cd2:	4882      	ldr	r0, [pc, #520]	; (edc <LEDDebug(LEDStruct&)+0x260>)
     cd4:	f003 f8ce 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     cd8:	2300      	movs	r3, #0
     cda:	220a      	movs	r2, #10
     cdc:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
     ce0:	487a      	ldr	r0, [pc, #488]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     ce2:	f003 fadb 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     ce6:	4879      	ldr	r0, [pc, #484]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     ce8:	f003 fac8 	bl	427c <Print::println()>
     cec:	2116      	movs	r1, #22
     cee:	487c      	ldr	r0, [pc, #496]	; (ee0 <LEDDebug(LEDStruct&)+0x264>)
     cf0:	f003 f8c0 	bl	3e74 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     cf4:	f894 1226 	ldrb.w	r1, [r4, #550]	; 0x226
     cf8:	4874      	ldr	r0, [pc, #464]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     cfa:	f003 fb0f 	bl	431c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     cfe:	4873      	ldr	r0, [pc, #460]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d00:	f003 fabc 	bl	427c <Print::println()>
     d04:	2116      	movs	r1, #22
     d06:	4877      	ldr	r0, [pc, #476]	; (ee4 <LEDDebug(LEDStruct&)+0x268>)
     d08:	f003 f8b4 	bl	3e74 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d0c:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
     d10:	486e      	ldr	r0, [pc, #440]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d12:	f003 fb03 	bl	431c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d16:	486d      	ldr	r0, [pc, #436]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d18:	f003 fab0 	bl	427c <Print::println()>
     d1c:	2116      	movs	r1, #22
     d1e:	4872      	ldr	r0, [pc, #456]	; (ee8 <LEDDebug(LEDStruct&)+0x26c>)
     d20:	f003 f8a8 	bl	3e74 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d24:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
     d28:	4868      	ldr	r0, [pc, #416]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d2a:	f003 faf7 	bl	431c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d2e:	4867      	ldr	r0, [pc, #412]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d30:	f003 faa4 	bl	427c <Print::println()>
     d34:	210e      	movs	r1, #14
     d36:	486d      	ldr	r0, [pc, #436]	; (eec <LEDDebug(LEDStruct&)+0x270>)
     d38:	f003 f89c 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     d3c:	2300      	movs	r3, #0
     d3e:	220a      	movs	r2, #10
     d40:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
     d44:	4861      	ldr	r0, [pc, #388]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d46:	f003 faa9 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     d4a:	4860      	ldr	r0, [pc, #384]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d4c:	f003 fa96 	bl	427c <Print::println()>
     d50:	2116      	movs	r1, #22
     d52:	4867      	ldr	r0, [pc, #412]	; (ef0 <LEDDebug(LEDStruct&)+0x274>)
     d54:	f003 f88e 	bl	3e74 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d58:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
     d5c:	485b      	ldr	r0, [pc, #364]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d5e:	f003 fadd 	bl	431c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d62:	485a      	ldr	r0, [pc, #360]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d64:	f003 fa8a 	bl	427c <Print::println()>
	Serial.println(leds.mode_number);
	Serial.print("mode_initialized:     ");
	Serial.println(leds.mode_initialized);

	// Print mode-specific variables
	switch (leds.mode_name) {
     d68:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
     d6c:	2b01      	cmp	r3, #1
     d6e:	f000 809f 	beq.w	eb0 <LEDDebug(LEDStruct&)+0x234>
     d72:	d343      	bcc.n	dfc <LEDDebug(LEDStruct&)+0x180>
     d74:	2b02      	cmp	r3, #2
     d76:	d130      	bne.n	dda <LEDDebug(LEDStruct&)+0x15e>
     d78:	485e      	ldr	r0, [pc, #376]	; (ef4 <LEDDebug(LEDStruct&)+0x278>)
     d7a:	2119      	movs	r1, #25
     d7c:	f003 f87a 	bl	3e74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     d80:	4852      	ldr	r0, [pc, #328]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d82:	f003 fa7b 	bl	427c <Print::println()>
     d86:	210b      	movs	r1, #11
     d88:	485b      	ldr	r0, [pc, #364]	; (ef8 <LEDDebug(LEDStruct&)+0x27c>)
     d8a:	f003 f873 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     d8e:	2300      	movs	r3, #0
     d90:	220a      	movs	r2, #10
     d92:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
     d96:	484d      	ldr	r0, [pc, #308]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d98:	f003 fa80 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     d9c:	484b      	ldr	r0, [pc, #300]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     d9e:	f003 fa6d 	bl	427c <Print::println()>
     da2:	210b      	movs	r1, #11
     da4:	4855      	ldr	r0, [pc, #340]	; (efc <LEDDebug(LEDStruct&)+0x280>)
     da6:	f003 f865 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     daa:	2300      	movs	r3, #0
     dac:	220a      	movs	r2, #10
     dae:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
     db2:	4846      	ldr	r0, [pc, #280]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     db4:	f003 fa72 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     db8:	4844      	ldr	r0, [pc, #272]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     dba:	f003 fa5f 	bl	427c <Print::println()>
     dbe:	210b      	movs	r1, #11
     dc0:	484f      	ldr	r0, [pc, #316]	; (f00 <LEDDebug(LEDStruct&)+0x284>)
     dc2:	f003 f857 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     dc6:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
     dca:	4840      	ldr	r0, [pc, #256]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     dcc:	2300      	movs	r3, #0
     dce:	220a      	movs	r2, #10
     dd0:	f003 fa64 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     dd4:	483d      	ldr	r0, [pc, #244]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     dd6:	f003 fa51 	bl	427c <Print::println()>
     dda:	2116      	movs	r1, #22
     ddc:	483c      	ldr	r0, [pc, #240]	; (ed0 <LEDDebug(LEDStruct&)+0x254>)
     dde:	f003 f849 	bl	3e74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     de2:	483a      	ldr	r0, [pc, #232]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
			Serial.print("rot:       ");
			Serial.println(leds.rainbow_rot);
			break;
	}
	Serial.println("======================");
}
     de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     de8:	f003 ba48 	b.w	427c <Print::println()>
     dec:	2107      	movs	r1, #7
     dee:	4845      	ldr	r0, [pc, #276]	; (f04 <LEDDebug(LEDStruct&)+0x288>)
     df0:	f003 f840 	bl	3e74 <usb_serial_write>
     df4:	4835      	ldr	r0, [pc, #212]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     df6:	f003 fa41 	bl	427c <Print::println()>
     dfa:	e75b      	b.n	cb4 <LEDDebug(LEDStruct&)+0x38>
     dfc:	2116      	movs	r1, #22
     dfe:	4842      	ldr	r0, [pc, #264]	; (f08 <LEDDebug(LEDStruct&)+0x28c>)
     e00:	f003 f838 	bl	3e74 <usb_serial_write>
     e04:	4831      	ldr	r0, [pc, #196]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e06:	f003 fa39 	bl	427c <Print::println()>
     e0a:	210f      	movs	r1, #15
     e0c:	483f      	ldr	r0, [pc, #252]	; (f0c <LEDDebug(LEDStruct&)+0x290>)
     e0e:	f003 f831 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e12:	2300      	movs	r3, #0
     e14:	220a      	movs	r2, #10
     e16:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
     e1a:	482c      	ldr	r0, [pc, #176]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e1c:	f003 fa3e 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     e20:	482a      	ldr	r0, [pc, #168]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e22:	f003 fa2b 	bl	427c <Print::println()>
     e26:	210f      	movs	r1, #15
     e28:	4839      	ldr	r0, [pc, #228]	; (f10 <LEDDebug(LEDStruct&)+0x294>)
     e2a:	f003 f823 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e2e:	2300      	movs	r3, #0
     e30:	220a      	movs	r2, #10
     e32:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
     e36:	4825      	ldr	r0, [pc, #148]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e38:	f003 fa30 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     e3c:	4823      	ldr	r0, [pc, #140]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e3e:	f003 fa1d 	bl	427c <Print::println()>
     e42:	210f      	movs	r1, #15
     e44:	4833      	ldr	r0, [pc, #204]	; (f14 <LEDDebug(LEDStruct&)+0x298>)
     e46:	f003 f815 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e4a:	2300      	movs	r3, #0
     e4c:	220a      	movs	r2, #10
     e4e:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
     e52:	481e      	ldr	r0, [pc, #120]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e54:	f003 fa22 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     e58:	481c      	ldr	r0, [pc, #112]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e5a:	f003 fa0f 	bl	427c <Print::println()>
     e5e:	210f      	movs	r1, #15
     e60:	482d      	ldr	r0, [pc, #180]	; (f18 <LEDDebug(LEDStruct&)+0x29c>)
     e62:	f003 f807 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e66:	2300      	movs	r3, #0
     e68:	220a      	movs	r2, #10
     e6a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
     e6e:	4817      	ldr	r0, [pc, #92]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e70:	f003 fa14 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     e74:	4815      	ldr	r0, [pc, #84]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e76:	f003 fa01 	bl	427c <Print::println()>
     e7a:	210f      	movs	r1, #15
     e7c:	4827      	ldr	r0, [pc, #156]	; (f1c <LEDDebug(LEDStruct&)+0x2a0>)
     e7e:	f002 fff9 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e82:	2300      	movs	r3, #0
     e84:	220a      	movs	r2, #10
     e86:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
     e8a:	4810      	ldr	r0, [pc, #64]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e8c:	f003 fa06 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     e90:	480e      	ldr	r0, [pc, #56]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     e92:	f003 f9f3 	bl	427c <Print::println()>
     e96:	210f      	movs	r1, #15
     e98:	4821      	ldr	r0, [pc, #132]	; (f20 <LEDDebug(LEDStruct&)+0x2a4>)
     e9a:	f002 ffeb 	bl	3e74 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e9e:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
     ea2:	480a      	ldr	r0, [pc, #40]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     ea4:	f003 fa3a 	bl	431c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ea8:	4808      	ldr	r0, [pc, #32]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     eaa:	f003 f9e7 	bl	427c <Print::println()>
     eae:	e794      	b.n	dda <LEDDebug(LEDStruct&)+0x15e>
     eb0:	2113      	movs	r1, #19
     eb2:	481c      	ldr	r0, [pc, #112]	; (f24 <LEDDebug(LEDStruct&)+0x2a8>)
     eb4:	e762      	b.n	d7c <LEDDebug(LEDStruct&)+0x100>
     eb6:	2104      	movs	r1, #4
     eb8:	481b      	ldr	r0, [pc, #108]	; (f28 <LEDDebug(LEDStruct&)+0x2ac>)
     eba:	f002 ffdb 	bl	3e74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ebe:	4803      	ldr	r0, [pc, #12]	; (ecc <LEDDebug(LEDStruct&)+0x250>)
     ec0:	f003 f9dc 	bl	427c <Print::println()>
     ec4:	e6f6      	b.n	cb4 <LEDDebug(LEDStruct&)+0x38>
     ec6:	bf00      	nop
     ec8:	00005a68 	.word	0x00005a68
     ecc:	1fff872c 	.word	0x1fff872c
     ed0:	00005848 	.word	0x00005848
     ed4:	00005860 	.word	0x00005860
     ed8:	00005888 	.word	0x00005888
     edc:	000058a0 	.word	0x000058a0
     ee0:	000058b8 	.word	0x000058b8
     ee4:	000058d0 	.word	0x000058d0
     ee8:	000058e8 	.word	0x000058e8
     eec:	00005900 	.word	0x00005900
     ef0:	00005910 	.word	0x00005910
     ef4:	000059d8 	.word	0x000059d8
     ef8:	000059b4 	.word	0x000059b4
     efc:	000059c0 	.word	0x000059c0
     f00:	000059cc 	.word	0x000059cc
     f04:	00005878 	.word	0x00005878
     f08:	00005928 	.word	0x00005928
     f0c:	00005940 	.word	0x00005940
     f10:	00005950 	.word	0x00005950
     f14:	00005960 	.word	0x00005960
     f18:	00005970 	.word	0x00005970
     f1c:	00005980 	.word	0x00005980
     f20:	00005990 	.word	0x00005990
     f24:	000059a0 	.word	0x000059a0
     f28:	00005880 	.word	0x00005880

00000f2c <initialize()>:
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

// Initialization function
void initialize() {
     f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize curr_leds
	curr_leds.array_type = CURRENT;
     f30:	4b60      	ldr	r3, [pc, #384]	; (10b4 <initialize()+0x188>)
     f32:	4961      	ldr	r1, [pc, #388]	; (10b8 <initialize()+0x18c>)
     f34:	2700      	movs	r7, #0
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

// Initialization function
void initialize() {
     f36:	b08b      	sub	sp, #44	; 0x2c
	// Initialize curr_leds
	curr_leds.array_type = CURRENT;
     f38:	f883 722c 	strb.w	r7, [r3, #556]	; 0x22c
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     f3c:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     f40:	4a5d      	ldr	r2, [pc, #372]	; (10b8 <initialize()+0x18c>)
            count++;;
        } while ( u.index != 255);
     f42:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     f44:	3701      	adds	r7, #1
        } while ( u.index != 255);
     f46:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     f48:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     f4a:	d1f7      	bne.n	f3c <initialize()+0x10>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     f4c:	6813      	ldr	r3, [r2, #0]
     f4e:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     f50:	ea4f 6813 	mov.w	r8, r3, lsr #24
     f54:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     f58:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     f5c:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
     f60:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     f62:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     f64:	2400      	movs	r4, #0
     f66:	46c6      	mov	lr, r8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     f68:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     f6c:	4853      	ldr	r0, [pc, #332]	; (10bc <initialize()+0x190>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f6e:	f3c5 2707 	ubfx	r7, r5, #8, #8
     f72:	f3c5 4607 	ubfx	r6, r5, #16, #8
     f76:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     f78:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f7c:	9104      	str	r1, [sp, #16]
     f7e:	b2f1      	uxtb	r1, r6
     f80:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     f82:	fa5f f18c 	uxtb.w	r1, ip
     f86:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     f88:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     f8a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     f8c:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f8e:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     f92:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     f94:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f98:	fa5f f885 	uxtb.w	r8, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     f9c:	d80c      	bhi.n	fb8 <initialize()+0x8c>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     f9e:	9906      	ldr	r1, [sp, #24]
     fa0:	458c      	cmp	ip, r1
     fa2:	dc07      	bgt.n	fb4 <initialize()+0x88>
     fa4:	290f      	cmp	r1, #15
     fa6:	d005      	beq.n	fb4 <initialize()+0x88>
                    istart8 = lastSlotUsed + 1;
     fa8:	3101      	adds	r1, #1
     faa:	b2c9      	uxtb	r1, r1
     fac:	428b      	cmp	r3, r1
     fae:	9103      	str	r1, [sp, #12]
     fb0:	bf38      	it	cc
     fb2:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     fb4:	b259      	sxtb	r1, r3
     fb6:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     fb8:	a908      	add	r1, sp, #32
     fba:	9100      	str	r1, [sp, #0]
     fbc:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fbe:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     fc2:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     fc6:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fca:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     fce:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     fd2:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     fd6:	f000 ffc9 	bl	1f6c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     fda:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fdc:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     fe0:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     fe4:	46c6      	mov	lr, r8
     fe6:	d1bf      	bne.n	f68 <initialize()+0x3c>
     fe8:	4935      	ldr	r1, [pc, #212]	; (10c0 <initialize()+0x194>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     fea:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     fec:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     ff0:	4a33      	ldr	r2, [pc, #204]	; (10c0 <initialize()+0x194>)
            count++;;
        } while ( u.index != 255);
     ff2:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ff4:	3701      	adds	r7, #1
        } while ( u.index != 255);
     ff6:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ff8:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     ffa:	d1f7      	bne.n	fec <initialize()+0xc0>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     ffc:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     ffe:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1000:	f3c3 4907 	ubfx	r9, r3, #16, #8
    1004:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    1008:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    100c:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1010:	46ce      	mov	lr, r9
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1012:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1014:	2400      	movs	r4, #0
    1016:	4691      	mov	r9, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1018:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    101c:	4b25      	ldr	r3, [pc, #148]	; (10b4 <initialize()+0x188>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    101e:	f3c5 2707 	ubfx	r7, r5, #8, #8
    1022:	f3c5 4607 	ubfx	r6, r5, #16, #8
    1026:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    1028:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    102c:	9104      	str	r1, [sp, #16]
    102e:	b2f1      	uxtb	r1, r6
    1030:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    1032:	fa5f f18c 	uxtb.w	r1, ip
    1036:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    1038:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    103a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    103c:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    103e:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1042:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
    1046:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    1048:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    104c:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1050:	d80c      	bhi.n	106c <initialize()+0x140>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1052:	9906      	ldr	r1, [sp, #24]
    1054:	458c      	cmp	ip, r1
    1056:	dc07      	bgt.n	1068 <initialize()+0x13c>
    1058:	290f      	cmp	r1, #15
    105a:	d005      	beq.n	1068 <initialize()+0x13c>
                    istart8 = lastSlotUsed + 1;
    105c:	3101      	adds	r1, #1
    105e:	b2c9      	uxtb	r1, r1
    1060:	428b      	cmp	r3, r1
    1062:	9103      	str	r1, [sp, #12]
    1064:	bf38      	it	cc
    1066:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    1068:	b259      	sxtb	r1, r3
    106a:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    106c:	a908      	add	r1, sp, #32
    106e:	9100      	str	r1, [sp, #0]
    1070:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1072:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    1076:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
    107a:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    107e:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    1082:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    1086:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    108a:	f000 ff6f 	bl	1f6c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    108e:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1090:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    1094:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
    1098:	46d0      	mov	r8, sl
    109a:	d1bd      	bne.n	1018 <initialize()+0xec>
	curr_leds.current_palette = Colorfull_gp;
	curr_leds.target_palette = Magenta_Evening_gp;
	curr_leds.mode_name = JUGGLE;

	// Initialize next_leds
	next_leds.array_type = NEXT;
    109c:	4a09      	ldr	r2, [pc, #36]	; (10c4 <initialize()+0x198>)
    109e:	2101      	movs	r1, #1
    10a0:	f882 122c 	strb.w	r1, [r2, #556]	; 0x22c
void initialize() {
	// Initialize curr_leds
	curr_leds.array_type = CURRENT;
	curr_leds.current_palette = Colorfull_gp;
	curr_leds.target_palette = Magenta_Evening_gp;
	curr_leds.mode_name = JUGGLE;
    10a4:	4a03      	ldr	r2, [pc, #12]	; (10b4 <initialize()+0x188>)
    10a6:	2300      	movs	r3, #0
    10a8:	f882 322a 	strb.w	r3, [r2, #554]	; 0x22a

	// Initialize next_leds
	next_leds.array_type = NEXT;
}
    10ac:	b00b      	add	sp, #44	; 0x2c
    10ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10b2:	bf00      	nop
    10b4:	1fff90a0 	.word	0x1fff90a0
    10b8:	00006400 	.word	0x00006400
    10bc:	1fff9264 	.word	0x1fff9264
    10c0:	00006488 	.word	0x00006488
    10c4:	1fff8c54 	.word	0x1fff8c54

000010c8 <change_pattern()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    10c8:	4813      	ldr	r0, [pc, #76]	; (1118 <change_pattern()+0x50>)
	transition_type  = BLENDING;
	transition_speed = 4;
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    10ca:	4914      	ldr	r1, [pc, #80]	; (111c <change_pattern()+0x54>)
    10cc:	8803      	ldrh	r3, [r0, #0]
    10ce:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    10d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    10d6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    10da:	3319      	adds	r3, #25
    10dc:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    10de:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    10e2:	b2d2      	uxtb	r2, r2
	}
}


// Change pattern 
void change_pattern() {
    10e4:	b4f0      	push	{r4, r5, r6, r7}
    10e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    10ea:	1212      	asrs	r2, r2, #8
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.mode_number = random8(ARRAY_SIZE(ModeList));
	next_leds.mode_name = ModeList[next_leds.mode_number];
    10ec:	4f0c      	ldr	r7, [pc, #48]	; (1120 <change_pattern()+0x58>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    10ee:	8003      	strh	r3, [r0, #0]
// Change pattern 
void change_pattern() {
	// Global Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = 4;
    10f0:	480c      	ldr	r0, [pc, #48]	; (1124 <change_pattern()+0x5c>)
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.mode_number = random8(ARRAY_SIZE(ModeList));
	next_leds.mode_name = ModeList[next_leds.mode_number];
    10f2:	5cbb      	ldrb	r3, [r7, r2]

// Change pattern 
void change_pattern() {
	// Global Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
    10f4:	4e0c      	ldr	r6, [pc, #48]	; (1128 <change_pattern()+0x60>)
	transition_speed = 4;
	transition_ratio = 0;
    10f6:	4d0d      	ldr	r5, [pc, #52]	; (112c <change_pattern()+0x64>)


// Change pattern 
void change_pattern() {
	// Global Transition variables
	in_transition    = 1;
    10f8:	4c0d      	ldr	r4, [pc, #52]	; (1130 <change_pattern()+0x68>)
	transition_speed = 4;
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.mode_number = random8(ARRAY_SIZE(ModeList));
    10fa:	f881 2229 	strb.w	r2, [r1, #553]	; 0x229
// Change pattern 
void change_pattern() {
	// Global Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = 4;
    10fe:	2204      	movs	r2, #4


// Change pattern 
void change_pattern() {
	// Global Transition variables
	in_transition    = 1;
    1100:	2701      	movs	r7, #1
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.mode_number = random8(ARRAY_SIZE(ModeList));
	next_leds.mode_name = ModeList[next_leds.mode_number];
    1102:	f881 322a 	strb.w	r3, [r1, #554]	; 0x22a
// Change pattern 
void change_pattern() {
	// Global Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = 4;
    1106:	7002      	strb	r2, [r0, #0]

// Change pattern 
void change_pattern() {
	// Global Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
    1108:	2300      	movs	r3, #0
    110a:	7033      	strb	r3, [r6, #0]
	transition_speed = 4;
	transition_ratio = 0;
    110c:	702b      	strb	r3, [r5, #0]


// Change pattern 
void change_pattern() {
	// Global Transition variables
	in_transition    = 1;
    110e:	7027      	strb	r7, [r4, #0]
	transition_type  = BLENDING;
	transition_speed = 4;
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    1110:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
	next_leds.mode_number = random8(ARRAY_SIZE(ModeList));
	next_leds.mode_name = ModeList[next_leds.mode_number];
	
}
    1114:	bcf0      	pop	{r4, r5, r6, r7}
    1116:	4770      	bx	lr
    1118:	1fff8724 	.word	0x1fff8724
    111c:	1fff8c54 	.word	0x1fff8c54
    1120:	1fff8720 	.word	0x1fff8720
    1124:	1fff9096 	.word	0x1fff9096
    1128:	1fff8ea8 	.word	0x1fff8ea8
    112c:	1fff8c4c 	.word	0x1fff8c4c
    1130:	1fff8e9c 	.word	0x1fff8e9c

00001134 <blending()>:



// Transition functions

void blending() {
    1134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1138:	f8df a200 	ldr.w	sl, [pc, #512]	; 133c <blending()+0x208>
    113c:	f8df b200 	ldr.w	fp, [pc, #512]	; 1340 <blending()+0x20c>
    1140:	4c73      	ldr	r4, [pc, #460]	; (1310 <blending()+0x1dc>)
    1142:	4f74      	ldr	r7, [pc, #464]	; (1314 <blending()+0x1e0>)
    1144:	b085      	sub	sp, #20
    1146:	4655      	mov	r5, sl
    1148:	f50a 78e1 	add.w	r8, sl, #450	; 0x1c2
    114c:	465e      	mov	r6, fp
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    114e:	4632      	mov	r2, r6
    1150:	4629      	mov	r1, r5
    1152:	783b      	ldrb	r3, [r7, #0]
    1154:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 1314 <blending()+0x1e0>
    1158:	a803      	add	r0, sp, #12
    115a:	3503      	adds	r5, #3
    115c:	f000 ffc8 	bl	20f0 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1160:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1164:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1168:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    116c:	7021      	strb	r1, [r4, #0]
    116e:	4545      	cmp	r5, r8
        g = rhs.g;
    1170:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1172:	70a3      	strb	r3, [r4, #2]
    1174:	f106 0603 	add.w	r6, r6, #3
    1178:	f104 0403 	add.w	r4, r4, #3
    117c:	d1e7      	bne.n	114e <blending()+0x1a>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    117e:	4e66      	ldr	r6, [pc, #408]	; (1318 <blending()+0x1e4>)
    1180:	6833      	ldr	r3, [r6, #0]
    1182:	07db      	lsls	r3, r3, #31
    1184:	f140 80a6 	bpl.w	12d4 <blending()+0x1a0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1188:	4d64      	ldr	r5, [pc, #400]	; (131c <blending()+0x1e8>)
    118a:	4c65      	ldr	r4, [pc, #404]	; (1320 <blending()+0x1ec>)
    118c:	682b      	ldr	r3, [r5, #0]
    118e:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    1190:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1194:	9b03      	ldr	r3, [sp, #12]
    1196:	1a5b      	subs	r3, r3, r1
    1198:	429a      	cmp	r2, r3
    119a:	d80c      	bhi.n	11b6 <blending()+0x82>
    119c:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    119e:	682a      	ldr	r2, [r5, #0]
    11a0:	9202      	str	r2, [sp, #8]
    11a2:	3301      	adds	r3, #1
	return ret;
    11a4:	9a02      	ldr	r2, [sp, #8]
    11a6:	6022      	str	r2, [r4, #0]
    11a8:	b2db      	uxtb	r3, r3
    11aa:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    11ac:	2bff      	cmp	r3, #255	; 0xff
    11ae:	d006      	beq.n	11be <blending()+0x8a>
		in_transition = 0;
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
		fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	}
}
    11b0:	b005      	add	sp, #20
    11b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11b6:	f899 3000 	ldrb.w	r3, [r9]
// Transition functions

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    11ba:	2bff      	cmp	r3, #255	; 0xff
    11bc:	d1f8      	bne.n	11b0 <blending()+0x7c>
		in_transition = 0;
    11be:	4959      	ldr	r1, [pc, #356]	; (1324 <blending()+0x1f0>)
    11c0:	4b59      	ldr	r3, [pc, #356]	; (1328 <blending()+0x1f4>)
    11c2:	4a5a      	ldr	r2, [pc, #360]	; (132c <blending()+0x1f8>)
    11c4:	2000      	movs	r0, #0
    11c6:	7008      	strb	r0, [r1, #0]
    11c8:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    11cc:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
    11d0:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    11d4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    11d8:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
    11dc:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    11e0:	f803 1c01 	strb.w	r1, [r3, #-1]
    11e4:	3303      	adds	r3, #3
#ifndef LED_STRUCT_H
#define LED_STRUCT_H

//======== LED structure =========

struct LEDStruct {
    11e6:	42ab      	cmp	r3, r5
    11e8:	f102 0203 	add.w	r2, r2, #3
    11ec:	d1ee      	bne.n	11cc <blending()+0x98>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    11ee:	4d50      	ldr	r5, [pc, #320]	; (1330 <blending()+0x1fc>)
    11f0:	f89b 31c2 	ldrb.w	r3, [fp, #450]	; 0x1c2
    11f4:	f88a 31c2 	strb.w	r3, [sl, #450]	; 0x1c2
    11f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    11fa:	4c4e      	ldr	r4, [pc, #312]	; (1334 <blending()+0x200>)
    11fc:	f89b 71c3 	ldrb.w	r7, [fp, #451]	; 0x1c3
    1200:	f88a 71c3 	strb.w	r7, [sl, #451]	; 0x1c3
    1204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    120a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    120e:	f105 0610 	add.w	r6, r5, #16
    1212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1216:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1218:	3410      	adds	r4, #16
    121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    121c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    121e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1220:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    1224:	f89b c224 	ldrb.w	ip, [fp, #548]	; 0x224
    1228:	f89b e225 	ldrb.w	lr, [fp, #549]	; 0x225
    122c:	f89b 7226 	ldrb.w	r7, [fp, #550]	; 0x226
    1230:	f89b 6227 	ldrb.w	r6, [fp, #551]	; 0x227
    1234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1238:	f89b 1228 	ldrb.w	r1, [fp, #552]	; 0x228
    123c:	f89b 3229 	ldrb.w	r3, [fp, #553]	; 0x229
    1240:	f89b 222a 	ldrb.w	r2, [fp, #554]	; 0x22a
    1244:	f88a c224 	strb.w	ip, [sl, #548]	; 0x224
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
		fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1248:	f5a5 70f2 	sub.w	r0, r5, #484	; 0x1e4
    124c:	f88a e225 	strb.w	lr, [sl, #549]	; 0x225
    1250:	f88a 7226 	strb.w	r7, [sl, #550]	; 0x226
    1254:	f88a 6227 	strb.w	r6, [sl, #551]	; 0x227
    1258:	f88a 1228 	strb.w	r1, [sl, #552]	; 0x228
    125c:	f88a 3229 	strb.w	r3, [sl, #553]	; 0x229
    1260:	f88a 222a 	strb.w	r2, [sl, #554]	; 0x22a
    1264:	f89b 622b 	ldrb.w	r6, [fp, #555]	; 0x22b
    1268:	f89b 522d 	ldrb.w	r5, [fp, #557]	; 0x22d
    126c:	f89b 422e 	ldrb.w	r4, [fp, #558]	; 0x22e
    1270:	f89b 122f 	ldrb.w	r1, [fp, #559]	; 0x22f
    1274:	f89b c230 	ldrb.w	ip, [fp, #560]	; 0x230
    1278:	f89b e231 	ldrb.w	lr, [fp, #561]	; 0x231
    127c:	f88a 622b 	strb.w	r6, [sl, #555]	; 0x22b
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
		in_transition = 0;
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
    1280:	2300      	movs	r3, #0
    1282:	f89b 7232 	ldrb.w	r7, [fp, #562]	; 0x232
    1286:	f88a 522d 	strb.w	r5, [sl, #557]	; 0x22d
    128a:	f89b 6233 	ldrb.w	r6, [fp, #563]	; 0x233
    128e:	f88a 422e 	strb.w	r4, [sl, #558]	; 0x22e
    1292:	f89b 5234 	ldrb.w	r5, [fp, #564]	; 0x234
    1296:	f89b 4235 	ldrb.w	r4, [fp, #565]	; 0x235
    129a:	f88a 122f 	strb.w	r1, [sl, #559]	; 0x22f
		fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    129e:	466a      	mov	r2, sp
    12a0:	2196      	movs	r1, #150	; 0x96
    12a2:	f88a c230 	strb.w	ip, [sl, #560]	; 0x230
    12a6:	f88a e231 	strb.w	lr, [sl, #561]	; 0x231
    12aa:	f88a 7232 	strb.w	r7, [sl, #562]	; 0x232
    12ae:	f88a 6233 	strb.w	r6, [sl, #563]	; 0x233
    12b2:	f88a 5234 	strb.w	r5, [sl, #564]	; 0x234
    12b6:	f88a 4235 	strb.w	r4, [sl, #565]	; 0x235
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
		in_transition = 0;
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
    12ba:	f88a 322c 	strb.w	r3, [sl, #556]	; 0x22c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    12be:	f88d 3000 	strb.w	r3, [sp]
    12c2:	f88d 3001 	strb.w	r3, [sp, #1]
    12c6:	f88d 3002 	strb.w	r3, [sp, #2]
		fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    12ca:	f000 fe1f 	bl	1f0c <fill_solid(CRGB*, int, CRGB const&)>
	}
}
    12ce:	b005      	add	sp, #20
    12d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

// Transition functions

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    12d4:	4630      	mov	r0, r6
    12d6:	f001 fd35 	bl	2d44 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12da:	4d10      	ldr	r5, [pc, #64]	; (131c <blending()+0x1e8>)
    12dc:	b958      	cbnz	r0, 12f6 <blending()+0x1c2>
    12de:	4c10      	ldr	r4, [pc, #64]	; (1320 <blending()+0x1ec>)
    12e0:	682b      	ldr	r3, [r5, #0]
    12e2:	9303      	str	r3, [sp, #12]
    12e4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    12e8:	9b03      	ldr	r3, [sp, #12]
    12ea:	1a5b      	subs	r3, r3, r1
    12ec:	4293      	cmp	r3, r2
    12ee:	f4bf af55 	bcs.w	119c <blending()+0x68>
    12f2:	783b      	ldrb	r3, [r7, #0]
    12f4:	e75a      	b.n	11ac <blending()+0x78>
    12f6:	4b10      	ldr	r3, [pc, #64]	; (1338 <blending()+0x204>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12f8:	682a      	ldr	r2, [r5, #0]
    12fa:	781b      	ldrb	r3, [r3, #0]
    12fc:	4c08      	ldr	r4, [pc, #32]	; (1320 <blending()+0x1ec>)
    12fe:	9201      	str	r2, [sp, #4]
	return ret;
    1300:	9a01      	ldr	r2, [sp, #4]
    1302:	6022      	str	r2, [r4, #0]
    1304:	009b      	lsls	r3, r3, #2
    1306:	4630      	mov	r0, r6
    1308:	6063      	str	r3, [r4, #4]
    130a:	f001 fd21 	bl	2d50 <__cxa_guard_release>
    130e:	e7e7      	b.n	12e0 <blending()+0x1ac>
    1310:	1fff8ed4 	.word	0x1fff8ed4
    1314:	1fff8c4c 	.word	0x1fff8c4c
    1318:	1fff8ed0 	.word	0x1fff8ed0
    131c:	1fff9350 	.word	0x1fff9350
    1320:	1fff8ea0 	.word	0x1fff8ea0
    1324:	1fff8e9c 	.word	0x1fff8e9c
    1328:	1fff90a3 	.word	0x1fff90a3
    132c:	1fff8c57 	.word	0x1fff8c57
    1330:	1fff8e18 	.word	0x1fff8e18
    1334:	1fff9264 	.word	0x1fff9264
    1338:	1fff9096 	.word	0x1fff9096
    133c:	1fff90a0 	.word	0x1fff90a0
    1340:	1fff8c54 	.word	0x1fff8c54

00001344 <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>:
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, uint8_t ji = 0, uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2)) {
    1344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1348:	4d18      	ldr	r5, [pc, #96]	; (13ac <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x68>)
    134a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    134e:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
    1352:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1356:	4604      	mov	r4, r0
    1358:	4689      	mov	r9, r1
    135a:	4815      	ldr	r0, [pc, #84]	; (13b0 <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x6c>)
    135c:	2111      	movs	r1, #17
    135e:	4692      	mov	sl, r2
    1360:	469b      	mov	fp, r3
    1362:	f002 fd87 	bl	3e74 <usb_serial_write>
    1366:	4628      	mov	r0, r5
    1368:	f002 ff88 	bl	427c <Print::println()>
	if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized = 1;
    136c:	2101      	movs	r1, #1
	leds.mode_name = JUGGLE;
    136e:	2000      	movs	r0, #0
    1370:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, uint8_t ji = 0, uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2)) {
	if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized = 1;
    1374:	f884 122b 	strb.w	r1, [r4, #555]	; 0x22b
	leds.mode_name = JUGGLE;
	leds.use_palette = 1;
    1378:	f884 1226 	strb.w	r1, [r4, #550]	; 0x226

	leds.juggle_index		 = ji;
    137c:	f884 922d 	strb.w	r9, [r4, #557]	; 0x22d
	leds.juggle_numdots 	 = jn;
    1380:	f884 a22e 	strb.w	sl, [r4, #558]	; 0x22e
	leds.juggle_beat		 = jb;
    1384:	f884 b22f 	strb.w	fp, [r4, #559]	; 0x22f
	leds.juggle_fade		 = jf;
    1388:	f884 8230 	strb.w	r8, [r4, #560]	; 0x230
	leds.juggle_diff		 = jd;
    138c:	f884 7231 	strb.w	r7, [r4, #561]	; 0x231
	leds.juggle_index_reset  = jir;
    1390:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
    1394:	2114      	movs	r1, #20
    1396:	4807      	ldr	r0, [pc, #28]	; (13b4 <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x70>)
    1398:	f002 fd6c 	bl	3e74 <usb_serial_write>
    139c:	4628      	mov	r0, r5
    139e:	f002 ff6d 	bl	427c <Print::println()>

	if (DEBUG) { Serial.println("JUGGLE INIT COMPLETE"); }
	if (DEBUG) { LEDDebug(leds); }
    13a2:	4620      	mov	r0, r4
}
    13a4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;

	if (DEBUG) { Serial.println("JUGGLE INIT COMPLETE"); }
	if (DEBUG) { LEDDebug(leds); }
    13a8:	f7ff bc68 	b.w	c7c <LEDDebug(LEDStruct&)>
    13ac:	1fff872c 	.word	0x1fff872c
    13b0:	000059f4 	.word	0x000059f4
    13b4:	00005a08 	.word	0x00005a08

000013b8 <juggle(LEDStruct&)>:
}



void juggle(LEDStruct& leds) {
    13b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    13bc:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
	if (DEBUG) { LEDDebug(leds); }
}



void juggle(LEDStruct& leds) {
    13c0:	b08b      	sub	sp, #44	; 0x2c
    13c2:	4606      	mov	r6, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    13c4:	2900      	cmp	r1, #0
    13c6:	f000 80e3 	beq.w	1590 <juggle(LEDStruct&)+0x1d8>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    13ca:	f896 3232 	ldrb.w	r3, [r6, #562]	; 0x232
    13ce:	b113      	cbz	r3, 13d6 <juggle(LEDStruct&)+0x1e>
    13d0:	2300      	movs	r3, #0
    13d2:	f886 322d 	strb.w	r3, [r6, #557]	; 0x22d

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    13d6:	f896 2230 	ldrb.w	r2, [r6, #560]	; 0x230
    13da:	2196      	movs	r1, #150	; 0x96
    13dc:	4630      	mov	r0, r6
    13de:	f000 fe57 	bl	2090 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    13e2:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
    13e6:	2b00      	cmp	r3, #0
    13e8:	f000 80cf 	beq.w	158a <juggle(LEDStruct&)+0x1d2>
    13ec:	f106 04e1 	add.w	r4, r6, #225	; 0xe1
    13f0:	f896 222d 	ldrb.w	r2, [r6, #557]	; 0x22d
    13f4:	f8df b254 	ldr.w	fp, [pc, #596]	; 164c <juggle(LEDStruct&)+0x294>
    13f8:	f8df a254 	ldr.w	sl, [pc, #596]	; 1650 <juggle(LEDStruct&)+0x298>
    13fc:	9405      	str	r4, [sp, #20]
    13fe:	2700      	movs	r7, #0
    1400:	f506 78e2 	add.w	r8, r6, #452	; 0x1c4
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1404:	f44f 798c 	mov.w	r9, #280	; 0x118
    1408:	e05a      	b.n	14c0 <juggle(LEDStruct&)+0x108>
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    140a:	f896 122f 	ldrb.w	r1, [r6, #559]	; 0x22f
    140e:	443b      	add	r3, r7
    1410:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1412:	f8db 1000 	ldr.w	r1, [fp]
    1416:	9108      	str	r1, [sp, #32]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1418:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    141a:	9908      	ldr	r1, [sp, #32]
    141c:	bf9c      	itt	ls
    141e:	021b      	lslls	r3, r3, #8
    1420:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1422:	fb09 f101 	mul.w	r1, r9, r1
    1426:	fb03 f301 	mul.w	r3, r3, r1
    142a:	0c19      	lsrs	r1, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    142c:	044d      	lsls	r5, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    142e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1432:	d503      	bpl.n	143c <juggle(LEDStruct&)+0x84>
    1434:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1438:	3307      	adds	r3, #7
    143a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    143c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    143e:	4c81      	ldr	r4, [pc, #516]	; (1644 <juggle(LEDStruct&)+0x28c>)
    1440:	f81a 5000 	ldrb.w	r5, [sl, r0]
    1444:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
    1448:	f3c3 0346 	ubfx	r3, r3, #1, #7
    144c:	fb05 0303 	mla	r3, r5, r3, r0

    if( theta & 0x8000 ) y = -y;
    1450:	040c      	lsls	r4, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1452:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1454:	bf48      	it	mi
    1456:	425b      	negmi	r3, r3
    1458:	f896 1225 	ldrb.w	r1, [r6, #549]	; 0x225
    145c:	b21d      	sxth	r5, r3
    145e:	a807      	add	r0, sp, #28
    1460:	f896 31c2 	ldrb.w	r3, [r6, #450]	; 0x1c2
    1464:	9100      	str	r1, [sp, #0]
    1466:	4641      	mov	r1, r8
    1468:	f000 fe50 	bl	210c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    146c:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    1470:	2296      	movs	r2, #150	; 0x96
    1472:	b29b      	uxth	r3, r3
    1474:	fb02 f303 	mul.w	r3, r2, r3
    1478:	0c1b      	lsrs	r3, r3, #16
    147a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    147e:	18f1      	adds	r1, r6, r3
    1480:	5cf2      	ldrb	r2, [r6, r3]
    1482:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1486:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    148a:	54f2      	strb	r2, [r6, r3]
    148c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    1490:	784a      	ldrb	r2, [r1, #1]
    1492:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1496:	704a      	strb	r2, [r1, #1]
    1498:	788b      	ldrb	r3, [r1, #2]
    149a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    149e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    14a2:	708b      	strb	r3, [r1, #2]
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
    14a4:	f896 122d 	ldrb.w	r1, [r6, #557]	; 0x22d
    14a8:	f896 2231 	ldrb.w	r2, [r6, #561]	; 0x231

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    14ac:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
    14b0:	3701      	adds	r7, #1
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
    14b2:	440a      	add	r2, r1

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    14b4:	b2ff      	uxtb	r7, r7
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
    14b6:	b2d2      	uxtb	r2, r2

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    14b8:	42bb      	cmp	r3, r7
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
    14ba:	f886 222d 	strb.w	r2, [r6, #557]	; 0x22d

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    14be:	d964      	bls.n	158a <juggle(LEDStruct&)+0x1d2>
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    14c0:	f896 1227 	ldrb.w	r1, [r6, #551]	; 0x227
    14c4:	2900      	cmp	r1, #0
    14c6:	d1a0      	bne.n	140a <juggle(LEDStruct&)+0x52>
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    14c8:	f896 122f 	ldrb.w	r1, [r6, #559]	; 0x22f
    14cc:	443b      	add	r3, r7
    14ce:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14d0:	f8db 1000 	ldr.w	r1, [fp]
    14d4:	9109      	str	r1, [sp, #36]	; 0x24

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    14d6:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    14d8:	9909      	ldr	r1, [sp, #36]	; 0x24
    14da:	bf9c      	itt	ls
    14dc:	021b      	lslls	r3, r3, #8
    14de:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    14e0:	fb09 f101 	mul.w	r1, r9, r1
    14e4:	fb03 f301 	mul.w	r3, r3, r1
    14e8:	0c19      	lsrs	r1, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    14ea:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    14ec:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    14f0:	d503      	bpl.n	14fa <juggle(LEDStruct&)+0x142>
    14f2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    14f6:	3307      	adds	r3, #7
    14f8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    14fa:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    14fc:	4c51      	ldr	r4, [pc, #324]	; (1644 <juggle(LEDStruct&)+0x28c>)
    14fe:	f81a 5000 	ldrb.w	r5, [sl, r0]
    1502:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
    1506:	f3c3 0346 	ubfx	r3, r3, #1, #7
    150a:	fb05 0303 	mla	r3, r5, r3, r0

    if( theta & 0x8000 ) y = -y;
    150e:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1510:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1512:	bf48      	it	mi
    1514:	425b      	negmi	r3, r3
    1516:	f896 1225 	ldrb.w	r1, [r6, #549]	; 0x225
    151a:	b21d      	sxth	r5, r3
    151c:	a807      	add	r0, sp, #28
    151e:	f896 31c2 	ldrb.w	r3, [r6, #450]	; 0x1c2
    1522:	9100      	str	r1, [sp, #0]
    1524:	4641      	mov	r1, r8
    1526:	f000 fdf1 	bl	210c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    152a:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    152e:	b29b      	uxth	r3, r3
    1530:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1534:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1538:	0c1b      	lsrs	r3, r3, #16
    153a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    153e:	18f1      	adds	r1, r6, r3
    1540:	5cf2      	ldrb	r2, [r6, r3]
    1542:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1546:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    154a:	54f2      	strb	r2, [r6, r3]
    154c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    1550:	784a      	ldrb	r2, [r1, #1]
    1552:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1556:	704a      	strb	r2, [r1, #1]
    1558:	788b      	ldrb	r3, [r1, #2]
    155a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    155e:	fa83 f352 	uqadd8	r3, r3, r2
    1562:	9c05      	ldr	r4, [sp, #20]
        b = qadd8( b, rhs.b);
    1564:	708b      	strb	r3, [r1, #2]
    1566:	4632      	mov	r2, r6
    1568:	4633      	mov	r3, r6
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    156a:	7819      	ldrb	r1, [r3, #0]
    156c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    1570:	7859      	ldrb	r1, [r3, #1]
    1572:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    1576:	7899      	ldrb	r1, [r3, #2]
    1578:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    157c:	3303      	adds	r3, #3
LEDStruct next_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    157e:	429c      	cmp	r4, r3
    1580:	f1a2 0203 	sub.w	r2, r2, #3
    1584:	d1f1      	bne.n	156a <juggle(LEDStruct&)+0x1b2>
    1586:	9405      	str	r4, [sp, #20]
    1588:	e78c      	b.n	14a4 <juggle(LEDStruct&)+0xec>
		leds.juggle_index += leds.juggle_diff;
	}
}
    158a:	b00b      	add	sp, #44	; 0x2c
    158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1590:	4d2d      	ldr	r5, [pc, #180]	; (1648 <juggle(LEDStruct&)+0x290>)
    1592:	882b      	ldrh	r3, [r5, #0]
    1594:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1598:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    159c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    15a0:	3219      	adds	r2, #25
    15a2:	b292      	uxth	r2, r2
    15a4:	eb02 2442 	add.w	r4, r2, r2, lsl #9
    15a8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    15ac:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    15b0:	3419      	adds	r4, #25
    15b2:	b2a4      	uxth	r4, r4
    15b4:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    15b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    15bc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    15c0:	3319      	adds	r3, #25
    15c2:	b29b      	uxth	r3, r3
    15c4:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    15c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    15cc:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    15d0:	3719      	adds	r7, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    15d2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    15d6:	b2bf      	uxth	r7, r7



void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    15d8:	b2db      	uxtb	r3, r3
    15da:	eb07 2e47 	add.w	lr, r7, r7, lsl #9
    15de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    15e2:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    15e6:	eb04 2414 	add.w	r4, r4, r4, lsr #8
    15ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    15ee:	eb02 2c12 	add.w	ip, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    15f2:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    15f6:	b2e2      	uxtb	r2, r4
    15f8:	119c      	asrs	r4, r3, #6
    15fa:	fa5f fc8c 	uxtb.w	ip, ip
    15fe:	f10e 0e19 	add.w	lr, lr, #25
    1602:	3c74      	subs	r4, #116	; 0x74
    1604:	fa1f fe8e 	uxth.w	lr, lr
    1608:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    160c:	b2e4      	uxtb	r4, r4
    160e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1612:	eb07 2717 	add.w	r7, r7, r7, lsr #8
    1616:	9400      	str	r4, [sp, #0]
    1618:	ea4f 1cec 	mov.w	ip, ip, asr #7
    161c:	1193      	asrs	r3, r2, #6
    161e:	eb0e 241e 	add.w	r4, lr, lr, lsr #8
    1622:	f3c7 1742 	ubfx	r7, r7, #5, #3
    1626:	f10c 0201 	add.w	r2, ip, #1
    162a:	3701      	adds	r7, #1
    162c:	f3c4 14c0 	ubfx	r4, r4, #7, #1
    1630:	3308      	adds	r3, #8
    1632:	9402      	str	r4, [sp, #8]
    1634:	9701      	str	r7, [sp, #4]
    1636:	b2d2      	uxtb	r2, r2
    1638:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    163a:	f8a5 e000 	strh.w	lr, [r5]
    163e:	f7ff fe81 	bl	1344 <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
    1642:	e6c2      	b.n	13ca <juggle(LEDStruct&)+0x12>
    1644:	00004f2c 	.word	0x00004f2c
    1648:	1fff8724 	.word	0x1fff8724
    164c:	1fff9350 	.word	0x1fff9350
    1650:	00005798 	.word	0x00005798

00001654 <rainbow_init(LEDStruct&, Mode, unsigned char, unsigned char)>:
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, Mode mn, uint8_t rd = random8(1, 16), uint8_t rr = random8(1,6)) {
    1654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1658:	4d11      	ldr	r5, [pc, #68]	; (16a0 <rainbow_init(LEDStruct&, Mode, unsigned char, unsigned char)+0x4c>)
    165a:	4604      	mov	r4, r0
    165c:	4688      	mov	r8, r1
    165e:	4811      	ldr	r0, [pc, #68]	; (16a4 <rainbow_init(LEDStruct&, Mode, unsigned char, unsigned char)+0x50>)
    1660:	2118      	movs	r1, #24
    1662:	4617      	mov	r7, r2
    1664:	461e      	mov	r6, r3
    1666:	f002 fc05 	bl	3e74 <usb_serial_write>
    166a:	4628      	mov	r0, r5
    166c:	f002 fe06 	bl	427c <Print::println()>
    if (DEBUG) { Serial.println("RAINBOW MARCH INIT BEGIN"); }
    leds.mode_initialized = 1;
    1670:	2001      	movs	r0, #1
    leds.mode_name = mn;
    leds.use_palette = 0;
    1672:	2100      	movs	r1, #0
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, Mode mn, uint8_t rd = random8(1, 16), uint8_t rr = random8(1,6)) {
    if (DEBUG) { Serial.println("RAINBOW MARCH INIT BEGIN"); }
    leds.mode_initialized = 1;
    1674:	f884 022b 	strb.w	r0, [r4, #555]	; 0x22b
    leds.mode_name = mn;
    leds.use_palette = 0;
    1678:	f884 1226 	strb.w	r1, [r4, #550]	; 0x226
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, Mode mn, uint8_t rd = random8(1, 16), uint8_t rr = random8(1,6)) {
    if (DEBUG) { Serial.println("RAINBOW MARCH INIT BEGIN"); }
    leds.mode_initialized = 1;
    leds.mode_name = mn;
    167c:	f884 822a 	strb.w	r8, [r4, #554]	; 0x22a
    leds.use_palette = 0;

    leds.rainbow_diff = rd;
    1680:	f884 7234 	strb.w	r7, [r4, #564]	; 0x234
    leds.rainbow_rot  = rr;
    1684:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
    1688:	211b      	movs	r1, #27
    168a:	4807      	ldr	r0, [pc, #28]	; (16a8 <rainbow_init(LEDStruct&, Mode, unsigned char, unsigned char)+0x54>)
    168c:	f002 fbf2 	bl	3e74 <usb_serial_write>
    1690:	4628      	mov	r0, r5
    1692:	f002 fdf3 	bl	427c <Print::println()>

    if (DEBUG) { Serial.println("RAINBOW MARCH INIT COMPLETE"); }
    if (DEBUG) { LEDDebug(leds); }
    1696:	4620      	mov	r0, r4
}
    1698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

    leds.rainbow_diff = rd;
    leds.rainbow_rot  = rr;

    if (DEBUG) { Serial.println("RAINBOW MARCH INIT COMPLETE"); }
    if (DEBUG) { LEDDebug(leds); }
    169c:	f7ff baee 	b.w	c7c <LEDDebug(LEDStruct&)>
    16a0:	1fff872c 	.word	0x1fff872c
    16a4:	00005a20 	.word	0x00005a20
    16a8:	00005a3c 	.word	0x00005a3c

000016ac <rainbow_march(LEDStruct&)>:
}


void rainbow_march(LEDStruct& leds) {
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    16ac:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
    if (DEBUG) { Serial.println("RAINBOW MARCH INIT COMPLETE"); }
    if (DEBUG) { LEDDebug(leds); }
}


void rainbow_march(LEDStruct& leds) {
    16b0:	b570      	push	{r4, r5, r6, lr}
    16b2:	4604      	mov	r4, r0
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    16b4:	2b00      	cmp	r3, #0
    16b6:	d03a      	beq.n	172e <rainbow_march(LEDStruct&)+0x82>

    // Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    16b8:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    16bc:	bb1b      	cbnz	r3, 1706 <rainbow_march(LEDStruct&)+0x5a>
    16be:	f894 2235 	ldrb.w	r2, [r4, #565]	; 0x235
    16c2:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    16c6:	441a      	add	r2, r3

    // Apply rainbow to LEDs
    if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    16c8:	f894 3227 	ldrb.w	r3, [r4, #551]	; 0x227
void rainbow_march(LEDStruct& leds) {
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

    // Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    16cc:	b2d2      	uxtb	r2, r2
    16ce:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235

    // Apply rainbow to LEDs
    if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    16d2:	bb23      	cbnz	r3, 171e <rainbow_march(LEDStruct&)+0x72>
    else                     { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    16d4:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    16d8:	214b      	movs	r1, #75	; 0x4b
    16da:	4620      	mov	r0, r4
    16dc:	f000 fc26 	bl	1f2c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    16e0:	4620      	mov	r0, r4
    16e2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    16e6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16e8:	781a      	ldrb	r2, [r3, #0]
    16ea:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    16ee:	785a      	ldrb	r2, [r3, #1]
    16f0:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    16f4:	789a      	ldrb	r2, [r3, #2]
    16f6:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    16fa:	3303      	adds	r3, #3
    16fc:	428b      	cmp	r3, r1
    16fe:	f1a0 0003 	sub.w	r0, r0, #3
    1702:	d1f1      	bne.n	16e8 <rainbow_march(LEDStruct&)+0x3c>
}
    1704:	bd70      	pop	{r4, r5, r6, pc}
void rainbow_march(LEDStruct& leds) {
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

    // Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    1706:	f894 3235 	ldrb.w	r3, [r4, #565]	; 0x235
    170a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    170e:	1a9a      	subs	r2, r3, r2

    // Apply rainbow to LEDs
    if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    1710:	f894 3227 	ldrb.w	r3, [r4, #551]	; 0x227
void rainbow_march(LEDStruct& leds) {
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

    // Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    1714:	b2d2      	uxtb	r2, r2
    1716:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235

    // Apply rainbow to LEDs
    if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    171a:	2b00      	cmp	r3, #0
    171c:	d0da      	beq.n	16d4 <rainbow_march(LEDStruct&)+0x28>
    171e:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    1722:	4620      	mov	r0, r4
    1724:	2196      	movs	r1, #150	; 0x96
    else                     { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
}
    1726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

    // Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

    // Apply rainbow to LEDs
    if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    172a:	f000 bbff 	b.w	1f2c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    172e:	4d13      	ldr	r5, [pc, #76]	; (177c <rainbow_march(LEDStruct&)+0xd0>)
    1730:	882b      	ldrh	r3, [r5, #0]
    1732:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1736:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    173a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    173e:	3319      	adds	r3, #25
    1740:	b29b      	uxth	r3, r3
    1742:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    1746:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    174a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    174e:	3619      	adds	r6, #25
    1750:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1752:	eb06 2216 	add.w	r2, r6, r6, lsr #8
    1756:	eb03 2313 	add.w	r3, r3, r3, lsr #8
}


void rainbow_march(LEDStruct& leds) {
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    175a:	b2d2      	uxtb	r2, r2
    175c:	b2db      	uxtb	r3, r3
    175e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1762:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1766:	1211      	asrs	r1, r2, #8
    1768:	121a      	asrs	r2, r3, #8
    176a:	3201      	adds	r2, #1
    176c:	1c4b      	adds	r3, r1, #1
    176e:	b2db      	uxtb	r3, r3
    1770:	b2d2      	uxtb	r2, r2
    1772:	2101      	movs	r1, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1774:	802e      	strh	r6, [r5, #0]
    1776:	f7ff ff6d 	bl	1654 <rainbow_init(LEDStruct&, Mode, unsigned char, unsigned char)>
    177a:	e79d      	b.n	16b8 <rainbow_march(LEDStruct&)+0xc>
    177c:	1fff8724 	.word	0x1fff8724

00001780 <rainbow_march_split(LEDStruct&)>:



void rainbow_march_split(LEDStruct& leds){
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH_SPLIT); }
    1780:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
    else                     { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
}



void rainbow_march_split(LEDStruct& leds){
    1784:	b570      	push	{r4, r5, r6, lr}
    1786:	4604      	mov	r4, r0
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH_SPLIT); }
    1788:	2b00      	cmp	r3, #0
    178a:	d03e      	beq.n	180a <rainbow_march_split(LEDStruct&)+0x8a>
  
    // Increase the start index by the rotation (essentially speed)
    if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    178c:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    1790:	bb93      	cbnz	r3, 17f8 <rainbow_march_split(LEDStruct&)+0x78>
    1792:	f894 2235 	ldrb.w	r2, [r4, #565]	; 0x235
    1796:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    179a:	441a      	add	r2, r3
    179c:	b2d2      	uxtb	r2, r2
    179e:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    
    // Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
    fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff); 
    17a2:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    17a6:	2125      	movs	r1, #37	; 0x25
    17a8:	4620      	mov	r0, r4
    17aa:	f000 fbbf 	bl	1f2c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    17ae:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    17b2:	4622      	mov	r2, r4
    17b4:	4621      	mov	r1, r4
    17b6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17b8:	7818      	ldrb	r0, [r3, #0]
    17ba:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    17be:	7858      	ldrb	r0, [r3, #1]
    17c0:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    17c4:	7898      	ldrb	r0, [r3, #2]
    17c6:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    17ca:	3303      	adds	r3, #3
  
    // Copy those to the other half
    for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    17cc:	42ab      	cmp	r3, r5
    17ce:	f1a1 0103 	sub.w	r1, r1, #3
    17d2:	d1f1      	bne.n	17b8 <rainbow_march_split(LEDStruct&)+0x38>
    17d4:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    17d8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17da:	7819      	ldrb	r1, [r3, #0]
    17dc:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    17e0:	7859      	ldrb	r1, [r3, #1]
    17e2:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    17e6:	7899      	ldrb	r1, [r3, #2]
    17e8:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    17ec:	3303      	adds	r3, #3
    17ee:	4283      	cmp	r3, r0
    17f0:	f1a2 0203 	sub.w	r2, r2, #3
    17f4:	d1f1      	bne.n	17da <rainbow_march_split(LEDStruct&)+0x5a>

    // Duplicate on the other side of the strip
    strip_sync(leds);
}
    17f6:	bd70      	pop	{r4, r5, r6, pc}
void rainbow_march_split(LEDStruct& leds){
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH_SPLIT); }
  
    // Increase the start index by the rotation (essentially speed)
    if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    17f8:	f894 3235 	ldrb.w	r3, [r4, #565]	; 0x235
    17fc:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    1800:	1a9a      	subs	r2, r3, r2
    1802:	b2d2      	uxtb	r2, r2
    1804:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    1808:	e7cb      	b.n	17a2 <rainbow_march_split(LEDStruct&)+0x22>
    180a:	4d13      	ldr	r5, [pc, #76]	; (1858 <rainbow_march_split(LEDStruct&)+0xd8>)
    180c:	882b      	ldrh	r3, [r5, #0]
    180e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1812:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1816:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    181a:	3319      	adds	r3, #25
    181c:	b29b      	uxth	r3, r3
    181e:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    1822:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    1826:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    182a:	3619      	adds	r6, #25
    182c:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    182e:	eb06 2216 	add.w	r2, r6, r6, lsr #8
    1832:	eb03 2313 	add.w	r3, r3, r3, lsr #8



void rainbow_march_split(LEDStruct& leds){
    // If not yet iniatilized, call init function with random variables.
    if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH_SPLIT); }
    1836:	b2d2      	uxtb	r2, r2
    1838:	b2db      	uxtb	r3, r3
    183a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    183e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1842:	1211      	asrs	r1, r2, #8
    1844:	121a      	asrs	r2, r3, #8
    1846:	3201      	adds	r2, #1
    1848:	1c4b      	adds	r3, r1, #1
    184a:	b2db      	uxtb	r3, r3
    184c:	b2d2      	uxtb	r2, r2
    184e:	2102      	movs	r1, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1850:	802e      	strh	r6, [r5, #0]
    1852:	f7ff feff 	bl	1654 <rainbow_init(LEDStruct&, Mode, unsigned char, unsigned char)>
    1856:	e799      	b.n	178c <rainbow_march_split(LEDStruct&)+0xc>
    1858:	1fff8724 	.word	0x1fff8724

0000185c <switch_mode(LEDStruct&)>:
#ifndef SWITCH_MODE_H
#define SWITCH_MODE_H

void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {
    185c:	f890 322a 	ldrb.w	r3, [r0, #554]	; 0x22a
    1860:	2b01      	cmp	r3, #1
    1862:	d007      	beq.n	1874 <switch_mode(LEDStruct&)+0x18>
    1864:	d304      	bcc.n	1870 <switch_mode(LEDStruct&)+0x14>
    1866:	2b02      	cmp	r3, #2
    1868:	d101      	bne.n	186e <switch_mode(LEDStruct&)+0x12>
		case RAINBOW_MARCH:
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			rainbow_march_split(leds);
    186a:	f7ff bf89 	b.w	1780 <rainbow_march_split(LEDStruct&)>
    186e:	4770      	bx	lr
#define SWITCH_MODE_H

void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {
		case JUGGLE:
			juggle(leds);
    1870:	f7ff bda2 	b.w	13b8 <juggle(LEDStruct&)>
			break;

		case RAINBOW_MARCH:
			rainbow_march(leds);
    1874:	f7ff bf1a 	b.w	16ac <rainbow_march(LEDStruct&)>

00001878 <setup>:



// ================ SETUP ================

void setup() {
    1878:	b570      	push	{r4, r5, r6, lr}
    187a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    187e:	b082      	sub	sp, #8
    1880:	4863      	ldr	r0, [pc, #396]	; (1a10 <setup+0x198>)
    1882:	f000 ffc5 	bl	2810 <VisualMicroDebug::init(unsigned long)>
    1886:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    188a:	4861      	ldr	r0, [pc, #388]	; (1a10 <setup+0x198>)
    188c:	f000 ffbc 	bl	2808 <VisualMicroDebug::begin(unsigned long)>
    1890:	2101      	movs	r1, #1
    1892:	485f      	ldr	r0, [pc, #380]	; (1a10 <setup+0x198>)
    1894:	f000 ff92 	bl	27bc <VisualMicroDebug::outPacketStart(bool)>
    1898:	b150      	cbz	r0, 18b0 <setup+0x38>
    189a:	2110      	movs	r1, #16
    189c:	485d      	ldr	r0, [pc, #372]	; (1a14 <setup+0x19c>)
    189e:	f002 fae9 	bl	3e74 <usb_serial_write>
    18a2:	485b      	ldr	r0, [pc, #364]	; (1a10 <setup+0x198>)
    18a4:	210a      	movs	r1, #10
    18a6:	f000 ff77 	bl	2798 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    18aa:	4859      	ldr	r0, [pc, #356]	; (1a10 <setup+0x198>)
    18ac:	f000 ffaa 	bl	2804 <VisualMicroDebug::outPacketEnd()>
    18b0:	2201      	movs	r2, #1
    18b2:	2100      	movs	r1, #0
    18b4:	4856      	ldr	r0, [pc, #344]	; (1a10 <setup+0x198>)
    18b6:	f001 f857 	bl	2968 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(1500); Serial.println("DEBUG ON"); }
    18ba:	f240 51dc 	movw	r1, #1500	; 0x5dc
    18be:	4856      	ldr	r0, [pc, #344]	; (1a18 <setup+0x1a0>)
    18c0:	f002 fd34 	bl	432c <Stream::setTimeout(unsigned long)>
    18c4:	2108      	movs	r1, #8
    18c6:	4855      	ldr	r0, [pc, #340]	; (1a1c <setup+0x1a4>)
    18c8:	f002 fad4 	bl	3e74 <usb_serial_write>
    18cc:	4852      	ldr	r0, [pc, #328]	; (1a18 <setup+0x1a0>)
    18ce:	f002 fcd5 	bl	427c <Print::println()>

	delay(1000);
    18d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    18d6:	f001 fab5 	bl	2e44 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    18da:	4851      	ldr	r0, [pc, #324]	; (1a20 <setup+0x1a8>)
    18dc:	6803      	ldr	r3, [r0, #0]
    18de:	f013 0401 	ands.w	r4, r3, #1
    18e2:	d071      	beq.n	19c8 <setup+0x150>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    18e4:	4c4f      	ldr	r4, [pc, #316]	; (1a24 <setup+0x1ac>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    18e6:	4950      	ldr	r1, [pc, #320]	; (1a28 <setup+0x1b0>)
    18e8:	4850      	ldr	r0, [pc, #320]	; (1a2c <setup+0x1b4>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    18ea:	4d51      	ldr	r5, [pc, #324]	; (1a30 <setup+0x1b8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    18ec:	26ff      	movs	r6, #255	; 0xff
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    18ee:	2300      	movs	r3, #0
    18f0:	2296      	movs	r2, #150	; 0x96
    18f2:	f000 fc93 	bl	221c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18f6:	22b0      	movs	r2, #176	; 0xb0
    18f8:	23f0      	movs	r3, #240	; 0xf0

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(MAX_BRIGHT);
	FastLED.setCorrection(TypicalLEDStrip);
    18fa:	4620      	mov	r0, r4
    18fc:	a901      	add	r1, sp, #4
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    18fe:	7026      	strb	r6, [r4, #0]
    1900:	f88d 2005 	strb.w	r2, [sp, #5]
    1904:	f88d 3006 	strb.w	r3, [sp, #6]
    1908:	f88d 6004 	strb.w	r6, [sp, #4]
    190c:	f000 fcc6 	bl	229c <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    1910:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1914:	2005      	movs	r0, #5
    1916:	f000 ff33 	bl	2780 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    191a:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    191e:	2002      	movs	r0, #2
    1920:	802b      	strh	r3, [r5, #0]
    1922:	f001 f961 	bl	2be8 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    1926:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    1928:	2100      	movs	r1, #0
    192a:	4403      	add	r3, r0
    192c:	4620      	mov	r0, r4
    192e:	802b      	strh	r3, [r5, #0]
    1930:	f000 fdc6 	bl	24c0 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    1934:	7821      	ldrb	r1, [r4, #0]
    1936:	4620      	mov	r0, r4
    1938:	f000 fce8 	bl	230c <CFastLED::show(unsigned char)>
    193c:	4620      	mov	r0, r4
    193e:	2132      	movs	r1, #50	; 0x32
    1940:	f000 fd46 	bl	23d0 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1944:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    1946:	aa01      	add	r2, sp, #4
    1948:	2196      	movs	r1, #150	; 0x96
    194a:	4837      	ldr	r0, [pc, #220]	; (1a28 <setup+0x1b0>)
    194c:	f88d 6004 	strb.w	r6, [sp, #4]
    1950:	f88d 5005 	strb.w	r5, [sp, #5]
    1954:	f88d 5006 	strb.w	r5, [sp, #6]
    1958:	f000 fad8 	bl	1f0c <fill_solid(CRGB*, int, CRGB const&)>
    195c:	4620      	mov	r0, r4
    195e:	21fa      	movs	r1, #250	; 0xfa
    1960:	f000 fd36 	bl	23d0 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    1964:	aa01      	add	r2, sp, #4
    1966:	2196      	movs	r1, #150	; 0x96
    1968:	482f      	ldr	r0, [pc, #188]	; (1a28 <setup+0x1b0>)
    196a:	f88d 6006 	strb.w	r6, [sp, #6]
    196e:	f88d 5004 	strb.w	r5, [sp, #4]
    1972:	f88d 5005 	strb.w	r5, [sp, #5]
    1976:	f000 fac9 	bl	1f0c <fill_solid(CRGB*, int, CRGB const&)>
    197a:	4620      	mov	r0, r4
    197c:	21fa      	movs	r1, #250	; 0xfa
    197e:	f000 fd27 	bl	23d0 <CFastLED::delay(unsigned long)>
    1982:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    1984:	aa01      	add	r2, sp, #4
    1986:	2196      	movs	r1, #150	; 0x96
    1988:	4827      	ldr	r0, [pc, #156]	; (1a28 <setup+0x1b0>)
    198a:	f88d 3005 	strb.w	r3, [sp, #5]
    198e:	f88d 5004 	strb.w	r5, [sp, #4]
    1992:	f88d 5006 	strb.w	r5, [sp, #6]
    1996:	f000 fab9 	bl	1f0c <fill_solid(CRGB*, int, CRGB const&)>
    199a:	4620      	mov	r0, r4
    199c:	21fa      	movs	r1, #250	; 0xfa
    199e:	f000 fd17 	bl	23d0 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    19a2:	4629      	mov	r1, r5
    19a4:	4620      	mov	r0, r4
    19a6:	f000 fd8b 	bl	24c0 <CFastLED::clear(bool)>
    19aa:	4620      	mov	r0, r4
    19ac:	21fa      	movs	r1, #250	; 0xfa
    19ae:	f000 fd0f 	bl	23d0 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    19b2:	f7ff fabb 	bl	f2c <initialize()>
    19b6:	210e      	movs	r1, #14
    19b8:	481e      	ldr	r0, [pc, #120]	; (1a34 <setup+0x1bc>)
    19ba:	f002 fa5b 	bl	3e74 <usb_serial_write>
    19be:	4816      	ldr	r0, [pc, #88]	; (1a18 <setup+0x1a0>)
    19c0:	f002 fc5c 	bl	427c <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    19c4:	b002      	add	sp, #8
    19c6:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    19c8:	f001 f9bc 	bl	2d44 <__cxa_guard_acquire>
    19cc:	2800      	cmp	r0, #0
    19ce:	d089      	beq.n	18e4 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    19d0:	4919      	ldr	r1, [pc, #100]	; (1a38 <setup+0x1c0>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    19d2:	4b16      	ldr	r3, [pc, #88]	; (1a2c <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    19d4:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    19d6:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19d8:	22ff      	movs	r2, #255	; 0xff
    19da:	2501      	movs	r5, #1
    19dc:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    19de:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    19e0:	749d      	strb	r5, [r3, #18]
    19e2:	731a      	strb	r2, [r3, #12]
    19e4:	735a      	strb	r2, [r3, #13]
    19e6:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19e8:	73da      	strb	r2, [r3, #15]
    19ea:	741a      	strb	r2, [r3, #16]
    19ec:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    19ee:	b160      	cbz	r0, 1a0a <setup+0x192>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    19f0:	4a12      	ldr	r2, [pc, #72]	; (1a3c <setup+0x1c4>)
    19f2:	6811      	ldr	r1, [r2, #0]
    19f4:	b101      	cbz	r1, 19f8 <setup+0x180>
    19f6:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    19f8:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    19fa:	2200      	movs	r2, #0
	inline void writeLed(uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {
		mSPI.writeByte(0xFF); mSPI.writeByte(b0); mSPI.writeByte(b1); mSPI.writeByte(b2);
	}

public:
	APA102Controller() {}
    19fc:	4910      	ldr	r1, [pc, #64]	; (1a40 <setup+0x1c8>)
    19fe:	4808      	ldr	r0, [pc, #32]	; (1a20 <setup+0x1a8>)
    1a00:	619a      	str	r2, [r3, #24]
    1a02:	6019      	str	r1, [r3, #0]
    1a04:	f001 f9a4 	bl	2d50 <__cxa_guard_release>
    1a08:	e76c      	b.n	18e4 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    1a0a:	600b      	str	r3, [r1, #0]
    1a0c:	e7f0      	b.n	19f0 <setup+0x178>
    1a0e:	bf00      	nop
    1a10:	1fff9300 	.word	0x1fff9300
    1a14:	00005a58 	.word	0x00005a58
    1a18:	1fff872c 	.word	0x1fff872c
    1a1c:	00005a6c 	.word	0x00005a6c
    1a20:	1fff8c2c 	.word	0x1fff8c2c
    1a24:	1fff92d8 	.word	0x1fff92d8
    1a28:	1fff8ed4 	.word	0x1fff8ed4
    1a2c:	1fff8c30 	.word	0x1fff8c30
    1a30:	1fff8724 	.word	0x1fff8724
    1a34:	00005a78 	.word	0x00005a78
    1a38:	1fff92e8 	.word	0x1fff92e8
    1a3c:	1fff92f8 	.word	0x1fff92f8
    1a40:	00004994 	.word	0x00004994

00001a44 <loop>:



// ================ LOOP ================

void loop() {
    1a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a48:	4c7b      	ldr	r4, [pc, #492]	; (1c38 <loop+0x1f4>)
	// Add entropy to randomness
	random16_add_entropy(random());

	// Change patterns
	EVERY_N_SECONDS(20){
    1a4a:	4e7c      	ldr	r6, [pc, #496]	; (1c3c <loop+0x1f8>)



// ================ LOOP ================

void loop() {
    1a4c:	b09d      	sub	sp, #116	; 0x74
	// Add entropy to randomness
	random16_add_entropy(random());
    1a4e:	f002 ff5f 	bl	4910 <random>
    1a52:	8823      	ldrh	r3, [r4, #0]

	// Change patterns
	EVERY_N_SECONDS(20){
    1a54:	6832      	ldr	r2, [r6, #0]
    1a56:	4418      	add	r0, r3
    1a58:	07d7      	lsls	r7, r2, #31
    1a5a:	8020      	strh	r0, [r4, #0]
    1a5c:	f140 81ac 	bpl.w	1db8 <loop+0x374>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a60:	4f77      	ldr	r7, [pc, #476]	; (1c40 <loop+0x1fc>)
    1a62:	4d78      	ldr	r5, [pc, #480]	; (1c44 <loop+0x200>)
    1a64:	683b      	ldr	r3, [r7, #0]
    1a66:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    1a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    1a6a:	4877      	ldr	r0, [pc, #476]	; (1c48 <loop+0x204>)
    1a6c:	882b      	ldrh	r3, [r5, #0]
    1a6e:	8869      	ldrh	r1, [r5, #2]
    1a70:	fba0 0202 	umull	r0, r2, r0, r2
    1a74:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    1a78:	b29b      	uxth	r3, r3
    1a7a:	4299      	cmp	r1, r3
    1a7c:	d809      	bhi.n	1a92 <loop+0x4e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a7e:	683b      	ldr	r3, [r7, #0]
    1a80:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    1a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a84:	4a70      	ldr	r2, [pc, #448]	; (1c48 <loop+0x204>)
    1a86:	fba2 2303 	umull	r2, r3, r2, r3
    1a8a:	099b      	lsrs	r3, r3, #6
    1a8c:	802b      	strh	r3, [r5, #0]
		change_pattern();
    1a8e:	f7ff fb1b 	bl	10c8 <change_pattern()>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    1a92:	4e6e      	ldr	r6, [pc, #440]	; (1c4c <loop+0x208>)
    1a94:	6833      	ldr	r3, [r6, #0]
    1a96:	07dd      	lsls	r5, r3, #31
    1a98:	f140 81a4 	bpl.w	1de4 <loop+0x3a0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a9c:	683b      	ldr	r3, [r7, #0]
    1a9e:	4d6c      	ldr	r5, [pc, #432]	; (1c50 <loop+0x20c>)
    1aa0:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    1aa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1aa4:	4868      	ldr	r0, [pc, #416]	; (1c48 <loop+0x204>)
    1aa6:	882b      	ldrh	r3, [r5, #0]
    1aa8:	8869      	ldrh	r1, [r5, #2]
    1aaa:	fba0 0202 	umull	r0, r2, r0, r2
    1aae:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    1ab2:	b29b      	uxth	r3, r3
    1ab4:	4299      	cmp	r1, r3
    1ab6:	f240 80ed 	bls.w	1c94 <loop+0x250>
    1aba:	4b66      	ldr	r3, [pc, #408]	; (1c54 <loop+0x210>)
    1abc:	9306      	str	r3, [sp, #24]
			curr_leds.target_palette = palettes[curr_leds.palette_index];
		}
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    1abe:	4d66      	ldr	r5, [pc, #408]	; (1c58 <loop+0x214>)
    1ac0:	682b      	ldr	r3, [r5, #0]
    1ac2:	07d8      	lsls	r0, r3, #31
    1ac4:	f140 8171 	bpl.w	1daa <loop+0x366>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ac8:	683b      	ldr	r3, [r7, #0]
    1aca:	4c64      	ldr	r4, [pc, #400]	; (1c5c <loop+0x218>)
    1acc:	9312      	str	r3, [sp, #72]	; 0x48
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    1ace:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1ad4:	1a5b      	subs	r3, r3, r1
    1ad6:	4293      	cmp	r3, r2
    1ad8:	d309      	bcc.n	1aee <loop+0xaa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ada:	683b      	ldr	r3, [r7, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    1adc:	4960      	ldr	r1, [pc, #384]	; (1c60 <loop+0x21c>)
    1ade:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    1ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1ae2:	6023      	str	r3, [r4, #0]
    1ae4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    1ae8:	2218      	movs	r2, #24
    1aea:	f000 fb6f 	bl	21cc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    1aee:	4e5d      	ldr	r6, [pc, #372]	; (1c64 <loop+0x220>)
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    1af0:	495d      	ldr	r1, [pc, #372]	; (1c68 <loop+0x224>)
    1af2:	4d5e      	ldr	r5, [pc, #376]	; (1c6c <loop+0x228>)

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    1af4:	6833      	ldr	r3, [r6, #0]
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    1af6:	9a06      	ldr	r2, [sp, #24]
	next_delay = next_leds.delay_time;
    1af8:	f891 11c3 	ldrb.w	r1, [r1, #451]	; 0x1c3
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    1afc:	f8df 8190 	ldr.w	r8, [pc, #400]	; 1c90 <loop+0x24c>
    1b00:	f892 21c3 	ldrb.w	r2, [r2, #451]	; 0x1c3
	next_delay = next_leds.delay_time;
    1b04:	7029      	strb	r1, [r5, #0]

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    1b06:	07d9      	lsls	r1, r3, #31
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    1b08:	f888 2000 	strb.w	r2, [r8]
	next_delay = next_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    1b0c:	d555      	bpl.n	1bba <loop+0x176>
    1b0e:	4c58      	ldr	r4, [pc, #352]	; (1c70 <loop+0x22c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b10:	683b      	ldr	r3, [r7, #0]
    1b12:	9315      	str	r3, [sp, #84]	; 0x54
    1b14:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    1b18:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b1a:	1a1b      	subs	r3, r3, r0
    1b1c:	4299      	cmp	r1, r3
    1b1e:	d95d      	bls.n	1bdc <loop+0x198>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next LEDs if in transition
	EVERY_N_MILLIS_I(next_timer, next_delay){
    1b20:	4e54      	ldr	r6, [pc, #336]	; (1c74 <loop+0x230>)
    1b22:	6833      	ldr	r3, [r6, #0]
    1b24:	07da      	lsls	r2, r3, #31
    1b26:	d565      	bpl.n	1bf4 <loop+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b28:	683b      	ldr	r3, [r7, #0]
    1b2a:	4c53      	ldr	r4, [pc, #332]	; (1c78 <loop+0x234>)
    1b2c:	9318      	str	r3, [sp, #96]	; 0x60
    1b2e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1b32:	9b18      	ldr	r3, [sp, #96]	; 0x60
		if(in_transition){
    1b34:	4e51      	ldr	r6, [pc, #324]	; (1c7c <loop+0x238>)
    1b36:	1a5b      	subs	r3, r3, r1
    1b38:	4293      	cmp	r3, r2
    1b3a:	d369      	bcc.n	1c10 <loop+0x1cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b3c:	683b      	ldr	r3, [r7, #0]
    1b3e:	9317      	str	r3, [sp, #92]	; 0x5c
    1b40:	7833      	ldrb	r3, [r6, #0]
	return ret;
    1b42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    1b44:	6022      	str	r2, [r4, #0]
    1b46:	4a4c      	ldr	r2, [pc, #304]	; (1c78 <loop+0x234>)
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d15c      	bne.n	1c06 <loop+0x1c2>
    1b4c:	4b41      	ldr	r3, [pc, #260]	; (1c54 <loop+0x210>)
    1b4e:	4a4c      	ldr	r2, [pc, #304]	; (1c80 <loop+0x23c>)
    1b50:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b54:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    1b56:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    1b58:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b5a:	7014      	strb	r4, [r2, #0]
    1b5c:	3303      	adds	r3, #3
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    1b5e:	429d      	cmp	r5, r3
        g = rhs.g;
    1b60:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    1b62:	7091      	strb	r1, [r2, #2]
    1b64:	f102 0203 	add.w	r2, r2, #3
    1b68:	d1f4      	bne.n	1b54 <loop+0x110>
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    1b6a:	4d46      	ldr	r5, [pc, #280]	; (1c84 <loop+0x240>)
    1b6c:	682b      	ldr	r3, [r5, #0]
    1b6e:	07db      	lsls	r3, r3, #31
    1b70:	d557      	bpl.n	1c22 <loop+0x1de>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b72:	683b      	ldr	r3, [r7, #0]
    1b74:	4c44      	ldr	r4, [pc, #272]	; (1c88 <loop+0x244>)
    1b76:	931b      	str	r3, [sp, #108]	; 0x6c
	return ret;
    1b78:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    1b7a:	4833      	ldr	r0, [pc, #204]	; (1c48 <loop+0x204>)
    1b7c:	8823      	ldrh	r3, [r4, #0]
    1b7e:	8861      	ldrh	r1, [r4, #2]
    1b80:	fba0 0202 	umull	r0, r2, r0, r2
    1b84:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    1b88:	b29b      	uxth	r3, r3
    1b8a:	4299      	cmp	r1, r3
    1b8c:	d80e      	bhi.n	1bac <loop+0x168>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b8e:	683b      	ldr	r3, [r7, #0]
    1b90:	931a      	str	r3, [sp, #104]	; 0x68
	return ret;
    1b92:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    1b94:	4a2c      	ldr	r2, [pc, #176]	; (1c48 <loop+0x204>)
			LEDDebug(curr_leds);
    1b96:	482f      	ldr	r0, [pc, #188]	; (1c54 <loop+0x210>)
    1b98:	fba2 2303 	umull	r2, r3, r2, r3
    1b9c:	099b      	lsrs	r3, r3, #6
    1b9e:	8023      	strh	r3, [r4, #0]
    1ba0:	f7ff f86c 	bl	c7c <LEDDebug(LEDStruct&)>
			if (in_transition) {
    1ba4:	7833      	ldrb	r3, [r6, #0]
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	f040 8125 	bne.w	1df6 <loop+0x3b2>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    1bac:	4837      	ldr	r0, [pc, #220]	; (1c8c <loop+0x248>)
    1bae:	7801      	ldrb	r1, [r0, #0]
    1bb0:	f000 fbac 	bl	230c <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    1bb4:	b01d      	add	sp, #116	; 0x74
    1bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    1bba:	4630      	mov	r0, r6
    1bbc:	f001 f8c2 	bl	2d44 <__cxa_guard_acquire>
    1bc0:	2800      	cmp	r0, #0
    1bc2:	f040 8127 	bne.w	1e14 <loop+0x3d0>
    1bc6:	4c2a      	ldr	r4, [pc, #168]	; (1c70 <loop+0x22c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bc8:	683b      	ldr	r3, [r7, #0]
    1bca:	9315      	str	r3, [sp, #84]	; 0x54
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    1bcc:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1bd2:	1a5b      	subs	r3, r3, r1
    1bd4:	4293      	cmp	r3, r2
    1bd6:	d3a3      	bcc.n	1b20 <loop+0xdc>
    1bd8:	f898 2000 	ldrb.w	r2, [r8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bdc:	683b      	ldr	r3, [r7, #0]
    1bde:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    1be0:	9b14      	ldr	r3, [sp, #80]	; 0x50
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next LEDs if in transition
	EVERY_N_MILLIS_I(next_timer, next_delay){
    1be2:	4e24      	ldr	r6, [pc, #144]	; (1c74 <loop+0x230>)
    1be4:	6062      	str	r2, [r4, #4]
    1be6:	6023      	str	r3, [r4, #0]
	next_delay = next_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    1be8:	481a      	ldr	r0, [pc, #104]	; (1c54 <loop+0x210>)
    1bea:	f7ff fe37 	bl	185c <switch_mode(LEDStruct&)>
	}

	// Apply effect to next LEDs if in transition
	EVERY_N_MILLIS_I(next_timer, next_delay){
    1bee:	6833      	ldr	r3, [r6, #0]
    1bf0:	07da      	lsls	r2, r3, #31
    1bf2:	d499      	bmi.n	1b28 <loop+0xe4>
    1bf4:	4630      	mov	r0, r6
    1bf6:	f001 f8a5 	bl	2d44 <__cxa_guard_acquire>
    1bfa:	2800      	cmp	r0, #0
    1bfc:	f040 8116 	bne.w	1e2c <loop+0x3e8>
    1c00:	4c1d      	ldr	r4, [pc, #116]	; (1c78 <loop+0x234>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c02:	683b      	ldr	r3, [r7, #0]
    1c04:	e792      	b.n	1b2c <loop+0xe8>
    1c06:	782b      	ldrb	r3, [r5, #0]
		if(in_transition){
			next_timer.setPeriod(next_delay);
			switch_mode(next_leds);
    1c08:	4817      	ldr	r0, [pc, #92]	; (1c68 <loop+0x224>)
    1c0a:	6053      	str	r3, [r2, #4]
    1c0c:	f7ff fe26 	bl	185c <switch_mode(LEDStruct&)>
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
    1c10:	7833      	ldrb	r3, [r6, #0]
    1c12:	2b00      	cmp	r3, #0
    1c14:	d09a      	beq.n	1b4c <loop+0x108>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    1c16:	4d1b      	ldr	r5, [pc, #108]	; (1c84 <loop+0x240>)
		case BLENDING:
			blending();
			break;

		default: 
			blending();
    1c18:	f7ff fa8c 	bl	1134 <blending()>
    1c1c:	682b      	ldr	r3, [r5, #0]
    1c1e:	07db      	lsls	r3, r3, #31
    1c20:	d4a7      	bmi.n	1b72 <loop+0x12e>
    1c22:	4628      	mov	r0, r5
    1c24:	f001 f88e 	bl	2d44 <__cxa_guard_acquire>
    1c28:	2800      	cmp	r0, #0
    1c2a:	f040 8119 	bne.w	1e60 <loop+0x41c>
    1c2e:	4c16      	ldr	r4, [pc, #88]	; (1c88 <loop+0x244>)
    1c30:	683b      	ldr	r3, [r7, #0]
    1c32:	931b      	str	r3, [sp, #108]	; 0x6c
    1c34:	e7a0      	b.n	1b78 <loop+0x134>
    1c36:	bf00      	nop
    1c38:	1fff8724 	.word	0x1fff8724
    1c3c:	1fff8ebc 	.word	0x1fff8ebc
    1c40:	1fff9350 	.word	0x1fff9350
    1c44:	1fff8eac 	.word	0x1fff8eac
    1c48:	10624dd3 	.word	0x10624dd3
    1c4c:	1fff8ec0 	.word	0x1fff8ec0
    1c50:	1fff8c50 	.word	0x1fff8c50
    1c54:	1fff90a0 	.word	0x1fff90a0
    1c58:	1fff8ec4 	.word	0x1fff8ec4
    1c5c:	1fff8eb0 	.word	0x1fff8eb0
    1c60:	1fff9294 	.word	0x1fff9294
    1c64:	1fff909c 	.word	0x1fff909c
    1c68:	1fff8c54 	.word	0x1fff8c54
    1c6c:	1fff8ecc 	.word	0x1fff8ecc
    1c70:	1fff8e94 	.word	0x1fff8e94
    1c74:	1fff9098 	.word	0x1fff9098
    1c78:	1fff8e8c 	.word	0x1fff8e8c
    1c7c:	1fff8e9c 	.word	0x1fff8e9c
    1c80:	1fff8ed4 	.word	0x1fff8ed4
    1c84:	1fff8ec8 	.word	0x1fff8ec8
    1c88:	1fff8eb8 	.word	0x1fff8eb8
    1c8c:	1fff92d8 	.word	0x1fff92d8
    1c90:	1fff8ecd 	.word	0x1fff8ecd
    1c94:	683b      	ldr	r3, [r7, #0]
    1c96:	930e      	str	r3, [sp, #56]	; 0x38
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    1c98:	4a79      	ldr	r2, [pc, #484]	; (1e80 <loop+0x43c>)
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (curr_leds.use_palette) {
    1c9a:	497a      	ldr	r1, [pc, #488]	; (1e84 <loop+0x440>)
	return ret;
    1c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1c9e:	9106      	str	r1, [sp, #24]
    1ca0:	fba2 2303 	umull	r2, r3, r2, r3
    1ca4:	f891 2226 	ldrb.w	r2, [r1, #550]	; 0x226
    1ca8:	099b      	lsrs	r3, r3, #6
    1caa:	802b      	strh	r3, [r5, #0]
    1cac:	2a00      	cmp	r2, #0
    1cae:	f43f af06 	beq.w	1abe <loop+0x7a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1cb2:	8823      	ldrh	r3, [r4, #0]
			curr_leds.palette_index = random8(palette_count);
    1cb4:	4a74      	ldr	r2, [pc, #464]	; (1e88 <loop+0x444>)
			curr_leds.target_palette = palettes[curr_leds.palette_index];
    1cb6:	4875      	ldr	r0, [pc, #468]	; (1e8c <loop+0x448>)
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (curr_leds.use_palette) {
			curr_leds.palette_index = random8(palette_count);
    1cb8:	7812      	ldrb	r2, [r2, #0]
    1cba:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    1cbe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1cc2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1cc6:	3319      	adds	r3, #25
    1cc8:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1cca:	eb03 2113 	add.w	r1, r3, r3, lsr #8
    1cce:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1cd0:	fb11 f202 	smulbb	r2, r1, r2
    1cd4:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1cd6:	8023      	strh	r3, [r4, #0]
    1cd8:	4b6a      	ldr	r3, [pc, #424]	; (1e84 <loop+0x440>)
			curr_leds.target_palette = palettes[curr_leds.palette_index];
    1cda:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (curr_leds.use_palette) {
			curr_leds.palette_index = random8(palette_count);
    1cde:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    1ce2:	f04f 0800 	mov.w	r8, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    1ce6:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
            count++;;
        } while ( u.index != 255);
    1cea:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1cec:	f108 0801 	add.w	r8, r8, #1
        } while ( u.index != 255);
    1cf0:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1cf2:	fa1f f888 	uxth.w	r8, r8
        } while ( u.index != 255);
    1cf6:	d1f6      	bne.n	1ce6 <loop+0x2a2>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1cf8:	f8d9 3000 	ldr.w	r3, [r9]
    1cfc:	f8cd 8020 	str.w	r8, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    1d00:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1d04:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1d08:	f3c3 2b07 	ubfx	fp, r3, #8, #8

        int indexstart = 0;
    1d0c:	2400      	movs	r4, #0
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1d0e:	0e1b      	lsrs	r3, r3, #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1d10:	9207      	str	r2, [sp, #28]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1d12:	9304      	str	r3, [sp, #16]
    1d14:	46c8      	mov	r8, r9
    1d16:	46d6      	mov	lr, sl
    1d18:	4625      	mov	r5, r4
    1d1a:	9709      	str	r7, [sp, #36]	; 0x24
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1d1c:	f858 3f04 	ldr.w	r3, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1d20:	485b      	ldr	r0, [pc, #364]	; (1e90 <loop+0x44c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1d22:	f3c3 6407 	ubfx	r4, r3, #24, #8
            istart8 = indexstart / 16;
    1d26:	ea4f 1c25 	mov.w	ip, r5, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1d2a:	b2e1      	uxtb	r1, r4
    1d2c:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    1d2e:	fa5f f18c 	uxtb.w	r1, ip
    1d32:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    1d34:	9908      	ldr	r1, [sp, #32]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1d36:	f3c3 2707 	ubfx	r7, r3, #8, #8
    1d3a:	f3c3 4607 	ubfx	r6, r3, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    1d3e:	b2dd      	uxtb	r5, r3
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1d40:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1d42:	aa1b      	add	r2, sp, #108	; 0x6c
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    1d44:	ea4f 1315 	mov.w	r3, r5, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1d48:	fa5f fa87 	uxtb.w	sl, r7
    1d4c:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1d50:	d80c      	bhi.n	1d6c <loop+0x328>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1d52:	9907      	ldr	r1, [sp, #28]
    1d54:	458c      	cmp	ip, r1
    1d56:	dc07      	bgt.n	1d68 <loop+0x324>
    1d58:	290f      	cmp	r1, #15
    1d5a:	d005      	beq.n	1d68 <loop+0x324>
                    istart8 = lastSlotUsed + 1;
    1d5c:	3101      	adds	r1, #1
    1d5e:	b2c9      	uxtb	r1, r1
    1d60:	428b      	cmp	r3, r1
    1d62:	9103      	str	r1, [sp, #12]
    1d64:	bf38      	it	cc
    1d66:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    1d68:	b259      	sxtb	r1, r3
    1d6a:	9107      	str	r1, [sp, #28]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1d6c:	a91a      	add	r1, sp, #104	; 0x68
    1d6e:	9100      	str	r1, [sp, #0]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1d70:	f88d e06d 	strb.w	lr, [sp, #109]	; 0x6d
    1d74:	9903      	ldr	r1, [sp, #12]
        b = rhs.b;
    1d76:	f89d e010 	ldrb.w	lr, [sp, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1d7a:	f88d b06c 	strb.w	fp, [sp, #108]	; 0x6c
        g = rhs.g;
        b = rhs.b;
    1d7e:	f88d e06e 	strb.w	lr, [sp, #110]	; 0x6e
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1d82:	f88d 7068 	strb.w	r7, [sp, #104]	; 0x68
        g = rhs.g;
    1d86:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
        b = rhs.b;
    1d8a:	f88d 406a 	strb.w	r4, [sp, #106]	; 0x6a
    1d8e:	f000 f8ed 	bl	1f6c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1d92:	9b05      	ldr	r3, [sp, #20]
    1d94:	9304      	str	r3, [sp, #16]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1d96:	2dff      	cmp	r5, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1d98:	46d3      	mov	fp, sl
        g = rhs.g;
    1d9a:	46ce      	mov	lr, r9
    1d9c:	d1be      	bne.n	1d1c <loop+0x2d8>
			curr_leds.target_palette = palettes[curr_leds.palette_index];
		}
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    1d9e:	4d3d      	ldr	r5, [pc, #244]	; (1e94 <loop+0x450>)
    1da0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    1da2:	682b      	ldr	r3, [r5, #0]
    1da4:	07d8      	lsls	r0, r3, #31
    1da6:	f53f ae8f 	bmi.w	1ac8 <loop+0x84>
    1daa:	4628      	mov	r0, r5
    1dac:	f000 ffca 	bl	2d44 <__cxa_guard_acquire>
    1db0:	bb28      	cbnz	r0, 1dfe <loop+0x3ba>
    1db2:	4c39      	ldr	r4, [pc, #228]	; (1e98 <loop+0x454>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1db4:	683b      	ldr	r3, [r7, #0]
    1db6:	e689      	b.n	1acc <loop+0x88>
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());

	// Change patterns
	EVERY_N_SECONDS(20){
    1db8:	4630      	mov	r0, r6
    1dba:	f000 ffc3 	bl	2d44 <__cxa_guard_acquire>
    1dbe:	4f37      	ldr	r7, [pc, #220]	; (1e9c <loop+0x458>)
    1dc0:	2800      	cmp	r0, #0
    1dc2:	f43f ae4e 	beq.w	1a62 <loop+0x1e>
    1dc6:	683b      	ldr	r3, [r7, #0]
    1dc8:	930a      	str	r3, [sp, #40]	; 0x28
    1dca:	4a2d      	ldr	r2, [pc, #180]	; (1e80 <loop+0x43c>)
	return ret;
    1dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dce:	4d34      	ldr	r5, [pc, #208]	; (1ea0 <loop+0x45c>)
    1dd0:	fba2 2303 	umull	r2, r3, r2, r3
    1dd4:	099b      	lsrs	r3, r3, #6
    1dd6:	2214      	movs	r2, #20
    1dd8:	4630      	mov	r0, r6
    1dda:	802b      	strh	r3, [r5, #0]
    1ddc:	806a      	strh	r2, [r5, #2]
    1dde:	f000 ffb7 	bl	2d50 <__cxa_guard_release>
    1de2:	e63f      	b.n	1a64 <loop+0x20>
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    1de4:	4630      	mov	r0, r6
    1de6:	f000 ffad 	bl	2d44 <__cxa_guard_acquire>
    1dea:	2800      	cmp	r0, #0
    1dec:	d129      	bne.n	1e42 <loop+0x3fe>
    1dee:	4d2d      	ldr	r5, [pc, #180]	; (1ea4 <loop+0x460>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1df0:	683b      	ldr	r3, [r7, #0]
    1df2:	930f      	str	r3, [sp, #60]	; 0x3c
    1df4:	e655      	b.n	1aa2 <loop+0x5e>

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    1df6:	482c      	ldr	r0, [pc, #176]	; (1ea8 <loop+0x464>)
    1df8:	f7fe ff40 	bl	c7c <LEDDebug(LEDStruct&)>
    1dfc:	e6d6      	b.n	1bac <loop+0x168>
    1dfe:	683b      	ldr	r3, [r7, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    1e00:	4c25      	ldr	r4, [pc, #148]	; (1e98 <loop+0x454>)
    1e02:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    1e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1e06:	6023      	str	r3, [r4, #0]
    1e08:	2332      	movs	r3, #50	; 0x32
			curr_leds.target_palette = palettes[curr_leds.palette_index];
		}
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    1e0a:	4628      	mov	r0, r5
    1e0c:	6063      	str	r3, [r4, #4]
    1e0e:	f000 ff9f 	bl	2d50 <__cxa_guard_release>
    1e12:	e7cf      	b.n	1db4 <loop+0x370>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e14:	683b      	ldr	r3, [r7, #0]
    1e16:	9313      	str	r3, [sp, #76]	; 0x4c
    1e18:	4c24      	ldr	r4, [pc, #144]	; (1eac <loop+0x468>)
	return ret;
    1e1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    1e1c:	f898 3000 	ldrb.w	r3, [r8]
    1e20:	6022      	str	r2, [r4, #0]
    1e22:	4630      	mov	r0, r6
    1e24:	6063      	str	r3, [r4, #4]
    1e26:	f000 ff93 	bl	2d50 <__cxa_guard_release>
    1e2a:	e6cd      	b.n	1bc8 <loop+0x184>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e2c:	683b      	ldr	r3, [r7, #0]
    1e2e:	9316      	str	r3, [sp, #88]	; 0x58
    1e30:	4c1f      	ldr	r4, [pc, #124]	; (1eb0 <loop+0x46c>)
	return ret;
    1e32:	9a16      	ldr	r2, [sp, #88]	; 0x58
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next LEDs if in transition
	EVERY_N_MILLIS_I(next_timer, next_delay){
    1e34:	782b      	ldrb	r3, [r5, #0]
    1e36:	6022      	str	r2, [r4, #0]
    1e38:	4630      	mov	r0, r6
    1e3a:	6063      	str	r3, [r4, #4]
    1e3c:	f000 ff88 	bl	2d50 <__cxa_guard_release>
    1e40:	e6df      	b.n	1c02 <loop+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e42:	683b      	ldr	r3, [r7, #0]
    1e44:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    1e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    1e48:	4a0d      	ldr	r2, [pc, #52]	; (1e80 <loop+0x43c>)
    1e4a:	4d16      	ldr	r5, [pc, #88]	; (1ea4 <loop+0x460>)
    1e4c:	fba2 2303 	umull	r2, r3, r2, r3
    1e50:	099b      	lsrs	r3, r3, #6
    1e52:	221e      	movs	r2, #30
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    1e54:	4630      	mov	r0, r6
    1e56:	802b      	strh	r3, [r5, #0]
    1e58:	806a      	strh	r2, [r5, #2]
    1e5a:	f000 ff79 	bl	2d50 <__cxa_guard_release>
    1e5e:	e7c7      	b.n	1df0 <loop+0x3ac>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e60:	683b      	ldr	r3, [r7, #0]
    1e62:	9319      	str	r3, [sp, #100]	; 0x64
	return ret;
    1e64:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1e66:	4a06      	ldr	r2, [pc, #24]	; (1e80 <loop+0x43c>)
    1e68:	4c12      	ldr	r4, [pc, #72]	; (1eb4 <loop+0x470>)
    1e6a:	fba2 2303 	umull	r2, r3, r2, r3
    1e6e:	099b      	lsrs	r3, r3, #6
    1e70:	2205      	movs	r2, #5
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    1e72:	4628      	mov	r0, r5
    1e74:	8023      	strh	r3, [r4, #0]
    1e76:	8062      	strh	r2, [r4, #2]
    1e78:	f000 ff6a 	bl	2d50 <__cxa_guard_release>
    1e7c:	e6d8      	b.n	1c30 <loop+0x1ec>
    1e7e:	bf00      	nop
    1e80:	10624dd3 	.word	0x10624dd3
    1e84:	1fff90a0 	.word	0x1fff90a0
    1e88:	1fff8723 	.word	0x1fff8723
    1e8c:	00005614 	.word	0x00005614
    1e90:	1fff9294 	.word	0x1fff9294
    1e94:	1fff8ec4 	.word	0x1fff8ec4
    1e98:	1fff8eb0 	.word	0x1fff8eb0
    1e9c:	1fff9350 	.word	0x1fff9350
    1ea0:	1fff8eac 	.word	0x1fff8eac
    1ea4:	1fff8c50 	.word	0x1fff8c50
    1ea8:	1fff8c54 	.word	0x1fff8c54
    1eac:	1fff8e94 	.word	0x1fff8e94
    1eb0:	1fff8e8c 	.word	0x1fff8e8c
    1eb4:	1fff8eb8 	.word	0x1fff8eb8

00001eb8 <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    1eb8:	b430      	push	{r4, r5}
#ifndef LED_STRUCT_H
#define LED_STRUCT_H

//======== LED structure =========

struct LEDStruct {
    1eba:	4a12      	ldr	r2, [pc, #72]	; (1f04 <_GLOBAL__sub_I_ib_jul01_gp+0x4c>)
    1ebc:	4b12      	ldr	r3, [pc, #72]	; (1f08 <_GLOBAL__sub_I_ib_jul01_gp+0x50>)
    1ebe:	25ff      	movs	r5, #255	; 0xff
    1ec0:	240a      	movs	r4, #10
    1ec2:	2101      	movs	r1, #1
    1ec4:	2000      	movs	r0, #0
    1ec6:	f882 51c2 	strb.w	r5, [r2, #450]	; 0x1c2
    1eca:	f883 51c2 	strb.w	r5, [r3, #450]	; 0x1c2
    1ece:	f882 41c3 	strb.w	r4, [r2, #451]	; 0x1c3
    1ed2:	f883 41c3 	strb.w	r4, [r3, #451]	; 0x1c3
    1ed6:	f882 1225 	strb.w	r1, [r2, #549]	; 0x225
    1eda:	f882 1226 	strb.w	r1, [r2, #550]	; 0x226
    1ede:	f882 1228 	strb.w	r1, [r2, #552]	; 0x228
    1ee2:	f883 1225 	strb.w	r1, [r3, #549]	; 0x225
    1ee6:	f883 1226 	strb.w	r1, [r3, #550]	; 0x226
    1eea:	f883 1228 	strb.w	r1, [r3, #552]	; 0x228
    1eee:	f882 0227 	strb.w	r0, [r2, #551]	; 0x227
    1ef2:	f882 022b 	strb.w	r0, [r2, #555]	; 0x22b
    1ef6:	f883 0227 	strb.w	r0, [r3, #551]	; 0x227
    1efa:	f883 022b 	strb.w	r0, [r3, #555]	; 0x22b
    1efe:	bc30      	pop	{r4, r5}
    1f00:	4770      	bx	lr
    1f02:	bf00      	nop
    1f04:	1fff90a0 	.word	0x1fff90a0
    1f08:	1fff8c54 	.word	0x1fff8c54

00001f0c <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    1f0c:	2900      	cmp	r1, #0
    1f0e:	dd0b      	ble.n	1f28 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    1f10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1f14:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f16:	7813      	ldrb	r3, [r2, #0]
    1f18:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    1f1a:	7853      	ldrb	r3, [r2, #1]
    1f1c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    1f1e:	7893      	ldrb	r3, [r2, #2]
    1f20:	7083      	strb	r3, [r0, #2]
    1f22:	3003      	adds	r0, #3
    1f24:	4288      	cmp	r0, r1
    1f26:	d1f6      	bne.n	1f16 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    1f28:	4770      	bx	lr
    1f2a:	bf00      	nop

00001f2c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    1f2c:	b570      	push	{r4, r5, r6, lr}
    1f2e:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    1f30:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    1f32:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    1f34:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    1f36:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    1f3a:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    1f3e:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    1f42:	dd10      	ble.n	1f66 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    1f44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1f48:	461e      	mov	r6, r3
    1f4a:	4604      	mov	r4, r0
    1f4c:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1f4e:	4621      	mov	r1, r4
    1f50:	a801      	add	r0, sp, #4
    1f52:	f000 fad7 	bl	2504 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    1f56:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1f5a:	3403      	adds	r4, #3
    1f5c:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    1f5e:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    1f60:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    1f64:	d1f3      	bne.n	1f4e <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    1f66:	b002      	add	sp, #8
    1f68:	bd70      	pop	{r4, r5, r6, pc}
    1f6a:	bf00      	nop

00001f6c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    1f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    1f70:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    1f72:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    1f74:	d352      	bcc.n	201c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    1f76:	f896 e000 	ldrb.w	lr, [r6]
    1f7a:	7815      	ldrb	r5, [r2, #0]
    1f7c:	7877      	ldrb	r7, [r6, #1]
    1f7e:	f896 8002 	ldrb.w	r8, [r6, #2]
    1f82:	7854      	ldrb	r4, [r2, #1]
    1f84:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    1f88:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    1f8c:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    1f90:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    1f94:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    1f98:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    1f9c:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    1fa0:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    1fa4:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    1fa6:	b3b2      	cbz	r2, 2016 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    1fa8:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    1fac:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    1fb0:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    1fb4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    1fb8:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    1fbc:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    1fc0:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    1fc2:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    1fc6:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    1fca:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    1fce:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    1fd2:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    1fd6:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    1fda:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    1fde:	d818      	bhi.n	2012 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    1fe0:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    1fe4:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    1fe6:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    1fe8:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1fea:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    1fee:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    1ff2:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    1ff6:	4475      	add	r5, lr
        g88 += gdelta87;
    1ff8:	4454      	add	r4, sl
        b88 += bdelta87;
    1ffa:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    1ffc:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1ffe:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    2002:	b2ad      	uxth	r5, r5
        g = rhs.g;
    2004:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    2008:	b2a4      	uxth	r4, r4
        b = rhs.b;
    200a:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    200e:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    2010:	d2e6      	bcs.n	1fe0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    2012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2016:	f04f 0b01 	mov.w	fp, #1
    201a:	e7c7      	b.n	1fac <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    201c:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    201e:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2020:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2024:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2026:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    2028:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    202c:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2030:	7015      	strb	r5, [r2, #0]
    2032:	4619      	mov	r1, r3
    2034:	f886 e000 	strb.w	lr, [r6]
    2038:	464b      	mov	r3, r9
        g = rhs.g;
    203a:	7054      	strb	r4, [r2, #1]
    203c:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    203e:	f882 c002 	strb.w	ip, [r2, #2]
    2042:	f886 8002 	strb.w	r8, [r6, #2]
    2046:	e79f      	b.n	1f88 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00002048 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    2048:	b309      	cbz	r1, 208e <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    204a:	b430      	push	{r4, r5}
    204c:	1e4d      	subs	r5, r1, #1
    204e:	b2ad      	uxth	r5, r5
    2050:	43d2      	mvns	r2, r2
    2052:	3501      	adds	r5, #1
    2054:	b2d2      	uxtb	r2, r2
    2056:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    205a:	4405      	add	r5, r0
    205c:	3201      	adds	r2, #1
    205e:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2060:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    2064:	fb02 f303 	mul.w	r3, r2, r3
    2068:	121b      	asrs	r3, r3, #8
    206a:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    206e:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2070:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2072:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2076:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    207a:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    207c:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    207e:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2080:	7083      	strb	r3, [r0, #2]
    2082:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    2084:	4285      	cmp	r5, r0
    2086:	f104 0403 	add.w	r4, r4, #3
    208a:	d1e9      	bne.n	2060 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    208c:	bc30      	pop	{r4, r5}
    208e:	4770      	bx	lr

00002090 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    2090:	f7ff bfda 	b.w	2048 <fade_raw(CRGB*, unsigned short, unsigned char)>

00002094 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    2094:	b322      	cbz	r2, 20e0 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    2096:	2aff      	cmp	r2, #255	; 0xff
    2098:	d023      	beq.n	20e2 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    209a:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    209c:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    209e:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    20a0:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    20a2:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    20a4:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    20a6:	43d2      	mvns	r2, r2
    20a8:	fb06 7605 	mla	r6, r6, r5, r7
    20ac:	b2d2      	uxtb	r2, r2
    20ae:	fb04 6402 	mla	r4, r4, r2, r6
    20b2:	f3c4 2407 	ubfx	r4, r4, #8, #8
    20b6:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    20b8:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    20ba:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    20bc:	191f      	adds	r7, r3, r4
    20be:	fb04 7405 	mla	r4, r4, r5, r7
    20c2:	fb03 4302 	mla	r3, r3, r2, r4
    20c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    20ca:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    20cc:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    20ce:	18f1      	adds	r1, r6, r3
    20d0:	fb03 1505 	mla	r5, r3, r5, r1
    20d4:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    20d8:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    20da:	f3c2 2207 	ubfx	r2, r2, #8, #8
    20de:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    20e0:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    20e2:	780b      	ldrb	r3, [r1, #0]
    20e4:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    20e6:	784b      	ldrb	r3, [r1, #1]
    20e8:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    20ea:	788b      	ldrb	r3, [r1, #2]
    20ec:	7083      	strb	r3, [r0, #2]
    20ee:	4770      	bx	lr

000020f0 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    20f0:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    20f2:	780d      	ldrb	r5, [r1, #0]
    20f4:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    20f6:	784d      	ldrb	r5, [r1, #1]
    20f8:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    20fa:	7889      	ldrb	r1, [r1, #2]
    20fc:	7081      	strb	r1, [r0, #2]
    20fe:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    2100:	4611      	mov	r1, r2
    2102:	461a      	mov	r2, r3
    2104:	f7ff ffc6 	bl	2094 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    2108:	4620      	mov	r0, r4
    210a:	bd38      	pop	{r3, r4, r5, pc}

0000210c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    210c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    2110:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    2112:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    2116:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    211a:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    211c:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    2120:	d000      	beq.n	2124 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    2122:	b9e6      	cbnz	r6, 215e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    2124:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    2126:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    2128:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    212a:	2bff      	cmp	r3, #255	; 0xff
    212c:	d012      	beq.n	2154 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    212e:	2b00      	cmp	r3, #0
    2130:	d043      	beq.n	21ba <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    2132:	3301      	adds	r3, #1
    2134:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    2136:	b11c      	cbz	r4, 2140 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    2138:	fb03 4404 	mla	r4, r3, r4, r4
    213c:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    2140:	b119      	cbz	r1, 214a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    2142:	fb03 1101 	mla	r1, r3, r1, r1
    2146:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    214a:	b11a      	cbz	r2, 2154 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    214c:	fb03 2202 	mla	r2, r3, r2, r2
    2150:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    2154:	7004      	strb	r4, [r0, #0]
    2156:	7041      	strb	r1, [r0, #1]
    2158:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    215a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    215e:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    2160:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    2162:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    2166:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    2168:	d000      	beq.n	216c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    216a:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    216c:	0112      	lsls	r2, r2, #4
    216e:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    2172:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    2174:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    2178:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    217c:	f891 8002 	ldrb.w	r8, [r1, #2]
    2180:	fb04 f606 	mul.w	r6, r4, r6
    2184:	1c51      	adds	r1, r2, #1
    2186:	fb04 f509 	mul.w	r5, r4, r9
    218a:	fb04 f407 	mul.w	r4, r4, r7
    218e:	f3c4 2407 	ubfx	r4, r4, #8, #8
    2192:	f3c6 2707 	ubfx	r7, r6, #8, #8
    2196:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    219a:	fb01 f60c 	mul.w	r6, r1, ip
    219e:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    21a2:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    21a6:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    21aa:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    21ae:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    21b2:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    21b4:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    21b6:	b2d2      	uxtb	r2, r2
    21b8:	e7b7      	b.n	212a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    21ba:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    21bc:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    21be:	461c      	mov	r4, r3
    21c0:	7004      	strb	r4, [r0, #0]
    21c2:	7041      	strb	r1, [r0, #1]
    21c4:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    21c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    21ca:	bf00      	nop

000021cc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    21cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ce:	3901      	subs	r1, #1
    21d0:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    21d2:	2500      	movs	r5, #0
    21d4:	302f      	adds	r0, #47	; 0x2f
    21d6:	e001      	b.n	21dc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    21d8:	4284      	cmp	r4, r0
    21da:	d01e      	beq.n	221a <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    21dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    21e0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    21e4:	42b3      	cmp	r3, r6
    21e6:	d0f7      	beq.n	21d8 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    21e8:	f103 0701 	add.w	r7, r3, #1
    21ec:	d204      	bcs.n	21f8 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    21ee:	b2fb      	uxtb	r3, r7
    21f0:	7023      	strb	r3, [r4, #0]
    21f2:	3501      	adds	r5, #1
    21f4:	780e      	ldrb	r6, [r1, #0]
    21f6:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    21f8:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    21fa:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    21fc:	b2ff      	uxtb	r7, r7
    21fe:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    2202:	d208      	bcs.n	2216 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    2204:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    2206:	780e      	ldrb	r6, [r1, #0]
    2208:	42be      	cmp	r6, r7
    220a:	bf38      	it	cc
    220c:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    220e:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    2212:	bf38      	it	cc
    2214:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    2216:	4295      	cmp	r5, r2
    2218:	d3de      	bcc.n	21d8 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    221a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000221c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    221e:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    2220:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    2222:	4604      	mov	r4, r0
    2224:	bfcc      	ite	gt
    2226:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    222a:	2500      	movle	r5, #0
    222c:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    222e:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    2230:	bfd8      	it	le
    2232:	4616      	movle	r6, r2

	pLed->init();
    2234:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    2236:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    2238:	6823      	ldr	r3, [r4, #0]
    223a:	6062      	str	r2, [r4, #4]
    223c:	695b      	ldr	r3, [r3, #20]
    223e:	4a0a      	ldr	r2, [pc, #40]	; (2268 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    2240:	6166      	str	r6, [r4, #20]
    2242:	4293      	cmp	r3, r2
    2244:	d101      	bne.n	224a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    2246:	4620      	mov	r0, r4
    2248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    224a:	4620      	mov	r0, r4
    224c:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    224e:	2800      	cmp	r0, #0
    2250:	d0f9      	beq.n	2246 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    2252:	4a06      	ldr	r2, [pc, #24]	; (226c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    2254:	4b06      	ldr	r3, [pc, #24]	; (2270 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    2256:	6851      	ldr	r1, [r2, #4]
    2258:	fb93 f0f0 	sdiv	r0, r3, r0
    225c:	4288      	cmp	r0, r1
    225e:	bf38      	it	cc
    2260:	4608      	movcc	r0, r1
    2262:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    2264:	4620      	mov	r0, r4
    2266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2268:	00000471 	.word	0x00000471
    226c:	1fff92d8 	.word	0x1fff92d8
    2270:	000f4240 	.word	0x000f4240

00002274 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    2274:	4b08      	ldr	r3, [pc, #32]	; (2298 <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    2276:	b510      	push	{r4, lr}
    2278:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    227a:	b15c      	cbz	r4, 2294 <CFastLED::clearData()+0x20>
    227c:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    227e:	2100      	movs	r1, #0
    2280:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    2282:	b123      	cbz	r3, 228e <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    2284:	6962      	ldr	r2, [r4, #20]
    2286:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    228a:	f002 faf3 	bl	4874 <memset>
    228e:	68a4      	ldr	r4, [r4, #8]
    2290:	2c00      	cmp	r4, #0
    2292:	d1f3      	bne.n	227c <CFastLED::clearData()+0x8>
    2294:	bd10      	pop	{r4, pc}
    2296:	bf00      	nop
    2298:	1fff92e8 	.word	0x1fff92e8

0000229c <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    229c:	4b07      	ldr	r3, [pc, #28]	; (22bc <CFastLED::setCorrection(CRGB const&)+0x20>)
    229e:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    22a0:	b153      	cbz	r3, 22b8 <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    22a2:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    22a4:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    22a6:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    22a8:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    22aa:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    22ac:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    22ae:	735a      	strb	r2, [r3, #13]
    22b0:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    22b2:	2b00      	cmp	r3, #0
    22b4:	d1f6      	bne.n	22a4 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    22b6:	bc10      	pop	{r4}
    22b8:	4770      	bx	lr
    22ba:	bf00      	nop
    22bc:	1fff92e8 	.word	0x1fff92e8

000022c0 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    22c0:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    22c2:	4c0f      	ldr	r4, [pc, #60]	; (2300 <CFastLED::countFPS(int)+0x40>)
    22c4:	6822      	ldr	r2, [r4, #0]
    22c6:	1c53      	adds	r3, r2, #1
    22c8:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    22ca:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    22cc:	6023      	str	r3, [r4, #0]
    22ce:	db13      	blt.n	22f8 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22d0:	4d0c      	ldr	r5, [pc, #48]	; (2304 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    22d2:	4a0d      	ldr	r2, [pc, #52]	; (2308 <CFastLED::countFPS(int)+0x48>)
    22d4:	6829      	ldr	r1, [r5, #0]
    22d6:	9101      	str	r1, [sp, #4]
	return ret;
    22d8:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22da:	682d      	ldr	r5, [r5, #0]
    22dc:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    22de:	6816      	ldr	r6, [r2, #0]
	return ret;
    22e0:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    22e2:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    22e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    22e8:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    22ea:	1b89      	subs	r1, r1, r6
    22ec:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    22f0:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    22f2:	fbb3 f3f1 	udiv	r3, r3, r1
    22f6:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    22f8:	b003      	add	sp, #12
    22fa:	bc70      	pop	{r4, r5, r6}
    22fc:	4770      	bx	lr
    22fe:	bf00      	nop
    2300:	1fff92ec 	.word	0x1fff92ec
    2304:	1fff9350 	.word	0x1fff9350
    2308:	1fff92f4 	.word	0x1fff92f4

0000230c <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2310:	6843      	ldr	r3, [r0, #4]
    2312:	4c2d      	ldr	r4, [pc, #180]	; (23c8 <CFastLED::show(unsigned char)+0xbc>)
    2314:	b083      	sub	sp, #12
    2316:	4606      	mov	r6, r0
    2318:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    231a:	2b00      	cmp	r3, #0
    231c:	d14b      	bne.n	23b6 <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    231e:	f000 fd6f 	bl	2e00 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    2322:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    2324:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    2326:	b11b      	cbz	r3, 2330 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    2328:	4648      	mov	r0, r9
    232a:	68b1      	ldr	r1, [r6, #8]
    232c:	4798      	blx	r3
    232e:	4681      	mov	r9, r0
    2330:	4b26      	ldr	r3, [pc, #152]	; (23cc <CFastLED::show(unsigned char)+0xc0>)
    2332:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    2334:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    2336:	2c00      	cmp	r4, #0
    2338:	d036      	beq.n	23a8 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    233a:	8873      	ldrh	r3, [r6, #2]
    233c:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    233e:	6861      	ldr	r1, [r4, #4]
    2340:	6962      	ldr	r2, [r4, #20]
    2342:	2b63      	cmp	r3, #99	; 0x63
    2344:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    2346:	bf98      	it	ls
    2348:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    234a:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    234e:	f88d 5004 	strb.w	r5, [sp, #4]
    2352:	f88d 5005 	strb.w	r5, [sp, #5]
    2356:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    235a:	f1b9 0f00 	cmp.w	r9, #0
    235e:	d01c      	beq.n	239a <CFastLED::show(unsigned char)+0x8e>
    2360:	f104 030b 	add.w	r3, r4, #11
    2364:	f10d 0e04 	add.w	lr, sp, #4
    2368:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    236c:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    2370:	f1bb 0f00 	cmp.w	fp, #0
    2374:	d00d      	beq.n	2392 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    2376:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    237a:	f10a 0001 	add.w	r0, sl, #1
    237e:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    2382:	f1ba 0f00 	cmp.w	sl, #0
    2386:	d004      	beq.n	2392 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    2388:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    238c:	0c00      	lsrs	r0, r0, #16
    238e:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    2392:	4563      	cmp	r3, ip
    2394:	f10e 0e01 	add.w	lr, lr, #1
    2398:	d1e8      	bne.n	236c <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    239a:	4620      	mov	r0, r4
    239c:	ab01      	add	r3, sp, #4
    239e:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    23a0:	74a7      	strb	r7, [r4, #18]
    23a2:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    23a4:	2c00      	cmp	r4, #0
    23a6:	d1c8      	bne.n	233a <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    23a8:	4630      	mov	r0, r6
    23aa:	2119      	movs	r1, #25
    23ac:	f7ff ff88 	bl	22c0 <CFastLED::countFPS(int)>
}
    23b0:	b003      	add	sp, #12
    23b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    23b6:	f000 fd23 	bl	2e00 <micros>
    23ba:	6822      	ldr	r2, [r4, #0]
    23bc:	6873      	ldr	r3, [r6, #4]
    23be:	1a80      	subs	r0, r0, r2
    23c0:	4298      	cmp	r0, r3
    23c2:	d3aa      	bcc.n	231a <CFastLED::show(unsigned char)+0xe>
    23c4:	e7ab      	b.n	231e <CFastLED::show(unsigned char)+0x12>
    23c6:	bf00      	nop
    23c8:	1fff92f0 	.word	0x1fff92f0
    23cc:	1fff92e8 	.word	0x1fff92e8

000023d0 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    23d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    23d2:	4d0a      	ldr	r5, [pc, #40]	; (23fc <CFastLED::delay(unsigned long)+0x2c>)
    23d4:	b083      	sub	sp, #12
    23d6:	682b      	ldr	r3, [r5, #0]
    23d8:	9300      	str	r3, [sp, #0]
	return ret;
    23da:	9f00      	ldr	r7, [sp, #0]
    23dc:	4604      	mov	r4, r0
    23de:	460e      	mov	r6, r1
    23e0:	7821      	ldrb	r1, [r4, #0]
    23e2:	4620      	mov	r0, r4
    23e4:	f7ff ff92 	bl	230c <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    23e8:	f001 ffb8 	bl	435c <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    23ec:	682b      	ldr	r3, [r5, #0]
    23ee:	9301      	str	r3, [sp, #4]
	return ret;
    23f0:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    23f2:	1bdb      	subs	r3, r3, r7
    23f4:	42b3      	cmp	r3, r6
    23f6:	d3f3      	bcc.n	23e0 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    23f8:	b003      	add	sp, #12
    23fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23fc:	1fff9350 	.word	0x1fff9350

00002400 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    2400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2404:	6843      	ldr	r3, [r0, #4]
    2406:	4c2c      	ldr	r4, [pc, #176]	; (24b8 <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    2408:	b083      	sub	sp, #12
    240a:	4606      	mov	r6, r0
    240c:	468a      	mov	sl, r1
    240e:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    2410:	2b00      	cmp	r3, #0
    2412:	d149      	bne.n	24a8 <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    2414:	f000 fcf4 	bl	2e00 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    2418:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    241a:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    241c:	b11b      	cbz	r3, 2426 <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    241e:	4648      	mov	r0, r9
    2420:	68b1      	ldr	r1, [r6, #8]
    2422:	4798      	blx	r3
    2424:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    2426:	4b25      	ldr	r3, [pc, #148]	; (24bc <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    2428:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    242a:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    242c:	2c00      	cmp	r4, #0
    242e:	d034      	beq.n	249a <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    2430:	8873      	ldrh	r3, [r6, #2]
    2432:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    2434:	6962      	ldr	r2, [r4, #20]
    2436:	2b63      	cmp	r3, #99	; 0x63
    2438:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    243a:	bf98      	it	ls
    243c:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    243e:	f8d3 8000 	ldr.w	r8, [r3]
    2442:	f88d 5004 	strb.w	r5, [sp, #4]
    2446:	f88d 5005 	strb.w	r5, [sp, #5]
    244a:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    244e:	f1b9 0f00 	cmp.w	r9, #0
    2452:	d01a      	beq.n	248a <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    2454:	f104 030b 	add.w	r3, r4, #11
    2458:	a801      	add	r0, sp, #4
    245a:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    245e:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    2462:	f1bb 0f00 	cmp.w	fp, #0
    2466:	d00c      	beq.n	2482 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    2468:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    246c:	f10c 0101 	add.w	r1, ip, #1
    2470:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    2474:	f1bc 0f00 	cmp.w	ip, #0
    2478:	d003      	beq.n	2482 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    247a:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    247e:	0c09      	lsrs	r1, r1, #16
    2480:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    2482:	4573      	cmp	r3, lr
    2484:	f100 0001 	add.w	r0, r0, #1
    2488:	d1e9      	bne.n	245e <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    248a:	4620      	mov	r0, r4
    248c:	ab01      	add	r3, sp, #4
    248e:	4651      	mov	r1, sl
    2490:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    2492:	74a7      	strb	r7, [r4, #18]
    2494:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    2496:	2c00      	cmp	r4, #0
    2498:	d1ca      	bne.n	2430 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    249a:	4630      	mov	r0, r6
    249c:	2119      	movs	r1, #25
    249e:	f7ff ff0f 	bl	22c0 <CFastLED::countFPS(int)>
}
    24a2:	b003      	add	sp, #12
    24a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    24a8:	f000 fcaa 	bl	2e00 <micros>
    24ac:	6822      	ldr	r2, [r4, #0]
    24ae:	6873      	ldr	r3, [r6, #4]
    24b0:	1a80      	subs	r0, r0, r2
    24b2:	4298      	cmp	r0, r3
    24b4:	d3ac      	bcc.n	2410 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    24b6:	e7ad      	b.n	2414 <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    24b8:	1fff92f0 	.word	0x1fff92f0
    24bc:	1fff92e8 	.word	0x1fff92e8

000024c0 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    24c0:	b510      	push	{r4, lr}
    24c2:	4604      	mov	r4, r0
    24c4:	b082      	sub	sp, #8
	if(writeData) {
    24c6:	b151      	cbz	r1, 24de <CFastLED::clear(bool)+0x1e>
    24c8:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    24ca:	461a      	mov	r2, r3
    24cc:	a901      	add	r1, sp, #4
    24ce:	f88d 3004 	strb.w	r3, [sp, #4]
    24d2:	f88d 3005 	strb.w	r3, [sp, #5]
    24d6:	f88d 3006 	strb.w	r3, [sp, #6]
    24da:	f7ff ff91 	bl	2400 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    24de:	4620      	mov	r0, r4
    24e0:	f7ff fec8 	bl	2274 <CFastLED::clearData()>
}
    24e4:	b002      	add	sp, #8
    24e6:	bd10      	pop	{r4, pc}

000024e8 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    24e8:	2000      	movs	r0, #0
    24ea:	4770      	bx	lr

000024ec <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    24ec:	4b04      	ldr	r3, [pc, #16]	; (2500 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    24ee:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    24f0:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    24f2:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    24f6:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    24f8:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    24fa:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    24fc:	60da      	str	r2, [r3, #12]
    24fe:	4770      	bx	lr
    2500:	1fff92d8 	.word	0x1fff92d8

00002504 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    2504:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    2506:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    2508:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    250a:	7882      	ldrb	r2, [r0, #2]
    250c:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    250e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    2512:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    2516:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    251a:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    251c:	0625      	lsls	r5, r4, #24
    251e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2522:	d45f      	bmi.n	25e4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    2524:	f004 0540 	and.w	r5, r4, #64	; 0x40
    2528:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    252c:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    2530:	2d00      	cmp	r5, #0
    2532:	d146      	bne.n	25c2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    2534:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    2538:	2c00      	cmp	r4, #0
    253a:	d06c      	beq.n	2616 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    253c:	3355      	adds	r3, #85	; 0x55
    253e:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    2540:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    2542:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    2544:	2eff      	cmp	r6, #255	; 0xff
    2546:	d01c      	beq.n	2582 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    2548:	2e00      	cmp	r6, #0
    254a:	d079      	beq.n	2640 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    254c:	b11c      	cbz	r4, 2556 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    254e:	fb06 4404 	mla	r4, r6, r4, r4
    2552:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    2556:	b11d      	cbz	r5, 2560 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    2558:	fb06 5505 	mla	r5, r6, r5, r5
    255c:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    2560:	b11b      	cbz	r3, 256a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    2562:	fb06 3303 	mla	r3, r6, r3, r3
    2566:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    256a:	43f0      	mvns	r0, r6
    256c:	b2c0      	uxtb	r0, r0
    256e:	fb00 0000 	mla	r0, r0, r0, r0
    2572:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    2576:	4404      	add	r4, r0
            g += brightness_floor;
    2578:	4405      	add	r5, r0
            b += brightness_floor;
    257a:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    257c:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    257e:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    2580:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    2582:	2aff      	cmp	r2, #255	; 0xff
    2584:	d018      	beq.n	25b8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    2586:	fb12 f002 	smulbb	r0, r2, r2
    258a:	3200      	adds	r2, #0
    258c:	bf18      	it	ne
    258e:	2201      	movne	r2, #1
    2590:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    2594:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    2598:	d056      	beq.n	2648 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    259a:	b11c      	cbz	r4, 25a4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    259c:	fb02 4404 	mla	r4, r2, r4, r4
    25a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    25a4:	b11d      	cbz	r5, 25ae <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    25a6:	fb02 5505 	mla	r5, r2, r5, r5
    25aa:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    25ae:	b11b      	cbz	r3, 25b8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    25b0:	fb02 3303 	mla	r3, r2, r3, r3
    25b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    25b8:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    25ba:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    25bc:	708b      	strb	r3, [r1, #2]
}
    25be:	bcf0      	pop	{r4, r5, r6, r7}
    25c0:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    25c2:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    25c6:	bb5c      	cbnz	r4, 2620 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    25c8:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    25cc:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    25d0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    25d4:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    25d6:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    25d8:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    25dc:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    25de:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    25e0:	463b      	mov	r3, r7
    25e2:	e7af      	b.n	2544 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    25e4:	f004 0740 	and.w	r7, r4, #64	; 0x40
    25e8:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    25ec:	b9e7      	cbnz	r7, 2628 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    25ee:	f004 0720 	and.w	r7, r4, #32
    25f2:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    25f6:	2f00      	cmp	r7, #0
    25f8:	d136      	bne.n	2668 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    25fa:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    25fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    2602:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    2606:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    260a:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    260e:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    2610:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    2612:	b2c3      	uxtb	r3, r0
    2614:	e796      	b.n	2544 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    2616:	43dc      	mvns	r4, r3
    2618:	b2e4      	uxtb	r4, r4
                g = third;
    261a:	461d      	mov	r5, r3
                b = 0;
    261c:	4603      	mov	r3, r0
    261e:	e791      	b.n	2544 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    2620:	2400      	movs	r4, #0
                g = K255 - third;
    2622:	43dd      	mvns	r5, r3
    2624:	b2ed      	uxtb	r5, r5
    2626:	e78d      	b.n	2544 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    2628:	f004 0420 	and.w	r4, r4, #32
    262c:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    2630:	b994      	cbnz	r4, 2658 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    2632:	f103 0455 	add.w	r4, r3, #85	; 0x55
    2636:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    2638:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    263c:	b2db      	uxtb	r3, r3
    263e:	e781      	b.n	2544 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    2640:	23ff      	movs	r3, #255	; 0xff
    2642:	461d      	mov	r5, r3
    2644:	461c      	mov	r4, r3
    2646:	e79c      	b.n	2582 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    2648:	4615      	mov	r5, r2
    264a:	4614      	mov	r4, r2
    264c:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    264e:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    2650:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    2652:	708b      	strb	r3, [r1, #2]
}
    2654:	bcf0      	pop	{r4, r5, r6, r7}
    2656:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    2658:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    265c:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    265e:	2500      	movs	r5, #0
                b = K85 - third;
    2660:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    2664:	b2db      	uxtb	r3, r3
    2666:	e76d      	b.n	2544 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    2668:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    266a:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    266c:	b2c3      	uxtb	r3, r0
    266e:	e769      	b.n	2544 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00002670 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    2670:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    2672:	b361      	cbz	r1, 26ce <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    2674:	f101 3eff 	add.w	lr, r1, #4294967295
    2678:	fa1f fe8e 	uxth.w	lr, lr
    267c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    2680:	2200      	movs	r2, #0
    2682:	f10e 0e06 	add.w	lr, lr, #6
    2686:	4486      	add	lr, r0
    2688:	1cc3      	adds	r3, r0, #3
    268a:	4615      	mov	r5, r2
    268c:	4614      	mov	r4, r2
        red32   += *p++;
    268e:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    2692:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    2696:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    269a:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    269c:	4573      	cmp	r3, lr
        red32   += *p++;
    269e:	443c      	add	r4, r7
        green32 += *p++;
    26a0:	4405      	add	r5, r0
        blue32  += *p++;
    26a2:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    26a4:	d1f3      	bne.n	268e <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    26a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    26aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    26ae:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    26b2:	f3c4 1317 	ubfx	r3, r4, #4, #24
    26b6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    26ba:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    26be:	0a12      	lsrs	r2, r2, #8
    26c0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    26c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    26c8:	1910      	adds	r0, r2, r4
}
    26ca:	4408      	add	r0, r1
    26cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    26ce:	460c      	mov	r4, r1
    26d0:	460a      	mov	r2, r1
    26d2:	e7f7      	b.n	26c4 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

000026d4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    26d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    26d8:	4b25      	ldr	r3, [pc, #148]	; (2770 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    26da:	681c      	ldr	r4, [r3, #0]
    26dc:	b085      	sub	sp, #20
    26de:	4607      	mov	r7, r0
    26e0:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    26e2:	b19c      	cbz	r4, 270c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    26e4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 277c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    26e8:	257d      	movs	r5, #125	; 0x7d
    26ea:	e007      	b.n	26fc <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    26ec:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    26ee:	b281      	uxth	r1, r0
    26f0:	4630      	mov	r0, r6
    26f2:	f7ff ffbd 	bl	2670 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    26f6:	68a4      	ldr	r4, [r4, #8]
    26f8:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    26fa:	b144      	cbz	r4, 270e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    26fc:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    2700:	691b      	ldr	r3, [r3, #16]
    2702:	454b      	cmp	r3, r9
    2704:	d0f2      	beq.n	26ec <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    2706:	4620      	mov	r0, r4
    2708:	4798      	blx	r3
    270a:	e7f0      	b.n	26ee <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    270c:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    270e:	fb05 f507 	mul.w	r5, r5, r7
    2712:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    2714:	4b17      	ldr	r3, [pc, #92]	; (2774 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    2716:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    2718:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    271a:	d210      	bcs.n	273e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    271c:	b323      	cbz	r3, 2768 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    271e:	4a16      	ldr	r2, [pc, #88]	; (2778 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    2720:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    2722:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    2726:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    272a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    272e:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    2730:	4638      	mov	r0, r7
    2732:	ea23 0301 	bic.w	r3, r3, r1
    2736:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    2738:	b005      	add	sp, #20
    273a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    273e:	fb08 f707 	mul.w	r7, r8, r7
    2742:	fbb7 f0f5 	udiv	r0, r7, r5
    2746:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    2748:	b173      	cbz	r3, 2768 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    274a:	4a0b      	ldr	r2, [pc, #44]	; (2778 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    274c:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    274e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    2752:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    2756:	f89d 100c 	ldrb.w	r1, [sp, #12]
    275a:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    275c:	4638      	mov	r0, r7
    275e:	430b      	orrs	r3, r1
    2760:	7013      	strb	r3, [r2, #0]
}
    2762:	b005      	add	sp, #20
    2764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    2768:	4638      	mov	r0, r7
}
    276a:	b005      	add	sp, #20
    276c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2770:	1fff92e8 	.word	0x1fff92e8
    2774:	1fff92fc 	.word	0x1fff92fc
    2778:	000067ec 	.word	0x000067ec
    277c:	0000046d 	.word	0x0000046d

00002780 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    2780:	4b03      	ldr	r3, [pc, #12]	; (2790 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    2782:	4a04      	ldr	r2, [pc, #16]	; (2794 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    2784:	60da      	str	r2, [r3, #12]
    2786:	fb01 f100 	mul.w	r1, r1, r0
    278a:	6099      	str	r1, [r3, #8]
    278c:	4770      	bx	lr
    278e:	bf00      	nop
    2790:	1fff92d8 	.word	0x1fff92d8
    2794:	000026d5 	.word	0x000026d5

00002798 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2798:	4807      	ldr	r0, [pc, #28]	; (27b8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    279a:	b082      	sub	sp, #8
    279c:	6803      	ldr	r3, [r0, #0]
    279e:	9301      	str	r3, [sp, #4]
	return ret;
    27a0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    27a2:	4411      	add	r1, r2
    27a4:	e001      	b.n	27aa <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    27a6:	4299      	cmp	r1, r3
    27a8:	d304      	bcc.n	27b4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27aa:	6803      	ldr	r3, [r0, #0]
    27ac:	9300      	str	r3, [sp, #0]
	return ret;
    27ae:	9b00      	ldr	r3, [sp, #0]
    27b0:	429a      	cmp	r2, r3
    27b2:	d9f8      	bls.n	27a6 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    27b4:	b002      	add	sp, #8
    27b6:	4770      	bx	lr
    27b8:	1fff9350 	.word	0x1fff9350

000027bc <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    27bc:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27be:	4a10      	ldr	r2, [pc, #64]	; (2800 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    27c0:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    27c2:	b9a1      	cbnz	r1, 27ee <VisualMicroDebug::outPacketStart(bool)+0x32>
    27c4:	6813      	ldr	r3, [r2, #0]
    27c6:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    27c8:	6841      	ldr	r1, [r0, #4]
	return ret;
    27ca:	9b00      	ldr	r3, [sp, #0]
    27cc:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    27ce:	2931      	cmp	r1, #49	; 0x31
    27d0:	d80d      	bhi.n	27ee <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27d2:	6813      	ldr	r3, [r2, #0]
    27d4:	9302      	str	r3, [sp, #8]
	return ret;
    27d6:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    27d8:	f104 0332 	add.w	r3, r4, #50	; 0x32
    27dc:	1a59      	subs	r1, r3, r1
    27de:	e001      	b.n	27e4 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    27e0:	4299      	cmp	r1, r3
    27e2:	d304      	bcc.n	27ee <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27e4:	6813      	ldr	r3, [r2, #0]
    27e6:	9301      	str	r3, [sp, #4]
	return ret;
    27e8:	9b01      	ldr	r3, [sp, #4]
    27ea:	429c      	cmp	r4, r3
    27ec:	d9f8      	bls.n	27e0 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27ee:	6813      	ldr	r3, [r2, #0]
    27f0:	9303      	str	r3, [sp, #12]
	return ret;
    27f2:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    27f4:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    27f6:	2001      	movs	r0, #1
    27f8:	b005      	add	sp, #20
    27fa:	bc10      	pop	{r4}
    27fc:	4770      	bx	lr
    27fe:	bf00      	nop
    2800:	1fff9350 	.word	0x1fff9350

00002804 <VisualMicroDebug::outPacketEnd()>:
    2804:	4770      	bx	lr
    2806:	bf00      	nop

00002808 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    2808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    280c:	f000 bb1a 	b.w	2e44 <delay>

00002810 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    2810:	2300      	movs	r3, #0
    2812:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    2814:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    2816:	b171      	cbz	r1, 2836 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2818:	4807      	ldr	r0, [pc, #28]	; (2838 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    281a:	b082      	sub	sp, #8
    281c:	6803      	ldr	r3, [r0, #0]
    281e:	9301      	str	r3, [sp, #4]
	return ret;
    2820:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    2822:	4411      	add	r1, r2
    2824:	e001      	b.n	282a <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2826:	4299      	cmp	r1, r3
    2828:	d304      	bcc.n	2834 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    282a:	6803      	ldr	r3, [r0, #0]
    282c:	9300      	str	r3, [sp, #0]
	return ret;
    282e:	9b00      	ldr	r3, [sp, #0]
    2830:	429a      	cmp	r2, r3
    2832:	d9f8      	bls.n	2826 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    2834:	b002      	add	sp, #8
    2836:	4770      	bx	lr
    2838:	1fff9350 	.word	0x1fff9350

0000283c <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    283c:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    283e:	4c13      	ldr	r4, [pc, #76]	; (288c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    2840:	b085      	sub	sp, #20
    2842:	6823      	ldr	r3, [r4, #0]
    2844:	9303      	str	r3, [sp, #12]
	return ret;
    2846:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    2848:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    284a:	460d      	mov	r5, r1
    284c:	4810      	ldr	r0, [pc, #64]	; (2890 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    284e:	2106      	movs	r1, #6
    2850:	f001 fb10 	bl	3e74 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2854:	2300      	movs	r3, #0
    2856:	220a      	movs	r2, #10
    2858:	4629      	mov	r1, r5
    285a:	480e      	ldr	r0, [pc, #56]	; (2894 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    285c:	f001 fd1e 	bl	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2860:	2106      	movs	r1, #6
    2862:	480d      	ldr	r0, [pc, #52]	; (2898 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    2864:	f001 fb06 	bl	3e74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2868:	480a      	ldr	r0, [pc, #40]	; (2894 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    286a:	f001 fd07 	bl	427c <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    286e:	6823      	ldr	r3, [r4, #0]
    2870:	9302      	str	r3, [sp, #8]
	return ret;
    2872:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    2874:	f102 0132 	add.w	r1, r2, #50	; 0x32
    2878:	e001      	b.n	287e <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    287a:	4299      	cmp	r1, r3
    287c:	d304      	bcc.n	2888 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    287e:	6823      	ldr	r3, [r4, #0]
    2880:	9301      	str	r3, [sp, #4]
	return ret;
    2882:	9b01      	ldr	r3, [sp, #4]
    2884:	429a      	cmp	r2, r3
    2886:	d9f8      	bls.n	287a <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    2888:	b005      	add	sp, #20
    288a:	bd30      	pop	{r4, r5, pc}
    288c:	1fff9350 	.word	0x1fff9350
    2890:	00006768 	.word	0x00006768
    2894:	1fff872c 	.word	0x1fff872c
    2898:	00006770 	.word	0x00006770

0000289c <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    289c:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    289e:	7e03      	ldrb	r3, [r0, #24]
    28a0:	b90b      	cbnz	r3, 28a6 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    28a2:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    28a4:	bd38      	pop	{r3, r4, r5, pc}
    28a6:	460d      	mov	r5, r1
    28a8:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    28aa:	f001 fab9 	bl	3e20 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    28ae:	f010 0fff 	tst.w	r0, #255	; 0xff
    28b2:	d101      	bne.n	28b8 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    28b4:	2065      	movs	r0, #101	; 0x65
    28b6:	bd38      	pop	{r3, r4, r5, pc}
    28b8:	f001 fab2 	bl	3e20 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    28bc:	f010 0fff 	tst.w	r0, #255	; 0xff
    28c0:	d0f8      	beq.n	28b4 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    28c2:	f001 fa71 	bl	3da8 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    28c6:	b2c0      	uxtb	r0, r0
    28c8:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    28cc:	2b1e      	cmp	r3, #30
    28ce:	d8f3      	bhi.n	28b8 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    28d0:	a201      	add	r2, pc, #4	; (adr r2, 28d8 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    28d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    28d6:	bf00      	nop
    28d8:	00002961 	.word	0x00002961
    28dc:	000028b9 	.word	0x000028b9
    28e0:	000028b9 	.word	0x000028b9
    28e4:	000028b9 	.word	0x000028b9
    28e8:	000028b9 	.word	0x000028b9
    28ec:	000028b9 	.word	0x000028b9
    28f0:	000028b9 	.word	0x000028b9
    28f4:	000028b9 	.word	0x000028b9
    28f8:	000028b9 	.word	0x000028b9
    28fc:	000028b9 	.word	0x000028b9
    2900:	000028b9 	.word	0x000028b9
    2904:	00002955 	.word	0x00002955
    2908:	000028b9 	.word	0x000028b9
    290c:	000028b9 	.word	0x000028b9
    2910:	000028b9 	.word	0x000028b9
    2914:	000028b9 	.word	0x000028b9
    2918:	000028a3 	.word	0x000028a3
    291c:	000028b9 	.word	0x000028b9
    2920:	000028b9 	.word	0x000028b9
    2924:	000028b9 	.word	0x000028b9
    2928:	000028b9 	.word	0x000028b9
    292c:	000028b9 	.word	0x000028b9
    2930:	000028b9 	.word	0x000028b9
    2934:	000028b9 	.word	0x000028b9
    2938:	000028b9 	.word	0x000028b9
    293c:	000028a3 	.word	0x000028a3
    2940:	000028b9 	.word	0x000028b9
    2944:	000028b9 	.word	0x000028b9
    2948:	000028b9 	.word	0x000028b9
    294c:	000028b9 	.word	0x000028b9
    2950:	000028a5 	.word	0x000028a5
		{

		case 'c':
			sendContinuedACK(breakPointId);
    2954:	4620      	mov	r0, r4
    2956:	4629      	mov	r1, r5
    2958:	f7ff ff70 	bl	283c <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    295c:	2063      	movs	r0, #99	; 0x63
    295e:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    2960:	2300      	movs	r3, #0
    2962:	7623      	strb	r3, [r4, #24]
			return 'c';
    2964:	2063      	movs	r0, #99	; 0x63
    2966:	bd38      	pop	{r3, r4, r5, pc}

00002968 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    2968:	b570      	push	{r4, r5, r6, lr}
    296a:	4605      	mov	r5, r0
    296c:	b082      	sub	sp, #8
    296e:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    2970:	b1c9      	cbz	r1, 29a6 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    2972:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2974:	4c0d      	ldr	r4, [pc, #52]	; (29ac <VisualMicroDebug::start(bool, bool)+0x44>)
    2976:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    2978:	2100      	movs	r1, #0
    297a:	4628      	mov	r0, r5
    297c:	f7ff ff8e 	bl	289c <VisualMicroDebug::breakWait(unsigned char)>
    2980:	2863      	cmp	r0, #99	; 0x63
    2982:	d010      	beq.n	29a6 <VisualMicroDebug::start(bool, bool)+0x3e>
    2984:	6823      	ldr	r3, [r4, #0]
    2986:	9301      	str	r3, [sp, #4]
	return ret;
    2988:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    298a:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    298c:	6823      	ldr	r3, [r4, #0]
    298e:	9300      	str	r3, [sp, #0]
	return ret;
    2990:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2992:	429a      	cmp	r2, r3
    2994:	d8f0      	bhi.n	2978 <VisualMicroDebug::start(bool, bool)+0x10>
    2996:	4299      	cmp	r1, r3
    2998:	d2f8      	bcs.n	298c <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    299a:	2100      	movs	r1, #0
    299c:	4628      	mov	r0, r5
    299e:	f7ff ff7d 	bl	289c <VisualMicroDebug::breakWait(unsigned char)>
    29a2:	2863      	cmp	r0, #99	; 0x63
    29a4:	d1ee      	bne.n	2984 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    29a6:	762e      	strb	r6, [r5, #24]
#endif

}
    29a8:	b002      	add	sp, #8
    29aa:	bd70      	pop	{r4, r5, r6, pc}
    29ac:	1fff9350 	.word	0x1fff9350

000029b0 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    29b0:	4b03      	ldr	r3, [pc, #12]	; (29c0 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    29b2:	2200      	movs	r2, #0
    29b4:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    29b6:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    29b8:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    29ba:	615a      	str	r2, [r3, #20]
    29bc:	4770      	bx	lr
    29be:	bf00      	nop
    29c0:	1fff9300 	.word	0x1fff9300

000029c4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    29c4:	4a37      	ldr	r2, [pc, #220]	; (2aa4 <wait_for_cal+0xe0>)
    29c6:	4938      	ldr	r1, [pc, #224]	; (2aa8 <wait_for_cal+0xe4>)
    29c8:	6813      	ldr	r3, [r2, #0]
    29ca:	061b      	lsls	r3, r3, #24
    29cc:	d4fc      	bmi.n	29c8 <wait_for_cal+0x4>
    29ce:	680b      	ldr	r3, [r1, #0]
    29d0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    29d4:	d1f8      	bne.n	29c8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    29d6:	b672      	cpsid	i
	if (calibrating) {
    29d8:	4934      	ldr	r1, [pc, #208]	; (2aac <wait_for_cal+0xe8>)
    29da:	780a      	ldrb	r2, [r1, #0]
    29dc:	2a00      	cmp	r2, #0
    29de:	d05f      	beq.n	2aa0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    29e0:	4a33      	ldr	r2, [pc, #204]	; (2ab0 <wait_for_cal+0xec>)
    29e2:	4834      	ldr	r0, [pc, #208]	; (2ab4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    29e4:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    29e6:	4c34      	ldr	r4, [pc, #208]	; (2ab8 <wait_for_cal+0xf4>)
    29e8:	6817      	ldr	r7, [r2, #0]
    29ea:	6806      	ldr	r6, [r0, #0]
    29ec:	6825      	ldr	r5, [r4, #0]
    29ee:	68d4      	ldr	r4, [r2, #12]
    29f0:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    29f2:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    29f4:	3214      	adds	r2, #20
    29f6:	6800      	ldr	r0, [r0, #0]
    29f8:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    29fa:	4f30      	ldr	r7, [pc, #192]	; (2abc <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    29fc:	4435      	add	r5, r6
    29fe:	442c      	add	r4, r5
    2a00:	4420      	add	r0, r4
    2a02:	4402      	add	r2, r0
    2a04:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2a08:	4e2d      	ldr	r6, [pc, #180]	; (2ac0 <wait_for_cal+0xfc>)
    2a0a:	482e      	ldr	r0, [pc, #184]	; (2ac4 <wait_for_cal+0x100>)
    2a0c:	4d2e      	ldr	r5, [pc, #184]	; (2ac8 <wait_for_cal+0x104>)
    2a0e:	4c2f      	ldr	r4, [pc, #188]	; (2acc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    2a14:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2a16:	6837      	ldr	r7, [r6, #0]
    2a18:	6806      	ldr	r6, [r0, #0]
    2a1a:	682d      	ldr	r5, [r5, #0]
    2a1c:	4a2c      	ldr	r2, [pc, #176]	; (2ad0 <wait_for_cal+0x10c>)
    2a1e:	6824      	ldr	r4, [r4, #0]
    2a20:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2a22:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2a24:	6800      	ldr	r0, [r0, #0]
    2a26:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2a28:	4f2a      	ldr	r7, [pc, #168]	; (2ad4 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    2a2a:	4435      	add	r5, r6
    2a2c:	442c      	add	r4, r5
    2a2e:	4420      	add	r0, r4
    2a30:	4402      	add	r2, r0
    2a32:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2a36:	4e28      	ldr	r6, [pc, #160]	; (2ad8 <wait_for_cal+0x114>)
    2a38:	4828      	ldr	r0, [pc, #160]	; (2adc <wait_for_cal+0x118>)
    2a3a:	4d29      	ldr	r5, [pc, #164]	; (2ae0 <wait_for_cal+0x11c>)
    2a3c:	4c29      	ldr	r4, [pc, #164]	; (2ae4 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    2a42:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2a44:	6837      	ldr	r7, [r6, #0]
    2a46:	6806      	ldr	r6, [r0, #0]
    2a48:	682d      	ldr	r5, [r5, #0]
    2a4a:	4a27      	ldr	r2, [pc, #156]	; (2ae8 <wait_for_cal+0x124>)
    2a4c:	6824      	ldr	r4, [r4, #0]
    2a4e:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2a50:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2a52:	6800      	ldr	r0, [r0, #0]
    2a54:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2a56:	4f25      	ldr	r7, [pc, #148]	; (2aec <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    2a58:	4435      	add	r5, r6
    2a5a:	442c      	add	r4, r5
    2a5c:	4420      	add	r0, r4
    2a5e:	4402      	add	r2, r0
    2a60:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2a64:	4e22      	ldr	r6, [pc, #136]	; (2af0 <wait_for_cal+0x12c>)
    2a66:	4823      	ldr	r0, [pc, #140]	; (2af4 <wait_for_cal+0x130>)
    2a68:	4d23      	ldr	r5, [pc, #140]	; (2af8 <wait_for_cal+0x134>)
    2a6a:	4c24      	ldr	r4, [pc, #144]	; (2afc <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    2a70:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2a72:	6837      	ldr	r7, [r6, #0]
    2a74:	6806      	ldr	r6, [r0, #0]
    2a76:	682d      	ldr	r5, [r5, #0]
    2a78:	4a21      	ldr	r2, [pc, #132]	; (2b00 <wait_for_cal+0x13c>)
    2a7a:	6824      	ldr	r4, [r4, #0]
    2a7c:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2a7e:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2a80:	6800      	ldr	r0, [r0, #0]
    2a82:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2a84:	4435      	add	r5, r6
    2a86:	442c      	add	r4, r5
    2a88:	4420      	add	r0, r4
    2a8a:	4402      	add	r2, r0
    2a8c:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    2a90:	481c      	ldr	r0, [pc, #112]	; (2b04 <wait_for_cal+0x140>)
    2a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    2a96:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    2a98:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    2a9a:	b662      	cpsie	i
}
    2a9c:	bcf0      	pop	{r4, r5, r6, r7}
    2a9e:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    2aa0:	b662      	cpsie	i
    2aa2:	4770      	bx	lr
    2aa4:	4003b024 	.word	0x4003b024
    2aa8:	400bb024 	.word	0x400bb024
    2aac:	1fff9349 	.word	0x1fff9349
    2ab0:	4003b038 	.word	0x4003b038
    2ab4:	4003b03c 	.word	0x4003b03c
    2ab8:	4003b040 	.word	0x4003b040
    2abc:	4003b02c 	.word	0x4003b02c
    2ac0:	4003b058 	.word	0x4003b058
    2ac4:	4003b05c 	.word	0x4003b05c
    2ac8:	4003b060 	.word	0x4003b060
    2acc:	4003b064 	.word	0x4003b064
    2ad0:	4003b06c 	.word	0x4003b06c
    2ad4:	4003b030 	.word	0x4003b030
    2ad8:	400bb038 	.word	0x400bb038
    2adc:	400bb03c 	.word	0x400bb03c
    2ae0:	400bb040 	.word	0x400bb040
    2ae4:	400bb044 	.word	0x400bb044
    2ae8:	400bb04c 	.word	0x400bb04c
    2aec:	400bb02c 	.word	0x400bb02c
    2af0:	400bb058 	.word	0x400bb058
    2af4:	400bb05c 	.word	0x400bb05c
    2af8:	400bb060 	.word	0x400bb060
    2afc:	400bb064 	.word	0x400bb064
    2b00:	400bb06c 	.word	0x400bb06c
    2b04:	400bb030 	.word	0x400bb030

00002b08 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2b08:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2b0a:	4829      	ldr	r0, [pc, #164]	; (2bb0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2b0c:	4a29      	ldr	r2, [pc, #164]	; (2bb4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2b0e:	4b2a      	ldr	r3, [pc, #168]	; (2bb8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b10:	4d2a      	ldr	r5, [pc, #168]	; (2bbc <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2b12:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2b14:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2b16:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2b18:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2b1a:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b1c:	4c28      	ldr	r4, [pc, #160]	; (2bc0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2b1e:	2b08      	cmp	r3, #8
    2b20:	d030      	beq.n	2b84 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2b22:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b24:	4827      	ldr	r0, [pc, #156]	; (2bc4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b26:	4928      	ldr	r1, [pc, #160]	; (2bc8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2b28:	d037      	beq.n	2b9a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2b2a:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2b2c:	bf0c      	ite	eq
    2b2e:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2b30:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2b32:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2b34:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2b36:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2b38:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2b3a:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2b3c:	4b23      	ldr	r3, [pc, #140]	; (2bcc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2b3e:	4924      	ldr	r1, [pc, #144]	; (2bd0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2b40:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2b42:	4a24      	ldr	r2, [pc, #144]	; (2bd4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2b44:	b1bb      	cbz	r3, 2b76 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2b46:	2301      	movs	r3, #1
    2b48:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2b4a:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2b4c:	4b22      	ldr	r3, [pc, #136]	; (2bd8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2b4e:	4923      	ldr	r1, [pc, #140]	; (2bdc <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2b50:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2b52:	4a23      	ldr	r2, [pc, #140]	; (2be0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2b54:	2b01      	cmp	r3, #1
    2b56:	d926      	bls.n	2ba6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2b58:	2b04      	cmp	r3, #4
    2b5a:	d90f      	bls.n	2b7c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2b5c:	2b08      	cmp	r3, #8
    2b5e:	d91e      	bls.n	2b9e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2b60:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2b62:	bf94      	ite	ls
    2b64:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2b66:	2387      	movhi	r3, #135	; 0x87
    2b68:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2b6a:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2b6c:	4b1d      	ldr	r3, [pc, #116]	; (2be4 <analog_init+0xdc>)
    2b6e:	2201      	movs	r2, #1
    2b70:	701a      	strb	r2, [r3, #0]
}
    2b72:	bc30      	pop	{r4, r5}
    2b74:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2b76:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2b78:	6013      	str	r3, [r2, #0]
    2b7a:	e7e7      	b.n	2b4c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2b7c:	2384      	movs	r3, #132	; 0x84
    2b7e:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2b80:	6013      	str	r3, [r2, #0]
    2b82:	e7f3      	b.n	2b6c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b84:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b88:	490f      	ldr	r1, [pc, #60]	; (2bc8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b8a:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b8c:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b8e:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b90:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b92:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b94:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b96:	600b      	str	r3, [r1, #0]
    2b98:	e7d0      	b.n	2b3c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b9a:	2239      	movs	r2, #57	; 0x39
    2b9c:	e7f7      	b.n	2b8e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2b9e:	2385      	movs	r3, #133	; 0x85
    2ba0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2ba2:	6013      	str	r3, [r2, #0]
    2ba4:	e7e2      	b.n	2b6c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2ba6:	2380      	movs	r3, #128	; 0x80
    2ba8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2baa:	6013      	str	r3, [r2, #0]
    2bac:	e7de      	b.n	2b6c <analog_init+0x64>
    2bae:	bf00      	nop
    2bb0:	40074000 	.word	0x40074000
    2bb4:	40074001 	.word	0x40074001
    2bb8:	1fff8726 	.word	0x1fff8726
    2bbc:	4003b008 	.word	0x4003b008
    2bc0:	4003b00c 	.word	0x4003b00c
    2bc4:	400bb008 	.word	0x400bb008
    2bc8:	400bb00c 	.word	0x400bb00c
    2bcc:	1fff934c 	.word	0x1fff934c
    2bd0:	4003b020 	.word	0x4003b020
    2bd4:	400bb020 	.word	0x400bb020
    2bd8:	1fff8727 	.word	0x1fff8727
    2bdc:	4003b024 	.word	0x4003b024
    2be0:	400bb024 	.word	0x400bb024
    2be4:	1fff9349 	.word	0x1fff9349

00002be8 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2be8:	2828      	cmp	r0, #40	; 0x28
    2bea:	d82f      	bhi.n	2c4c <analogRead+0x64>
	channel = pin2sc1a[pin];
    2bec:	4b33      	ldr	r3, [pc, #204]	; (2cbc <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    2bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    2bf2:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    2bf4:	2eff      	cmp	r6, #255	; 0xff
    2bf6:	d02b      	beq.n	2c50 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2bf8:	4b31      	ldr	r3, [pc, #196]	; (2cc0 <analogRead+0xd8>)
    2bfa:	781b      	ldrb	r3, [r3, #0]
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d12a      	bne.n	2c56 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2c00:	0632      	lsls	r2, r6, #24
    2c02:	d42c      	bmi.n	2c5e <analogRead+0x76>
#endif

	__disable_irq();
    2c04:	b672      	cpsid	i
    2c06:	4d2f      	ldr	r5, [pc, #188]	; (2cc4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2c08:	4c2f      	ldr	r4, [pc, #188]	; (2cc8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    2c0a:	462f      	mov	r7, r5
    2c0c:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2c0e:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2c10:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    2c12:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    2c14:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2c16:	6823      	ldr	r3, [r4, #0]
    2c18:	061b      	lsls	r3, r3, #24
    2c1a:	d40c      	bmi.n	2c36 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2c1c:	783b      	ldrb	r3, [r7, #0]
    2c1e:	b91b      	cbnz	r3, 2c28 <analogRead+0x40>
    2c20:	e7f4      	b.n	2c0c <analogRead+0x24>
    2c22:	782b      	ldrb	r3, [r5, #0]
    2c24:	2b00      	cmp	r3, #0
    2c26:	d0f1      	beq.n	2c0c <analogRead+0x24>
		__enable_irq();
    2c28:	b662      	cpsie	i
		yield();
    2c2a:	f001 fb97 	bl	435c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2c2e:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2c30:	6823      	ldr	r3, [r4, #0]
    2c32:	0618      	lsls	r0, r3, #24
    2c34:	d5f5      	bpl.n	2c22 <analogRead+0x3a>
			result = ADC0_RA;
    2c36:	4b25      	ldr	r3, [pc, #148]	; (2ccc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2c38:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2c3a:	2200      	movs	r2, #0
    2c3c:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    2c3e:	b662      	cpsie	i
			result >>= analog_right_shift;
    2c40:	4a23      	ldr	r2, [pc, #140]	; (2cd0 <analogRead+0xe8>)
    2c42:	7810      	ldrb	r0, [r2, #0]
    2c44:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    2c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2c4c:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2c4e:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2c50:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2c56:	f7ff feb5 	bl	29c4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2c5a:	0632      	lsls	r2, r6, #24
    2c5c:	d5d2      	bpl.n	2c04 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2c5e:	b672      	cpsid	i
    2c60:	4d1c      	ldr	r5, [pc, #112]	; (2cd4 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2c62:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2ce0 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2c66:	4c1c      	ldr	r4, [pc, #112]	; (2cd8 <analogRead+0xf0>)
    2c68:	f006 0740 	and.w	r7, r6, #64	; 0x40
    2c6c:	b2ff      	uxtb	r7, r7
    2c6e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2c72:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2c76:	b1df      	cbz	r7, 2cb0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2c78:	f023 0310 	bic.w	r3, r3, #16
    2c7c:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2c80:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2c82:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2c84:	4a13      	ldr	r2, [pc, #76]	; (2cd4 <analogRead+0xec>)
    2c86:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    2c88:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    2c8a:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2c8c:	6823      	ldr	r3, [r4, #0]
    2c8e:	0619      	lsls	r1, r3, #24
    2c90:	d40c      	bmi.n	2cac <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2c92:	7813      	ldrb	r3, [r2, #0]
    2c94:	b91b      	cbnz	r3, 2c9e <analogRead+0xb6>
    2c96:	e7ec      	b.n	2c72 <analogRead+0x8a>
    2c98:	782b      	ldrb	r3, [r5, #0]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d0e9      	beq.n	2c72 <analogRead+0x8a>
		__enable_irq();
    2c9e:	b662      	cpsie	i
		yield();
    2ca0:	f001 fb5c 	bl	435c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2ca4:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2ca6:	6823      	ldr	r3, [r4, #0]
    2ca8:	061b      	lsls	r3, r3, #24
    2caa:	d5f5      	bpl.n	2c98 <analogRead+0xb0>
			result = ADC1_RA;
    2cac:	4b0b      	ldr	r3, [pc, #44]	; (2cdc <analogRead+0xf4>)
    2cae:	e7c3      	b.n	2c38 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2cb0:	f043 0310 	orr.w	r3, r3, #16
    2cb4:	f8c8 3000 	str.w	r3, [r8]
    2cb8:	e7e2      	b.n	2c80 <analogRead+0x98>
    2cba:	bf00      	nop
    2cbc:	000067c0 	.word	0x000067c0
    2cc0:	1fff9349 	.word	0x1fff9349
    2cc4:	1fff934b 	.word	0x1fff934b
    2cc8:	4003b000 	.word	0x4003b000
    2ccc:	4003b010 	.word	0x4003b010
    2cd0:	1fff9348 	.word	0x1fff9348
    2cd4:	1fff934a 	.word	0x1fff934a
    2cd8:	400bb000 	.word	0x400bb000
    2cdc:	400bb010 	.word	0x400bb010
    2ce0:	400bb00c 	.word	0x400bb00c

00002ce4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2ce4:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2ce6:	4c10      	ldr	r4, [pc, #64]	; (2d28 <fault_isr+0x44>)
    2ce8:	e008      	b.n	2cfc <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2cea:	6823      	ldr	r3, [r4, #0]
    2cec:	0559      	lsls	r1, r3, #21
    2cee:	d40d      	bmi.n	2d0c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2cf0:	6823      	ldr	r3, [r4, #0]
    2cf2:	051a      	lsls	r2, r3, #20
    2cf4:	d40f      	bmi.n	2d16 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2cf6:	6823      	ldr	r3, [r4, #0]
    2cf8:	04db      	lsls	r3, r3, #19
    2cfa:	d411      	bmi.n	2d20 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2cfc:	6823      	ldr	r3, [r4, #0]
    2cfe:	0358      	lsls	r0, r3, #13
    2d00:	d5f3      	bpl.n	2cea <fault_isr+0x6>
    2d02:	f000 fa37 	bl	3174 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2d06:	6823      	ldr	r3, [r4, #0]
    2d08:	0559      	lsls	r1, r3, #21
    2d0a:	d5f1      	bpl.n	2cf0 <fault_isr+0xc>
    2d0c:	f001 fbaa 	bl	4464 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2d10:	6823      	ldr	r3, [r4, #0]
    2d12:	051a      	lsls	r2, r3, #20
    2d14:	d5ef      	bpl.n	2cf6 <fault_isr+0x12>
    2d16:	f001 fc3b 	bl	4590 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2d1a:	6823      	ldr	r3, [r4, #0]
    2d1c:	04db      	lsls	r3, r3, #19
    2d1e:	d5ed      	bpl.n	2cfc <fault_isr+0x18>
    2d20:	f001 fccc 	bl	46bc <uart2_status_isr>
    2d24:	e7ea      	b.n	2cfc <fault_isr+0x18>
    2d26:	bf00      	nop
    2d28:	40048034 	.word	0x40048034

00002d2c <unused_isr>:
	}
}

void unused_isr(void)
{
    2d2c:	b508      	push	{r3, lr}
	fault_isr();
    2d2e:	f7ff ffd9 	bl	2ce4 <fault_isr>
    2d32:	bf00      	nop

00002d34 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2d34:	4b01      	ldr	r3, [pc, #4]	; (2d3c <startup_early_hook+0x8>)
    2d36:	2210      	movs	r2, #16
    2d38:	801a      	strh	r2, [r3, #0]
    2d3a:	4770      	bx	lr
    2d3c:	40052000 	.word	0x40052000

00002d40 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2d40:	4770      	bx	lr
    2d42:	bf00      	nop

00002d44 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    2d44:	7800      	ldrb	r0, [r0, #0]
}
    2d46:	fab0 f080 	clz	r0, r0
    2d4a:	0940      	lsrs	r0, r0, #5
    2d4c:	4770      	bx	lr
    2d4e:	bf00      	nop

00002d50 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    2d50:	2301      	movs	r3, #1
    2d52:	7003      	strb	r3, [r0, #0]
    2d54:	4770      	bx	lr
    2d56:	bf00      	nop

00002d58 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2d58:	4a1c      	ldr	r2, [pc, #112]	; (2dcc <pinMode.part.2+0x74>)
    2d5a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2d5e:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2d60:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2d62:	d011      	beq.n	2d88 <pinMode.part.2+0x30>
    2d64:	2904      	cmp	r1, #4
    2d66:	d01b      	beq.n	2da0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2d68:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    2d6c:	2200      	movs	r2, #0
    2d6e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2d72:	b129      	cbz	r1, 2d80 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2d74:	2902      	cmp	r1, #2
    2d76:	d020      	beq.n	2dba <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2d78:	2903      	cmp	r1, #3
    2d7a:	d022      	beq.n	2dc2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2d7c:	601a      	str	r2, [r3, #0]
    2d7e:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2d80:	f44f 7280 	mov.w	r2, #256	; 0x100
    2d84:	601a      	str	r2, [r3, #0]
    2d86:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2d88:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2d8c:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2d90:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2d94:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2d96:	681a      	ldr	r2, [r3, #0]
    2d98:	f022 0220 	bic.w	r2, r2, #32
    2d9c:	601a      	str	r2, [r3, #0]
    2d9e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2da0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2da4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2da8:	2001      	movs	r0, #1
    2daa:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2dae:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2db0:	681a      	ldr	r2, [r3, #0]
    2db2:	f042 0220 	orr.w	r2, r2, #32
    2db6:	601a      	str	r2, [r3, #0]
    2db8:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2dba:	f240 1203 	movw	r2, #259	; 0x103
    2dbe:	601a      	str	r2, [r3, #0]
    2dc0:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2dc2:	f44f 7281 	mov.w	r2, #258	; 0x102
    2dc6:	601a      	str	r2, [r3, #0]
    2dc8:	4770      	bx	lr
    2dca:	bf00      	nop
    2dcc:	000067ec 	.word	0x000067ec

00002dd0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2dd0:	b430      	push	{r4, r5}
	RTC_SR = 0;
    2dd2:	4b05      	ldr	r3, [pc, #20]	; (2de8 <rtc_set+0x18>)
	RTC_TPR = 0;
    2dd4:	4d05      	ldr	r5, [pc, #20]	; (2dec <rtc_set+0x1c>)
	RTC_TSR = t;
    2dd6:	4c06      	ldr	r4, [pc, #24]	; (2df0 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2dd8:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2dda:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2ddc:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    2dde:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    2de0:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2de2:	6019      	str	r1, [r3, #0]
}
    2de4:	bc30      	pop	{r4, r5}
    2de6:	4770      	bx	lr
    2de8:	4003d014 	.word	0x4003d014
    2dec:	4003d004 	.word	0x4003d004
    2df0:	4003d000 	.word	0x4003d000

00002df4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2df4:	2821      	cmp	r0, #33	; 0x21
    2df6:	d801      	bhi.n	2dfc <pinMode+0x8>
    2df8:	f7ff bfae 	b.w	2d58 <pinMode.part.2>
    2dfc:	4770      	bx	lr
    2dfe:	bf00      	nop

00002e00 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2e00:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2e02:	490c      	ldr	r1, [pc, #48]	; (2e34 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2e04:	4b0c      	ldr	r3, [pc, #48]	; (2e38 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2e06:	4a0d      	ldr	r2, [pc, #52]	; (2e3c <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2e08:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2e0a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2e0c:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    2e0e:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2e10:	0152      	lsls	r2, r2, #5
    2e12:	d502      	bpl.n	2e1a <micros+0x1a>
    2e14:	2b32      	cmp	r3, #50	; 0x32
    2e16:	bf88      	it	hi
    2e18:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2e1a:	4909      	ldr	r1, [pc, #36]	; (2e40 <micros+0x40>)
    2e1c:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    2e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e24:	33ff      	adds	r3, #255	; 0xff
    2e26:	fba1 1303 	umull	r1, r3, r1, r3
    2e2a:	fb02 f000 	mul.w	r0, r2, r0
}
    2e2e:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    2e32:	4770      	bx	lr
    2e34:	1fff9350 	.word	0x1fff9350
    2e38:	e000e018 	.word	0xe000e018
    2e3c:	e000ed04 	.word	0xe000ed04
    2e40:	aaaaaaab 	.word	0xaaaaaaab

00002e44 <delay>:

void delay(uint32_t ms)
{
    2e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e48:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2e4a:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2e4c:	4f20      	ldr	r7, [pc, #128]	; (2ed0 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2e4e:	4b21      	ldr	r3, [pc, #132]	; (2ed4 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2e50:	4a21      	ldr	r2, [pc, #132]	; (2ed8 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2e52:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2e54:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2e56:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    2e58:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2e5a:	0152      	lsls	r2, r2, #5
    2e5c:	d502      	bpl.n	2e64 <delay+0x20>
    2e5e:	2b32      	cmp	r3, #50	; 0x32
    2e60:	bf88      	it	hi
    2e62:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2e64:	b395      	cbz	r5, 2ecc <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2e66:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    2e6a:	4e1c      	ldr	r6, [pc, #112]	; (2edc <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2e6c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2ed4 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2e70:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2ed8 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2e74:	33ff      	adds	r3, #255	; 0xff
    2e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e7a:	fba6 1303 	umull	r1, r3, r6, r3
    2e7e:	fb02 f404 	mul.w	r4, r2, r4
    2e82:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2e86:	b672      	cpsid	i
	current = SYST_CVR;
    2e88:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    2e8c:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2e8e:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    2e92:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2e94:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    2e98:	33ff      	adds	r3, #255	; 0xff
    2e9a:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2e9e:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2ea2:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    2ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2eaa:	d002      	beq.n	2eb2 <delay+0x6e>
    2eac:	2932      	cmp	r1, #50	; 0x32
    2eae:	bf88      	it	hi
    2eb0:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2eb2:	fb00 3302 	mla	r3, r0, r2, r3
    2eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    2eba:	d304      	bcc.n	2ec6 <delay+0x82>
				ms--;
				if (ms == 0) return;
    2ebc:	3d01      	subs	r5, #1
    2ebe:	d005      	beq.n	2ecc <delay+0x88>
				start += 1000;
    2ec0:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    2ec4:	e7df      	b.n	2e86 <delay+0x42>
			}
			yield();
    2ec6:	f001 fa49 	bl	435c <yield>
		}
    2eca:	e7dc      	b.n	2e86 <delay+0x42>
    2ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ed0:	1fff9350 	.word	0x1fff9350
    2ed4:	e000e018 	.word	0xe000e018
    2ed8:	e000ed04 	.word	0xe000ed04
    2edc:	aaaaaaab 	.word	0xaaaaaaab

00002ee0 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2ee2:	4b2d      	ldr	r3, [pc, #180]	; (2f98 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2ee4:	492d      	ldr	r1, [pc, #180]	; (2f9c <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2ee6:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 2fb8 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2eea:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 2fbc <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2eee:	4e2c      	ldr	r6, [pc, #176]	; (2fa0 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2ef0:	4d2c      	ldr	r5, [pc, #176]	; (2fa4 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    2ef2:	4c2d      	ldr	r4, [pc, #180]	; (2fa8 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2ef4:	4a2d      	ldr	r2, [pc, #180]	; (2fac <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2ef6:	4f2e      	ldr	r7, [pc, #184]	; (2fb0 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2ef8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2efc:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2efe:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2f02:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2f04:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    2f08:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2f0a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    2f0e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2f10:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    2f14:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2f16:	2000      	movs	r0, #0
    2f18:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2f1a:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2f1c:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    2f20:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2f24:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2f28:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    2f2a:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    2f2c:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    2f2e:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    2f30:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2f32:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    2f34:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2f36:	2209      	movs	r2, #9
    2f38:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    2f3c:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    2f40:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    2f44:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2f48:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    2f4c:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    2f50:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    2f54:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    2f56:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2f5a:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2f5e:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    2f62:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2f66:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2f68:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2f6c:	4811      	ldr	r0, [pc, #68]	; (2fb4 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    2f6e:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    2f70:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    2f74:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2f78:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    2f7a:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2f7c:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    2f7e:	f7ff fdc3 	bl	2b08 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2f82:	2019      	movs	r0, #25
    2f84:	f7ff ff5e 	bl	2e44 <delay>
	usb_init();
    2f88:	f000 fe5c 	bl	3c44 <usb_init>
	delay(275);
    2f8c:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2f94:	f7ff bf56 	b.w	2e44 <delay>
    2f98:	e000e108 	.word	0xe000e108
    2f9c:	40038004 	.word	0x40038004
    2fa0:	40038014 	.word	0x40038014
    2fa4:	40038024 	.word	0x40038024
    2fa8:	4003802c 	.word	0x4003802c
    2fac:	4003801c 	.word	0x4003801c
    2fb0:	40038034 	.word	0x40038034
    2fb4:	400b8000 	.word	0x400b8000
    2fb8:	4003800c 	.word	0x4003800c
    2fbc:	40038008 	.word	0x40038008

00002fc0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2fc0:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2fc2:	2b03      	cmp	r3, #3
    2fc4:	d814      	bhi.n	2ff0 <usb_rx+0x30>
	__disable_irq();
    2fc6:	b672      	cpsid	i
	ret = rx_first[endpoint];
    2fc8:	490a      	ldr	r1, [pc, #40]	; (2ff4 <usb_rx+0x34>)
    2fca:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2fce:	b168      	cbz	r0, 2fec <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2fd0:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2fd2:	4c09      	ldr	r4, [pc, #36]	; (2ff8 <usb_rx+0x38>)
    2fd4:	8805      	ldrh	r5, [r0, #0]
    2fd6:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2fda:	6846      	ldr	r6, [r0, #4]
    2fdc:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2fe0:	1b52      	subs	r2, r2, r5
    2fe2:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2fe6:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2fe8:	bc70      	pop	{r4, r5, r6}
    2fea:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2fec:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2fee:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2ff0:	2000      	movs	r0, #0
    2ff2:	4770      	bx	lr
    2ff4:	1fff93ac 	.word	0x1fff93ac
    2ff8:	1fff95fc 	.word	0x1fff95fc

00002ffc <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2ffc:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2ffe:	2803      	cmp	r0, #3
    3000:	d80b      	bhi.n	301a <usb_tx_packet_count+0x1e>
	__disable_irq();
    3002:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3004:	4b07      	ldr	r3, [pc, #28]	; (3024 <usb_tx_packet_count+0x28>)
    3006:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    300a:	b143      	cbz	r3, 301e <usb_tx_packet_count+0x22>
    300c:	2000      	movs	r0, #0
    300e:	685b      	ldr	r3, [r3, #4]
    3010:	3001      	adds	r0, #1
    3012:	2b00      	cmp	r3, #0
    3014:	d1fb      	bne.n	300e <usb_tx_packet_count+0x12>
	__enable_irq();
    3016:	b662      	cpsie	i
	return count;
    3018:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    301a:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    301c:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    301e:	4618      	mov	r0, r3
    3020:	e7f9      	b.n	3016 <usb_tx_packet_count+0x1a>
    3022:	bf00      	nop
    3024:	1fff9400 	.word	0x1fff9400

00003028 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    3028:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    302a:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    302c:	4a2b      	ldr	r2, [pc, #172]	; (30dc <usb_rx_memory+0xb4>)
    302e:	7813      	ldrb	r3, [r2, #0]
    3030:	071d      	lsls	r5, r3, #28
    3032:	d506      	bpl.n	3042 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3034:	4b2a      	ldr	r3, [pc, #168]	; (30e0 <usb_rx_memory+0xb8>)
    3036:	6a19      	ldr	r1, [r3, #32]
    3038:	2900      	cmp	r1, #0
    303a:	d036      	beq.n	30aa <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    303c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    303e:	2900      	cmp	r1, #0
    3040:	d041      	beq.n	30c6 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3042:	7853      	ldrb	r3, [r2, #1]
    3044:	071c      	lsls	r4, r3, #28
    3046:	d506      	bpl.n	3056 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3048:	4b25      	ldr	r3, [pc, #148]	; (30e0 <usb_rx_memory+0xb8>)
    304a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    304c:	2900      	cmp	r1, #0
    304e:	d03e      	beq.n	30ce <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3050:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3052:	2900      	cmp	r1, #0
    3054:	d039      	beq.n	30ca <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3056:	7893      	ldrb	r3, [r2, #2]
    3058:	0719      	lsls	r1, r3, #28
    305a:	d505      	bpl.n	3068 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    305c:	4b20      	ldr	r3, [pc, #128]	; (30e0 <usb_rx_memory+0xb8>)
    305e:	6e19      	ldr	r1, [r3, #96]	; 0x60
    3060:	2900      	cmp	r1, #0
    3062:	d036      	beq.n	30d2 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3064:	6e99      	ldr	r1, [r3, #104]	; 0x68
    3066:	b189      	cbz	r1, 308c <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3068:	78d3      	ldrb	r3, [r2, #3]
    306a:	071b      	lsls	r3, r3, #28
    306c:	d507      	bpl.n	307e <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    306e:	4b1c      	ldr	r3, [pc, #112]	; (30e0 <usb_rx_memory+0xb8>)
    3070:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    3074:	b37a      	cbz	r2, 30d6 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3076:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    307a:	2111      	movs	r1, #17
    307c:	b13a      	cbz	r2, 308e <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    307e:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    3080:	4b18      	ldr	r3, [pc, #96]	; (30e4 <usb_rx_memory+0xbc>)
    3082:	2200      	movs	r2, #0
    3084:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    3086:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    3088:	f000 be68 	b.w	3d5c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    308c:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    308e:	4c15      	ldr	r4, [pc, #84]	; (30e4 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3090:	4d15      	ldr	r5, [pc, #84]	; (30e8 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    3092:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3094:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3098:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    309c:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    309e:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    30a0:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    30a2:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    30a4:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    30a6:	bc30      	pop	{r4, r5}
    30a8:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    30aa:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    30ac:	4c0d      	ldr	r4, [pc, #52]	; (30e4 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    30ae:	4d0f      	ldr	r5, [pc, #60]	; (30ec <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    30b0:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    30b2:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    30b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    30ba:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    30bc:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    30be:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    30c0:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    30c2:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    30c4:	e7ef      	b.n	30a6 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    30c6:	2105      	movs	r1, #5
    30c8:	e7e1      	b.n	308e <usb_rx_memory+0x66>
    30ca:	2109      	movs	r1, #9
    30cc:	e7df      	b.n	308e <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    30ce:	2208      	movs	r2, #8
    30d0:	e7ec      	b.n	30ac <usb_rx_memory+0x84>
    30d2:	220c      	movs	r2, #12
    30d4:	e7ea      	b.n	30ac <usb_rx_memory+0x84>
    30d6:	2210      	movs	r2, #16
    30d8:	e7e8      	b.n	30ac <usb_rx_memory+0x84>
    30da:	bf00      	nop
    30dc:	00006928 	.word	0x00006928
    30e0:	1fff8000 	.word	0x1fff8000
    30e4:	1fff9429 	.word	0x1fff9429
    30e8:	004000c8 	.word	0x004000c8
    30ec:	00400088 	.word	0x00400088

000030f0 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    30f0:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    30f2:	2b03      	cmp	r3, #3
    30f4:	d81d      	bhi.n	3132 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    30f6:	4a1b      	ldr	r2, [pc, #108]	; (3164 <usb_tx+0x74>)
    30f8:	0140      	lsls	r0, r0, #5
    30fa:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    30fe:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3100:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    3102:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3104:	4c18      	ldr	r4, [pc, #96]	; (3168 <usb_tx+0x78>)
    3106:	5ce2      	ldrb	r2, [r4, r3]
    3108:	2a03      	cmp	r2, #3
    310a:	d81b      	bhi.n	3144 <usb_tx+0x54>
    310c:	e8df f002 	tbb	[pc, r2]
    3110:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3114:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3116:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3118:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    311a:	f010 0f08 	tst.w	r0, #8
    311e:	bf14      	ite	ne
    3120:	23c8      	movne	r3, #200	; 0xc8
    3122:	2388      	moveq	r3, #136	; 0x88
    3124:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3128:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    312a:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    312c:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    312e:	b662      	cpsie	i
}
    3130:	bc30      	pop	{r4, r5}
    3132:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3134:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    3136:	2202      	movs	r2, #2
		break;
    3138:	e7ed      	b.n	3116 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    313a:	2205      	movs	r2, #5
    313c:	e7eb      	b.n	3116 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    313e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3140:	2204      	movs	r2, #4
		break;
    3142:	e7e8      	b.n	3116 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3144:	4a09      	ldr	r2, [pc, #36]	; (316c <usb_tx+0x7c>)
    3146:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    314a:	b138      	cbz	r0, 315c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    314c:	4a08      	ldr	r2, [pc, #32]	; (3170 <usb_tx+0x80>)
    314e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    3152:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3154:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    3158:	b662      	cpsie	i
		return;
    315a:	e7e9      	b.n	3130 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    315c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    3160:	4a03      	ldr	r2, [pc, #12]	; (3170 <usb_tx+0x80>)
    3162:	e7f7      	b.n	3154 <usb_tx+0x64>
    3164:	1fff8000 	.word	0x1fff8000
    3168:	1fff9438 	.word	0x1fff9438
    316c:	1fff9400 	.word	0x1fff9400
    3170:	1fff9410 	.word	0x1fff9410

00003174 <usb_isr>:
}



void usb_isr(void)
{
    3174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3178:	f8df b30c 	ldr.w	fp, [pc, #780]	; 3488 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    317c:	f8df a30c 	ldr.w	sl, [pc, #780]	; 348c <usb_isr+0x318>
}



void usb_isr(void)
{
    3180:	b087      	sub	sp, #28
    3182:	e044      	b.n	320e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3184:	4fab      	ldr	r7, [pc, #684]	; (3434 <usb_isr+0x2c0>)
    3186:	ea4f 0893 	mov.w	r8, r3, lsr #2
    318a:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    318e:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3190:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3194:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3198:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    319a:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    319e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    31a2:	2b00      	cmp	r3, #0
    31a4:	f040 8102 	bne.w	33ac <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    31a8:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    31ac:	0c1b      	lsrs	r3, r3, #16
    31ae:	b299      	uxth	r1, r3
    31b0:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    31b4:	2b00      	cmp	r3, #0
    31b6:	f000 80f0 	beq.w	339a <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    31ba:	4b9f      	ldr	r3, [pc, #636]	; (3438 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    31bc:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    31c0:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    31c4:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    31c8:	2a00      	cmp	r2, #0
    31ca:	f000 82c5 	beq.w	3758 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    31ce:	4d9b      	ldr	r5, [pc, #620]	; (343c <usb_isr+0x2c8>)
    31d0:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    31d4:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    31d6:	4c9a      	ldr	r4, [pc, #616]	; (3440 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    31d8:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    31dc:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    31e0:	4419      	add	r1, r3
    31e2:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    31e6:	f000 fd99 	bl	3d1c <usb_malloc>
					if (packet) {
    31ea:	2800      	cmp	r0, #0
    31ec:	f000 82ad 	beq.w	374a <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    31f0:	4a94      	ldr	r2, [pc, #592]	; (3444 <usb_isr+0x2d0>)
    31f2:	4b95      	ldr	r3, [pc, #596]	; (3448 <usb_isr+0x2d4>)
    31f4:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    31f8:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    31fc:	bf18      	it	ne
    31fe:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3200:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3204:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3208:	2308      	movs	r3, #8
    320a:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    320e:	f89b 4000 	ldrb.w	r4, [fp]
    3212:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3214:	0761      	lsls	r1, r4, #29
    3216:	d51a      	bpl.n	324e <usb_isr+0xda>
		if (usb_configuration) {
    3218:	4b8c      	ldr	r3, [pc, #560]	; (344c <usb_isr+0x2d8>)
    321a:	781b      	ldrb	r3, [r3, #0]
    321c:	b1a3      	cbz	r3, 3248 <usb_isr+0xd4>
			t = usb_reboot_timer;
    321e:	498c      	ldr	r1, [pc, #560]	; (3450 <usb_isr+0x2dc>)
    3220:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    3222:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    3226:	b122      	cbz	r2, 3232 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    3228:	3b01      	subs	r3, #1
    322a:	b2db      	uxtb	r3, r3
    322c:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    322e:	b903      	cbnz	r3, 3232 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3230:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3232:	4988      	ldr	r1, [pc, #544]	; (3454 <usb_isr+0x2e0>)
    3234:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    3236:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    323a:	b12a      	cbz	r2, 3248 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    323c:	3b01      	subs	r3, #1
    323e:	b2db      	uxtb	r3, r3
    3240:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    3242:	2b00      	cmp	r3, #0
    3244:	f000 8257 	beq.w	36f6 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    3248:	2304      	movs	r3, #4
    324a:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    324e:	f004 0308 	and.w	r3, r4, #8
    3252:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3256:	2b00      	cmp	r3, #0
    3258:	f000 80cc 	beq.w	33f4 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    325c:	f89a 3000 	ldrb.w	r3, [sl]
    3260:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    3262:	091e      	lsrs	r6, r3, #4
    3264:	d18e      	bne.n	3184 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3266:	089c      	lsrs	r4, r3, #2
    3268:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 3434 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    326c:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3270:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3274:	f3c2 0283 	ubfx	r2, r2, #2, #4
    3278:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    327a:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    327c:	2a0c      	cmp	r2, #12
    327e:	f200 8088 	bhi.w	3392 <usb_isr+0x21e>
    3282:	e8df f002 	tbb	[pc, r2]
    3286:	7c7c      	.short	0x7c7c
    3288:	86868686 	.word	0x86868686
    328c:	86478686 	.word	0x86478686
    3290:	8686      	.short	0x8686
    3292:	07          	.byte	0x07
    3293:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3294:	6808      	ldr	r0, [r1, #0]
    3296:	4d70      	ldr	r5, [pc, #448]	; (3458 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    3298:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    329a:	4f70      	ldr	r7, [pc, #448]	; (345c <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    329c:	4e70      	ldr	r6, [pc, #448]	; (3460 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    329e:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    32a0:	b281      	uxth	r1, r0
    32a2:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    32a6:	4b67      	ldr	r3, [pc, #412]	; (3444 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    32a8:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    32aa:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    32ae:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    32b0:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    32b2:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    32b6:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    32b8:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    32bc:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    32c0:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    32c4:	4c5b      	ldr	r4, [pc, #364]	; (3434 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    32c6:	f200 80e3 	bhi.w	3490 <usb_isr+0x31c>
    32ca:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    32ce:	f080 8346 	bcs.w	395e <usb_isr+0x7ea>
    32d2:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    32d6:	f000 82fc 	beq.w	38d2 <usb_isr+0x75e>
    32da:	f200 828d 	bhi.w	37f8 <usb_isr+0x684>
    32de:	2980      	cmp	r1, #128	; 0x80
    32e0:	f000 8377 	beq.w	39d2 <usb_isr+0x85e>
    32e4:	2982      	cmp	r1, #130	; 0x82
    32e6:	f040 82fa 	bne.w	38de <usb_isr+0x76a>
    32ea:	88a9      	ldrh	r1, [r5, #4]
    32ec:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    32f0:	2904      	cmp	r1, #4
    32f2:	f200 82f4 	bhi.w	38de <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    32f6:	485b      	ldr	r0, [pc, #364]	; (3464 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    32f8:	4c5b      	ldr	r4, [pc, #364]	; (3468 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    32fa:	0089      	lsls	r1, r1, #2
    32fc:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    32fe:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3300:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3302:	7802      	ldrb	r2, [r0, #0]
    3304:	0793      	lsls	r3, r2, #30
    3306:	f140 8458 	bpl.w	3bba <usb_isr+0xa46>
    330a:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    330e:	f04f 0e02 	mov.w	lr, #2
    3312:	e342      	b.n	399a <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3314:	4f51      	ldr	r7, [pc, #324]	; (345c <usb_isr+0x2e8>)
    3316:	683a      	ldr	r2, [r7, #0]
		if (data) {
    3318:	b332      	cbz	r2, 3368 <usb_isr+0x1f4>
			size = ep0_tx_len;
    331a:	4b54      	ldr	r3, [pc, #336]	; (346c <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    331c:	4e50      	ldr	r6, [pc, #320]	; (3460 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    331e:	4954      	ldr	r1, [pc, #336]	; (3470 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3320:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3322:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3324:	780d      	ldrb	r5, [r1, #0]
    3326:	2840      	cmp	r0, #64	; 0x40
    3328:	4686      	mov	lr, r0
    332a:	f045 0802 	orr.w	r8, r5, #2
    332e:	bf28      	it	cs
    3330:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3334:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    3336:	f084 0401 	eor.w	r4, r4, #1
    333a:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    333c:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3340:	bf0c      	ite	eq
    3342:	2488      	moveq	r4, #136	; 0x88
    3344:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3346:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    334a:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    334c:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3350:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3354:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3356:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3358:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    335c:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    335e:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3360:	2800      	cmp	r0, #0
    3362:	f000 8145 	beq.w	35f0 <usb_isr+0x47c>
    3366:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3368:	4b3b      	ldr	r3, [pc, #236]	; (3458 <usb_isr+0x2e4>)
    336a:	881a      	ldrh	r2, [r3, #0]
    336c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3370:	d10f      	bne.n	3392 <usb_isr+0x21e>
			setup.bRequest = 0;
    3372:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3374:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    3376:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3378:	4b3e      	ldr	r3, [pc, #248]	; (3474 <usb_isr+0x300>)
    337a:	701a      	strb	r2, [r3, #0]
    337c:	e009      	b.n	3392 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    337e:	4a36      	ldr	r2, [pc, #216]	; (3458 <usb_isr+0x2e4>)
    3380:	8810      	ldrh	r0, [r2, #0]
    3382:	f242 0221 	movw	r2, #8225	; 0x2021
    3386:	4290      	cmp	r0, r2
    3388:	f000 8137 	beq.w	35fa <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    338c:	4a2d      	ldr	r2, [pc, #180]	; (3444 <usb_isr+0x2d0>)
    338e:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3392:	4a39      	ldr	r2, [pc, #228]	; (3478 <usb_isr+0x304>)
    3394:	2301      	movs	r3, #1
    3396:	7013      	strb	r3, [r2, #0]
    3398:	e736      	b.n	3208 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    339a:	4a2a      	ldr	r2, [pc, #168]	; (3444 <usb_isr+0x2d0>)
    339c:	4b2a      	ldr	r3, [pc, #168]	; (3448 <usb_isr+0x2d4>)
    339e:	f019 0f08 	tst.w	r9, #8
    33a2:	bf18      	it	ne
    33a4:	4613      	movne	r3, r2
    33a6:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    33aa:	e72d      	b.n	3208 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    33ac:	f000 fcd6 	bl	3d5c <usb_free>
				packet = tx_first[endpoint];
    33b0:	4a32      	ldr	r2, [pc, #200]	; (347c <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    33b2:	4933      	ldr	r1, [pc, #204]	; (3480 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    33b4:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    33b8:	2b00      	cmp	r3, #0
    33ba:	f000 81d1 	beq.w	3760 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    33be:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    33c0:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    33c2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    33c6:	f103 0208 	add.w	r2, r3, #8
    33ca:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    33ce:	2c03      	cmp	r4, #3
    33d0:	d805      	bhi.n	33de <usb_isr+0x26a>
    33d2:	e8df f004 	tbb	[pc, r4]
    33d6:	022c      	.short	0x022c
    33d8:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    33da:	2202      	movs	r2, #2
    33dc:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    33de:	881a      	ldrh	r2, [r3, #0]
    33e0:	f019 0f08 	tst.w	r9, #8
    33e4:	bf0c      	ite	eq
    33e6:	2388      	moveq	r3, #136	; 0x88
    33e8:	23c8      	movne	r3, #200	; 0xc8
    33ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    33ee:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    33f2:	e709      	b.n	3208 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    33f4:	07e0      	lsls	r0, r4, #31
    33f6:	f100 8181 	bmi.w	36fc <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    33fa:	0621      	lsls	r1, r4, #24
    33fc:	f100 81f2 	bmi.w	37e4 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3400:	07a2      	lsls	r2, r4, #30
    3402:	d506      	bpl.n	3412 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    3404:	4a1f      	ldr	r2, [pc, #124]	; (3484 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3406:	4920      	ldr	r1, [pc, #128]	; (3488 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3408:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    340a:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    340c:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    340e:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3410:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3412:	06e3      	lsls	r3, r4, #27
    3414:	d502      	bpl.n	341c <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    3416:	4b1c      	ldr	r3, [pc, #112]	; (3488 <usb_isr+0x314>)
    3418:	2210      	movs	r2, #16
    341a:	701a      	strb	r2, [r3, #0]
	}

}
    341c:	b007      	add	sp, #28
    341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3422:	2204      	movs	r2, #4
    3424:	558a      	strb	r2, [r1, r6]
						break;
    3426:	e7da      	b.n	33de <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3428:	2205      	movs	r2, #5
    342a:	558a      	strb	r2, [r1, r6]
						break;
    342c:	e7d7      	b.n	33de <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    342e:	2203      	movs	r2, #3
    3430:	558a      	strb	r2, [r1, r6]
						break;
    3432:	e7d4      	b.n	33de <usb_isr+0x26a>
    3434:	1fff8000 	.word	0x1fff8000
    3438:	1fff93ac 	.word	0x1fff93ac
    343c:	1fff9358 	.word	0x1fff9358
    3440:	1fff95fc 	.word	0x1fff95fc
    3444:	004000c8 	.word	0x004000c8
    3448:	00400088 	.word	0x00400088
    344c:	1fff9434 	.word	0x1fff9434
    3450:	1fff93bd 	.word	0x1fff93bd
    3454:	1fff943c 	.word	0x1fff943c
    3458:	1fff9420 	.word	0x1fff9420
    345c:	1fff9354 	.word	0x1fff9354
    3460:	1fff93bc 	.word	0x1fff93bc
    3464:	400720c0 	.word	0x400720c0
    3468:	1fff942c 	.word	0x1fff942c
    346c:	1fff9368 	.word	0x1fff9368
    3470:	1fff9428 	.word	0x1fff9428
    3474:	40072098 	.word	0x40072098
    3478:	40072094 	.word	0x40072094
    347c:	1fff9400 	.word	0x1fff9400
    3480:	1fff9438 	.word	0x1fff9438
    3484:	40072088 	.word	0x40072088
    3488:	40072080 	.word	0x40072080
    348c:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3490:	f242 0021 	movw	r0, #8225	; 0x2021
    3494:	4281      	cmp	r1, r0
    3496:	f000 812a 	beq.w	36ee <usb_isr+0x57a>
    349a:	f200 80d8 	bhi.w	364e <usb_isr+0x4da>
    349e:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    34a2:	f000 8276 	beq.w	3992 <usb_isr+0x81e>
    34a6:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    34aa:	f040 8218 	bne.w	38de <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    34ae:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    34b0:	49b3      	ldr	r1, [pc, #716]	; (3780 <usb_isr+0x60c>)
    34b2:	78a8      	ldrb	r0, [r5, #2]
    34b4:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    34b6:	0612      	lsls	r2, r2, #24
    34b8:	f100 833a 	bmi.w	3b30 <usb_isr+0x9bc>
    34bc:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    34c0:	49b0      	ldr	r1, [pc, #704]	; (3784 <usb_isr+0x610>)
    34c2:	0613      	lsls	r3, r2, #24
    34c4:	f100 830c 	bmi.w	3ae0 <usb_isr+0x96c>
    34c8:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    34cc:	49ad      	ldr	r1, [pc, #692]	; (3784 <usb_isr+0x610>)
    34ce:	0615      	lsls	r5, r2, #24
    34d0:	f100 8301 	bmi.w	3ad6 <usb_isr+0x962>
    34d4:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    34d8:	49aa      	ldr	r1, [pc, #680]	; (3784 <usb_isr+0x610>)
    34da:	0614      	lsls	r4, r2, #24
    34dc:	f100 82f6 	bmi.w	3acc <usb_isr+0x958>
    34e0:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    34e4:	49a7      	ldr	r1, [pc, #668]	; (3784 <usb_isr+0x610>)
    34e6:	0610      	lsls	r0, r2, #24
    34e8:	f100 834a 	bmi.w	3b80 <usb_isr+0xa0c>
    34ec:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    34f0:	49a4      	ldr	r1, [pc, #656]	; (3784 <usb_isr+0x610>)
    34f2:	0612      	lsls	r2, r2, #24
    34f4:	f100 833f 	bmi.w	3b76 <usb_isr+0xa02>
    34f8:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    34fc:	49a1      	ldr	r1, [pc, #644]	; (3784 <usb_isr+0x610>)
    34fe:	0613      	lsls	r3, r2, #24
    3500:	f100 8334 	bmi.w	3b6c <usb_isr+0x9f8>
    3504:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    3508:	499e      	ldr	r1, [pc, #632]	; (3784 <usb_isr+0x610>)
    350a:	0615      	lsls	r5, r2, #24
    350c:	f100 8329 	bmi.w	3b62 <usb_isr+0x9ee>
    3510:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    3514:	499b      	ldr	r1, [pc, #620]	; (3784 <usb_isr+0x610>)
    3516:	0614      	lsls	r4, r2, #24
    3518:	f100 831e 	bmi.w	3b58 <usb_isr+0x9e4>
    351c:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    3520:	4998      	ldr	r1, [pc, #608]	; (3784 <usb_isr+0x610>)
    3522:	0610      	lsls	r0, r2, #24
    3524:	f100 8313 	bmi.w	3b4e <usb_isr+0x9da>
    3528:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    352c:	4995      	ldr	r1, [pc, #596]	; (3784 <usb_isr+0x610>)
    352e:	0612      	lsls	r2, r2, #24
    3530:	f100 8308 	bmi.w	3b44 <usb_isr+0x9d0>
    3534:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    3538:	4992      	ldr	r1, [pc, #584]	; (3784 <usb_isr+0x610>)
    353a:	0613      	lsls	r3, r2, #24
    353c:	f100 82fd 	bmi.w	3b3a <usb_isr+0x9c6>
    3540:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    3544:	498f      	ldr	r1, [pc, #572]	; (3784 <usb_isr+0x610>)
    3546:	0615      	lsls	r5, r2, #24
    3548:	f100 8331 	bmi.w	3bae <usb_isr+0xa3a>
    354c:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    3550:	498c      	ldr	r1, [pc, #560]	; (3784 <usb_isr+0x610>)
    3552:	0614      	lsls	r4, r2, #24
    3554:	f100 8325 	bmi.w	3ba2 <usb_isr+0xa2e>
    3558:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    355c:	4989      	ldr	r1, [pc, #548]	; (3784 <usb_isr+0x610>)
    355e:	0610      	lsls	r0, r2, #24
    3560:	f100 8319 	bmi.w	3b96 <usb_isr+0xa22>
    3564:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    3568:	4986      	ldr	r1, [pc, #536]	; (3784 <usb_isr+0x610>)
    356a:	0612      	lsls	r2, r2, #24
    356c:	f100 830d 	bmi.w	3b8a <usb_isr+0xa16>
    3570:	4885      	ldr	r0, [pc, #532]	; (3788 <usb_isr+0x614>)
    3572:	4a86      	ldr	r2, [pc, #536]	; (378c <usb_isr+0x618>)
    3574:	4986      	ldr	r1, [pc, #536]	; (3790 <usb_isr+0x61c>)
    3576:	9001      	str	r0, [sp, #4]
    3578:	4886      	ldr	r0, [pc, #536]	; (3794 <usb_isr+0x620>)
    357a:	4d87      	ldr	r5, [pc, #540]	; (3798 <usb_isr+0x624>)
    357c:	4c87      	ldr	r4, [pc, #540]	; (379c <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    357e:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    3580:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3582:	9605      	str	r6, [sp, #20]
    3584:	9502      	str	r5, [sp, #8]
    3586:	4680      	mov	r8, r0
    3588:	460f      	mov	r7, r1
    358a:	4616      	mov	r6, r2
    358c:	461d      	mov	r5, r3
    358e:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3590:	6830      	ldr	r0, [r6, #0]
			while (p) {
    3592:	b128      	cbz	r0, 35a0 <usb_isr+0x42c>
				n = p->next;
    3594:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    3596:	f000 fbe1 	bl	3d5c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    359a:	4620      	mov	r0, r4
    359c:	2c00      	cmp	r4, #0
    359e:	d1f9      	bne.n	3594 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    35a0:	2300      	movs	r3, #0
    35a2:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    35a4:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    35a6:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    35a8:	461a      	mov	r2, r3
    35aa:	2300      	movs	r3, #0
    35ac:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    35b0:	b128      	cbz	r0, 35be <usb_isr+0x44a>
				n = p->next;
    35b2:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    35b4:	f000 fbd2 	bl	3d5c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    35b8:	4620      	mov	r0, r4
    35ba:	2c00      	cmp	r4, #0
    35bc:	d1f9      	bne.n	35b2 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    35be:	2200      	movs	r2, #0
    35c0:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    35c2:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    35c4:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    35c8:	4611      	mov	r1, r2
    35ca:	2200      	movs	r2, #0
    35cc:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    35d0:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    35d2:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    35d4:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    35d6:	f04f 0100 	mov.w	r1, #0
    35da:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    35de:	2b03      	cmp	r3, #3
    35e0:	f200 812b 	bhi.w	383a <usb_isr+0x6c6>
    35e4:	e8df f013 	tbh	[pc, r3, lsl #1]
    35e8:	01250170 	.word	0x01250170
    35ec:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    35f0:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    35f4:	bf18      	it	ne
    35f6:	2200      	movne	r2, #0
    35f8:	e6b5      	b.n	3366 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    35fa:	4a69      	ldr	r2, [pc, #420]	; (37a0 <usb_isr+0x62c>)
    35fc:	780d      	ldrb	r5, [r1, #0]
    35fe:	7848      	ldrb	r0, [r1, #1]
    3600:	7015      	strb	r5, [r2, #0]
    3602:	7050      	strb	r0, [r2, #1]
    3604:	788d      	ldrb	r5, [r1, #2]
    3606:	78c8      	ldrb	r0, [r1, #3]
    3608:	7095      	strb	r5, [r2, #2]
    360a:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    360c:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    360e:	790d      	ldrb	r5, [r1, #4]
    3610:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3612:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3614:	794d      	ldrb	r5, [r1, #5]
    3616:	7989      	ldrb	r1, [r1, #6]
    3618:	7155      	strb	r5, [r2, #5]
    361a:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    361c:	f000 819b 	beq.w	3956 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3620:	4960      	ldr	r1, [pc, #384]	; (37a4 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3622:	4e61      	ldr	r6, [pc, #388]	; (37a8 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3624:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3626:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3628:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    362c:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    362e:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3632:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3634:	bf0c      	ite	eq
    3636:	2188      	moveq	r1, #136	; 0x88
    3638:	21c8      	movne	r1, #200	; 0xc8
    363a:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    363e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3642:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3646:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3648:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    364a:	6051      	str	r1, [r2, #4]
    364c:	e69e      	b.n	338c <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    364e:	f242 2021 	movw	r0, #8737	; 0x2221
    3652:	4281      	cmp	r1, r0
    3654:	f040 81cb 	bne.w	39ee <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3658:	4b54      	ldr	r3, [pc, #336]	; (37ac <usb_isr+0x638>)
    365a:	4c55      	ldr	r4, [pc, #340]	; (37b0 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    365c:	4955      	ldr	r1, [pc, #340]	; (37b4 <usb_isr+0x640>)
    365e:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3660:	681d      	ldr	r5, [r3, #0]
    3662:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3664:	f8cd e004 	str.w	lr, [sp, #4]
    3668:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    366a:	2000      	movs	r0, #0
    366c:	9002      	str	r0, [sp, #8]
    366e:	4680      	mov	r8, r0
    3670:	4684      	mov	ip, r0
    3672:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3674:	494b      	ldr	r1, [pc, #300]	; (37a4 <usb_isr+0x630>)
    3676:	780d      	ldrb	r5, [r1, #0]
    3678:	f045 0e02 	orr.w	lr, r5, #2
    367c:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    3680:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3682:	9b01      	ldr	r3, [sp, #4]
    3684:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3686:	9b03      	ldr	r3, [sp, #12]
    3688:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    368a:	bf0c      	ite	eq
    368c:	2488      	moveq	r4, #136	; 0x88
    368e:	24c8      	movne	r4, #200	; 0xc8
    3690:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3694:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3698:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    369c:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    369e:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36a0:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 3784 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    36a4:	4b40      	ldr	r3, [pc, #256]	; (37a8 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    36a6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 37a4 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    36aa:	2800      	cmp	r0, #0
    36ac:	f040 811e 	bne.w	38ec <usb_isr+0x778>
    36b0:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    36b4:	d11b      	bne.n	36ee <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36b6:	f044 0c02 	orr.w	ip, r4, #2
    36ba:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    36be:	9c02      	ldr	r4, [sp, #8]
    36c0:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 3784 <usb_isr+0x610>
    36c4:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36c6:	2a00      	cmp	r2, #0
    36c8:	f040 8126 	bne.w	3918 <usb_isr+0x7a4>
    36cc:	0402      	lsls	r2, r0, #16
    36ce:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    36d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36d6:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    36da:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    36dc:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    36de:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    36e0:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    36e2:	2840      	cmp	r0, #64	; 0x40
    36e4:	d103      	bne.n	36ee <usb_isr+0x57a>
    36e6:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    36e8:	4a33      	ldr	r2, [pc, #204]	; (37b8 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    36ea:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    36ec:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    36ee:	4a33      	ldr	r2, [pc, #204]	; (37bc <usb_isr+0x648>)
    36f0:	2301      	movs	r3, #1
    36f2:	7013      	strb	r3, [r2, #0]
    36f4:	e64d      	b.n	3392 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    36f6:	f000 fc9d 	bl	4034 <usb_serial_flush_callback>
    36fa:	e5a5      	b.n	3248 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    36fc:	4b21      	ldr	r3, [pc, #132]	; (3784 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    36fe:	482f      	ldr	r0, [pc, #188]	; (37bc <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    3700:	4928      	ldr	r1, [pc, #160]	; (37a4 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3702:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3704:	f04f 0e02 	mov.w	lr, #2
    3708:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    370c:	4f2c      	ldr	r7, [pc, #176]	; (37c0 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    370e:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3710:	492c      	ldr	r1, [pc, #176]	; (37c4 <usb_isr+0x650>)
    3712:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3714:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3716:	4e2c      	ldr	r6, [pc, #176]	; (37c8 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    3718:	4d2c      	ldr	r5, [pc, #176]	; (37cc <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    371a:	4c2d      	ldr	r4, [pc, #180]	; (37d0 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    371c:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    371e:	210d      	movs	r1, #13
    3720:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3722:	21ff      	movs	r1, #255	; 0xff
    3724:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3726:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 37e0 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    372a:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    372c:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    372e:	4d29      	ldr	r5, [pc, #164]	; (37d4 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3730:	4a29      	ldr	r2, [pc, #164]	; (37d8 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3732:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3736:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3738:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    373a:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    373e:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3740:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3742:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3744:	b007      	add	sp, #28
    3746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    374a:	4a24      	ldr	r2, [pc, #144]	; (37dc <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    374c:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3750:	7813      	ldrb	r3, [r2, #0]
    3752:	3301      	adds	r3, #1
    3754:	7013      	strb	r3, [r2, #0]
    3756:	e557      	b.n	3208 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3758:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    375c:	4d0e      	ldr	r5, [pc, #56]	; (3798 <usb_isr+0x624>)
    375e:	e53a      	b.n	31d6 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3760:	5d8b      	ldrb	r3, [r1, r6]
    3762:	2b03      	cmp	r3, #3
    3764:	f200 80f0 	bhi.w	3948 <usb_isr+0x7d4>
    3768:	a201      	add	r2, pc, #4	; (adr r2, 3770 <usb_isr+0x5fc>)
    376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    376e:	bf00      	nop
    3770:	00003209 	.word	0x00003209
    3774:	00003209 	.word	0x00003209
    3778:	0000382d 	.word	0x0000382d
    377c:	00003827 	.word	0x00003827
    3780:	1fff9434 	.word	0x1fff9434
    3784:	1fff8000 	.word	0x1fff8000
    3788:	1fff9410 	.word	0x1fff9410
    378c:	1fff93ac 	.word	0x1fff93ac
    3790:	1fff9400 	.word	0x1fff9400
    3794:	1fff9438 	.word	0x1fff9438
    3798:	1fff9358 	.word	0x1fff9358
    379c:	1fff95fc 	.word	0x1fff95fc
    37a0:	1fff9604 	.word	0x1fff9604
    37a4:	1fff9428 	.word	0x1fff9428
    37a8:	1fff93bc 	.word	0x1fff93bc
    37ac:	1fff9350 	.word	0x1fff9350
    37b0:	1fff960c 	.word	0x1fff960c
    37b4:	1fff944c 	.word	0x1fff944c
    37b8:	1fff9368 	.word	0x1fff9368
    37bc:	40072094 	.word	0x40072094
    37c0:	400720c0 	.word	0x400720c0
    37c4:	00400088 	.word	0x00400088
    37c8:	40072088 	.word	0x40072088
    37cc:	40072080 	.word	0x40072080
    37d0:	40072098 	.word	0x40072098
    37d4:	1fff936c 	.word	0x1fff936c
    37d8:	1fff93c0 	.word	0x1fff93c0
    37dc:	1fff9429 	.word	0x1fff9429
    37e0:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    37e4:	49c1      	ldr	r1, [pc, #772]	; (3aec <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    37e6:	4bc2      	ldr	r3, [pc, #776]	; (3af0 <usb_isr+0x97c>)
    37e8:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    37ea:	200d      	movs	r0, #13
    37ec:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    37ee:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    37f0:	07a2      	lsls	r2, r4, #30
    37f2:	f57f ae0e 	bpl.w	3412 <usb_isr+0x29e>
    37f6:	e605      	b.n	3404 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37f8:	f240 3202 	movw	r2, #770	; 0x302
    37fc:	4291      	cmp	r1, r2
    37fe:	f040 80ee 	bne.w	39de <usb_isr+0x86a>
    3802:	88a9      	ldrh	r1, [r5, #4]
    3804:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3808:	2904      	cmp	r1, #4
    380a:	d868      	bhi.n	38de <usb_isr+0x76a>
    380c:	886a      	ldrh	r2, [r5, #2]
    380e:	2a00      	cmp	r2, #0
    3810:	d165      	bne.n	38de <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3812:	48b6      	ldr	r0, [pc, #728]	; (3aec <usb_isr+0x978>)
    3814:	f8cd e004 	str.w	lr, [sp, #4]
    3818:	0089      	lsls	r1, r1, #2
    381a:	4408      	add	r0, r1
    381c:	7801      	ldrb	r1, [r0, #0]
    381e:	f041 0102 	orr.w	r1, r1, #2
    3822:	7001      	strb	r1, [r0, #0]
    3824:	e721      	b.n	366a <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3826:	2301      	movs	r3, #1
    3828:	558b      	strb	r3, [r1, r6]
						break;
    382a:	e4ed      	b.n	3208 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    382c:	2300      	movs	r3, #0
    382e:	558b      	strb	r3, [r1, r6]
						break;
    3830:	e4ea      	b.n	3208 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3832:	f04f 0301 	mov.w	r3, #1
    3836:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    383a:	3501      	adds	r5, #1
    383c:	2d04      	cmp	r5, #4
    383e:	f106 0604 	add.w	r6, r6, #4
    3842:	f107 0704 	add.w	r7, r7, #4
    3846:	f108 0801 	add.w	r8, r8, #1
    384a:	f47f aea1 	bne.w	3590 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    384e:	4ca9      	ldr	r4, [pc, #676]	; (3af4 <usb_isr+0x980>)
			*reg = epconf;
    3850:	4ba9      	ldr	r3, [pc, #676]	; (3af8 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3852:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3854:	4da9      	ldr	r5, [pc, #676]	; (3afc <usb_isr+0x988>)
    3856:	9f04      	ldr	r7, [sp, #16]
    3858:	9e05      	ldr	r6, [sp, #20]
    385a:	2100      	movs	r1, #0
    385c:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    385e:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3860:	0713      	lsls	r3, r2, #28
    3862:	f100 8105 	bmi.w	3a70 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3866:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    3868:	49a5      	ldr	r1, [pc, #660]	; (3b00 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    386a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 3b0c <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    386e:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3870:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3872:	f04f 0100 	mov.w	r1, #0
    3876:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    387a:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    387e:	f100 80e0 	bmi.w	3a42 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3882:	49a0      	ldr	r1, [pc, #640]	; (3b04 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3884:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    3886:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3888:	2100      	movs	r1, #0
    388a:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    388e:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3892:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3894:	f8df 8274 	ldr.w	r8, [pc, #628]	; 3b0c <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3898:	f100 8101 	bmi.w	3a9e <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    389c:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    389e:	499a      	ldr	r1, [pc, #616]	; (3b08 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    38a0:	4c9a      	ldr	r4, [pc, #616]	; (3b0c <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    38a2:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    38a4:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    38a6:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    38a8:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    38ac:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    38b0:	f100 80b0 	bmi.w	3a14 <usb_isr+0x8a0>
    38b4:	7833      	ldrb	r3, [r6, #0]
    38b6:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    38b8:	2100      	movs	r1, #0
    38ba:	f083 0201 	eor.w	r2, r3, #1
    38be:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    38c2:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    38c6:	e6d0      	b.n	366a <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    38c8:	f04f 0300 	mov.w	r3, #0
    38cc:	f888 3000 	strb.w	r3, [r8]
    38d0:	e7b3      	b.n	383a <usb_isr+0x6c6>
    38d2:	88a9      	ldrh	r1, [r5, #4]
    38d4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    38d8:	2904      	cmp	r1, #4
    38da:	f240 808d 	bls.w	39f8 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    38de:	4a83      	ldr	r2, [pc, #524]	; (3aec <usb_isr+0x978>)
    38e0:	230f      	movs	r3, #15
    38e2:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    38e4:	4a8a      	ldr	r2, [pc, #552]	; (3b10 <usb_isr+0x99c>)
    38e6:	2301      	movs	r3, #1
    38e8:	7013      	strb	r3, [r2, #0]
    38ea:	e552      	b.n	3392 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    38ec:	2840      	cmp	r0, #64	; 0x40
    38ee:	f67f aee2 	bls.w	36b6 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    38f2:	f044 0402 	orr.w	r4, r4, #2
    38f6:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    38fa:	9e02      	ldr	r6, [sp, #8]
    38fc:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38fe:	b1ba      	cbz	r2, 3930 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    3900:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3904:	4a83      	ldr	r2, [pc, #524]	; (3b14 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    3906:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3908:	4633      	mov	r3, r6
    390a:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    390c:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3910:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3912:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    3916:	e6e7      	b.n	36e8 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    3918:	f89d 3004 	ldrb.w	r3, [sp, #4]
    391c:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    391e:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3920:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3922:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3924:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3928:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    392a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    392e:	e6d8      	b.n	36e2 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    3930:	f89d 1004 	ldrb.w	r1, [sp, #4]
    3934:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3936:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3938:	4a77      	ldr	r2, [pc, #476]	; (3b18 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    393a:	f888 5000 	strb.w	r5, [r8]
    393e:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3940:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3942:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    3946:	e6cf      	b.n	36e8 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3948:	f019 0f08 	tst.w	r9, #8
    394c:	bf0c      	ite	eq
    394e:	2302      	moveq	r3, #2
    3950:	2303      	movne	r3, #3
    3952:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3954:	e458      	b.n	3208 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3956:	4a71      	ldr	r2, [pc, #452]	; (3b1c <usb_isr+0x9a8>)
    3958:	210f      	movs	r1, #15
    395a:	7011      	strb	r1, [r2, #0]
    395c:	e660      	b.n	3620 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    395e:	4a70      	ldr	r2, [pc, #448]	; (3b20 <usb_isr+0x9ac>)
    3960:	6854      	ldr	r4, [r2, #4]
    3962:	2c00      	cmp	r4, #0
    3964:	d0bb      	beq.n	38de <usb_isr+0x76a>
    3966:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3968:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    396c:	e003      	b.n	3976 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    396e:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    3970:	6854      	ldr	r4, [r2, #4]
    3972:	2c00      	cmp	r4, #0
    3974:	d0b3      	beq.n	38de <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3976:	8813      	ldrh	r3, [r2, #0]
    3978:	4283      	cmp	r3, r0
    397a:	d1f8      	bne.n	396e <usb_isr+0x7fa>
    397c:	8853      	ldrh	r3, [r2, #2]
    397e:	4573      	cmp	r3, lr
    3980:	d1f5      	bne.n	396e <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3982:	0a00      	lsrs	r0, r0, #8
    3984:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3986:	bf0c      	ite	eq
    3988:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    398c:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    3990:	e003      	b.n	399a <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3992:	4a64      	ldr	r2, [pc, #400]	; (3b24 <usb_isr+0x9b0>)
    3994:	4c64      	ldr	r4, [pc, #400]	; (3b28 <usb_isr+0x9b4>)
    3996:	7812      	ldrb	r2, [r2, #0]
    3998:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    399a:	88e8      	ldrh	r0, [r5, #6]
    399c:	4570      	cmp	r0, lr
    399e:	f080 813f 	bcs.w	3c20 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    39a2:	4962      	ldr	r1, [pc, #392]	; (3b2c <usb_isr+0x9b8>)
    39a4:	780d      	ldrb	r5, [r1, #0]
    39a6:	2840      	cmp	r0, #64	; 0x40
    39a8:	4684      	mov	ip, r0
    39aa:	f045 0e02 	orr.w	lr, r5, #2
    39ae:	bf28      	it	cs
    39b0:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    39b4:	eb04 030c 	add.w	r3, r4, ip
    39b8:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    39bc:	9302      	str	r3, [sp, #8]
    39be:	2301      	movs	r3, #1
    39c0:	6054      	str	r4, [r2, #4]
    39c2:	ebcc 0000 	rsb	r0, ip, r0
    39c6:	ea4f 480c 	mov.w	r8, ip, lsl #16
    39ca:	2200      	movs	r2, #0
    39cc:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39ce:	24c8      	movs	r4, #200	; 0xc8
    39d0:	e65e      	b.n	3690 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    39d2:	4c55      	ldr	r4, [pc, #340]	; (3b28 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    39d4:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    39d8:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    39da:	7062      	strb	r2, [r4, #1]
    39dc:	e7dd      	b.n	399a <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    39de:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    39e2:	f47f af7c 	bne.w	38de <usb_isr+0x76a>
    39e6:	2301      	movs	r3, #1
    39e8:	2200      	movs	r2, #0
    39ea:	9301      	str	r3, [sp, #4]
    39ec:	e63d      	b.n	366a <usb_isr+0x4f6>
    39ee:	f242 3221 	movw	r2, #8993	; 0x2321
    39f2:	4291      	cmp	r1, r2
    39f4:	d0f7      	beq.n	39e6 <usb_isr+0x872>
    39f6:	e772      	b.n	38de <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    39f8:	886a      	ldrh	r2, [r5, #2]
    39fa:	2a00      	cmp	r2, #0
    39fc:	f47f af6f 	bne.w	38de <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3a00:	483a      	ldr	r0, [pc, #232]	; (3aec <usb_isr+0x978>)
    3a02:	f8cd e004 	str.w	lr, [sp, #4]
    3a06:	0089      	lsls	r1, r1, #2
    3a08:	4408      	add	r0, r1
    3a0a:	7801      	ldrb	r1, [r0, #0]
    3a0c:	f021 0102 	bic.w	r1, r1, #2
    3a10:	7001      	strb	r1, [r0, #0]
    3a12:	e62a      	b.n	366a <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3a14:	f000 f982 	bl	3d1c <usb_malloc>
				if (p) {
    3a18:	2800      	cmp	r0, #0
    3a1a:	f000 80ef 	beq.w	3bfc <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    3a1e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3a20:	4a3d      	ldr	r2, [pc, #244]	; (3b18 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3a22:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3a26:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3a2a:	f000 f977 	bl	3d1c <usb_malloc>
				if (p) {
    3a2e:	2800      	cmp	r0, #0
    3a30:	f000 80de 	beq.w	3bf0 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    3a34:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a36:	4a37      	ldr	r2, [pc, #220]	; (3b14 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3a38:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a3c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    3a40:	e738      	b.n	38b4 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3a42:	f000 f96b 	bl	3d1c <usb_malloc>
				if (p) {
    3a46:	2800      	cmp	r0, #0
    3a48:	f000 80c0 	beq.w	3bcc <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    3a4c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3a4e:	4a32      	ldr	r2, [pc, #200]	; (3b18 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3a50:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3a54:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3a58:	f000 f960 	bl	3d1c <usb_malloc>
				if (p) {
    3a5c:	2800      	cmp	r0, #0
    3a5e:	f000 80af 	beq.w	3bc0 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    3a62:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a64:	4a2b      	ldr	r2, [pc, #172]	; (3b14 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3a66:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a6a:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    3a6e:	e708      	b.n	3882 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3a70:	f000 f954 	bl	3d1c <usb_malloc>
				if (p) {
    3a74:	2800      	cmp	r0, #0
    3a76:	f000 80cd 	beq.w	3c14 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3a7a:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3a7c:	4a26      	ldr	r2, [pc, #152]	; (3b18 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3a7e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3a82:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3a86:	f000 f949 	bl	3d1c <usb_malloc>
				if (p) {
    3a8a:	2800      	cmp	r0, #0
    3a8c:	f000 80bc 	beq.w	3c08 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    3a90:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a92:	4a20      	ldr	r2, [pc, #128]	; (3b14 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3a94:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a98:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    3a9c:	e6e3      	b.n	3866 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3a9e:	f000 f93d 	bl	3d1c <usb_malloc>
				if (p) {
    3aa2:	2800      	cmp	r0, #0
    3aa4:	f000 809e 	beq.w	3be4 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    3aa8:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3aaa:	4a1b      	ldr	r2, [pc, #108]	; (3b18 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3aac:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ab0:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3ab4:	f000 f932 	bl	3d1c <usb_malloc>
				if (p) {
    3ab8:	2800      	cmp	r0, #0
    3aba:	f000 808d 	beq.w	3bd8 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    3abe:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ac0:	4a14      	ldr	r2, [pc, #80]	; (3b14 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3ac2:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ac6:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    3aca:	e6e7      	b.n	389c <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3acc:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    3ace:	3808      	subs	r0, #8
    3ad0:	f000 f944 	bl	3d5c <usb_free>
    3ad4:	e504      	b.n	34e0 <usb_isr+0x36c>
    3ad6:	6b48      	ldr	r0, [r1, #52]	; 0x34
    3ad8:	3808      	subs	r0, #8
    3ada:	f000 f93f 	bl	3d5c <usb_free>
    3ade:	e4f9      	b.n	34d4 <usb_isr+0x360>
    3ae0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    3ae2:	3808      	subs	r0, #8
    3ae4:	f000 f93a 	bl	3d5c <usb_free>
    3ae8:	e4ee      	b.n	34c8 <usb_isr+0x354>
    3aea:	bf00      	nop
    3aec:	400720c0 	.word	0x400720c0
    3af0:	40072080 	.word	0x40072080
    3af4:	00006928 	.word	0x00006928
    3af8:	400720c4 	.word	0x400720c4
    3afc:	1fff9429 	.word	0x1fff9429
    3b00:	400720c8 	.word	0x400720c8
    3b04:	400720cc 	.word	0x400720cc
    3b08:	400720d0 	.word	0x400720d0
    3b0c:	1fff8000 	.word	0x1fff8000
    3b10:	40072094 	.word	0x40072094
    3b14:	004000c8 	.word	0x004000c8
    3b18:	00400088 	.word	0x00400088
    3b1c:	1fff93bd 	.word	0x1fff93bd
    3b20:	0000692c 	.word	0x0000692c
    3b24:	1fff9434 	.word	0x1fff9434
    3b28:	1fff942c 	.word	0x1fff942c
    3b2c:	1fff9428 	.word	0x1fff9428
    3b30:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3b32:	3808      	subs	r0, #8
    3b34:	f000 f912 	bl	3d5c <usb_free>
    3b38:	e4c0      	b.n	34bc <usb_isr+0x348>
    3b3a:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    3b3c:	3808      	subs	r0, #8
    3b3e:	f000 f90d 	bl	3d5c <usb_free>
    3b42:	e4fd      	b.n	3540 <usb_isr+0x3cc>
    3b44:	6f48      	ldr	r0, [r1, #116]	; 0x74
    3b46:	3808      	subs	r0, #8
    3b48:	f000 f908 	bl	3d5c <usb_free>
    3b4c:	e4f2      	b.n	3534 <usb_isr+0x3c0>
    3b4e:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    3b50:	3808      	subs	r0, #8
    3b52:	f000 f903 	bl	3d5c <usb_free>
    3b56:	e4e7      	b.n	3528 <usb_isr+0x3b4>
    3b58:	6e48      	ldr	r0, [r1, #100]	; 0x64
    3b5a:	3808      	subs	r0, #8
    3b5c:	f000 f8fe 	bl	3d5c <usb_free>
    3b60:	e4dc      	b.n	351c <usb_isr+0x3a8>
    3b62:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    3b64:	3808      	subs	r0, #8
    3b66:	f000 f8f9 	bl	3d5c <usb_free>
    3b6a:	e4d1      	b.n	3510 <usb_isr+0x39c>
    3b6c:	6d48      	ldr	r0, [r1, #84]	; 0x54
    3b6e:	3808      	subs	r0, #8
    3b70:	f000 f8f4 	bl	3d5c <usb_free>
    3b74:	e4c6      	b.n	3504 <usb_isr+0x390>
    3b76:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    3b78:	3808      	subs	r0, #8
    3b7a:	f000 f8ef 	bl	3d5c <usb_free>
    3b7e:	e4bb      	b.n	34f8 <usb_isr+0x384>
    3b80:	6c48      	ldr	r0, [r1, #68]	; 0x44
    3b82:	3808      	subs	r0, #8
    3b84:	f000 f8ea 	bl	3d5c <usb_free>
    3b88:	e4b0      	b.n	34ec <usb_isr+0x378>
    3b8a:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    3b8e:	3808      	subs	r0, #8
    3b90:	f000 f8e4 	bl	3d5c <usb_free>
    3b94:	e4ec      	b.n	3570 <usb_isr+0x3fc>
    3b96:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    3b9a:	3808      	subs	r0, #8
    3b9c:	f000 f8de 	bl	3d5c <usb_free>
    3ba0:	e4e0      	b.n	3564 <usb_isr+0x3f0>
    3ba2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    3ba6:	3808      	subs	r0, #8
    3ba8:	f000 f8d8 	bl	3d5c <usb_free>
    3bac:	e4d4      	b.n	3558 <usb_isr+0x3e4>
    3bae:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    3bb2:	3808      	subs	r0, #8
    3bb4:	f000 f8d2 	bl	3d5c <usb_free>
    3bb8:	e4c8      	b.n	354c <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3bba:	f04f 0e02 	mov.w	lr, #2
    3bbe:	e6ec      	b.n	399a <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3bc0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3bc2:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3bc6:	3201      	adds	r2, #1
    3bc8:	702a      	strb	r2, [r5, #0]
    3bca:	e65a      	b.n	3882 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3bcc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3bce:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3bd2:	3201      	adds	r2, #1
    3bd4:	702a      	strb	r2, [r5, #0]
    3bd6:	e73f      	b.n	3a58 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3bd8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3bda:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3bde:	3201      	adds	r2, #1
    3be0:	702a      	strb	r2, [r5, #0]
    3be2:	e65b      	b.n	389c <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3be4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3be6:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3bea:	3201      	adds	r2, #1
    3bec:	702a      	strb	r2, [r5, #0]
    3bee:	e761      	b.n	3ab4 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3bf0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3bf2:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3bf6:	3201      	adds	r2, #1
    3bf8:	702a      	strb	r2, [r5, #0]
    3bfa:	e65b      	b.n	38b4 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3bfc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3bfe:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    3c02:	3201      	adds	r2, #1
    3c04:	702a      	strb	r2, [r5, #0]
    3c06:	e710      	b.n	3a2a <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3c08:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3c0a:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3c0e:	3201      	adds	r2, #1
    3c10:	702a      	strb	r2, [r5, #0]
    3c12:	e628      	b.n	3866 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3c14:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3c16:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3c1a:	3201      	adds	r2, #1
    3c1c:	702a      	strb	r2, [r5, #0]
    3c1e:	e732      	b.n	3a86 <usb_isr+0x912>
    3c20:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    3c24:	46f4      	mov	ip, lr
    3c26:	bf28      	it	cs
    3c28:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    3c2c:	eb04 030c 	add.w	r3, r4, ip
    3c30:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3c32:	2301      	movs	r3, #1
    3c34:	ebcc 000e 	rsb	r0, ip, lr
    3c38:	ea4f 480c 	mov.w	r8, ip, lsl #16
    3c3c:	2200      	movs	r2, #0
    3c3e:	9301      	str	r3, [sp, #4]
    3c40:	e518      	b.n	3674 <usb_isr+0x500>
    3c42:	bf00      	nop

00003c44 <usb_init>:
}



void usb_init(void)
{
    3c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3c46:	f000 fda5 	bl	4794 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c4a:	4b29      	ldr	r3, [pc, #164]	; (3cf0 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3c4c:	4829      	ldr	r0, [pc, #164]	; (3cf4 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3c4e:	4c2a      	ldr	r4, [pc, #168]	; (3cf8 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3c50:	4f2a      	ldr	r7, [pc, #168]	; (3cfc <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3c52:	4d2b      	ldr	r5, [pc, #172]	; (3d00 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3c54:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 3d14 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    3c58:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 3d18 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3c5c:	4e29      	ldr	r6, [pc, #164]	; (3d04 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c5e:	2200      	movs	r2, #0
    3c60:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    3c62:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c64:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    3c66:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c68:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    3c6a:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c6c:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    3c6e:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c70:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    3c72:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c74:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    3c76:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c78:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    3c7a:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c7c:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    3c7e:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c80:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    3c82:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c84:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    3c86:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c88:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    3c8a:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c8c:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    3c8e:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c90:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    3c92:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c94:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    3c96:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c98:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    3c9a:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3c9c:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    3c9e:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3ca4:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    3ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3caa:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    3cae:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3cb0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3cb4:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3cb6:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3cba:	4913      	ldr	r1, [pc, #76]	; (3d08 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3cbc:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3cbe:	0e1b      	lsrs	r3, r3, #24
    3cc0:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3cc2:	23ff      	movs	r3, #255	; 0xff
    3cc4:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3cc8:	4d10      	ldr	r5, [pc, #64]	; (3d0c <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3cca:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3cce:	4810      	ldr	r0, [pc, #64]	; (3d10 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3cd0:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3cd2:	2301      	movs	r3, #1
    3cd4:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    3cd6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3cda:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3cdc:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3ce0:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3ce2:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3ce6:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3ce8:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3cea:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    3cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cf0:	1fff8000 	.word	0x1fff8000
    3cf4:	40048034 	.word	0x40048034
    3cf8:	4007209c 	.word	0x4007209c
    3cfc:	400720b0 	.word	0x400720b0
    3d00:	400720b4 	.word	0x400720b4
    3d04:	40072094 	.word	0x40072094
    3d08:	40072010 	.word	0x40072010
    3d0c:	e000e449 	.word	0xe000e449
    3d10:	e000e108 	.word	0xe000e108
    3d14:	40072080 	.word	0x40072080
    3d18:	40072088 	.word	0x40072088

00003d1c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3d1c:	b672      	cpsid	i
	avail = usb_buffer_available;
    3d1e:	480d      	ldr	r0, [pc, #52]	; (3d54 <usb_malloc+0x38>)
    3d20:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    3d22:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    3d26:	2b0b      	cmp	r3, #11
    3d28:	dc10      	bgt.n	3d4c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3d2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3d2e:	40d9      	lsrs	r1, r3
    3d30:	ea22 0201 	bic.w	r2, r2, r1
    3d34:	6002      	str	r2, [r0, #0]
	__enable_irq();
    3d36:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3d38:	4807      	ldr	r0, [pc, #28]	; (3d58 <usb_malloc+0x3c>)
    3d3a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3d3e:	00db      	lsls	r3, r3, #3
    3d40:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3d42:	2100      	movs	r1, #0
    3d44:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    3d46:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3d48:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    3d4a:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3d4c:	b662      	cpsie	i
		return NULL;
    3d4e:	2000      	movs	r0, #0
    3d50:	4770      	bx	lr
    3d52:	bf00      	nop
    3d54:	1fff8728 	.word	0x1fff8728
    3d58:	1fff83bc 	.word	0x1fff83bc

00003d5c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3d5c:	4b0d      	ldr	r3, [pc, #52]	; (3d94 <usb_free+0x38>)
    3d5e:	4a0e      	ldr	r2, [pc, #56]	; (3d98 <usb_free+0x3c>)
    3d60:	1ac3      	subs	r3, r0, r3
    3d62:	fba2 2303 	umull	r2, r3, r2, r3
    3d66:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    3d68:	2b0b      	cmp	r3, #11
    3d6a:	d80c      	bhi.n	3d86 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3d6c:	4a0b      	ldr	r2, [pc, #44]	; (3d9c <usb_free+0x40>)
    3d6e:	7812      	ldrb	r2, [r2, #0]
    3d70:	b952      	cbnz	r2, 3d88 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    3d72:	b672      	cpsid	i
	usb_buffer_available |= mask;
    3d74:	480a      	ldr	r0, [pc, #40]	; (3da0 <usb_free+0x44>)
    3d76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3d7a:	6802      	ldr	r2, [r0, #0]
    3d7c:	fa21 f303 	lsr.w	r3, r1, r3
    3d80:	431a      	orrs	r2, r3
    3d82:	6002      	str	r2, [r0, #0]
	__enable_irq();
    3d84:	b662      	cpsie	i
    3d86:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3d88:	4a06      	ldr	r2, [pc, #24]	; (3da4 <usb_free+0x48>)
    3d8a:	7812      	ldrb	r2, [r2, #0]
    3d8c:	2a00      	cmp	r2, #0
    3d8e:	d0f0      	beq.n	3d72 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    3d90:	f7ff b94a 	b.w	3028 <usb_rx_memory>
    3d94:	1fff83bc 	.word	0x1fff83bc
    3d98:	38e38e39 	.word	0x38e38e39
    3d9c:	1fff9429 	.word	0x1fff9429
    3da0:	1fff8728 	.word	0x1fff8728
    3da4:	1fff9434 	.word	0x1fff9434

00003da8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    3da8:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    3daa:	4d0f      	ldr	r5, [pc, #60]	; (3de8 <usb_serial_getchar+0x40>)
    3dac:	6828      	ldr	r0, [r5, #0]
    3dae:	b178      	cbz	r0, 3dd0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    3db0:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    3db2:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    3db4:	18c1      	adds	r1, r0, r3
    3db6:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    3db8:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    3dba:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    3dbc:	d202      	bcs.n	3dc4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    3dbe:	8043      	strh	r3, [r0, #2]
	}
	return c;
    3dc0:	4620      	mov	r0, r4
}
    3dc2:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    3dc4:	f7ff ffca 	bl	3d5c <usb_free>
		rx_packet = NULL;
    3dc8:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    3dca:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    3dcc:	602b      	str	r3, [r5, #0]
    3dce:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3dd0:	4b06      	ldr	r3, [pc, #24]	; (3dec <usb_serial_getchar+0x44>)
    3dd2:	781b      	ldrb	r3, [r3, #0]
    3dd4:	b12b      	cbz	r3, 3de2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    3dd6:	2003      	movs	r0, #3
    3dd8:	f7ff f8f2 	bl	2fc0 <usb_rx>
    3ddc:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    3dde:	2800      	cmp	r0, #0
    3de0:	d1e6      	bne.n	3db0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3de2:	f04f 30ff 	mov.w	r0, #4294967295
    3de6:	bd38      	pop	{r3, r4, r5, pc}
    3de8:	1fff9448 	.word	0x1fff9448
    3dec:	1fff9434 	.word	0x1fff9434

00003df0 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    3df0:	b510      	push	{r4, lr}
	if (!rx_packet) {
    3df2:	4c09      	ldr	r4, [pc, #36]	; (3e18 <usb_serial_peekchar+0x28>)
    3df4:	6820      	ldr	r0, [r4, #0]
    3df6:	b118      	cbz	r0, 3e00 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    3df8:	8843      	ldrh	r3, [r0, #2]
    3dfa:	4418      	add	r0, r3
    3dfc:	7a00      	ldrb	r0, [r0, #8]
}
    3dfe:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3e00:	4b06      	ldr	r3, [pc, #24]	; (3e1c <usb_serial_peekchar+0x2c>)
    3e02:	781b      	ldrb	r3, [r3, #0]
    3e04:	b12b      	cbz	r3, 3e12 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    3e06:	2003      	movs	r0, #3
    3e08:	f7ff f8da 	bl	2fc0 <usb_rx>
    3e0c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    3e0e:	2800      	cmp	r0, #0
    3e10:	d1f2      	bne.n	3df8 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3e12:	f04f 30ff 	mov.w	r0, #4294967295
    3e16:	bd10      	pop	{r4, pc}
    3e18:	1fff9448 	.word	0x1fff9448
    3e1c:	1fff9434 	.word	0x1fff9434

00003e20 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3e20:	4b04      	ldr	r3, [pc, #16]	; (3e34 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    3e22:	4a05      	ldr	r2, [pc, #20]	; (3e38 <usb_serial_available+0x18>)
    3e24:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    3e26:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3e28:	b11b      	cbz	r3, 3e32 <usb_serial_available+0x12>
    3e2a:	881a      	ldrh	r2, [r3, #0]
    3e2c:	885b      	ldrh	r3, [r3, #2]
    3e2e:	1ad3      	subs	r3, r2, r3
    3e30:	4418      	add	r0, r3
	return count;
}
    3e32:	4770      	bx	lr
    3e34:	1fff9448 	.word	0x1fff9448
    3e38:	1fff95fc 	.word	0x1fff95fc

00003e3c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    3e3c:	4b0b      	ldr	r3, [pc, #44]	; (3e6c <usb_serial_flush_input+0x30>)
    3e3e:	781b      	ldrb	r3, [r3, #0]
    3e40:	b19b      	cbz	r3, 3e6a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    3e42:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    3e44:	4c0a      	ldr	r4, [pc, #40]	; (3e70 <usb_serial_flush_input+0x34>)
    3e46:	6820      	ldr	r0, [r4, #0]
    3e48:	b148      	cbz	r0, 3e5e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    3e4a:	f7ff ff87 	bl	3d5c <usb_free>
		rx_packet = NULL;
    3e4e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3e50:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    3e52:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3e54:	f7ff f8b4 	bl	2fc0 <usb_rx>
		if (!rx) break;
    3e58:	b130      	cbz	r0, 3e68 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    3e5a:	f7ff ff7f 	bl	3d5c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3e5e:	2003      	movs	r0, #3
    3e60:	f7ff f8ae 	bl	2fc0 <usb_rx>
		if (!rx) break;
    3e64:	2800      	cmp	r0, #0
    3e66:	d1f8      	bne.n	3e5a <usb_serial_flush_input+0x1e>
    3e68:	bd10      	pop	{r4, pc}
    3e6a:	4770      	bx	lr
    3e6c:	1fff9434 	.word	0x1fff9434
    3e70:	1fff9448 	.word	0x1fff9448

00003e74 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3e78:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 3f74 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3e7c:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3e7e:	2201      	movs	r2, #1
    3e80:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    3e84:	9101      	str	r1, [sp, #4]
    3e86:	b369      	cbz	r1, 3ee4 <usb_serial_write+0x70>
    3e88:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3f78 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3e8c:	4f36      	ldr	r7, [pc, #216]	; (3f68 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3e8e:	9e01      	ldr	r6, [sp, #4]
    3e90:	4683      	mov	fp, r0
		if (!tx_packet) {
    3e92:	f8d8 0000 	ldr.w	r0, [r8]
    3e96:	b3b0      	cbz	r0, 3f06 <usb_serial_write+0x92>
    3e98:	4d34      	ldr	r5, [pc, #208]	; (3f6c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    3e9a:	8844      	ldrh	r4, [r0, #2]
    3e9c:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    3ea0:	42b1      	cmp	r1, r6
    3ea2:	bf28      	it	cs
    3ea4:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3ea6:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    3eaa:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3eac:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    3eb0:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    3eb2:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3eb4:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    3eb8:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    3ebc:	b151      	cbz	r1, 3ed4 <usb_serial_write+0x60>
    3ebe:	3c01      	subs	r4, #1
    3ec0:	4422      	add	r2, r4
    3ec2:	4459      	add	r1, fp
    3ec4:	f81b 4b01 	ldrb.w	r4, [fp], #1
    3ec8:	f802 4f01 	strb.w	r4, [r2, #1]!
    3ecc:	458b      	cmp	fp, r1
    3ece:	d1f9      	bne.n	3ec4 <usb_serial_write+0x50>
    3ed0:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    3ed4:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    3ed8:	d80b      	bhi.n	3ef2 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    3eda:	4a25      	ldr	r2, [pc, #148]	; (3f70 <usb_serial_write+0xfc>)
    3edc:	2105      	movs	r1, #5
    3ede:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3ee0:	2e00      	cmp	r6, #0
    3ee2:	d1d6      	bne.n	3e92 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    3ee4:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    3ee6:	2300      	movs	r3, #0
    3ee8:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    3eec:	b003      	add	sp, #12
    3eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    3ef2:	2240      	movs	r2, #64	; 0x40
    3ef4:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3ef6:	4601      	mov	r1, r0
    3ef8:	2004      	movs	r0, #4
    3efa:	f7ff f8f9 	bl	30f0 <usb_tx>
			tx_packet = NULL;
    3efe:	2200      	movs	r2, #0
    3f00:	f8c8 2000 	str.w	r2, [r8]
    3f04:	e7e9      	b.n	3eda <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3f06:	783a      	ldrb	r2, [r7, #0]
    3f08:	b32a      	cbz	r2, 3f56 <usb_serial_write+0xe2>
    3f0a:	4d18      	ldr	r5, [pc, #96]	; (3f6c <usb_serial_write+0xf8>)
    3f0c:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    3f10:	f04f 0a01 	mov.w	sl, #1
    3f14:	e007      	b.n	3f26 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3f16:	3c01      	subs	r4, #1
    3f18:	d016      	beq.n	3f48 <usb_serial_write+0xd4>
    3f1a:	782a      	ldrb	r2, [r5, #0]
    3f1c:	b9a2      	cbnz	r2, 3f48 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    3f1e:	f000 fa1d 	bl	435c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3f22:	783a      	ldrb	r2, [r7, #0]
    3f24:	b1ba      	cbz	r2, 3f56 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    3f26:	2004      	movs	r0, #4
    3f28:	f7ff f868 	bl	2ffc <usb_tx_packet_count>
    3f2c:	2807      	cmp	r0, #7
    3f2e:	d8f2      	bhi.n	3f16 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    3f30:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    3f34:	f7ff fef2 	bl	3d1c <usb_malloc>
    3f38:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    3f3c:	2800      	cmp	r0, #0
    3f3e:	d1ac      	bne.n	3e9a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    3f40:	4b0c      	ldr	r3, [pc, #48]	; (3f74 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3f42:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    3f44:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3f46:	d1e8      	bne.n	3f1a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    3f48:	2301      	movs	r3, #1
					return -1;
    3f4a:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    3f4e:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    3f50:	b003      	add	sp, #12
    3f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    3f56:	2300      	movs	r3, #0
					return -1;
    3f58:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    3f5c:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    3f60:	b003      	add	sp, #12
    3f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f66:	bf00      	nop
    3f68:	1fff9434 	.word	0x1fff9434
    3f6c:	1fff9444 	.word	0x1fff9444
    3f70:	1fff943c 	.word	0x1fff943c
    3f74:	1fff943d 	.word	0x1fff943d
    3f78:	1fff9440 	.word	0x1fff9440

00003f7c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3f7c:	b500      	push	{lr}
    3f7e:	b083      	sub	sp, #12
    3f80:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    3f82:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3f84:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    3f88:	4618      	mov	r0, r3
    3f8a:	f7ff ff73 	bl	3e74 <usb_serial_write>
}
    3f8e:	b003      	add	sp, #12
    3f90:	f85d fb04 	ldr.w	pc, [sp], #4

00003f94 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    3f94:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    3f96:	4d0e      	ldr	r5, [pc, #56]	; (3fd0 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3f98:	4c0e      	ldr	r4, [pc, #56]	; (3fd4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    3f9a:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3f9c:	2301      	movs	r3, #1
    3f9e:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    3fa0:	b128      	cbz	r0, 3fae <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    3fa2:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    3fa4:	2300      	movs	r3, #0
    3fa6:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    3fa8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    3fac:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3fae:	4b0a      	ldr	r3, [pc, #40]	; (3fd8 <usb_serial_write_buffer_free+0x44>)
    3fb0:	781b      	ldrb	r3, [r3, #0]
    3fb2:	b913      	cbnz	r3, 3fba <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    3fb4:	2000      	movs	r0, #0
    3fb6:	7020      	strb	r0, [r4, #0]
			return 0;
    3fb8:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3fba:	2004      	movs	r0, #4
    3fbc:	f7ff f81e 	bl	2ffc <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3fc0:	2807      	cmp	r0, #7
    3fc2:	d8f7      	bhi.n	3fb4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    3fc4:	f7ff feaa 	bl	3d1c <usb_malloc>
    3fc8:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3fca:	2800      	cmp	r0, #0
    3fcc:	d1e9      	bne.n	3fa2 <usb_serial_write_buffer_free+0xe>
    3fce:	e7f1      	b.n	3fb4 <usb_serial_write_buffer_free+0x20>
    3fd0:	1fff9440 	.word	0x1fff9440
    3fd4:	1fff943d 	.word	0x1fff943d
    3fd8:	1fff9434 	.word	0x1fff9434

00003fdc <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    3fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    3fde:	4b11      	ldr	r3, [pc, #68]	; (4024 <usb_serial_flush_output+0x48>)
    3fe0:	781b      	ldrb	r3, [r3, #0]
    3fe2:	b18b      	cbz	r3, 4008 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    3fe4:	4e10      	ldr	r6, [pc, #64]	; (4028 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    3fe6:	4d11      	ldr	r5, [pc, #68]	; (402c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    3fe8:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    3fea:	2701      	movs	r7, #1
    3fec:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    3fee:	b164      	cbz	r4, 400a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    3ff0:	4a0f      	ldr	r2, [pc, #60]	; (4030 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    3ff2:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    3ff4:	2700      	movs	r7, #0
    3ff6:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3ff8:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    3ffa:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3ffc:	2004      	movs	r0, #4
    3ffe:	f7ff f877 	bl	30f0 <usb_tx>
		tx_packet = NULL;
    4002:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    4004:	2300      	movs	r3, #0
    4006:	702b      	strb	r3, [r5, #0]
    4008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    400a:	f7ff fe87 	bl	3d1c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    400e:	4b08      	ldr	r3, [pc, #32]	; (4030 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    4010:	b128      	cbz	r0, 401e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    4012:	4601      	mov	r1, r0
    4014:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    4016:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    4018:	f7ff f86a 	bl	30f0 <usb_tx>
    401c:	e7f2      	b.n	4004 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    401e:	701f      	strb	r7, [r3, #0]
    4020:	e7f0      	b.n	4004 <usb_serial_flush_output+0x28>
    4022:	bf00      	nop
    4024:	1fff9434 	.word	0x1fff9434
    4028:	1fff9440 	.word	0x1fff9440
    402c:	1fff943d 	.word	0x1fff943d
    4030:	1fff943c 	.word	0x1fff943c

00004034 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    4034:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    4036:	4b0e      	ldr	r3, [pc, #56]	; (4070 <usb_serial_flush_callback+0x3c>)
    4038:	781b      	ldrb	r3, [r3, #0]
    403a:	b973      	cbnz	r3, 405a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    403c:	4c0d      	ldr	r4, [pc, #52]	; (4074 <usb_serial_flush_callback+0x40>)
    403e:	6821      	ldr	r1, [r4, #0]
    4040:	b161      	cbz	r1, 405c <usb_serial_flush_callback+0x28>
    4042:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    4046:	884b      	ldrh	r3, [r1, #2]
    4048:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    404a:	2004      	movs	r0, #4
    404c:	f7ff f850 	bl	30f0 <usb_tx>
		tx_packet = NULL;
    4050:	6025      	str	r5, [r4, #0]
    4052:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    4054:	4b08      	ldr	r3, [pc, #32]	; (4078 <usb_serial_flush_callback+0x44>)
    4056:	2201      	movs	r2, #1
    4058:	701a      	strb	r2, [r3, #0]
    405a:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    405c:	f7ff fe5e 	bl	3d1c <usb_malloc>
		if (tx) {
    4060:	2800      	cmp	r0, #0
    4062:	d0f7      	beq.n	4054 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    4064:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    4066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    406a:	2004      	movs	r0, #4
    406c:	f7ff b840 	b.w	30f0 <usb_tx>
    4070:	1fff943d 	.word	0x1fff943d
    4074:	1fff9440 	.word	0x1fff9440
    4078:	1fff943c 	.word	0x1fff943c

0000407c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    407c:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    407e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4082:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4084:	7f43      	ldrb	r3, [r0, #29]
    4086:	b933      	cbnz	r3, 4096 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4088:	7f01      	ldrb	r1, [r0, #28]
    408a:	2901      	cmp	r1, #1
    408c:	d007      	beq.n	409e <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    408e:	2903      	cmp	r1, #3
    4090:	d00f      	beq.n	40b2 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4092:	2301      	movs	r3, #1
    4094:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4096:	b902      	cbnz	r2, 409a <EventResponder::triggerEventNotImmediate()+0x1e>
    4098:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    409a:	bc10      	pop	{r4}
    409c:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    409e:	4c12      	ldr	r4, [pc, #72]	; (40e8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    40a0:	6821      	ldr	r1, [r4, #0]
    40a2:	b1a1      	cbz	r1, 40ce <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    40a4:	4911      	ldr	r1, [pc, #68]	; (40ec <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    40a6:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    40a8:	680b      	ldr	r3, [r1, #0]
    40aa:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    40ac:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    40ae:	6158      	str	r0, [r3, #20]
    40b0:	e7ef      	b.n	4092 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    40b2:	4c0f      	ldr	r4, [pc, #60]	; (40f0 <EventResponder::triggerEventNotImmediate()+0x74>)
    40b4:	6821      	ldr	r1, [r4, #0]
    40b6:	b181      	cbz	r1, 40da <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    40b8:	490e      	ldr	r1, [pc, #56]	; (40f4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    40ba:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    40bc:	680b      	ldr	r3, [r1, #0]
    40be:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    40c0:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    40c2:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    40c4:	4b0c      	ldr	r3, [pc, #48]	; (40f8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    40c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    40ca:	6019      	str	r1, [r3, #0]
    40cc:	e7e1      	b.n	4092 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    40ce:	4b07      	ldr	r3, [pc, #28]	; (40ec <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    40d0:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    40d2:	6181      	str	r1, [r0, #24]
				firstYield = this;
    40d4:	6020      	str	r0, [r4, #0]
				lastYield = this;
    40d6:	6018      	str	r0, [r3, #0]
    40d8:	e7db      	b.n	4092 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    40da:	4b06      	ldr	r3, [pc, #24]	; (40f4 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    40dc:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    40de:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    40e0:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    40e2:	6018      	str	r0, [r3, #0]
    40e4:	e7ee      	b.n	40c4 <EventResponder::triggerEventNotImmediate()+0x48>
    40e6:	bf00      	nop
    40e8:	1fff9460 	.word	0x1fff9460
    40ec:	1fff945c 	.word	0x1fff945c
    40f0:	1fff9450 	.word	0x1fff9450
    40f4:	1fff9454 	.word	0x1fff9454
    40f8:	e000ed04 	.word	0xe000ed04

000040fc <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    40fc:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    40fe:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4100:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4102:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4104:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4106:	d002      	beq.n	410e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4108:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    410a:	f7ff bfb7 	b.w	407c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    410e:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4110:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4112:	4718      	bx	r3

00004114 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4114:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4116:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    411a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    411c:	4c0c      	ldr	r4, [pc, #48]	; (4150 <EventResponder::runFromInterrupt()+0x3c>)
    411e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    4120:	b180      	cbz	r0, 4144 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4122:	4e0c      	ldr	r6, [pc, #48]	; (4154 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4124:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4126:	6943      	ldr	r3, [r0, #20]
    4128:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    412a:	b173      	cbz	r3, 414a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    412c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    412e:	b902      	cbnz	r2, 4132 <EventResponder::runFromInterrupt()+0x1e>
    4130:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4132:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4134:	6883      	ldr	r3, [r0, #8]
    4136:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4138:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    413c:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    413e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    4140:	2800      	cmp	r0, #0
    4142:	d1f0      	bne.n	4126 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4144:	b902      	cbnz	r2, 4148 <EventResponder::runFromInterrupt()+0x34>
    4146:	b662      	cpsie	i
    4148:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    414a:	6033      	str	r3, [r6, #0]
    414c:	e7ef      	b.n	412e <EventResponder::runFromInterrupt()+0x1a>
    414e:	bf00      	nop
    4150:	1fff9450 	.word	0x1fff9450
    4154:	1fff9454 	.word	0x1fff9454

00004158 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4158:	f7ff bfdc 	b.w	4114 <EventResponder::runFromInterrupt()>

0000415c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    415c:	4a18      	ldr	r2, [pc, #96]	; (41c0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    415e:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    4160:	6814      	ldr	r4, [r2, #0]
    4162:	2c00      	cmp	r4, #0
    4164:	d027      	beq.n	41b6 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4166:	6803      	ldr	r3, [r0, #0]
    4168:	6821      	ldr	r1, [r4, #0]
    416a:	428b      	cmp	r3, r1
    416c:	d20e      	bcs.n	418c <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    416e:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4170:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4172:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    4174:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4176:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4178:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    417a:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    417c:	2302      	movs	r3, #2
    417e:	7503      	strb	r3, [r0, #20]
}
    4180:	bc30      	pop	{r4, r5}
    4182:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4184:	6811      	ldr	r1, [r2, #0]
    4186:	428b      	cmp	r3, r1
    4188:	4614      	mov	r4, r2
    418a:	d308      	bcc.n	419e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    418c:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    418e:	1a5b      	subs	r3, r3, r1
    4190:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4192:	2a00      	cmp	r2, #0
    4194:	d1f6      	bne.n	4184 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4196:	6082      	str	r2, [r0, #8]
		_prev = timer;
    4198:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    419a:	60a0      	str	r0, [r4, #8]
    419c:	e7ee      	b.n	417c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    419e:	68d2      	ldr	r2, [r2, #12]
    41a0:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    41a2:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    41a4:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    41a6:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    41a8:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    41aa:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    41ac:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    41ae:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    41b0:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    41b2:	bc30      	pop	{r4, r5}
    41b4:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    41b6:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    41b8:	60c4      	str	r4, [r0, #12]
		listActive = this;
    41ba:	6010      	str	r0, [r2, #0]
    41bc:	e7de      	b.n	417c <MillisTimer::addToActiveList()+0x20>
    41be:	bf00      	nop
    41c0:	1fff9458 	.word	0x1fff9458

000041c4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    41c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    41c6:	4e22      	ldr	r6, [pc, #136]	; (4250 <MillisTimer::runFromTimer()+0x8c>)
    41c8:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    41ca:	b32c      	cbz	r4, 4218 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    41cc:	6823      	ldr	r3, [r4, #0]
    41ce:	2b00      	cmp	r3, #0
    41d0:	d13a      	bne.n	4248 <MillisTimer::runFromTimer()+0x84>
    41d2:	4f20      	ldr	r7, [pc, #128]	; (4254 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    41d4:	461d      	mov	r5, r3
    41d6:	e004      	b.n	41e2 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    41d8:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    41da:	b1ec      	cbz	r4, 4218 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    41dc:	6823      	ldr	r3, [r4, #0]
    41de:	2b00      	cmp	r3, #0
    41e0:	d132      	bne.n	4248 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    41e2:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    41e4:	b103      	cbz	r3, 41e8 <MillisTimer::runFromTimer()+0x24>
    41e6:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    41e8:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    41ea:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    41ec:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    41ee:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    41f0:	681b      	ldr	r3, [r3, #0]
    41f2:	42bb      	cmp	r3, r7
    41f4:	d121      	bne.n	423a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    41f6:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    41f8:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    41fa:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    41fc:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    41fe:	d020      	beq.n	4242 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4200:	f7ff ff3c 	bl	407c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4204:	6863      	ldr	r3, [r4, #4]
    4206:	2b00      	cmp	r3, #0
    4208:	d0e6      	beq.n	41d8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    420a:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    420c:	4620      	mov	r0, r4
    420e:	f7ff ffa5 	bl	415c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4212:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4214:	2c00      	cmp	r4, #0
    4216:	d1e1      	bne.n	41dc <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4218:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    421c:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    421e:	4a0e      	ldr	r2, [pc, #56]	; (4258 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4220:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4222:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4224:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4226:	b903      	cbnz	r3, 422a <MillisTimer::runFromTimer()+0x66>
    4228:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    422a:	b128      	cbz	r0, 4238 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    422c:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    422e:	f7ff ff95 	bl	415c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4232:	4620      	mov	r0, r4
    4234:	2800      	cmp	r0, #0
    4236:	d1f9      	bne.n	422c <MillisTimer::runFromTimer()+0x68>
    4238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    423a:	4622      	mov	r2, r4
    423c:	2100      	movs	r1, #0
    423e:	4798      	blx	r3
    4240:	e7e0      	b.n	4204 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4242:	6883      	ldr	r3, [r0, #8]
    4244:	4798      	blx	r3
    4246:	e7dd      	b.n	4204 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4248:	3b01      	subs	r3, #1
    424a:	6023      	str	r3, [r4, #0]
			break;
    424c:	e7e4      	b.n	4218 <MillisTimer::runFromTimer()+0x54>
    424e:	bf00      	nop
    4250:	1fff9458 	.word	0x1fff9458
    4254:	000040fd 	.word	0x000040fd
    4258:	1fff9468 	.word	0x1fff9468

0000425c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    425c:	4a02      	ldr	r2, [pc, #8]	; (4268 <systick_isr+0xc>)
    425e:	6813      	ldr	r3, [r2, #0]
    4260:	3301      	adds	r3, #1
    4262:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4264:	f7ff bfae 	b.w	41c4 <MillisTimer::runFromTimer()>
    4268:	1fff9350 	.word	0x1fff9350

0000426c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    426c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    426e:	f7fd fb03 	bl	1878 <setup>
	while (1) {
		loop();
    4272:	f7fd fbe7 	bl	1a44 <loop>
		yield();
    4276:	f000 f871 	bl	435c <yield>
    427a:	e7fa      	b.n	4272 <main+0x6>

0000427c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    427c:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    427e:	4a06      	ldr	r2, [pc, #24]	; (4298 <Print::println()+0x1c>)
	return write(buf, 2);
    4280:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4282:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    4284:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4286:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4288:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    428a:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    428e:	2202      	movs	r2, #2
    4290:	4798      	blx	r3
}
    4292:	b003      	add	sp, #12
    4294:	f85d fb04 	ldr.w	pc, [sp], #4
    4298:	000068fc 	.word	0x000068fc

0000429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    429c:	b5f0      	push	{r4, r5, r6, r7, lr}
    429e:	4607      	mov	r7, r0
    42a0:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    42a2:	2a00      	cmp	r2, #0
    42a4:	d033      	beq.n	430e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    42a6:	2a01      	cmp	r2, #1
    42a8:	bf08      	it	eq
    42aa:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    42ac:	b351      	cbz	r1, 4304 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    42ae:	2421      	movs	r4, #33	; 0x21
    42b0:	e000      	b.n	42b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    42b2:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    42b4:	fbb1 f5f2 	udiv	r5, r1, r2
    42b8:	fb02 1115 	mls	r1, r2, r5, r1
    42bc:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    42be:	2909      	cmp	r1, #9
    42c0:	f100 0130 	add.w	r1, r0, #48	; 0x30
    42c4:	bf98      	it	ls
    42c6:	b2c8      	uxtbls	r0, r1
    42c8:	a90a      	add	r1, sp, #40	; 0x28
    42ca:	bf88      	it	hi
    42cc:	3037      	addhi	r0, #55	; 0x37
    42ce:	4421      	add	r1, r4
    42d0:	bf88      	it	hi
    42d2:	b2c0      	uxtbhi	r0, r0
    42d4:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    42d8:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    42da:	4629      	mov	r1, r5
    42dc:	2d00      	cmp	r5, #0
    42de:	d1e8      	bne.n	42b2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    42e0:	b133      	cbz	r3, 42f0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    42e2:	3c01      	subs	r4, #1
    42e4:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    42e6:	ab0a      	add	r3, sp, #40	; 0x28
    42e8:	4423      	add	r3, r4
    42ea:	222d      	movs	r2, #45	; 0x2d
    42ec:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    42f0:	683b      	ldr	r3, [r7, #0]
    42f2:	aa01      	add	r2, sp, #4
    42f4:	1911      	adds	r1, r2, r4
    42f6:	685b      	ldr	r3, [r3, #4]
    42f8:	4638      	mov	r0, r7
    42fa:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    42fe:	4798      	blx	r3
}
    4300:	b00b      	add	sp, #44	; 0x2c
    4302:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    4304:	2230      	movs	r2, #48	; 0x30
    4306:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    430a:	2421      	movs	r4, #33	; 0x21
    430c:	e7e8      	b.n	42e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    430e:	6803      	ldr	r3, [r0, #0]
    4310:	b2c9      	uxtb	r1, r1
    4312:	681b      	ldr	r3, [r3, #0]
    4314:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    4316:	b00b      	add	sp, #44	; 0x2c
    4318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    431a:	bf00      	nop

0000431c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    431c:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    431e:	bfba      	itte	lt
    4320:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    4322:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    4324:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    4326:	220a      	movs	r2, #10
    4328:	f7ff bfb8 	b.w	429c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000432c <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    432c:	6081      	str	r1, [r0, #8]
    432e:	4770      	bx	lr

00004330 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    4330:	f7ff bd84 	b.w	3e3c <usb_serial_flush_input>

00004334 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    4334:	f7ff bd5c 	b.w	3df0 <usb_serial_peekchar>

00004338 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    4338:	f7ff bd36 	b.w	3da8 <usb_serial_getchar>

0000433c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    433c:	f7ff bd70 	b.w	3e20 <usb_serial_available>

00004340 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4340:	f7ff be4c 	b.w	3fdc <usb_serial_flush_output>

00004344 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4344:	f7ff be26 	b.w	3f94 <usb_serial_write_buffer_free>

00004348 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4348:	4608      	mov	r0, r1
    434a:	4611      	mov	r1, r2
    434c:	f7ff bd92 	b.w	3e74 <usb_serial_write>

00004350 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4350:	4608      	mov	r0, r1
    4352:	f7ff be13 	b.w	3f7c <usb_serial_putchar>
    4356:	bf00      	nop

00004358 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    4358:	4770      	bx	lr
    435a:	bf00      	nop

0000435c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    435c:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    435e:	4c22      	ldr	r4, [pc, #136]	; (43e8 <yield+0x8c>)
    4360:	7823      	ldrb	r3, [r4, #0]
    4362:	b103      	cbz	r3, 4366 <yield+0xa>
    4364:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    4366:	2301      	movs	r3, #1
    4368:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    436a:	f7ff fd59 	bl	3e20 <usb_serial_available>
	if (Serial.available()) serialEvent();
    436e:	bb70      	cbnz	r0, 43ce <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    4370:	f000 f868 	bl	4444 <serial_available>
	if (Serial1.available()) serialEvent1();
    4374:	bb40      	cbnz	r0, 43c8 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    4376:	f000 f8fb 	bl	4570 <serial2_available>
	if (Serial2.available()) serialEvent2();
    437a:	bb10      	cbnz	r0, 43c2 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    437c:	f000 f98e 	bl	469c <serial3_available>
	if (Serial3.available()) serialEvent3();
    4380:	b9e0      	cbnz	r0, 43bc <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    4382:	2300      	movs	r3, #0
    4384:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4386:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    438a:	2b00      	cmp	r3, #0
    438c:	d1ea      	bne.n	4364 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    438e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    4392:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4394:	4b15      	ldr	r3, [pc, #84]	; (43ec <yield+0x90>)
    4396:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4398:	b1e0      	cbz	r0, 43d4 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    439a:	4c15      	ldr	r4, [pc, #84]	; (43f0 <yield+0x94>)
    439c:	7822      	ldrb	r2, [r4, #0]
    439e:	b9ca      	cbnz	r2, 43d4 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    43a0:	6945      	ldr	r5, [r0, #20]
    43a2:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    43a4:	2301      	movs	r3, #1
    43a6:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    43a8:	b1c5      	cbz	r5, 43dc <yield+0x80>
			firstYield->_prev = nullptr;
    43aa:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    43ac:	b901      	cbnz	r1, 43b0 <yield+0x54>
    43ae:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    43b0:	2500      	movs	r5, #0
    43b2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    43b4:	6883      	ldr	r3, [r0, #8]
    43b6:	4798      	blx	r3
		runningFromYield = false;
    43b8:	7025      	strb	r5, [r4, #0]
    43ba:	e7d3      	b.n	4364 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    43bc:	f000 fa30 	bl	4820 <serialEvent3()>
    43c0:	e7df      	b.n	4382 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    43c2:	f000 fa2b 	bl	481c <serialEvent2()>
    43c6:	e7d9      	b.n	437c <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    43c8:	f000 fa26 	bl	4818 <serialEvent1()>
    43cc:	e7d3      	b.n	4376 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    43ce:	f7ff ffc3 	bl	4358 <serialEvent()>
    43d2:	e7cd      	b.n	4370 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    43d4:	2900      	cmp	r1, #0
    43d6:	d1c5      	bne.n	4364 <yield+0x8>
    43d8:	b662      	cpsie	i
    43da:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    43dc:	4b05      	ldr	r3, [pc, #20]	; (43f4 <yield+0x98>)
    43de:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    43e0:	2900      	cmp	r1, #0
    43e2:	d1e5      	bne.n	43b0 <yield+0x54>
    43e4:	e7e3      	b.n	43ae <yield+0x52>
    43e6:	bf00      	nop
    43e8:	1fff946c 	.word	0x1fff946c
    43ec:	1fff9460 	.word	0x1fff9460
    43f0:	1fff9464 	.word	0x1fff9464
    43f4:	1fff945c 	.word	0x1fff945c

000043f8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    43f8:	b4f0      	push	{r4, r5, r6, r7}
    43fa:	1e4d      	subs	r5, r1, #1
    43fc:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    43fe:	2400      	movs	r4, #0
    4400:	e000      	b.n	4404 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4402:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4404:	fbb0 f3f2 	udiv	r3, r0, r2
    4408:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    440c:	2809      	cmp	r0, #9
    440e:	f100 0730 	add.w	r7, r0, #48	; 0x30
    4412:	bf8a      	itet	hi
    4414:	3037      	addhi	r0, #55	; 0x37
    4416:	b2f8      	uxtbls	r0, r7
    4418:	b2c0      	uxtbhi	r0, r0
    441a:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    441e:	4618      	mov	r0, r3
    4420:	2b00      	cmp	r3, #0
    4422:	d1ee      	bne.n	4402 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4424:	190a      	adds	r2, r1, r4
    4426:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4428:	b14c      	cbz	r4, 443e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    442a:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    442c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    4430:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4432:	3301      	adds	r3, #1
    4434:	1ae0      	subs	r0, r4, r3
    4436:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4438:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    443c:	dbf5      	blt.n	442a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    443e:	4608      	mov	r0, r1
    4440:	bcf0      	pop	{r4, r5, r6, r7}
    4442:	4770      	bx	lr

00004444 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4444:	4a05      	ldr	r2, [pc, #20]	; (445c <serial_available+0x18>)
	tail = rx_buffer_tail;
    4446:	4b06      	ldr	r3, [pc, #24]	; (4460 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4448:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    444a:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    444c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    444e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4450:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    4452:	bf38      	it	cc
    4454:	3040      	addcc	r0, #64	; 0x40
    4456:	1ac0      	subs	r0, r0, r3
}
    4458:	4770      	bx	lr
    445a:	bf00      	nop
    445c:	1fff9474 	.word	0x1fff9474
    4460:	1fff9475 	.word	0x1fff9475

00004464 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    4464:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4466:	4b38      	ldr	r3, [pc, #224]	; (4548 <uart0_status_isr+0xe4>)
    4468:	791a      	ldrb	r2, [r3, #4]
    446a:	f012 0f30 	tst.w	r2, #48	; 0x30
    446e:	d02c      	beq.n	44ca <uart0_status_isr+0x66>
		__disable_irq();
    4470:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    4472:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4474:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    4478:	2900      	cmp	r1, #0
    447a:	d03d      	beq.n	44f8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    447c:	b662      	cpsie	i
			head = rx_buffer_head;
    447e:	4f33      	ldr	r7, [pc, #204]	; (454c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4480:	4933      	ldr	r1, [pc, #204]	; (4550 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4482:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4484:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4486:	4e33      	ldr	r6, [pc, #204]	; (4554 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4488:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    448a:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    448c:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    448e:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4490:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4492:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4494:	bf28      	it	cs
    4496:	2300      	movcs	r3, #0
				if (newhead != tail) {
    4498:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    449a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    449e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    44a0:	bf1c      	itt	ne
    44a2:	54f1      	strbne	r1, [r6, r3]
    44a4:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    44a6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    44aa:	d1f0      	bne.n	448e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    44ac:	4b2a      	ldr	r3, [pc, #168]	; (4558 <uart0_status_isr+0xf4>)
    44ae:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    44b0:	b2c2      	uxtb	r2, r0
    44b2:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    44b4:	b14b      	cbz	r3, 44ca <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    44b6:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    44b8:	bf36      	itet	cc
    44ba:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    44be:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    44c0:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    44c2:	2827      	cmp	r0, #39	; 0x27
    44c4:	bfc4      	itt	gt
    44c6:	2201      	movgt	r2, #1
    44c8:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    44ca:	491f      	ldr	r1, [pc, #124]	; (4548 <uart0_status_isr+0xe4>)
    44cc:	78ca      	ldrb	r2, [r1, #3]
    44ce:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    44d0:	0615      	lsls	r5, r2, #24
    44d2:	d416      	bmi.n	4502 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    44d4:	0652      	lsls	r2, r2, #25
    44d6:	d50d      	bpl.n	44f4 <uart0_status_isr+0x90>
    44d8:	4b1b      	ldr	r3, [pc, #108]	; (4548 <uart0_status_isr+0xe4>)
    44da:	791b      	ldrb	r3, [r3, #4]
    44dc:	065b      	lsls	r3, r3, #25
    44de:	d509      	bpl.n	44f4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    44e0:	4b1e      	ldr	r3, [pc, #120]	; (455c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    44e2:	491f      	ldr	r1, [pc, #124]	; (4560 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    44e4:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    44e6:	2200      	movs	r2, #0
    44e8:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    44ea:	b103      	cbz	r3, 44ee <uart0_status_isr+0x8a>
    44ec:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    44ee:	4b16      	ldr	r3, [pc, #88]	; (4548 <uart0_status_isr+0xe4>)
    44f0:	223c      	movs	r2, #60	; 0x3c
    44f2:	70da      	strb	r2, [r3, #3]
	}
}
    44f4:	bcf0      	pop	{r4, r5, r6, r7}
    44f6:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    44f8:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    44fa:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    44fc:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    44fe:	b662      	cpsie	i
    4500:	e7e3      	b.n	44ca <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4502:	790b      	ldrb	r3, [r1, #4]
    4504:	061c      	lsls	r4, r3, #24
    4506:	d5e5      	bpl.n	44d4 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    4508:	4b16      	ldr	r3, [pc, #88]	; (4564 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    450a:	4e17      	ldr	r6, [pc, #92]	; (4568 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    450c:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    450e:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4510:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    4512:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    4514:	429c      	cmp	r4, r3
    4516:	d00e      	beq.n	4536 <uart0_status_isr+0xd2>
    4518:	4d14      	ldr	r5, [pc, #80]	; (456c <uart0_status_isr+0x108>)
    451a:	e001      	b.n	4520 <uart0_status_isr+0xbc>
    451c:	42a3      	cmp	r3, r4
    451e:	d00a      	beq.n	4536 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    4520:	3301      	adds	r3, #1
    4522:	2b40      	cmp	r3, #64	; 0x40
    4524:	bf28      	it	cs
    4526:	2300      	movcs	r3, #0
			avail = UART0_S1;
    4528:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    452a:	5ce8      	ldrb	r0, [r5, r3]
    452c:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    452e:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    4530:	7d08      	ldrb	r0, [r1, #20]
    4532:	2807      	cmp	r0, #7
    4534:	d9f2      	bls.n	451c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    4536:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4538:	4903      	ldr	r1, [pc, #12]	; (4548 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    453a:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    453c:	790b      	ldrb	r3, [r1, #4]
    453e:	0618      	lsls	r0, r3, #24
    4540:	bf44      	itt	mi
    4542:	237c      	movmi	r3, #124	; 0x7c
    4544:	70cb      	strbmi	r3, [r1, #3]
    4546:	e7c5      	b.n	44d4 <uart0_status_isr+0x70>
    4548:	4006a000 	.word	0x4006a000
    454c:	1fff9474 	.word	0x1fff9474
    4550:	1fff9475 	.word	0x1fff9475
    4554:	1fff94b8 	.word	0x1fff94b8
    4558:	1fff9470 	.word	0x1fff9470
    455c:	1fff94fc 	.word	0x1fff94fc
    4560:	1fff94f8 	.word	0x1fff94f8
    4564:	1fff9500 	.word	0x1fff9500
    4568:	1fff94f9 	.word	0x1fff94f9
    456c:	1fff9478 	.word	0x1fff9478

00004570 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4570:	4a05      	ldr	r2, [pc, #20]	; (4588 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    4572:	4b06      	ldr	r3, [pc, #24]	; (458c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4574:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4576:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4578:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    457a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    457c:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    457e:	bf38      	it	cc
    4580:	3040      	addcc	r0, #64	; 0x40
    4582:	1ac0      	subs	r0, r0, r3
}
    4584:	4770      	bx	lr
    4586:	bf00      	nop
    4588:	1fff9574 	.word	0x1fff9574
    458c:	1fff9509 	.word	0x1fff9509

00004590 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    4590:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4592:	4b38      	ldr	r3, [pc, #224]	; (4674 <uart1_status_isr+0xe4>)
    4594:	791a      	ldrb	r2, [r3, #4]
    4596:	f012 0f30 	tst.w	r2, #48	; 0x30
    459a:	d02c      	beq.n	45f6 <uart1_status_isr+0x66>
		__disable_irq();
    459c:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    459e:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    45a0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    45a4:	2900      	cmp	r1, #0
    45a6:	d03d      	beq.n	4624 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    45a8:	b662      	cpsie	i
			head = rx_buffer_head;
    45aa:	4f33      	ldr	r7, [pc, #204]	; (4678 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    45ac:	4933      	ldr	r1, [pc, #204]	; (467c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    45ae:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    45b0:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    45b2:	4e33      	ldr	r6, [pc, #204]	; (4680 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    45b4:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    45b6:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    45b8:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    45ba:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    45bc:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    45be:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    45c0:	bf28      	it	cs
    45c2:	2300      	movcs	r3, #0
				if (newhead != tail) {
    45c4:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    45c6:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    45ca:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    45cc:	bf1c      	itt	ne
    45ce:	54f1      	strbne	r1, [r6, r3]
    45d0:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    45d2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    45d6:	d1f0      	bne.n	45ba <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    45d8:	4b2a      	ldr	r3, [pc, #168]	; (4684 <uart1_status_isr+0xf4>)
    45da:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    45dc:	b2c2      	uxtb	r2, r0
    45de:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    45e0:	b14b      	cbz	r3, 45f6 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    45e2:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    45e4:	bf36      	itet	cc
    45e6:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    45ea:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    45ec:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    45ee:	2827      	cmp	r0, #39	; 0x27
    45f0:	bfc4      	itt	gt
    45f2:	2201      	movgt	r2, #1
    45f4:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    45f6:	491f      	ldr	r1, [pc, #124]	; (4674 <uart1_status_isr+0xe4>)
    45f8:	78ca      	ldrb	r2, [r1, #3]
    45fa:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    45fc:	0615      	lsls	r5, r2, #24
    45fe:	d416      	bmi.n	462e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    4600:	0652      	lsls	r2, r2, #25
    4602:	d50d      	bpl.n	4620 <uart1_status_isr+0x90>
    4604:	4b1b      	ldr	r3, [pc, #108]	; (4674 <uart1_status_isr+0xe4>)
    4606:	791b      	ldrb	r3, [r3, #4]
    4608:	065b      	lsls	r3, r3, #25
    460a:	d509      	bpl.n	4620 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    460c:	4b1e      	ldr	r3, [pc, #120]	; (4688 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    460e:	491f      	ldr	r1, [pc, #124]	; (468c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4610:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    4612:	2200      	movs	r2, #0
    4614:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4616:	b103      	cbz	r3, 461a <uart1_status_isr+0x8a>
    4618:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    461a:	4b16      	ldr	r3, [pc, #88]	; (4674 <uart1_status_isr+0xe4>)
    461c:	223c      	movs	r2, #60	; 0x3c
    461e:	70da      	strb	r2, [r3, #3]
	}
}
    4620:	bcf0      	pop	{r4, r5, r6, r7}
    4622:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    4624:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    4626:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    4628:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    462a:	b662      	cpsie	i
    462c:	e7e3      	b.n	45f6 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    462e:	790b      	ldrb	r3, [r1, #4]
    4630:	061c      	lsls	r4, r3, #24
    4632:	d5e5      	bpl.n	4600 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    4634:	4b16      	ldr	r3, [pc, #88]	; (4690 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    4636:	4e17      	ldr	r6, [pc, #92]	; (4694 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4638:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    463a:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    463c:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    463e:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    4640:	429c      	cmp	r4, r3
    4642:	d00e      	beq.n	4662 <uart1_status_isr+0xd2>
    4644:	4d14      	ldr	r5, [pc, #80]	; (4698 <uart1_status_isr+0x108>)
    4646:	e001      	b.n	464c <uart1_status_isr+0xbc>
    4648:	42a3      	cmp	r3, r4
    464a:	d00a      	beq.n	4662 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    464c:	3301      	adds	r3, #1
    464e:	2b28      	cmp	r3, #40	; 0x28
    4650:	bf28      	it	cs
    4652:	2300      	movcs	r3, #0
			avail = UART1_S1;
    4654:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    4656:	5ce8      	ldrb	r0, [r5, r3]
    4658:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    465a:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    465c:	7d08      	ldrb	r0, [r1, #20]
    465e:	2807      	cmp	r0, #7
    4660:	d9f2      	bls.n	4648 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    4662:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4664:	4903      	ldr	r1, [pc, #12]	; (4674 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    4666:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4668:	790b      	ldrb	r3, [r1, #4]
    466a:	0618      	lsls	r0, r3, #24
    466c:	bf44      	itt	mi
    466e:	237c      	movmi	r3, #124	; 0x7c
    4670:	70cb      	strbmi	r3, [r1, #3]
    4672:	e7c5      	b.n	4600 <uart1_status_isr+0x70>
    4674:	4006b000 	.word	0x4006b000
    4678:	1fff9574 	.word	0x1fff9574
    467c:	1fff9509 	.word	0x1fff9509
    4680:	1fff9534 	.word	0x1fff9534
    4684:	1fff9504 	.word	0x1fff9504
    4688:	1fff9578 	.word	0x1fff9578
    468c:	1fff9508 	.word	0x1fff9508
    4690:	1fff957c 	.word	0x1fff957c
    4694:	1fff9575 	.word	0x1fff9575
    4698:	1fff950c 	.word	0x1fff950c

0000469c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    469c:	4a05      	ldr	r2, [pc, #20]	; (46b4 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    469e:	4b06      	ldr	r3, [pc, #24]	; (46b8 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    46a0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    46a2:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    46a4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    46a6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    46a8:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    46aa:	bf38      	it	cc
    46ac:	3040      	addcc	r0, #64	; 0x40
    46ae:	1ac0      	subs	r0, r0, r3
}
    46b0:	4770      	bx	lr
    46b2:	bf00      	nop
    46b4:	1fff9584 	.word	0x1fff9584
    46b8:	1fff9585 	.word	0x1fff9585

000046bc <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    46bc:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    46be:	4b2b      	ldr	r3, [pc, #172]	; (476c <uart2_status_isr+0xb0>)
    46c0:	791a      	ldrb	r2, [r3, #4]
    46c2:	0694      	lsls	r4, r2, #26
    46c4:	d51f      	bpl.n	4706 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    46c6:	482a      	ldr	r0, [pc, #168]	; (4770 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    46c8:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    46ca:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    46cc:	4929      	ldr	r1, [pc, #164]	; (4774 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    46ce:	3301      	adds	r3, #1
    46d0:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    46d2:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    46d4:	bfc8      	it	gt
    46d6:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    46d8:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    46da:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    46dc:	d003      	beq.n	46e6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    46de:	4c26      	ldr	r4, [pc, #152]	; (4778 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    46e0:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    46e2:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    46e4:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    46e6:	4a25      	ldr	r2, [pc, #148]	; (477c <uart2_status_isr+0xc0>)
    46e8:	6811      	ldr	r1, [r2, #0]
    46ea:	b161      	cbz	r1, 4706 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    46ec:	4a24      	ldr	r2, [pc, #144]	; (4780 <uart2_status_isr+0xc4>)
    46ee:	7812      	ldrb	r2, [r2, #0]
    46f0:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    46f2:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    46f4:	bf36      	itet	cc
    46f6:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    46fa:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    46fc:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    46fe:	2b27      	cmp	r3, #39	; 0x27
    4700:	bfc4      	itt	gt
    4702:	2301      	movgt	r3, #1
    4704:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4706:	4a19      	ldr	r2, [pc, #100]	; (476c <uart2_status_isr+0xb0>)
    4708:	78d3      	ldrb	r3, [r2, #3]
    470a:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    470c:	0618      	lsls	r0, r3, #24
    470e:	d411      	bmi.n	4734 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4710:	065a      	lsls	r2, r3, #25
    4712:	d50d      	bpl.n	4730 <uart2_status_isr+0x74>
    4714:	4b15      	ldr	r3, [pc, #84]	; (476c <uart2_status_isr+0xb0>)
    4716:	791b      	ldrb	r3, [r3, #4]
    4718:	065b      	lsls	r3, r3, #25
    471a:	d509      	bpl.n	4730 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    471c:	4b19      	ldr	r3, [pc, #100]	; (4784 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    471e:	491a      	ldr	r1, [pc, #104]	; (4788 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4720:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4722:	2200      	movs	r2, #0
    4724:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4726:	b103      	cbz	r3, 472a <uart2_status_isr+0x6e>
    4728:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    472a:	4b10      	ldr	r3, [pc, #64]	; (476c <uart2_status_isr+0xb0>)
    472c:	222c      	movs	r2, #44	; 0x2c
    472e:	70da      	strb	r2, [r3, #3]
	}
}
    4730:	bc30      	pop	{r4, r5}
    4732:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4734:	7911      	ldrb	r1, [r2, #4]
    4736:	0609      	lsls	r1, r1, #24
    4738:	d5ea      	bpl.n	4710 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    473a:	4914      	ldr	r1, [pc, #80]	; (478c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    473c:	4810      	ldr	r0, [pc, #64]	; (4780 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    473e:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4740:	7801      	ldrb	r1, [r0, #0]
    4742:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    4744:	428c      	cmp	r4, r1
    4746:	d00d      	beq.n	4764 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4748:	1c4a      	adds	r2, r1, #1
    474a:	2a27      	cmp	r2, #39	; 0x27
    474c:	bf84      	itt	hi
    474e:	2100      	movhi	r1, #0
    4750:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    4752:	4d0f      	ldr	r5, [pc, #60]	; (4790 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4754:	4c05      	ldr	r4, [pc, #20]	; (476c <uart2_status_isr+0xb0>)
    4756:	bf98      	it	ls
    4758:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    475a:	5caa      	ldrb	r2, [r5, r2]
    475c:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    475e:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4760:	7001      	strb	r1, [r0, #0]
    4762:	e7d5      	b.n	4710 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4764:	216c      	movs	r1, #108	; 0x6c
    4766:	70d1      	strb	r1, [r2, #3]
    4768:	e7d2      	b.n	4710 <uart2_status_isr+0x54>
    476a:	bf00      	nop
    476c:	4006c000 	.word	0x4006c000
    4770:	1fff9584 	.word	0x1fff9584
    4774:	1fff9585 	.word	0x1fff9585
    4778:	1fff95b0 	.word	0x1fff95b0
    477c:	1fff9580 	.word	0x1fff9580
    4780:	1fff95f1 	.word	0x1fff95f1
    4784:	1fff95f4 	.word	0x1fff95f4
    4788:	1fff95f0 	.word	0x1fff95f0
    478c:	1fff95f8 	.word	0x1fff95f8
    4790:	1fff9588 	.word	0x1fff9588

00004794 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4794:	b570      	push	{r4, r5, r6, lr}
    4796:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4798:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    479a:	4b19      	ldr	r3, [pc, #100]	; (4800 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    479c:	4d19      	ldr	r5, [pc, #100]	; (4804 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    479e:	481a      	ldr	r0, [pc, #104]	; (4808 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    47a0:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    47a2:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    47a4:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    47a6:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    47a8:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    47aa:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    47ac:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    47ae:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    47b0:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    47b2:	7813      	ldrb	r3, [r2, #0]
    47b4:	061b      	lsls	r3, r3, #24
    47b6:	d5fc      	bpl.n	47b2 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    47b8:	4b14      	ldr	r3, [pc, #80]	; (480c <usb_init_serialnumber+0x78>)
    47ba:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    47bc:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    47be:	4b14      	ldr	r3, [pc, #80]	; (4810 <usb_init_serialnumber+0x7c>)
    47c0:	4c14      	ldr	r4, [pc, #80]	; (4814 <usb_init_serialnumber+0x80>)
    47c2:	4298      	cmp	r0, r3
    47c4:	bf98      	it	ls
    47c6:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    47ca:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    47cc:	bf98      	it	ls
    47ce:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    47d0:	220a      	movs	r2, #10
    47d2:	f7ff fe11 	bl	43f8 <ultoa>
    47d6:	a901      	add	r1, sp, #4
    47d8:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    47da:	2300      	movs	r3, #0
		char c = buf[i];
    47dc:	f811 2b01 	ldrb.w	r2, [r1], #1
    47e0:	3301      	adds	r3, #1
		if (!c) break;
    47e2:	b13a      	cbz	r2, 47f4 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    47e4:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    47e6:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    47ea:	d1f7      	bne.n	47dc <usb_init_serialnumber+0x48>
    47ec:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    47ee:	7023      	strb	r3, [r4, #0]
}
    47f0:	b004      	add	sp, #16
    47f2:	bd70      	pop	{r4, r5, r6, pc}
    47f4:	005b      	lsls	r3, r3, #1
    47f6:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    47f8:	7023      	strb	r3, [r4, #0]
}
    47fa:	b004      	add	sp, #16
    47fc:	bd70      	pop	{r4, r5, r6, pc}
    47fe:	bf00      	nop
    4800:	40020000 	.word	0x40020000
    4804:	40020007 	.word	0x40020007
    4808:	40020006 	.word	0x40020006
    480c:	40020008 	.word	0x40020008
    4810:	0098967f 	.word	0x0098967f
    4814:	1fff87c8 	.word	0x1fff87c8

00004818 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4818:	4770      	bx	lr
    481a:	bf00      	nop

0000481c <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    481c:	4770      	bx	lr
    481e:	bf00      	nop

00004820 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4820:	4770      	bx	lr
    4822:	bf00      	nop

00004824 <__libc_init_array>:
    4824:	b570      	push	{r4, r5, r6, lr}
    4826:	4e0f      	ldr	r6, [pc, #60]	; (4864 <__libc_init_array+0x40>)
    4828:	4d0f      	ldr	r5, [pc, #60]	; (4868 <__libc_init_array+0x44>)
    482a:	1b76      	subs	r6, r6, r5
    482c:	10b6      	asrs	r6, r6, #2
    482e:	bf18      	it	ne
    4830:	2400      	movne	r4, #0
    4832:	d005      	beq.n	4840 <__libc_init_array+0x1c>
    4834:	3401      	adds	r4, #1
    4836:	f855 3b04 	ldr.w	r3, [r5], #4
    483a:	4798      	blx	r3
    483c:	42a6      	cmp	r6, r4
    483e:	d1f9      	bne.n	4834 <__libc_init_array+0x10>
    4840:	4e0a      	ldr	r6, [pc, #40]	; (486c <__libc_init_array+0x48>)
    4842:	4d0b      	ldr	r5, [pc, #44]	; (4870 <__libc_init_array+0x4c>)
    4844:	1b76      	subs	r6, r6, r5
    4846:	f002 f89b 	bl	6980 <_init>
    484a:	10b6      	asrs	r6, r6, #2
    484c:	bf18      	it	ne
    484e:	2400      	movne	r4, #0
    4850:	d006      	beq.n	4860 <__libc_init_array+0x3c>
    4852:	3401      	adds	r4, #1
    4854:	f855 3b04 	ldr.w	r3, [r5], #4
    4858:	4798      	blx	r3
    485a:	42a6      	cmp	r6, r4
    485c:	d1f9      	bne.n	4852 <__libc_init_array+0x2e>
    485e:	bd70      	pop	{r4, r5, r6, pc}
    4860:	bd70      	pop	{r4, r5, r6, pc}
    4862:	bf00      	nop
    4864:	0000698c 	.word	0x0000698c
    4868:	0000698c 	.word	0x0000698c
    486c:	000069a0 	.word	0x000069a0
    4870:	0000698c 	.word	0x0000698c

00004874 <memset>:
    4874:	b470      	push	{r4, r5, r6}
    4876:	0784      	lsls	r4, r0, #30
    4878:	d046      	beq.n	4908 <memset+0x94>
    487a:	1e54      	subs	r4, r2, #1
    487c:	2a00      	cmp	r2, #0
    487e:	d041      	beq.n	4904 <memset+0x90>
    4880:	b2cd      	uxtb	r5, r1
    4882:	4603      	mov	r3, r0
    4884:	e002      	b.n	488c <memset+0x18>
    4886:	1e62      	subs	r2, r4, #1
    4888:	b3e4      	cbz	r4, 4904 <memset+0x90>
    488a:	4614      	mov	r4, r2
    488c:	f803 5b01 	strb.w	r5, [r3], #1
    4890:	079a      	lsls	r2, r3, #30
    4892:	d1f8      	bne.n	4886 <memset+0x12>
    4894:	2c03      	cmp	r4, #3
    4896:	d92e      	bls.n	48f6 <memset+0x82>
    4898:	b2cd      	uxtb	r5, r1
    489a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    489e:	2c0f      	cmp	r4, #15
    48a0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    48a4:	d919      	bls.n	48da <memset+0x66>
    48a6:	f103 0210 	add.w	r2, r3, #16
    48aa:	4626      	mov	r6, r4
    48ac:	3e10      	subs	r6, #16
    48ae:	2e0f      	cmp	r6, #15
    48b0:	f842 5c10 	str.w	r5, [r2, #-16]
    48b4:	f842 5c0c 	str.w	r5, [r2, #-12]
    48b8:	f842 5c08 	str.w	r5, [r2, #-8]
    48bc:	f842 5c04 	str.w	r5, [r2, #-4]
    48c0:	f102 0210 	add.w	r2, r2, #16
    48c4:	d8f2      	bhi.n	48ac <memset+0x38>
    48c6:	f1a4 0210 	sub.w	r2, r4, #16
    48ca:	f022 020f 	bic.w	r2, r2, #15
    48ce:	f004 040f 	and.w	r4, r4, #15
    48d2:	3210      	adds	r2, #16
    48d4:	2c03      	cmp	r4, #3
    48d6:	4413      	add	r3, r2
    48d8:	d90d      	bls.n	48f6 <memset+0x82>
    48da:	461e      	mov	r6, r3
    48dc:	4622      	mov	r2, r4
    48de:	3a04      	subs	r2, #4
    48e0:	2a03      	cmp	r2, #3
    48e2:	f846 5b04 	str.w	r5, [r6], #4
    48e6:	d8fa      	bhi.n	48de <memset+0x6a>
    48e8:	1f22      	subs	r2, r4, #4
    48ea:	f022 0203 	bic.w	r2, r2, #3
    48ee:	3204      	adds	r2, #4
    48f0:	4413      	add	r3, r2
    48f2:	f004 0403 	and.w	r4, r4, #3
    48f6:	b12c      	cbz	r4, 4904 <memset+0x90>
    48f8:	b2c9      	uxtb	r1, r1
    48fa:	441c      	add	r4, r3
    48fc:	f803 1b01 	strb.w	r1, [r3], #1
    4900:	42a3      	cmp	r3, r4
    4902:	d1fb      	bne.n	48fc <memset+0x88>
    4904:	bc70      	pop	{r4, r5, r6}
    4906:	4770      	bx	lr
    4908:	4614      	mov	r4, r2
    490a:	4603      	mov	r3, r0
    490c:	e7c2      	b.n	4894 <memset+0x20>
    490e:	bf00      	nop

00004910 <random>:
    4910:	b410      	push	{r4}
    4912:	4b0c      	ldr	r3, [pc, #48]	; (4944 <random+0x34>)
    4914:	4c0c      	ldr	r4, [pc, #48]	; (4948 <random+0x38>)
    4916:	6819      	ldr	r1, [r3, #0]
    4918:	4a0c      	ldr	r2, [pc, #48]	; (494c <random+0x3c>)
    491a:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    491e:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
    4922:	fb04 f403 	mul.w	r4, r4, r3
    4926:	fb02 4000 	mla	r0, r2, r0, r4
    492a:	fba3 2302 	umull	r2, r3, r3, r2
    492e:	4403      	add	r3, r0
    4930:	3201      	adds	r2, #1
    4932:	f143 0300 	adc.w	r3, r3, #0
    4936:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    493a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    493e:	bc10      	pop	{r4}
    4940:	4770      	bx	lr
    4942:	bf00      	nop
    4944:	1fff8c08 	.word	0x1fff8c08
    4948:	5851f42d 	.word	0x5851f42d
    494c:	4c957f2d 	.word	0x4c957f2d

00004950 <register_fini>:
    4950:	4b02      	ldr	r3, [pc, #8]	; (495c <register_fini+0xc>)
    4952:	b113      	cbz	r3, 495a <register_fini+0xa>
    4954:	4802      	ldr	r0, [pc, #8]	; (4960 <register_fini+0x10>)
    4956:	f7fd bdc7 	b.w	24e8 <atexit>
    495a:	4770      	bx	lr
    495c:	00000000 	.word	0x00000000
    4960:	00004965 	.word	0x00004965

00004964 <__libc_fini_array>:
    4964:	b538      	push	{r3, r4, r5, lr}
    4966:	4d07      	ldr	r5, [pc, #28]	; (4984 <__libc_fini_array+0x20>)
    4968:	4c07      	ldr	r4, [pc, #28]	; (4988 <__libc_fini_array+0x24>)
    496a:	1b2c      	subs	r4, r5, r4
    496c:	10a4      	asrs	r4, r4, #2
    496e:	d005      	beq.n	497c <__libc_fini_array+0x18>
    4970:	3c01      	subs	r4, #1
    4972:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    4976:	4798      	blx	r3
    4978:	2c00      	cmp	r4, #0
    497a:	d1f9      	bne.n	4970 <__libc_fini_array+0xc>
    497c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4980:	f002 b80e 	b.w	69a0 <__init_array_end>
	...

0000498c <vtable for APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>>:
	...
    4994:	068d 0000 05c9 0000 0491 0000 04cd 0000     ................
    49a4:	046d 0000 0471 0000 0751 0000               m...q...Q...

000049b0 <stratosphere_sunset_gp>:
    49b0:	0100 0902 0104 0902 0108 0a02 010d 0b02     ................
    49c0:	0111 0b02 0115 0d03 011a 0f03 011e 1003     ................
    49d0:	0123 1204 0127 1304 012b 1504 0130 1705     #...'...+...0...
    49e0:	0134 1b05 0139 2006 013d 2607 0141 3109     4...9.. =..&A..1
    49f0:	0146 3d0b 014a 5011 014f 6717 0153 871f     F..=J..PO..gS...
    4a00:	0257 ac2a 045c be30 0960 d236 0b65 d637     W.*.\.0.`.6.e.7.
    4a10:	0d69 dd3a 106d db3c 1372 d83e 1876 d242     i.:.m.<.r.>.v.B.
    4a20:	1e7b c945 237f b446 2783 a246 4088 9054     {.E..#F..'F..@T.
    4a30:	618c 8061 9491 7b79 d295 7792 b899 5c7a     .aa...y{...w..z\
    4a40:	9f9e 4564 85a2 2144 6ea7 0b2a 98ab 0635     ..dE..D!.n*...5.
    4a50:	cbaf 0341 deb4 0563 f2b8 078e debd 057a     ..A...c.......z.
    4a60:	cbc1 0369 d0c5 0149 d2ca 0130 dece 012d     ..i...I...0...-.
    4a70:	ead3 012a 96d7 0117 56db 010a 23e0 0103     ..*......V...#..
    4a80:	09e4 0101 04e9 0101 01ed 0101 01f1 0101     ................
    4a90:	01f6 0101 01fa 0101 01ff 0101               ............

00004a9c <bhw4_009_gp>:
    4a9c:	4200 c0ba 012b 4716 024f 8e68 4275 c0ba     .B..+..GO.h.uB..
    4aac:	0293 8e68 01ba 4716 02e0 8e68 04ff 1c1b     ..h....G..h.....

00004abc <es_landscape_33_gp>:
    4abc:	0100 0005 2013 0117 a126 0137 e53f 0190     ..... ..&.7.?...
    4acc:	2742 4a8e 01ff 0104                         B'.J....

00004ad4 <Orange_to_Purple_gp>:
    4ad4:	d000 0132 927f 2d1b 61ff b20c               ..2....-.a..

00004ae0 <Skydye11_gp>:
    4ae0:	0800 0400 0801 0400 0c02 0800 1003 0c00     ................
    4af0:	1404 0c00 1405 1000 1806 1000 1c07 1400     ................
    4b00:	1c09 1400 200a 1800 240b 1800 240c 1c00     ..... ...$...$..
    4b10:	280d 1c00 2c0e 2000 300f 2400 3410 2400     .(...,. .0.$.4.$
    4b20:	3811 2800 3c12 2c00 3c14 2c00 4015 3000     .8.(.<.,.<.,.@.0
    4b30:	4416 3400 4817 3400 4c18 3800 4c19 3804     .D.4.H.4.L.8.L.8
    4b40:	501a 3c04 541b 3c04 581c 4004 5c1d 4404     .P.<.T.<.X.@.\.D
    4b50:	601e 4808 601f 4c08 5c20 5008 5821 5408     .`.H.`.L \.P!X.T
    4b60:	5422 5c08 5423 6008 5024 6808 4c25 6c08     "T.\#T.`$P.h%L.l
    4b70:	4826 7008 4827 7808 4428 7c08 4029 8408     &H.p'H.x(D.|)@..
    4b80:	3c2a 8808 3c2b 9008 382c 9408 342d 9808     *<..+<..,8..-4..
    4b90:	302e a008 302f a404 2c30 ac04 2831 b004     .0../0..0,..1(..
    4ba0:	2432 b404 2433 bc04 2034 c004 1c35 c804     2$..3$..4 ..5...
    4bb0:	1836 cc04 1837 d404 1438 d804 1039 dc04     6...7...8...9...
    4bc0:	0c3a e404 0c3b e804 083c f004 043d f404     :...;...<...=...
    4bd0:	003e fc00 003f f804 0040 f40c 0041 f014     >...?...@...A...
    4be0:	0042 ec1c 0043 e824 0044 e42c 0045 e034     B...C.$.D.,.E.4.
    4bf0:	0046 dc3c 0047 d844 0048 d44c 0049 d054     F.<.G.D.H.L.I.T.
    4c00:	004a cc5c 004b c864 004c c46c 004d c074     J.\.K.d.L.l.M.t.
    4c10:	004e bc7c 004f b884 0050 b48c 0051 b094     N.|.O...P...Q...
    4c20:	0052 ac9c 0053 a8a4 0054 a4ac 0055 a0b4     R...S...T...U...
    4c30:	0056 9cbc 0057 98c4 0058 94cc 0059 90d4     V...W...X...Y...
    4c40:	005a 8cdc 005b 88e4 005c 84ec 005d 7ce8     Z...[...\...]..|
    4c50:	005e 78e0 005f 70dc 0060 68d8 0061 60d0     ^..x_..p`..ha..`
    4c60:	0062 5cc8 0063 58c0 0064 50b8 0065 4cac     b..\c..Xd..Pe..L
    4c70:	0066 44a4 0067 409c 0068 3894 0069 348c     f..Dg..@h..8i..4
    4c80:	006a 2c80 006b 2878 006c 2070 006d 1c68     j..,k.x(l.p m.h.
    4c90:	006e 145c 006f 1054 0070 084c 0071 0040     n.\.o.T.p.L.q.@.
    4ca0:	0072 003c 0073 0038 0074 0034 0075 0030     r.<.s.8.t.4.u.0.
    4cb0:	0076 002c 0077 0028 0078 0024 0479 0020     v.,.w.(.x.$.y. .
    4cc0:	047a 001c 047b 0018 047c 0014 047d 0010     z...{...|...}...
    4cd0:	047e 000c 047f 0008 0480 0004 0881 0400     ~...............
    4ce0:	0c82 0800 1083 0c00 1484 0c00 1485 1000     ................
    4cf0:	1886 1000 1c87 1400 2088 1400 2089 1800     ......... ... ..
    4d00:	248a 1800 288b 1c00 2c8c 2000 308d 2400     .$...(...,. .0.$
    4d10:	348e 2404 388f 2804 3891 2804 3c92 2c04     .4.$.8.(.8.(.<.,
    4d20:	4093 3004 4494 3004 4495 3404 4896 3404     .@.0.D.0.D.4.H.4
    4d30:	4c97 3804 5098 3804 5099 3c04 549a 3c04     .L.8.P.8.P.<.T.<
    4d40:	589b 4004 5c9c 4404 609d 4808 609e 4c08     .X.@.\.D.`.H.`.L
    4d50:	689f 4808 70a0 4408 7ca1 4008 84a2 3c08     .h.H.p.D.|.@...<
    4d60:	90a3 3408 98a4 3008 a4a5 2c08 aca6 2808     ...4...0...,...(
    4d70:	b4a7 2404 c0a8 2004 c8a9 1c04 d4aa 1404     ...$... ........
    4d80:	dcab 1004 e8ac 0c04 f0ad 0804 fcae 0000     ................
    4d90:	fcaf 0008 fcb0 0014 fcb1 001c fcb2 0028     ..............(.
    4da0:	fcb3 0030 fcb4 003c fcb5 0044 fcb6 0050     ..0...<...D...P.
    4db0:	fcb7 0058 fcb8 0064 fcb9 006c fcba 0078     ..X...d...l...x.
    4dc0:	fcbb 0084 fcbc 008c fcbd 0098 fcbe 00a0     ................
    4dd0:	fcbf 00ac fcc0 00b4 fcc1 00c0 fcc2 00c8     ................
    4de0:	fcc3 00d4 fcc4 00dc fcc5 00e8 fcc6 00f0     ................
    4df0:	fcc7 00fc fcc8 00f0 fcc9 00e8 fcca 00dc     ................
    4e00:	fccb 00d0 fccc 00c4 fccd 00bc fcce 00b0     ................
    4e10:	fccf 00a4 fcd0 0098 fcd1 0090 fcd2 0084     ................
    4e20:	fcd3 0078 fcd4 0070 fcd5 0064 fcd6 0058     ..x...p...d...X.
    4e30:	fcd7 004c fcd8 0044 fcd9 0038 fcda 002c     ..L...D...8...,.
    4e40:	fcdb 0020 fcdc 0018 fcdd 000c fcde 0000     .. .............
    4e50:	f4df 0400 ece0 0800 e0e1 0c00 d8e2 1000     ................
    4e60:	cce3 1800 c4e4 1c00 b8e5 2000 b0e6 2404     ........... ...$
    4e70:	a8e7 2804 9ce8 2c04 94e9 3004 88ea 3804     ...(...,...0...8
    4e80:	80eb 3c04 74ec 4004 6ced 4404 60ee 4c08     ...<.t.@.l.D.`.L
    4e90:	5cef 4808 54f0 4408 50f1 4008 48f2 3808     .\.H.T.D.P.@.H.8
    4ea0:	44f3 3404 3cf4 3004 38f5 2c04 30f6 2804     .D.4.<.0.8.,.0.(
    4eb0:	2cf7 2004 24f8 1c04 20f9 1804 18fa 1404     .,. .$... ......
    4ec0:	14fb 1000 0cfc 0800 00fd 0000 04fe 0400     ................
    4ed0:	04ff 0400                                   ....

00004ed4 <vibrant_gp>:
    4ed4:	ff00 ffff 011e 1d90 e547 0cf6 ff77 0801     ........G...w...
    4ee4:	b8a5 cb01 03d6 fa1c 00ff 0000               ............

00004ef0 <es_landscape_64_gp>:
    4ef0:	0000 0000 0225 0119 0f4c 0573 4f7f 01d5     ....%...L.s..O..
    4f00:	7e80 2fd3 bc82 f7d1 9099 cdb6 3bcc fa75     .~./.........;u.
    4f10:	01ff c025                                   ..%.

00004f14 <standard_gp>:
    4f14:	0000 0000 0a54 ff11 0054 0011 0aa9 0cff     ....T...T.......
    4f24:	0aa9 0000 ffff 0c11                         ........

00004f2c <sin16_C(unsigned short)::base>:
    4f2c:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

00004f3c <twilight_gp>:
    4f3c:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    4f4c:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    4f5c:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    4f6c:	011e 0101 0120 0102 0123 0102 0125 0102     .... ...#...%...
    4f7c:	0228 0203 022a 0203 022d 0203 032f 0304     (...*...-.../...
    4f8c:	0332 0304 0435 0405 0437 0405 053a 0505     2...5...7...:...
    4f9c:	063c 0606 063f 0606 0741 0707 0844 0807     <...?...A...D...
    4fac:	0946 0908 0949 0a08 0a4b 0b08 0b4e 0d09     F...I...K...N...
    4fbc:	0c50 0e09 0d53 0f09 0e55 100a 0e58 110a     P...S...U...X...
    4fcc:	1185 330e 1088 340e 0f8a 370e 0e8d 390e     ...3...4...7...9
    4fdc:	0d8f 3d0e 0c92 3f0e 0c95 420e 0a97 450d     ...=...?...B...E
    4fec:	0a9a 480d 099c 4b0d 089f 4e0d 07a1 520e     ...H...K...N...R
    4ffc:	07a4 5410 07a6 5811 07a9 5b13 07ab 5f15     ...T...X...[..._
    500c:	07ae 6216 07b0 6619 06b3 691b 06b5 6d1d     ...b...f...i...m
    501c:	06b8 7020 07ba 7525 08bd 782a 09bf 7d2f     .. p..%u..*x../}
    502c:	0ac2 8036 0bc4 843b 0cc7 8942 0ec9 8c49     ..6...;...B...I.
    503c:	10cc 9150 12ce 9557 14d0 995f 16d3 9e67     ..P...W..._...g.
    504c:	18d5 a26f 1bd8 a877 1eda ac80 20dd b08a     ..o...w...... ..
    505c:	23df b693 27e2 ba9c 2ae4 c0a6 2ee7 c5b0     .#...'...*......
    506c:	34e9 c9b6 3aeb cfbb 41ee d4c1 49f0 dbc7     .4...:...A...I..
    507c:	50f2 dfcd 5af5 e6d5 64f7 ebdb 6dfa f2e1     .P...Z...d...m..
    508c:	78fc f7e7 84ff ffed                         .x......

00005094 <Split_03_gp>:
    5094:	0000 7b12 003f 1d4b 007f 01b2 1bbf 0130     ...{?.K.......0.
    50a4:	a7ff 0201                                   ....

000050a8 <water1_gp>:
    50a8:	0100 2e01 4f1c be88 1035 b851 4f49 be88     .....O..5.Q.IO..
    50b8:	4b63 e9c9 067c 670c 4b9e e9c9 54ba 6c6d     cK..|..g.K...Tml
    50c8:	10c6 b851 4fe8 be88 01ff 2e01               ..Q..O......

000050d4 <ib15_gp>:
    50d4:	7100 935b 9d48 4e58 d059 2155 ff6b 0b1d     .q[.H.XNY.U!k...
    50e4:	898d 271f 3bff 5921                         ...'.;!Y

000050ec <apple_green_gp>:
    50ec:	0000 0000 0102 0101 0104 0101 0107 0101     ................
    50fc:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    510c:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    511c:	011e 0102 0120 0102 0123 0103 0125 0103     .... ...#...%...
    512c:	0128 0104 012a 0105 012d 0105 012f 0106     (...*...-.../...
    513c:	0132 0107 0134 0108 0137 0108 0139 0209     2...4...7...9...
    514c:	013c 020a 013e 030b 0141 040c 0143 050d     <...>...A...C...
    515c:	0146 070e 0148 0710 014b 0811 014d 0812     F...H...K...M...
    516c:	0150 0813 0152 0915 0155 0916 0157 0918     P...R...U...W...
    517c:	0182 083a 0185 073c 0187 073f 018a 0642     ..:...<...?...B.
    518c:	018d 0645 018f 0547 0192 054a 0194 044e     ..E...G...J...N.
    519c:	0197 0450 0199 0354 019c 0356 019e 025a     ..P...T...V...Z.
    51ac:	01a1 025c 01a3 0160 01a6 0163 01a8 0167     ..\...`...c...g.
    51bc:	01ab 0169 02ad 016d 02b0 0170 03b3 0175     ..i...m...p...u.
    51cc:	03b5 0177 04b8 017c 05ba 0180 05bd 0183     ..w...|.........
    51dc:	06bf 0188 07c2 018b 09c4 0190 0ac7 0193     ................
    51ec:	0bc9 0198 0dcc 019c 0fce 01a1 11d1 01a4     ................
    51fc:	13d3 01a9 16d6 01ad 18d9 01b2 1bdb 01b8     ................
    520c:	1fde 01bb 23e0 01c1 27e3 01c5 2ce5 01cb     .....#...'...,..
    521c:	31e8 01cf 36ea 01d5 3ced 01d9 43ef 01df     .1...6...<...C..
    522c:	4af2 01e3 52f4 01e9 5bf7 01ed 64f9 01f4     .J...R...[...d..
    523c:	6efc 01f8 79ff 00ff                         .n...y..

00005244 <RedsandCyans_gp>:
    5244:	0f00 8760 284e 4a57 5366 2250 7172 1d47     ..`.N(WJfSP"rqG.
    5254:	967f 193f 3c8f 424f 0fb6 8760 0fdf 8760     ..?..<OB..`...`.
    5264:	0fff 8760                                   ..`.

00005268 <b_gp>:
    5268:	0000 0000 003f ff00 ff7f 0000 ffbf 00ff     ....?...........
    5278:	ffff ffff                                   ....

0000527c <es_pinksplash_07_gp>:
    527c:	e500 0101 f23d 3f04 ff65 ff0c f97f fc51     ....=..?e.....Q.
    528c:	ff99 eb0b f4c1 4405 e8ff 0501               .......D....

00005298 <faint_rainbow_gp>:
    5298:	4300 4700 4502 4101 4805 3b01 4a07 3501     .C.G.E.A.H.;.J.5
    52a8:	4d0a 3001 4e0c 2b01 500f 2601 5311 2201     .M.0.N.+.P.&.S."
    52b8:	5614 1d01 5816 1901 5b19 1601 5e1b 1201     .V...X...[...^..
    52c8:	611e 0f01 6220 0c01 6523 0a01 6825 0701     .a.. b..#e..%h..
    52d8:	6b28 0501 6e2a 0401 712d 0201 752f 0101     (k..*n..-q../u..
    52e8:	7832 0101 7935 0101 7d37 0101 803a 0101     2x..5y..7}..:...
    52f8:	843c 0103 873f 0105 8b41 0108 8e44 010c     <...?...A...D...
    5308:	9046 010e 9049 0110 924b 0111 944e 0113     F...I...K...N...
    5318:	9450 0116 9653 0117 9855 011a af83 0158     P...S...U.....X.
    5328:	b185 015d b388 0163 b38a 0168 b68d 016c     ..]...c...h...l.
    5338:	b88f 0172 b892 0177 ba94 017d bc97 0183     ..r...w...}.....
    5348:	bc9a 018a be9c 0190 c09f 0197 c0a1 019d     ................
    5358:	c2a4 01a4 c5a6 01ab c7a9 01b2 c7ab 01ba     ................
    5368:	c9ae 01c1 cbb0 02c9 cbb3 02d1 c9b5 02d5     ................
    5378:	c5b8 02d7 beba 02d7 b8bd 02d9 b3bf 02db     ................
    5388:	adc2 02db a7c4 02dd a1c7 02df 9dc9 02df     ................
    5398:	98cc 02e1 92cf 02e3 8ed1 02e5 89d4 02e5     ................
    53a8:	84d6 03e7 7ed9 03e9 79db 03e9 76de 03eb     .....~...y...v..
    53b8:	71e0 03ed 6de3 03ed 68e5 03ef 65e8 03f1     .q...m...h...e..
    53c8:	61ea 03f1 5ced 03f4 58ef 03f6 54f2 04f8     .a...\...X...T..
    53d8:	50f4 04f8 4ef7 04fa 4af9 04fc 47fc 04fc     .P...N...J...G..
    53e8:	43ff 04ff                                   .C..

000053ec <bhw2_22_gp>:
    53ec:	0000 0000 e363 0101 f982 5fc7 e39b 0101     ....c......_....
    53fc:	00ff 0000                                   ....

00005400 <es_autumn_19_gp>:
    5400:	1a00 0101 4333 0104 7654 010e 8968 3498     ....3C..Tv..h..4
    5410:	7170 0141 857a 3b95 897c 3498 7187 0141     pqA.z..;|..4.qA.
    5420:	8b8e 2e9a 71a3 010d 37cc 0103 11f9 0101     .....q...7......
    5430:	11ff 0101                                   ....

00005434 <bhw1_28_gp>:
    5434:	4b00 dd01 fc1e ff49 a930 f200 0077 f295     .K....I.0...w...
    5444:	2baa f200 fcce ff49 4ee8 d60c 00ff f295     .+....I..N......

00005454 <blue_fire_gp>:
    5454:	0000 0000 0040 ff00 00c8 ffff ffff ffff     ....@...........

00005464 <ultraviolet_mold_gp>:
    5464:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    5474:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    5484:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    5494:	011e 0101 0120 0102 0123 0102 0125 0202     .... ...#...%...
    54a4:	0228 0203 022a 0203 022d 0303 032f 0304     (...*...-.../...
    54b4:	0332 0404 0335 0504 0437 0505 043a 0605     2...5...7...:...
    54c4:	043c 0705 053f 0706 0541 0806 0544 0907     <...?...A...D...
    54d4:	0546 0a07 0649 0b08 064b 0c08 064e 0d08     F...I...K...N...
    54e4:	0650 0e09 0653 0f09 0655 1009 0783 3034     P...S...U.....40
    54f4:	0785 3339 0788 343f 078a 3443 078d 3245     ..93..?4..C4..E2
    5504:	078f 3048 0792 2e4a 0794 2b4e 0697 2950     ..H0..J...N+..P)
    5514:	069a 2554 069c 2257 069f 1f5a 06a1 1c5d     ..T%..W"..Z...].
    5524:	05a4 1960 05a6 1664 05a9 1267 05ab 0f6b     ..`...d...g...k.
    5534:	05ae 0d6d 05b0 0a72 04b3 0775 04b5 0579     ..m...r...u...y.
    5544:	05b8 057c 07ba 0480 09bd 0483 0cbf 0488     ..|.............
    5554:	10c2 048b 14c4 0390 19c7 0393 1ec9 0398     ................
    5564:	26cc 039d 2ecf 02a1 37d1 02a6 43d4 02a9     .&.......7...C..
    5574:	50d6 02af 5fd9 01b2 71db 01b8 85de 01bb     .P..._...q......
    5584:	9de0 01c1 b8e3 01c5 c2e5 01b8 c7e8 01a8     ................
    5594:	ceea 0198 d2ed 0187 d9ef 0177 def2 0167     ..........w...g.
    55a4:	e5f4 0158 eaf7 0149 f2f9 013b f7fc 012f     ..X...I...;.../.
    55b4:	ffff 0124                                   ..$.

000055b8 <Cyan_Magenta_Blue_gp>:
    55b8:	0000 ffff 2a3f ff37 ff7f ff00 2abf ff00     ....?*7......*..
    55c8:	00ff ff00                                   ....

000055cc <Fuschia_7_gp>:
    55cc:	2b00 9903 643f 6704 bc7f 4205 a1bf 730b     .+..?d.g...B...s
    55dc:	87ff b614                                   ....

000055e0 <es_ocean_breeze_068_gp>:
    55e0:	6400 999c 0133 8963 0165 5444 2368 a88e     .d..3.c.e.DTh#..
    55f0:	00b2 753f 01ff 0a0a                         ..?u....

000055f8 <purple_flower_gp>:
    55f8:	0000 0000 1442 2d04 7984 ff14 b3b4 ff49     ....B..-.y....I.
    5608:	ffe4 ffa4 fff1 ffcf ffff ffff               ............

00005614 <palettes>:
    5614:	57f8 0000 5808 0000 6634 0000 5b2c 0000     .W...X..4f..,[..
    5624:	527c 0000 5a9c 0000 55e0 0000 5cc4 0000     |R...Z...U...\..
    5634:	4ef0 0000 4abc 0000 5f14 0000 5d08 0000     .N...J..._...]..
    5644:	5c88 0000 6690 0000 50d4 0000 55cc 0000     .\...f...P...U..
    5654:	5ab4 0000 5bb0 0000 5b10 0000 6400 0000     .Z...[...[...d..
    5664:	6488 0000 5c38 0000 5400 0000 5ca8 0000     .d..8\...T...\..
    5674:	5a88 0000 6734 0000 5d20 0000 6450 0000     .Z..4g.. ]..Pd..
    5684:	6370 0000 5434 0000 5d70 0000 53ec 0000     pc..4T..p]...S..
    5694:	63c0 0000 57b4 0000 582c 0000 5be4 0000     .c...W..,X...[..
    56a4:	5cd4 0000 4ed4 0000 5d34 0000 64c4 0000     .\...N..4]...d..
    56b4:	642c 0000 4ad4 0000 653c 0000 4f14 0000     ,d...J..<e...O..
    56c4:	65c0 0000 5268 0000 635c 0000 6548 0000     .e..hR..\c..He..
    56d4:	4ae0 0000 5f30 0000 5e88 0000 64a4 0000     .J..0_...^...d..
    56e4:	66ac 0000 5b40 0000 5d40 0000 5c24 0000     .f..@[..@]..$\..
    56f4:	5094 0000 65dc 0000 6464 0000 5ac4 0000     .P...e..dd...Z..
    5704:	6518 0000 55f8 0000 5af4 0000 5d8c 0000     .e...U...Z...]..
    5714:	4f3c 0000 6330 0000 5464 0000 50ec 0000     <O..0c..dT...P..
    5724:	5298 0000 5ba0 0000 5c54 0000 5788 0000     .R...[..T\...W..
    5734:	5e68 0000 5b98 0000 5c68 0000 63dc 0000     h^...[..h\...c..
    5744:	63a4 0000 5efc 0000 6648 0000 4a9c 0000     .c...^..Hf...J..
    5754:	63e4 0000 634c 0000 5c08 0000 50a8 0000     .c..Lc...\...P..
    5764:	49b0 0000 5244 0000 55b8 0000 6728 0000     .I..DR...U..(g..
    5774:	57a0 0000 5454 0000 5c78 0000 6660 0000     .W..TT..x\..`f..
    5784:	57d0 0000                                   .W..

00005788 <scoutie_gp>:
    5788:	ff00 009c 007f 12c3 01d8 2700 01ff 2700     ...........'...'

00005798 <sin16_C(unsigned short)::slope>:
    5798:	3031 262c 171f 040e                         10,&....

000057a0 <cyberpunk_neon_gp>:
    57a0:	7100 911c ea3f d900 0a7f c6bd 13bf 7c3e     .q..?.........>|
    57b0:	09ff 3318                                   ...3

000057b4 <bhw2_10_gp>:
    57b4:	0000 000c 993d 70ef 007f 000c 6aa5 02ef     ....=..p.....j..
    57c4:	a7c4 47e5 6ae5 02ef 00ff 000c               ...G.j......

000057d0 <blade_runner_2049_gp>:
    57d0:	c900 ad50 ab19 9b39 6832 7323 5e4b 6e21     ..P...9.2h#sK^!n
    57e0:	7f64 ac78 4d7d a98d 74a0 b255 14aa 731b     d.x.}M...tU....s
    57f0:	4bc8 4915 2cff 2a09                         .K.I.,.*

000057f8 <ib_jul01_gp>:
    57f8:	c200 0101 015e 121d 3984 1c83 71ff 0101     ....^....9...q..

00005808 <rgi_15_gp>:
    5808:	0400 1f01 371f 1001 c53f 0703 3b5f 1102     .....7..?..._;..
    5818:	067f 2202 279f 2106 70bf 200d 38df 2309     ...".'.!.p. .8.#
    5828:	16ff 2606                                   ...&

0000582c <bhw2_14_gp>:
    582c:	0000 0800 002d 2d00 074f ff0c 2a77 ff37     ....-..-O...w*7.
    583c:	079e ff0c 00d1 2d00 00ff 0800 3d3d 3d3d     .......-....====
    584c:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
    585c:	3d3d 0000 454c 2044 7241 6172 3a79 2020     ==..LED Array:  
    586c:	2020 2020 2020 2020 2020 0000 5543 5252               ..CURR
    587c:	4e45 0054 454e 5458 0000 0000 7242 6769     ENT.NEXT....Brig
    588c:	7468 656e 7373 203a 2020 2020 2020 2020     htness:         
    589c:	2020 0000 6564 616c 5f79 6974 656d 203a       ..delay_time: 
    58ac:	2020 2020 2020 2020 2020 0000 7375 5f65               ..use_
    58bc:	6170 656c 7474 3a65 2020 2020 2020 2020     palette:        
    58cc:	2020 0000 7375 5f65 7566 6c6c 725f 6e61       ..use_full_ran
    58dc:	6567 203a 2020 2020 2020 0000 6874 7369     ge:       ..this
    58ec:	645f 7269 203a 2020 2020 2020 2020 2020     _dir:           
    58fc:	2020 0000 6f6d 6564 6e5f 6d75 6562 3a72       ..mode_number:
    590c:	2020 0000 6f6d 6564 695f 696e 6974 6c61       ..mode_initial
    591c:	7a69 6465 203a 2020 2020 0000 3d3d 4a3d     ized:     ..===J
    592c:	4755 4c47 2045 4156 4952 4241 454c 3d53     UGGLE VARIABLES=
    593c:	3d3d 0000 6e69 6564 3a78 2020 2020 2020     ==..index:      
    594c:	2020 0020 756e 646d 746f 3a73 2020 2020        .numdots:    
    595c:	2020 0020 6562 7461 203a 2020 2020 2020        .beat:       
    596c:	2020 0020 6166 6564 203a 2020 2020 2020        .fade:       
    597c:	2020 0020 6964 6666 203a 2020 2020 2020        .diff:       
    598c:	2020 0020 6e69 6564 5f78 6572 6573 3a74        .index_reset:
    599c:	2020 0020 3d3d 523d 4941 424e 574f 4d20        .===RAINBOW M
    59ac:	5241 4843 3d3d 003d 6e69 6564 3a78 2020     ARCH===.index:  
    59bc:	2020 0020 6964 6666 203a 2020 2020 0020        .diff:      .
    59cc:	6f72 3a74 2020 2020 2020 0020 3d3d 523d     rot:       .===R
    59dc:	4941 424e 574f 4d20 5241 4843 5320 4c50     AINBOW MARCH SPL
    59ec:	5449 3d3d 003d 0000 554a 4747 454c 4920     IT===...JUGGLE I
    59fc:	494e 2054 4542 4947 004e 0000 554a 4747     NIT BEGIN...JUGG
    5a0c:	454c 4920 494e 2054 4f43 504d 454c 4554     LE INIT COMPLETE
    5a1c:	0000 0000 4152 4e49 4f42 2057 414d 4352     ....RAINBOW MARC
    5a2c:	2048 4e49 5449 4220 4745 4e49 0000 0000     H INIT BEGIN....
    5a3c:	4152 4e49 4f42 2057 414d 4352 2048 4e49     RAINBOW MARCH IN
    5a4c:	5449 4320 4d4f 4c50 5445 0045 4d56 5044     IT COMPLETE.VMDP
    5a5c:	5f56 7c31 5f31 4d56 5044 0a56 0000 0000     V_1|1_VMDPV.....
    5a6c:	4544 5542 2047 4e4f 0000 0000 4553 5554     DEBUG ON....SETU
    5a7c:	2050 4f43 504d 454c 4554 ff00               P COMPLETE..

00005a88 <BlacK_Magenta_Red_gp>:
    5a88:	0000 0000 2a3f 2d00 ff7f ff00 ffbf 2d00     ....?*.-.......-
    5a98:	ffff 0000                                   ....

00005a9c <Coral_reef_gp>:
    5a9c:	2800 c5c7 0a32 9b98 0160 786f 2b60 a27f     .(..2...`.ox`+..
    5aac:	0a8b 6f49 01ff 4722                         ..Io.."G

00005ab4 <es_emerald_dragon_08_gp>:
    5ab4:	6100 01ff 2f65 0185 0db2 012b 02ff 010a     .a..e/....+.....

00005ac4 <cloudcolors_gp>:
    5ac4:	0000 ff00 000f 8b00 006f 8b00 007f ff00     ........o.......
    5ad4:	008f 8b00 879f face 87af face adbf e6d8     ................
    5ae4:	c8cf c8c8 addf e6d8 87ef ebce 00ff ffbf     ................

00005af4 <fierce_ice_gp>:
    5af4:	0000 0000 003b 2d07 0077 ff21 0395 ff52     ....;..-w.!...R.
    5b04:	17b4 ff9c 64d9 ffcb ffff ffff               .....d......

00005b10 <fire_gp>:
    5b10:	0100 0001 204c 0005 c092 0018 dcc5 0569     ....L ........i.
    5b20:	fcf0 1fff fcfa 6fff ffff ffff               .......o....

00005b2c <es_pinksplash_08_gp>:
    5b2c:	7e00 ff0b c57f 1601 d2af ac9d 9ddd 7003     .~.............p
    5b3c:	9dff 7003                                   ...p

00005b40 <hallows_gp>:
    5b40:	0100 0101 f714 011c ea19 0388 0123 0101     ............#...
    5b50:	f730 011c ea33 0388 013d 0101 f74c 011c     0...3...=...L...
    5b60:	f45b 01b0 ea6b 0388 017a 0101 ea8c 0388     [...k...z.......
    5b70:	f499 01b0 f7a8 011c 01ba 0101 f7c4 011c     ................
    5b80:	eacc 0388 01d8 0101 eae5 0388 f7ef 011c     ................
    5b90:	01f9 0101 01ff 0101                         ........

00005b98 <GMT_cool_gp>:
    5b98:	0000 ffff ffff ff00                         ........

00005ba0 <otis_gp>:
    5ba0:	1a00 5901 117f 00c1 00d8 6222 00ff 6222     ...Y......"b.."b

00005bb0 <lava_gp>:
    5bb0:	0000 0000 122e 0000 7160 0000 8e6c 0103     ........`q..l...
    5bc0:	af77 0111 d592 022c ffae 0452 ffbc 0473     w.....,...R...s.
    5bd0:	ffca 049c ffda 04cb ffea 04ff fff4 47ff     ...............G
    5be0:	ffff ffff                                   ....

00005be4 <bhw3_21_gp>:
    5be4:	0100 6228 0130 4441 024c 60a1 0068 1951     ..(b0.ADL..`h.Q.
    5bf4:	4182 52b6 0099 aa56 11b5 b6cf 11cc b6cf     .A.R..V.........
    5c04:	01ff 2e17                                   ....

00005c08 <xanidu_2_gp>:
    5c08:	7600 e2a1 4f35 a201 435e 0701 0184 9c37     .v..5O..^C....7.
    5c18:	01ad 3d7f 27d3 482d 76ff e2a1               ...=.'-H.v..

00005c24 <Secondary_01a_gp>:
    5c24:	0300 ff00 433f 2d07 ff7f 0021 2abf 0173     ....?C.-..!..*s.
    5c34:	00ff 01ff                                   ....

00005c38 <Sunset_Real_gp>:
    5c38:	7800 0000 b316 0016 ff33 0068 a755 1216     .x......3.h.U...
    5c48:	6487 6700 10c6 8200 00ff a000               .d.g........

00005c54 <parrot_gp>:
    5c54:	7e00 0100 c572 10a8 c58c 10a8 00d8 2002     .~..r.......... 
    5c64:	00ff 2002                                   ... 

00005c68 <bhw1_sunconure_gp>:
    5c68:	1400 0ddf e8a0 0141 e8fc 0105 e8ff 0105     ......A.........

00005c78 <purplefly_gp>:
    5c78:	0000 0000 ef3f 7a00 fcbf 4eff 00ff 0000     ....?..z...N....

00005c88 <gr64_hult_gp>:
    5c88:	0100 6d7c 0142 4f5d 3468 0141 7382 017f     ..|mB.]Oh4A..s..
    5c98:	3496 0141 01c9 4856 00ef 2d37 00ff 2d37     .4A...VH..7-..7-

00005ca8 <BlacK_Blue_Magenta_White_gp>:
    5ca8:	0000 0000 002a 2d00 0054 ff00 2a7f ff00     ....*..-T....*..
    5cb8:	ffaa ff00 ffd4 ff37 ffff ffff               ......7.....

00005cc4 <es_ocean_breeze_036_gp>:
    5cc4:	0100 0706 0159 6f63 9099 ffd1 00ff 5249     ....Y.co......IR

00005cd4 <bhw3_30_gp>:
    5cd4:	0100 0104 010c 021c 101c 0b44 123a 1c0b     ..........D.:...
    5ce4:	1f4f 301b 0260 220d 1e75 7b56 0287 3e2a     O..0`.."u.V{..*>
    5cf4:	4a99 9b80 3cb5 291f a7d6 dfd3 b3ed 4e46     .J...<.)......FN
    5d04:	39ff 0702                                   .9..

00005d08 <gr65_hult_gp>:
    5d08:	f700 f7b0 ff30 ff88 dc59 e21d 07a0 b252     ....0...Y.....R.
    5d18:	01d8 6d7c 01ff 6d7c                         ..|m..|m

00005d20 <Blue_Cyan_Yellow_gp>:
    5d20:	0000 ff00 003f ff37 007f ffff 2abf 2dff     ....?.7......*.-
    5d30:	ffff 00ff                                   ....

00005d34 <cw1_029_gp>:
    5d34:	0c00 d250 ff7f 13eb e0ff 0f42               ..P.......B.

00005d40 <sea_treasure_gp>:
    5d40:	0100 050d 0319 1939 122d acbf 023d 0c1d     ......9.-...=...
    5d50:	034c 1939 1265 acbf 0a7c 1436 0199 0c1e     L.9.e...|.6.....
    5d60:	0ab2 160e 09d1 2f5d 08e8 1637 01ff 050d     ......]/..7.....

00005d70 <bhw2_23_gp>:
    5d70:	0000 0000 3942 e9e3 ff60 08ff ff7c ffff     ....B9..`...|...
    5d80:	ff99 08ff 39bc e9e3 00ff 0000               .....9......

00005d8c <blueice_gp>:
    5d8c:	0000 0000 011f 0f02 013f 590a 0142 5d0c     ........?..YB..]
    5d9c:	0144 600d 0147 640f 0149 6910 014c 6c12     D..`G..dI..iL..l
    5dac:	014e 7014 0151 7316 0153 7817 0156 7b1a     N..pQ..sS..xV..{
    5dbc:	0158 801d 015b 841f 015d 8921 0160 8c24     X...[...].!.`.$.
    5dcc:	0162 9128 0165 972b 0167 9b2e 016a a032     b.(.e.+.g...j.2.
    5ddc:	016c a436 016f a638 0171 aa3c 0174 ac41     l.6.o.8.q.<.t.A.
    5dec:	0176 ae45 0179 b248 017b b44d 017e b651     v.E.y.H.{.M.~.Q.
    5dfc:	0180 b856 0183 bc5b 0186 be60 0188 c065     ..V...[...`...e.
    5e0c:	018b c56b 018d c770 0190 c976 0192 cb7c     ..k...p...v...|.
    5e1c:	0195 cf82 0197 d28a 019a d490 019c d697     ................
    5e2c:	019f db9f 01a1 dda6 01a4 dfad 01a6 e4b6     ................
    5e3c:	01a9 e6bd 01ab e9c7 01ae ebcf 01b0 f0d9     ................
    5e4c:	01b3 f2e1 01b5 f5eb 02b8 f7f6 02ba f7fc     ................
    5e5c:	02bd f2ff 3dde f7ff ffff ffff               .....=......

00005e68 <sunlitwave_gp>:
    5e68:	0500 5409 252d 6f18 1051 3b05 1870 1401     ...T-%.oQ..;p...
    5e78:	2296 0201 afc6 0724 d0ed 1068 efff 9ed3     ."....$...h.....

00005e88 <Tropical_Colors_gp>:
    5e88:	0100 0104 010e 010a 0115 0013 0123 012a     ............#.*.
    5e98:	0331 014b 383b 0167 d046 0487 d954 0236     1.K.;8g.F...T.6.
    5ea8:	e062 010a 7582 030f 308d 0614 2a9b 4d12     b....u...0...*.M
    5eb8:	24aa ff11 37c5 f261 50d2 e4ff 2fdc 4ddb     .$...7a..P.../.M
    5ec8:	18e1 0abb 18e4 09b4 18e6 08ab 17e8 06a1     ................
    5ed8:	17eb 0595 16ed 0488 16f0 027c 15f2 0170     ..........|...p.
    5ee8:	15f5 0164 14f7 0158 13fa 014d 13fc 0142     ..d...X...M...B.
    5ef8:	12ff 0037                                   ..7.

00005efc <bhw3_13_gp>:
    5efc:	0300 4806 0c26 bc32 d96d 0123 f287 0caf     ...H&.2.m.#.....
    5f0c:	a1b2 5720 18ff 6c06                         .. W...l

00005f14 <rainbowsherbet_gp>:
    5f14:	ff00 0421 ff2b 1944 ff56 1907 ff7f 6752     ..!.+.D.V.....Rg
    5f24:	ffaa f2ff 2ad1 16ff 57ff 41ff               .....*...W.A

00005f30 <Wizzl019_gp>:
    5f30:	8c00 ac14 8c01 ac14 9402 b814 a003 c810     ................
    5f40:	9c04 c410 9805 bc10 9406 b410 8c07 ac0c     ................
    5f50:	8808 a40c 8409 9c0c 800a 940c 780b 8c08     .............x..
    5f60:	740c 8808 700d 8008 6c0e 7808 640f 7004     .t...p...l.x.d.p
    5f70:	6010 6804 5c11 6004 5812 5804 5013 5000     .`.h.\.`.X.X.P.P
    5f80:	5414 4c04 5c15 480c 6416 4414 6c17 3c1c     .T.L.\.H.d.D.l.<
    5f90:	7418 3824 7c19 342c 841a 3034 8c1b 283c     .t$8.|,4..40..<(
    5fa0:	901c 2440 981d 2048 a01e 1c50 a81f 1458     ..@$..H ..P...X.
    5fb0:	b020 1060 b821 0c68 c022 0870 c823 0078      .`.!.h.".p.#.x.
    5fc0:	c424 0074 bc25 0070 b426 006c ac27 0064     $.t.%.p.&.l.'.d.
    5fd0:	a428 0060 9c29 005c 942a 0058 8c2b 0050     (.`.).\.*.X.+.P.
    5fe0:	882c 004c 802d 0048 782e 0044 702f 003c     ,.L.-.H..xD./p<.
    5ff0:	6830 0038 6031 0034 5832 0030 5033 0028     0h8.1`4.2X0.3P(.
    6000:	4c34 0430 4835 083c 4436 0c44 3c37 1450     4L0.5H<.6DD.7<P.
    6010:	3838 1858 3439 1c64 303a 206c 283b 2878     88X.94d.:0l ;(x(
    6020:	243c 2c80 203d 308c 1c3e 3494 143f 3ca0     <$.,= .0>..4?..<
    6030:	1040 40a8 0c41 44b4 0842 48bc 0043 50c8     @..@A..DB..HC..P
    6040:	0044 4cc0 0045 48b4 0046 44ac 0047 3ca0     D..LE..HF..DG..<
    6050:	0048 3898 0049 348c 004a 3084 004b 2878     H..8I..4J..0K.x(
    6060:	004c 2470 004d 2064 004e 1c5c 004f 1450     L.p$M.d N.\.O.P.
    6070:	0050 1048 0051 0c3c 0052 0834 0053 0028     P.H.Q.<.R.4.S.(.
    6080:	0054 0c28 0455 1c24 0456 2c24 0857 3c20     T.(.U.$.V.$,W. <
    6090:	0c58 481c 0c59 581c 105a 6818 145b 7814     X..HY..XZ..h[..x
    60a0:	145c 8414 185d 9410 185e a410 1c5f b40c     \...]...^..._...
    60b0:	2060 c008 2061 d008 2462 e004 2863 f000     ` ..a ..b$..c(..
    60c0:	2864 e800 2465 dc00 2466 d400 2067 c800     d(..e$..f$..g ..
    60d0:	1c68 c000 1c69 b400 186a ac00 146b a000     h...i...j...k...
    60e0:	146c 9800 106d 8c00 106e 8400 0c6f 7800     l...m...n...o..x
    60f0:	0870 7000 0871 6400 0472 5c00 0073 5000     p..pq..dr..\s..P
    6100:	0c74 5400 1875 5c00 2476 6400 3077 6c00     t..Tu..\v$.dw0.l
    6110:	3c78 7400 4879 7c00 547a 8400 647b 8c00     x<.tyH.|zT..{d..
    6120:	707c 9000 7c7d 9800 887e a000 947f a800     |p..}|..~.......
    6130:	a080 b000 ac81 b800 b882 c000 c883 c800     ................
    6140:	c084 c000 b485 b400 ac86 ac00 a087 a000     ................
    6150:	9888 9800 8c89 8c00 848a 8400 788b 7800     .............x.x
    6160:	708c 7000 648d 6400 5c8e 5c00 508f 5000     .p.p.d.d.\.\.P.P
    6170:	4890 4800 3c91 3c00 3492 3400 2893 2800     .H.H.<.<.4.4.(.(
    6180:	3494 2800 4095 2800 4c96 2800 5897 2800     .4.(.@.(.L.(.X.(
    6190:	6498 2800 7099 2800 7c9a 2800 8c9b 2400     .d.(.p.(.|.(...$
    61a0:	989c 2400 a49d 2400 b09e 2400 bc9f 2400     ...$...$...$...$
    61b0:	c8a0 2400 d4a1 2400 e0a2 2400 f0a3 2000     ...$...$...$... 
    61c0:	e8a4 2000 dca5 1c00 d4a6 1c00 c8a7 1800     ... ............
    61d0:	c0a8 1800 b4a9 1400 acaa 1400 a0ab 1000     ................
    61e0:	98ac 1000 8cad 0c00 84ae 0c00 78af 0800     .............x..
    61f0:	70b0 0800 64b1 0400 5cb2 0400 50b3 0000     .p...d...\...P..
    6200:	58b4 0008 60b5 0010 68b6 0018 74b7 0020     .X...`...h...t .
    6210:	7cb8 0028 84b9 0030 8cba 0038 98bb 0040     .|(...0...8...@.
    6220:	a0bc 0048 a8bd 0050 b0be 0058 bcbf 0060     ..H...P...X...`.
    6230:	c4c0 0068 ccc1 0070 d4c2 0078 e0c3 0080     ..h...p...x.....
    6240:	d8c4 007c ccc5 0074 c0c6 0070 b4c7 0068     ..|...t...p...h.
    6250:	a8c8 0064 a0c9 005c 94ca 0058 88cb 0050     ..d...\...X...P.
    6260:	7ccc 0048 70cd 0044 68ce 003c 5ccf 0038     .|H..pD..h<..\8.
    6270:	50d0 0030 44d1 002c 38d2 0024 40d3 0824     .P0..D,..8$..@$.
    6280:	4cd4 1424 58d5 1c24 64d6 2820 70d7 3020     .L$..X$..d (.p 0
    6290:	7cd8 3c20 88d9 4420 94da 501c 9cdb 581c     .| <.. D...P...X
    62a0:	a8dc 641c b4dd 6c1c c0de 7818 ccdf 8018     ...d...l...x....
    62b0:	d8e0 8c18 e4e1 9418 f0e2 a014 e4e3 9814     ................
    62c0:	d4e4 8c14 c4e5 8418 b4e6 7818 a8e7 7018     ...........x...p
    62d0:	98e8 641c 88e9 5c1c 78ea 5020 6ceb 4820     ...d...\.x P.l H
    62e0:	5cec 3c20 4ced 3424 3cee 2824 30ef 2024     .\ <.L$4.<$(.0$ 
    62f0:	20f0 1428 10f1 0c28 00f2 002c 08f3 0c2c     . (...(...,...,.
    6300:	14f4 182c 1cf5 2428 28f6 3028 30f7 3c24     ..,...($.((0.0$<
    6310:	3cf8 4824 44f9 5420 50fa 6420 58fb 7020     .<$H.D T.P d.X p
    6320:	64fc 7c1c 6cfd 881c 78fe 9418 80ff a018     .d.|.l...x......

00006330 <green_gp>:
    6330:	0000 0000 003f 0011 007e 0052 009b 0080     ....?...~.R.....
    6340:	00b8 00ba 2adb 2ddb ffff ffff               .....*.-....

0000634c <es_emerald_dragon_09_gp>:
    634c:	0100 0101 014c 0102 0a99 012f 61ff 01ff     ....L...../..a..

0000635c <es_emerald_dragon_01_gp>:
    635c:	0100 0101 014f 0713 0182 193b 1ce5 ffff     ....O.....;.....
    636c:	1cff ffff                                   ....

00006370 <bhw1_26_gp>:
    6370:	6b00 cd01 ff23 ffff 6b49 cd01 0a6b d295     .k..#...Ik..k...
    6380:	ff82 ffff 0a99 d295 1baa 77af 35c6 38cb     ...........w.5.8
    6390:	84cf 87e5 ffdb ffff 84e7 87e5 35fc 38cb     .............5.8
    63a0:	35ff 38cb                                   .5.8

000063a4 <bhw2_turq_gp>:
    63a4:	0100 5f21 0126 256b 2a4c 2dff ff7f 2dff     ..!_&.k%L*.-...-
    63b4:	2ab2 2dff 01d8 256b 01ff 5f21               .*.-..k%..!_

000063c0 <bhw2_49_gp>:
    63c0:	0900 0f0f 0028 2d37 0956 0f0f 1d82 3e29     ....(.7-V.....)>
    63d0:	09aa 0f0f 40d3 c708 06ff 1601               .....@......

000063dc <bhw1_05_gp>:
    63dc:	0100 35dd 49ff b203                         ...5.I..

000063e4 <bhw3_34_gp>:
    63e4:	1d00 cd70 5c30 faff 345b 0cdf 047c 150d     ..p.0\..[4..|...
    63f4:	09b7 0f67 0ad8 0250 26ff 34ff               ..g...P..&.4

00006400 <Colorfull_gp>:
    6400:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
    6410:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
    6420:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

0000642c <Ribbon_Colors_gp>:
    642c:	e300 0902 c21f 0933 a73f 08af 1b5f 4ed1     ......3.?..._..N
    643c:	017f f7f8 019f a64e 01bf 6605 2adf 124f     ......N....f.*O.
    644c:	ffff 00ff                                   ....

00006450 <bhw1_greeny_gp>:
    6450:	0000 0000 0727 0837 2a63 2dff 0799 0837     ....'.7.c*.-..7.
    6460:	00ff 0000                                   ....

00006464 <rainbow_gp>:
    6464:	ff00 0000 ab20 0055 ab40 00ab 0060 00ff     .... .U.@...`...
    6474:	0080 55ab 00a0 ff00 55c0 ab00 abe0 5500     ...U.....U.....U
    6484:	ffff 0000                                   ....

00006488 <Magenta_Evening_gp>:
    6488:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
    6498:	fc4c 4501 7b6c 3302 2eff 2309               L..El{.3...#

000064a4 <slope_gp>:
    64a4:	ff00 ffff ff05 00ff 000e 00ff 001c ffff     ................
    64b4:	002a ff00 ff54 ff00 ff8d 0000 00ff 0000     *...T...........

000064c4 <alarm_p4_0_2_gp>:
    64c4:	e300 dfff ff0c 0424 ff19 0102 ff26 1001     ......$.....&...
    64d4:	ff33 6201 ff3f e601 8c4c ff01 3f59 ff01     3..b?...L...Y?..
    64e4:	1866 ff01 0572 ff01 017f ff01 018c ff04     f...r...........
    64f4:	0199 ff10 01a5 ff24 01b2 ff3e 01bf ff5f     ......$...>..._.
    6504:	01cc ff83 01d8 ffad 01e5 ffdd 01f2 ebff     ................
    6514:	01ff baff                                   ....

00006518 <cequal_gp>:
    6518:	0100 0101 0124 0103 014c 7b29 3b70 fc01     ....$...L.){p;..
    6528:	757f b401 efac 0151 fcc3 01b4 fcde 93fa     .u....Q.........
    6538:	fcff fcfc                                   ....

0000653c <Fire_1_gp>:
    653c:	ff00 0000 ff7f 0037 ffff 00ff               ......7.....

00006548 <froth316_gp>:
    6548:	f700 0000 f711 0000 9d11 0000 9d21 0000     ............!...
    6558:	5621 0000 5633 0000 2733 0000 2744 0000     !V..3V..3'..D'..
    6568:	0c44 0000 0c54 0000 0054 00f8 0066 00f8     D...T...T...f...
    6578:	0066 00a9 0077 00a9 0077 0065 0087 0065     f...w...w.e...e.
    6588:	0087 0034 0099 0034 0099 0013 00aa 0013     ..4...4.........
    6598:	00aa f700 00ba f700 00ba a000 00cc a000     ................
    65a8:	00cc 5900 00dd 5900 00dd 2a00 00ed 2a00     ...Y...Y...*...*
    65b8:	00ed 0e00 00ff 0e00                         ........

000065c0 <a_gp>:
    65c0:	0000 0000 001f 0037 003f 2dff ff7f ff00     ......7.?..-....
    65d0:	ffa3 2d00 ffc4 0000 ffff 00ff               ...-........

000065dc <GMT_seafloor_gp>:
    65dc:	1900 6d00 1c0a 7700 2015 7f00 231f 8c00     ...m...w. ...#..
    65ec:	1b2a 9101 1435 9701 0e4a 9c04 0954 a409     *...5...J...T...
    65fc:	055f aa0f 026a b018 0174 b623 018a bc31     _...j...t.#...1.
    660c:	0094 c542 019f cb4f 03aa d25d 0ab4 d86d     ..B...O...]...m.
    661c:	18bf df80 2bd4 e695 48df f0ad 70e9 f7c5     .....+...H...p..
    662c:	a3f4 ffe1 dcff fff8                         ........

00006634 <Analogous_1_gp>:
    6634:	0300 ff00 173f ff00 437f ff00 8ebf 2d00     ....?....C.....-
    6644:	ffff 0000                                   ....

00006648 <bhw3_61_gp>:
    6648:	0e00 1b01 1130 5801 0168 9c58 01a0 2a36     ....0..Xh.X...6*
    6658:	09db 34eb 8bff e9eb                         ...4....

00006660 <rainbow2_gp>:
    6660:	7e00 8e01 ab19 1a01 e030 0109 ed47 018a     .~......0...G...
    6670:	345e 01ad 0175 01c9 018c 36d3 01a3 a87c     ^4..u......6..|.
    6680:	01ba 9508 0cd1 9701 0ce8 9701 abff be01     ................

00006690 <GMT_drywet_gp>:
    6690:	2f00 021e d52a 1893 6754 34db 037f cfdb     ./..*...Tg.4....
    66a0:	01aa d630 01d4 6f01 01ff 2107               ..0....o...!

000066ac <ofaurora_gp>:
    66ac:	ff00 f2f1 ed0a 0901 2a0f 0201 0116 0101     .........*......
    66bc:	ed23 0901 ff30 f2f1 ef3a 0139 0142 0101     #...0...:.9.B...
    66cc:	ef4c 0139 ff54 f2f1 f25e 01d9 0165 0101     L.9.T...^...e...
    66dc:	f26d 01d9 ff77 f2f1 097f 2490 0184 0101     m...w......$....
    66ec:	098c 2490 ff93 f2f1 019e ba9c 01a8 0101     ...$............
    66fc:	01b2 ba9c ffba f2f1 10c6 ff0d 01ce 0101     ................
    670c:	10d8 ff0d ffe0 f2f1 4eea 9c01 0eed 1e01     .........N......
    671c:	01ef 0101 4ef4 9c01 ffff f2f1               .....N......

00006728 <Complementary_01a_gp>:
    6728:	0000 ff21 2a7f 2d21 ffff 0021               ..!..*!-..!.

00006734 <BlacK_Red_Magenta_Yellow_gp>:
    6734:	0000 0000 2a2a 0000 ff54 0000 ff7f 2d00     ....**..T......-
    6744:	ffaa ff00 ffd4 2d37 ffff 00ff 4d56 5044     ......7-....VMDP
    6754:	5f45 0000 323a 003a 003a 0000 565f 444d     E_..:2:.:..._VMD
    6764:	4550 0000 4d56 5044 5f43 0000 565f 444d     PE..VMDPC_.._VMD
    6774:	4350 0000 7245 6f72 3a72 4120 7474 6d65     PC..Error: Attem
    6784:	7470 7420 206f 6573 2074 2061 6572 6461     pt to set a read
    6794:	6f2d 6c6e 2079 6176 6972 6261 656c 6f20     -only variable o
    67a4:	2072 6164 6174 7420 7079 2065 6f6e 2074     r data type not 
    67b4:	7573 7070 726f 6574 0d64 000a               supported...

000067c0 <pin2sc1a>:
    67c0:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
    67d0:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
    67e0:	ffff 1300 9303 921a ff17 ffff               ............

000067ec <digital_pin_to_info_PGM>:
    67ec:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    67fc:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    680c:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    681c:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    682c:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    683c:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    684c:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    685c:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    686c:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    687c:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    688c:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    689c:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    68ac:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
    68bc:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
    68cc:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
    68dc:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
    68ec:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
    68fc:	0a0d ffff                                   ....

00006900 <vtable for usb_serial_class>:
	...
    6908:	4351 0000 4349 0000 4345 0000 4341 0000     QC..IC..EC..AC..
    6918:	433d 0000 4339 0000 4335 0000 4331 0000     =C..9C..5C..1C..

00006928 <usb_endpoint_config_table>:
    6928:	1500 1519                                   ....

0000692c <usb_descriptor_list>:
    692c:	0100 0000 873c 1fff 0012 0000 0200 0000     ....<...........
    693c:	8768 1fff 0043 0000 0300 0000 87c4 1fff     h...C...........
    694c:	0000 0000 0301 0409 8750 1fff 0000 0000     ........P.......
    695c:	0302 0409 87ac 1fff 0000 0000 0303 0409     ................
    696c:	87c8 1fff 0000 0000 0000 0000 0000 0000     ................
    697c:	0000 0000                                   ....

00006980 <_init>:
    6980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6982:	bf00      	nop
    6984:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6986:	bc08      	pop	{r3}
    6988:	469e      	mov	lr, r3
    698a:	4770      	bx	lr

0000698c <__init_array_start>:
    698c:	00004951 	.word	0x00004951

00006990 <__frame_dummy_init_array_entry>:
    6990:	00000435 00001eb9 000024ed 000029b1     5........$...)..

Disassembly of section .fini:

000069a0 <_fini>:
    69a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69a2:	bf00      	nop
