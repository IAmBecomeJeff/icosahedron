
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\kitchen_lights\teensy31\Debug/kitchen_lights.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 39 4e 00 00 f1 4d 00 00     ... ....9N...M..
      10:	f1 4d 00 00 f1 4d 00 00 f1 4d 00 00 f1 4d 00 00     .M...M...M...M..
      20:	f1 4d 00 00 f1 4d 00 00 f1 4d 00 00 39 4e 00 00     .M...M...M..9N..
      30:	39 4e 00 00 f1 4d 00 00 65 62 00 00 69 63 00 00     9N...M..eb..ic..
      40:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      50:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      60:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      70:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      80:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      90:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      a0:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      b0:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      c0:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      d0:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      e0:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
      f0:	39 4e 00 00 5d 65 00 00 39 4e 00 00 89 66 00 00     9N..]e..9N...f..
     100:	39 4e 00 00 b5 67 00 00 39 4e 00 00 39 4e 00 00     9N...g..9N..9N..
     110:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
     120:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
     130:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
     140:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
     150:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
     160:	39 4e 00 00 81 52 00 00 39 4e 00 00 39 4e 00 00     9N...R..9N..9N..
     170:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
     180:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
     190:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
     1a0:	39 4e 00 00 39 4e 00 00 39 4e 00 00 39 4e 00 00     9N..9N..9N..9N..
     1b0:	39 4e 00 00 39 4e 00 00 39 4e 00 00                 9N..9N..9N..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f004 fe36 	bl	4e40 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f004 fe8a 	bl	4fec <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f004 fdfb 	bl	4edc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f004 fdec 	bl	4edc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f006 fe22 	bl	6f50 <__libc_init_array>

	startup_late_hook();
     30c:	f004 fd9e 	bl	4e4c <startup_late_hook>
	main();
     310:	f006 f832 	bl	6378 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c6c 	.word	0x1fff8c6c
     33c:	00008e1c 	.word	0x00008e1c
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c6c 	.word	0x1fff8c6c
     348:	1fff9928 	.word	0x1fff9928
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e21d95a 	.word	0x5e21d95a
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c6c 	.word	0x1fff8c6c
     42c:	00000000 	.word	0x00000000
     430:	00008e20 	.word	0x00008e20

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c70 	.word	0x1fff8c70
     460:	00008e20 	.word	0x00008e20
     464:	1fff8c6c 	.word	0x1fff8c6c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <fire_mirror_pal()>:
}



// fire mirrored from ends or center using palette
void fire_mirror_pal() {
     490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mode_change) {
     494:	4c99      	ldr	r4, [pc, #612]	; (6fc <fire_mirror_pal()+0x26c>)
     496:	7823      	ldrb	r3, [r4, #0]
}



// fire mirrored from ends or center using palette
void fire_mirror_pal() {
     498:	b084      	sub	sp, #16
	if (mode_change) {
     49a:	2b00      	cmp	r3, #0
     49c:	f040 80e4 	bne.w	668 <fire_mirror_pal()+0x1d8>
     4a0:	4b97      	ldr	r3, [pc, #604]	; (700 <fire_mirror_pal()+0x270>)
     4a2:	4a98      	ldr	r2, [pc, #608]	; (704 <fire_mirror_pal()+0x274>)
     4a4:	4898      	ldr	r0, [pc, #608]	; (708 <fire_mirror_pal()+0x278>)
     4a6:	7819      	ldrb	r1, [r3, #0]
     4a8:	7812      	ldrb	r2, [r2, #0]
     4aa:	8803      	ldrh	r3, [r0, #0]
     4ac:	f8df 9278 	ldr.w	r9, [pc, #632]	; 728 <fire_mirror_pal()+0x298>
     4b0:	4e96      	ldr	r6, [pc, #600]	; (70c <fire_mirror_pal()+0x27c>)
     4b2:	4f97      	ldr	r7, [pc, #604]	; (710 <fire_mirror_pal()+0x280>)
     4b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     4b8:	0052      	lsls	r2, r2, #1
     4ba:	fb86 4602 	smull	r4, r6, r6, r2
     4be:	4416      	add	r6, r2
     4c0:	17d2      	asrs	r2, r2, #31
     4c2:	ebc2 16a6 	rsb	r6, r2, r6, asr #6
     4c6:	3602      	adds	r6, #2
     4c8:	b2f6      	uxtb	r6, r6
     4ca:	f107 0e5e 	add.w	lr, r7, #94	; 0x5e
     4ce:	463d      	mov	r5, r7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     4d0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     4d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     4d8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     4dc:	3319      	adds	r3, #25
     4de:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4e0:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     4e4:	f815 4f01 	ldrb.w	r4, [r5, #1]!
     4e8:	b2d2      	uxtb	r2, r2
     4ea:	fb12 f206 	smulbb	r2, r2, r6
     4ee:	eba4 2212 	sub.w	r2, r4, r2, lsr #8
		this_dir = random8(2);
		this_delay = 15;
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     4f2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
     4f6:	45ae      	cmp	lr, r5
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     4f8:	702a      	strb	r2, [r5, #0]
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
     4fa:	d1e9      	bne.n	4d0 <fire_mirror_pal()+0x40>
     4fc:	4d85      	ldr	r5, [pc, #532]	; (714 <fire_mirror_pal()+0x284>)
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
	}
	for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     4fe:	f8df 822c 	ldr.w	r8, [pc, #556]	; 72c <fire_mirror_pal()+0x29c>
     502:	f1a5 025c 	sub.w	r2, r5, #92	; 0x5c
     506:	4694      	mov	ip, r2
     508:	f105 0e02 	add.w	lr, r5, #2
     50c:	782c      	ldrb	r4, [r5, #0]
     50e:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
     512:	eb04 0446 	add.w	r4, r4, r6, lsl #1
     516:	fb88 a604 	smull	sl, r6, r8, r4
     51a:	eba6 74e4 	sub.w	r4, r6, r4, asr #31
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
	}
	for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     51e:	4565      	cmp	r5, ip
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     520:	f80e 4d01 	strb.w	r4, [lr, #-1]!
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
	}
	for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     524:	d1f2      	bne.n	50c <fire_mirror_pal()+0x7c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     526:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     52a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     52e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     532:	3319      	adds	r3, #25
     534:	b29b      	uxth	r3, r3
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
	}
	if (random8() < sparking) {
     536:	eb03 2413 	add.w	r4, r3, r3, lsr #8
     53a:	b2e4      	uxtb	r4, r4
     53c:	428c      	cmp	r4, r1
     53e:	8003      	strh	r3, [r0, #0]
     540:	4871      	ldr	r0, [pc, #452]	; (708 <fire_mirror_pal()+0x278>)
     542:	d224      	bcs.n	58e <fire_mirror_pal()+0xfe>
     544:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     548:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     54c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     550:	3319      	adds	r3, #25
     552:	b29b      	uxth	r3, r3
     554:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     558:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     55c:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
     560:	3419      	adds	r4, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     562:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     566:	b2a4      	uxth	r4, r4
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     568:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     56a:	eb04 2114 	add.w	r1, r4, r4, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     56e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     572:	b2c9      	uxtb	r1, r1
     574:	121b      	asrs	r3, r3, #8
     576:	eb01 0541 	add.w	r5, r1, r1, lsl #1
     57a:	ebc1 1145 	rsb	r1, r1, r5, lsl #5
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
     57e:	5cd5      	ldrb	r5, [r2, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     580:	8004      	strh	r4, [r0, #0]
     582:	1209      	asrs	r1, r1, #8
     584:	3960      	subs	r1, #96	; 0x60
     586:	4628      	mov	r0, r5
     588:	fa80 f051 	uqadd8	r0, r0, r1
     58c:	54d0      	strb	r0, [r2, r3]
     58e:	4e62      	ldr	r6, [pc, #392]	; (718 <fire_mirror_pal()+0x288>)
		if (this_dir) {
			leds[j]					= ColorFromPalette(current_palette, colorindex);
			leds[NUM_LEDS - 1 - j]  = ColorFromPalette(current_palette, colorindex);
		}
		else {
			leds[(NUM_LEDS / 2) - 1 - j] = ColorFromPalette(current_palette, colorindex);
     590:	f04f 0801 	mov.w	r8, #1
     594:	f506 7a8d 	add.w	sl, r6, #282	; 0x11a
     598:	4635      	mov	r5, r6
     59a:	e024      	b.n	5e6 <fire_mirror_pal()+0x156>
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
		byte colorindex = scale8(heat[j], 240);
		if (this_dir) {
			leds[j]					= ColorFromPalette(current_palette, colorindex);
     59c:	f003 feee 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
			leds[NUM_LEDS - 1 - j]  = ColorFromPalette(current_palette, colorindex);
     5a0:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
     5a6:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
     5aa:	f89d 400e 	ldrb.w	r4, [sp, #14]
     5ae:	f8cd 8000 	str.w	r8, [sp]
     5b2:	495a      	ldr	r1, [pc, #360]	; (71c <fire_mirror_pal()+0x28c>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5b4:	702b      	strb	r3, [r5, #0]
        g = rhs.g;
     5b6:	f885 e001 	strb.w	lr, [r5, #1]
        b = rhs.b;
     5ba:	70ac      	strb	r4, [r5, #2]
     5bc:	23ff      	movs	r3, #255	; 0xff
     5be:	a803      	add	r0, sp, #12
     5c0:	3503      	adds	r5, #3
     5c2:	f003 fedb 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5c6:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     5ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     5ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5d2:	f886 1231 	strb.w	r1, [r6, #561]	; 0x231
	}
	if (random8() < sparking) {
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
     5d6:	45aa      	cmp	sl, r5
        g = rhs.g;
     5d8:	f886 2232 	strb.w	r2, [r6, #562]	; 0x232
        b = rhs.b;
     5dc:	f886 3233 	strb.w	r3, [r6, #563]	; 0x233
     5e0:	f1a6 0603 	sub.w	r6, r6, #3
     5e4:	d03d      	beq.n	662 <fire_mirror_pal()+0x1d2>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5e6:	f817 2f01 	ldrb.w	r2, [r7, #1]!
		byte colorindex = scale8(heat[j], 240);
		if (this_dir) {
     5ea:	f899 e000 	ldrb.w	lr, [r9]
			leds[j]					= ColorFromPalette(current_palette, colorindex);
     5ee:	494b      	ldr	r1, [pc, #300]	; (71c <fire_mirror_pal()+0x28c>)
     5f0:	f8cd 8000 	str.w	r8, [sp]
     5f4:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
     5f8:	eb02 1204 	add.w	r2, r2, r4, lsl #4
     5fc:	f3c2 2407 	ubfx	r4, r2, #8, #8
     600:	23ff      	movs	r3, #255	; 0xff
     602:	a803      	add	r0, sp, #12
     604:	4622      	mov	r2, r4
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
		byte colorindex = scale8(heat[j], 240);
		if (this_dir) {
     606:	f1be 0f00 	cmp.w	lr, #0
     60a:	d1c7      	bne.n	59c <fire_mirror_pal()+0x10c>
			leds[j]					= ColorFromPalette(current_palette, colorindex);
			leds[NUM_LEDS - 1 - j]  = ColorFromPalette(current_palette, colorindex);
		}
		else {
			leds[(NUM_LEDS / 2) - 1 - j] = ColorFromPalette(current_palette, colorindex);
     60c:	4622      	mov	r2, r4
     60e:	23ff      	movs	r3, #255	; 0xff
     610:	4942      	ldr	r1, [pc, #264]	; (71c <fire_mirror_pal()+0x28c>)
     612:	a803      	add	r0, sp, #12
     614:	f003 feb2 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
			leds[(NUM_LEDS / 2) + j]	 = ColorFromPalette(current_palette, colorindex);
     618:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     61a:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
     61e:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
     622:	f89d 400e 	ldrb.w	r4, [sp, #14]
     626:	f8cd 8000 	str.w	r8, [sp]
     62a:	493c      	ldr	r1, [pc, #240]	; (71c <fire_mirror_pal()+0x28c>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     62c:	f886 3117 	strb.w	r3, [r6, #279]	; 0x117
        g = rhs.g;
     630:	f886 e118 	strb.w	lr, [r6, #280]	; 0x118
     634:	23ff      	movs	r3, #255	; 0xff
        b = rhs.b;
     636:	f886 4119 	strb.w	r4, [r6, #281]	; 0x119
     63a:	a803      	add	r0, sp, #12
     63c:	f003 fe9e 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     640:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     644:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     648:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     64c:	f885 111a 	strb.w	r1, [r5, #282]	; 0x11a
        g = rhs.g;
     650:	f885 211b 	strb.w	r2, [r5, #283]	; 0x11b
        b = rhs.b;
     654:	f885 311c 	strb.w	r3, [r5, #284]	; 0x11c
     658:	3503      	adds	r5, #3
	}
	if (random8() < sparking) {
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
     65a:	45aa      	cmp	sl, r5
     65c:	f1a6 0603 	sub.w	r6, r6, #3
     660:	d1c1      	bne.n	5e6 <fire_mirror_pal()+0x156>
		else {
			leds[(NUM_LEDS / 2) - 1 - j] = ColorFromPalette(current_palette, colorindex);
			leds[(NUM_LEDS / 2) + j]	 = ColorFromPalette(current_palette, colorindex);
		}
	}
}
     662:	b004      	add	sp, #16
     664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     668:	4827      	ldr	r0, [pc, #156]	; (708 <fire_mirror_pal()+0x278>)
// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     66a:	4f26      	ldr	r7, [pc, #152]	; (704 <fire_mirror_pal()+0x274>)
     66c:	8803      	ldrh	r3, [r0, #0]
		use_palette = 1;
		this_dir = random8(2);
     66e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 728 <fire_mirror_pal()+0x298>
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
     672:	4e2b      	ldr	r6, [pc, #172]	; (720 <fire_mirror_pal()+0x290>)

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     674:	4922      	ldr	r1, [pc, #136]	; (700 <fire_mirror_pal()+0x270>)
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
     676:	4d2b      	ldr	r5, [pc, #172]	; (724 <fire_mirror_pal()+0x294>)
     678:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     67c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     680:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     684:	3319      	adds	r3, #25
     686:	b29b      	uxth	r3, r3
     688:	eb03 2c43 	add.w	ip, r3, r3, lsl #9
     68c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
     690:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
     694:	f10c 0c19 	add.w	ip, ip, #25
     698:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     69c:	eb0c 221c 	add.w	r2, ip, ip, lsr #8
     6a0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6a4:	b2d2      	uxtb	r2, r2
     6a6:	fa5f fe83 	uxtb.w	lr, r3
     6aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6ae:	eb0c 234c 	add.w	r3, ip, ip, lsl #9
     6b2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6b6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6ba:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6be:	11d2      	asrs	r2, r2, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6c0:	3319      	adds	r3, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6c2:	3232      	adds	r2, #50	; 0x32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6c4:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6c6:	b2d2      	uxtb	r2, r2
     6c8:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     6cc:	703a      	strb	r2, [r7, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     6ce:	eb03 2713 	add.w	r7, r3, r3, lsr #8
		use_palette = 1;
		this_dir = random8(2);
     6d2:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6d6:	ea4f 1eae 	mov.w	lr, lr, asr #6
     6da:	f10e 0e32 	add.w	lr, lr, #50	; 0x32
     6de:	f889 7000 	strb.w	r7, [r9]
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
     6e2:	2701      	movs	r7, #1
     6e4:	fa5f fe8e 	uxtb.w	lr, lr
     6e8:	7037      	strb	r7, [r6, #0]
		this_dir = random8(2);
		this_delay = 15;
     6ea:	270f      	movs	r7, #15


// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
     6ec:	2600      	movs	r6, #0
		sparking = random8(50, 110);
     6ee:	f881 e000 	strb.w	lr, [r1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6f2:	8003      	strh	r3, [r0, #0]
     6f4:	4671      	mov	r1, lr
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
     6f6:	602f      	str	r7, [r5, #0]


// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
     6f8:	7026      	strb	r6, [r4, #0]
     6fa:	e6d9      	b.n	4b0 <fire_mirror_pal()+0x20>
     6fc:	1fff876c 	.word	0x1fff876c
     700:	1fff8770 	.word	0x1fff8770
     704:	1fff876e 	.word	0x1fff876e
     708:	1fff8782 	.word	0x1fff8782
     70c:	ae4c415d 	.word	0xae4c415d
     710:	1fff92e7 	.word	0x1fff92e7
     714:	1fff9344 	.word	0x1fff9344
     718:	1fff8dcc 	.word	0x1fff8dcc
     71c:	1fff910c 	.word	0x1fff910c
     720:	1fff8764 	.word	0x1fff8764
     724:	1fff8768 	.word	0x1fff8768
     728:	1fff92e4 	.word	0x1fff92e4
     72c:	55555556 	.word	0x55555556

00000730 <confetti()>:
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     730:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (mode_change) {
     732:	4835      	ldr	r0, [pc, #212]	; (808 <confetti()+0xd8>)
     734:	7803      	ldrb	r3, [r0, #0]
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     736:	b085      	sub	sp, #20
	if (mode_change) {
     738:	2b00      	cmp	r3, #0
     73a:	d061      	beq.n	800 <confetti()+0xd0>
     73c:	4d33      	ldr	r5, [pc, #204]	; (80c <confetti()+0xdc>)
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
     73e:	4f34      	ldr	r7, [pc, #208]	; (810 <confetti()+0xe0>)
     740:	882b      	ldrh	r3, [r5, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     742:	4e34      	ldr	r6, [pc, #208]	; (814 <confetti()+0xe4>)
		this_fade = random8(10, 48);
		this_delay = 20;
     744:	4c34      	ldr	r4, [pc, #208]	; (818 <confetti()+0xe8>)
     746:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     74a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     74e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     752:	3119      	adds	r1, #25
     754:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     756:	eb01 2311 	add.w	r3, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     75a:	b2db      	uxtb	r3, r3
     75c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
     760:	eb03 0242 	add.w	r2, r3, r2, lsl #1
     764:	11d2      	asrs	r2, r2, #7
     766:	320a      	adds	r2, #10
     768:	b2d2      	uxtb	r2, r2

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     76a:	f04f 0e01 	mov.w	lr, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     76e:	8029      	strh	r1, [r5, #0]
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
     770:	2300      	movs	r3, #0
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
     772:	2114      	movs	r1, #20
void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
     774:	703a      	strb	r2, [r7, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     776:	f886 e000 	strb.w	lr, [r6]
		this_fade = random8(10, 48);
		this_delay = 20;
     77a:	6021      	str	r1, [r4, #0]
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
     77c:	7003      	strb	r3, [r0, #0]
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     77e:	4c27      	ldr	r4, [pc, #156]	; (81c <confetti()+0xec>)
	int pos = random16(NUM_LEDS);
	this_index = random8();
     780:	4e27      	ldr	r6, [pc, #156]	; (820 <confetti()+0xf0>)
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     782:	4620      	mov	r0, r4
     784:	21bc      	movs	r1, #188	; 0xbc
     786:	f003 fda7 	bl	42d8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     78a:	882b      	ldrh	r3, [r5, #0]
	int pos = random16(NUM_LEDS);
	this_index = random8();
	leds[pos] += ColorFromPalette(current_palette, this_index);
     78c:	4925      	ldr	r1, [pc, #148]	; (824 <confetti()+0xf4>)
     78e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     792:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     796:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     79a:	3319      	adds	r3, #25
     79c:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     79e:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     7a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     7a6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     7aa:	3019      	adds	r0, #25
     7ac:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     7ae:	eb00 2e10 	add.w	lr, r0, r0, lsr #8
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = random16(NUM_LEDS);
     7b2:	27bc      	movs	r7, #188	; 0xbc
     7b4:	fa5f fe8e 	uxtb.w	lr, lr
     7b8:	fb07 f303 	mul.w	r3, r7, r3
	this_index = random8();
	leds[pos] += ColorFromPalette(current_palette, this_index);
     7bc:	2201      	movs	r2, #1
     7be:	9200      	str	r2, [sp, #0]
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = random16(NUM_LEDS);
     7c0:	0c1f      	lsrs	r7, r3, #16
	this_index = random8();
	leds[pos] += ColorFromPalette(current_palette, this_index);
     7c2:	4672      	mov	r2, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     7c4:	8028      	strh	r0, [r5, #0]
     7c6:	23ff      	movs	r3, #255	; 0xff
     7c8:	a803      	add	r0, sp, #12
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = random16(NUM_LEDS);
	this_index = random8();
     7ca:	f886 e000 	strb.w	lr, [r6]
	leds[pos] += ColorFromPalette(current_palette, this_index);
     7ce:	f003 fdd5 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     7d2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
     7d6:	18e1      	adds	r1, r4, r3
     7d8:	5ce2      	ldrb	r2, [r4, r3]
     7da:	f89d 000c 	ldrb.w	r0, [sp, #12]
     7de:	fa82 f250 	uqadd8	r2, r2, r0
     7e2:	54e2      	strb	r2, [r4, r3]
     7e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
     7e8:	784a      	ldrb	r2, [r1, #1]
     7ea:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     7ee:	704a      	strb	r2, [r1, #1]
     7f0:	788b      	ldrb	r3, [r1, #2]
     7f2:	f89d 200e 	ldrb.w	r2, [sp, #14]
     7f6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
     7fa:	708b      	strb	r3, [r1, #2]
}
     7fc:	b005      	add	sp, #20
     7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     800:	4b03      	ldr	r3, [pc, #12]	; (810 <confetti()+0xe0>)
     802:	4d02      	ldr	r5, [pc, #8]	; (80c <confetti()+0xdc>)
     804:	781a      	ldrb	r2, [r3, #0]
     806:	e7ba      	b.n	77e <confetti()+0x4e>
     808:	1fff876c 	.word	0x1fff876c
     80c:	1fff8782 	.word	0x1fff8782
     810:	1fff8760 	.word	0x1fff8760
     814:	1fff8764 	.word	0x1fff8764
     818:	1fff8768 	.word	0x1fff8768
     81c:	1fff8dcc 	.word	0x1fff8dcc
     820:	1fff9241 	.word	0x1fff9241
     824:	1fff910c 	.word	0x1fff910c

00000828 <fire()>:
#ifndef FIRE_H
#define FIRE_H



void fire() {
     828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (mode_change) {
     82c:	4964      	ldr	r1, [pc, #400]	; (9c0 <fire()+0x198>)
     82e:	780b      	ldrb	r3, [r1, #0]
#ifndef FIRE_H
#define FIRE_H



void fire() {
     830:	b083      	sub	sp, #12
	if (mode_change) {
     832:	2b00      	cmp	r3, #0
     834:	f040 808c 	bne.w	950 <fire()+0x128>
     838:	4b62      	ldr	r3, [pc, #392]	; (9c4 <fire()+0x19c>)
     83a:	4a63      	ldr	r2, [pc, #396]	; (9c8 <fire()+0x1a0>)
     83c:	4d63      	ldr	r5, [pc, #396]	; (9cc <fire()+0x1a4>)
     83e:	7818      	ldrb	r0, [r3, #0]
     840:	7812      	ldrb	r2, [r2, #0]
     842:	882b      	ldrh	r3, [r5, #0]
     844:	4f62      	ldr	r7, [pc, #392]	; (9d0 <fire()+0x1a8>)
     846:	4c63      	ldr	r4, [pc, #396]	; (9d4 <fire()+0x1ac>)
     848:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     84c:	0052      	lsls	r2, r2, #1
     84e:	fb87 1702 	smull	r1, r7, r7, r2
     852:	4417      	add	r7, r2
     854:	17d2      	asrs	r2, r2, #31
     856:	ebc2 17e7 	rsb	r7, r2, r7, asr #7
     85a:	3702      	adds	r7, #2
     85c:	b2ff      	uxtb	r7, r7
     85e:	f104 0ebc 	add.w	lr, r4, #188	; 0xbc
     862:	4626      	mov	r6, r4
     864:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     868:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     86c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     870:	3319      	adds	r3, #25
     872:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     874:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     878:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     87c:	b2d2      	uxtb	r2, r2
     87e:	fb12 f207 	smulbb	r2, r2, r7
     882:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
	// Array of temperature readings at each simulation cell
	static byte heat[NUM_LEDS];

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
     886:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	}
	// Array of temperature readings at each simulation cell
	static byte heat[NUM_LEDS];

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
     88a:	45b6      	cmp	lr, r6
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
     88c:	7032      	strb	r2, [r6, #0]
	}
	// Array of temperature readings at each simulation cell
	static byte heat[NUM_LEDS];

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
     88e:	d1e9      	bne.n	864 <fire()+0x3c>
     890:	4e51      	ldr	r6, [pc, #324]	; (9d8 <fire()+0x1b0>)
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     892:	f8df 8154 	ldr.w	r8, [pc, #340]	; 9e8 <fire()+0x1c0>
     896:	f1a6 02b8 	sub.w	r2, r6, #184	; 0xb8
     89a:	4694      	mov	ip, r2
     89c:	f106 0e02 	add.w	lr, r6, #2
     8a0:	7831      	ldrb	r1, [r6, #0]
     8a2:	f816 7d01 	ldrb.w	r7, [r6, #-1]!
     8a6:	eb01 0147 	add.w	r1, r1, r7, lsl #1
     8aa:	fb88 9701 	smull	r9, r7, r8, r1
     8ae:	eba7 71e1 	sub.w	r1, r7, r1, asr #31
	for (int i = 0; i < NUM_LEDS; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
     8b2:	4566      	cmp	r6, ip
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     8b4:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	for (int i = 0; i < NUM_LEDS; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
     8b8:	d1f2      	bne.n	8a0 <fire()+0x78>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     8ba:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     8be:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     8c2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     8c6:	3319      	adds	r3, #25
     8c8:	b29b      	uxth	r3, r3
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < sparking) {
     8ca:	eb03 2113 	add.w	r1, r3, r3, lsr #8
     8ce:	b2c9      	uxtb	r1, r1
     8d0:	4281      	cmp	r1, r0
     8d2:	802b      	strh	r3, [r5, #0]
     8d4:	4d3d      	ldr	r5, [pc, #244]	; (9cc <fire()+0x1a4>)
     8d6:	d224      	bcs.n	922 <fire()+0xfa>
     8d8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     8dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     8e0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     8e4:	3319      	adds	r3, #25
     8e6:	b29b      	uxth	r3, r3
     8e8:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     8ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     8f0:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     8f4:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     8f6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     8fa:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     8fc:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     8fe:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     902:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     906:	b2c9      	uxtb	r1, r1
     908:	121b      	asrs	r3, r3, #8
     90a:	eb01 0641 	add.w	r6, r1, r1, lsl #1
     90e:	ebc1 1146 	rsb	r1, r1, r6, lsl #5
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
     912:	5cd6      	ldrb	r6, [r2, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     914:	8028      	strh	r0, [r5, #0]
     916:	1209      	asrs	r1, r1, #8
     918:	3960      	subs	r1, #96	; 0x60
     91a:	4630      	mov	r0, r6
     91c:	fa80 f051 	uqadd8	r0, r0, r1
     920:	54d0      	strb	r0, [r2, r3]
     922:	4d2e      	ldr	r5, [pc, #184]	; (9dc <fire()+0x1b4>)
     924:	f505 760d 	add.w	r6, r5, #564	; 0x234
	}

	// Step 4.  Map from heat cells to LED colors
	for (int j = 0; j < NUM_LEDS; j++) {
		leds[j] = HeatColor(heat[j]);
     928:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     92c:	a801      	add	r0, sp, #4
     92e:	f003 fd03 	bl	4338 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     932:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
     936:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     93a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     93e:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
     940:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
     942:	70ab      	strb	r3, [r5, #2]
     944:	3503      	adds	r5, #3
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}

	// Step 4.  Map from heat cells to LED colors
	for (int j = 0; j < NUM_LEDS; j++) {
     946:	42ae      	cmp	r6, r5
     948:	d1ee      	bne.n	928 <fire()+0x100>
		leds[j] = HeatColor(heat[j]);
	}
}
     94a:	b003      	add	sp, #12
     94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     950:	4d1e      	ldr	r5, [pc, #120]	; (9cc <fire()+0x1a4>)

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     952:	4f1d      	ldr	r7, [pc, #116]	; (9c8 <fire()+0x1a0>)
     954:	882b      	ldrh	r3, [r5, #0]
		use_palette = 0;
     956:	4e22      	ldr	r6, [pc, #136]	; (9e0 <fire()+0x1b8>)


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     958:	481a      	ldr	r0, [pc, #104]	; (9c4 <fire()+0x19c>)
		cooling = random8(50, 120);
		use_palette = 0;
		this_delay = 15;
     95a:	4c22      	ldr	r4, [pc, #136]	; (9e4 <fire()+0x1bc>)
     95c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     960:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     964:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     968:	3219      	adds	r2, #25
     96a:	b292      	uxth	r2, r2
     96c:	eb02 2342 	add.w	r3, r2, r2, lsl #9
     970:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     974:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     978:	3319      	adds	r3, #25
     97a:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     97c:	eb02 2e12 	add.w	lr, r2, r2, lsr #8
     980:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     984:	b2d2      	uxtb	r2, r2
     986:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     98a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
     98e:	fa5f fe8e 	uxtb.w	lr, lr
     992:	11d2      	asrs	r2, r2, #7
     994:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
     998:	3232      	adds	r2, #50	; 0x32
     99a:	ea4f 1eae 	mov.w	lr, lr, asr #6
     99e:	b2d2      	uxtb	r2, r2
     9a0:	f10e 0e32 	add.w	lr, lr, #50	; 0x32

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     9a4:	703a      	strb	r2, [r7, #0]



void fire() {
	if (mode_change) {
		mode_change = 0;
     9a6:	2700      	movs	r7, #0
     9a8:	fa5f fe8e 	uxtb.w	lr, lr
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
     9ac:	7037      	strb	r7, [r6, #0]
		this_delay = 15;
     9ae:	260f      	movs	r6, #15


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     9b0:	f880 e000 	strb.w	lr, [r0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     9b4:	802b      	strh	r3, [r5, #0]
     9b6:	4670      	mov	r0, lr



void fire() {
	if (mode_change) {
		mode_change = 0;
     9b8:	700f      	strb	r7, [r1, #0]
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_delay = 15;
     9ba:	6026      	str	r6, [r4, #0]
     9bc:	e742      	b.n	844 <fire()+0x1c>
     9be:	bf00      	nop
     9c0:	1fff876c 	.word	0x1fff876c
     9c4:	1fff8770 	.word	0x1fff8770
     9c8:	1fff876e 	.word	0x1fff876e
     9cc:	1fff8782 	.word	0x1fff8782
     9d0:	ae4c415d 	.word	0xae4c415d
     9d4:	1fff93ff 	.word	0x1fff93ff
     9d8:	1fff94b8 	.word	0x1fff94b8
     9dc:	1fff8dcc 	.word	0x1fff8dcc
     9e0:	1fff8764 	.word	0x1fff8764
     9e4:	1fff8768 	.word	0x1fff8768
     9e8:	55555556 	.word	0x55555556

000009ec <fire_mirror()>:
}



// fire mirrored from ends or center
void fire_mirror() {
     9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mode_change) {
     9f0:	4c93      	ldr	r4, [pc, #588]	; (c40 <fire_mirror()+0x254>)
     9f2:	7823      	ldrb	r3, [r4, #0]
}



// fire mirrored from ends or center
void fire_mirror() {
     9f4:	b082      	sub	sp, #8
	if (mode_change) {
     9f6:	2b00      	cmp	r3, #0
     9f8:	f040 80d3 	bne.w	ba2 <fire_mirror()+0x1b6>
     9fc:	4991      	ldr	r1, [pc, #580]	; (c44 <fire_mirror()+0x258>)
     9fe:	4b92      	ldr	r3, [pc, #584]	; (c48 <fire_mirror()+0x25c>)
     a00:	4a92      	ldr	r2, [pc, #584]	; (c4c <fire_mirror()+0x260>)
     a02:	4d93      	ldr	r5, [pc, #588]	; (c50 <fire_mirror()+0x264>)
     a04:	7808      	ldrb	r0, [r1, #0]
     a06:	7812      	ldrb	r2, [r2, #0]
     a08:	7819      	ldrb	r1, [r3, #0]
     a0a:	882b      	ldrh	r3, [r5, #0]
     a0c:	4e91      	ldr	r6, [pc, #580]	; (c54 <fire_mirror()+0x268>)
     a0e:	4c92      	ldr	r4, [pc, #584]	; (c58 <fire_mirror()+0x26c>)
     a10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     a14:	0052      	lsls	r2, r2, #1
     a16:	fb86 6e02 	smull	r6, lr, r6, r2
     a1a:	4496      	add	lr, r2
     a1c:	17d2      	asrs	r2, r2, #31
     a1e:	ebc2 1eae 	rsb	lr, r2, lr, asr #6
     a22:	f10e 0e02 	add.w	lr, lr, #2
     a26:	fa5f fe8e 	uxtb.w	lr, lr
     a2a:	f104 0c5e 	add.w	ip, r4, #94	; 0x5e
     a2e:	4627      	mov	r7, r4
     a30:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     a34:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     a38:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     a3c:	3319      	adds	r3, #25
     a3e:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     a40:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     a44:	f817 6f01 	ldrb.w	r6, [r7, #1]!
     a48:	b2d2      	uxtb	r2, r2
     a4a:	fb12 f20e 	smulbb	r2, r2, lr
     a4e:	eba6 2212 	sub.w	r2, r6, r2, lsr #8
		this_dir = random8(2);
		this_delay = 15;
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     a52:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
     a56:	45bc      	cmp	ip, r7
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     a58:	703a      	strb	r2, [r7, #0]
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
     a5a:	d1e9      	bne.n	a30 <fire_mirror()+0x44>
     a5c:	4f7f      	ldr	r7, [pc, #508]	; (c5c <fire_mirror()+0x270>)
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     a5e:	f8df 920c 	ldr.w	r9, [pc, #524]	; c6c <fire_mirror()+0x280>
     a62:	f1a7 025c 	sub.w	r2, r7, #92	; 0x5c
     a66:	4690      	mov	r8, r2
     a68:	f107 0c02 	add.w	ip, r7, #2
     a6c:	783e      	ldrb	r6, [r7, #0]
     a6e:	f817 ed01 	ldrb.w	lr, [r7, #-1]!
     a72:	eb06 064e 	add.w	r6, r6, lr, lsl #1
     a76:	fb89 ae06 	smull	sl, lr, r9, r6
     a7a:	ebae 76e6 	sub.w	r6, lr, r6, asr #31
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     a7e:	45b8      	cmp	r8, r7
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     a80:	f80c 6d01 	strb.w	r6, [ip, #-1]!
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     a84:	d1f2      	bne.n	a6c <fire_mirror()+0x80>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a86:	eb03 2643 	add.w	r6, r3, r3, lsl #9
     a8a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     a8e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     a92:	3319      	adds	r3, #25
     a94:	b29b      	uxth	r3, r3
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
		}
		if (random8() < sparking) {
     a96:	eb03 2613 	add.w	r6, r3, r3, lsr #8
     a9a:	b2f6      	uxtb	r6, r6
     a9c:	4286      	cmp	r6, r0
     a9e:	802b      	strh	r3, [r5, #0]
     aa0:	4d6b      	ldr	r5, [pc, #428]	; (c50 <fire_mirror()+0x264>)
     aa2:	d224      	bcs.n	aee <fire_mirror()+0x102>
     aa4:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     aa8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     aac:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     ab0:	3319      	adds	r3, #25
     ab2:	b29b      	uxth	r3, r3
     ab4:	eb03 2643 	add.w	r6, r3, r3, lsl #9
     ab8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     abc:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
     ac0:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     ac2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ac6:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     ac8:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     aca:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     ace:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     ad2:	b2c0      	uxtb	r0, r0
     ad4:	121b      	asrs	r3, r3, #8
     ad6:	eb00 0740 	add.w	r7, r0, r0, lsl #1
     ada:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
     ade:	5cd7      	ldrb	r7, [r2, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ae0:	802e      	strh	r6, [r5, #0]
     ae2:	1200      	asrs	r0, r0, #8
     ae4:	3860      	subs	r0, #96	; 0x60
     ae6:	463d      	mov	r5, r7
     ae8:	fa85 f550 	uqadd8	r5, r5, r0
     aec:	54d5      	strb	r5, [r2, r3]
		}
		if (this_dir) {
     aee:	b351      	cbz	r1, b46 <fire_mirror()+0x15a>
     af0:	4e5b      	ldr	r6, [pc, #364]	; (c60 <fire_mirror()+0x274>)
     af2:	af01      	add	r7, sp, #4
     af4:	f506 788d 	add.w	r8, r6, #282	; 0x11a
     af8:	4635      	mov	r5, r6
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				leds[j] = HeatColor(heat[j]);
     afa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     afe:	4638      	mov	r0, r7
     b00:	f003 fc1a 	bl	4338 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b04:	f89d 0004 	ldrb.w	r0, [sp, #4]
        g = rhs.g;
     b08:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b10:	7028      	strb	r0, [r5, #0]
        g = rhs.g;
     b12:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
     b14:	70ab      	strb	r3, [r5, #2]
				leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
     b16:	7821      	ldrb	r1, [r4, #0]
     b18:	4638      	mov	r0, r7
     b1a:	3503      	adds	r5, #3
     b1c:	f003 fc0c 	bl	4338 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b20:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
     b24:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b28:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b2c:	f886 1231 	strb.w	r1, [r6, #561]	; 0x231
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
     b30:	45a8      	cmp	r8, r5
        g = rhs.g;
     b32:	f886 2232 	strb.w	r2, [r6, #562]	; 0x232
        b = rhs.b;
     b36:	f886 3233 	strb.w	r3, [r6, #563]	; 0x233
     b3a:	f1a6 0603 	sub.w	r6, r6, #3
     b3e:	d1dc      	bne.n	afa <fire_mirror()+0x10e>
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
				leds[(NUM_LEDS / 2) + j]	 = HeatColor(heat[j]);
			}
		}
}
     b40:	b002      	add	sp, #8
     b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b46:	4d46      	ldr	r5, [pc, #280]	; (c60 <fire_mirror()+0x274>)
     b48:	af01      	add	r7, sp, #4
     b4a:	f5a5 788d 	sub.w	r8, r5, #282	; 0x11a
		}
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
     b4e:	462e      	mov	r6, r5
				leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
     b50:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     b54:	4638      	mov	r0, r7
     b56:	f003 fbef 	bl	4338 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b5a:	f89d 0004 	ldrb.w	r0, [sp, #4]
        g = rhs.g;
     b5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b62:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b66:	f885 0117 	strb.w	r0, [r5, #279]	; 0x117
        g = rhs.g;
     b6a:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
        b = rhs.b;
     b6e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
				leds[(NUM_LEDS / 2) + j]	 = HeatColor(heat[j]);
     b72:	7821      	ldrb	r1, [r4, #0]
     b74:	4638      	mov	r0, r7
     b76:	3d03      	subs	r5, #3
     b78:	f003 fbde 	bl	4338 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b7c:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
     b80:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b84:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b88:	f886 111a 	strb.w	r1, [r6, #282]	; 0x11a
				leds[j] = HeatColor(heat[j]);
				leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
     b8c:	45a8      	cmp	r8, r5
        g = rhs.g;
     b8e:	f886 211b 	strb.w	r2, [r6, #283]	; 0x11b
        b = rhs.b;
     b92:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
     b96:	f106 0603 	add.w	r6, r6, #3
     b9a:	d1d9      	bne.n	b50 <fire_mirror()+0x164>
				leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
				leds[(NUM_LEDS / 2) + j]	 = HeatColor(heat[j]);
			}
		}
}
     b9c:	b002      	add	sp, #8
     b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ba2:	4d2b      	ldr	r5, [pc, #172]	; (c50 <fire_mirror()+0x264>)

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     ba4:	4827      	ldr	r0, [pc, #156]	; (c44 <fire_mirror()+0x258>)
     ba6:	882b      	ldrh	r3, [r5, #0]
		cooling = random8(50, 120);
     ba8:	f8df e0a0 	ldr.w	lr, [pc, #160]	; c4c <fire_mirror()+0x260>
		use_palette = 0;
     bac:	4f2d      	ldr	r7, [pc, #180]	; (c64 <fire_mirror()+0x278>)
		this_dir = random8(2);
     bae:	4926      	ldr	r1, [pc, #152]	; (c48 <fire_mirror()+0x25c>)
		this_delay = 15;
     bb0:	4e2d      	ldr	r6, [pc, #180]	; (c68 <fire_mirror()+0x27c>)
     bb2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     bb6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     bba:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     bbe:	3319      	adds	r3, #25
     bc0:	b29b      	uxth	r3, r3
     bc2:	eb03 2843 	add.w	r8, r3, r3, lsl #9
     bc6:	eb03 0888 	add.w	r8, r3, r8, lsl #2
     bca:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
     bce:	f108 0819 	add.w	r8, r8, #25
     bd2:	fa1f f888 	uxth.w	r8, r8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     bd6:	eb08 2218 	add.w	r2, r8, r8, lsr #8
     bda:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bde:	b2d2      	uxtb	r2, r2
     be0:	fa5f fc83 	uxtb.w	ip, r3
     be4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     be8:	eb08 2348 	add.w	r3, r8, r8, lsl #9
     bec:	eb08 0383 	add.w	r3, r8, r3, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bf0:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
     bf4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     bf8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bfc:	ea4f 1cac 	mov.w	ip, ip, asr #6
     c00:	11d2      	asrs	r2, r2, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c02:	3319      	adds	r3, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     c04:	f10c 0c32 	add.w	ip, ip, #50	; 0x32
     c08:	3232      	adds	r2, #50	; 0x32
     c0a:	fa5f fc8c 	uxtb.w	ip, ip
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c0e:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     c10:	b2d2      	uxtb	r2, r2

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     c12:	f880 c000 	strb.w	ip, [r0]
		cooling = random8(50, 120);
     c16:	f88e 2000 	strb.w	r2, [lr]
     c1a:	4660      	mov	r0, ip
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     c1c:	eb03 2e13 	add.w	lr, r3, r3, lsr #8


// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
     c20:	f04f 0c00 	mov.w	ip, #0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     c24:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
     c28:	f887 c000 	strb.w	ip, [r7]
		this_dir = random8(2);
		this_delay = 15;
     c2c:	270f      	movs	r7, #15
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
     c2e:	f881 e000 	strb.w	lr, [r1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c32:	802b      	strh	r3, [r5, #0]
     c34:	4671      	mov	r1, lr


// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
     c36:	f884 c000 	strb.w	ip, [r4]
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
     c3a:	6037      	str	r7, [r6, #0]
     c3c:	e6e6      	b.n	a0c <fire_mirror()+0x20>
     c3e:	bf00      	nop
     c40:	1fff876c 	.word	0x1fff876c
     c44:	1fff8770 	.word	0x1fff8770
     c48:	1fff92e4 	.word	0x1fff92e4
     c4c:	1fff876e 	.word	0x1fff876e
     c50:	1fff8782 	.word	0x1fff8782
     c54:	ae4c415d 	.word	0xae4c415d
     c58:	1fff934f 	.word	0x1fff934f
     c5c:	1fff93ac 	.word	0x1fff93ac
     c60:	1fff8dcc 	.word	0x1fff8dcc
     c64:	1fff8764 	.word	0x1fff8764
     c68:	1fff8768 	.word	0x1fff8768
     c6c:	55555556 	.word	0x55555556

00000c70 <one_sin()>:
#ifndef ONE_SIN_H
#define ONE_SIN_H


void one_sin() {
     c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     c74:	f8df 929c 	ldr.w	r9, [pc, #668]	; f14 <one_sin()+0x2a4>
     c78:	f899 3000 	ldrb.w	r3, [r9]
#ifndef ONE_SIN_H
#define ONE_SIN_H


void one_sin() {
     c7c:	b08b      	sub	sp, #44	; 0x2c
	if (mode_change) {
     c7e:	2b00      	cmp	r3, #0
     c80:	f040 8093 	bne.w	daa <one_sin()+0x13a>
     c84:	4995      	ldr	r1, [pc, #596]	; (edc <one_sin()+0x26c>)
     c86:	9103      	str	r1, [sp, #12]
     c88:	4995      	ldr	r1, [pc, #596]	; (ee0 <one_sin()+0x270>)
     c8a:	f8df 828c 	ldr.w	r8, [pc, #652]	; f18 <one_sin()+0x2a8>
     c8e:	4b95      	ldr	r3, [pc, #596]	; (ee4 <one_sin()+0x274>)
     c90:	9104      	str	r1, [sp, #16]
     c92:	4995      	ldr	r1, [pc, #596]	; (ee8 <one_sin()+0x278>)
     c94:	9105      	str	r1, [sp, #20]
     c96:	4995      	ldr	r1, [pc, #596]	; (eec <one_sin()+0x27c>)
     c98:	9107      	str	r1, [sp, #28]
     c9a:	f898 2000 	ldrb.w	r2, [r8]
     c9e:	4994      	ldr	r1, [pc, #592]	; (ef0 <one_sin()+0x280>)
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	9106      	str	r1, [sp, #24]
		else {
			bg_bri = 0;
		}
		use_palette = 1;
	}
	start_index += this_inc;
     ca4:	4893      	ldr	r0, [pc, #588]	; (ef4 <one_sin()+0x284>)
	this_index = start_index;
	if (this_dir) {
     ca6:	4c94      	ldr	r4, [pc, #592]	; (ef8 <one_sin()+0x288>)
		else {
			bg_bri = 0;
		}
		use_palette = 1;
	}
	start_index += this_inc;
     ca8:	7801      	ldrb	r1, [r0, #0]
	this_index = start_index;
     caa:	4f94      	ldr	r7, [pc, #592]	; (efc <one_sin()+0x28c>)
	if (this_dir) {
		this_phase += this_speed;                                                                   
     cac:	f8df 926c 	ldr.w	r9, [pc, #620]	; f1c <one_sin()+0x2ac>
		}
		use_palette = 1;
	}
	start_index += this_inc;
	this_index = start_index;
	if (this_dir) {
     cb0:	7824      	ldrb	r4, [r4, #0]
		else {
			bg_bri = 0;
		}
		use_palette = 1;
	}
	start_index += this_inc;
     cb2:	440a      	add	r2, r1
     cb4:	b2d2      	uxtb	r2, r2
     cb6:	7002      	strb	r2, [r0, #0]
	this_index = start_index;
     cb8:	703a      	strb	r2, [r7, #0]
	if (this_dir) {
		this_phase += this_speed;                                                                   
     cba:	f8d9 2000 	ldr.w	r2, [r9]
		}
		use_palette = 1;
	}
	start_index += this_inc;
	this_index = start_index;
	if (this_dir) {
     cbe:	2c00      	cmp	r4, #0
     cc0:	d06f      	beq.n	da2 <one_sin()+0x132>
		this_phase += this_speed;                                                                   
     cc2:	4413      	add	r3, r2
     cc4:	f8c9 3000 	str.w	r3, [r9]
     cc8:	4c8d      	ldr	r4, [pc, #564]	; (f00 <one_sin()+0x290>)
     cca:	2500      	movs	r5, #0
     ccc:	1c66      	adds	r6, r4, #1
     cce:	e001      	b.n	cd4 <one_sin()+0x64>
     cd0:	f8d9 3000 	ldr.w	r3, [r9]
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
     cd4:	9a05      	ldr	r2, [sp, #20]
     cd6:	7811      	ldrb	r1, [r2, #0]
     cd8:	fa5f fb85 	uxtb.w	fp, r5
     cdc:	fb01 330b 	mla	r3, r1, fp, r3
     ce0:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
     ce2:	0619      	lsls	r1, r3, #24
        in = 255 - in;
     ce4:	bf44      	itt	mi
     ce6:	43db      	mvnmi	r3, r3
     ce8:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
     cea:	005b      	lsls	r3, r3, #1
     cec:	b2db      	uxtb	r3, r3
     cee:	1c59      	adds	r1, r3, #1
     cf0:	fb01 f303 	mul.w	r3, r1, r3
     cf4:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
     cf6:	fb03 f101 	mul.w	r1, r3, r1
     cfa:	1209      	asrs	r1, r1, #8
     cfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     d00:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
     d04:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
     d06:	05da      	lsls	r2, r3, #23
     d08:	9a03      	ldr	r2, [sp, #12]
     d0a:	7811      	ldrb	r1, [r2, #0]
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
     d0c:	9a06      	ldr	r2, [sp, #24]
     d0e:	7810      	ldrb	r0, [r2, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     d10:	9a07      	ldr	r2, [sp, #28]
     d12:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
     d16:	bf54      	ite	pl
     d18:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
     d1a:	23ff      	movmi	r3, #255	; 0xff
     d1c:	f892 e000 	ldrb.w	lr, [r2]
     d20:	f88d e024 	strb.w	lr, [sp, #36]	; 0x24
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
     d24:	4299      	cmp	r1, r3
     d26:	bf34      	ite	cc
     d28:	f04f 0aff 	movcc.w	sl, #255	; 0xff
     d2c:	f04f 0a00 	movcs.w	sl, #0
     d30:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     d34:	4621      	mov	r1, r4
     d36:	a809      	add	r0, sp, #36	; 0x24
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     d38:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     d3c:	f003 fc68 	bl	4610 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
		leds[k] += ColorFromPalette(current_palette, this_index + k * this_inc, sin_bright, current_blending);
     d40:	7839      	ldrb	r1, [r7, #0]
     d42:	f898 0000 	ldrb.w	r0, [r8]
     d46:	4b6f      	ldr	r3, [pc, #444]	; (f04 <one_sin()+0x294>)
     d48:	fb00 120b 	mla	r2, r0, fp, r1
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	9300      	str	r3, [sp, #0]
     d50:	b2d2      	uxtb	r2, r2
     d52:	4653      	mov	r3, sl
     d54:	496c      	ldr	r1, [pc, #432]	; (f08 <one_sin()+0x298>)
     d56:	a809      	add	r0, sp, #36	; 0x24
     d58:	f003 fb10 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
     d5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
     d60:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
     d64:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     d68:	f806 3c01 	strb.w	r3, [r6, #-1]
     d6c:	7862      	ldrb	r2, [r4, #1]
     d6e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
     d72:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     d76:	7062      	strb	r2, [r4, #1]
     d78:	78a3      	ldrb	r3, [r4, #2]
     d7a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
     d7e:	fa83 f352 	uqadd8	r3, r3, r2
		this_index += this_rot;
     d82:	9a04      	ldr	r2, [sp, #16]
     d84:	7839      	ldrb	r1, [r7, #0]
     d86:	7812      	ldrb	r2, [r2, #0]
        b = qadd8( b, rhs.b);
     d88:	70a3      	strb	r3, [r4, #2]
		this_phase += this_speed;                                                                   
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
     d8a:	3501      	adds	r5, #1
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
		leds[k] += ColorFromPalette(current_palette, this_index + k * this_inc, sin_bright, current_blending);
		this_index += this_rot;
     d8c:	188b      	adds	r3, r1, r2
		this_phase += this_speed;                                                                   
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
     d8e:	2dbc      	cmp	r5, #188	; 0xbc
     d90:	f104 0403 	add.w	r4, r4, #3
     d94:	f106 0603 	add.w	r6, r6, #3
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
		leds[k] += ColorFromPalette(current_palette, this_index + k * this_inc, sin_bright, current_blending);
		this_index += this_rot;
     d98:	703b      	strb	r3, [r7, #0]
		this_phase += this_speed;                                                                   
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
     d9a:	d199      	bne.n	cd0 <one_sin()+0x60>
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
		leds[k] += ColorFromPalette(current_palette, this_index + k * this_inc, sin_bright, current_blending);
		this_index += this_rot;
	}
}
     d9c:	b00b      	add	sp, #44	; 0x2c
     d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	this_index = start_index;
	if (this_dir) {
		this_phase += this_speed;                                                                   
	}
	else {
		this_phase -= this_speed;                                                                     
     da2:	1ad3      	subs	r3, r2, r3
     da4:	f8c9 3000 	str.w	r3, [r9]
     da8:	e78e      	b.n	cc8 <one_sin()+0x58>
     daa:	f8df c174 	ldr.w	ip, [pc, #372]	; f20 <one_sin()+0x2b0>
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
     dae:	4b4f      	ldr	r3, [pc, #316]	; (eec <one_sin()+0x27c>)
     db0:	9307      	str	r3, [sp, #28]
     db2:	461e      	mov	r6, r3
     db4:	f8bc 3000 	ldrh.w	r3, [ip]
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
     db8:	4a4b      	ldr	r2, [pc, #300]	; (ee8 <one_sin()+0x278>)
     dba:	9205      	str	r2, [sp, #20]
     dbc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     dc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     dc4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     dc8:	3319      	adds	r3, #25
     dca:	b29b      	uxth	r3, r3
     dcc:	eb03 2543 	add.w	r5, r3, r3, lsl #9
     dd0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
     dd4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
     dd8:	3519      	adds	r5, #25
     dda:	b2ad      	uxth	r5, r5
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
     ddc:	4940      	ldr	r1, [pc, #256]	; (ee0 <one_sin()+0x270>)
     dde:	9104      	str	r1, [sp, #16]
     de0:	eb05 2145 	add.w	r1, r5, r5, lsl #9
     de4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
     de8:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     dec:	3119      	adds	r1, #25
     dee:	b289      	uxth	r1, r1
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
     df0:	483a      	ldr	r0, [pc, #232]	; (edc <one_sin()+0x26c>)
     df2:	9003      	str	r0, [sp, #12]
     df4:	eb01 2041 	add.w	r0, r1, r1, lsl #9
     df8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     dfc:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     e00:	3019      	adds	r0, #25
     e02:	b280      	uxth	r0, r0
     e04:	eb00 2440 	add.w	r4, r0, r0, lsl #9
     e08:	eb00 0484 	add.w	r4, r0, r4, lsl #2
     e0c:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
     e10:	3419      	adds	r4, #25
     e12:	b2a4      	uxth	r4, r4
     e14:	eb04 2e44 	add.w	lr, r4, r4, lsl #9
     e18:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
     e1c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
     e20:	f10e 0e19 	add.w	lr, lr, #25
     e24:	fa1f fe8e 	uxth.w	lr, lr
     e28:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
     e2c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
     e30:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
     e34:	3719      	adds	r7, #25
     e36:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     e38:	eb03 2313 	add.w	r3, r3, r3, lsr #8
     e3c:	eb04 2414 	add.w	r4, r4, r4, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e40:	f8ac 7000 	strh.w	r7, [ip]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     e44:	b2da      	uxtb	r2, r3
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
     e46:	f3c4 1442 	ubfx	r4, r4, #5, #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     e4a:	eb05 2315 	add.w	r3, r5, r5, lsr #8
     e4e:	eb07 2517 	add.w	r5, r7, r7, lsr #8
     e52:	4f25      	ldr	r7, [pc, #148]	; (ee8 <one_sin()+0x278>)
void one_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
     e54:	f8df c08c 	ldr.w	ip, [pc, #140]	; ee4 <one_sin()+0x274>

void one_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
     e58:	f8df 80bc 	ldr.w	r8, [pc, #188]	; f18 <one_sin()+0x2a8>
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
     e5c:	3401      	adds	r4, #1
     e5e:	eb01 2111 	add.w	r1, r1, r1, lsr #8
     e62:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
     e66:	b2c9      	uxtb	r1, r1
		this_rot = random8(1, 5);
     e68:	f3c0 1081 	ubfx	r0, r0, #6, #2
		all_freq = random8(1, 9);
     e6c:	703c      	strb	r4, [r7, #0]
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
     e6e:	4c1c      	ldr	r4, [pc, #112]	; (ee0 <one_sin()+0x270>)
     e70:	3001      	adds	r0, #1
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
     e72:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     e76:	b2ed      	uxtb	r5, r5
		this_rot = random8(1, 5);
     e78:	7020      	strb	r0, [r4, #0]
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
     e7a:	1109      	asrs	r1, r1, #4
     e7c:	4c17      	ldr	r4, [pc, #92]	; (edc <one_sin()+0x26c>)


void one_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
     e7e:	4823      	ldr	r0, [pc, #140]	; (f0c <one_sin()+0x29c>)
     e80:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
     e84:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
     e88:	f886 e000 	strb.w	lr, [r6]
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
     e8c:	3980      	subs	r1, #128	; 0x80
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
     e8e:	4e18      	ldr	r6, [pc, #96]	; (ef0 <one_sin()+0x280>)
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
     e90:	7021      	strb	r1, [r4, #0]
     e92:	11ed      	asrs	r5, r5, #7
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
		if (bg_bri > 8) {
     e94:	2d09      	cmp	r5, #9
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
     e96:	9606      	str	r6, [sp, #24]


void one_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
     e98:	f04f 040a 	mov.w	r4, #10
#define ONE_SIN_H


void one_sin() {
	if (mode_change) {
		mode_change = 0;
     e9c:	f04f 0100 	mov.w	r1, #0
		this_delay = 10;
     ea0:	6004      	str	r4, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     ea2:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
		bg_bri = random8(10);
		if (bg_bri > 8) {
			bg_bri = 200;
		}
		else {
			bg_bri = 0;
     ea6:	bf18      	it	ne
     ea8:	9806      	ldrne	r0, [sp, #24]
#define ONE_SIN_H


void one_sin() {
	if (mode_change) {
		mode_change = 0;
     eaa:	f889 1000 	strb.w	r1, [r9]
     eae:	ea4f 2222 	mov.w	r2, r2, asr #8
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
		if (bg_bri > 8) {
			bg_bri = 200;
     eb2:	bf08      	it	eq
     eb4:	21c8      	moveq	r1, #200	; 0xc8
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
     eb6:	7035      	strb	r5, [r6, #0]
     eb8:	f102 0201 	add.w	r2, r2, #1
		if (bg_bri > 8) {
			bg_bri = 200;
		}
		else {
			bg_bri = 0;
     ebc:	bf18      	it	ne
     ebe:	7001      	strbne	r1, [r0, #0]
     ec0:	f3c3 1381 	ubfx	r3, r3, #6, #2
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
		if (bg_bri > 8) {
			bg_bri = 200;
     ec4:	bf08      	it	eq
     ec6:	7031      	strbeq	r1, [r6, #0]
		}
		else {
			bg_bri = 0;
		}
		use_palette = 1;
     ec8:	4911      	ldr	r1, [pc, #68]	; (f10 <one_sin()+0x2a0>)
     eca:	b2d2      	uxtb	r2, r2
     ecc:	3301      	adds	r3, #1
     ece:	2001      	movs	r0, #1
void one_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
     ed0:	f88c 3000 	strb.w	r3, [ip]

void one_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
     ed4:	f888 2000 	strb.w	r2, [r8]
			bg_bri = 200;
		}
		else {
			bg_bri = 0;
		}
		use_palette = 1;
     ed8:	7008      	strb	r0, [r1, #0]
     eda:	e6e3      	b.n	ca4 <one_sin()+0x34>
     edc:	1fff8773 	.word	0x1fff8773
     ee0:	1fff8774 	.word	0x1fff8774
     ee4:	1fff8763 	.word	0x1fff8763
     ee8:	1fff876d 	.word	0x1fff876d
     eec:	1fff9000 	.word	0x1fff9000
     ef0:	1fff934c 	.word	0x1fff934c
     ef4:	1fff93b0 	.word	0x1fff93b0
     ef8:	1fff92e4 	.word	0x1fff92e4
     efc:	1fff9241 	.word	0x1fff9241
     f00:	1fff8dcc 	.word	0x1fff8dcc
     f04:	1fff92e0 	.word	0x1fff92e0
     f08:	1fff910c 	.word	0x1fff910c
     f0c:	1fff8768 	.word	0x1fff8768
     f10:	1fff8764 	.word	0x1fff8764
     f14:	1fff876c 	.word	0x1fff876c
     f18:	1fff8772 	.word	0x1fff8772
     f1c:	1fff93fc 	.word	0x1fff93fc
     f20:	1fff8782 	.word	0x1fff8782

00000f24 <two_sin()>:
#define TWO_SIN_H


bool hue_change;

void two_sin() {
     f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     f28:	4c85      	ldr	r4, [pc, #532]	; (1140 <two_sin()+0x21c>)
     f2a:	7823      	ldrb	r3, [r4, #0]
#define TWO_SIN_H


bool hue_change;

void two_sin() {
     f2c:	b087      	sub	sp, #28
	if (mode_change) {
     f2e:	2b00      	cmp	r3, #0
     f30:	f040 8124 	bne.w	117c <two_sin()+0x258>
     f34:	4c83      	ldr	r4, [pc, #524]	; (1144 <two_sin()+0x220>)
     f36:	4a84      	ldr	r2, [pc, #528]	; (1148 <two_sin()+0x224>)
     f38:	4b84      	ldr	r3, [pc, #528]	; (114c <two_sin()+0x228>)
     f3a:	9400      	str	r4, [sp, #0]
     f3c:	4c84      	ldr	r4, [pc, #528]	; (1150 <two_sin()+0x22c>)
     f3e:	9401      	str	r4, [sp, #4]
     f40:	4c84      	ldr	r4, [pc, #528]	; (1154 <two_sin()+0x230>)
     f42:	7810      	ldrb	r0, [r2, #0]
     f44:	9403      	str	r4, [sp, #12]
     f46:	781a      	ldrb	r2, [r3, #0]
     f48:	4c83      	ldr	r4, [pc, #524]	; (1158 <two_sin()+0x234>)
     f4a:	4984      	ldr	r1, [pc, #528]	; (115c <two_sin()+0x238>)
     f4c:	4b84      	ldr	r3, [pc, #528]	; (1160 <two_sin()+0x23c>)
     f4e:	4d85      	ldr	r5, [pc, #532]	; (1164 <two_sin()+0x240>)
     f50:	9402      	str	r4, [sp, #8]
		that_cutoff = random8(128, 240);
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
	}
	if (this_dir == 0) { this_phase += this_speed; that_phase += that_speed; }
     f52:	4c85      	ldr	r4, [pc, #532]	; (1168 <two_sin()+0x244>)
     f54:	4f85      	ldr	r7, [pc, #532]	; (116c <two_sin()+0x248>)
     f56:	7824      	ldrb	r4, [r4, #0]
     f58:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1174 <two_sin()+0x250>
     f5c:	2c00      	cmp	r4, #0
     f5e:	f040 80e6 	bne.w	112e <two_sin()+0x20a>
     f62:	f8d8 4000 	ldr.w	r4, [r8]
     f66:	683e      	ldr	r6, [r7, #0]
     f68:	4422      	add	r2, r4
     f6a:	4430      	add	r0, r6
     f6c:	6038      	str	r0, [r7, #0]
     f6e:	f8c8 2000 	str.w	r2, [r8]
	else { this_phase -= this_speed; that_phase -= that_speed; }

	this_hue += this_rot;                                                // Hue rotation is fun for this_wave.
     f72:	9e02      	ldr	r6, [sp, #8]
     f74:	7809      	ldrb	r1, [r1, #0]
     f76:	f896 c000 	ldrb.w	ip, [r6]
	that_hue += that_rot;                                                // It's also fun for that_wave.
     f7a:	f895 e000 	ldrb.w	lr, [r5]
     f7e:	781b      	ldrb	r3, [r3, #0]
     f80:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 1178 <two_sin()+0x254>
     f84:	4c7a      	ldr	r4, [pc, #488]	; (1170 <two_sin()+0x24c>)
		that_hue = random8();
	}
	if (this_dir == 0) { this_phase += this_speed; that_phase += that_speed; }
	else { this_phase -= this_speed; that_phase -= that_speed; }

	this_hue += this_rot;                                                // Hue rotation is fun for this_wave.
     f86:	4461      	add	r1, ip
     f88:	fa5f fb81 	uxtb.w	fp, r1
	that_hue += that_rot;                                                // It's also fun for that_wave.
     f8c:	4473      	add	r3, lr
		that_hue = random8();
	}
	if (this_dir == 0) { this_phase += this_speed; that_phase += that_speed; }
	else { this_phase -= this_speed; that_phase -= that_speed; }

	this_hue += this_rot;                                                // Hue rotation is fun for this_wave.
     f8e:	f886 b000 	strb.w	fp, [r6]
	that_hue += that_rot;                                                // It's also fun for that_wave.
     f92:	702b      	strb	r3, [r5, #0]

	for (int k = 0; k < NUM_LEDS - 1; k++) {
     f94:	f04f 0a00 	mov.w	sl, #0
     f98:	4601      	mov	r1, r0
     f9a:	e097      	b.n	10cc <two_sin()+0x1a8>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
     f9c:	2800      	cmp	r0, #0
        in = 255 - in;
     f9e:	bfbc      	itt	lt
     fa0:	43c9      	mvnlt	r1, r1
     fa2:	b2c9      	uxtblt	r1, r1
     fa4:	0049      	lsls	r1, r1, #1
     fa6:	b2c9      	uxtb	r1, r1
     fa8:	1c4b      	adds	r3, r1, #1
     faa:	fb03 f101 	mul.w	r1, r3, r1
     fae:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
     fb0:	fb01 f303 	mul.w	r3, r1, r3
     fb4:	121b      	asrs	r3, r3, #8
     fb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     fba:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
     fbe:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
     fc0:	05de      	lsls	r6, r3, #23
     fc2:	bf54      	ite	pl
     fc4:	b2db      	uxtbpl	r3, r3
     fc6:	23ff      	movmi	r3, #255	; 0xff
     fc8:	ebcc 0c03 	rsb	ip, ip, r3
     fcc:	fa5f fc8c 	uxtb.w	ip, ip
		int this_bright = qsuba(cubicwave8((k * all_freq) + this_phase), this_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
		int that_bright = qsuba(cubicwave8((k * all_freq) + 128 + that_phase), that_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
     fd0:	3a80      	subs	r2, #128	; 0x80
     fd2:	4496      	add	lr, r2
     fd4:	fa5f fe8e 	uxtb.w	lr, lr
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
     fd8:	fa4f f28e 	sxtb.w	r2, lr
     fdc:	2a00      	cmp	r2, #0
        in = 255 - in;
     fde:	bfba      	itte	lt
     fe0:	ea6f 030e 	mvnlt.w	r3, lr
     fe4:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
     fe6:	4673      	movge	r3, lr
     fe8:	005b      	lsls	r3, r3, #1
     fea:	b2db      	uxtb	r3, r3
     fec:	1c59      	adds	r1, r3, #1
     fee:	fb01 f303 	mul.w	r3, r1, r3
     ff2:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
     ff4:	fb03 f101 	mul.w	r1, r3, r1
     ff8:	1209      	asrs	r1, r1, #8
     ffa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ffe:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    1002:	9b01      	ldr	r3, [sp, #4]
    1004:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    1006:	05c8      	lsls	r0, r1, #23
    1008:	7818      	ldrb	r0, [r3, #0]

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    100a:	bf54      	ite	pl
    100c:	b2c9      	uxtbpl	r1, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    100e:	21ff      	movmi	r1, #255	; 0xff
    1010:	4288      	cmp	r0, r1
    1012:	f080 8087 	bcs.w	1124 <two_sin()+0x200>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    1016:	2a00      	cmp	r2, #0
        in = 255 - in;
    1018:	bfbc      	itt	lt
    101a:	ea6f 0e0e 	mvnlt.w	lr, lr
    101e:	fa5f fe8e 	uxtblt.w	lr, lr
    1022:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    1026:	fa5f fe8e 	uxtb.w	lr, lr
    102a:	f10e 0301 	add.w	r3, lr, #1
    102e:	fb03 fe0e 	mul.w	lr, r3, lr
    1032:	ea4f 2e2e 	mov.w	lr, lr, asr #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    1036:	fb0e f303 	mul.w	r3, lr, r3
    103a:	121b      	asrs	r3, r3, #8
    103c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    1040:	ebae 0343 	sub.w	r3, lr, r3, lsl #1
    1044:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    1046:	05da      	lsls	r2, r3, #23
    1048:	bf54      	ite	pl
    104a:	b2db      	uxtbpl	r3, r3
    104c:	23ff      	movmi	r3, #255	; 0xff
    104e:	1a1b      	subs	r3, r3, r0
    1050:	b2de      	uxtb	r6, r3

		leds[k] = CHSV(this_hue, this_sat, this_bright);                              // Assigning hues and brightness to the led array.
    1052:	7822      	ldrb	r2, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1054:	f88d c016 	strb.w	ip, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1058:	4649      	mov	r1, r9
    105a:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    105c:	f88d 2015 	strb.w	r2, [sp, #21]
    1060:	f88d b014 	strb.w	fp, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1064:	f003 fad4 	bl	4610 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1068:	782a      	ldrb	r2, [r5, #0]
		leds[k] += CHSV(that_hue, this_sat, that_bright);
    106a:	f894 e000 	ldrb.w	lr, [r4]
    106e:	f88d 2010 	strb.w	r2, [sp, #16]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1072:	a905      	add	r1, sp, #20
    1074:	a804      	add	r0, sp, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1076:	f88d 6012 	strb.w	r6, [sp, #18]
    107a:	f88d e011 	strb.w	lr, [sp, #17]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    107e:	f003 fac7 	bl	4610 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    1082:	f899 3000 	ldrb.w	r3, [r9]
    1086:	f89d 2014 	ldrb.w	r2, [sp, #20]
    108a:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    108e:	f889 3000 	strb.w	r3, [r9]
    1092:	f899 2001 	ldrb.w	r2, [r9, #1]
    1096:	f89d 3015 	ldrb.w	r3, [sp, #21]
    109a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    109e:	f889 2001 	strb.w	r2, [r9, #1]
    10a2:	f899 3002 	ldrb.w	r3, [r9, #2]
    10a6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    10aa:	fa83 f352 	uqadd8	r3, r3, r2
	else { this_phase -= this_speed; that_phase -= that_speed; }

	this_hue += this_rot;                                                // Hue rotation is fun for this_wave.
	that_hue += that_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < NUM_LEDS - 1; k++) {
    10ae:	f10a 0a01 	add.w	sl, sl, #1
    10b2:	f1ba 0fbb 	cmp.w	sl, #187	; 0xbb
        b = qadd8( b, rhs.b);
    10b6:	f889 3002 	strb.w	r3, [r9, #2]
    10ba:	f109 0903 	add.w	r9, r9, #3
    10be:	d033      	beq.n	1128 <two_sin()+0x204>
    10c0:	9b02      	ldr	r3, [sp, #8]
    10c2:	6839      	ldr	r1, [r7, #0]
    10c4:	f8d8 2000 	ldr.w	r2, [r8]
    10c8:	f893 b000 	ldrb.w	fp, [r3]
		int this_bright = qsuba(cubicwave8((k * all_freq) + this_phase), this_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    10cc:	9b03      	ldr	r3, [sp, #12]
    10ce:	f893 e000 	ldrb.w	lr, [r3]
    10d2:	fb1e fe0a 	smulbb	lr, lr, sl
    10d6:	fa5f fe8e 	uxtb.w	lr, lr
    10da:	4471      	add	r1, lr
    10dc:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    10de:	b248      	sxtb	r0, r1
    10e0:	2800      	cmp	r0, #0
        in = 255 - in;
    10e2:	bfba      	itte	lt
    10e4:	43cb      	mvnlt	r3, r1
    10e6:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    10e8:	460b      	movge	r3, r1
    10ea:	005b      	lsls	r3, r3, #1
    10ec:	b2db      	uxtb	r3, r3
    10ee:	f103 0c01 	add.w	ip, r3, #1
    10f2:	fb0c f303 	mul.w	r3, ip, r3
    10f6:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    10f8:	fb03 fc0c 	mul.w	ip, r3, ip
    10fc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
    1100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1104:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
    1108:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    110a:	05de      	lsls	r6, r3, #23
    110c:	9e00      	ldr	r6, [sp, #0]
    110e:	f896 c000 	ldrb.w	ip, [r6]

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    1112:	bf54      	ite	pl
    1114:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    1116:	23ff      	movmi	r3, #255	; 0xff
    1118:	459c      	cmp	ip, r3
    111a:	f4ff af3f 	bcc.w	f9c <two_sin()+0x78>
    111e:	f04f 0c00 	mov.w	ip, #0
    1122:	e755      	b.n	fd0 <two_sin()+0xac>
    1124:	2600      	movs	r6, #0
    1126:	e794      	b.n	1052 <two_sin()+0x12e>

		leds[k] = CHSV(this_hue, this_sat, this_bright);                              // Assigning hues and brightness to the led array.
		leds[k] += CHSV(that_hue, this_sat, that_bright);

	}
}
    1128:	b007      	add	sp, #28
    112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
	}
	if (this_dir == 0) { this_phase += this_speed; that_phase += that_speed; }
	else { this_phase -= this_speed; that_phase -= that_speed; }
    112e:	f8d8 4000 	ldr.w	r4, [r8]
    1132:	683e      	ldr	r6, [r7, #0]
    1134:	1aa2      	subs	r2, r4, r2
    1136:	1a30      	subs	r0, r6, r0
    1138:	6038      	str	r0, [r7, #0]
    113a:	f8c8 2000 	str.w	r2, [r8]
    113e:	e718      	b.n	f72 <two_sin()+0x4e>
    1140:	1fff876c 	.word	0x1fff876c
    1144:	1fff8773 	.word	0x1fff8773
    1148:	1fff8763 	.word	0x1fff8763
    114c:	1fff877e 	.word	0x1fff877e
    1150:	1fff877f 	.word	0x1fff877f
    1154:	1fff876d 	.word	0x1fff876d
    1158:	1fff8cc9 	.word	0x1fff8cc9
    115c:	1fff8774 	.word	0x1fff8774
    1160:	1fff94bc 	.word	0x1fff94bc
    1164:	1fff8778 	.word	0x1fff8778
    1168:	1fff92e4 	.word	0x1fff92e4
    116c:	1fff93fc 	.word	0x1fff93fc
    1170:	1fff8761 	.word	0x1fff8761
    1174:	1fff92d4 	.word	0x1fff92d4
    1178:	1fff8dcc 	.word	0x1fff8dcc
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    117c:	f8df a184 	ldr.w	sl, [pc, #388]	; 1304 <two_sin()+0x3e0>
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 240);
		all_freq = random8(1, 9);
		this_hue = random8();
    1180:	4a57      	ldr	r2, [pc, #348]	; (12e0 <two_sin()+0x3bc>)
    1182:	f8ba 3000 	ldrh.w	r3, [sl]
    1186:	9202      	str	r2, [sp, #8]
    1188:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    118c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1190:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1194:	3019      	adds	r0, #25
    1196:	b280      	uxth	r0, r0
    1198:	4616      	mov	r6, r2
    119a:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    119e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    11a2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    11a6:	3219      	adds	r2, #25
    11a8:	b292      	uxth	r2, r2
    11aa:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    11ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    11b2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    11b6:	3719      	adds	r7, #25
    11b8:	b2bf      	uxth	r7, r7
    11ba:	eb07 2e47 	add.w	lr, r7, r7, lsl #9
    11be:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
    11c2:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    11c6:	f10e 0e19 	add.w	lr, lr, #25
    11ca:	fa1f fe8e 	uxth.w	lr, lr
    11ce:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    11d2:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    11d6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    11da:	3119      	adds	r1, #25
    11dc:	b289      	uxth	r1, r1
    11de:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    11e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    11e6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    11ea:	3319      	adds	r3, #25
    11ec:	b29b      	uxth	r3, r3
    11ee:	eb03 2843 	add.w	r8, r3, r3, lsl #9
    11f2:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    11f6:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    11fa:	f108 0819 	add.w	r8, r8, #25
    11fe:	fa1f f888 	uxth.w	r8, r8
    1202:	eb08 2948 	add.w	r9, r8, r8, lsl #9
    1206:	eb08 0989 	add.w	r9, r8, r9, lsl #2
    120a:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    120e:	f109 0919 	add.w	r9, r9, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1212:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1216:	fa1f f989 	uxth.w	r9, r9
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 240);
    121a:	b2db      	uxtb	r3, r3
    121c:	eb09 2c49 	add.w	ip, r9, r9, lsl #9
    1220:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1224:	eb09 0c8c 	add.w	ip, r9, ip, lsl #2
    1228:	111b      	asrs	r3, r3, #4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    122a:	eb08 2818 	add.w	r8, r8, r8, lsr #8
		all_freq = random8(1, 9);
		this_hue = random8();
    122e:	eb09 2919 	add.w	r9, r9, r9, lsr #8
    1232:	f886 9000 	strb.w	r9, [r6]
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 240);
    1236:	f1a3 0b80 	sub.w	fp, r3, #128	; 0x80
    123a:	4e2a      	ldr	r6, [pc, #168]	; (12e4 <two_sin()+0x3c0>)
		all_freq = random8(1, 9);
    123c:	4b2a      	ldr	r3, [pc, #168]	; (12e8 <two_sin()+0x3c4>)
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 240);
    123e:	f886 b000 	strb.w	fp, [r6]
		all_freq = random8(1, 9);
    1242:	f3c8 1842 	ubfx	r8, r8, #5, #3
    1246:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    124a:	f108 0801 	add.w	r8, r8, #1
    124e:	f883 8000 	strb.w	r8, [r3]
    1252:	eb07 2717 	add.w	r7, r7, r7, lsr #8
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
    1256:	fa5f fe8e 	uxtb.w	lr, lr
		this_cutoff = random8();
		that_cutoff = random8(128, 240);
		all_freq = random8(1, 9);
    125a:	9303      	str	r3, [sp, #12]
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 240);
    125c:	9601      	str	r6, [sp, #4]
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
    125e:	4b23      	ldr	r3, [pc, #140]	; (12ec <two_sin()+0x3c8>)
    1260:	4e22      	ldr	r6, [pc, #136]	; (12ec <two_sin()+0x3c8>)
    1262:	9300      	str	r3, [sp, #0]
    1264:	eb01 2111 	add.w	r1, r1, r1, lsr #8
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
    1268:	b2ff      	uxtb	r7, r7
		that_rot = random8(3);
    126a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    126e:	4b20      	ldr	r3, [pc, #128]	; (12f0 <two_sin()+0x3cc>)
		this_cutoff = random8();
    1270:	7031      	strb	r1, [r6, #0]
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
    1272:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    1276:	eb00 2010 	add.w	r0, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    127a:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    127e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
    1282:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    1286:	491b      	ldr	r1, [pc, #108]	; (12f4 <two_sin()+0x3d0>)
		that_rot = random8(3);
    1288:	f883 e000 	strb.w	lr, [r3]
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
    128c:	11ff      	asrs	r7, r7, #7
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
    128e:	f8df e078 	ldr.w	lr, [pc, #120]	; 1308 <two_sin()+0x3e4>
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 240);
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
    1292:	4d19      	ldr	r5, [pc, #100]	; (12f8 <two_sin()+0x3d4>)
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
    1294:	700f      	strb	r7, [r1, #0]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1296:	b2c0      	uxtb	r0, r0
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1298:	f10c 0c19 	add.w	ip, ip, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    129c:	f3c2 1281 	ubfx	r2, r2, #6, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    12a0:	fa1f fc8c 	uxth.w	ip, ip
void two_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
    12a4:	4f15      	ldr	r7, [pc, #84]	; (12fc <two_sin()+0x3d8>)
    12a6:	f8aa c000 	strh.w	ip, [sl]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    12aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    12ae:	3201      	adds	r2, #1
		that_speed = random8(1, 5);
    12b0:	f88e 2000 	strb.w	r2, [lr]
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 240);
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
    12b4:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
bool hue_change;

void two_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
    12b8:	f8df e050 	ldr.w	lr, [pc, #80]	; 130c <two_sin()+0x3e8>
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 240);
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
    12bc:	f885 c000 	strb.w	ip, [r5]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    12c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
void two_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
    12c4:	7038      	strb	r0, [r7, #0]
bool hue_change;

void two_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
    12c6:	f04f 0c0a 	mov.w	ip, #10
		use_palette = 0;
    12ca:	4f0d      	ldr	r7, [pc, #52]	; (1300 <two_sin()+0x3dc>)
bool hue_change;

void two_sin() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
    12cc:	f8ce c000 	str.w	ip, [lr]

bool hue_change;

void two_sin() {
	if (mode_change) {
		mode_change = 0;
    12d0:	f04f 0e00 	mov.w	lr, #0
		this_delay = 10;
		use_palette = 0;
    12d4:	f887 e000 	strb.w	lr, [r7]

bool hue_change;

void two_sin() {
	if (mode_change) {
		mode_change = 0;
    12d8:	f884 e000 	strb.w	lr, [r4]
    12dc:	e639      	b.n	f52 <two_sin()+0x2e>
    12de:	bf00      	nop
    12e0:	1fff8cc9 	.word	0x1fff8cc9
    12e4:	1fff877f 	.word	0x1fff877f
    12e8:	1fff876d 	.word	0x1fff876d
    12ec:	1fff8773 	.word	0x1fff8773
    12f0:	1fff94bc 	.word	0x1fff94bc
    12f4:	1fff8774 	.word	0x1fff8774
    12f8:	1fff8778 	.word	0x1fff8778
    12fc:	1fff8763 	.word	0x1fff8763
    1300:	1fff8764 	.word	0x1fff8764
    1304:	1fff8782 	.word	0x1fff8782
    1308:	1fff877e 	.word	0x1fff877e
    130c:	1fff8768 	.word	0x1fff8768

00001310 <rainbow_march()>:
 * this_dir
 */


void rainbow_march() {
	if (mode_change) {
    1310:	482e      	ldr	r0, [pc, #184]	; (13cc <rainbow_march()+0xbc>)
    1312:	7803      	ldrb	r3, [r0, #0]
 * this_rot
 * this_dir
 */


void rainbow_march() {
    1314:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (mode_change) {
    1316:	b993      	cbnz	r3, 133e <rainbow_march()+0x2e>
    1318:	492d      	ldr	r1, [pc, #180]	; (13d0 <rainbow_march()+0xc0>)
    131a:	4a2e      	ldr	r2, [pc, #184]	; (13d4 <rainbow_march()+0xc4>)
    131c:	4b2e      	ldr	r3, [pc, #184]	; (13d8 <rainbow_march()+0xc8>)
    131e:	7809      	ldrb	r1, [r1, #0]
    1320:	7812      	ldrb	r2, [r2, #0]
    1322:	781b      	ldrb	r3, [r3, #0]
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
    1324:	482d      	ldr	r0, [pc, #180]	; (13dc <rainbow_march()+0xcc>)
    1326:	2900      	cmp	r1, #0
    1328:	d046      	beq.n	13b8 <rainbow_march()+0xa8>
    132a:	7801      	ldrb	r1, [r0, #0]
    132c:	1a8a      	subs	r2, r1, r2
    132e:	b2d2      	uxtb	r2, r2
    1330:	7002      	strb	r2, [r0, #0]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
    1332:	21bc      	movs	r1, #188	; 0xbc
    1334:	482a      	ldr	r0, [pc, #168]	; (13e0 <rainbow_march()+0xd0>)
}
    1336:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
    133a:	f002 bf1b 	b.w	4174 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    133e:	4c29      	ldr	r4, [pc, #164]	; (13e4 <rainbow_march()+0xd4>)
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
    1340:	4f25      	ldr	r7, [pc, #148]	; (13d8 <rainbow_march()+0xc8>)
    1342:	8823      	ldrh	r3, [r4, #0]

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
    1344:	4d22      	ldr	r5, [pc, #136]	; (13d0 <rainbow_march()+0xc0>)
		this_rot = random8(1, 5);
    1346:	4e23      	ldr	r6, [pc, #140]	; (13d4 <rainbow_march()+0xc4>)
    1348:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    134c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1350:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    1354:	3119      	adds	r1, #25
    1356:	b289      	uxth	r1, r1
    1358:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    135c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1360:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1364:	3319      	adds	r3, #25
    1366:	b29b      	uxth	r3, r3
    1368:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    136c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1370:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    1374:	3219      	adds	r2, #25
    1376:	fa1f fe82 	uxth.w	lr, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    137a:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    137e:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1382:	f3c3 1381 	ubfx	r3, r3, #6, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1386:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    138a:	3301      	adds	r3, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    138c:	f8a4 e000 	strh.w	lr, [r4]
		this_diff = random8(1, 5);
    1390:	703b      	strb	r3, [r7, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1392:	f3c2 1281 	ubfx	r2, r2, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1396:	f3c1 11c0 	ubfx	r1, r1, #7, #1


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    139a:	f8df e050 	ldr.w	lr, [pc, #80]	; 13ec <rainbow_march()+0xdc>
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
    139e:	4f12      	ldr	r7, [pc, #72]	; (13e8 <rainbow_march()+0xd8>)

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
    13a0:	7029      	strb	r1, [r5, #0]
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
    13a2:	2400      	movs	r4, #0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    13a4:	3201      	adds	r2, #1
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
    13a6:	250a      	movs	r5, #10
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
    13a8:	7004      	strb	r4, [r0, #0]
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
    13aa:	7032      	strb	r2, [r6, #0]


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    13ac:	f88e 4000 	strb.w	r4, [lr]
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
    13b0:	603d      	str	r5, [r7, #0]
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
    13b2:	480a      	ldr	r0, [pc, #40]	; (13dc <rainbow_march()+0xcc>)
    13b4:	2900      	cmp	r1, #0
    13b6:	d1b8      	bne.n	132a <rainbow_march()+0x1a>
    13b8:	7801      	ldrb	r1, [r0, #0]
    13ba:	440a      	add	r2, r1
    13bc:	b2d2      	uxtb	r2, r2
    13be:	7002      	strb	r2, [r0, #0]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
    13c0:	21bc      	movs	r1, #188	; 0xbc
    13c2:	4807      	ldr	r0, [pc, #28]	; (13e0 <rainbow_march()+0xd0>)
}
    13c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
    13c8:	f002 bed4 	b.w	4174 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    13cc:	1fff876c 	.word	0x1fff876c
    13d0:	1fff92e4 	.word	0x1fff92e4
    13d4:	1fff8774 	.word	0x1fff8774
    13d8:	1fff8762 	.word	0x1fff8762
    13dc:	1fff9241 	.word	0x1fff9241
    13e0:	1fff8dcc 	.word	0x1fff8dcc
    13e4:	1fff8782 	.word	0x1fff8782
    13e8:	1fff8768 	.word	0x1fff8768
    13ec:	1fff8764 	.word	0x1fff8764

000013f0 <rainbow_split()>:
}

void rainbow_split(){
  if (mode_change){
    13f0:	4932      	ldr	r1, [pc, #200]	; (14bc <rainbow_split()+0xcc>)
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
}

void rainbow_split(){
    13f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (mode_change){
    13f4:	780b      	ldrb	r3, [r1, #0]
    13f6:	bb33      	cbnz	r3, 1446 <rainbow_split()+0x56>
    13f8:	4931      	ldr	r1, [pc, #196]	; (14c0 <rainbow_split()+0xd0>)
    13fa:	4a32      	ldr	r2, [pc, #200]	; (14c4 <rainbow_split()+0xd4>)
    13fc:	4b32      	ldr	r3, [pc, #200]	; (14c8 <rainbow_split()+0xd8>)
    13fe:	780f      	ldrb	r7, [r1, #0]
    1400:	7812      	ldrb	r2, [r2, #0]
    1402:	781b      	ldrb	r3, [r3, #0]
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
    1404:	4831      	ldr	r0, [pc, #196]	; (14cc <rainbow_split()+0xdc>)
    1406:	7801      	ldrb	r1, [r0, #0]
    1408:	b9cf      	cbnz	r7, 143e <rainbow_split()+0x4e>
    140a:	440a      	add	r2, r1
    140c:	b2d2      	uxtb	r2, r2
    140e:	7002      	strb	r2, [r0, #0]
  fill_rainbow(leds, NUM_LEDS/2, this_index, this_diff); // 0 - 71
    1410:	482f      	ldr	r0, [pc, #188]	; (14d0 <rainbow_split()+0xe0>)
    1412:	215e      	movs	r1, #94	; 0x5e
    1414:	f002 feae 	bl	4174 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    1418:	4b2d      	ldr	r3, [pc, #180]	; (14d0 <rainbow_split()+0xe0>)
    141a:	f503 708d 	add.w	r0, r3, #282	; 0x11a
    141e:	461a      	mov	r2, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1420:	7819      	ldrb	r1, [r3, #0]
    1422:	f882 1231 	strb.w	r1, [r2, #561]	; 0x231
        g = rhs.g;
    1426:	7859      	ldrb	r1, [r3, #1]
    1428:	f882 1232 	strb.w	r1, [r2, #562]	; 0x232
        b = rhs.b;
    142c:	7899      	ldrb	r1, [r3, #2]
    142e:	f882 1233 	strb.w	r1, [r2, #563]	; 0x233
    1432:	3303      	adds	r3, #3
  for (int i = 0; i < NUM_LEDS/2; i++){
    1434:	4283      	cmp	r3, r0
    1436:	f1a2 0203 	sub.w	r2, r2, #3
    143a:	d1f1      	bne.n	1420 <rainbow_split()+0x30>
    leds[NUM_LEDS - 1 - i] = leds[i];
  }
    
}
    143c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
    143e:	1a8a      	subs	r2, r1, r2
    1440:	b2d2      	uxtb	r2, r2
    1442:	7002      	strb	r2, [r0, #0]
    1444:	e7e4      	b.n	1410 <rainbow_split()+0x20>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1446:	4823      	ldr	r0, [pc, #140]	; (14d4 <rainbow_split()+0xe4>)
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    1448:	4e1f      	ldr	r6, [pc, #124]	; (14c8 <rainbow_split()+0xd8>)
    144a:	8803      	ldrh	r3, [r0, #0]

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    144c:	4c1c      	ldr	r4, [pc, #112]	; (14c0 <rainbow_split()+0xd0>)
    this_rot = random8(1,5);
    144e:	4d1d      	ldr	r5, [pc, #116]	; (14c4 <rainbow_split()+0xd4>)
    1450:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1454:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1458:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    145c:	3219      	adds	r2, #25
    145e:	b292      	uxth	r2, r2
    1460:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    1464:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1468:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    146c:	3319      	adds	r3, #25
    146e:	b29b      	uxth	r3, r3
    1470:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    1474:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    1478:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    147c:	3719      	adds	r7, #25
    147e:	fa1f fe87 	uxth.w	lr, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1482:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    1486:	eb02 2712 	add.w	r7, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    148a:	f3c3 1281 	ubfx	r2, r3, #6, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    148e:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1492:	f3c3 1381 	ubfx	r3, r3, #6, #2
    1496:	3301      	adds	r3, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1498:	f8a0 e000 	strh.w	lr, [r0]
    this_diff = random8(1,5);
    149c:	7033      	strb	r3, [r6, #0]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    149e:	f3c7 17c0 	ubfx	r7, r7, #7, #1
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    14a2:	f8df e038 	ldr.w	lr, [pc, #56]	; 14dc <rainbow_split()+0xec>
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
    14a6:	4e0c      	ldr	r6, [pc, #48]	; (14d8 <rainbow_split()+0xe8>)

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    14a8:	7027      	strb	r7, [r4, #0]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    14aa:	2000      	movs	r0, #0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    14ac:	3201      	adds	r2, #1
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
    14ae:	240f      	movs	r4, #15
void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    14b0:	702a      	strb	r2, [r5, #0]
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    14b2:	f88e 0000 	strb.w	r0, [lr]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    14b6:	7008      	strb	r0, [r1, #0]
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
    14b8:	6034      	str	r4, [r6, #0]
    14ba:	e7a3      	b.n	1404 <rainbow_split()+0x14>
    14bc:	1fff876c 	.word	0x1fff876c
    14c0:	1fff92e4 	.word	0x1fff92e4
    14c4:	1fff8774 	.word	0x1fff8774
    14c8:	1fff8762 	.word	0x1fff8762
    14cc:	1fff9241 	.word	0x1fff9241
    14d0:	1fff8dcc 	.word	0x1fff8dcc
    14d4:	1fff8782 	.word	0x1fff8782
    14d8:	1fff8768 	.word	0x1fff8768
    14dc:	1fff8764 	.word	0x1fff8764

000014e0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
    14e0:	b508      	push	{r3, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
    14e2:	2101      	movs	r1, #1
    14e4:	2007      	movs	r0, #7
    14e6:	f003 fd0b 	bl	4f00 <pinMode>
    14ea:	2101      	movs	r1, #1
    14ec:	200e      	movs	r0, #14
    14ee:	f003 fd07 	bl	4f00 <pinMode>
		// set the pins to output
		FastPin<_DATA_PIN>::setOutput();
		FastPin<_CLOCK_PIN>::setOutput();

		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
    14f2:	4a0b      	ldr	r2, [pc, #44]	; (1520 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x40>)
    14f4:	6813      	ldr	r3, [r2, #0]
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
    14f6:	04d9      	lsls	r1, r3, #19
    14f8:	d405      	bmi.n	1506 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x26>
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
    14fa:	490a      	ldr	r1, [pc, #40]	; (1524 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
    14fc:	480a      	ldr	r0, [pc, #40]	; (1528 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x48>)
		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
    14fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1502:	6013      	str	r3, [r2, #0]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
    1504:	60c8      	str	r0, [r1, #12]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
			}
		}

		// Configure SPI as the master and enable
		SPIX.MCR |= SPI_MCR_MSTR; // | SPI_MCR_CONT_SCKE);
    1506:	4a07      	ldr	r2, [pc, #28]	; (1524 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
    1508:	6813      	ldr	r3, [r2, #0]
    150a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    150e:	6013      	str	r3, [r2, #0]
		SPIX.MCR &= ~(SPI_MCR_MDIS | SPI_MCR_HALT);
    1510:	6813      	ldr	r3, [r2, #0]
    1512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1516:	f023 0301 	bic.w	r3, r3, #1
    151a:	6013      	str	r3, [r2, #0]
    151c:	bd08      	pop	{r3, pc}
    151e:	bf00      	nop
    1520:	4004803c 	.word	0x4004803c
    1524:	4002c000 	.word	0x4002c000
    1528:	38010001 	.word	0x38010001

0000152c <juggle_pal_onedir()>:
	}
} // juggle_pal()



void juggle_pal_onedir() {
    152c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1530:	4998      	ldr	r1, [pc, #608]	; (1794 <juggle_pal_onedir()+0x268>)
    1532:	780b      	ldrb	r3, [r1, #0]
	}
} // juggle_pal()



void juggle_pal_onedir() {
    1534:	b087      	sub	sp, #28
	if (mode_change) {
    1536:	2b00      	cmp	r3, #0
    1538:	f000 811c 	beq.w	1774 <juggle_pal_onedir()+0x248>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    153c:	4c96      	ldr	r4, [pc, #600]	; (1798 <juggle_pal_onedir()+0x26c>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
    153e:	f8df a28c 	ldr.w	sl, [pc, #652]	; 17cc <juggle_pal_onedir()+0x2a0>
    1542:	8823      	ldrh	r3, [r4, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1544:	f8df b288 	ldr.w	fp, [pc, #648]	; 17d0 <juggle_pal_onedir()+0x2a4>


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1548:	f8df 8288 	ldr.w	r8, [pc, #648]	; 17d4 <juggle_pal_onedir()+0x2a8>
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    154c:	f8df 9288 	ldr.w	r9, [pc, #648]	; 17d8 <juggle_pal_onedir()+0x2ac>
    1550:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    1554:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1558:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    155c:	3019      	adds	r0, #25
    155e:	b280      	uxth	r0, r0
    1560:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    1564:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    1568:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    156c:	3319      	adds	r3, #25
    156e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1572:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1576:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    157a:	3319      	adds	r3, #25
    157c:	b29b      	uxth	r3, r3
    157e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1582:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1586:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    158a:	3219      	adds	r2, #25
    158c:	b292      	uxth	r2, r2
    158e:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    1592:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    1596:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    159a:	3619      	adds	r6, #25
    159c:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    159e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    15a2:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    15a6:	f3c0 1081 	ubfx	r0, r0, #6, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    15aa:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    15ae:	3002      	adds	r0, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    15b0:	fa5f fe85 	uxtb.w	lr, r5
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    15b4:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    15b6:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
/// Generate an 8-bit random number in the given range
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    15ba:	25ff      	movs	r5, #255	; 0xff
    15bc:	fb95 f5f0 	sdiv	r5, r5, r0
    15c0:	3d01      	subs	r5, #1
    uint8_t r = random8(delta) + min;
    15c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    15c6:	eb06 068c 	add.w	r6, r6, ip, lsl #2
/// Generate an 8-bit random number in the given range
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    15ca:	b2ed      	uxtb	r5, r5
    uint8_t r = random8(delta) + min;
    15cc:	111b      	asrs	r3, r3, #4
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
    15ce:	fb1e f505 	smulbb	r5, lr, r5
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    15d2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    15d6:	eb02 2712 	add.w	r7, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    15da:	3619      	adds	r6, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    15dc:	f103 0210 	add.w	r2, r3, #16
    15e0:	122b      	asrs	r3, r5, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    15e2:	8026      	strh	r6, [r4, #0]
    15e4:	3301      	adds	r3, #1
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    15e6:	4c6d      	ldr	r4, [pc, #436]	; (179c <juggle_pal_onedir()+0x270>)
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
    15e8:	f88a 3000 	strb.w	r3, [sl]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    15ec:	f3c7 1703 	ubfx	r7, r7, #4, #4
    15f0:	1d3d      	adds	r5, r7, #4

void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    15f2:	4b6b      	ldr	r3, [pc, #428]	; (17a0 <juggle_pal_onedir()+0x274>)
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    15f4:	f88b 5000 	strb.w	r5, [fp]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    15f8:	b2d2      	uxtb	r2, r2
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    15fa:	7022      	strb	r2, [r4, #0]
void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
    15fc:	4d69      	ldr	r5, [pc, #420]	; (17a4 <juggle_pal_onedir()+0x278>)
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    this_delay =10; 
    15fe:	4c6a      	ldr	r4, [pc, #424]	; (17a8 <juggle_pal_onedir()+0x27c>)


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1600:	f888 0000 	strb.w	r0, [r8]
		use_palette = 1;
    1604:	2001      	movs	r0, #1
    1606:	7018      	strb	r0, [r3, #0]



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
    1608:	2300      	movs	r3, #0
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    this_delay =10; 
    160a:	200a      	movs	r0, #10
void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
    160c:	702b      	strb	r3, [r5, #0]



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
    160e:	700b      	strb	r3, [r1, #0]
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    1610:	f889 3000 	strb.w	r3, [r9]
    this_delay =10; 
    1614:	6020      	str	r0, [r4, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    1616:	21bc      	movs	r1, #188	; 0xbc
    1618:	4864      	ldr	r0, [pc, #400]	; (17ac <juggle_pal_onedir()+0x280>)
    161a:	f002 fe5d 	bl	42d8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	for (int i = 0; i < numdots; i++) {
    161e:	f898 3000 	ldrb.w	r3, [r8]
    1622:	2b00      	cmp	r3, #0
    1624:	f000 80a3 	beq.w	176e <juggle_pal_onedir()+0x242>
    1628:	4f61      	ldr	r7, [pc, #388]	; (17b0 <juggle_pal_onedir()+0x284>)
    162a:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 17d0 <juggle_pal_onedir()+0x2a4>
    162e:	783a      	ldrb	r2, [r7, #0]
    1630:	f8df a198 	ldr.w	sl, [pc, #408]	; 17cc <juggle_pal_onedir()+0x2a0>
    1634:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 17d8 <juggle_pal_onedir()+0x2ac>
    1638:	4e5c      	ldr	r6, [pc, #368]	; (17ac <juggle_pal_onedir()+0x280>)
    163a:	2500      	movs	r5, #0
    163c:	e060      	b.n	1700 <juggle_pal_onedir()+0x1d4>
		if (!this_dir) {
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    163e:	f89b 1000 	ldrb.w	r1, [fp]
    1642:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1644:	495b      	ldr	r1, [pc, #364]	; (17b4 <juggle_pal_onedir()+0x288>)
    1646:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    164a:	6809      	ldr	r1, [r1, #0]
    164c:	9104      	str	r1, [sp, #16]
    164e:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1650:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1652:	9804      	ldr	r0, [sp, #16]
    1654:	bf98      	it	ls
    1656:	021b      	lslls	r3, r3, #8
uint8_t ball_hue = 0;
*/
LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1658:	f44f 718c 	mov.w	r1, #280	; 0x118
    165c:	bf98      	it	ls
    165e:	b29b      	uxthls	r3, r3
    1660:	fb01 f000 	mul.w	r0, r1, r0
    1664:	fb03 f000 	mul.w	r0, r3, r0
    1668:	f3c0 400e 	ubfx	r0, r0, #16, #15
    166c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1670:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1672:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1676:	d503      	bpl.n	1680 <juggle_pal_onedir()+0x154>
    1678:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    167c:	3307      	adds	r3, #7
    167e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1680:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1684:	f3c3 0146 	ubfx	r1, r3, #1, #7
    1688:	4b4b      	ldr	r3, [pc, #300]	; (17b8 <juggle_pal_onedir()+0x28c>)
    168a:	f813 400e 	ldrb.w	r4, [r3, lr]
    168e:	4b4b      	ldr	r3, [pc, #300]	; (17bc <juggle_pal_onedir()+0x290>)
    1690:	f833 301e 	ldrh.w	r3, [r3, lr, lsl #1]
    1694:	fb04 3301 	mla	r3, r4, r1, r3
    1698:	b29c      	uxth	r4, r3

    if( theta & 0x8000 ) y = -y;
    169a:	0403      	lsls	r3, r0, #16
    169c:	d465      	bmi.n	176a <juggle_pal_onedir()+0x23e>
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    169e:	4948      	ldr	r1, [pc, #288]	; (17c0 <juggle_pal_onedir()+0x294>)
    16a0:	4b48      	ldr	r3, [pc, #288]	; (17c4 <juggle_pal_onedir()+0x298>)
    16a2:	7809      	ldrb	r1, [r1, #0]
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	9100      	str	r1, [sp, #0]
    16a8:	b224      	sxth	r4, r4
    16aa:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
    16ae:	21bc      	movs	r1, #188	; 0xbc
    16b0:	b2a4      	uxth	r4, r4
    16b2:	fb01 f404 	mul.w	r4, r1, r4
    16b6:	0c24      	lsrs	r4, r4, #16


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    16b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    16bc:	4942      	ldr	r1, [pc, #264]	; (17c8 <juggle_pal_onedir()+0x29c>)
    16be:	a803      	add	r0, sp, #12
    16c0:	f002 fe5c 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    16c4:	1931      	adds	r1, r6, r4
    16c6:	5d33      	ldrb	r3, [r6, r4]
    16c8:	f89d 200c 	ldrb.w	r2, [sp, #12]
    16cc:	fa83 f352 	uqadd8	r3, r3, r2
    16d0:	5533      	strb	r3, [r6, r4]
    16d2:	784a      	ldrb	r2, [r1, #1]
    16d4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    16d8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    16dc:	704a      	strb	r2, [r1, #1]
    16de:	788b      	ldrb	r3, [r1, #2]
    16e0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    16e4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    16e8:	708b      	strb	r3, [r1, #2]
		}
		this_index += this_diff;
    16ea:	7839      	ldrb	r1, [r7, #0]
    16ec:	f89a 2000 	ldrb.w	r2, [sl]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    16f0:	f898 3000 	ldrb.w	r3, [r8]
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		this_index += this_diff;
    16f4:	440a      	add	r2, r1
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    16f6:	3501      	adds	r5, #1
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		this_index += this_diff;
    16f8:	b2d2      	uxtb	r2, r2
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    16fa:	42ab      	cmp	r3, r5
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		this_index += this_diff;
    16fc:	703a      	strb	r2, [r7, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    16fe:	dd36      	ble.n	176e <juggle_pal_onedir()+0x242>
		if (!this_dir) {
    1700:	f899 1000 	ldrb.w	r1, [r9]
    1704:	2900      	cmp	r1, #0
    1706:	d09a      	beq.n	163e <juggle_pal_onedir()+0x112>
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1708:	f89b 1000 	ldrb.w	r1, [fp]
    170c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    170e:	4929      	ldr	r1, [pc, #164]	; (17b4 <juggle_pal_onedir()+0x288>)
    1710:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    1714:	6809      	ldr	r1, [r1, #0]
    1716:	9105      	str	r1, [sp, #20]
    1718:	b29b      	uxth	r3, r3
    171a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    171c:	9905      	ldr	r1, [sp, #20]
    171e:	bf98      	it	ls
    1720:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1722:	f44f 708c 	mov.w	r0, #280	; 0x118
    1726:	fb00 f101 	mul.w	r1, r0, r1
    172a:	bf98      	it	ls
    172c:	b29b      	uxthls	r3, r3
    172e:	fb03 f301 	mul.w	r3, r3, r1
    1732:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1736:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    173a:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    173c:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    173e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1742:	d503      	bpl.n	174c <juggle_pal_onedir()+0x220>
    1744:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1748:	3107      	adds	r1, #7
    174a:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    174c:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1750:	f3c1 0046 	ubfx	r0, r1, #1, #7
    1754:	4918      	ldr	r1, [pc, #96]	; (17b8 <juggle_pal_onedir()+0x28c>)
    1756:	f811 400e 	ldrb.w	r4, [r1, lr]
    175a:	4918      	ldr	r1, [pc, #96]	; (17bc <juggle_pal_onedir()+0x290>)
    175c:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]

    if( theta & 0x8000 ) y = -y;
    1760:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1762:	fb04 1100 	mla	r1, r4, r0, r1
    1766:	b28c      	uxth	r4, r1

    if( theta & 0x8000 ) y = -y;
    1768:	d599      	bpl.n	169e <juggle_pal_onedir()+0x172>
    176a:	4264      	negs	r4, r4
    176c:	e797      	b.n	169e <juggle_pal_onedir()+0x172>
		}
		this_index += this_diff;
	}
} // 
    176e:	b007      	add	sp, #28
    1770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    this_delay =10; 
	}
	if (reset_juggle_index) {
    1774:	4a0b      	ldr	r2, [pc, #44]	; (17a4 <juggle_pal_onedir()+0x278>)
    1776:	7812      	ldrb	r2, [r2, #0]
    1778:	b132      	cbz	r2, 1788 <juggle_pal_onedir()+0x25c>
    177a:	4a08      	ldr	r2, [pc, #32]	; (179c <juggle_pal_onedir()+0x270>)
		this_index = 0;
    177c:	490c      	ldr	r1, [pc, #48]	; (17b0 <juggle_pal_onedir()+0x284>)
    177e:	7812      	ldrb	r2, [r2, #0]
    1780:	f8df 8050 	ldr.w	r8, [pc, #80]	; 17d4 <juggle_pal_onedir()+0x2a8>
    1784:	700b      	strb	r3, [r1, #0]
    1786:	e746      	b.n	1616 <juggle_pal_onedir()+0xea>
    1788:	4b04      	ldr	r3, [pc, #16]	; (179c <juggle_pal_onedir()+0x270>)
    178a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 17d4 <juggle_pal_onedir()+0x2a8>
    178e:	781a      	ldrb	r2, [r3, #0]
    1790:	e741      	b.n	1616 <juggle_pal_onedir()+0xea>
    1792:	bf00      	nop
    1794:	1fff876c 	.word	0x1fff876c
    1798:	1fff8782 	.word	0x1fff8782
    179c:	1fff8760 	.word	0x1fff8760
    17a0:	1fff8764 	.word	0x1fff8764
    17a4:	1fff92e5 	.word	0x1fff92e5
    17a8:	1fff8768 	.word	0x1fff8768
    17ac:	1fff8dcc 	.word	0x1fff8dcc
    17b0:	1fff9241 	.word	0x1fff9241
    17b4:	1fff9668 	.word	0x1fff9668
    17b8:	00007da0 	.word	0x00007da0
    17bc:	00008780 	.word	0x00008780
    17c0:	1fff92e0 	.word	0x1fff92e0
    17c4:	1fff876f 	.word	0x1fff876f
    17c8:	1fff910c 	.word	0x1fff910c
    17cc:	1fff8762 	.word	0x1fff8762
    17d0:	1fff877d 	.word	0x1fff877d
    17d4:	1fff877c 	.word	0x1fff877c
    17d8:	1fff92e4 	.word	0x1fff92e4

000017dc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    17dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17de:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    17e0:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    17e2:	6805      	ldr	r5, [r0, #0]
    17e4:	f88d 3004 	strb.w	r3, [sp, #4]
    17e8:	f88d 3005 	strb.w	r3, [sp, #5]
    17ec:	f88d 3006 	strb.w	r3, [sp, #6]
    17f0:	682e      	ldr	r6, [r5, #0]
    17f2:	4a37      	ldr	r2, [pc, #220]	; (18d0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    17f4:	f88d 3008 	strb.w	r3, [sp, #8]
    17f8:	4296      	cmp	r6, r2
    17fa:	f88d 3009 	strb.w	r3, [sp, #9]
    17fe:	f88d 300a 	strb.w	r3, [sp, #10]
    1802:	d15f      	bne.n	18c4 <CLEDController::clearLeds(int)+0xe8>
    1804:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    1806:	9104      	str	r1, [sp, #16]
    1808:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    180a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    180c:	a801      	add	r0, sp, #4
    180e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1810:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
    1814:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
    1818:	f88d 3020 	strb.w	r3, [sp, #32]
    181c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    181e:	d015      	beq.n	184c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    1820:	f88d 301d 	strb.w	r3, [sp, #29]
    1824:	f88d 301c 	strb.w	r3, [sp, #28]
    1828:	f88d 301b 	strb.w	r3, [sp, #27]
    182c:	f88d 301a 	strb.w	r3, [sp, #26]
    1830:	f88d 3019 	strb.w	r3, [sp, #25]
    1834:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1838:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    183a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    183c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1840:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1842:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1844:	a903      	add	r1, sp, #12
    1846:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    1848:	b00b      	add	sp, #44	; 0x2c
    184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    184c:	4a21      	ldr	r2, [pc, #132]	; (18d4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    184e:	7813      	ldrb	r3, [r2, #0]
    1850:	3301      	adds	r3, #1
    1852:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1856:	f013 0f01 	tst.w	r3, #1
    185a:	bf14      	ite	ne
    185c:	2180      	movne	r1, #128	; 0x80
    185e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1860:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1862:	079a      	lsls	r2, r3, #30
    1864:	bf44      	itt	mi
    1866:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    186a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
    186c:	075b      	lsls	r3, r3, #29
    186e:	bf48      	it	mi
    1870:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1874:	3110      	adds	r1, #16
    1876:	2200      	movs	r2, #0
    1878:	b2c9      	uxtb	r1, r1
    187a:	f10d 031b 	add.w	r3, sp, #27
    187e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1882:	f44f 7e80 	mov.w	lr, #256	; 0x100
    1886:	b1aa      	cbz	r2, 18b4 <CLEDController::clearLeds(int)+0xd8>
    1888:	fb9e f2f2 	sdiv	r2, lr, r2
    188c:	b2d2      	uxtb	r2, r2
    188e:	1c50      	adds	r0, r2, #1
    1890:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1892:	fb00 1501 	mla	r5, r0, r1, r1
    1896:	122d      	asrs	r5, r5, #8
    1898:	7018      	strb	r0, [r3, #0]
    189a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    189c:	b105      	cbz	r5, 18a0 <CLEDController::clearLeds(int)+0xc4>
    189e:	3e01      	subs	r6, #1
    18a0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    18a4:	b100      	cbz	r0, 18a8 <CLEDController::clearLeds(int)+0xcc>
    18a6:	701a      	strb	r2, [r3, #0]
    18a8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    18aa:	429f      	cmp	r7, r3
    18ac:	d008      	beq.n	18c0 <CLEDController::clearLeds(int)+0xe4>
    18ae:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    18b0:	2a00      	cmp	r2, #0
    18b2:	d1e9      	bne.n	1888 <CLEDController::clearLeds(int)+0xac>
    18b4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    18b6:	f803 2c03 	strb.w	r2, [r3, #-3]
    18ba:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    18bc:	429f      	cmp	r7, r3
    18be:	d1f6      	bne.n	18ae <CLEDController::clearLeds(int)+0xd2>
    18c0:	6825      	ldr	r5, [r4, #0]
    18c2:	e7b9      	b.n	1838 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    18c4:	460a      	mov	r2, r1
    18c6:	ab02      	add	r3, sp, #8
    18c8:	a901      	add	r1, sp, #4
    18ca:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    18cc:	b00b      	add	sp, #44	; 0x2c
    18ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18d0:	00001f95 	.word	0x00001f95
    18d4:	1fff8c88 	.word	0x1fff8c88

000018d8 <juggle_pal()>:
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    18d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    18dc:	4975      	ldr	r1, [pc, #468]	; (1ab4 <juggle_pal()+0x1dc>)
    18de:	780b      	ldrb	r3, [r1, #0]
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    18e0:	b085      	sub	sp, #20
	if (mode_change) {
    18e2:	2b00      	cmp	r3, #0
    18e4:	f000 80d7 	beq.w	1a96 <juggle_pal()+0x1be>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    18e8:	4873      	ldr	r0, [pc, #460]	; (1ab8 <juggle_pal()+0x1e0>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    18ea:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 1ae8 <juggle_pal()+0x210>
    18ee:	8803      	ldrh	r3, [r0, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    18f0:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 1aec <juggle_pal()+0x214>
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    18f4:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 1af0 <juggle_pal()+0x218>
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    18f8:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 1ae4 <juggle_pal()+0x20c>
    18fc:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    1900:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1904:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    1908:	3419      	adds	r4, #25
    190a:	b2a4      	uxth	r4, r4
    190c:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    1910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1914:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1918:	3319      	adds	r3, #25
    191a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    191e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1922:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1926:	3319      	adds	r3, #25
    1928:	b29b      	uxth	r3, r3
    192a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    192e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    1932:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    1936:	3619      	adds	r6, #25
    1938:	b2b6      	uxth	r6, r6
    193a:	eb06 2546 	add.w	r5, r6, r6, lsl #9
    193e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1942:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    1946:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1948:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    194c:	b2ad      	uxth	r5, r5
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    194e:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1950:	eb04 2414 	add.w	r4, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1954:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1958:	f3c4 1481 	ubfx	r4, r4, #6, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    195c:	eb05 2315 	add.w	r3, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1960:	3402      	adds	r4, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1962:	b2df      	uxtb	r7, r3
/// Generate an 8-bit random number in the given range
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    1964:	23ff      	movs	r3, #255	; 0xff
    1966:	fb93 f3f4 	sdiv	r3, r3, r4
    196a:	3b01      	subs	r3, #1
    196c:	b2db      	uxtb	r3, r3
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    196e:	fb17 f303 	smulbb	r3, r7, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1972:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1976:	1112      	asrs	r2, r2, #4
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1978:	f3c6 1603 	ubfx	r6, r6, #4, #4
		this_diff = random8(1, 255/numdots);
    197c:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    197e:	8005      	strh	r5, [r0, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1980:	3604      	adds	r6, #4
		this_diff = random8(1, 255/numdots);
    1982:	3301      	adds	r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1984:	3210      	adds	r2, #16

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1986:	4f4d      	ldr	r7, [pc, #308]	; (1abc <juggle_pal()+0x1e4>)
		reset_juggle_index = random8(1);
    1988:	4d4d      	ldr	r5, [pc, #308]	; (1ac0 <juggle_pal()+0x1e8>)
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
    198a:	484e      	ldr	r0, [pc, #312]	; (1ac4 <juggle_pal()+0x1ec>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    198c:	f889 3000 	strb.w	r3, [r9]
    1990:	b2d2      	uxtb	r2, r2

bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
    1992:	2300      	movs	r3, #0
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1994:	f88a 6000 	strb.w	r6, [sl]
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1998:	f888 4000 	strb.w	r4, [r8]
		use_palette = 1;
    199c:	2601      	movs	r6, #1
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
    199e:	240a      	movs	r4, #10
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    19a0:	f88e 2000 	strb.w	r2, [lr]

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    19a4:	703e      	strb	r6, [r7, #0]
		reset_juggle_index = random8(1);
    19a6:	702b      	strb	r3, [r5, #0]

bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
    19a8:	700b      	strb	r3, [r1, #0]
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
    19aa:	6004      	str	r4, [r0, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    19ac:	21bc      	movs	r1, #188	; 0xbc
    19ae:	4846      	ldr	r0, [pc, #280]	; (1ac8 <juggle_pal()+0x1f0>)
    19b0:	f002 fc92 	bl	42d8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	for (int i = 0; i < numdots; i++) {
    19b4:	f898 3000 	ldrb.w	r3, [r8]
    19b8:	2b00      	cmp	r3, #0
    19ba:	d069      	beq.n	1a90 <juggle_pal()+0x1b8>
    19bc:	4f43      	ldr	r7, [pc, #268]	; (1acc <juggle_pal()+0x1f4>)
    19be:	f8df a12c 	ldr.w	sl, [pc, #300]	; 1aec <juggle_pal()+0x214>
    19c2:	783a      	ldrb	r2, [r7, #0]
    19c4:	f8df 9120 	ldr.w	r9, [pc, #288]	; 1ae8 <juggle_pal()+0x210>
    19c8:	4e3f      	ldr	r6, [pc, #252]	; (1ac8 <juggle_pal()+0x1f0>)
    19ca:	2500      	movs	r5, #0
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    19cc:	f44f 7b8c 	mov.w	fp, #280	; 0x118
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19d0:	493f      	ldr	r1, [pc, #252]	; (1ad0 <juggle_pal()+0x1f8>)
    19d2:	680c      	ldr	r4, [r1, #0]
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
    19d4:	f89a 1000 	ldrb.w	r1, [sl]
    19d8:	9403      	str	r4, [sp, #12]
    19da:	440b      	add	r3, r1
    19dc:	442b      	add	r3, r5
    19de:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    19e0:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    19e2:	9803      	ldr	r0, [sp, #12]
    19e4:	bf9c      	itt	ls
    19e6:	021b      	lslls	r3, r3, #8
    19e8:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    19ea:	fb0b f000 	mul.w	r0, fp, r0
    19ee:	fb03 f000 	mul.w	r0, r3, r0
    19f2:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    19f4:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    19f6:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    19fa:	d503      	bpl.n	1a04 <juggle_pal()+0x12c>
    19fc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1a00:	3307      	adds	r3, #7
    1a02:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1a04:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1a08:	f3c3 0146 	ubfx	r1, r3, #1, #7
    1a0c:	4b31      	ldr	r3, [pc, #196]	; (1ad4 <juggle_pal()+0x1fc>)
    1a0e:	f813 400e 	ldrb.w	r4, [r3, lr]
    1a12:	4b31      	ldr	r3, [pc, #196]	; (1ad8 <juggle_pal()+0x200>)
    1a14:	f833 301e 	ldrh.w	r3, [r3, lr, lsl #1]
    1a18:	fb04 3301 	mla	r3, r4, r1, r3
    1a1c:	b29c      	uxth	r4, r3

    if( theta & 0x8000 ) y = -y;
    1a1e:	0403      	lsls	r3, r0, #16
    1a20:	bf48      	it	mi
    1a22:	4264      	negmi	r4, r4
    1a24:	b224      	sxth	r4, r4
    1a26:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
    1a2a:	b2a4      	uxth	r4, r4
    1a2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1a30:	482a      	ldr	r0, [pc, #168]	; (1adc <juggle_pal()+0x204>)
    1a32:	492b      	ldr	r1, [pc, #172]	; (1ae0 <juggle_pal()+0x208>)
    1a34:	7800      	ldrb	r0, [r0, #0]
    1a36:	9000      	str	r0, [sp, #0]
    1a38:	ebc4 1484 	rsb	r4, r4, r4, lsl #6
    1a3c:	0c24      	lsrs	r4, r4, #16


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1a3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1a42:	23ff      	movs	r3, #255	; 0xff
    1a44:	a802      	add	r0, sp, #8
    1a46:	f002 fc99 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1a4a:	eb06 0e04 	add.w	lr, r6, r4
    1a4e:	5d33      	ldrb	r3, [r6, r4]
    1a50:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1a54:	fa83 f352 	uqadd8	r3, r3, r2
    1a58:	5533      	strb	r3, [r6, r4]
    1a5a:	f89d 2009 	ldrb.w	r2, [sp, #9]
    1a5e:	f89e 3001 	ldrb.w	r3, [lr, #1]
    1a62:	fa83 f352 	uqadd8	r3, r3, r2
        g = qadd8( g, rhs.g);
    1a66:	f88e 3001 	strb.w	r3, [lr, #1]
    1a6a:	f89e 1002 	ldrb.w	r1, [lr, #2]
    1a6e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    1a72:	fa81 f153 	uqadd8	r1, r1, r3
		this_index += this_diff;
    1a76:	7838      	ldrb	r0, [r7, #0]
    1a78:	f899 2000 	ldrb.w	r2, [r9]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1a7c:	f898 3000 	ldrb.w	r3, [r8]
        b = qadd8( b, rhs.b);
    1a80:	f88e 1002 	strb.w	r1, [lr, #2]
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
    1a84:	4402      	add	r2, r0
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1a86:	3501      	adds	r5, #1
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
    1a88:	b2d2      	uxtb	r2, r2
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1a8a:	42ab      	cmp	r3, r5
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
    1a8c:	703a      	strb	r2, [r7, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1a8e:	dc9f      	bgt.n	19d0 <juggle_pal()+0xf8>
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
	}
} // juggle_pal()
    1a90:	b005      	add	sp, #20
    1a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
	}
	if (reset_juggle_index) {
    1a96:	4a0a      	ldr	r2, [pc, #40]	; (1ac0 <juggle_pal()+0x1e8>)
    1a98:	7812      	ldrb	r2, [r2, #0]
    1a9a:	b132      	cbz	r2, 1aaa <juggle_pal()+0x1d2>
    1a9c:	4a11      	ldr	r2, [pc, #68]	; (1ae4 <juggle_pal()+0x20c>)
		this_index = 0;
    1a9e:	490b      	ldr	r1, [pc, #44]	; (1acc <juggle_pal()+0x1f4>)
    1aa0:	7812      	ldrb	r2, [r2, #0]
    1aa2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1af0 <juggle_pal()+0x218>
    1aa6:	700b      	strb	r3, [r1, #0]
    1aa8:	e780      	b.n	19ac <juggle_pal()+0xd4>
    1aaa:	4b0e      	ldr	r3, [pc, #56]	; (1ae4 <juggle_pal()+0x20c>)
    1aac:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1af0 <juggle_pal()+0x218>
    1ab0:	781a      	ldrb	r2, [r3, #0]
    1ab2:	e77b      	b.n	19ac <juggle_pal()+0xd4>
    1ab4:	1fff876c 	.word	0x1fff876c
    1ab8:	1fff8782 	.word	0x1fff8782
    1abc:	1fff8764 	.word	0x1fff8764
    1ac0:	1fff92e5 	.word	0x1fff92e5
    1ac4:	1fff8768 	.word	0x1fff8768
    1ac8:	1fff8dcc 	.word	0x1fff8dcc
    1acc:	1fff9241 	.word	0x1fff9241
    1ad0:	1fff9668 	.word	0x1fff9668
    1ad4:	00007da0 	.word	0x00007da0
    1ad8:	00008780 	.word	0x00008780
    1adc:	1fff92e0 	.word	0x1fff92e0
    1ae0:	1fff910c 	.word	0x1fff910c
    1ae4:	1fff8760 	.word	0x1fff8760
    1ae8:	1fff8762 	.word	0x1fff8762
    1aec:	1fff877d 	.word	0x1fff877d
    1af0:	1fff877c 	.word	0x1fff877c

00001af4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
    1af4:	4b7d      	ldr	r3, [pc, #500]	; (1cec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
    1af6:	4a7e      	ldr	r2, [pc, #504]	; (1cf0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    1af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
    1afc:	68df      	ldr	r7, [r3, #12]
    1afe:	61c7      	str	r7, [r0, #28]
		gState._ctar1 = SPIX.CTAR1;
    1b00:	691b      	ldr	r3, [r3, #16]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
    1b02:	4e7c      	ldr	r6, [pc, #496]	; (1cf4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;
    1b04:	6203      	str	r3, [r0, #32]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
    1b06:	6833      	ldr	r3, [r6, #0]
		gState.pins[1] = CORE_PIN11_CONFIG;
    1b08:	4d7b      	ldr	r5, [pc, #492]	; (1cf8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
    1b0a:	6243      	str	r3, [r0, #36]	; 0x24
		gState.pins[1] = CORE_PIN11_CONFIG;
    1b0c:	682b      	ldr	r3, [r5, #0]
		gState.pins[2] = CORE_PIN13_CONFIG;
    1b0e:	4c7b      	ldr	r4, [pc, #492]	; (1cfc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
    1b10:	6283      	str	r3, [r0, #40]	; 0x28
		gState.pins[2] = CORE_PIN13_CONFIG;
    1b12:	6823      	ldr	r3, [r4, #0]
    1b14:	62c3      	str	r3, [r0, #44]	; 0x2c
    1b16:	4680      	mov	r8, r0
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
    1b18:	6980      	ldr	r0, [r0, #24]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
    1b1a:	6813      	ldr	r3, [r2, #0]
    1b1c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    1b20:	b083      	sub	sp, #12
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
    1b22:	b150      	cbz	r0, 1b3a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
    1b24:	6803      	ldr	r3, [r0, #0]
    1b26:	4a76      	ldr	r2, [pc, #472]	; (1d00 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x20c>)
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	4293      	cmp	r3, r2
    1b2c:	f040 8153 	bne.w	1dd6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2e2>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    1b30:	6842      	ldr	r2, [r0, #4]
    1b32:	7b00      	ldrb	r0, [r0, #12]
    1b34:	7813      	ldrb	r3, [r2, #0]
    1b36:	4303      	orrs	r3, r0
    1b38:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    1b3a:	4b6c      	ldr	r3, [pc, #432]	; (1cec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    1b3c:	68da      	ldr	r2, [r3, #12]
    1b3e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
    1b42:	f000 812b 	beq.w	1d9c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a8>
		uint32_t mcr = SPIX.MCR;
    1b46:	4b69      	ldr	r3, [pc, #420]	; (1cec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    1b48:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    1b4a:	0455      	lsls	r5, r2, #17
    1b4c:	f100 8130 	bmi.w	1db0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2bc>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
    1b50:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
    1b54:	f040 0001 	orr.w	r0, r0, #1
			SPIX.CTAR0 = ctar0;
    1b58:	f04f 5560 	mov.w	r5, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
    1b5c:	f04f 44f0 	mov.w	r4, #2013265920	; 0x78000000
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
    1b60:	6018      	str	r0, [r3, #0]
			SPIX.CTAR0 = ctar0;
    1b62:	60dd      	str	r5, [r3, #12]
			SPIX.CTAR1 = ctar1;
    1b64:	611c      	str	r4, [r3, #16]
			SPIX.MCR = mcr;
    1b66:	601a      	str	r2, [r3, #0]
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    1b68:	4b62      	ldr	r3, [pc, #392]	; (1cf4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    1b6a:	4d61      	ldr	r5, [pc, #388]	; (1cf0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1b6c:	4c63      	ldr	r4, [pc, #396]	; (1cfc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1b6e:	4e62      	ldr	r6, [pc, #392]	; (1cf8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1b70:	485e      	ldr	r0, [pc, #376]	; (1cec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    1b72:	f44f 7210 	mov.w	r2, #576	; 0x240
    1b76:	601a      	str	r2, [r3, #0]
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1b78:	f44f 73a2 	mov.w	r3, #324	; 0x144
    1b7c:	6033      	str	r3, [r6, #0]
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    1b7e:	602a      	str	r2, [r5, #0]
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1b80:	6023      	str	r3, [r4, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    1b82:	7d0c      	ldrb	r4, [r1, #20]
    1b84:	7ccd      	ldrb	r5, [r1, #19]
    1b86:	f891 b012 	ldrb.w	fp, [r1, #18]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1b8a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1b8c:	4b57      	ldr	r3, [pc, #348]	; (1cec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    1b8e:	0457      	lsls	r7, r2, #17
    1b90:	d4fb      	bmi.n	1b8a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x96>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1b92:	b672      	cpsid	i
    1b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1b98:	635a      	str	r2, [r3, #52]	; 0x34
    1b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    1ba2:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ba6:	4851      	ldr	r0, [pc, #324]	; (1cec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    1ba8:	0456      	lsls	r6, r2, #17
    1baa:	d4fb      	bmi.n	1ba4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb0>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1bac:	b672      	cpsid	i
    1bae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1bb2:	6343      	str	r3, [r0, #52]	; 0x34
    1bb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1bba:	62c3      	str	r3, [r0, #44]	; 0x2c
    1bbc:	b662      	cpsie	i
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    1bbe:	688b      	ldr	r3, [r1, #8]
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	dd5a      	ble.n	1c7a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x186>
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1bc4:	4603      	mov	r3, r0
    1bc6:	1c68      	adds	r0, r5, #1
    1bc8:	4607      	mov	r7, r0
    1bca:	1c60      	adds	r0, r4, #1
    1bcc:	4604      	mov	r4, r0
    1bce:	680a      	ldr	r2, [r1, #0]
    1bd0:	f8cd 8004 	str.w	r8, [sp, #4]
    1bd4:	f10b 0b01 	add.w	fp, fp, #1
    1bd8:	4618      	mov	r0, r3
    1bda:	46a2      	mov	sl, r4
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    1bdc:	698c      	ldr	r4, [r1, #24]
    1bde:	1915      	adds	r5, r2, r4
    1be0:	5d14      	ldrb	r4, [r2, r4]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    1be2:	78ae      	ldrb	r6, [r5, #2]
    1be4:	786a      	ldrb	r2, [r5, #1]
    1be6:	fb0a f606 	mul.w	r6, sl, r6
    1bea:	fb0b f404 	mul.w	r4, fp, r4
    1bee:	f3c6 2607 	ubfx	r6, r6, #8, #8
    1bf2:	fb07 f202 	mul.w	r2, r7, r2
    1bf6:	1224      	asrs	r4, r4, #8
    1bf8:	f446 467f 	orr.w	r6, r6, #65280	; 0xff00
    1bfc:	1215      	asrs	r5, r2, #8
    1bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c00:	0452      	lsls	r2, r2, #17
    1c02:	d4fc      	bmi.n	1bfe <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x10a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1c04:	b672      	cpsid	i
    1c06:	f046 5280 	orr.w	r2, r6, #268435456	; 0x10000000
    1c0a:	6342      	str	r2, [r0, #52]	; 0x34
    1c0c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1c0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1c12:	62c2      	str	r2, [r0, #44]	; 0x2c
    1c14:	b662      	cpsie	i
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    1c16:	022a      	lsls	r2, r5, #8
    1c18:	b292      	uxth	r2, r2
		w |= b2;
    1c1a:	4322      	orrs	r2, r4
    1c1c:	b294      	uxth	r4, r2
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c20:	0452      	lsls	r2, r2, #17
    1c22:	d4fc      	bmi.n	1c1e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1c24:	b672      	cpsid	i
    1c26:	f044 5280 	orr.w	r2, r4, #268435456	; 0x10000000
    1c2a:	6342      	str	r2, [r0, #52]	; 0x34
    1c2c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1c2e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1c32:	62c2      	str	r2, [r0, #44]	; 0x2c
    1c34:	b662      	cpsie	i

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1c36:	688c      	ldr	r4, [r1, #8]
    1c38:	9400      	str	r4, [sp, #0]
    1c3a:	f991 2015 	ldrsb.w	r2, [r1, #21]
    1c3e:	680c      	ldr	r4, [r1, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1c40:	f891 900c 	ldrb.w	r9, [r1, #12]
                d[1] = e[1] - d[1];
    1c44:	7b4e      	ldrb	r6, [r1, #13]
                d[2] = e[2] - d[2];
    1c46:	7b8d      	ldrb	r5, [r1, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1c48:	f891 e00f 	ldrb.w	lr, [r1, #15]
                d[1] = e[1] - d[1];
    1c4c:	f891 8010 	ldrb.w	r8, [r1, #16]
                d[2] = e[2] - d[2];
    1c50:	f891 c011 	ldrb.w	ip, [r1, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1c54:	4422      	add	r2, r4
    1c56:	9c00      	ldr	r4, [sp, #0]
    1c58:	600a      	str	r2, [r1, #0]
    1c5a:	3c01      	subs	r4, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1c5c:	ebc9 0e0e 	rsb	lr, r9, lr
                d[1] = e[1] - d[1];
    1c60:	ebc6 0608 	rsb	r6, r6, r8
                d[2] = e[2] - d[2];
    1c64:	ebc5 050c 	rsb	r5, r5, ip
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    1c68:	2c00      	cmp	r4, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1c6a:	f881 e00c 	strb.w	lr, [r1, #12]
                d[1] = e[1] - d[1];
    1c6e:	734e      	strb	r6, [r1, #13]
                d[2] = e[2] - d[2];
    1c70:	738d      	strb	r5, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1c72:	608c      	str	r4, [r1, #8]
    1c74:	dcb2      	bgt.n	1bdc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe8>
    1c76:	f8dd 8004 	ldr.w	r8, [sp, #4]
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    1c7a:	6848      	ldr	r0, [r1, #4]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1c7c:	4a1b      	ldr	r2, [pc, #108]	; (1cec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    1c7e:	2800      	cmp	r0, #0
    1c80:	bfb8      	it	lt
    1c82:	301f      	addlt	r0, #31
    1c84:	1140      	asrs	r0, r0, #5
    1c86:	4611      	mov	r1, r2
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1c88:	24ff      	movs	r4, #255	; 0xff
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1c8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1c8c:	045e      	lsls	r6, r3, #17
    1c8e:	d4fc      	bmi.n	1c8a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1c90:	b672      	cpsid	i
    1c92:	634c      	str	r4, [r1, #52]	; 0x34
    1c94:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1c9a:	62cb      	str	r3, [r1, #44]	; 0x2c
    1c9c:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1c9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1ca0:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    1ca4:	d1fb      	bne.n	1c9e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1aa>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1ca6:	b672      	cpsid	i
    1ca8:	634b      	str	r3, [r1, #52]	; 0x34
    1caa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1cb0:	62cb      	str	r3, [r1, #44]	; 0x2c
    1cb2:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1cb4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1cb6:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    1cba:	d1fb      	bne.n	1cb4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1c0>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1cbc:	b672      	cpsid	i
    1cbe:	634b      	str	r3, [r1, #52]	; 0x34
    1cc0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1cc6:	62cb      	str	r3, [r1, #44]	; 0x2c
    1cc8:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1cca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1ccc:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    1cd0:	d1fb      	bne.n	1cca <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1d6>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1cd2:	b672      	cpsid	i
    1cd4:	634b      	str	r3, [r1, #52]	; 0x34
    1cd6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1cdc:	62cb      	str	r3, [r1, #44]	; 0x2c
    1cde:	b662      	cpsie	i
    1ce0:	f110 30ff 	adds.w	r0, r0, #4294967295
    1ce4:	d2d1      	bcs.n	1c8a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
			cli();
			if ((SPIX.SR & 0xF000) > 0) {
    1ce6:	4a01      	ldr	r2, [pc, #4]	; (1cec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    1ce8:	e013      	b.n	1d12 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
    1cea:	bf00      	nop
    1cec:	4002c000 	.word	0x4002c000
    1cf0:	4004c004 	.word	0x4004c004
    1cf4:	4004c008 	.word	0x4004c008
    1cf8:	4004b018 	.word	0x4004b018
    1cfc:	4004b014 	.word	0x4004b014
    1d00:	00000475 	.word	0x00000475
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
    1d04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
    1d0c:	2300      	movs	r3, #0
			} else {
				empty = true;
			}
			sei();
    1d0e:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
    1d10:	b943      	cbnz	r3, 1d24 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x230>
			cli();
    1d12:	b672      	cpsid	i
			if ((SPIX.SR & 0xF000) > 0) {
    1d14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1d16:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    1d1a:	d1f3      	bne.n	1d04 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x210>
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
			} else {
				empty = true;
    1d1c:	2301      	movs	r3, #1
			}
			sei();
    1d1e:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
    1d20:	2b00      	cmp	r3, #0
    1d22:	d0f6      	beq.n	1d12 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
			}
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
    1d24:	492f      	ldr	r1, [pc, #188]	; (1de4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1d26:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1d28:	4a2e      	ldr	r2, [pc, #184]	; (1de4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	dafb      	bge.n	1d26 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x232>
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
    1d2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
    1d30:	4e2d      	ldr	r6, [pc, #180]	; (1de8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f4>)
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
    1d32:	f8d8 0018 	ldr.w	r0, [r8, #24]
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
    1d36:	4d2d      	ldr	r5, [pc, #180]	; (1dec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f8>)
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
    1d38:	4c2d      	ldr	r4, [pc, #180]	; (1df0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2fc>)
    1d3a:	492e      	ldr	r1, [pc, #184]	; (1df4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x300>)
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
    1d3c:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    1d40:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
    1d42:	f44f 73a2 	mov.w	r3, #324	; 0x144
    1d46:	6033      	str	r3, [r6, #0]
    1d48:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
    1d4c:	602a      	str	r2, [r5, #0]
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
    1d4e:	6023      	str	r3, [r4, #0]
    1d50:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    1d54:	600b      	str	r3, [r1, #0]
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
    1d56:	b150      	cbz	r0, 1d6e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
    1d58:	6803      	ldr	r3, [r0, #0]
    1d5a:	4a27      	ldr	r2, [pc, #156]	; (1df8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x304>)
    1d5c:	685b      	ldr	r3, [r3, #4]
    1d5e:	4293      	cmp	r3, r2
    1d60:	d13d      	bne.n	1dde <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ea>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    1d62:	6842      	ldr	r2, [r0, #4]
    1d64:	7b01      	ldrb	r1, [r0, #12]
    1d66:	7813      	ldrb	r3, [r2, #0]
    1d68:	ea23 0301 	bic.w	r3, r3, r1
    1d6c:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    1d6e:	4b1d      	ldr	r3, [pc, #116]	; (1de4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
    1d70:	f8d8 201c 	ldr.w	r2, [r8, #28]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    1d74:	68d9      	ldr	r1, [r3, #12]
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
    1d76:	f8d8 0020 	ldr.w	r0, [r8, #32]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    1d7a:	428a      	cmp	r2, r1
    1d7c:	d01f      	beq.n	1dbe <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ca>
		uint32_t mcr = SPIX.MCR;
    1d7e:	4b19      	ldr	r3, [pc, #100]	; (1de4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1d80:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    1d82:	044c      	lsls	r4, r1, #17
    1d84:	d422      	bmi.n	1dcc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2d8>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
    1d86:	f441 4480 	orr.w	r4, r1, #16384	; 0x4000
    1d8a:	f044 0401 	orr.w	r4, r4, #1
    1d8e:	601c      	str	r4, [r3, #0]
			SPIX.CTAR0 = ctar0;
    1d90:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
    1d92:	6118      	str	r0, [r3, #16]
			SPIX.MCR = mcr;
    1d94:	6019      	str	r1, [r3, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    1d96:	b003      	add	sp, #12
    1d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    1d9c:	691b      	ldr	r3, [r3, #16]
    1d9e:	f1b3 4ff0 	cmp.w	r3, #2013265920	; 0x78000000
    1da2:	f43f aee1 	beq.w	1b68 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
		uint32_t mcr = SPIX.MCR;
    1da6:	4b0f      	ldr	r3, [pc, #60]	; (1de4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1da8:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    1daa:	0455      	lsls	r5, r2, #17
    1dac:	f57f aed0 	bpl.w	1b50 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x5c>
			SPIX.CTAR0 = ctar0;
    1db0:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
    1db4:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
    1db8:	60d8      	str	r0, [r3, #12]
			SPIX.CTAR1 = ctar1;
    1dba:	611a      	str	r2, [r3, #16]
    1dbc:	e6d4      	b.n	1b68 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    1dbe:	691b      	ldr	r3, [r3, #16]
    1dc0:	4298      	cmp	r0, r3
    1dc2:	d0e8      	beq.n	1d96 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a2>
		uint32_t mcr = SPIX.MCR;
    1dc4:	4b07      	ldr	r3, [pc, #28]	; (1de4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1dc6:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    1dc8:	044c      	lsls	r4, r1, #17
    1dca:	d5dc      	bpl.n	1d86 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x292>
			SPIX.CTAR0 = ctar0;
    1dcc:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
    1dce:	6118      	str	r0, [r3, #16]
    1dd0:	b003      	add	sp, #12
    1dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dd6:	9100      	str	r1, [sp, #0]
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
    1dd8:	4798      	blx	r3
    1dda:	9900      	ldr	r1, [sp, #0]
    1ddc:	e6ad      	b.n	1b3a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
    1dde:	4798      	blx	r3
    1de0:	e7c5      	b.n	1d6e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
    1de2:	bf00      	nop
    1de4:	4002c000 	.word	0x4002c000
    1de8:	4004c008 	.word	0x4004c008
    1dec:	4004b018 	.word	0x4004b018
    1df0:	4004c004 	.word	0x4004c004
    1df4:	4004b014 	.word	0x4004b014
    1df8:	00000481 	.word	0x00000481

00001dfc <sinelon()>:
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;
void sinelon()
{
    1dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (mode_change) {
    1dfe:	4958      	ldr	r1, [pc, #352]	; (1f60 <sinelon()+0x164>)
    1e00:	780b      	ldrb	r3, [r1, #0]
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;
void sinelon()
{
    1e02:	b085      	sub	sp, #20
	if (mode_change) {
    1e04:	2b00      	cmp	r3, #0
    1e06:	d156      	bne.n	1eb6 <sinelon()+0xba>
    1e08:	4b56      	ldr	r3, [pc, #344]	; (1f64 <sinelon()+0x168>)
    1e0a:	4d57      	ldr	r5, [pc, #348]	; (1f68 <sinelon()+0x16c>)
    1e0c:	781a      	ldrb	r2, [r3, #0]
    1e0e:	4c57      	ldr	r4, [pc, #348]	; (1f6c <sinelon()+0x170>)
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    this_delay = 10;
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    1e10:	4857      	ldr	r0, [pc, #348]	; (1f70 <sinelon()+0x174>)
    1e12:	21bc      	movs	r1, #188	; 0xbc
    1e14:	f002 fa60 	bl	42d8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e18:	4a56      	ldr	r2, [pc, #344]	; (1f74 <sinelon()+0x178>)
	int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    1e1a:	782b      	ldrb	r3, [r5, #0]
    1e1c:	6812      	ldr	r2, [r2, #0]
    1e1e:	9203      	str	r2, [sp, #12]
	return ret;
    1e20:	9903      	ldr	r1, [sp, #12]
    1e22:	f44f 728c 	mov.w	r2, #280	; 0x118
    1e26:	021b      	lsls	r3, r3, #8
    1e28:	fb02 f101 	mul.w	r1, r2, r1
    1e2c:	fb03 f101 	mul.w	r1, r3, r1
    1e30:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e32:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1e34:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e38:	d503      	bpl.n	1e42 <sinelon()+0x46>
    1e3a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1e3e:	3307      	adds	r3, #7
    1e40:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1e42:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    1e44:	4d4c      	ldr	r5, [pc, #304]	; (1f78 <sinelon()+0x17c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1e46:	484d      	ldr	r0, [pc, #308]	; (1f7c <sinelon()+0x180>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1e48:	5cad      	ldrb	r5, [r5, r2]
    1e4a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    1e4e:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1e52:	fb05 0302 	mla	r3, r5, r2, r0
    1e56:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1e58:	040a      	lsls	r2, r1, #16
    1e5a:	bf48      	it	mi
    1e5c:	425b      	negmi	r3, r3
    1e5e:	b21b      	sxth	r3, r3
    1e60:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1e64:	b29b      	uxth	r3, r3
	if (sinelon_color_change) {
    1e66:	7822      	ldrb	r2, [r4, #0]
		sinelon_color_change = random8(1);
    this_delay = 10;
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    1e68:	24bc      	movs	r4, #188	; 0xbc
    1e6a:	fb04 f303 	mul.w	r3, r4, r3
    1e6e:	0c1c      	lsrs	r4, r3, #16
	if (sinelon_color_change) {
    1e70:	2a00      	cmp	r2, #0
    1e72:	d15e      	bne.n	1f32 <sinelon()+0x136>
		leds[pos] += ColorFromPalette(current_palette, this_index++);
	}
	else {
		leds[pos] += ColorFromPalette(current_palette, this_index);
    1e74:	4b42      	ldr	r3, [pc, #264]	; (1f80 <sinelon()+0x184>)
    1e76:	4943      	ldr	r1, [pc, #268]	; (1f84 <sinelon()+0x188>)
    1e78:	781a      	ldrb	r2, [r3, #0]
    1e7a:	2301      	movs	r3, #1
    1e7c:	9300      	str	r3, [sp, #0]
    1e7e:	a802      	add	r0, sp, #8
    1e80:	23ff      	movs	r3, #255	; 0xff
    1e82:	f002 fa7b 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1e86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1e8a:	4a39      	ldr	r2, [pc, #228]	; (1f70 <sinelon()+0x174>)
    1e8c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1e90:	5d13      	ldrb	r3, [r2, r4]
    1e92:	1911      	adds	r1, r2, r4
    1e94:	fa83 f350 	uqadd8	r3, r3, r0
    1e98:	5513      	strb	r3, [r2, r4]
    1e9a:	784a      	ldrb	r2, [r1, #1]
    1e9c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    1ea0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1ea4:	704a      	strb	r2, [r1, #1]
    1ea6:	788b      	ldrb	r3, [r1, #2]
    1ea8:	f89d 200a 	ldrb.w	r2, [sp, #10]
    1eac:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1eb0:	708b      	strb	r3, [r1, #2]
	}
	//leds[pos] += CHSV(this_hue++, 255, 192);
}
    1eb2:	b005      	add	sp, #20
    1eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1eb6:	4c34      	ldr	r4, [pc, #208]	; (1f88 <sinelon()+0x18c>)
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
    1eb8:	4d2b      	ldr	r5, [pc, #172]	; (1f68 <sinelon()+0x16c>)
    1eba:	8823      	ldrh	r3, [r4, #0]
bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    1ebc:	4833      	ldr	r0, [pc, #204]	; (1f8c <sinelon()+0x190>)
		this_fade = random8(16, 128);
    1ebe:	4e29      	ldr	r6, [pc, #164]	; (1f64 <sinelon()+0x168>)
    1ec0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1ec4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1ec8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1ecc:	3319      	adds	r3, #25
    1ece:	b29b      	uxth	r3, r3
    1ed0:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    1ed4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    1ed8:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    1edc:	3719      	adds	r7, #25
    1ede:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1ee0:	eb07 2e17 	add.w	lr, r7, r7, lsr #8
    1ee4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1ee8:	eb07 2c47 	add.w	ip, r7, r7, lsl #9
		this_beat = random8(8, 18);
    1eec:	fa5f fe8e 	uxtb.w	lr, lr
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1ef0:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1ef2:	eb07 078c 	add.w	r7, r7, ip, lsl #2
    1ef6:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1efa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1efe:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    1f02:	ea4f 1eee 	mov.w	lr, lr, asr #7
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1f06:	111a      	asrs	r2, r3, #4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1f08:	3719      	adds	r7, #25
    1f0a:	f10e 0e08 	add.w	lr, lr, #8
    1f0e:	8027      	strh	r7, [r4, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1f10:	3210      	adds	r2, #16
		sinelon_color_change = random8(1);
    1f12:	4c16      	ldr	r4, [pc, #88]	; (1f6c <sinelon()+0x170>)
    this_delay = 10;
    1f14:	4f1e      	ldr	r7, [pc, #120]	; (1f90 <sinelon()+0x194>)
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
    1f16:	f885 e000 	strb.w	lr, [r5]
bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    1f1a:	f04f 0e01 	mov.w	lr, #1

bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
    1f1e:	2300      	movs	r3, #0
    1f20:	b2d2      	uxtb	r2, r2
		use_palette = 1;
    1f22:	f880 e000 	strb.w	lr, [r0]
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    this_delay = 10;
    1f26:	200a      	movs	r0, #10
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    1f28:	7032      	strb	r2, [r6, #0]
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    1f2a:	7023      	strb	r3, [r4, #0]

bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
    1f2c:	700b      	strb	r3, [r1, #0]
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    this_delay = 10;
    1f2e:	6038      	str	r0, [r7, #0]
    1f30:	e76e      	b.n	1e10 <sinelon()+0x14>
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
	if (sinelon_color_change) {
		leds[pos] += ColorFromPalette(current_palette, this_index++);
    1f32:	4d13      	ldr	r5, [pc, #76]	; (1f80 <sinelon()+0x184>)
    1f34:	4913      	ldr	r1, [pc, #76]	; (1f84 <sinelon()+0x188>)
    1f36:	782a      	ldrb	r2, [r5, #0]
    1f38:	2301      	movs	r3, #1
    1f3a:	18d6      	adds	r6, r2, r3
    1f3c:	9300      	str	r3, [sp, #0]
    1f3e:	a802      	add	r0, sp, #8
    1f40:	23ff      	movs	r3, #255	; 0xff
    1f42:	702e      	strb	r6, [r5, #0]
    1f44:	f002 fa1a 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1f48:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1f4c:	4b08      	ldr	r3, [pc, #32]	; (1f70 <sinelon()+0x174>)
    1f4e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f52:	5d1a      	ldrb	r2, [r3, r4]
    1f54:	1919      	adds	r1, r3, r4
    1f56:	fa82 f250 	uqadd8	r2, r2, r0
    1f5a:	551a      	strb	r2, [r3, r4]
    1f5c:	e79d      	b.n	1e9a <sinelon()+0x9e>
    1f5e:	bf00      	nop
    1f60:	1fff876c 	.word	0x1fff876c
    1f64:	1fff8760 	.word	0x1fff8760
    1f68:	1fff877d 	.word	0x1fff877d
    1f6c:	1fff90fe 	.word	0x1fff90fe
    1f70:	1fff8dcc 	.word	0x1fff8dcc
    1f74:	1fff9668 	.word	0x1fff9668
    1f78:	00007da0 	.word	0x00007da0
    1f7c:	00008780 	.word	0x00008780
    1f80:	1fff9241 	.word	0x1fff9241
    1f84:	1fff910c 	.word	0x1fff910c
    1f88:	1fff8782 	.word	0x1fff8782
    1f8c:	1fff8764 	.word	0x1fff8764
    1f90:	1fff8768 	.word	0x1fff8768

00001f94 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    1f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f96:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f98:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    1f9a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    1f9c:	789b      	ldrb	r3, [r3, #2]
    1f9e:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1fa0:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    1fa2:	9101      	str	r1, [sp, #4]
    1fa4:	9202      	str	r2, [sp, #8]
    1fa6:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1fa8:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    1fac:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    1fb0:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1fb4:	d016      	beq.n	1fe4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    1fb6:	2300      	movs	r3, #0
    1fb8:	f88d 3015 	strb.w	r3, [sp, #21]
    1fbc:	f88d 3014 	strb.w	r3, [sp, #20]
    1fc0:	f88d 3013 	strb.w	r3, [sp, #19]
    1fc4:	f88d 3012 	strb.w	r3, [sp, #18]
    1fc8:	f88d 3011 	strb.w	r3, [sp, #17]
    1fcc:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1fd0:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1fd2:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1fd4:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1fd6:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1fda:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1fdc:	a901      	add	r1, sp, #4
    1fde:	4790      	blx	r2
  }
    1fe0:	b009      	add	sp, #36	; 0x24
    1fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    1fe4:	4a1b      	ldr	r2, [pc, #108]	; (2054 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1fe6:	7813      	ldrb	r3, [r2, #0]
    1fe8:	3301      	adds	r3, #1
    1fea:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1fee:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1ff2:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1ff4:	bf14      	ite	ne
    1ff6:	2280      	movne	r2, #128	; 0x80
    1ff8:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1ffa:	0799      	lsls	r1, r3, #30
    1ffc:	bf44      	itt	mi
    1ffe:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    2002:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    2004:	075b      	lsls	r3, r3, #29
    2006:	bf48      	it	mi
    2008:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    200c:	3210      	adds	r2, #16
    200e:	b2d2      	uxtb	r2, r2
    2010:	f10d 0313 	add.w	r3, sp, #19
    2014:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    2018:	f44f 7e80 	mov.w	lr, #256	; 0x100
    201c:	b1ac      	cbz	r4, 204a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
    201e:	fb9e f4f4 	sdiv	r4, lr, r4
    2022:	b2e4      	uxtb	r4, r4
    2024:	1c61      	adds	r1, r4, #1
    2026:	b2c9      	uxtb	r1, r1
    2028:	fb01 2502 	mla	r5, r1, r2, r2
    202c:	122d      	asrs	r5, r5, #8
    202e:	7019      	strb	r1, [r3, #0]
    2030:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    2032:	b105      	cbz	r5, 2036 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
    2034:	3e01      	subs	r6, #1
    2036:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    203a:	b101      	cbz	r1, 203e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
    203c:	701c      	strb	r4, [r3, #0]
    203e:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    2040:	42bb      	cmp	r3, r7
    2042:	d0c5      	beq.n	1fd0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
    2044:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    2046:	2c00      	cmp	r4, #0
    2048:	d1e9      	bne.n	201e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
    204a:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    204c:	f803 4c03 	strb.w	r4, [r3, #-3]
    2050:	e7f5      	b.n	203e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
    2052:	bf00      	nop
    2054:	1fff8c88 	.word	0x1fff8c88

00002058 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    2058:	b5f0      	push	{r4, r5, r6, r7, lr}
    205a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    205c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    205e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    2060:	789b      	ldrb	r3, [r3, #2]
    2062:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2064:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    2066:	9101      	str	r1, [sp, #4]
    2068:	9202      	str	r2, [sp, #8]
    206a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    206c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    2070:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    2074:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2078:	d017      	beq.n	20aa <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    207a:	2300      	movs	r3, #0
    207c:	f88d 3015 	strb.w	r3, [sp, #21]
    2080:	f88d 3014 	strb.w	r3, [sp, #20]
    2084:	f88d 3013 	strb.w	r3, [sp, #19]
    2088:	f88d 3012 	strb.w	r3, [sp, #18]
    208c:	f88d 3011 	strb.w	r3, [sp, #17]
    2090:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2094:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    2096:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    2098:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    209a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    209c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    20a0:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    20a2:	a901      	add	r1, sp, #4
    20a4:	4798      	blx	r3
  }
    20a6:	b009      	add	sp, #36	; 0x24
    20a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    20aa:	4a1b      	ldr	r2, [pc, #108]	; (2118 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    20ac:	7813      	ldrb	r3, [r2, #0]
    20ae:	3301      	adds	r3, #1
    20b0:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    20b4:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    20b8:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    20ba:	bf14      	ite	ne
    20bc:	2280      	movne	r2, #128	; 0x80
    20be:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    20c0:	0799      	lsls	r1, r3, #30
    20c2:	bf44      	itt	mi
    20c4:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    20c8:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    20ca:	075b      	lsls	r3, r3, #29
    20cc:	bf48      	it	mi
    20ce:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    20d2:	3210      	adds	r2, #16
    20d4:	b2d2      	uxtb	r2, r2
    20d6:	f10d 0313 	add.w	r3, sp, #19
    20da:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    20de:	f44f 7e80 	mov.w	lr, #256	; 0x100
    20e2:	b1ac      	cbz	r4, 2110 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
    20e4:	fb9e f4f4 	sdiv	r4, lr, r4
    20e8:	b2e4      	uxtb	r4, r4
    20ea:	1c61      	adds	r1, r4, #1
    20ec:	b2c9      	uxtb	r1, r1
    20ee:	fb01 2502 	mla	r5, r1, r2, r2
    20f2:	122d      	asrs	r5, r5, #8
    20f4:	7019      	strb	r1, [r3, #0]
    20f6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    20f8:	b105      	cbz	r5, 20fc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
    20fa:	3e01      	subs	r6, #1
    20fc:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    2100:	b101      	cbz	r1, 2104 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
    2102:	701c      	strb	r4, [r3, #0]
    2104:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    2106:	42bb      	cmp	r3, r7
    2108:	d0c4      	beq.n	2094 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
    210a:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    210c:	2c00      	cmp	r4, #0
    210e:	d1e9      	bne.n	20e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
    2110:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    2112:	f803 4c03 	strb.w	r4, [r3, #-3]
    2116:	e7f5      	b.n	2104 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
    2118:	1fff8c88 	.word	0x1fff8c88

0000211c <pride()>:
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    2120:	4bb1      	ldr	r3, [pc, #708]	; (23e8 <pride()+0x2cc>)
    2122:	781a      	ldrb	r2, [r3, #0]
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    2124:	b08d      	sub	sp, #52	; 0x34
	if (mode_change) {
    2126:	b132      	cbz	r2, 2136 <pride()+0x1a>
		mode_change = 0;
		use_palette = 0;
    2128:	4cb0      	ldr	r4, [pc, #704]	; (23ec <pride()+0x2d0>)
    this_delay = 10;
    212a:	49b1      	ldr	r1, [pc, #708]	; (23f0 <pride()+0x2d4>)

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    212c:	2200      	movs	r2, #0
		use_palette = 0;
    this_delay = 10;
    212e:	200a      	movs	r0, #10
// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    2130:	7022      	strb	r2, [r4, #0]

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    2132:	701a      	strb	r2, [r3, #0]
		use_palette = 0;
    this_delay = 10;
    2134:	6008      	str	r0, [r1, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2136:	48af      	ldr	r0, [pc, #700]	; (23f4 <pride()+0x2d8>)
    2138:	6803      	ldr	r3, [r0, #0]
    213a:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    213c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    213e:	f645 7328 	movw	r3, #24360	; 0x5f28
    2142:	fb03 f202 	mul.w	r2, r3, r2
    2146:	0c12      	lsrs	r2, r2, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2148:	0455      	lsls	r5, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    214a:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    214e:	d503      	bpl.n	2158 <pride()+0x3c>
    2150:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2154:	3307      	adds	r3, #7
    2156:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2158:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    215a:	4fa7      	ldr	r7, [pc, #668]	; (23f8 <pride()+0x2dc>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    215c:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 2410 <pride()+0x2f4>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2160:	5c7c      	ldrb	r4, [r7, r1]
    2162:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    2166:	f3c3 0346 	ubfx	r3, r3, #1, #7
    216a:	fb04 1303 	mla	r3, r4, r3, r1
    216e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2170:	0414      	lsls	r4, r2, #16
    2172:	bf48      	it	mi
    2174:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2176:	6802      	ldr	r2, [r0, #0]
    2178:	920a      	str	r2, [sp, #40]	; 0x28
    217a:	b21b      	sxth	r3, r3
	}
	static uint16_t sPseudotime = 0;
	static uint16_t sLastMillis = 0;
	static uint16_t sHue16 = 0;

	uint8_t sat8 = beatsin88(87, 220, 250);
    217c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    2180:	990a      	ldr	r1, [sp, #40]	; 0x28
    2182:	4a9e      	ldr	r2, [pc, #632]	; (23fc <pride()+0x2e0>)
    2184:	b29b      	uxth	r3, r3
    2186:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    218a:	fb02 f201 	mul.w	r2, r2, r1
    218e:	0c1b      	lsrs	r3, r3, #16
    2190:	0c12      	lsrs	r2, r2, #16
    2192:	33dc      	adds	r3, #220	; 0xdc
    2194:	b2db      	uxtb	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2196:	0451      	lsls	r1, r2, #17
    2198:	9300      	str	r3, [sp, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    219a:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    219e:	d503      	bpl.n	21a8 <pride()+0x8c>
    21a0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    21a4:	3307      	adds	r3, #7
    21a6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    21a8:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    21aa:	f3c3 0346 	ubfx	r3, r3, #1, #7
    21ae:	5c7c      	ldrb	r4, [r7, r1]
    21b0:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    21b4:	fb04 1303 	mla	r3, r4, r3, r1

    if( theta & 0x8000 ) y = -y;
    21b8:	0416      	lsls	r6, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    21ba:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    21bc:	bf48      	it	mi
    21be:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21c0:	6802      	ldr	r2, [r0, #0]
    21c2:	9209      	str	r2, [sp, #36]	; 0x24
    21c4:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    21c6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    21ca:	b29b      	uxth	r3, r3
	return ret;
    21cc:	9909      	ldr	r1, [sp, #36]	; 0x24
    21ce:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    21d2:	f64d 6208 	movw	r2, #56840	; 0xde08
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    21d6:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    21d8:	fb02 f201 	mul.w	r2, r2, r1
    21dc:	0c12      	lsrs	r2, r2, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    21de:	3360      	adds	r3, #96	; 0x60
    21e0:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    21e2:	0455      	lsls	r5, r2, #17
    21e4:	9301      	str	r3, [sp, #4]
	uint8_t brightdepth = beatsin88(341, 96, 224);
    21e6:	fa5f f983 	uxtb.w	r9, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    21ea:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    21ee:	d503      	bpl.n	21f8 <pride()+0xdc>
    21f0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    21f4:	3307      	adds	r3, #7
    21f6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    21f8:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    21fa:	f3c3 0346 	ubfx	r3, r3, #1, #7
    21fe:	5c7c      	ldrb	r4, [r7, r1]
    2200:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    2204:	fb04 1303 	mla	r3, r4, r3, r1
    2208:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    220a:	0414      	lsls	r4, r2, #16
    220c:	bf48      	it	mi
    220e:	425b      	negmi	r3, r3
    2210:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2212:	6802      	ldr	r2, [r0, #0]
    2214:	9208      	str	r2, [sp, #32]
    2216:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    221a:	b29b      	uxth	r3, r3
    221c:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
	return ret;
    2220:	9908      	ldr	r1, [sp, #32]
    2222:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2226:	f24a 02c8 	movw	r2, #41160	; 0xa0c8
    222a:	fb02 f201 	mul.w	r2, r2, r1
    222e:	0c12      	lsrs	r2, r2, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2230:	0c1b      	lsrs	r3, r3, #16
    2232:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2236:	0451      	lsls	r1, r2, #17
    2238:	fa1f fb83 	uxth.w	fp, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    223c:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2240:	d503      	bpl.n	224a <pride()+0x12e>
    2242:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2246:	3307      	adds	r3, #7
    2248:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    224a:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    224c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2250:	5c7c      	ldrb	r4, [r7, r1]
    2252:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
	uint16_t brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
    2256:	4d6a      	ldr	r5, [pc, #424]	; (2400 <pride()+0x2e4>)
    2258:	fb04 1303 	mla	r3, r4, r3, r1

    if( theta & 0x8000 ) y = -y;
    225c:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    225e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2260:	bf48      	it	mi
    2262:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2264:	6802      	ldr	r2, [r0, #0]
    2266:	9207      	str	r2, [sp, #28]
    2268:	b21b      	sxth	r3, r3
    226a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    226e:	b29b      	uxth	r3, r3
    2270:	2126      	movs	r1, #38	; 0x26
	return ret;
    2272:	9c07      	ldr	r4, [sp, #28]
    2274:	f8b5 a000 	ldrh.w	sl, [r5]
    2278:	fb01 f103 	mul.w	r1, r1, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    227c:	f647 3398 	movw	r3, #31640	; 0x7b98
    2280:	fb03 f404 	mul.w	r4, r3, r4
    2284:	0c24      	lsrs	r4, r4, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2286:	0c09      	lsrs	r1, r1, #16
    2288:	3117      	adds	r1, #23
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    228a:	0466      	lsls	r6, r4, #17
    228c:	b289      	uxth	r1, r1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    228e:	f3c4 02ca 	ubfx	r2, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2292:	d503      	bpl.n	229c <pride()+0x180>
    2294:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    2298:	3207      	adds	r2, #7
    229a:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    229c:	0a16      	lsrs	r6, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    229e:	f3c2 0246 	ubfx	r2, r2, #1, #7
    22a2:	f817 e006 	ldrb.w	lr, [r7, r6]
    22a6:	f838 6016 	ldrh.w	r6, [r8, r6, lsl #1]
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    22aa:	f8df c168 	ldr.w	ip, [pc, #360]	; 2414 <pride()+0x2f8>
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    22ae:	4b55      	ldr	r3, [pc, #340]	; (2404 <pride()+0x2e8>)
    22b0:	fb0e 6202 	mla	r2, lr, r2, r6

    if( theta & 0x8000 ) y = -y;
    22b4:	0424      	lsls	r4, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    22b6:	b292      	uxth	r2, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22b8:	6804      	ldr	r4, [r0, #0]
    22ba:	9405      	str	r4, [sp, #20]

    if( theta & 0x8000 ) y = -y;
    22bc:	bf48      	it	mi
    22be:	4252      	negmi	r2, r2
	return ret;
    22c0:	9e05      	ldr	r6, [sp, #20]

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    22c2:	f8bc 4000 	ldrh.w	r4, [ip]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22c6:	6800      	ldr	r0, [r0, #0]
    22c8:	9006      	str	r0, [sp, #24]
    22ca:	b212      	sxth	r2, r2
    22cc:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
    22d0:	b2b6      	uxth	r6, r6
    22d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
    22d6:	b292      	uxth	r2, r2
	uint16_t deltams = ms - sLastMillis;
    22d8:	1b34      	subs	r4, r6, r4
    22da:	fb00 f202 	mul.w	r2, r0, r2
	sLastMillis = ms;
    22de:	f8ac 6000 	strh.w	r6, [ip]
	sPseudotime += deltams * msmultiplier;
    22e2:	8818      	ldrh	r0, [r3, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    22e4:	4e48      	ldr	r6, [pc, #288]	; (2408 <pride()+0x2ec>)
	return ret;
    22e6:	f8dd c018 	ldr.w	ip, [sp, #24]

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    22ea:	b2a4      	uxth	r4, r4
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    22ec:	fb14 0001 	smlabb	r0, r4, r1, r0
    22f0:	fb06 f10c 	mul.w	r1, r6, ip
    22f4:	0c09      	lsrs	r1, r1, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    22f6:	0c12      	lsrs	r2, r2, #16
    22f8:	b280      	uxth	r0, r0
    22fa:	3201      	adds	r2, #1
    22fc:	8018      	strh	r0, [r3, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    22fe:	044b      	lsls	r3, r1, #17
    2300:	b296      	uxth	r6, r2
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2302:	f3c1 02ca 	ubfx	r2, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2306:	d503      	bpl.n	2310 <pride()+0x1f4>
    2308:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    230c:	3207      	adds	r2, #7
    230e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2310:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2314:	f3c2 0246 	ubfx	r2, r2, #1, #7
    2318:	f817 c00e 	ldrb.w	ip, [r7, lr]
    231c:	f838 e01e 	ldrh.w	lr, [r8, lr, lsl #1]
    2320:	fb0c e202 	mla	r2, ip, r2, lr
    2324:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    2326:	040b      	lsls	r3, r1, #16
    2328:	bf48      	it	mi
    232a:	4252      	negmi	r2, r2
    232c:	b212      	sxth	r2, r2
	sHue16 += deltams * beatsin88(400, 5, 9);
    232e:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    2332:	b292      	uxth	r2, r2
    2334:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2338:	0c12      	lsrs	r2, r2, #16
    233a:	3205      	adds	r2, #5
    233c:	ea6f 0909 	mvn.w	r9, r9
    2340:	fa5f f989 	uxtb.w	r9, r9
    2344:	b292      	uxth	r2, r2
    2346:	fb04 a202 	mla	r2, r4, r2, sl
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    234a:	464b      	mov	r3, r9
    234c:	4458      	add	r0, fp

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    234e:	802a      	strh	r2, [r5, #0]
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    2350:	46d1      	mov	r9, sl
    2352:	b284      	uxth	r4, r0

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    2354:	25bb      	movs	r5, #187	; 0xbb
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    2356:	469a      	mov	sl, r3
		hue16 += hueinc16;
    2358:	eb09 0306 	add.w	r3, r9, r6
    235c:	fa1f f983 	uxth.w	r9, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2360:	0461      	lsls	r1, r4, #17
		uint8_t hue8 = hue16 / 256;
    2362:	ea4f 2e19 	mov.w	lr, r9, lsr #8
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2366:	f3c4 02ca 	ubfx	r2, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    236a:	d503      	bpl.n	2374 <pride()+0x258>
    236c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    2370:	3207      	adds	r2, #7
    2372:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2374:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2376:	f3c2 0146 	ubfx	r1, r2, #1, #7
    237a:	f817 c000 	ldrb.w	ip, [r7, r0]
    237e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2382:	f88d e010 	strb.w	lr, [sp, #16]
    2386:	fb0c 2201 	mla	r2, ip, r1, r2

    if( theta & 0x8000 ) y = -y;
    238a:	0423      	lsls	r3, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    238c:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    238e:	bf48      	it	mi
    2390:	4252      	negmi	r2, r2
    2392:	b212      	sxth	r2, r2

		brightnesstheta16 += brightnessthetainc16;
		uint16_t b16 = sin16(brightnesstheta16) + 32768;

		uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    2394:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    2398:	b292      	uxth	r2, r2
		uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    239a:	9b01      	ldr	r3, [sp, #4]
    239c:	fb02 f202 	mul.w	r2, r2, r2
    23a0:	0c12      	lsrs	r2, r2, #16
    23a2:	fb03 f202 	mul.w	r2, r3, r2
    23a6:	f3c2 4207 	ubfx	r2, r2, #16, #8
    23aa:	4452      	add	r2, sl
    23ac:	f89d 3000 	ldrb.w	r3, [sp]
    23b0:	f88d 2012 	strb.w	r2, [sp, #18]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    23b4:	a903      	add	r1, sp, #12
    23b6:	a804      	add	r0, sp, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    23b8:	f88d 3011 	strb.w	r3, [sp, #17]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    23bc:	f002 f928 	bl	4610 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(hue8, sat8, bri8);

		uint16_t pixelnumber = i;
		pixelnumber = (NUM_LEDS - 1) - pixelnumber;
		nblend( leds[pixelnumber], newcolor, 64);
    23c0:	4b12      	ldr	r3, [pc, #72]	; (240c <pride()+0x2f0>)
    23c2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    23c6:	4418      	add	r0, r3
    23c8:	2240      	movs	r2, #64	; 0x40
    23ca:	a903      	add	r1, sp, #12
    23cc:	3d01      	subs	r5, #1
    23ce:	f001 ff85 	bl	42dc <nblend(CRGB&, CRGB const&, unsigned char)>
    23d2:	b2ad      	uxth	r5, r5
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    23d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    23d8:	445c      	add	r4, fp
    23da:	429d      	cmp	r5, r3
    23dc:	b2a4      	uxth	r4, r4
    23de:	d1bb      	bne.n	2358 <pride()+0x23c>

		uint16_t pixelnumber = i;
		pixelnumber = (NUM_LEDS - 1) - pixelnumber;
		nblend( leds[pixelnumber], newcolor, 64);
	}
}
    23e0:	b00d      	add	sp, #52	; 0x34
    23e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23e6:	bf00      	nop
    23e8:	1fff876c 	.word	0x1fff876c
    23ec:	1fff8764 	.word	0x1fff8764
    23f0:	1fff8768 	.word	0x1fff8768
    23f4:	1fff9668 	.word	0x1fff9668
    23f8:	00007da0 	.word	0x00007da0
    23fc:	000174f8 	.word	0x000174f8
    2400:	1fff910a 	.word	0x1fff910a
    2404:	1fff922e 	.word	0x1fff922e
    2408:	0001b580 	.word	0x0001b580
    240c:	1fff8dcc 	.word	0x1fff8dcc
    2410:	00008780 	.word	0x00008780
    2414:	1fff95ec 	.word	0x1fff95ec

00002418 <colorwave()>:
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    2418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    241c:	4bbb      	ldr	r3, [pc, #748]	; (270c <colorwave()+0x2f4>)
    241e:	781a      	ldrb	r2, [r3, #0]
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    2420:	b08d      	sub	sp, #52	; 0x34
	if (mode_change) {
    2422:	b13a      	cbz	r2, 2434 <colorwave()+0x1c>
		use_palette = 1;
    2424:	4cba      	ldr	r4, [pc, #744]	; (2710 <colorwave()+0x2f8>)
		mode_change = 0;
		this_delay = 10;
    2426:	49bb      	ldr	r1, [pc, #748]	; (2714 <colorwave()+0x2fc>)
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    2428:	2501      	movs	r5, #1
		mode_change = 0;
		this_delay = 10;
    242a:	200a      	movs	r0, #10
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    242c:	2200      	movs	r2, #0
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    242e:	7025      	strb	r5, [r4, #0]
		mode_change = 0;
		this_delay = 10;
    2430:	6008      	str	r0, [r1, #0]
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    2432:	701a      	strb	r2, [r3, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2434:	49b8      	ldr	r1, [pc, #736]	; (2718 <colorwave()+0x300>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2436:	4bb9      	ldr	r3, [pc, #740]	; (271c <colorwave()+0x304>)
    2438:	680a      	ldr	r2, [r1, #0]
    243a:	920b      	str	r2, [sp, #44]	; 0x2c
	return ret;
    243c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    243e:	fb03 f000 	mul.w	r0, r3, r0
    2442:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2444:	0447      	lsls	r7, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2446:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    244a:	d503      	bpl.n	2454 <colorwave()+0x3c>
    244c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2450:	3307      	adds	r3, #7
    2452:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2454:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    2456:	f8df a30c 	ldr.w	sl, [pc, #780]	; 2764 <colorwave()+0x34c>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    245a:	f8df b30c 	ldr.w	fp, [pc, #780]	; 2768 <colorwave()+0x350>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    245e:	f81a 5002 	ldrb.w	r5, [sl, r2]
    2462:	f83b 4012 	ldrh.w	r4, [fp, r2, lsl #1]
    2466:	f3c3 0246 	ubfx	r2, r3, #1, #7
    246a:	fb05 4302 	mla	r3, r5, r2, r4

    if( theta & 0x8000 ) y = -y;
    246e:	0406      	lsls	r6, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2470:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2472:	bf48      	it	mi
    2474:	425b      	negmi	r3, r3
    2476:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2478:	680a      	ldr	r2, [r1, #0]
    247a:	920a      	str	r2, [sp, #40]	; 0x28
		this_delay = 10;
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
    247c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2480:	b29b      	uxth	r3, r3
    2482:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
	return ret;
    2486:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2488:	0c18      	lsrs	r0, r3, #16
    248a:	f64d 6308 	movw	r3, #56840	; 0xde08
    248e:	fb03 f404 	mul.w	r4, r3, r4
    2492:	0c24      	lsrs	r4, r4, #16
    2494:	4ba2      	ldr	r3, [pc, #648]	; (2720 <colorwave()+0x308>)
    2496:	3060      	adds	r0, #96	; 0x60
    2498:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    249a:	0465      	lsls	r5, r4, #17
    249c:	7018      	strb	r0, [r3, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    249e:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    24a2:	d503      	bpl.n	24ac <colorwave()+0x94>
    24a4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    24a8:	3307      	adds	r3, #7
    24aa:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    24ac:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    24ae:	f3c3 0246 	ubfx	r2, r3, #1, #7
    24b2:	f81a 6005 	ldrb.w	r6, [sl, r5]
    24b6:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
    24ba:	fb06 3302 	mla	r3, r6, r2, r3
    24be:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    24c0:	0422      	lsls	r2, r4, #16
    24c2:	bf48      	it	mi
    24c4:	425b      	negmi	r3, r3
    24c6:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24c8:	680a      	ldr	r2, [r1, #0]
    24ca:	9209      	str	r2, [sp, #36]	; 0x24
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    24cc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    24d0:	b29b      	uxth	r3, r3
    24d2:	ebc3 1903 	rsb	r9, r3, r3, lsl #4
	return ret;
    24d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    24d8:	4a92      	ldr	r2, [pc, #584]	; (2724 <colorwave()+0x30c>)
    24da:	eb03 2909 	add.w	r9, r3, r9, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    24de:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    24e2:	fb03 f404 	mul.w	r4, r3, r4
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    24e6:	ea4f 4919 	mov.w	r9, r9, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    24ea:	0c24      	lsrs	r4, r4, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    24ec:	f509 59c8 	add.w	r9, r9, #6400	; 0x1900
    24f0:	fa1f f389 	uxth.w	r3, r9
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    24f4:	0467      	lsls	r7, r4, #17
    24f6:	9303      	str	r3, [sp, #12]
    24f8:	8013      	strh	r3, [r2, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    24fa:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    24fe:	d503      	bpl.n	2508 <colorwave()+0xf0>
    2500:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2504:	3307      	adds	r3, #7
    2506:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2508:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    250a:	f3c3 0246 	ubfx	r2, r3, #1, #7
    250e:	f81a 6005 	ldrb.w	r6, [sl, r5]
    2512:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
    2516:	f8df 8254 	ldr.w	r8, [pc, #596]	; 276c <colorwave()+0x354>
    251a:	fb06 3302 	mla	r3, r6, r2, r3
    251e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2520:	0426      	lsls	r6, r4, #16
    2522:	bf48      	it	mi
    2524:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2526:	680a      	ldr	r2, [r1, #0]
    2528:	9208      	str	r2, [sp, #32]
    252a:	b21b      	sxth	r3, r3
    252c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2530:	b29b      	uxth	r3, r3
	return ret;
    2532:	9d08      	ldr	r5, [sp, #32]
    2534:	f8b8 e000 	ldrh.w	lr, [r8]
    2538:	2226      	movs	r2, #38	; 0x26
    253a:	fb02 f203 	mul.w	r2, r2, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    253e:	f647 3498 	movw	r4, #31640	; 0x7b98
    2542:	fb04 f405 	mul.w	r4, r4, r5
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2546:	0c12      	lsrs	r2, r2, #16
		this_delay = 10;
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);
    2548:	4b77      	ldr	r3, [pc, #476]	; (2728 <colorwave()+0x310>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    254a:	0c24      	lsrs	r4, r4, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    254c:	3217      	adds	r2, #23
    254e:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2550:	0465      	lsls	r5, r4, #17
    2552:	701a      	strb	r2, [r3, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2554:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2558:	d503      	bpl.n	2562 <colorwave()+0x14a>
    255a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    255e:	3307      	adds	r3, #7
    2560:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2562:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2564:	f3c3 0546 	ubfx	r5, r3, #1, #7
    2568:	f81a 3006 	ldrb.w	r3, [sl, r6]
    256c:	f83b 6016 	ldrh.w	r6, [fp, r6, lsl #1]

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    2570:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 2770 <colorwave()+0x358>
    2574:	fb03 6305 	mla	r3, r3, r5, r6

    if( theta & 0x8000 ) y = -y;
    2578:	0427      	lsls	r7, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    257a:	b29b      	uxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    257c:	680c      	ldr	r4, [r1, #0]
    257e:	9406      	str	r4, [sp, #24]

    if( theta & 0x8000 ) y = -y;
    2580:	bf48      	it	mi
    2582:	425b      	negmi	r3, r3
    2584:	b21b      	sxth	r3, r3
	return ret;
    2586:	9f06      	ldr	r7, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2588:	6809      	ldr	r1, [r1, #0]
    258a:	f8bc 4000 	ldrh.w	r4, [ip]
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    258e:	4e67      	ldr	r6, [pc, #412]	; (272c <colorwave()+0x314>)
    2590:	9107      	str	r1, [sp, #28]
    2592:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2596:	f240 41b1 	movw	r1, #1201	; 0x4b1
    259a:	b29b      	uxth	r3, r3
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    259c:	b2bf      	uxth	r7, r7
    259e:	fb01 f303 	mul.w	r3, r1, r3
    25a2:	4963      	ldr	r1, [pc, #396]	; (2730 <colorwave()+0x318>)
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    25a4:	8835      	ldrh	r5, [r6, #0]
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    25a6:	800f      	strh	r7, [r1, #0]
	deltams = ms - sLastMillis;
    25a8:	1b3c      	subs	r4, r7, r4
    25aa:	b2a4      	uxth	r4, r4
    25ac:	4961      	ldr	r1, [pc, #388]	; (2734 <colorwave()+0x31c>)
	sLastMillis = ms;
    25ae:	f8ac 7000 	strh.w	r7, [ip]
	sPseudotime += deltams * msmultiplier;
    25b2:	fb14 5202 	smlabb	r2, r4, r2, r5
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    25b6:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 2774 <colorwave()+0x35c>
	return ret;
    25ba:	9d07      	ldr	r5, [sp, #28]

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    25bc:	800c      	strh	r4, [r1, #0]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    25be:	0c1b      	lsrs	r3, r3, #16
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    25c0:	b291      	uxth	r1, r2
    25c2:	8031      	strh	r1, [r6, #0]
    25c4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);
    25c8:	4e5b      	ldr	r6, [pc, #364]	; (2738 <colorwave()+0x320>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    25ca:	fb0c f505 	mul.w	r5, ip, r5
    25ce:	0c2d      	lsrs	r5, r5, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    25d0:	b29b      	uxth	r3, r3
    25d2:	8033      	strh	r3, [r6, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    25d4:	046e      	lsls	r6, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    25d6:	f3c5 02ca 	ubfx	r2, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    25da:	d503      	bpl.n	25e4 <colorwave()+0x1cc>
    25dc:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    25e0:	3207      	adds	r2, #7
    25e2:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    25e4:	0a16      	lsrs	r6, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    25e6:	f3c2 0246 	ubfx	r2, r2, #1, #7
    25ea:	f81a 7006 	ldrb.w	r7, [sl, r6]
    25ee:	f83b 6016 	ldrh.w	r6, [fp, r6, lsl #1]
    25f2:	f8df 9184 	ldr.w	r9, [pc, #388]	; 2778 <colorwave()+0x360>
    25f6:	fb07 6202 	mla	r2, r7, r2, r6
    25fa:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    25fc:	042d      	lsls	r5, r5, #16
    25fe:	bf48      	it	mi
    2600:	4252      	negmi	r2, r2
    2602:	b212      	sxth	r2, r2

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    2604:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    2608:	b292      	uxth	r2, r2
    260a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    260e:	0c12      	lsrs	r2, r2, #16
    2610:	3205      	adds	r2, #5
    2612:	b292      	uxth	r2, r2
    2614:	fb04 e402 	mla	r4, r4, r2, lr
	brightnesstheta16 = sPseudotime;
    2618:	4f48      	ldr	r7, [pc, #288]	; (273c <colorwave()+0x324>)
    261a:	4e49      	ldr	r6, [pc, #292]	; (2740 <colorwave()+0x328>)
    261c:	9a03      	ldr	r2, [sp, #12]

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    261e:	f8a8 4000 	strh.w	r4, [r8]
	brightnesstheta16 = sPseudotime;
    2622:	25bb      	movs	r5, #187	; 0xbb
    2624:	4c47      	ldr	r4, [pc, #284]	; (2744 <colorwave()+0x32c>)
    2626:	9503      	str	r5, [sp, #12]
    2628:	eb05 0845 	add.w	r8, r5, r5, lsl #1
    262c:	44a0      	add	r8, r4
    262e:	2404      	movs	r4, #4

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
    2630:	4473      	add	r3, lr
    2632:	b29b      	uxth	r3, r3
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
    2634:	ea4f 1ed3 	mov.w	lr, r3, lsr #7
			if (h16_128 & 0x100) {
    2638:	f41e 7f80 	tst.w	lr, #256	; 0x100
				hue8 = 255 - (h16_128 >> 1);
    263c:	ea6f 2c13 	mvn.w	ip, r3, lsr #8
			}
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
    2640:	440a      	add	r2, r1
    2642:	b292      	uxth	r2, r2
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
    2644:	fa5f fc8c 	uxtb.w	ip, ip
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
    2648:	8033      	strh	r3, [r6, #0]
			h16_128 = hue16 >> 7;
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
			}
			else {
				hue8 = h16_128 >> 1;
    264a:	bf08      	it	eq
    264c:	ea4f 2c13 	moveq.w	ip, r3, lsr #8

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
    2650:	4d3d      	ldr	r5, [pc, #244]	; (2748 <colorwave()+0x330>)
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
			}
			else {
				hue8 = h16_128 >> 1;
    2652:	4b3e      	ldr	r3, [pc, #248]	; (274c <colorwave()+0x334>)

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
    2654:	f8a5 e000 	strh.w	lr, [r5]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2658:	0451      	lsls	r1, r2, #17
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
			}
			else {
				hue8 = h16_128 >> 1;
    265a:	f883 c000 	strb.w	ip, [r3]
			}

			brightnesstheta16 += brightnessthetainc16;
    265e:	803a      	strh	r2, [r7, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2660:	f3c2 0eca 	ubfx	lr, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2664:	d505      	bpl.n	2672 <colorwave()+0x25a>
    2666:	f5ce 6eff 	rsb	lr, lr, #2040	; 0x7f8
    266a:	f10e 0e07 	add.w	lr, lr, #7
    266e:	fa1f fe8e 	uxth.w	lr, lr

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2672:	ea4f 211e 	mov.w	r1, lr, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2676:	f3ce 0346 	ubfx	r3, lr, #1, #7
    267a:	f81a e001 	ldrb.w	lr, [sl, r1]
    267e:	f83b 1011 	ldrh.w	r1, [fp, r1, lsl #1]
			b16 = sin16(brightnesstheta16) + 32768;

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    2682:	4d33      	ldr	r5, [pc, #204]	; (2750 <colorwave()+0x338>)
    2684:	fb0e 1e03 	mla	lr, lr, r3, r1
    2688:	fa1f fe8e 	uxth.w	lr, lr

    if( theta & 0x8000 ) y = -y;
    268c:	0413      	lsls	r3, r2, #16
    268e:	bf48      	it	mi
    2690:	f1ce 0e00 	rsbmi	lr, lr, #0
    2694:	fa0f fe8e 	sxth.w	lr, lr
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;
    2698:	f5ae 4e00 	sub.w	lr, lr, #32768	; 0x8000
    269c:	fa1f fe8e 	uxth.w	lr, lr

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    26a0:	fb0e f20e 	mul.w	r2, lr, lr
    26a4:	0c12      	lsrs	r2, r2, #16
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    26a6:	fb02 f300 	mul.w	r3, r2, r0
    26aa:	43c0      	mvns	r0, r0
    26ac:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    26b0:	ebcc 130c 	rsb	r3, ip, ip, lsl #4
    26b4:	eb0c 1c03 	add.w	ip, ip, r3, lsl #4

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    26b8:	2301      	movs	r3, #1
    26ba:	9300      	str	r3, [sp, #0]
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    26bc:	802a      	strh	r2, [r5, #0]
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;
    26be:	4b25      	ldr	r3, [pc, #148]	; (2754 <colorwave()+0x33c>)

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    26c0:	4d25      	ldr	r5, [pc, #148]	; (2758 <colorwave()+0x340>)
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;
    26c2:	f8a3 e000 	strh.w	lr, [r3]
    26c6:	f3cc 2c07 	ubfx	ip, ip, #8, #8

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    26ca:	b2c0      	uxtb	r0, r0

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    26cc:	4603      	mov	r3, r0
    26ce:	4662      	mov	r2, ip
			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    26d0:	7028      	strb	r0, [r5, #0]

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    26d2:	4922      	ldr	r1, [pc, #136]	; (275c <colorwave()+0x344>)
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);
    26d4:	f889 c000 	strb.w	ip, [r9]

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    26d8:	a805      	add	r0, sp, #20
    26da:	f001 fe4f 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			pixelnumber = i;
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;
    26de:	4b20      	ldr	r3, [pc, #128]	; (2760 <colorwave()+0x348>)
    26e0:	f8bd 500c 	ldrh.w	r5, [sp, #12]
    26e4:	801d      	strh	r5, [r3, #0]

			nblend(leds[pixelnumber], newcolor, 128);
    26e6:	2280      	movs	r2, #128	; 0x80
    26e8:	a905      	add	r1, sp, #20
    26ea:	4640      	mov	r0, r8
    26ec:	3c01      	subs	r4, #1
    26ee:	f001 fdf5 	bl	42dc <nblend(CRGB&, CRGB const&, unsigned char)>
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
    26f2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    26f6:	d041      	beq.n	277c <colorwave()+0x364>
    26f8:	4b0f      	ldr	r3, [pc, #60]	; (2738 <colorwave()+0x320>)
    26fa:	4a0a      	ldr	r2, [pc, #40]	; (2724 <colorwave()+0x30c>)
    26fc:	4808      	ldr	r0, [pc, #32]	; (2720 <colorwave()+0x308>)
    26fe:	f8b6 e000 	ldrh.w	lr, [r6]
    2702:	881b      	ldrh	r3, [r3, #0]
    2704:	8839      	ldrh	r1, [r7, #0]
    2706:	8812      	ldrh	r2, [r2, #0]
    2708:	7800      	ldrb	r0, [r0, #0]
    270a:	e791      	b.n	2630 <colorwave()+0x218>
    270c:	1fff876c 	.word	0x1fff876c
    2710:	1fff8764 	.word	0x1fff8764
    2714:	1fff8768 	.word	0x1fff8768
    2718:	1fff9668 	.word	0x1fff9668
    271c:	000174f8 	.word	0x000174f8
    2720:	1fff9230 	.word	0x1fff9230
    2724:	1fff9100 	.word	0x1fff9100
    2728:	1fff8dc8 	.word	0x1fff8dc8
    272c:	1fff92e2 	.word	0x1fff92e2
    2730:	1fff8cc4 	.word	0x1fff8cc4
    2734:	1fff94be 	.word	0x1fff94be
    2738:	1fff93f8 	.word	0x1fff93f8
    273c:	1fff8cc6 	.word	0x1fff8cc6
    2740:	1fff9232 	.word	0x1fff9232
    2744:	1fff8dcc 	.word	0x1fff8dcc
    2748:	1fff92e6 	.word	0x1fff92e6
    274c:	1fff9346 	.word	0x1fff9346
    2750:	1fff9108 	.word	0x1fff9108
    2754:	1fff93f0 	.word	0x1fff93f0
    2758:	1fff922c 	.word	0x1fff922c
    275c:	1fff910c 	.word	0x1fff910c
    2760:	1fff90fc 	.word	0x1fff90fc
    2764:	00007da0 	.word	0x00007da0
    2768:	00008780 	.word	0x00008780
    276c:	1fff93ae 	.word	0x1fff93ae
    2770:	1fff93f2 	.word	0x1fff93f2
    2774:	0001b580 	.word	0x0001b580
    2778:	1fff95b1 	.word	0x1fff95b1
    277c:	9d03      	ldr	r5, [sp, #12]
    277e:	3d01      	subs	r5, #1
    2780:	b2ad      	uxth	r5, r5
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    2782:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2786:	429d      	cmp	r5, r3
    2788:	d009      	beq.n	279e <colorwave()+0x386>
    278a:	4b06      	ldr	r3, [pc, #24]	; (27a4 <colorwave()+0x38c>)
    278c:	4a06      	ldr	r2, [pc, #24]	; (27a8 <colorwave()+0x390>)
    278e:	4807      	ldr	r0, [pc, #28]	; (27ac <colorwave()+0x394>)
    2790:	f8b6 e000 	ldrh.w	lr, [r6]
    2794:	881b      	ldrh	r3, [r3, #0]
    2796:	8839      	ldrh	r1, [r7, #0]
    2798:	8812      	ldrh	r2, [r2, #0]
    279a:	7800      	ldrb	r0, [r0, #0]
    279c:	e742      	b.n	2624 <colorwave()+0x20c>
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;

			nblend(leds[pixelnumber], newcolor, 128);
		}
	}
}
    279e:	b00d      	add	sp, #52	; 0x34
    27a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27a4:	1fff93f8 	.word	0x1fff93f8
    27a8:	1fff9100 	.word	0x1fff9100
    27ac:	1fff9230 	.word	0x1fff9230

000027b0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
    27b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    27b4:	780d      	ldrb	r5, [r1, #0]
    27b6:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    27b8:	784d      	ldrb	r5, [r1, #1]
    27ba:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    27bc:	7889      	ldrb	r1, [r1, #2]
    27be:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    27c0:	7811      	ldrb	r1, [r2, #0]
    27c2:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
    27c4:	7851      	ldrb	r1, [r2, #1]
    27c6:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
    27c8:	7892      	ldrb	r2, [r2, #2]
    27ca:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    27cc:	781a      	ldrb	r2, [r3, #0]
    27ce:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
    27d0:	785a      	ldrb	r2, [r3, #1]
    27d2:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
    27d4:	789b      	ldrb	r3, [r3, #2]
    27d6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    27da:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    27dc:	f89a b000 	ldrb.w	fp, [sl]
    27e0:	f880 b009 	strb.w	fp, [r0, #9]
    27e4:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    27e8:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
    27ec:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    27f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    27f2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    27f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    27f6:	9911      	ldr	r1, [sp, #68]	; 0x44
    27f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    27fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
    27fc:	f89a b001 	ldrb.w	fp, [sl, #1]
    2800:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
    2804:	f89a a002 	ldrb.w	sl, [sl, #2]
    2808:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    280c:	f899 a000 	ldrb.w	sl, [r9]
    2810:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
    2814:	f899 a001 	ldrb.w	sl, [r9, #1]
    2818:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
    281c:	f899 9002 	ldrb.w	r9, [r9, #2]
    2820:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2824:	f898 9000 	ldrb.w	r9, [r8]
    2828:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
    282c:	f898 9001 	ldrb.w	r9, [r8, #1]
    2830:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
    2834:	f898 8002 	ldrb.w	r8, [r8, #2]
    2838:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    283c:	f89c 8000 	ldrb.w	r8, [ip]
    2840:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
    2844:	f89c 8001 	ldrb.w	r8, [ip, #1]
    2848:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
    284c:	f89c c002 	ldrb.w	ip, [ip, #2]
    2850:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2854:	f89e c000 	ldrb.w	ip, [lr]
    2858:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
    285c:	f89e c001 	ldrb.w	ip, [lr, #1]
    2860:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
    2864:	f89e e002 	ldrb.w	lr, [lr, #2]
    2868:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    286c:	f897 e000 	ldrb.w	lr, [r7]
    2870:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
    2874:	f897 e001 	ldrb.w	lr, [r7, #1]
    2878:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
    287c:	78bf      	ldrb	r7, [r7, #2]
    287e:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2880:	7837      	ldrb	r7, [r6, #0]
    2882:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
    2884:	7877      	ldrb	r7, [r6, #1]
    2886:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
    2888:	78b6      	ldrb	r6, [r6, #2]
    288a:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    288c:	782e      	ldrb	r6, [r5, #0]
    288e:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
    2890:	786e      	ldrb	r6, [r5, #1]
    2892:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
    2894:	78ad      	ldrb	r5, [r5, #2]
    2896:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    289a:	780d      	ldrb	r5, [r1, #0]
    289c:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
    28a0:	784d      	ldrb	r5, [r1, #1]
    28a2:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
    28a6:	7889      	ldrb	r1, [r1, #2]
    28a8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28ac:	7811      	ldrb	r1, [r2, #0]
    28ae:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
    28b2:	7851      	ldrb	r1, [r2, #1]
    28b4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
    28b8:	7892      	ldrb	r2, [r2, #2]
    28ba:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    28c0:	7812      	ldrb	r2, [r2, #0]
    28c2:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
    28c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    28c8:	7852      	ldrb	r2, [r2, #1]
    28ca:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
    28ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    28d0:	7892      	ldrb	r2, [r2, #2]
    28d2:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    28d8:	7812      	ldrb	r2, [r2, #0]
    28da:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
    28de:	9a14      	ldr	r2, [sp, #80]	; 0x50
    28e0:	7852      	ldrb	r2, [r2, #1]
    28e2:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
    28e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    28e8:	7892      	ldrb	r2, [r2, #2]
    28ea:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28ee:	781a      	ldrb	r2, [r3, #0]
    28f0:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
    28f4:	785a      	ldrb	r2, [r3, #1]
    28f6:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
    28fa:	789b      	ldrb	r3, [r3, #2]
    28fc:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
    2900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002904 <updatePaletteIndex(CRGBPalette16)>:
// Count of how many cpt-city gradients are defined:
const uint8_t g_gradient_palette_count =
  sizeof( g_gradient_palettes) / sizeof( TProgmemRGBGradientPalettePtr );

// Find index of current (target) palette
void updatePaletteIndex(CRGBPalette16 pal){
    2904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2908:	b09b      	sub	sp, #108	; 0x6c
    290a:	4b3f      	ldr	r3, [pc, #252]	; (2a08 <updatePaletteIndex(CRGBPalette16)+0x104>)
    290c:	9309      	str	r3, [sp, #36]	; 0x24
    290e:	1e43      	subs	r3, r0, #1
    2910:	930a      	str	r3, [sp, #40]	; 0x28
    2912:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    2916:	930b      	str	r3, [sp, #44]	; 0x2c
    2918:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2a10 <updatePaletteIndex(CRGBPalette16)+0x10c>
	for (int i = 0; i < g_gradient_palette_count; i++){
    291c:	2300      	movs	r3, #0
    291e:	9308      	str	r3, [sp, #32]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2920:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2922:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    2926:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2928:	3701      	adds	r7, #1
        } while ( u.index != 255);
    292a:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    292c:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    292e:	d1f8      	bne.n	2922 <updatePaletteIndex(CRGBPalette16)+0x1e>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2930:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2934:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    2936:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    293a:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    293e:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2940:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    2942:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    2946:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    294a:	2400      	movs	r4, #0
    294c:	46c8      	mov	r8, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    294e:	f858 5f04 	ldr.w	r5, [r8, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2952:	f3c5 2707 	ubfx	r7, r5, #8, #8
    2956:	f3c5 4607 	ubfx	r6, r5, #16, #8
    295a:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    295c:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2960:	9104      	str	r1, [sp, #16]
    2962:	b2f1      	uxtb	r1, r6
    2964:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    2966:	fa5f f18c 	uxtb.w	r1, ip
    296a:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    296c:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    296e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2970:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2972:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2976:	aa0d      	add	r2, sp, #52	; 0x34
    2978:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    297a:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    297e:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2982:	d80c      	bhi.n	299e <updatePaletteIndex(CRGBPalette16)+0x9a>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    2984:	9906      	ldr	r1, [sp, #24]
    2986:	458c      	cmp	ip, r1
    2988:	dc07      	bgt.n	299a <updatePaletteIndex(CRGBPalette16)+0x96>
    298a:	290f      	cmp	r1, #15
    298c:	d005      	beq.n	299a <updatePaletteIndex(CRGBPalette16)+0x96>
                    istart8 = lastSlotUsed + 1;
    298e:	3101      	adds	r1, #1
    2990:	b2c9      	uxtb	r1, r1
    2992:	428b      	cmp	r3, r1
    2994:	9103      	str	r1, [sp, #12]
    2996:	bf38      	it	cc
    2998:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    299a:	b259      	sxtb	r1, r3
    299c:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    299e:	a90c      	add	r1, sp, #48	; 0x30
    29a0:	9100      	str	r1, [sp, #0]
    29a2:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    29a4:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
    29a8:	f88d a035 	strb.w	sl, [sp, #53]	; 0x35
        b = rhs.b;
    29ac:	f88d e036 	strb.w	lr, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    29b0:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
    29b4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
    29b8:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
    29bc:	f001 fbfa 	bl	41b4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    29c0:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    29c2:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    29c6:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    29ca:	46ce      	mov	lr, r9
    29cc:	d1bf      	bne.n	294e <updatePaletteIndex(CRGBPalette16)+0x4a>
    29ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    29d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    29d2:	aa0e      	add	r2, sp, #56	; 0x38
    29d4:	e001      	b.n	29da <updatePaletteIndex(CRGBPalette16)+0xd6>
    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
    29d6:	42a3      	cmp	r3, r4
    29d8:	d00f      	beq.n	29fa <updatePaletteIndex(CRGBPalette16)+0xf6>
            if( *p != *q) return false;
    29da:	f812 1b01 	ldrb.w	r1, [r2], #1
    29de:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    29e2:	4288      	cmp	r0, r1
    29e4:	d0f7      	beq.n	29d6 <updatePaletteIndex(CRGBPalette16)+0xd2>
    29e6:	9b08      	ldr	r3, [sp, #32]
    29e8:	3301      	adds	r3, #1
    29ea:	2b5d      	cmp	r3, #93	; 0x5d
    29ec:	9308      	str	r3, [sp, #32]
    29ee:	d008      	beq.n	2a02 <updatePaletteIndex(CRGBPalette16)+0xfe>
    29f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29f2:	f853 9f04 	ldr.w	r9, [r3, #4]!
    29f6:	9309      	str	r3, [sp, #36]	; 0x24
    29f8:	e792      	b.n	2920 <updatePaletteIndex(CRGBPalette16)+0x1c>
		if (pal == g_gradient_palettes[i]){
			palette_index = i;
    29fa:	4b04      	ldr	r3, [pc, #16]	; (2a0c <updatePaletteIndex(CRGBPalette16)+0x108>)
    29fc:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2a00:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
    2a02:	b01b      	add	sp, #108	; 0x6c
    2a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a08:	00007dcc 	.word	0x00007dcc
    2a0c:	1fff95ba 	.word	0x1fff95ba
    2a10:	00008a78 	.word	0x00008a78

00002a14 <prepare_for_explosion()>:
float spark_fade[MAX_NUMBER_OF_SPARKS];
uint8_t firework_bg_fade = 128;
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
    2a14:	b5f0      	push	{r4, r5, r6, r7, lr}
	random16_add_entropy(analogRead(2));
    2a16:	2002      	movs	r0, #2
float spark_fade[MAX_NUMBER_OF_SPARKS];
uint8_t firework_bg_fade = 128;
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
    2a18:	b083      	sub	sp, #12
	random16_add_entropy(analogRead(2));
    2a1a:	f002 f96b 	bl	4cf4 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    2a1e:	491b      	ldr	r1, [pc, #108]	; (2a8c <prepare_for_explosion()+0x78>)
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
	firework_hue = random8();
    2a20:	4a1b      	ldr	r2, [pc, #108]	; (2a90 <prepare_for_explosion()+0x7c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a22:	880b      	ldrh	r3, [r1, #0]
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
    2a24:	4e1b      	ldr	r6, [pc, #108]	; (2a94 <prepare_for_explosion()+0x80>)
	current_stage = FADEUP;
    2a26:	4d1c      	ldr	r5, [pc, #112]	; (2a98 <prepare_for_explosion()+0x84>)
	firework_hue = random8();
	firework_bri = 0;
    2a28:	4c1c      	ldr	r4, [pc, #112]	; (2a9c <prepare_for_explosion()+0x88>)
    2a2a:	4418      	add	r0, r3
    2a2c:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    2a30:	f243 6719 	movw	r7, #13849	; 0x3619
    2a34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2a38:	443b      	add	r3, r7
    2a3a:	b298      	uxth	r0, r3
    2a3c:	eb00 2e40 	add.w	lr, r0, r0, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a40:	eb00 2310 	add.w	r3, r0, r0, lsr #8
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
    2a44:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a46:	eb00 008e 	add.w	r0, r0, lr, lsl #2
    2a4a:	4438      	add	r0, r7
    2a4c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    2a50:	ebc3 1307 	rsb	r3, r3, r7, lsl #4
    2a54:	b280      	uxth	r0, r0
	current_stage = FADEUP;
	firework_hue = random8();
	firework_bri = 0;
	exploded = false;
    2a56:	f8df e04c 	ldr.w	lr, [pc, #76]	; 2aa4 <prepare_for_explosion()+0x90>
    2a5a:	8008      	strh	r0, [r1, #0]
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
    2a5c:	11db      	asrs	r3, r3, #7
	current_stage = FADEUP;
	firework_hue = random8();
    2a5e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
    2a62:	2700      	movs	r7, #0
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
    2a64:	3314      	adds	r3, #20
	current_stage = FADEUP;
	firework_hue = random8();
    2a66:	7010      	strb	r0, [r2, #0]
	firework_bri = 0;
	exploded = false;
	fill_solid(leds, NUM_LEDS, CRGB::Black);
    2a68:	21bc      	movs	r1, #188	; 0xbc
    2a6a:	aa01      	add	r2, sp, #4
    2a6c:	480c      	ldr	r0, [pc, #48]	; (2aa0 <prepare_for_explosion()+0x8c>)
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
    2a6e:	7033      	strb	r3, [r6, #0]
	current_stage = FADEUP;
    2a70:	702f      	strb	r7, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2a72:	f88d 7004 	strb.w	r7, [sp, #4]
    2a76:	f88d 7005 	strb.w	r7, [sp, #5]
    2a7a:	f88d 7006 	strb.w	r7, [sp, #6]
	firework_hue = random8();
	firework_bri = 0;
    2a7e:	7027      	strb	r7, [r4, #0]
	exploded = false;
    2a80:	f88e 7000 	strb.w	r7, [lr]
	fill_solid(leds, NUM_LEDS, CRGB::Black);
    2a84:	f001 fb66 	bl	4154 <fill_solid(CRGB*, int, CRGB const&)>
}
    2a88:	b003      	add	sp, #12
    2a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a8c:	1fff8782 	.word	0x1fff8782
    2a90:	1fff9347 	.word	0x1fff9347
    2a94:	1fff934d 	.word	0x1fff934d
    2a98:	1fff8dc9 	.word	0x1fff8dc9
    2a9c:	1fff922d 	.word	0x1fff922d
    2aa0:	1fff8dcc 	.word	0x1fff8dcc
    2aa4:	1fff8cc8 	.word	0x1fff8cc8

00002aa8 <fadeup()>:

void fadeup() {
    2aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (exploded) {
    2aac:	4c55      	ldr	r4, [pc, #340]	; (2c04 <fadeup()+0x15c>)
    2aae:	7823      	ldrb	r3, [r4, #0]
	firework_bri = 0;
	exploded = false;
	fill_solid(leds, NUM_LEDS, CRGB::Black);
}

void fadeup() {
    2ab0:	b085      	sub	sp, #20
	if (exploded) {
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	f000 8087 	beq.w	2bc6 <fadeup()+0x11e>
    2ab8:	4b53      	ldr	r3, [pc, #332]	; (2c08 <fadeup()+0x160>)
    2aba:	4a54      	ldr	r2, [pc, #336]	; (2c0c <fadeup()+0x164>)
    2abc:	881b      	ldrh	r3, [r3, #0]
    2abe:	7812      	ldrb	r2, [r2, #0]
    2ac0:	9201      	str	r2, [sp, #4]
    2ac2:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2ac6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2aca:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2ace:	3119      	adds	r1, #25
    2ad0:	fa1f fa81 	uxth.w	sl, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2ad4:	eb0a 231a 	add.w	r3, sl, sl, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2ad8:	b2db      	uxtb	r3, r3
    2ada:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    2ade:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    2ae2:	ea4f 2929 	mov.w	r9, r9, asr #8
    2ae6:	4610      	mov	r0, r2
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    2ae8:	f8df e14c 	ldr.w	lr, [pc, #332]	; 2c38 <fadeup()+0x190>
	fill_solid(leds, NUM_LEDS, CRGB::Black);
}

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
    2aec:	4a48      	ldr	r2, [pc, #288]	; (2c10 <fadeup()+0x168>)
    2aee:	f8df 814c 	ldr.w	r8, [pc, #332]	; 2c3c <fadeup()+0x194>
    2af2:	4d48      	ldr	r5, [pc, #288]	; (2c14 <fadeup()+0x16c>)
    2af4:	4f48      	ldr	r7, [pc, #288]	; (2c18 <fadeup()+0x170>)
    2af6:	4e49      	ldr	r6, [pc, #292]	; (2c1c <fadeup()+0x174>)
    2af8:	4c49      	ldr	r4, [pc, #292]	; (2c20 <fadeup()+0x178>)
    2afa:	f109 0914 	add.w	r9, r9, #20
    2afe:	2301      	movs	r3, #1
    2b00:	fa5f f989 	uxtb.w	r9, r9
    2b04:	7013      	strb	r3, [r2, #0]
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    2b06:	f88e 9000 	strb.w	r9, [lr]
    2b0a:	f003 ffbd 	bl	6a88 <__aeabi_ui2f>
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    2b0e:	4643      	mov	r3, r8
}

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    2b10:	f04f 0b00 	mov.w	fp, #0
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    2b14:	46a8      	mov	r8, r5
    2b16:	9000      	str	r0, [sp, #0]
    2b18:	461d      	mov	r5, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2b1a:	eb0a 234a 	add.w	r3, sl, sl, lsl #9
    2b1e:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
    2b22:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    2b26:	f10a 0a19 	add.w	sl, sl, #25
    2b2a:	fa1f fa8a 	uxth.w	sl, sl
    2b2e:	2373      	movs	r3, #115	; 0x73
    2b30:	fb03 f00a 	mul.w	r0, r3, sl
    2b34:	0c00      	lsrs	r0, r0, #16
void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
    2b36:	9b00      	ldr	r3, [sp, #0]
    2b38:	f845 3f04 	str.w	r3, [r5, #4]!
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    2b3c:	300a      	adds	r0, #10
    2b3e:	b280      	uxth	r0, r0
    2b40:	f003 ffa2 	bl	6a88 <__aeabi_ui2f>
    2b44:	4937      	ldr	r1, [pc, #220]	; (2c24 <fadeup()+0x17c>)
    2b46:	f004 f8ab 	bl	6ca0 <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2b4a:	eb0a 234a 	add.w	r3, sl, sl, lsl #9
    2b4e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    2b52:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2b56:	3319      	adds	r3, #25
    2b58:	b29b      	uxth	r3, r3
    2b5a:	eb03 2a43 	add.w	sl, r3, r3, lsl #9
    2b5e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    2b62:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    2b66:	f10a 0a19 	add.w	sl, sl, #25
    2b6a:	fa1f fa8a 	uxth.w	sl, sl
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2b6e:	eb0a 211a 	add.w	r1, sl, sl, lsr #8
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
    2b72:	b2c9      	uxtb	r1, r1
    2b74:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2b78:	11c9      	asrs	r1, r1, #7
    2b7a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
    2b7e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			spark_fade[i] = random8(5, 15);
    2b82:	3105      	adds	r1, #5
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    2b84:	f847 0f04 	str.w	r0, [r7, #4]!
			spark_dir[i] = random8(0, 2);
    2b88:	f806 3f01 	strb.w	r3, [r6, #1]!
			spark_fade[i] = random8(5, 15);
    2b8c:	b2c8      	uxtb	r0, r1
    2b8e:	f003 ff7b 	bl	6a88 <__aeabi_ui2f>
    2b92:	f10b 0b01 	add.w	fp, fp, #1

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
    2b96:	fa5f f38b 	uxtb.w	r3, fp
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
			spark_bri[i] = 255;
    2b9a:	4a23      	ldr	r2, [pc, #140]	; (2c28 <fadeup()+0x180>)
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
    2b9c:	f848 0f04 	str.w	r0, [r8, #4]!

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
    2ba0:	4599      	cmp	r9, r3
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
			spark_bri[i] = 255;
    2ba2:	f844 2f04 	str.w	r2, [r4, #4]!

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
    2ba6:	d8b8      	bhi.n	2b1a <fadeup()+0x72>
    2ba8:	4b17      	ldr	r3, [pc, #92]	; (2c08 <fadeup()+0x160>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2baa:	4820      	ldr	r0, [pc, #128]	; (2c2c <fadeup()+0x184>)
    2bac:	f8a3 a000 	strh.w	sl, [r3]
    2bb0:	9b01      	ldr	r3, [sp, #4]
    2bb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2bb6:	18c1      	adds	r1, r0, r3
    2bb8:	22ff      	movs	r2, #255	; 0xff
    2bba:	54c2      	strb	r2, [r0, r3]
        g = (colorcode >>  8) & 0xFF;
    2bbc:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
    2bbe:	708a      	strb	r2, [r1, #2]
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
		if (firework_bri >= 255) {
			exploded = true;
		}
	}
}
    2bc0:	b005      	add	sp, #20
    2bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			spark_bri[i] = 255;
		}
		leds[firework_position] = CRGB::White;
	}
	else {
		firework_bri += 5;
    2bc6:	4d1a      	ldr	r5, [pc, #104]	; (2c30 <fadeup()+0x188>)
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
    2bc8:	4a10      	ldr	r2, [pc, #64]	; (2c0c <fadeup()+0x164>)
			spark_bri[i] = 255;
		}
		leds[firework_position] = CRGB::White;
	}
	else {
		firework_bri += 5;
    2bca:	782b      	ldrb	r3, [r5, #0]
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
    2bcc:	7812      	ldrb	r2, [r2, #0]
    2bce:	4819      	ldr	r0, [pc, #100]	; (2c34 <fadeup()+0x18c>)
    2bd0:	4916      	ldr	r1, [pc, #88]	; (2c2c <fadeup()+0x184>)
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2bd2:	7806      	ldrb	r6, [r0, #0]
    2bd4:	f88d 600c 	strb.w	r6, [sp, #12]
    2bd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
			spark_bri[i] = 255;
		}
		leds[firework_position] = CRGB::White;
	}
	else {
		firework_bri += 5;
    2bdc:	3305      	adds	r3, #5
    2bde:	b2db      	uxtb	r3, r3
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2be0:	4411      	add	r1, r2
    2be2:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2be4:	22ff      	movs	r2, #255	; 0xff
    2be6:	702b      	strb	r3, [r5, #0]
    2be8:	f88d 300e 	strb.w	r3, [sp, #14]
    2bec:	f88d 200d 	strb.w	r2, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2bf0:	f001 fd0e 	bl	4610 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
		if (firework_bri >= 255) {
    2bf4:	782b      	ldrb	r3, [r5, #0]
    2bf6:	2bff      	cmp	r3, #255	; 0xff
			exploded = true;
    2bf8:	bf04      	itt	eq
    2bfa:	2301      	moveq	r3, #1
    2bfc:	7023      	strbeq	r3, [r4, #0]
		}
	}
}
    2bfe:	b005      	add	sp, #20
    2c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c04:	1fff8cc8 	.word	0x1fff8cc8
    2c08:	1fff8782 	.word	0x1fff8782
    2c0c:	1fff934d 	.word	0x1fff934d
    2c10:	1fff8dc9 	.word	0x1fff8dc9
    2c14:	1fff94bc 	.word	0x1fff94bc
    2c18:	1fff8cc8 	.word	0x1fff8cc8
    2c1c:	1fff93b3 	.word	0x1fff93b3
    2c20:	1fff9000 	.word	0x1fff9000
    2c24:	42c80000 	.word	0x42c80000
    2c28:	437f0000 	.word	0x437f0000
    2c2c:	1fff8dcc 	.word	0x1fff8dcc
    2c30:	1fff922d 	.word	0x1fff922d
    2c34:	1fff9347 	.word	0x1fff9347
    2c38:	1fff9240 	.word	0x1fff9240
    2c3c:	1fff9138 	.word	0x1fff9138

00002c40 <explosion()>:

void explosion() {
    2c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
    2c44:	4b64      	ldr	r3, [pc, #400]	; (2dd8 <explosion()+0x198>)
    2c46:	4865      	ldr	r0, [pc, #404]	; (2ddc <explosion()+0x19c>)
    2c48:	781a      	ldrb	r2, [r3, #0]
			exploded = true;
		}
	}
}

void explosion() {
    2c4a:	b085      	sub	sp, #20
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
    2c4c:	21bc      	movs	r1, #188	; 0xbc
    2c4e:	f001 fb43 	bl	42d8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    2c52:	4b63      	ldr	r3, [pc, #396]	; (2de0 <explosion()+0x1a0>)
	}
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
    2c54:	4a63      	ldr	r2, [pc, #396]	; (2de4 <explosion()+0x1a4>)
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    2c56:	781b      	ldrb	r3, [r3, #0]
	}
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
    2c58:	2400      	movs	r4, #0
    2c5a:	7014      	strb	r4, [r2, #0]
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	f000 808b 	beq.w	2d78 <explosion()+0x138>
    2c62:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 2e18 <explosion()+0x1d8>
    2c66:	4e60      	ldr	r6, [pc, #384]	; (2de8 <explosion()+0x1a8>)
    2c68:	4d5c      	ldr	r5, [pc, #368]	; (2ddc <explosion()+0x19c>)
    2c6a:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 2e1c <explosion()+0x1dc>
    2c6e:	ab03      	add	r3, sp, #12
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
    2c70:	46c1      	mov	r9, r8
    2c72:	9301      	str	r3, [sp, #4]
    2c74:	e03d      	b.n	2cf2 <explosion()+0xb2>
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
    2c76:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
    2c7a:	4658      	mov	r0, fp
    2c7c:	f003 fe54 	bl	6928 <__addsf3>
    2c80:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    2c84:	4607      	mov	r7, r0
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    2c86:	2100      	movs	r1, #0
    2c88:	4638      	mov	r0, r7
    2c8a:	f004 f8f3 	bl	6e74 <__aeabi_fcmplt>
    2c8e:	4957      	ldr	r1, [pc, #348]	; (2dec <explosion()+0x1ac>)
    2c90:	2800      	cmp	r0, #0
    2c92:	d168      	bne.n	2d66 <explosion()+0x126>
    2c94:	4638      	mov	r0, r7
    2c96:	f004 f90b 	bl	6eb0 <__aeabi_fcmpgt>
    2c9a:	b100      	cbz	r0, 2c9e <explosion()+0x5e>
    2c9c:	4f53      	ldr	r7, [pc, #332]	; (2dec <explosion()+0x1ac>)
		spark_vel[x] *= gravity;
    2c9e:	4b54      	ldr	r3, [pc, #336]	; (2df0 <explosion()+0x1b0>)
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    2ca0:	f848 7024 	str.w	r7, [r8, r4, lsl #2]
		spark_vel[x] *= gravity;
    2ca4:	6818      	ldr	r0, [r3, #0]
    2ca6:	4659      	mov	r1, fp
    2ca8:	f003 ff46 	bl	6b38 <__aeabi_fmul>
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    2cac:	4b51      	ldr	r3, [pc, #324]	; (2df4 <explosion()+0x1b4>)
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		spark_vel[x] *= gravity;
    2cae:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    2cb2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    2cb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    2cba:	f003 ff3d 	bl	6b38 <__aeabi_fmul>
    2cbe:	4601      	mov	r1, r0
    2cc0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    2cc4:	f003 fe2e 	bl	6924 <__aeabi_fsub>
    2cc8:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    2ccc:	f003 ff34 	bl	6b38 <__aeabi_fmul>
    2cd0:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
    2cd4:	f004 f91c 	bl	6f10 <__aeabi_f2uiz>
    2cd8:	4b42      	ldr	r3, [pc, #264]	; (2de4 <explosion()+0x1a4>)
    2cda:	781b      	ldrb	r3, [r3, #0]
    2cdc:	b2c0      	uxtb	r0, r0
    2cde:	4283      	cmp	r3, r0
    2ce0:	bf3c      	itt	cc
    2ce2:	4b40      	ldrcc	r3, [pc, #256]	; (2de4 <explosion()+0x1a4>)
    2ce4:	7018      	strbcc	r0, [r3, #0]
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    2ce6:	4b3e      	ldr	r3, [pc, #248]	; (2de0 <explosion()+0x1a0>)
    2ce8:	3401      	adds	r4, #1
    2cea:	781b      	ldrb	r3, [r3, #0]
    2cec:	b2e4      	uxtb	r4, r4
    2cee:	42a3      	cmp	r3, r4
    2cf0:	d93b      	bls.n	2d6a <explosion()+0x12a>
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
    2cf2:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
    2cf6:	f004 f8e5 	bl	6ec4 <__aeabi_f2iz>
    2cfa:	4683      	mov	fp, r0
    2cfc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2d00:	f004 f906 	bl	6f10 <__aeabi_f2uiz>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2d04:	4b3c      	ldr	r3, [pc, #240]	; (2df8 <explosion()+0x1b8>)
    2d06:	f88d 000a 	strb.w	r0, [sp, #10]
    2d0a:	781a      	ldrb	r2, [r3, #0]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2d0c:	9901      	ldr	r1, [sp, #4]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2d0e:	f88d 2008 	strb.w	r2, [sp, #8]
    2d12:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2d14:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2d16:	f88d 3009 	strb.w	r3, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2d1a:	f001 fc79 	bl	4610 <hsv2rgb_rainbow(CHSV const&, CRGB&)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2d1e:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2d22:	1829      	adds	r1, r5, r0
    2d24:	5c2b      	ldrb	r3, [r5, r0]
    2d26:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2d2a:	fa83 f352 	uqadd8	r3, r3, r2
    2d2e:	542b      	strb	r3, [r5, r0]
    2d30:	f89d 300d 	ldrb.w	r3, [sp, #13]
    2d34:	784a      	ldrb	r2, [r1, #1]
    2d36:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2d3a:	704a      	strb	r2, [r1, #1]
    2d3c:	788b      	ldrb	r3, [r1, #2]
    2d3e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    2d42:	fa83 f352 	uqadd8	r3, r3, r2
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
    2d46:	4a2d      	ldr	r2, [pc, #180]	; (2dfc <explosion()+0x1bc>)
        b = qadd8( b, rhs.b);
    2d48:	708b      	strb	r3, [r1, #2]
    2d4a:	5d12      	ldrb	r2, [r2, r4]
    2d4c:	f85a b024 	ldr.w	fp, [sl, r4, lsl #2]
    2d50:	2a00      	cmp	r2, #0
    2d52:	d190      	bne.n	2c76 <explosion()+0x36>
		else { spark_pos[x] -= spark_vel[x]; }
    2d54:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
    2d58:	4659      	mov	r1, fp
    2d5a:	f003 fde3 	bl	6924 <__aeabi_fsub>
    2d5e:	4607      	mov	r7, r0
    2d60:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    2d64:	e78f      	b.n	2c86 <explosion()+0x46>
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    2d66:	2700      	movs	r7, #0
    2d68:	e799      	b.n	2c9e <explosion()+0x5e>
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
    2d6a:	4b1e      	ldr	r3, [pc, #120]	; (2de4 <explosion()+0x1a4>)
    2d6c:	781b      	ldrb	r3, [r3, #0]
    2d6e:	2b05      	cmp	r3, #5
    2d70:	d904      	bls.n	2d7c <explosion()+0x13c>
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
		next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    2d72:	b005      	add	sp, #20
    2d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d78:	ab03      	add	r3, sp, #12
    2d7a:	9301      	str	r3, [sp, #4]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2d7c:	2300      	movs	r3, #0
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
    2d7e:	9a01      	ldr	r2, [sp, #4]
    2d80:	4816      	ldr	r0, [pc, #88]	; (2ddc <explosion()+0x19c>)
    2d82:	f88d 300c 	strb.w	r3, [sp, #12]
    2d86:	21bc      	movs	r1, #188	; 0xbc
    2d88:	f88d 300d 	strb.w	r3, [sp, #13]
    2d8c:	f88d 300e 	strb.w	r3, [sp, #14]
    2d90:	f001 f9e0 	bl	4154 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2d94:	481a      	ldr	r0, [pc, #104]	; (2e00 <explosion()+0x1c0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d96:	4c1b      	ldr	r4, [pc, #108]	; (2e04 <explosion()+0x1c4>)
    2d98:	8803      	ldrh	r3, [r0, #0]
    2d9a:	6824      	ldr	r4, [r4, #0]
		current_stage = WAITING;
		next_explosion_time = millis() + random16(min_wait + max_wait);
    2d9c:	491a      	ldr	r1, [pc, #104]	; (2e08 <explosion()+0x1c8>)
    2d9e:	4a1b      	ldr	r2, [pc, #108]	; (2e0c <explosion()+0x1cc>)
    2da0:	9403      	str	r4, [sp, #12]
    2da2:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    2da6:	8809      	ldrh	r1, [r1, #0]
    2da8:	8812      	ldrh	r2, [r2, #0]
    2daa:	4d19      	ldr	r5, [pc, #100]	; (2e10 <explosion()+0x1d0>)
    2dac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2db0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2db4:	440a      	add	r2, r1
    2db6:	3319      	adds	r3, #25
    2db8:	b29b      	uxth	r3, r3
    2dba:	b292      	uxth	r2, r2
	return ret;
    2dbc:	9903      	ldr	r1, [sp, #12]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
    2dbe:	4c15      	ldr	r4, [pc, #84]	; (2e14 <explosion()+0x1d4>)
    2dc0:	8003      	strh	r3, [r0, #0]
		next_explosion_time = millis() + random16(min_wait + max_wait);
    2dc2:	fb03 f302 	mul.w	r3, r3, r2
    2dc6:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
    2dca:	2202      	movs	r2, #2
		next_explosion_time = millis() + random16(min_wait + max_wait);
    2dcc:	602b      	str	r3, [r5, #0]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
    2dce:	7022      	strb	r2, [r4, #0]
		next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    2dd0:	b005      	add	sp, #20
    2dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dd6:	bf00      	nop
    2dd8:	1fff8780 	.word	0x1fff8780
    2ddc:	1fff8dcc 	.word	0x1fff8dcc
    2de0:	1fff9240 	.word	0x1fff9240
    2de4:	1fff95b0 	.word	0x1fff95b0
    2de8:	1fff9004 	.word	0x1fff9004
    2dec:	433b0000 	.word	0x433b0000
    2df0:	1fff875c 	.word	0x1fff875c
    2df4:	1fff94c0 	.word	0x1fff94c0
    2df8:	1fff9347 	.word	0x1fff9347
    2dfc:	1fff93b4 	.word	0x1fff93b4
    2e00:	1fff8782 	.word	0x1fff8782
    2e04:	1fff9668 	.word	0x1fff9668
    2e08:	1fff8776 	.word	0x1fff8776
    2e0c:	1fff877a 	.word	0x1fff877a
    2e10:	1fff90f8 	.word	0x1fff90f8
    2e14:	1fff8dc9 	.word	0x1fff8dc9
    2e18:	1fff913c 	.word	0x1fff913c
    2e1c:	1fff8ccc 	.word	0x1fff8ccc

00002e20 <render_firework()>:


void render_firework() {
    2e20:	b500      	push	{lr}
	if (current_stage == WAITING) {
    2e22:	4b10      	ldr	r3, [pc, #64]	; (2e64 <render_firework()+0x44>)
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	2b02      	cmp	r3, #2
		next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void render_firework() {
    2e28:	b083      	sub	sp, #12
	if (current_stage == WAITING) {
    2e2a:	d005      	beq.n	2e38 <render_firework()+0x18>
		if (millis() >= next_explosion_time) {
			prepare_for_explosion();
		}
	}
	else if (current_stage == FADEUP) {
    2e2c:	b1a3      	cbz	r3, 2e58 <render_firework()+0x38>
		fadeup();
	}
	else if (current_stage == EXPLOSION) {
    2e2e:	2b01      	cmp	r3, #1
    2e30:	d00d      	beq.n	2e4e <render_firework()+0x2e>
		explosion();
	}
}
    2e32:	b003      	add	sp, #12
    2e34:	f85d fb04 	ldr.w	pc, [sp], #4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e38:	4a0b      	ldr	r2, [pc, #44]	; (2e68 <render_firework()+0x48>)
}


void render_firework() {
	if (current_stage == WAITING) {
		if (millis() >= next_explosion_time) {
    2e3a:	4b0c      	ldr	r3, [pc, #48]	; (2e6c <render_firework()+0x4c>)
    2e3c:	6812      	ldr	r2, [r2, #0]
    2e3e:	9201      	str	r2, [sp, #4]
	return ret;
    2e40:	9a01      	ldr	r2, [sp, #4]
    2e42:	681b      	ldr	r3, [r3, #0]
    2e44:	429a      	cmp	r2, r3
    2e46:	d3f4      	bcc.n	2e32 <render_firework()+0x12>
			prepare_for_explosion();
    2e48:	f7ff fde4 	bl	2a14 <prepare_for_explosion()>
    2e4c:	e7f1      	b.n	2e32 <render_firework()+0x12>
	}
	else if (current_stage == FADEUP) {
		fadeup();
	}
	else if (current_stage == EXPLOSION) {
		explosion();
    2e4e:	f7ff fef7 	bl	2c40 <explosion()>
	}
}
    2e52:	b003      	add	sp, #12
    2e54:	f85d fb04 	ldr.w	pc, [sp], #4
		if (millis() >= next_explosion_time) {
			prepare_for_explosion();
		}
	}
	else if (current_stage == FADEUP) {
		fadeup();
    2e58:	f7ff fe26 	bl	2aa8 <fadeup()>
	}
	else if (current_stage == EXPLOSION) {
		explosion();
	}
}
    2e5c:	b003      	add	sp, #12
    2e5e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e62:	bf00      	nop
    2e64:	1fff8dc9 	.word	0x1fff8dc9
    2e68:	1fff9668 	.word	0x1fff9668
    2e6c:	1fff90f8 	.word	0x1fff90f8

00002e70 <fireworks()>:

void fireworks() {
	if (mode_change) {
    2e70:	4a1a      	ldr	r2, [pc, #104]	; (2edc <fireworks()+0x6c>)
    2e72:	7813      	ldrb	r3, [r2, #0]
    2e74:	b37b      	cbz	r3, 2ed6 <fireworks()+0x66>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2e76:	491a      	ldr	r1, [pc, #104]	; (2ee0 <fireworks()+0x70>)
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
    2e78:	481a      	ldr	r0, [pc, #104]	; (2ee4 <fireworks()+0x74>)
    2e7a:	880b      	ldrh	r3, [r1, #0]
	else if (current_stage == EXPLOSION) {
		explosion();
	}
}

void fireworks() {
    2e7c:	b4f0      	push	{r4, r5, r6, r7}
    2e7e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    2e82:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    2e86:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2e8a:	3319      	adds	r3, #25
    2e8c:	b29b      	uxth	r3, r3
    2e8e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    2e92:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2e96:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
    2e9a:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2e9c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    2ea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2ea4:	3719      	adds	r7, #25
    2ea6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2eaa:	4e0f      	ldr	r6, [pc, #60]	; (2ee8 <fireworks()+0x78>)
		firework_hue = random8();
    2eac:	4d0f      	ldr	r5, [pc, #60]	; (2eec <fireworks()+0x7c>)
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    2eae:	4c10      	ldr	r4, [pc, #64]	; (2ef0 <fireworks()+0x80>)
    2eb0:	b2bf      	uxth	r7, r7
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
    2eb2:	115b      	asrs	r3, r3, #5
    2eb4:	800f      	strh	r7, [r1, #0]
    2eb6:	330a      	adds	r3, #10
		firework_hue = random8();
    2eb8:	eb07 2717 	add.w	r7, r7, r7, lsr #8
void fireworks() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
		current_stage = WAITING;
    2ebc:	490d      	ldr	r1, [pc, #52]	; (2ef4 <fireworks()+0x84>)
		firework_position = random8(10, NUM_LEDS - 10);
    2ebe:	7033      	strb	r3, [r6, #0]
		firework_hue = random8();
    2ec0:	702f      	strb	r7, [r5, #0]
	}
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
    2ec2:	2300      	movs	r3, #0
		use_palette = 0;
		this_delay = 10;
    2ec4:	260a      	movs	r6, #10
		current_stage = WAITING;
    2ec6:	2502      	movs	r5, #2
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    2ec8:	7023      	strb	r3, [r4, #0]
		this_delay = 10;
    2eca:	6006      	str	r6, [r0, #0]
		current_stage = WAITING;
    2ecc:	700d      	strb	r5, [r1, #0]
		firework_position = random8(10, NUM_LEDS - 10);
		firework_hue = random8();
	}
	render_firework();
}
    2ece:	bcf0      	pop	{r4, r5, r6, r7}
	}
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
    2ed0:	7013      	strb	r3, [r2, #0]
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
		firework_hue = random8();
	}
	render_firework();
    2ed2:	f7ff bfa5 	b.w	2e20 <render_firework()>
    2ed6:	f7ff bfa3 	b.w	2e20 <render_firework()>
    2eda:	bf00      	nop
    2edc:	1fff876c 	.word	0x1fff876c
    2ee0:	1fff8782 	.word	0x1fff8782
    2ee4:	1fff8768 	.word	0x1fff8768
    2ee8:	1fff934d 	.word	0x1fff934d
    2eec:	1fff9347 	.word	0x1fff9347
    2ef0:	1fff8764 	.word	0x1fff8764
    2ef4:	1fff8dc9 	.word	0x1fff8dc9

00002ef8 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    2ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    2efc:	0852      	lsrs	r2, r2, #1
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    2efe:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    2f00:	f102 0914 	add.w	r9, r2, #20
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    2f04:	469a      	mov	sl, r3
    2f06:	4d36      	ldr	r5, [pc, #216]	; (2fe0 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xe8>)
    2f08:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
    2f0c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 2fec <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf4>
    2f10:	4f34      	ldr	r7, [pc, #208]	; (2fe4 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xec>)
    2f12:	f109 0301 	add.w	r3, r9, #1
    2f16:	4683      	mov	fp, r0
    2f18:	460c      	mov	r4, r1
    2f1a:	9303      	str	r3, [sp, #12]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        waveangle += 250;
    2f1c:	36fa      	adds	r6, #250	; 0xfa
    2f1e:	b2b6      	uxth	r6, r6
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2f20:	0472      	lsls	r2, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2f22:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2f26:	d503      	bpl.n	2f30 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x38>
    2f28:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2f2c:	3307      	adds	r3, #7
    2f2e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2f30:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2f32:	f3c3 0246 	ubfx	r2, r3, #1, #7
    2f36:	f818 0001 	ldrb.w	r0, [r8, r1]
    2f3a:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
    2f3e:	fb00 3302 	mla	r3, r0, r2, r3
    2f42:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2f44:	0430      	lsls	r0, r6, #16
    2f46:	bf48      	it	mi
    2f48:	425b      	negmi	r3, r3
    2f4a:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    2f4c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2f50:	9a03      	ldr	r2, [sp, #12]
    2f52:	b29b      	uxth	r3, r3
    2f54:	fb02 f303 	mul.w	r3, r2, r3
    2f58:	eb09 4313 	add.w	r3, r9, r3, lsr #16
    2f5c:	441c      	add	r4, r3
    2f5e:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2f60:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2f62:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2f66:	d503      	bpl.n	2f70 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x78>
    2f68:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2f6c:	3307      	adds	r3, #7
    2f6e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2f70:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2f72:	f3c3 0246 	ubfx	r2, r3, #1, #7
    2f76:	f818 0001 	ldrb.w	r0, [r8, r1]
    2f7a:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
    2f7e:	fb00 3302 	mla	r3, r0, r2, r3
    2f82:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2f84:	0422      	lsls	r2, r4, #16
    2f86:	bf48      	it	mi
    2f88:	425b      	negmi	r3, r3
    2f8a:	b21b      	sxth	r3, r3
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    2f8c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2f90:	b29b      	uxth	r3, r3
    2f92:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    2f96:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2f9a:	2301      	movs	r3, #1
    2f9c:	9300      	str	r3, [sp, #0]
    2f9e:	f3c2 4207 	ubfx	r2, r2, #16, #8
    2fa2:	4653      	mov	r3, sl
    2fa4:	4659      	mov	r1, fp
    2fa6:	a805      	add	r0, sp, #20
    2fa8:	f001 f9e8 	bl	437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2fac:	782b      	ldrb	r3, [r5, #0]
    2fae:	f89d 2014 	ldrb.w	r2, [sp, #20]
    2fb2:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2fb6:	702b      	strb	r3, [r5, #0]
    2fb8:	786a      	ldrb	r2, [r5, #1]
    2fba:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2fbe:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2fc2:	706a      	strb	r2, [r5, #1]
    2fc4:	78ab      	ldrb	r3, [r5, #2]
    2fc6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    2fca:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2fce:	70ab      	strb	r3, [r5, #2]
void pacifica_one_layer(CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
    2fd0:	4b05      	ldr	r3, [pc, #20]	; (2fe8 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf0>)
    2fd2:	3503      	adds	r5, #3
    2fd4:	42ab      	cmp	r3, r5
    2fd6:	d1a1      	bne.n	2f1c <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x24>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds[i] += c;
    }
}
    2fd8:	b007      	add	sp, #28
    2fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fde:	bf00      	nop
    2fe0:	1fff8dcc 	.word	0x1fff8dcc
    2fe4:	00008780 	.word	0x00008780
    2fe8:	1fff9000 	.word	0x1fff9000
    2fec:	00007da0 	.word	0x00007da0

00002ff0 <pacifica_add_whitecaps()>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps()
{
    2ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ff4:	4856      	ldr	r0, [pc, #344]	; (3150 <pacifica_add_whitecaps()+0x160>)
    2ff6:	b083      	sub	sp, #12
    2ff8:	6803      	ldr	r3, [r0, #0]
    2ffa:	9301      	str	r3, [sp, #4]
	return ret;
    2ffc:	9a01      	ldr	r2, [sp, #4]
    2ffe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3002:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
    3006:	f3c2 3247 	ubfx	r2, r2, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    300a:	b2d3      	uxtb	r3, r2
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    300c:	065d      	lsls	r5, r3, #25
    300e:	f140 809a 	bpl.w	3146 <pacifica_add_whitecaps()+0x156>
        offset = (uint8_t)255 - offset;
    3012:	43db      	mvns	r3, r3
    3014:	b2dc      	uxtb	r4, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3016:	f004 030f 	and.w	r3, r4, #15
    if( theta & 0x40) secoffset++;
    301a:	1c59      	adds	r1, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    301c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    3020:	1123      	asrs	r3, r4, #4
    3022:	f8df 9134 	ldr.w	r9, [pc, #308]	; 3158 <pacifica_add_whitecaps()+0x168>
    3026:	4d4b      	ldr	r5, [pc, #300]	; (3154 <pacifica_add_whitecaps()+0x164>)
    3028:	005b      	lsls	r3, r3, #1
    302a:	eb09 0403 	add.w	r4, r9, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    302e:	f819 3003 	ldrb.w	r3, [r9, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    3032:	7864      	ldrb	r4, [r4, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3034:	fb14 f101 	smulbb	r1, r4, r1
    3038:	eb03 1321 	add.w	r3, r3, r1, asr #4
    303c:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    303e:	0614      	lsls	r4, r2, #24
    3040:	bf48      	it	mi
    3042:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3044:	6802      	ldr	r2, [r0, #0]
    3046:	9200      	str	r2, [sp, #0]
    3048:	b25b      	sxtb	r3, r3

    y += 128;
    304a:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    304c:	b2db      	uxtb	r3, r3
	return ret;
    304e:	9800      	ldr	r0, [sp, #0]
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    3050:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    3054:	eb03 0a83 	add.w	sl, r3, r3, lsl #2
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    3058:	fb02 f000 	mul.w	r0, r2, r0
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    305c:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    3060:	0e00      	lsrs	r0, r0, #24
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    3062:	ea4f 2a2a 	mov.w	sl, sl, asr #8
    3066:	43c7      	mvns	r7, r0
    3068:	f100 0b24 	add.w	fp, r0, #36	; 0x24
    306c:	f10a 0a37 	add.w	sl, sl, #55	; 0x37
    3070:	b2ff      	uxtb	r7, r7
    3072:	fa5f fb8b 	uxtb.w	fp, fp
    3076:	fa5f fa8a 	uxtb.w	sl, sl
    307a:	f105 0801 	add.w	r8, r5, #1
    307e:	e058      	b.n	3132 <pacifica_add_whitecaps()+0x142>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3080:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    3084:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3086:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    308a:	1112      	asrs	r2, r2, #4
    308c:	0052      	lsls	r2, r2, #1
    308e:	eb09 0102 	add.w	r1, r9, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3092:	f819 2002 	ldrb.w	r2, [r9, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    3096:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    3098:	f818 ec01 	ldrb.w	lr, [r8, #-1]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    309c:	78ae      	ldrb	r6, [r5, #2]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    309e:	fb11 f303 	smulbb	r3, r1, r3
    30a2:	eb02 1323 	add.w	r3, r2, r3, asr #4
    30a6:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    30a8:	0602      	lsls	r2, r0, #24
    30aa:	786a      	ldrb	r2, [r5, #1]
    30ac:	bf48      	it	mi
    30ae:	425b      	negmi	r3, r3
    30b0:	fa0f fc8e 	sxth.w	ip, lr
    30b4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    30b8:	b25b      	sxtb	r3, r3
    30ba:	eb01 1101 	add.w	r1, r1, r1, lsl #4

    y += 128;
    30be:	3b80      	subs	r3, #128	; 0x80
    30c0:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
    30c4:	440a      	add	r2, r1
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
    30c6:	b2db      	uxtb	r3, r3
    30c8:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    30cc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    30d0:	1212      	asrs	r2, r2, #8
    30d2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    30d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30da:	4464      	add	r4, ip
    30dc:	eb02 2424 	add.w	r4, r2, r4, asr #8
    30e0:	440e      	add	r6, r1
    30e2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    30e6:	eb0a 2323 	add.w	r3, sl, r3, asr #8
    30ea:	eb04 2626 	add.w	r6, r4, r6, asr #8
    30ee:	b2db      	uxtb	r3, r3
    30f0:	b2f6      	uxtb	r6, r6
        wave += 7;
        uint8_t l = leds[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    30f2:	1af2      	subs	r2, r6, r3
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    30f4:	3007      	adds	r0, #7
        uint8_t l = leds[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    30f6:	b2d2      	uxtb	r2, r2

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
        uint8_t l = leds[i].getAverageLight();
        if (l > threshold) {
    30f8:	42b3      	cmp	r3, r6
    30fa:	4611      	mov	r1, r2
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    30fc:	b2c0      	uxtb	r0, r0
        uint8_t l = leds[i].getAverageLight();
        if (l > threshold) {
    30fe:	d210      	bcs.n	3122 <pacifica_add_whitecaps()+0x132>
    3100:	fa81 f152 	uqadd8	r1, r1, r2
    3104:	460c      	mov	r4, r1
    3106:	fa84 f451 	uqadd8	r4, r4, r1
    310a:	fa8e fe52 	uqadd8	lr, lr, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    310e:	f808 ec01 	strb.w	lr, [r8, #-1]
    3112:	786a      	ldrb	r2, [r5, #1]
    3114:	fa82 f251 	uqadd8	r2, r2, r1
    3118:	78ab      	ldrb	r3, [r5, #2]
        g = qadd8( g, rhs.g);
    311a:	706a      	strb	r2, [r5, #1]
    311c:	fa83 f354 	uqadd8	r3, r3, r4
        b = qadd8( b, rhs.b);
    3120:	70ab      	strb	r3, [r5, #2]
    3122:	3f07      	subs	r7, #7
void pacifica_add_whitecaps()
{
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
    3124:	4558      	cmp	r0, fp
    3126:	b2ff      	uxtb	r7, r7
    3128:	f105 0503 	add.w	r5, r5, #3
    312c:	f108 0803 	add.w	r8, r8, #3
    3130:	d006      	beq.n	3140 <pacifica_add_whitecaps()+0x150>
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    3132:	0641      	lsls	r1, r0, #25
    3134:	d4a4      	bmi.n	3080 <pacifica_add_whitecaps()+0x90>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3136:	f000 023f 	and.w	r2, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    313a:	f000 030f 	and.w	r3, r0, #15
    313e:	e7a4      	b.n	308a <pacifica_add_whitecaps()+0x9a>
            uint8_t overage = l - threshold;
            uint8_t overage2 = qadd8(overage, overage);
            leds[i] += CRGB(overage, overage2, qadd8(overage2, overage2));
        }
    }
}
    3140:	b003      	add	sp, #12
    3142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3146:	f003 043f 	and.w	r4, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    314a:	f003 010f 	and.w	r1, r3, #15
    314e:	e767      	b.n	3020 <pacifica_add_whitecaps()+0x30>
    3150:	1fff9668 	.word	0x1fff9668
    3154:	1fff8dcc 	.word	0x1fff8dcc
    3158:	0000785c 	.word	0x0000785c

0000315c <pacifica_deepen_colors()>:

// Deepen the blues and greens
void pacifica_deepen_colors()
{
    315c:	4816      	ldr	r0, [pc, #88]	; (31b8 <pacifica_deepen_colors()+0x5c>)
    315e:	1e82      	subs	r2, r0, #2
    3160:	b5f0      	push	{r4, r5, r6, r7, lr}
    3162:	f502 740d 	add.w	r4, r2, #564	; 0x234
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    3166:	2702      	movs	r7, #2
        if( rhs.g > g) g = rhs.g;
    3168:	2605      	movs	r6, #5
        if( rhs.b > b) b = rhs.b;
    316a:	2507      	movs	r5, #7
    316c:	7853      	ldrb	r3, [r2, #1]
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        leds[i].blue = scale8(leds[i].blue, 145);
    316e:	7891      	ldrb	r1, [r2, #2]
    3170:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
    3174:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    3178:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    317c:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    3180:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    3184:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3188:	11c9      	asrs	r1, r1, #7
        leds[i].green = scale8(leds[i].green, 200);
    318a:	7053      	strb	r3, [r2, #1]

// Deepen the blues and greens
void pacifica_deepen_colors()
{
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        leds[i].blue = scale8(leds[i].blue, 145);
    318c:	7091      	strb	r1, [r2, #2]
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    318e:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    3192:	2901      	cmp	r1, #1
    3194:	bf9c      	itt	ls
    3196:	f800 7c02 	strbls.w	r7, [r0, #-2]
    319a:	7853      	ldrbls	r3, [r2, #1]
        if( rhs.g > g) g = rhs.g;
    319c:	2b04      	cmp	r3, #4
        if( rhs.b > b) b = rhs.b;
    319e:	7893      	ldrb	r3, [r2, #2]

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
        if( rhs.g > g) g = rhs.g;
    31a0:	bf98      	it	ls
    31a2:	7056      	strbls	r6, [r2, #1]
        if( rhs.b > b) b = rhs.b;
    31a4:	2b06      	cmp	r3, #6
    31a6:	bf98      	it	ls
    31a8:	7095      	strbls	r5, [r2, #2]
    31aa:	3203      	adds	r2, #3
}

// Deepen the blues and greens
void pacifica_deepen_colors()
{
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
    31ac:	42a2      	cmp	r2, r4
    31ae:	f100 0003 	add.w	r0, r0, #3
    31b2:	d1db      	bne.n	316c <pacifica_deepen_colors()+0x10>
        leds[i].blue = scale8(leds[i].blue, 145);
        leds[i].green = scale8(leds[i].green, 200);
        leds[i] |= CRGB(2, 5, 7);
    }
}
    31b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31b6:	bf00      	nop
    31b8:	1fff8dce 	.word	0x1fff8dce

000031bc <pacifica_loop()>:

void pacifica_loop()
{
    31bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (mode_change) {
    31c0:	4bc6      	ldr	r3, [pc, #792]	; (34dc <pacifica_loop()+0x320>)
    31c2:	781a      	ldrb	r2, [r3, #0]
        leds[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_loop()
{
    31c4:	b094      	sub	sp, #80	; 0x50
    if (mode_change) {
    31c6:	b16a      	cbz	r2, 31e4 <pacifica_loop()+0x28>
        mode_change = 0;
        use_palette = 0;
    31c8:	4ec5      	ldr	r6, [pc, #788]	; (34e0 <pacifica_loop()+0x324>)
        this_delay = 20;
    31ca:	4cc6      	ldr	r4, [pc, #792]	; (34e4 <pacifica_loop()+0x328>)
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    31cc:	48c6      	ldr	r0, [pc, #792]	; (34e8 <pacifica_loop()+0x32c>)
}

void pacifica_loop()
{
    if (mode_change) {
        mode_change = 0;
    31ce:	2200      	movs	r2, #0
        use_palette = 0;
        this_delay = 20;
    31d0:	2514      	movs	r5, #20
    31d2:	210d      	movs	r1, #13

void pacifica_loop()
{
    if (mode_change) {
        mode_change = 0;
        use_palette = 0;
    31d4:	7032      	strb	r2, [r6, #0]
}

void pacifica_loop()
{
    if (mode_change) {
        mode_change = 0;
    31d6:	701a      	strb	r2, [r3, #0]
        use_palette = 0;
        this_delay = 20;
    31d8:	6025      	str	r5, [r4, #0]
    31da:	f002 fed1 	bl	5f80 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    31de:	48c3      	ldr	r0, [pc, #780]	; (34ec <pacifica_loop()+0x330>)
    31e0:	f003 f8d2 	bl	6388 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    31e4:	4cc2      	ldr	r4, [pc, #776]	; (34f0 <pacifica_loop()+0x334>)
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    31e6:	4ac3      	ldr	r2, [pc, #780]	; (34f4 <pacifica_loop()+0x338>)
    31e8:	6823      	ldr	r3, [r4, #0]
    31ea:	9303      	str	r3, [sp, #12]
	return ret;
    31ec:	9b03      	ldr	r3, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    31ee:	6821      	ldr	r1, [r4, #0]
    31f0:	9113      	str	r1, [sp, #76]	; 0x4c
	return ret;
    31f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    31f4:	6811      	ldr	r1, [r2, #0]
    sLastms = ms;
    31f6:	6013      	str	r3, [r2, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    31f8:	f44f 3252 	mov.w	r2, #215040	; 0x34800
    31fc:	fb02 f000 	mul.w	r0, r2, r0
    3200:	0c00      	lsrs	r0, r0, #16
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    3202:	ebc1 0e03 	rsb	lr, r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3206:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3208:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    320c:	d503      	bpl.n	3216 <pacifica_loop()+0x5a>
    320e:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3212:	3207      	adds	r2, #7
    3214:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3216:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];
    3218:	4db7      	ldr	r5, [pc, #732]	; (34f8 <pacifica_loop()+0x33c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    321a:	4eb8      	ldr	r6, [pc, #736]	; (34fc <pacifica_loop()+0x340>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    321c:	5c6f      	ldrb	r7, [r5, r1]
    321e:	f836 3011 	ldrh.w	r3, [r6, r1, lsl #1]
    3222:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3226:	fb07 3201 	mla	r2, r7, r1, r3
    322a:	b293      	uxth	r3, r2

    if( theta & 0x8000 ) y = -y;
    322c:	0402      	lsls	r2, r0, #16
    322e:	bf48      	it	mi
    3230:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3232:	6822      	ldr	r2, [r4, #0]
    3234:	9212      	str	r2, [sp, #72]	; 0x48
    3236:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3238:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    323c:	b29b      	uxth	r3, r3
    323e:	205b      	movs	r0, #91	; 0x5b
	return ret;
    3240:	9912      	ldr	r1, [sp, #72]	; 0x48
    3242:	fb00 f003 	mul.w	r0, r0, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3246:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    324a:	fb03 f101 	mul.w	r1, r3, r1
    324e:	0c09      	lsrs	r1, r1, #16
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3250:	0c00      	lsrs	r0, r0, #16
    3252:	30b3      	adds	r0, #179	; 0xb3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3254:	044f      	lsls	r7, r1, #17
    3256:	b280      	uxth	r0, r0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3258:	f3c1 02ca 	ubfx	r2, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    325c:	d503      	bpl.n	3266 <pacifica_loop()+0xaa>
    325e:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3262:	3207      	adds	r2, #7
    3264:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3266:	0a13      	lsrs	r3, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3268:	f3c2 0746 	ubfx	r7, r2, #1, #7
    326c:	5cea      	ldrb	r2, [r5, r3]
    326e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
    3272:	fb02 3207 	mla	r2, r2, r7, r3

    if( theta & 0x8000 ) y = -y;
    3276:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3278:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    327a:	bf48      	it	mi
    327c:	4252      	negmi	r2, r2
    327e:	b212      	sxth	r2, r2
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    3280:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    3284:	b292      	uxth	r2, r2
    3286:	215b      	movs	r1, #91	; 0x5b
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3288:	6823      	ldr	r3, [r4, #0]
    328a:	9311      	str	r3, [sp, #68]	; 0x44
    328c:	fb01 f102 	mul.w	r1, r1, r2
    3290:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3292:	4a9b      	ldr	r2, [pc, #620]	; (3500 <pacifica_loop()+0x344>)
	return ret;
    3294:	9f11      	ldr	r7, [sp, #68]	; 0x44
    3296:	31b3      	adds	r1, #179	; 0xb3
    3298:	b289      	uxth	r1, r1
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    329a:	fb0e f000 	mul.w	r0, lr, r0
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    329e:	fb0e f101 	mul.w	r1, lr, r1
    32a2:	fb02 f707 	mul.w	r7, r2, r7
    32a6:	0c3f      	lsrs	r7, r7, #16
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    32a8:	0a00      	lsrs	r0, r0, #8
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    32aa:	0a09      	lsrs	r1, r1, #8
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    32ac:	1843      	adds	r3, r0, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    32ae:	047a      	lsls	r2, r7, #17
    32b0:	ea4f 0e53 	mov.w	lr, r3, lsr #1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    32b4:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    32b8:	d503      	bpl.n	32c2 <pacifica_loop()+0x106>
    32ba:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    32be:	3307      	adds	r3, #7
    32c0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    32c2:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    32c6:	f3c3 0246 	ubfx	r2, r3, #1, #7
    32ca:	f815 800c 	ldrb.w	r8, [r5, ip]
    32ce:	f836 301c 	ldrh.w	r3, [r6, ip, lsl #1]
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    32d2:	f8df 9244 	ldr.w	r9, [pc, #580]	; 3518 <pacifica_loop()+0x35c>
    32d6:	fb08 3302 	mla	r3, r8, r2, r3

    if( theta & 0x8000 ) y = -y;
    32da:	043f      	lsls	r7, r7, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32dc:	6822      	ldr	r2, [r4, #0]
    32de:	9210      	str	r2, [sp, #64]	; 0x40
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    32e0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    32e2:	bf48      	it	mi
    32e4:	425b      	negmi	r3, r3
    32e6:	b21b      	sxth	r3, r3
	return ret;
    32e8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    32ec:	4a85      	ldr	r2, [pc, #532]	; (3504 <pacifica_loop()+0x348>)
    32ee:	f8b9 7000 	ldrh.w	r7, [r9]
    32f2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    32f6:	f3c3 3381 	ubfx	r3, r3, #14, #2
    32fa:	fb02 fc0c 	mul.w	ip, r2, ip
    32fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    3302:	330a      	adds	r3, #10
    3304:	fb00 7303 	mla	r3, r0, r3, r7
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3308:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
    330c:	f8a9 3000 	strh.w	r3, [r9]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3310:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3314:	d003      	beq.n	331e <pacifica_loop()+0x162>
    3316:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    331a:	3307      	adds	r3, #7
    331c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    331e:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3322:	f3c3 0746 	ubfx	r7, r3, #1, #7
    3326:	f815 2008 	ldrb.w	r2, [r5, r8]
    332a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    332e:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 351c <pacifica_loop()+0x360>
    3332:	fb02 3207 	mla	r2, r2, r7, r3

    if( theta & 0x8000 ) y = -y;
    3336:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    333a:	6823      	ldr	r3, [r4, #0]
    333c:	930f      	str	r3, [sp, #60]	; 0x3c
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    333e:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3340:	bf18      	it	ne
    3342:	4252      	negne	r2, r2
    3344:	b212      	sxth	r2, r2
	return ret;
    3346:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    334a:	4f6f      	ldr	r7, [pc, #444]	; (3508 <pacifica_loop()+0x34c>)
    334c:	f8b8 3000 	ldrh.w	r3, [r8]
    3350:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    3354:	f3c2 3281 	ubfx	r2, r2, #14, #2
    3358:	fb07 f70c 	mul.w	r7, r7, ip
    335c:	3208      	adds	r2, #8
    335e:	0c3f      	lsrs	r7, r7, #16
    3360:	fb0e 3312 	mls	r3, lr, r2, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3364:	047a      	lsls	r2, r7, #17
    3366:	f8a8 3000 	strh.w	r3, [r8]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    336a:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    336e:	d503      	bpl.n	3378 <pacifica_loop()+0x1bc>
    3370:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3374:	3307      	adds	r3, #7
    3376:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3378:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    337c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    3380:	f815 c00e 	ldrb.w	ip, [r5, lr]
    3384:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    3388:	fb0c 3302 	mla	r3, ip, r2, r3

    if( theta & 0x8000 ) y = -y;
    338c:	043f      	lsls	r7, r7, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    338e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3390:	bf48      	it	mi
    3392:	425b      	negmi	r3, r3
    3394:	b21b      	sxth	r3, r3
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    3396:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    339a:	6822      	ldr	r2, [r4, #0]
    339c:	4f5b      	ldr	r7, [pc, #364]	; (350c <pacifica_loop()+0x350>)
    339e:	920e      	str	r2, [sp, #56]	; 0x38
    33a0:	b29b      	uxth	r3, r3
    33a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    33a6:	0c12      	lsrs	r2, r2, #16
    33a8:	4b59      	ldr	r3, [pc, #356]	; (3510 <pacifica_loop()+0x354>)
	return ret;
    33aa:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    33ae:	f8b7 c000 	ldrh.w	ip, [r7]
    33b2:	3205      	adds	r2, #5
    33b4:	b292      	uxth	r2, r2
    33b6:	fb03 fe0e 	mul.w	lr, r3, lr
    33ba:	fb00 c312 	mls	r3, r0, r2, ip
    33be:	ea4f 401e 	mov.w	r0, lr, lsr #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    33c2:	0442      	lsls	r2, r0, #17
    33c4:	803b      	strh	r3, [r7, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    33c6:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    33ca:	d503      	bpl.n	33d4 <pacifica_loop()+0x218>
    33cc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    33d0:	3307      	adds	r3, #7
    33d2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33d4:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33d8:	f3c3 0246 	ubfx	r2, r3, #1, #7
    33dc:	f815 c00e 	ldrb.w	ip, [r5, lr]
    33e0:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    33e4:	f8df a138 	ldr.w	sl, [pc, #312]	; 3520 <pacifica_loop()+0x364>
    33e8:	fb0c 3302 	mla	r3, ip, r2, r3

    if( theta & 0x8000 ) y = -y;
    33ec:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33ee:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    33f0:	bf48      	it	mi
    33f2:	425b      	negmi	r3, r3
    33f4:	b21b      	sxth	r3, r3
    33f6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    33fa:	b29b      	uxth	r3, r3
    33fc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    3400:	0c12      	lsrs	r2, r2, #16
    3402:	f8ba 3000 	ldrh.w	r3, [sl]

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds, NUM_LEDS, CRGB(2, 6, 10));
    3406:	4843      	ldr	r0, [pc, #268]	; (3514 <pacifica_loop()+0x358>)
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    3408:	3204      	adds	r2, #4
    340a:	b292      	uxth	r2, r2
    340c:	fb01 3312 	mls	r3, r1, r2, r3
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    3410:	2202      	movs	r2, #2
    3412:	2106      	movs	r1, #6
    3414:	f8aa 3000 	strh.w	r3, [sl]
    3418:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    341c:	230a      	movs	r3, #10

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds, NUM_LEDS, CRGB(2, 6, 10));
    341e:	aa0d      	add	r2, sp, #52	; 0x34
    3420:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    3424:	21bc      	movs	r1, #188	; 0xbc
    3426:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    342a:	f000 fe93 	bl	4154 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    342e:	6823      	ldr	r3, [r4, #0]
    3430:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    3432:	980d      	ldr	r0, [sp, #52]	; 0x34

    // Render each of four layers, with different scales and speeds, that vary over time
    pacifica_one_layer(pacifica_palette_1, sCIStart1, beatsin16(3, 11 * 256, 14 * 256), beatsin8(10, 70, 130), 0 - beat16(301));
    3434:	f8b9 1000 	ldrh.w	r1, [r9]
    3438:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    343c:	fb03 f000 	mul.w	r0, r3, r0
    3440:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3442:	0442      	lsls	r2, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3444:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3448:	d503      	bpl.n	3452 <pacifica_loop()+0x296>
    344a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    344e:	3307      	adds	r3, #7
    3450:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3452:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3456:	f3c3 0246 	ubfx	r2, r3, #1, #7
    345a:	f815 c00e 	ldrb.w	ip, [r5, lr]
    345e:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    3462:	fb0c 3302 	mla	r3, ip, r2, r3
    3466:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3468:	0402      	lsls	r2, r0, #16
    346a:	bf48      	it	mi
    346c:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    346e:	6822      	ldr	r2, [r4, #0]
    3470:	920c      	str	r2, [sp, #48]	; 0x30
    3472:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3474:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    3478:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    347c:	b29b      	uxth	r3, r3
    347e:	f44f 202f 	mov.w	r0, #716800	; 0xaf000
    3482:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    3486:	fb00 fe0e 	mul.w	lr, r0, lr
    348a:	eb03 2202 	add.w	r2, r3, r2, lsl #8
    348e:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    3492:	0c12      	lsrs	r2, r2, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    3494:	fa5f f38e 	uxtb.w	r3, lr
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    349c:	0658      	lsls	r0, r3, #25
    349e:	b292      	uxth	r2, r2
    34a0:	f140 813e 	bpl.w	3720 <pacifica_loop()+0x564>
        offset = (uint8_t)255 - offset;
    34a4:	43db      	mvns	r3, r3
    34a6:	b2d8      	uxtb	r0, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    34a8:	f000 030f 	and.w	r3, r0, #15
    if( theta & 0x40) secoffset++;
    34ac:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    34ae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    34b2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 3524 <pacifica_loop()+0x368>
    34b6:	1100      	asrs	r0, r0, #4
    34b8:	0040      	lsls	r0, r0, #1
    34ba:	eb09 0c00 	add.w	ip, r9, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    34be:	f819 0000 	ldrb.w	r0, [r9, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    34c2:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    34c6:	fb1c f303 	smulbb	r3, ip, r3
    34ca:	eb00 1323 	add.w	r3, r0, r3, asr #4
    if( theta & 0x80 ) y = -y;
    34ce:	f01e 0f80 	tst.w	lr, #128	; 0x80
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    34d2:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34d4:	6820      	ldr	r0, [r4, #0]
    34d6:	9007      	str	r0, [sp, #28]
    34d8:	e026      	b.n	3528 <pacifica_loop()+0x36c>
    34da:	bf00      	nop
    34dc:	1fff876c 	.word	0x1fff876c
    34e0:	1fff8764 	.word	0x1fff8764
    34e4:	1fff8768 	.word	0x1fff8768
    34e8:	0000723c 	.word	0x0000723c
    34ec:	1fff878c 	.word	0x1fff878c
    34f0:	1fff9668 	.word	0x1fff9668
    34f4:	1fff9348 	.word	0x1fff9348
    34f8:	00007da0 	.word	0x00007da0
    34fc:	00008780 	.word	0x00008780
    3500:	000451c8 	.word	0x000451c8
    3504:	000351d8 	.word	0x000351d8
    3508:	000223f8 	.word	0x000223f8
    350c:	1fff95b6 	.word	0x1fff95b6
    3510:	00011918 	.word	0x00011918
    3514:	1fff8dcc 	.word	0x1fff8dcc
    3518:	1fff95b2 	.word	0x1fff95b2
    351c:	1fff95b4 	.word	0x1fff95b4
    3520:	1fff95b8 	.word	0x1fff95b8
    3524:	0000785c 	.word	0x0000785c
    if( theta & 0x80 ) y = -y;
    3528:	bf18      	it	ne
    352a:	425b      	negne	r3, r3
    352c:	b25b      	sxtb	r3, r3
	return ret;
    352e:	f8dd c01c 	ldr.w	ip, [sp, #28]
    3532:	f8df e230 	ldr.w	lr, [pc, #560]	; 3764 <pacifica_loop()+0x5a8>
    3536:	4884      	ldr	r0, [pc, #528]	; (3748 <pacifica_loop()+0x58c>)

    y += 128;
    3538:	3b80      	subs	r3, #128	; 0x80
    353a:	b2db      	uxtb	r3, r3
    353c:	fb0e fe0c 	mul.w	lr, lr, ip
    3540:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
    3544:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    3548:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    354c:	f1ce 0e00 	rsb	lr, lr, #0
    3550:	121b      	asrs	r3, r3, #8
    3552:	fa1f fe8e 	uxth.w	lr, lr
    3556:	3346      	adds	r3, #70	; 0x46
    3558:	b2db      	uxtb	r3, r3
    355a:	f8cd e000 	str.w	lr, [sp]
    355e:	f7ff fccb 	bl	2ef8 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3562:	6823      	ldr	r3, [r4, #0]
    3564:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    3566:	980b      	ldr	r0, [sp, #44]	; 0x2c
    pacifica_one_layer(pacifica_palette_2, sCIStart2, beatsin16(4, 6 * 256, 9 * 256), beatsin8(17, 40, 80), beat16(401));
    3568:	f8b8 1000 	ldrh.w	r1, [r8]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    356c:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    3570:	fb03 f000 	mul.w	r0, r3, r0
    3574:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3576:	0442      	lsls	r2, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3578:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    357c:	d503      	bpl.n	3586 <pacifica_loop()+0x3ca>
    357e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3582:	3307      	adds	r3, #7
    3584:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3586:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    358a:	f3c3 0246 	ubfx	r2, r3, #1, #7
    358e:	f815 500e 	ldrb.w	r5, [r5, lr]
    3592:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    3596:	fb05 3302 	mla	r3, r5, r2, r3
    359a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    359c:	0402      	lsls	r2, r0, #16
    359e:	bf48      	it	mi
    35a0:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35a2:	6822      	ldr	r2, [r4, #0]
    35a4:	920a      	str	r2, [sp, #40]	; 0x28
    35a6:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    35a8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    35ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    35ae:	4867      	ldr	r0, [pc, #412]	; (374c <pacifica_loop()+0x590>)
    35b0:	b29b      	uxth	r3, r3
    35b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    35b6:	fb00 f505 	mul.w	r5, r0, r5
    35ba:	eb03 2202 	add.w	r2, r3, r2, lsl #8
    35be:	0e2d      	lsrs	r5, r5, #24
    35c0:	0c12      	lsrs	r2, r2, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    35c2:	b2eb      	uxtb	r3, r5
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    35c4:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    35c8:	065e      	lsls	r6, r3, #25
    35ca:	b292      	uxth	r2, r2
    35cc:	f140 80b7 	bpl.w	373e <pacifica_loop()+0x582>
        offset = (uint8_t)255 - offset;
    35d0:	43d8      	mvns	r0, r3
    35d2:	b2c0      	uxtb	r0, r0
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    35d4:	f000 030f 	and.w	r3, r0, #15
    if( theta & 0x40) secoffset++;
    35d8:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    35da:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    35de:	1100      	asrs	r0, r0, #4
    35e0:	0040      	lsls	r0, r0, #1
    35e2:	eb09 0600 	add.w	r6, r9, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    35e6:	f819 0000 	ldrb.w	r0, [r9, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    35ea:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    35ec:	fb16 f303 	smulbb	r3, r6, r3
    35f0:	eb00 1323 	add.w	r3, r0, r3, asr #4
    35f4:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    35f6:	0628      	lsls	r0, r5, #24
    35f8:	bf48      	it	mi
    35fa:	425b      	negmi	r3, r3
    35fc:	b25b      	sxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35fe:	6820      	ldr	r0, [r4, #0]
    3600:	9006      	str	r0, [sp, #24]

    y += 128;
    3602:	3b80      	subs	r3, #128	; 0x80
    3604:	b2db      	uxtb	r3, r3
	return ret;
    3606:	9d06      	ldr	r5, [sp, #24]
    3608:	4851      	ldr	r0, [pc, #324]	; (3750 <pacifica_loop()+0x594>)
    360a:	eb03 0683 	add.w	r6, r3, r3, lsl #2
    360e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    3612:	121b      	asrs	r3, r3, #8
    3614:	fb00 f005 	mul.w	r0, r0, r5
    3618:	0c00      	lsrs	r0, r0, #16
    361a:	3328      	adds	r3, #40	; 0x28
    361c:	b2db      	uxtb	r3, r3
    361e:	9000      	str	r0, [sp, #0]
    3620:	484c      	ldr	r0, [pc, #304]	; (3754 <pacifica_loop()+0x598>)
    3622:	f7ff fc69 	bl	2ef8 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3626:	6823      	ldr	r3, [r4, #0]
    3628:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    362a:	9809      	ldr	r0, [sp, #36]	; 0x24
    pacifica_one_layer(pacifica_palette_3, sCIStart3, 6 * 256, beatsin8(9, 10, 38), 0 - beat16(503));
    362c:	8839      	ldrh	r1, [r7, #0]
    362e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3632:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
    3636:	f3c0 3047 	ubfx	r0, r0, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    363a:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    363c:	065f      	lsls	r7, r3, #25
    363e:	d579      	bpl.n	3734 <pacifica_loop()+0x578>
        offset = (uint8_t)255 - offset;
    3640:	43db      	mvns	r3, r3
    3642:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3644:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    3648:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    364a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    364e:	1112      	asrs	r2, r2, #4
    3650:	0052      	lsls	r2, r2, #1
    3652:	eb09 0502 	add.w	r5, r9, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3656:	f819 2002 	ldrb.w	r2, [r9, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    365a:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    365c:	fb15 f303 	smulbb	r3, r5, r3
    3660:	eb02 1323 	add.w	r3, r2, r3, asr #4
    if( theta & 0x80 ) y = -y;
    3664:	0606      	lsls	r6, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3666:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3668:	6822      	ldr	r2, [r4, #0]
    366a:	9205      	str	r2, [sp, #20]
    if( theta & 0x80 ) y = -y;
    366c:	bf48      	it	mi
    366e:	425b      	negmi	r3, r3
    3670:	b25b      	sxtb	r3, r3
	return ret;
    3672:	9d05      	ldr	r5, [sp, #20]
    3674:	4a38      	ldr	r2, [pc, #224]	; (3758 <pacifica_loop()+0x59c>)
    3676:	4839      	ldr	r0, [pc, #228]	; (375c <pacifica_loop()+0x5a0>)

    y += 128;
    3678:	3b80      	subs	r3, #128	; 0x80
    367a:	b2db      	uxtb	r3, r3
    367c:	fb02 f205 	mul.w	r2, r2, r5
    3680:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
    3684:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3688:	0c12      	lsrs	r2, r2, #16
    368a:	4252      	negs	r2, r2
    368c:	121b      	asrs	r3, r3, #8
    368e:	b292      	uxth	r2, r2
    3690:	330a      	adds	r3, #10
    3692:	9200      	str	r2, [sp, #0]
    3694:	b2db      	uxtb	r3, r3
    3696:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    369a:	f7ff fc2d 	bl	2ef8 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    369e:	6823      	ldr	r3, [r4, #0]
    36a0:	9308      	str	r3, [sp, #32]
	return ret;
    36a2:	9808      	ldr	r0, [sp, #32]
    pacifica_one_layer(pacifica_palette_3, sCIStart4, 5 * 256, beatsin8(8, 10, 28), beat16(601));
    36a4:	f8ba 1000 	ldrh.w	r1, [sl]
    36a8:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    36ac:	fb03 f000 	mul.w	r0, r3, r0
    36b0:	0e00      	lsrs	r0, r0, #24
    36b2:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    36b4:	065d      	lsls	r5, r3, #25
    36b6:	d538      	bpl.n	372a <pacifica_loop()+0x56e>
        offset = (uint8_t)255 - offset;
    36b8:	43db      	mvns	r3, r3
    36ba:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    36bc:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    36c0:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    36c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    36c6:	1112      	asrs	r2, r2, #4
    36c8:	0052      	lsls	r2, r2, #1
    36ca:	eb09 0502 	add.w	r5, r9, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    36ce:	f819 2002 	ldrb.w	r2, [r9, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    36d2:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    36d4:	fb15 f303 	smulbb	r3, r5, r3
    36d8:	eb02 1323 	add.w	r3, r2, r3, asr #4
    36dc:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    36de:	0602      	lsls	r2, r0, #24
    36e0:	bf48      	it	mi
    36e2:	425b      	negmi	r3, r3
    36e4:	b25b      	sxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    36e6:	6822      	ldr	r2, [r4, #0]
    36e8:	9204      	str	r2, [sp, #16]

    y += 128;
    36ea:	3b80      	subs	r3, #128	; 0x80
    36ec:	b2db      	uxtb	r3, r3
	return ret;
    36ee:	9c04      	ldr	r4, [sp, #16]
    36f0:	4a1b      	ldr	r2, [pc, #108]	; (3760 <pacifica_loop()+0x5a4>)
    36f2:	481a      	ldr	r0, [pc, #104]	; (375c <pacifica_loop()+0x5a0>)
    36f4:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
    36f8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    36fc:	fb02 f204 	mul.w	r2, r2, r4
    3700:	121b      	asrs	r3, r3, #8
    3702:	0c12      	lsrs	r2, r2, #16
    3704:	330a      	adds	r3, #10
    3706:	b2db      	uxtb	r3, r3
    3708:	9200      	str	r2, [sp, #0]
    370a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    370e:	f7ff fbf3 	bl	2ef8 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>

    // Add brighter 'whitecaps' where the waves lines up more
    pacifica_add_whitecaps();
    3712:	f7ff fc6d 	bl	2ff0 <pacifica_add_whitecaps()>

    // Deepen the blues and greens a bit
    pacifica_deepen_colors();
    3716:	f7ff fd21 	bl	315c <pacifica_deepen_colors()>
}
    371a:	b014      	add	sp, #80	; 0x50
    371c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3720:	f003 003f 	and.w	r0, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3724:	f003 030f 	and.w	r3, r3, #15
    3728:	e6c3      	b.n	34b2 <pacifica_loop()+0x2f6>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    372a:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    372e:	f003 030f 	and.w	r3, r3, #15
    3732:	e7c8      	b.n	36c6 <pacifica_loop()+0x50a>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3734:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3738:	f003 030f 	and.w	r3, r3, #15
    373c:	e787      	b.n	364e <pacifica_loop()+0x492>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    373e:	f003 003f 	and.w	r0, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3742:	f003 030f 	and.w	r3, r3, #15
    3746:	e74a      	b.n	35de <pacifica_loop()+0x422>
    3748:	1fff9244 	.word	0x1fff9244
    374c:	00129800 	.word	0x00129800
    3750:	0001b698 	.word	0x0001b698
    3754:	1fff9274 	.word	0x1fff9274
    3758:	00022628 	.word	0x00022628
    375c:	1fff92a4 	.word	0x1fff92a4
    3760:	00029158 	.word	0x00029158
    3764:	00014938 	.word	0x00014938

00003768 <setup>:
uint8_t current_mode_number = 0;

#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))


void setup() {
    3768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    376c:	f640 31b8 	movw	r1, #3000	; 0xbb8
    3770:	b097      	sub	sp, #92	; 0x5c
    3772:	4878      	ldr	r0, [pc, #480]	; (3954 <setup+0x1ec>)
    3774:	f001 f8d2 	bl	491c <VisualMicroDebug::init(unsigned long)>
    3778:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    377c:	4875      	ldr	r0, [pc, #468]	; (3954 <setup+0x1ec>)
    377e:	f001 f8c9 	bl	4914 <VisualMicroDebug::begin(unsigned long)>
    3782:	2101      	movs	r1, #1
    3784:	4873      	ldr	r0, [pc, #460]	; (3954 <setup+0x1ec>)
    3786:	f001 f89f 	bl	48c8 <VisualMicroDebug::outPacketStart(bool)>
    378a:	b150      	cbz	r0, 37a2 <setup+0x3a>
    378c:	2110      	movs	r1, #16
    378e:	4872      	ldr	r0, [pc, #456]	; (3958 <setup+0x1f0>)
    3790:	f002 fbf6 	bl	5f80 <usb_serial_write>
    3794:	486f      	ldr	r0, [pc, #444]	; (3954 <setup+0x1ec>)
    3796:	210a      	movs	r1, #10
    3798:	f001 f884 	bl	48a4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    379c:	486d      	ldr	r0, [pc, #436]	; (3954 <setup+0x1ec>)
    379e:	f001 f8b7 	bl	4910 <VisualMicroDebug::outPacketEnd()>
    37a2:	2201      	movs	r2, #1
    37a4:	2100      	movs	r1, #0
    37a6:	486b      	ldr	r0, [pc, #428]	; (3954 <setup+0x1ec>)
    37a8:	f001 f964 	bl	4a74 <VisualMicroDebug::start(bool, bool)>
	delay(2000);
    37ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    37b0:	f001 fbce 	bl	4f50 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    37b4:	4869      	ldr	r0, [pc, #420]	; (395c <setup+0x1f4>)
	//Serial.begin(57600);

	LEDS.setBrightness(max_bright);
    37b6:	496a      	ldr	r1, [pc, #424]	; (3960 <setup+0x1f8>)
    37b8:	6803      	ldr	r3, [r0, #0]
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    37ba:	4a6a      	ldr	r2, [pc, #424]	; (3964 <setup+0x1fc>)
    37bc:	7809      	ldrb	r1, [r1, #0]
    37be:	7011      	strb	r1, [r2, #0]
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    37c0:	f013 0401 	ands.w	r4, r3, #1
    37c4:	f000 80a1 	beq.w	390a <setup+0x1a2>
    37c8:	22bc      	movs	r2, #188	; 0xbc
    37ca:	2300      	movs	r3, #0
    37cc:	4966      	ldr	r1, [pc, #408]	; (3968 <setup+0x200>)
    37ce:	4867      	ldr	r0, [pc, #412]	; (396c <setup+0x204>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    37d0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 398c <setup+0x224>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    37d4:	4c66      	ldr	r4, [pc, #408]	; (3970 <setup+0x208>)
    37d6:	f000 fe59 	bl	448c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>

	LEDS.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(leds, NUM_LEDS);

	set_max_power_in_volts_and_milliamps(5, 3000);
    37da:	f640 31b8 	movw	r1, #3000	; 0xbb8
    37de:	2005      	movs	r0, #5
    37e0:	f001 f854 	bl	488c <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    37e4:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    37e8:	2002      	movs	r0, #2
    37ea:	f8a8 3000 	strh.w	r3, [r8]
    37ee:	f001 fa81 	bl	4cf4 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    37f2:	f8b8 3000 	ldrh.w	r3, [r8]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    37f6:	2700      	movs	r7, #0
    37f8:	4403      	add	r3, r0
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    37fa:	aa09      	add	r2, sp, #36	; 0x24
    37fc:	a80a      	add	r0, sp, #40	; 0x28
    37fe:	2110      	movs	r1, #16
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    3800:	ad0a      	add	r5, sp, #40	; 0x28
    3802:	f8a8 3000 	strh.w	r3, [r8]
    3806:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    380a:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    380e:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    3812:	f000 fc9f 	bl	4154 <fill_solid(CRGB*, int, CRGB const&)>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    3816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    381a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    381c:	f8b8 6000 	ldrh.w	r6, [r8]
    3820:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    3824:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    3828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    382a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    382e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3832:	3619      	adds	r6, #25
    3834:	b2b5      	uxth	r5, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3836:	eb05 2615 	add.w	r6, r5, r5, lsr #8

	//led_mode = EEPROM.read(STARTMODE);

	current_palette  = CRGBPalette16(CRGB::Black);
	target_palette   = g_gradient_palettes[random8(g_gradient_palette_count + 1)];
    383a:	b2f6      	uxtb	r6, r6
    383c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3840:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    3844:	ebc6 1603 	rsb	r6, r6, r3, lsl #4
    3848:	11f6      	asrs	r6, r6, #7
    384a:	4b4a      	ldr	r3, [pc, #296]	; (3974 <setup+0x20c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    384c:	f8a8 5000 	strh.w	r5, [r8]
    3850:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    3854:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    3858:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    385a:	3701      	adds	r7, #1
        } while ( u.index != 255);
    385c:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    385e:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    3860:	d1f8      	bne.n	3854 <setup+0xec>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3862:	f8d8 3000 	ldr.w	r3, [r8]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    3866:	9707      	str	r7, [sp, #28]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3868:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    386c:	ea4f 6913 	mov.w	r9, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3870:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3872:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    3876:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    387a:	2400      	movs	r4, #0
    387c:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    387e:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3882:	483d      	ldr	r0, [pc, #244]	; (3978 <setup+0x210>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3884:	f3c5 2707 	ubfx	r7, r5, #8, #8
    3888:	f3c5 4607 	ubfx	r6, r5, #16, #8
    388c:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    388e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3892:	9104      	str	r1, [sp, #16]
    3894:	b2f1      	uxtb	r1, r6
    3896:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    3898:	fa5f f18c 	uxtb.w	r1, ip
    389c:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    389e:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    38a0:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    38a2:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    38a4:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    38a8:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    38aa:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    38ae:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    38b2:	d80c      	bhi.n	38ce <setup+0x166>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    38b4:	9906      	ldr	r1, [sp, #24]
    38b6:	458c      	cmp	ip, r1
    38b8:	dc07      	bgt.n	38ca <setup+0x162>
    38ba:	290f      	cmp	r1, #15
    38bc:	d005      	beq.n	38ca <setup+0x162>
                    istart8 = lastSlotUsed + 1;
    38be:	3101      	adds	r1, #1
    38c0:	b2c9      	uxtb	r1, r1
    38c2:	428b      	cmp	r3, r1
    38c4:	9103      	str	r1, [sp, #12]
    38c6:	bf38      	it	cc
    38c8:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    38ca:	b259      	sxtb	r1, r3
    38cc:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    38ce:	a909      	add	r1, sp, #36	; 0x24
    38d0:	9100      	str	r1, [sp, #0]
    38d2:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    38d4:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    38d8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    38dc:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    38e0:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
    38e4:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
    38e8:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
    38ec:	f000 fc62 	bl	41b4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    38f0:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    38f2:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    38f6:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    38fa:	46ce      	mov	lr, r9
    38fc:	d1bf      	bne.n	387e <setup+0x116>
	current_blending = LINEARBLEND;
    38fe:	4b1f      	ldr	r3, [pc, #124]	; (397c <setup+0x214>)
    3900:	2201      	movs	r2, #1
    3902:	701a      	strb	r2, [r3, #0]

}
    3904:	b017      	add	sp, #92	; 0x5c
    3906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    390a:	f001 faa1 	bl	4e50 <__cxa_guard_acquire>
    390e:	2800      	cmp	r0, #0
    3910:	f43f af5a 	beq.w	37c8 <setup+0x60>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    3914:	491a      	ldr	r1, [pc, #104]	; (3980 <setup+0x218>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    3916:	4b15      	ldr	r3, [pc, #84]	; (396c <setup+0x204>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    3918:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    391a:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    391c:	22ff      	movs	r2, #255	; 0xff
    391e:	2501      	movs	r5, #1
    3920:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    3922:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    3924:	749d      	strb	r5, [r3, #18]
    3926:	731a      	strb	r2, [r3, #12]
    3928:	735a      	strb	r2, [r3, #13]
    392a:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    392c:	73da      	strb	r2, [r3, #15]
    392e:	741a      	strb	r2, [r3, #16]
    3930:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    3932:	b160      	cbz	r0, 394e <setup+0x1e6>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    3934:	4a13      	ldr	r2, [pc, #76]	; (3984 <setup+0x21c>)
    3936:	6811      	ldr	r1, [r2, #0]
    3938:	b101      	cbz	r1, 393c <setup+0x1d4>
    393a:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    393c:	6013      	str	r3, [r2, #0]
		// CORE_PIN14_CONFIG = gState.pins[3];
	}


public:
	ARMHardwareSPIOutput() { m_pSelect = NULL; }
    393e:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    3940:	4911      	ldr	r1, [pc, #68]	; (3988 <setup+0x220>)
    3942:	4806      	ldr	r0, [pc, #24]	; (395c <setup+0x1f4>)
    3944:	619a      	str	r2, [r3, #24]
    3946:	6019      	str	r1, [r3, #0]
    3948:	f001 fa88 	bl	4e5c <__cxa_guard_release>
    394c:	e73c      	b.n	37c8 <setup+0x60>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    394e:	600b      	str	r3, [r1, #0]
    3950:	e7f0      	b.n	3934 <setup+0x1cc>
    3952:	bf00      	nop
    3954:	1fff9618 	.word	0x1fff9618
    3958:	0000724c 	.word	0x0000724c
    395c:	1fff8c8c 	.word	0x1fff8c8c
    3960:	1fff8771 	.word	0x1fff8771
    3964:	1fff95f0 	.word	0x1fff95f0
    3968:	1fff8dcc 	.word	0x1fff8dcc
    396c:	1fff8c90 	.word	0x1fff8c90
    3970:	1fff910c 	.word	0x1fff910c
    3974:	00007dcc 	.word	0x00007dcc
    3978:	1fff95bc 	.word	0x1fff95bc
    397c:	1fff92e0 	.word	0x1fff92e0
    3980:	1fff9600 	.word	0x1fff9600
    3984:	1fff9610 	.word	0x1fff9610
    3988:	00007024 	.word	0x00007024
    398c:	1fff8782 	.word	0x1fff8782

00003990 <loop>:


void loop() {
    3990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    3994:	f8df 9324 	ldr.w	r9, [pc, #804]	; 3cbc <loop+0x32c>
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    3998:	4db5      	ldr	r5, [pc, #724]	; (3c70 <loop+0x2e0>)
	current_blending = LINEARBLEND;

}


void loop() {
    399a:	b0a3      	sub	sp, #140	; 0x8c
	random16_add_entropy(random());
    399c:	f003 fb00 	bl	6fa0 <random>
    39a0:	f8b9 3000 	ldrh.w	r3, [r9]

	EVERY_N_MILLISECONDS(50) {
    39a4:	682a      	ldr	r2, [r5, #0]
    39a6:	4418      	add	r0, r3
    39a8:	f8a9 0000 	strh.w	r0, [r9]
    39ac:	07d0      	lsls	r0, r2, #31
    39ae:	f140 8086 	bpl.w	3abe <loop+0x12e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    39b2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 3cc0 <loop+0x330>
    39b6:	4caf      	ldr	r4, [pc, #700]	; (3c74 <loop+0x2e4>)
    39b8:	f8d8 3000 	ldr.w	r3, [r8]
    39bc:	930d      	str	r3, [sp, #52]	; 0x34
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    39be:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    39c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    39c4:	1a5b      	subs	r3, r3, r1
    39c6:	429a      	cmp	r2, r3
    39c8:	f240 808c 	bls.w	3ae4 <loop+0x154>
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
    39cc:	4daa      	ldr	r5, [pc, #680]	; (3c78 <loop+0x2e8>)
    39ce:	682b      	ldr	r3, [r5, #0]
    39d0:	07d9      	lsls	r1, r3, #31
    39d2:	f140 8096 	bpl.w	3b02 <loop+0x172>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    39d6:	f8d8 3000 	ldr.w	r3, [r8]
    39da:	4ca8      	ldr	r4, [pc, #672]	; (3c7c <loop+0x2ec>)
    39dc:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    39de:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    39e0:	48a7      	ldr	r0, [pc, #668]	; (3c80 <loop+0x2f0>)
    39e2:	8822      	ldrh	r2, [r4, #0]
    39e4:	8861      	ldrh	r1, [r4, #2]
    39e6:	fba0 0303 	umull	r0, r3, r0, r3
    39ea:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    39ee:	b29b      	uxth	r3, r3
    39f0:	4299      	cmp	r1, r3
    39f2:	d80d      	bhi.n	3a10 <loop+0x80>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    39f4:	f8d8 3000 	ldr.w	r3, [r8]
    39f8:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    39fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    39fc:	49a0      	ldr	r1, [pc, #640]	; (3c80 <loop+0x2f0>)
		if(use_palette){
    39fe:	4aa1      	ldr	r2, [pc, #644]	; (3c84 <loop+0x2f4>)
    3a00:	fba1 1303 	umull	r1, r3, r1, r3
    3a04:	7812      	ldrb	r2, [r2, #0]
    3a06:	099b      	lsrs	r3, r3, #6
    3a08:	8023      	strh	r3, [r4, #0]
    3a0a:	2a00      	cmp	r2, #0
    3a0c:	f040 8099 	bne.w	3b42 <loop+0x1b2>
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
    3a10:	4d9d      	ldr	r5, [pc, #628]	; (3c88 <loop+0x2f8>)
    3a12:	682b      	ldr	r3, [r5, #0]
    3a14:	07da      	lsls	r2, r3, #31
    3a16:	f140 8089 	bpl.w	3b2c <loop+0x19c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a1a:	f8d8 3000 	ldr.w	r3, [r8]
    3a1e:	4c9b      	ldr	r4, [pc, #620]	; (3c8c <loop+0x2fc>)
    3a20:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    3a22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3a24:	4896      	ldr	r0, [pc, #600]	; (3c80 <loop+0x2f0>)
    3a26:	8822      	ldrh	r2, [r4, #0]
    3a28:	8861      	ldrh	r1, [r4, #2]
    3a2a:	fba0 0303 	umull	r0, r3, r0, r3
    3a2e:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    3a32:	b29b      	uxth	r3, r3
    3a34:	4299      	cmp	r1, r3
    3a36:	d81f      	bhi.n	3a78 <loop+0xe8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a38:	f8b9 3000 	ldrh.w	r3, [r9]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a3c:	f8d8 2000 	ldr.w	r2, [r8]
    3a40:	9212      	str	r2, [sp, #72]	; 0x48
    3a42:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3a46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3a4a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a4e:	3319      	adds	r3, #25
    3a50:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a52:	eb03 2213 	add.w	r2, r3, r3, lsr #8
	return ret;
    3a56:	9912      	ldr	r1, [sp, #72]	; 0x48
    3a58:	4e89      	ldr	r6, [pc, #548]	; (3c80 <loop+0x2f0>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a5a:	f8a9 3000 	strh.w	r3, [r9]
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
    3a5e:	b2d3      	uxtb	r3, r2
    3a60:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3a64:	fba6 1201 	umull	r1, r2, r6, r1
    3a68:	4d89      	ldr	r5, [pc, #548]	; (3c90 <loop+0x300>)
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
		mode_change = 1;
    3a6a:	488a      	ldr	r0, [pc, #552]	; (3c94 <loop+0x304>)
		current_mode_number = random8(ARRAY_SIZE(modes));
    3a6c:	121b      	asrs	r3, r3, #8
    3a6e:	0992      	lsrs	r2, r2, #6
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
		mode_change = 1;
    3a70:	2101      	movs	r1, #1
		current_mode_number = random8(ARRAY_SIZE(modes));
    3a72:	702b      	strb	r3, [r5, #0]
    3a74:	8022      	strh	r2, [r4, #0]
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
		mode_change = 1;
    3a76:	7001      	strb	r1, [r0, #0]
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

	EVERY_N_MILLIS_I(this_timer, this_delay) {
    3a78:	4d87      	ldr	r5, [pc, #540]	; (3c98 <loop+0x308>)
    3a7a:	682b      	ldr	r3, [r5, #0]
    3a7c:	07db      	lsls	r3, r3, #31
    3a7e:	d54b      	bpl.n	3b18 <loop+0x188>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a80:	f8d8 3000 	ldr.w	r3, [r8]
    3a84:	4c85      	ldr	r4, [pc, #532]	; (3c9c <loop+0x30c>)
    3a86:	9316      	str	r3, [sp, #88]	; 0x58
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    3a88:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    3a8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3a8e:	1a5b      	subs	r3, r3, r1
    3a90:	4293      	cmp	r3, r2
    3a92:	d30d      	bcc.n	3ab0 <loop+0x120>
		this_timer.setPeriod(this_delay);
		modes[current_mode_number]();
    3a94:	4b7e      	ldr	r3, [pc, #504]	; (3c90 <loop+0x300>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a96:	f8d8 1000 	ldr.w	r1, [r8]
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

	EVERY_N_MILLIS_I(this_timer, this_delay) {
		this_timer.setPeriod(this_delay);
    3a9a:	4a81      	ldr	r2, [pc, #516]	; (3ca0 <loop+0x310>)
		modes[current_mode_number]();
    3a9c:	7818      	ldrb	r0, [r3, #0]
    3a9e:	9115      	str	r1, [sp, #84]	; 0x54
    3aa0:	4b80      	ldr	r3, [pc, #512]	; (3ca4 <loop+0x314>)
	return ret;
    3aa2:	9915      	ldr	r1, [sp, #84]	; 0x54
    3aa4:	6812      	ldr	r2, [r2, #0]
    3aa6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    3aaa:	e884 0006 	stmia.w	r4, {r1, r2}
    3aae:	4798      	blx	r3
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    3ab0:	487d      	ldr	r0, [pc, #500]	; (3ca8 <loop+0x318>)
    3ab2:	7801      	ldrb	r1, [r0, #0]
    3ab4:	f000 fd3c 	bl	4530 <CFastLED::show(unsigned char)>
	}


	FastLED.show();

}
    3ab8:	b023      	add	sp, #140	; 0x8c
    3aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    3abe:	4628      	mov	r0, r5
    3ac0:	f001 f9c6 	bl	4e50 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ac4:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 3cc0 <loop+0x330>
    3ac8:	4c6a      	ldr	r4, [pc, #424]	; (3c74 <loop+0x2e4>)
    3aca:	2800      	cmp	r0, #0
    3acc:	f040 8107 	bne.w	3cde <loop+0x34e>
    3ad0:	f8d8 3000 	ldr.w	r3, [r8]
    3ad4:	930d      	str	r3, [sp, #52]	; 0x34
    3ad6:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    3ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3adc:	1a5b      	subs	r3, r3, r1
    3ade:	4293      	cmp	r3, r2
    3ae0:	f4ff af74 	bcc.w	39cc <loop+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ae4:	f8d8 3000 	ldr.w	r3, [r8]
    3ae8:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    3aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
    3aec:	4d62      	ldr	r5, [pc, #392]	; (3c78 <loop+0x2e8>)

void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
    3aee:	496f      	ldr	r1, [pc, #444]	; (3cac <loop+0x31c>)
    3af0:	6023      	str	r3, [r4, #0]
    3af2:	486f      	ldr	r0, [pc, #444]	; (3cb0 <loop+0x320>)
    3af4:	2218      	movs	r2, #24
    3af6:	f000 fca1 	bl	443c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
	}

	EVERY_N_SECONDS(25){
    3afa:	682b      	ldr	r3, [r5, #0]
    3afc:	07d9      	lsls	r1, r3, #31
    3afe:	f53f af6a 	bmi.w	39d6 <loop+0x46>
    3b02:	4628      	mov	r0, r5
    3b04:	f001 f9a4 	bl	4e50 <__cxa_guard_acquire>
    3b08:	2800      	cmp	r0, #0
    3b0a:	f040 80f3 	bne.w	3cf4 <loop+0x364>
    3b0e:	4c5b      	ldr	r4, [pc, #364]	; (3c7c <loop+0x2ec>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b10:	f8d8 3000 	ldr.w	r3, [r8]
    3b14:	9310      	str	r3, [sp, #64]	; 0x40
    3b16:	e762      	b.n	39de <loop+0x4e>
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

	EVERY_N_MILLIS_I(this_timer, this_delay) {
    3b18:	4628      	mov	r0, r5
    3b1a:	f001 f999 	bl	4e50 <__cxa_guard_acquire>
    3b1e:	2800      	cmp	r0, #0
    3b20:	f040 80d0 	bne.w	3cc4 <loop+0x334>
    3b24:	4c5d      	ldr	r4, [pc, #372]	; (3c9c <loop+0x30c>)
    3b26:	f8d8 3000 	ldr.w	r3, [r8]
    3b2a:	e7ac      	b.n	3a86 <loop+0xf6>
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
    3b2c:	4628      	mov	r0, r5
    3b2e:	f001 f98f 	bl	4e50 <__cxa_guard_acquire>
    3b32:	2800      	cmp	r0, #0
    3b34:	f040 808c 	bne.w	3c50 <loop+0x2c0>
    3b38:	4c54      	ldr	r4, [pc, #336]	; (3c8c <loop+0x2fc>)
    3b3a:	f8d8 3000 	ldr.w	r3, [r8]
    3b3e:	9313      	str	r3, [sp, #76]	; 0x4c
    3b40:	e76f      	b.n	3a22 <loop+0x92>
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };

    CRGBPalette16( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    3b42:	4d5a      	ldr	r5, [pc, #360]	; (3cac <loop+0x31c>)
    3b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3b46:	ac16      	add	r4, sp, #88	; 0x58
    3b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3b4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3b52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
		if(use_palette){
			updatePaletteIndex(target_palette);
    3b56:	a816      	add	r0, sp, #88	; 0x58
    3b58:	f7fe fed4 	bl	2904 <updatePaletteIndex(CRGBPalette16)>
    3b5c:	f8b9 3000 	ldrh.w	r3, [r9]
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
    3b60:	4854      	ldr	r0, [pc, #336]	; (3cb4 <loop+0x324>)
	}

	EVERY_N_SECONDS(25){
		if(use_palette){
			updatePaletteIndex(target_palette);
			palette_index = random8(g_gradient_palette_count);
    3b62:	4955      	ldr	r1, [pc, #340]	; (3cb8 <loop+0x328>)
    3b64:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3b68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3b6c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3b70:	3319      	adds	r3, #25
    3b72:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b74:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3b78:	b2d2      	uxtb	r2, r2
    3b7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3b7e:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
    3b82:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b84:	f8a9 3000 	strh.w	r3, [r9]
			target_palette = g_gradient_palettes[palette_index]	;
    3b88:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
	}

	EVERY_N_SECONDS(25){
		if(use_palette){
			updatePaletteIndex(target_palette);
			palette_index = random8(g_gradient_palette_count);
    3b8c:	700a      	strb	r2, [r1, #0]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    3b8e:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    3b90:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    3b94:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3b96:	3701      	adds	r7, #1
        } while ( u.index != 255);
    3b98:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3b9a:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    3b9c:	d1f8      	bne.n	3b90 <loop+0x200>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3b9e:	f8da 3000 	ldr.w	r3, [sl]
    3ba2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3ba6:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3baa:	f3c3 4b07 	ubfx	fp, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3bae:	9207      	str	r2, [sp, #28]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3bb0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3bb4:	0e1b      	lsrs	r3, r3, #24
    3bb6:	9205      	str	r2, [sp, #20]
    3bb8:	9304      	str	r3, [sp, #16]

        int indexstart = 0;
    3bba:	2400      	movs	r4, #0
    3bbc:	9708      	str	r7, [sp, #32]
    3bbe:	46de      	mov	lr, fp
    3bc0:	46d0      	mov	r8, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3bc2:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3bc6:	4839      	ldr	r0, [pc, #228]	; (3cac <loop+0x31c>)
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
    3bc8:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3bcc:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    3bd0:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    3bd2:	f3c5 4607 	ubfx	r6, r5, #16, #8
    3bd6:	f3c5 6507 	ubfx	r5, r5, #24, #8
    3bda:	b2e9      	uxtb	r1, r5
    3bdc:	9106      	str	r1, [sp, #24]
            istart8 = indexstart / 16;
    3bde:	fa5f f18c 	uxtb.w	r1, ip
    3be2:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    3be4:	9908      	ldr	r1, [sp, #32]
    3be6:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3be8:	aa16      	add	r2, sp, #88	; 0x58
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    3bea:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3bee:	fa5f fb87 	uxtb.w	fp, r7
    3bf2:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3bf6:	d80c      	bhi.n	3c12 <loop+0x282>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    3bf8:	9907      	ldr	r1, [sp, #28]
    3bfa:	458c      	cmp	ip, r1
    3bfc:	dc07      	bgt.n	3c0e <loop+0x27e>
    3bfe:	290f      	cmp	r1, #15
    3c00:	d005      	beq.n	3c0e <loop+0x27e>
                    istart8 = lastSlotUsed + 1;
    3c02:	3101      	adds	r1, #1
    3c04:	b2c9      	uxtb	r1, r1
    3c06:	428b      	cmp	r3, r1
    3c08:	9103      	str	r1, [sp, #12]
    3c0a:	bf38      	it	cc
    3c0c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    3c0e:	b259      	sxtb	r1, r3
    3c10:	9107      	str	r1, [sp, #28]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3c12:	a915      	add	r1, sp, #84	; 0x54
    3c14:	9100      	str	r1, [sp, #0]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c16:	f89d c014 	ldrb.w	ip, [sp, #20]
        g = rhs.g;
    3c1a:	f88d e059 	strb.w	lr, [sp, #89]	; 0x59
    3c1e:	9903      	ldr	r1, [sp, #12]
        b = rhs.b;
    3c20:	f89d e010 	ldrb.w	lr, [sp, #16]
    3c24:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c28:	f88d c058 	strb.w	ip, [sp, #88]	; 0x58
    3c2c:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
        g = rhs.g;
    3c30:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
        b = rhs.b;
    3c34:	f88d 5056 	strb.w	r5, [sp, #86]	; 0x56
    3c38:	f000 fabc 	bl	41b4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    3c3c:	9b06      	ldr	r3, [sp, #24]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c3e:	f8cd b014 	str.w	fp, [sp, #20]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3c42:	2cff      	cmp	r4, #255	; 0xff
        g = rhs.g;
    3c44:	46d6      	mov	lr, sl
        b = rhs.b;
    3c46:	9304      	str	r3, [sp, #16]
    3c48:	d1bb      	bne.n	3bc2 <loop+0x232>
    3c4a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    3c4e:	e6df      	b.n	3a10 <loop+0x80>
    3c50:	f8d8 3000 	ldr.w	r3, [r8]
    3c54:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    3c56:	9b11      	ldr	r3, [sp, #68]	; 0x44
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    3c58:	4a09      	ldr	r2, [pc, #36]	; (3c80 <loop+0x2f0>)
    3c5a:	4c0c      	ldr	r4, [pc, #48]	; (3c8c <loop+0x2fc>)
    3c5c:	fba2 2303 	umull	r2, r3, r2, r3
    3c60:	099b      	lsrs	r3, r3, #6
    3c62:	2278      	movs	r2, #120	; 0x78
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
    3c64:	4628      	mov	r0, r5
    3c66:	8023      	strh	r3, [r4, #0]
    3c68:	8062      	strh	r2, [r4, #2]
    3c6a:	f001 f8f7 	bl	4e5c <__cxa_guard_release>
    3c6e:	e764      	b.n	3b3a <loop+0x1aa>
    3c70:	1fff9234 	.word	0x1fff9234
    3c74:	1fff8dbc 	.word	0x1fff8dbc
    3c78:	1fff9238 	.word	0x1fff9238
    3c7c:	1fff9104 	.word	0x1fff9104
    3c80:	10624dd3 	.word	0x10624dd3
    3c84:	1fff8764 	.word	0x1fff8764
    3c88:	1fff923c 	.word	0x1fff923c
    3c8c:	1fff8dc4 	.word	0x1fff8dc4
    3c90:	1fff90ff 	.word	0x1fff90ff
    3c94:	1fff876c 	.word	0x1fff876c
    3c98:	1fff90f4 	.word	0x1fff90f4
    3c9c:	1fff92d8 	.word	0x1fff92d8
    3ca0:	1fff8768 	.word	0x1fff8768
    3ca4:	1fff8720 	.word	0x1fff8720
    3ca8:	1fff95f0 	.word	0x1fff95f0
    3cac:	1fff95bc 	.word	0x1fff95bc
    3cb0:	1fff910c 	.word	0x1fff910c
    3cb4:	00007dcc 	.word	0x00007dcc
    3cb8:	1fff95ba 	.word	0x1fff95ba
    3cbc:	1fff8782 	.word	0x1fff8782
    3cc0:	1fff9668 	.word	0x1fff9668
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cc4:	f8d8 2000 	ldr.w	r2, [r8]
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

	EVERY_N_MILLIS_I(this_timer, this_delay) {
    3cc8:	4b12      	ldr	r3, [pc, #72]	; (3d14 <loop+0x384>)
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    3cca:	4c13      	ldr	r4, [pc, #76]	; (3d18 <loop+0x388>)
    3ccc:	9214      	str	r2, [sp, #80]	; 0x50
	return ret;
    3cce:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3cd0:	681b      	ldr	r3, [r3, #0]
    3cd2:	6022      	str	r2, [r4, #0]
    3cd4:	4628      	mov	r0, r5
    3cd6:	6063      	str	r3, [r4, #4]
    3cd8:	f001 f8c0 	bl	4e5c <__cxa_guard_release>
    3cdc:	e723      	b.n	3b26 <loop+0x196>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cde:	f8d8 3000 	ldr.w	r3, [r8]
    3ce2:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    3ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3ce6:	6023      	str	r3, [r4, #0]
    3ce8:	2332      	movs	r3, #50	; 0x32


void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    3cea:	4628      	mov	r0, r5
    3cec:	6063      	str	r3, [r4, #4]
    3cee:	f001 f8b5 	bl	4e5c <__cxa_guard_release>
    3cf2:	e6ed      	b.n	3ad0 <loop+0x140>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cf4:	f8d8 3000 	ldr.w	r3, [r8]
    3cf8:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    3cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    3cfc:	4a07      	ldr	r2, [pc, #28]	; (3d1c <loop+0x38c>)
    3cfe:	4c08      	ldr	r4, [pc, #32]	; (3d20 <loop+0x390>)
    3d00:	fba2 2303 	umull	r2, r3, r2, r3
    3d04:	099b      	lsrs	r3, r3, #6
    3d06:	2219      	movs	r2, #25
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
    3d08:	4628      	mov	r0, r5
    3d0a:	8023      	strh	r3, [r4, #0]
    3d0c:	8062      	strh	r2, [r4, #2]
    3d0e:	f001 f8a5 	bl	4e5c <__cxa_guard_release>
    3d12:	e6fd      	b.n	3b10 <loop+0x180>
    3d14:	1fff8768 	.word	0x1fff8768
    3d18:	1fff92d8 	.word	0x1fff92d8
    3d1c:	10624dd3 	.word	0x10624dd3
    3d20:	1fff9104 	.word	0x1fff9104

00003d24 <_GLOBAL__sub_I_leds>:
	}


	FastLED.show();

}
    3d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3d28:	4be1      	ldr	r3, [pc, #900]	; (40b0 <_GLOBAL__sub_I_leds+0x38c>)
#ifndef PACIFIC_WAVES_H
#define PACIFIC_WAVES_H


CRGBPalette16 pacifica_palette_1 =
    3d2a:	48e2      	ldr	r0, [pc, #904]	; (40b4 <_GLOBAL__sub_I_leds+0x390>)
    3d2c:	b09f      	sub	sp, #124	; 0x7c
    3d2e:	2400      	movs	r4, #0
    3d30:	701c      	strb	r4, [r3, #0]
    3d32:	705c      	strb	r4, [r3, #1]
    3d34:	709c      	strb	r4, [r3, #2]
    3d36:	f04f 0305 	mov.w	r3, #5
    3d3a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    3d3e:	f04f 0307 	mov.w	r3, #7
    3d42:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    3d46:	f04f 0304 	mov.w	r3, #4
    3d4a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    3d4e:	f04f 0309 	mov.w	r3, #9
    3d52:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    3d56:	f04f 030b 	mov.w	r3, #11
    3d5a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    3d5e:	f04f 030d 	mov.w	r3, #13
    3d62:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    3d66:	f04f 0310 	mov.w	r3, #16
    3d6a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    3d6e:	f04f 0312 	mov.w	r3, #18
    3d72:	f04f 0a03 	mov.w	sl, #3
    3d76:	f04f 0b02 	mov.w	fp, #2
    3d7a:	f04f 0914 	mov.w	r9, #20
    3d7e:	2501      	movs	r5, #1
    3d80:	2717      	movs	r7, #23
    3d82:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    3d86:	ae11      	add	r6, sp, #68	; 0x44
    3d88:	f04f 0319 	mov.w	r3, #25
    3d8c:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    3d90:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    3d94:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    3d98:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    3d9c:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    3da0:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    3da4:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    3da8:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    3dac:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    3db0:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    3db4:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    3db8:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    3dbc:	f88d a041 	strb.w	sl, [sp, #65]	; 0x41
    3dc0:	f88d a045 	strb.w	sl, [sp, #69]	; 0x45
    3dc4:	f88d b049 	strb.w	fp, [sp, #73]	; 0x49
    3dc8:	f88d b04d 	strb.w	fp, [sp, #77]	; 0x4d
    3dcc:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    3dd0:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    3dd4:	f88d 9052 	strb.w	r9, [sp, #82]	; 0x52
    3dd8:	f88d 7056 	strb.w	r7, [sp, #86]	; 0x56
    3ddc:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    3de0:	9600      	str	r6, [sp, #0]
    3de2:	f04f 0626 	mov.w	r6, #38	; 0x26
    3de6:	f88d 6062 	strb.w	r6, [sp, #98]	; 0x62
    3dea:	f04f 0631 	mov.w	r6, #49	; 0x31
    3dee:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    3df2:	f04f 063b 	mov.w	r6, #59	; 0x3b
    3df6:	f88d 606a 	strb.w	r6, [sp, #106]	; 0x6a
    3dfa:	f04f 0646 	mov.w	r6, #70	; 0x46
    3dfe:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    3e02:	f06f 0655 	mvn.w	r6, #85	; 0x55
    3e06:	f88d 6075 	strb.w	r6, [sp, #117]	; 0x75
    3e0a:	f04f 0650 	mov.w	r6, #80	; 0x50
    3e0e:	f88d 6076 	strb.w	r6, [sp, #118]	; 0x76
    3e12:	ae1d      	add	r6, sp, #116	; 0x74
    3e14:	960c      	str	r6, [sp, #48]	; 0x30
    3e16:	ae1c      	add	r6, sp, #112	; 0x70
    3e18:	960b      	str	r6, [sp, #44]	; 0x2c
    3e1a:	ae1b      	add	r6, sp, #108	; 0x6c
    3e1c:	960a      	str	r6, [sp, #40]	; 0x28
    3e1e:	ae1a      	add	r6, sp, #104	; 0x68
    3e20:	9609      	str	r6, [sp, #36]	; 0x24
    3e22:	ae19      	add	r6, sp, #100	; 0x64
    3e24:	9608      	str	r6, [sp, #32]
    3e26:	ae18      	add	r6, sp, #96	; 0x60
    3e28:	9607      	str	r6, [sp, #28]
    3e2a:	ae17      	add	r6, sp, #92	; 0x5c
    3e2c:	9606      	str	r6, [sp, #24]
    3e2e:	ae16      	add	r6, sp, #88	; 0x58
    3e30:	9605      	str	r6, [sp, #20]
    3e32:	ae15      	add	r6, sp, #84	; 0x54
    3e34:	9604      	str	r6, [sp, #16]
    3e36:	f04f 021c 	mov.w	r2, #28
    3e3a:	ae14      	add	r6, sp, #80	; 0x50
    3e3c:	f04f 0855 	mov.w	r8, #85	; 0x55
    3e40:	f04f 0c4b 	mov.w	ip, #75	; 0x4b
    3e44:	ab10      	add	r3, sp, #64	; 0x40
    3e46:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
    3e4a:	a90e      	add	r1, sp, #56	; 0x38
    3e4c:	aa0f      	add	r2, sp, #60	; 0x3c
    3e4e:	f04f 0e28 	mov.w	lr, #40	; 0x28
    3e52:	f88d 8071 	strb.w	r8, [sp, #113]	; 0x71
    3e56:	9603      	str	r6, [sp, #12]
    3e58:	f10d 0848 	add.w	r8, sp, #72	; 0x48
    3e5c:	ae13      	add	r6, sp, #76	; 0x4c
    3e5e:	f88d c072 	strb.w	ip, [sp, #114]	; 0x72
    3e62:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    3e66:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    3e6a:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    3e6e:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    3e72:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    3e76:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    3e7a:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    3e7e:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    3e82:	f88d 9070 	strb.w	r9, [sp, #112]	; 0x70
    3e86:	f88d e074 	strb.w	lr, [sp, #116]	; 0x74
    3e8a:	9602      	str	r6, [sp, #8]
    3e8c:	f8cd 8004 	str.w	r8, [sp, #4]
    3e90:	f7fe fc8e 	bl	27b0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    3e94:	f04f 0307 	mov.w	r3, #7
    3e98:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    3e9c:	f04f 0305 	mov.w	r3, #5
    3ea0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    3ea4:	f04f 0304 	mov.w	r3, #4
    3ea8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    3eac:	f04f 0309 	mov.w	r3, #9
    3eb0:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    3eb4:	f04f 030b 	mov.w	r3, #11
    3eb8:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    3ebc:	f04f 030d 	mov.w	r3, #13
    3ec0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    3ec4:	f04f 0310 	mov.w	r3, #16
    3ec8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    3ecc:	f04f 0312 	mov.w	r3, #18
    3ed0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    3ed4:	f04f 0319 	mov.w	r3, #25
    3ed8:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    3edc:	f04f 0226 	mov.w	r2, #38	; 0x26
    3ee0:	f04f 031c 	mov.w	r3, #28
    3ee4:	f04f 0631 	mov.w	r6, #49	; 0x31
    3ee8:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    3eec:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    3ef0:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    3ef4:	f88d a041 	strb.w	sl, [sp, #65]	; 0x41
    3ef8:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    3efc:	f88d a045 	strb.w	sl, [sp, #69]	; 0x45
    3f00:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    3f04:	f88d b049 	strb.w	fp, [sp, #73]	; 0x49
    3f08:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    3f0c:	f88d b04d 	strb.w	fp, [sp, #77]	; 0x4d
    3f10:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    3f14:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    3f18:	f88d 9052 	strb.w	r9, [sp, #82]	; 0x52
    3f1c:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    3f20:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    3f24:	f88d 7056 	strb.w	r7, [sp, #86]	; 0x56
    3f28:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    3f2c:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    3f30:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    3f34:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    3f38:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    3f3c:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    3f40:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    3f44:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
    3f48:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    3f4c:	f04f 063b 	mov.w	r6, #59	; 0x3b
    3f50:	f88d 606a 	strb.w	r6, [sp, #106]	; 0x6a
    3f54:	f04f 0646 	mov.w	r6, #70	; 0x46
    3f58:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    3f5c:	f04f 0619 	mov.w	r6, #25
    3f60:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x14554B, 0x28AA50 };
CRGBPalette16 pacifica_palette_2 =
    3f64:	ae1d      	add	r6, sp, #116	; 0x74
    3f66:	960c      	str	r6, [sp, #48]	; 0x30
    3f68:	ae1c      	add	r6, sp, #112	; 0x70
    3f6a:	960b      	str	r6, [sp, #44]	; 0x2c
    3f6c:	ae1b      	add	r6, sp, #108	; 0x6c
    3f6e:	960a      	str	r6, [sp, #40]	; 0x28
    3f70:	ae1a      	add	r6, sp, #104	; 0x68
    3f72:	9609      	str	r6, [sp, #36]	; 0x24
    3f74:	ae19      	add	r6, sp, #100	; 0x64
    3f76:	9608      	str	r6, [sp, #32]
    3f78:	ae18      	add	r6, sp, #96	; 0x60
    3f7a:	a914      	add	r1, sp, #80	; 0x50
    3f7c:	9607      	str	r6, [sp, #28]
    3f7e:	ae17      	add	r6, sp, #92	; 0x5c
    3f80:	9103      	str	r1, [sp, #12]
    3f82:	9606      	str	r6, [sp, #24]
    3f84:	a913      	add	r1, sp, #76	; 0x4c
    3f86:	ae16      	add	r6, sp, #88	; 0x58
    3f88:	9102      	str	r1, [sp, #8]
    3f8a:	9605      	str	r6, [sp, #20]
    3f8c:	a911      	add	r1, sp, #68	; 0x44
    3f8e:	ae15      	add	r6, sp, #84	; 0x54
    3f90:	ab10      	add	r3, sp, #64	; 0x40
    3f92:	aa0f      	add	r2, sp, #60	; 0x3c
    3f94:	f8cd 8004 	str.w	r8, [sp, #4]
    3f98:	9100      	str	r1, [sp, #0]
    3f9a:	255f      	movs	r5, #95	; 0x5f
    3f9c:	a90e      	add	r1, sp, #56	; 0x38
    3f9e:	f04f 0ebe 	mov.w	lr, #190	; 0xbe
    3fa2:	9604      	str	r6, [sp, #16]
    3fa4:	2752      	movs	r7, #82	; 0x52
    3fa6:	f04f 060c 	mov.w	r6, #12
    3faa:	4843      	ldr	r0, [pc, #268]	; (40b8 <_GLOBAL__sub_I_leds+0x394>)
    3fac:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    3fb0:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    3fb4:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    3fb8:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    3fbc:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    3fc0:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    3fc4:	f88d 6070 	strb.w	r6, [sp, #112]	; 0x70
    3fc8:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
    3fcc:	f88d 5076 	strb.w	r5, [sp, #118]	; 0x76
    3fd0:	f88d 7072 	strb.w	r7, [sp, #114]	; 0x72
    3fd4:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
    3fd8:	f7fe fbea 	bl	27b0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    3fdc:	200e      	movs	r0, #14
    3fde:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    3fe2:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
    3fe6:	f04f 0305 	mov.w	r3, #5
    3fea:	f04f 0006 	mov.w	r0, #6
    3fee:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    3ff2:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    3ff6:	f04f 0309 	mov.w	r3, #9
    3ffa:	f04f 001a 	mov.w	r0, #26
    3ffe:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    4002:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    4006:	f04f 030b 	mov.w	r3, #11
    400a:	f04f 0027 	mov.w	r0, #39	; 0x27
    400e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    4012:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    4016:	f04f 030c 	mov.w	r3, #12
    401a:	f04f 002d 	mov.w	r0, #45	; 0x2d
    401e:	2520      	movs	r5, #32
    4020:	2640      	movs	r6, #64	; 0x40
    4022:	2708      	movs	r7, #8
    4024:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    4028:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    402c:	f04f 0c33 	mov.w	ip, #51	; 0x33
    4030:	f04f 0e39 	mov.w	lr, #57	; 0x39
    4034:	f04f 0310 	mov.w	r3, #16
    4038:	f04f 0050 	mov.w	r0, #80	; 0x50
    403c:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    4040:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
    4044:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    4048:	f88d a03d 	strb.w	sl, [sp, #61]	; 0x3d
    404c:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    4050:	f88d 9042 	strb.w	r9, [sp, #66]	; 0x42
    4054:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    4058:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    405c:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    4060:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    4064:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    4068:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    406c:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    4070:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    4074:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    4078:	f88d 9061 	strb.w	r9, [sp, #97]	; 0x61
    407c:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
    4080:	f88d 7049 	strb.w	r7, [sp, #73]	; 0x49
    4084:	f88d c056 	strb.w	ip, [sp, #86]	; 0x56
    4088:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    408c:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
    4090:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
    4094:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    4098:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    409c:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    40a0:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    40a4:	f04f 0410 	mov.w	r4, #16
    40a8:	f04f 0a70 	mov.w	sl, #112	; 0x70
    40ac:	e006      	b.n	40bc <_GLOBAL__sub_I_leds+0x398>
    40ae:	bf00      	nop
    40b0:	1fff93f4 	.word	0x1fff93f4
    40b4:	1fff9244 	.word	0x1fff9244
    40b8:	1fff9274 	.word	0x1fff9274
    40bc:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x0C5F52, 0x19BE5F };
CRGBPalette16 pacifica_palette_3 =
    40c0:	ac1d      	add	r4, sp, #116	; 0x74
    40c2:	940c      	str	r4, [sp, #48]	; 0x30
    40c4:	eb0d 040a 	add.w	r4, sp, sl
    40c8:	940b      	str	r4, [sp, #44]	; 0x2c
    40ca:	ac1b      	add	r4, sp, #108	; 0x6c
    40cc:	940a      	str	r4, [sp, #40]	; 0x28
    40ce:	ac1a      	add	r4, sp, #104	; 0x68
    40d0:	2760      	movs	r7, #96	; 0x60
    40d2:	9409      	str	r4, [sp, #36]	; 0x24
    40d4:	ac19      	add	r4, sp, #100	; 0x64
    40d6:	a814      	add	r0, sp, #80	; 0x50
    40d8:	9408      	str	r4, [sp, #32]
    40da:	eb0d 0407 	add.w	r4, sp, r7
    40de:	9003      	str	r0, [sp, #12]
    40e0:	9407      	str	r4, [sp, #28]
    40e2:	a813      	add	r0, sp, #76	; 0x4c
    40e4:	ac17      	add	r4, sp, #92	; 0x5c
    40e6:	9002      	str	r0, [sp, #8]
    40e8:	9406      	str	r4, [sp, #24]
    40ea:	a811      	add	r0, sp, #68	; 0x44
    40ec:	ac16      	add	r4, sp, #88	; 0x58
    40ee:	f04f 0c18 	mov.w	ip, #24
    40f2:	f8cd 8004 	str.w	r8, [sp, #4]
    40f6:	9000      	str	r0, [sp, #0]
    40f8:	f04f 0eff 	mov.w	lr, #255	; 0xff
    40fc:	9405      	str	r4, [sp, #20]
    40fe:	eb0d 0306 	add.w	r3, sp, r6
    4102:	aa0f      	add	r2, sp, #60	; 0x3c
    4104:	a90e      	add	r1, sp, #56	; 0x38
    4106:	f04f 0980 	mov.w	r9, #128	; 0x80
    410a:	f04f 08bf 	mov.w	r8, #191	; 0xbf
    410e:	f04f 0b1c 	mov.w	fp, #28
    4112:	ac15      	add	r4, sp, #84	; 0x54
    4114:	480e      	ldr	r0, [pc, #56]	; (4150 <_GLOBAL__sub_I_leds+0x42c>)
    4116:	f88d b069 	strb.w	fp, [sp, #105]	; 0x69
    411a:	f88d 506d 	strb.w	r5, [sp, #109]	; 0x6d
    411e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
    4122:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
    4126:	9404      	str	r4, [sp, #16]
    4128:	f88d c065 	strb.w	ip, [sp, #101]	; 0x65
    412c:	f88d 7066 	strb.w	r7, [sp, #102]	; 0x66
    4130:	f88d 7075 	strb.w	r7, [sp, #117]	; 0x75
    4134:	f88d a06a 	strb.w	sl, [sp, #106]	; 0x6a
    4138:	f88d 906e 	strb.w	r9, [sp, #110]	; 0x6e
    413c:	f88d 8072 	strb.w	r8, [sp, #114]	; 0x72
    4140:	f88d e076 	strb.w	lr, [sp, #118]	; 0x76
    4144:	f7fe fb34 	bl	27b0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    4148:	b01f      	add	sp, #124	; 0x7c
    414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    414e:	bf00      	nop
    4150:	1fff92a4 	.word	0x1fff92a4

00004154 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    4154:	2900      	cmp	r1, #0
    4156:	dd0b      	ble.n	4170 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    4158:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    415c:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    415e:	7813      	ldrb	r3, [r2, #0]
    4160:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    4162:	7853      	ldrb	r3, [r2, #1]
    4164:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    4166:	7893      	ldrb	r3, [r2, #2]
    4168:	7083      	strb	r3, [r0, #2]
    416a:	3003      	adds	r0, #3
    416c:	4288      	cmp	r0, r1
    416e:	d1f6      	bne.n	415e <fill_solid(CRGB*, int, CRGB const&)+0xa>
    4170:	4770      	bx	lr
    4172:	bf00      	nop

00004174 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    4174:	b570      	push	{r4, r5, r6, lr}
    4176:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    4178:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    417a:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    417c:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    417e:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    4182:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    4186:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    418a:	dd10      	ble.n	41ae <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    418c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4190:	461e      	mov	r6, r3
    4192:	4604      	mov	r4, r0
    4194:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4196:	4621      	mov	r1, r4
    4198:	a801      	add	r0, sp, #4
    419a:	f000 fa39 	bl	4610 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    419e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    41a2:	3403      	adds	r4, #3
    41a4:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    41a6:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    41a8:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    41ac:	d1f3      	bne.n	4196 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    41ae:	b002      	add	sp, #8
    41b0:	bd70      	pop	{r4, r5, r6, pc}
    41b2:	bf00      	nop

000041b4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    41b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    41b8:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    41ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    41bc:	d352      	bcc.n	4264 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    41be:	f896 e000 	ldrb.w	lr, [r6]
    41c2:	7815      	ldrb	r5, [r2, #0]
    41c4:	7877      	ldrb	r7, [r6, #1]
    41c6:	f896 8002 	ldrb.w	r8, [r6, #2]
    41ca:	7854      	ldrb	r4, [r2, #1]
    41cc:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    41d0:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    41d4:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    41d8:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    41dc:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    41e0:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    41e4:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    41e8:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    41ec:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    41ee:	b3b2      	cbz	r2, 425e <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    41f0:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    41f4:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    41f8:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    41fc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    4200:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    4204:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4208:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    420a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    420e:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    4212:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    4216:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    421a:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    421e:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    4222:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    4226:	d818      	bhi.n	425a <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    4228:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    422c:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    422e:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4230:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4232:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    4236:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    423a:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    423e:	4475      	add	r5, lr
        g88 += gdelta87;
    4240:	4454      	add	r4, sl
        b88 += bdelta87;
    4242:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4244:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4246:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    424a:	b2ad      	uxth	r5, r5
        g = rhs.g;
    424c:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    4250:	b2a4      	uxth	r4, r4
        b = rhs.b;
    4252:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    4256:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4258:	d2e6      	bcs.n	4228 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    425e:	f04f 0b01 	mov.w	fp, #1
    4262:	e7c7      	b.n	41f4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    4264:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4266:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4268:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    426c:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    426e:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    4270:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    4274:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4278:	7015      	strb	r5, [r2, #0]
    427a:	4619      	mov	r1, r3
    427c:	f886 e000 	strb.w	lr, [r6]
    4280:	464b      	mov	r3, r9
        g = rhs.g;
    4282:	7054      	strb	r4, [r2, #1]
    4284:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    4286:	f882 c002 	strb.w	ip, [r2, #2]
    428a:	f886 8002 	strb.w	r8, [r6, #2]
    428e:	e79f      	b.n	41d0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00004290 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    4290:	b309      	cbz	r1, 42d6 <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    4292:	b430      	push	{r4, r5}
    4294:	1e4d      	subs	r5, r1, #1
    4296:	b2ad      	uxth	r5, r5
    4298:	43d2      	mvns	r2, r2
    429a:	3501      	adds	r5, #1
    429c:	b2d2      	uxtb	r2, r2
    429e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    42a2:	4405      	add	r5, r0
    42a4:	3201      	adds	r2, #1
    42a6:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    42a8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    42ac:	fb02 f303 	mul.w	r3, r2, r3
    42b0:	121b      	asrs	r3, r3, #8
    42b2:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    42b6:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    42b8:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    42ba:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    42be:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    42c2:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    42c4:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    42c6:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    42c8:	7083      	strb	r3, [r0, #2]
    42ca:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    42cc:	4285      	cmp	r5, r0
    42ce:	f104 0403 	add.w	r4, r4, #3
    42d2:	d1e9      	bne.n	42a8 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    42d4:	bc30      	pop	{r4, r5}
    42d6:	4770      	bx	lr

000042d8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    42d8:	f7ff bfda 	b.w	4290 <fade_raw(CRGB*, unsigned short, unsigned char)>

000042dc <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    42dc:	b322      	cbz	r2, 4328 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    42de:	2aff      	cmp	r2, #255	; 0xff
    42e0:	d023      	beq.n	432a <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    42e2:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    42e4:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    42e6:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    42e8:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    42ea:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    42ec:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    42ee:	43d2      	mvns	r2, r2
    42f0:	fb06 7605 	mla	r6, r6, r5, r7
    42f4:	b2d2      	uxtb	r2, r2
    42f6:	fb04 6402 	mla	r4, r4, r2, r6
    42fa:	f3c4 2407 	ubfx	r4, r4, #8, #8
    42fe:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    4300:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    4302:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    4304:	191f      	adds	r7, r3, r4
    4306:	fb04 7405 	mla	r4, r4, r5, r7
    430a:	fb03 4302 	mla	r3, r3, r2, r4
    430e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4312:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    4314:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    4316:	18f1      	adds	r1, r6, r3
    4318:	fb03 1505 	mla	r5, r3, r5, r1
    431c:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    4320:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    4322:	f3c2 2207 	ubfx	r2, r2, #8, #8
    4326:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    4328:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    432a:	780b      	ldrb	r3, [r1, #0]
    432c:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    432e:	784b      	ldrb	r3, [r1, #1]
    4330:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    4332:	788b      	ldrb	r3, [r1, #2]
    4334:	7083      	strb	r3, [r0, #2]
    4336:	4770      	bx	lr

00004338 <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    4338:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    433c:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    4340:	3100      	adds	r1, #0
    4342:	bf18      	it	ne
    4344:	2101      	movne	r1, #1
    4346:	eb01 2123 	add.w	r1, r1, r3, asr #8
    434a:	b2c9      	uxtb	r1, r1
    434c:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    434e:	060a      	lsls	r2, r1, #24
    4350:	b2db      	uxtb	r3, r3
    4352:	d40e      	bmi.n	4372 <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    4354:	f001 0140 	and.w	r1, r1, #64	; 0x40
    4358:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    435c:	b919      	cbnz	r1, 4366 <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    435e:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    4360:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    4362:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    4364:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    4366:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    4368:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    436a:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    436c:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    436e:	7082      	strb	r2, [r0, #2]
    4370:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    4372:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    4374:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    4376:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    4378:	7042      	strb	r2, [r0, #1]
    437a:	4770      	bx	lr

0000437c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    437c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    4380:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    4382:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    4386:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    438a:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    438c:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    4390:	d000      	beq.n	4394 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    4392:	b9e6      	cbnz	r6, 43ce <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    4394:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    4396:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    4398:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    439a:	2bff      	cmp	r3, #255	; 0xff
    439c:	d012      	beq.n	43c4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    439e:	2b00      	cmp	r3, #0
    43a0:	d043      	beq.n	442a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    43a2:	3301      	adds	r3, #1
    43a4:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    43a6:	b11c      	cbz	r4, 43b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    43a8:	fb03 4404 	mla	r4, r3, r4, r4
    43ac:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    43b0:	b119      	cbz	r1, 43ba <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    43b2:	fb03 1101 	mla	r1, r3, r1, r1
    43b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    43ba:	b11a      	cbz	r2, 43c4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    43bc:	fb03 2202 	mla	r2, r3, r2, r2
    43c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    43c4:	7004      	strb	r4, [r0, #0]
    43c6:	7041      	strb	r1, [r0, #1]
    43c8:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    43ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    43ce:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    43d0:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    43d2:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    43d6:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    43d8:	d000      	beq.n	43dc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    43da:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    43dc:	0112      	lsls	r2, r2, #4
    43de:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    43e2:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    43e4:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    43e8:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    43ec:	f891 8002 	ldrb.w	r8, [r1, #2]
    43f0:	fb04 f606 	mul.w	r6, r4, r6
    43f4:	1c51      	adds	r1, r2, #1
    43f6:	fb04 f509 	mul.w	r5, r4, r9
    43fa:	fb04 f407 	mul.w	r4, r4, r7
    43fe:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4402:	f3c6 2707 	ubfx	r7, r6, #8, #8
    4406:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    440a:	fb01 f60c 	mul.w	r6, r1, ip
    440e:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4412:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4416:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    441a:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    441e:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    4422:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4424:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4426:	b2d2      	uxtb	r2, r2
    4428:	e7b7      	b.n	439a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    442a:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    442c:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    442e:	461c      	mov	r4, r3
    4430:	7004      	strb	r4, [r0, #0]
    4432:	7041      	strb	r1, [r0, #1]
    4434:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    4436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    443a:	bf00      	nop

0000443c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    443c:	b5f0      	push	{r4, r5, r6, r7, lr}
    443e:	3901      	subs	r1, #1
    4440:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    4442:	2500      	movs	r5, #0
    4444:	302f      	adds	r0, #47	; 0x2f
    4446:	e001      	b.n	444c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    4448:	4284      	cmp	r4, r0
    444a:	d01e      	beq.n	448a <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    444c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4450:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    4454:	42b3      	cmp	r3, r6
    4456:	d0f7      	beq.n	4448 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    4458:	f103 0701 	add.w	r7, r3, #1
    445c:	d204      	bcs.n	4468 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    445e:	b2fb      	uxtb	r3, r7
    4460:	7023      	strb	r3, [r4, #0]
    4462:	3501      	adds	r5, #1
    4464:	780e      	ldrb	r6, [r1, #0]
    4466:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    4468:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    446a:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    446c:	b2ff      	uxtb	r7, r7
    446e:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    4472:	d208      	bcs.n	4486 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    4474:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    4476:	780e      	ldrb	r6, [r1, #0]
    4478:	42be      	cmp	r6, r7
    447a:	bf38      	it	cc
    447c:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    447e:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    4482:	bf38      	it	cc
    4484:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    4486:	4295      	cmp	r5, r2
    4488:	d3de      	bcc.n	4448 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    448a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000448c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    448e:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    4490:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    4492:	4604      	mov	r4, r0
    4494:	bfcc      	ite	gt
    4496:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    449a:	2500      	movle	r5, #0
    449c:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    449e:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    44a0:	bfd8      	it	le
    44a2:	4616      	movle	r6, r2

	pLed->init();
    44a4:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    44a6:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    44a8:	6823      	ldr	r3, [r4, #0]
    44aa:	6062      	str	r2, [r4, #4]
    44ac:	695b      	ldr	r3, [r3, #20]
    44ae:	4a0a      	ldr	r2, [pc, #40]	; (44d8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    44b0:	6166      	str	r6, [r4, #20]
    44b2:	4293      	cmp	r3, r2
    44b4:	d101      	bne.n	44ba <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    44b6:	4620      	mov	r0, r4
    44b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    44ba:	4620      	mov	r0, r4
    44bc:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    44be:	2800      	cmp	r0, #0
    44c0:	d0f9      	beq.n	44b6 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    44c2:	4a06      	ldr	r2, [pc, #24]	; (44dc <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    44c4:	4b06      	ldr	r3, [pc, #24]	; (44e0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    44c6:	6851      	ldr	r1, [r2, #4]
    44c8:	fb93 f0f0 	sdiv	r0, r3, r0
    44cc:	4288      	cmp	r0, r1
    44ce:	bf38      	it	cc
    44d0:	4608      	movcc	r0, r1
    44d2:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    44d4:	4620      	mov	r0, r4
    44d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44d8:	00000471 	.word	0x00000471
    44dc:	1fff95f0 	.word	0x1fff95f0
    44e0:	000f4240 	.word	0x000f4240

000044e4 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    44e4:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    44e6:	4c0f      	ldr	r4, [pc, #60]	; (4524 <CFastLED::countFPS(int)+0x40>)
    44e8:	6822      	ldr	r2, [r4, #0]
    44ea:	1c53      	adds	r3, r2, #1
    44ec:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    44ee:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    44f0:	6023      	str	r3, [r4, #0]
    44f2:	db13      	blt.n	451c <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44f4:	4d0c      	ldr	r5, [pc, #48]	; (4528 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    44f6:	4a0d      	ldr	r2, [pc, #52]	; (452c <CFastLED::countFPS(int)+0x48>)
    44f8:	6829      	ldr	r1, [r5, #0]
    44fa:	9101      	str	r1, [sp, #4]
	return ret;
    44fc:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44fe:	682d      	ldr	r5, [r5, #0]
    4500:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    4502:	6816      	ldr	r6, [r2, #0]
	return ret;
    4504:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    4506:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    4508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    450c:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    450e:	1b89      	subs	r1, r1, r6
    4510:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    4514:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    4516:	fbb3 f3f1 	udiv	r3, r3, r1
    451a:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    451c:	b003      	add	sp, #12
    451e:	bc70      	pop	{r4, r5, r6}
    4520:	4770      	bx	lr
    4522:	bf00      	nop
    4524:	1fff9604 	.word	0x1fff9604
    4528:	1fff9668 	.word	0x1fff9668
    452c:	1fff960c 	.word	0x1fff960c

00004530 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    4530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4534:	6843      	ldr	r3, [r0, #4]
    4536:	4c2d      	ldr	r4, [pc, #180]	; (45ec <CFastLED::show(unsigned char)+0xbc>)
    4538:	b083      	sub	sp, #12
    453a:	4606      	mov	r6, r0
    453c:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    453e:	2b00      	cmp	r3, #0
    4540:	d14b      	bne.n	45da <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    4542:	f000 fce3 	bl	4f0c <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    4546:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    4548:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    454a:	b11b      	cbz	r3, 4554 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    454c:	4648      	mov	r0, r9
    454e:	68b1      	ldr	r1, [r6, #8]
    4550:	4798      	blx	r3
    4552:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    4554:	4b26      	ldr	r3, [pc, #152]	; (45f0 <CFastLED::show(unsigned char)+0xc0>)
    4556:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    4558:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    455a:	2c00      	cmp	r4, #0
    455c:	d036      	beq.n	45cc <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    455e:	8873      	ldrh	r3, [r6, #2]
    4560:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    4562:	6861      	ldr	r1, [r4, #4]
    4564:	6962      	ldr	r2, [r4, #20]
    4566:	2b63      	cmp	r3, #99	; 0x63
    4568:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    456a:	bf98      	it	ls
    456c:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    456e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    4572:	f88d 5004 	strb.w	r5, [sp, #4]
    4576:	f88d 5005 	strb.w	r5, [sp, #5]
    457a:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    457e:	f1b9 0f00 	cmp.w	r9, #0
    4582:	d01c      	beq.n	45be <CFastLED::show(unsigned char)+0x8e>
    4584:	f104 030b 	add.w	r3, r4, #11
    4588:	f10d 0e04 	add.w	lr, sp, #4
    458c:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    4590:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    4594:	f1bb 0f00 	cmp.w	fp, #0
    4598:	d00d      	beq.n	45b6 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    459a:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    459e:	f10a 0001 	add.w	r0, sl, #1
    45a2:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    45a6:	f1ba 0f00 	cmp.w	sl, #0
    45aa:	d004      	beq.n	45b6 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    45ac:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    45b0:	0c00      	lsrs	r0, r0, #16
    45b2:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    45b6:	4563      	cmp	r3, ip
    45b8:	f10e 0e01 	add.w	lr, lr, #1
    45bc:	d1e8      	bne.n	4590 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    45be:	4620      	mov	r0, r4
    45c0:	ab01      	add	r3, sp, #4
    45c2:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    45c4:	74a7      	strb	r7, [r4, #18]
    45c6:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    45c8:	2c00      	cmp	r4, #0
    45ca:	d1c8      	bne.n	455e <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    45cc:	4630      	mov	r0, r6
    45ce:	2119      	movs	r1, #25
    45d0:	f7ff ff88 	bl	44e4 <CFastLED::countFPS(int)>
}
    45d4:	b003      	add	sp, #12
    45d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    45da:	f000 fc97 	bl	4f0c <micros>
    45de:	6822      	ldr	r2, [r4, #0]
    45e0:	6873      	ldr	r3, [r6, #4]
    45e2:	1a80      	subs	r0, r0, r2
    45e4:	4298      	cmp	r0, r3
    45e6:	d3aa      	bcc.n	453e <CFastLED::show(unsigned char)+0xe>
    45e8:	e7ab      	b.n	4542 <CFastLED::show(unsigned char)+0x12>
    45ea:	bf00      	nop
    45ec:	1fff9608 	.word	0x1fff9608
    45f0:	1fff9600 	.word	0x1fff9600

000045f4 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    45f4:	2000      	movs	r0, #0
    45f6:	4770      	bx	lr

000045f8 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    45f8:	4b04      	ldr	r3, [pc, #16]	; (460c <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    45fa:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    45fc:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    45fe:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    4602:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    4604:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    4606:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    4608:	60da      	str	r2, [r3, #12]
    460a:	4770      	bx	lr
    460c:	1fff95f0 	.word	0x1fff95f0

00004610 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    4610:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    4612:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    4614:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    4616:	7882      	ldrb	r2, [r0, #2]
    4618:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    461a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    461e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4622:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    4626:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    4628:	0625      	lsls	r5, r4, #24
    462a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    462e:	d45f      	bmi.n	46f0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    4630:	f004 0540 	and.w	r5, r4, #64	; 0x40
    4634:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    4638:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    463c:	2d00      	cmp	r5, #0
    463e:	d146      	bne.n	46ce <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    4640:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    4644:	2c00      	cmp	r4, #0
    4646:	d06c      	beq.n	4722 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    4648:	3355      	adds	r3, #85	; 0x55
    464a:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    464c:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    464e:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    4650:	2eff      	cmp	r6, #255	; 0xff
    4652:	d01c      	beq.n	468e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    4654:	2e00      	cmp	r6, #0
    4656:	d079      	beq.n	474c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    4658:	b11c      	cbz	r4, 4662 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    465a:	fb06 4404 	mla	r4, r6, r4, r4
    465e:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    4662:	b11d      	cbz	r5, 466c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    4664:	fb06 5505 	mla	r5, r6, r5, r5
    4668:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    466c:	b11b      	cbz	r3, 4676 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    466e:	fb06 3303 	mla	r3, r6, r3, r3
    4672:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    4676:	43f0      	mvns	r0, r6
    4678:	b2c0      	uxtb	r0, r0
    467a:	fb00 0000 	mla	r0, r0, r0, r0
    467e:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    4682:	4404      	add	r4, r0
            g += brightness_floor;
    4684:	4405      	add	r5, r0
            b += brightness_floor;
    4686:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    4688:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    468a:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    468c:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    468e:	2aff      	cmp	r2, #255	; 0xff
    4690:	d018      	beq.n	46c4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    4692:	fb12 f002 	smulbb	r0, r2, r2
    4696:	3200      	adds	r2, #0
    4698:	bf18      	it	ne
    469a:	2201      	movne	r2, #1
    469c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    46a0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    46a4:	d056      	beq.n	4754 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    46a6:	b11c      	cbz	r4, 46b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    46a8:	fb02 4404 	mla	r4, r2, r4, r4
    46ac:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    46b0:	b11d      	cbz	r5, 46ba <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    46b2:	fb02 5505 	mla	r5, r2, r5, r5
    46b6:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    46ba:	b11b      	cbz	r3, 46c4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    46bc:	fb02 3303 	mla	r3, r2, r3, r3
    46c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    46c4:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    46c6:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    46c8:	708b      	strb	r3, [r1, #2]
}
    46ca:	bcf0      	pop	{r4, r5, r6, r7}
    46cc:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    46ce:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    46d2:	bb5c      	cbnz	r4, 472c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    46d4:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    46d8:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    46dc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    46e0:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    46e2:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    46e4:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    46e8:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    46ea:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    46ec:	463b      	mov	r3, r7
    46ee:	e7af      	b.n	4650 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    46f0:	f004 0740 	and.w	r7, r4, #64	; 0x40
    46f4:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    46f8:	b9e7      	cbnz	r7, 4734 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    46fa:	f004 0720 	and.w	r7, r4, #32
    46fe:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    4702:	2f00      	cmp	r7, #0
    4704:	d136      	bne.n	4774 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    4706:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    470a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    470e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    4712:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    4716:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    471a:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    471c:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    471e:	b2c3      	uxtb	r3, r0
    4720:	e796      	b.n	4650 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    4722:	43dc      	mvns	r4, r3
    4724:	b2e4      	uxtb	r4, r4
                g = third;
    4726:	461d      	mov	r5, r3
                b = 0;
    4728:	4603      	mov	r3, r0
    472a:	e791      	b.n	4650 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    472c:	2400      	movs	r4, #0
                g = K255 - third;
    472e:	43dd      	mvns	r5, r3
    4730:	b2ed      	uxtb	r5, r5
    4732:	e78d      	b.n	4650 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    4734:	f004 0420 	and.w	r4, r4, #32
    4738:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    473c:	b994      	cbnz	r4, 4764 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    473e:	f103 0455 	add.w	r4, r3, #85	; 0x55
    4742:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    4744:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    4748:	b2db      	uxtb	r3, r3
    474a:	e781      	b.n	4650 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    474c:	23ff      	movs	r3, #255	; 0xff
    474e:	461d      	mov	r5, r3
    4750:	461c      	mov	r4, r3
    4752:	e79c      	b.n	468e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    4754:	4615      	mov	r5, r2
    4756:	4614      	mov	r4, r2
    4758:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    475a:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    475c:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    475e:	708b      	strb	r3, [r1, #2]
}
    4760:	bcf0      	pop	{r4, r5, r6, r7}
    4762:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    4764:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    4768:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    476a:	2500      	movs	r5, #0
                b = K85 - third;
    476c:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    4770:	b2db      	uxtb	r3, r3
    4772:	e76d      	b.n	4650 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    4774:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    4776:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    4778:	b2c3      	uxtb	r3, r0
    477a:	e769      	b.n	4650 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

0000477c <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    477c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    477e:	b361      	cbz	r1, 47da <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    4780:	f101 3eff 	add.w	lr, r1, #4294967295
    4784:	fa1f fe8e 	uxth.w	lr, lr
    4788:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    478c:	2200      	movs	r2, #0
    478e:	f10e 0e06 	add.w	lr, lr, #6
    4792:	4486      	add	lr, r0
    4794:	1cc3      	adds	r3, r0, #3
    4796:	4615      	mov	r5, r2
    4798:	4614      	mov	r4, r2
        red32   += *p++;
    479a:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    479e:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    47a2:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    47a6:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    47a8:	4573      	cmp	r3, lr
        red32   += *p++;
    47aa:	443c      	add	r4, r7
        green32 += *p++;
    47ac:	4405      	add	r5, r0
        blue32  += *p++;
    47ae:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    47b0:	d1f3      	bne.n	479a <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    47b2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    47b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    47ba:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    47be:	f3c4 1317 	ubfx	r3, r4, #4, #24
    47c2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    47c6:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    47ca:	0a12      	lsrs	r2, r2, #8
    47cc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    47d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    47d4:	1910      	adds	r0, r2, r4
}
    47d6:	4408      	add	r0, r1
    47d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    47da:	460c      	mov	r4, r1
    47dc:	460a      	mov	r2, r1
    47de:	e7f7      	b.n	47d0 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

000047e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    47e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    47e4:	4b25      	ldr	r3, [pc, #148]	; (487c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    47e6:	681c      	ldr	r4, [r3, #0]
    47e8:	b085      	sub	sp, #20
    47ea:	4607      	mov	r7, r0
    47ec:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    47ee:	b19c      	cbz	r4, 4818 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    47f0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4888 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    47f4:	257d      	movs	r5, #125	; 0x7d
    47f6:	e007      	b.n	4808 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    47f8:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    47fa:	b281      	uxth	r1, r0
    47fc:	4630      	mov	r0, r6
    47fe:	f7ff ffbd 	bl	477c <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    4802:	68a4      	ldr	r4, [r4, #8]
    4804:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    4806:	b144      	cbz	r4, 481a <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    4808:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    480c:	691b      	ldr	r3, [r3, #16]
    480e:	454b      	cmp	r3, r9
    4810:	d0f2      	beq.n	47f8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    4812:	4620      	mov	r0, r4
    4814:	4798      	blx	r3
    4816:	e7f0      	b.n	47fa <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    4818:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    481a:	fb05 f507 	mul.w	r5, r5, r7
    481e:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    4820:	4b17      	ldr	r3, [pc, #92]	; (4880 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    4822:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    4824:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    4826:	d210      	bcs.n	484a <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    4828:	b323      	cbz	r3, 4874 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    482a:	4a16      	ldr	r2, [pc, #88]	; (4884 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    482c:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    482e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    4832:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    4836:	f89d 100c 	ldrb.w	r1, [sp, #12]
    483a:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    483c:	4638      	mov	r0, r7
    483e:	ea23 0301 	bic.w	r3, r3, r1
    4842:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    4844:	b005      	add	sp, #20
    4846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    484a:	fb08 f707 	mul.w	r7, r8, r7
    484e:	fbb7 f0f5 	udiv	r0, r7, r5
    4852:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    4854:	b173      	cbz	r3, 4874 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    4856:	4a0b      	ldr	r2, [pc, #44]	; (4884 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    4858:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    485a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    485e:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    4862:	f89d 100c 	ldrb.w	r1, [sp, #12]
    4866:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    4868:	4638      	mov	r0, r7
    486a:	430b      	orrs	r3, r1
    486c:	7013      	strb	r3, [r2, #0]
}
    486e:	b005      	add	sp, #20
    4870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    4874:	4638      	mov	r0, r7
}
    4876:	b005      	add	sp, #20
    4878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    487c:	1fff9600 	.word	0x1fff9600
    4880:	1fff9614 	.word	0x1fff9614
    4884:	00008c68 	.word	0x00008c68
    4888:	0000046d 	.word	0x0000046d

0000488c <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    488c:	4b03      	ldr	r3, [pc, #12]	; (489c <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    488e:	4a04      	ldr	r2, [pc, #16]	; (48a0 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    4890:	60da      	str	r2, [r3, #12]
    4892:	fb01 f100 	mul.w	r1, r1, r0
    4896:	6099      	str	r1, [r3, #8]
    4898:	4770      	bx	lr
    489a:	bf00      	nop
    489c:	1fff95f0 	.word	0x1fff95f0
    48a0:	000047e1 	.word	0x000047e1

000048a4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48a4:	4807      	ldr	r0, [pc, #28]	; (48c4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    48a6:	b082      	sub	sp, #8
    48a8:	6803      	ldr	r3, [r0, #0]
    48aa:	9301      	str	r3, [sp, #4]
	return ret;
    48ac:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    48ae:	4411      	add	r1, r2
    48b0:	e001      	b.n	48b6 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    48b2:	4299      	cmp	r1, r3
    48b4:	d304      	bcc.n	48c0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48b6:	6803      	ldr	r3, [r0, #0]
    48b8:	9300      	str	r3, [sp, #0]
	return ret;
    48ba:	9b00      	ldr	r3, [sp, #0]
    48bc:	429a      	cmp	r2, r3
    48be:	d9f8      	bls.n	48b2 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    48c0:	b002      	add	sp, #8
    48c2:	4770      	bx	lr
    48c4:	1fff9668 	.word	0x1fff9668

000048c8 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    48c8:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48ca:	4a10      	ldr	r2, [pc, #64]	; (490c <VisualMicroDebug::outPacketStart(bool)+0x44>)
    48cc:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    48ce:	b9a1      	cbnz	r1, 48fa <VisualMicroDebug::outPacketStart(bool)+0x32>
    48d0:	6813      	ldr	r3, [r2, #0]
    48d2:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    48d4:	6841      	ldr	r1, [r0, #4]
	return ret;
    48d6:	9b00      	ldr	r3, [sp, #0]
    48d8:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    48da:	2931      	cmp	r1, #49	; 0x31
    48dc:	d80d      	bhi.n	48fa <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48de:	6813      	ldr	r3, [r2, #0]
    48e0:	9302      	str	r3, [sp, #8]
	return ret;
    48e2:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    48e4:	f104 0332 	add.w	r3, r4, #50	; 0x32
    48e8:	1a59      	subs	r1, r3, r1
    48ea:	e001      	b.n	48f0 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    48ec:	4299      	cmp	r1, r3
    48ee:	d304      	bcc.n	48fa <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48f0:	6813      	ldr	r3, [r2, #0]
    48f2:	9301      	str	r3, [sp, #4]
	return ret;
    48f4:	9b01      	ldr	r3, [sp, #4]
    48f6:	429c      	cmp	r4, r3
    48f8:	d9f8      	bls.n	48ec <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48fa:	6813      	ldr	r3, [r2, #0]
    48fc:	9303      	str	r3, [sp, #12]
	return ret;
    48fe:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    4900:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    4902:	2001      	movs	r0, #1
    4904:	b005      	add	sp, #20
    4906:	bc10      	pop	{r4}
    4908:	4770      	bx	lr
    490a:	bf00      	nop
    490c:	1fff9668 	.word	0x1fff9668

00004910 <VisualMicroDebug::outPacketEnd()>:
    4910:	4770      	bx	lr
    4912:	bf00      	nop

00004914 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    4914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4918:	f000 bb1a 	b.w	4f50 <delay>

0000491c <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    491c:	2300      	movs	r3, #0
    491e:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    4920:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    4922:	b171      	cbz	r1, 4942 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4924:	4807      	ldr	r0, [pc, #28]	; (4944 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    4926:	b082      	sub	sp, #8
    4928:	6803      	ldr	r3, [r0, #0]
    492a:	9301      	str	r3, [sp, #4]
	return ret;
    492c:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    492e:	4411      	add	r1, r2
    4930:	e001      	b.n	4936 <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4932:	4299      	cmp	r1, r3
    4934:	d304      	bcc.n	4940 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4936:	6803      	ldr	r3, [r0, #0]
    4938:	9300      	str	r3, [sp, #0]
	return ret;
    493a:	9b00      	ldr	r3, [sp, #0]
    493c:	429a      	cmp	r2, r3
    493e:	d9f8      	bls.n	4932 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    4940:	b002      	add	sp, #8
    4942:	4770      	bx	lr
    4944:	1fff9668 	.word	0x1fff9668

00004948 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    4948:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    494a:	4c13      	ldr	r4, [pc, #76]	; (4998 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    494c:	b085      	sub	sp, #20
    494e:	6823      	ldr	r3, [r4, #0]
    4950:	9303      	str	r3, [sp, #12]
	return ret;
    4952:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    4954:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    4956:	460d      	mov	r5, r1
    4958:	4810      	ldr	r0, [pc, #64]	; (499c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    495a:	2106      	movs	r1, #6
    495c:	f001 fb10 	bl	5f80 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4960:	2300      	movs	r3, #0
    4962:	220a      	movs	r2, #10
    4964:	4629      	mov	r1, r5
    4966:	480e      	ldr	r0, [pc, #56]	; (49a0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    4968:	f001 fd1e 	bl	63a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    496c:	2106      	movs	r1, #6
    496e:	480d      	ldr	r0, [pc, #52]	; (49a4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    4970:	f001 fb06 	bl	5f80 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    4974:	480a      	ldr	r0, [pc, #40]	; (49a0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    4976:	f001 fd07 	bl	6388 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    497a:	6823      	ldr	r3, [r4, #0]
    497c:	9302      	str	r3, [sp, #8]
	return ret;
    497e:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4980:	f102 0132 	add.w	r1, r2, #50	; 0x32
    4984:	e001      	b.n	498a <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4986:	4299      	cmp	r1, r3
    4988:	d304      	bcc.n	4994 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    498a:	6823      	ldr	r3, [r4, #0]
    498c:	9301      	str	r3, [sp, #4]
	return ret;
    498e:	9b01      	ldr	r3, [sp, #4]
    4990:	429a      	cmp	r2, r3
    4992:	d9f8      	bls.n	4986 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    4994:	b005      	add	sp, #20
    4996:	bd30      	pop	{r4, r5, pc}
    4998:	1fff9668 	.word	0x1fff9668
    499c:	00008be4 	.word	0x00008be4
    49a0:	1fff878c 	.word	0x1fff878c
    49a4:	00008bec 	.word	0x00008bec

000049a8 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    49a8:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    49aa:	7e03      	ldrb	r3, [r0, #24]
    49ac:	b90b      	cbnz	r3, 49b2 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    49ae:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    49b0:	bd38      	pop	{r3, r4, r5, pc}
    49b2:	460d      	mov	r5, r1
    49b4:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    49b6:	f001 fab9 	bl	5f2c <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    49ba:	f010 0fff 	tst.w	r0, #255	; 0xff
    49be:	d101      	bne.n	49c4 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    49c0:	2065      	movs	r0, #101	; 0x65
    49c2:	bd38      	pop	{r3, r4, r5, pc}
    49c4:	f001 fab2 	bl	5f2c <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    49c8:	f010 0fff 	tst.w	r0, #255	; 0xff
    49cc:	d0f8      	beq.n	49c0 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    49ce:	f001 fa71 	bl	5eb4 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    49d2:	b2c0      	uxtb	r0, r0
    49d4:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    49d8:	2b1e      	cmp	r3, #30
    49da:	d8f3      	bhi.n	49c4 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    49dc:	a201      	add	r2, pc, #4	; (adr r2, 49e4 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    49de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    49e2:	bf00      	nop
    49e4:	00004a6d 	.word	0x00004a6d
    49e8:	000049c5 	.word	0x000049c5
    49ec:	000049c5 	.word	0x000049c5
    49f0:	000049c5 	.word	0x000049c5
    49f4:	000049c5 	.word	0x000049c5
    49f8:	000049c5 	.word	0x000049c5
    49fc:	000049c5 	.word	0x000049c5
    4a00:	000049c5 	.word	0x000049c5
    4a04:	000049c5 	.word	0x000049c5
    4a08:	000049c5 	.word	0x000049c5
    4a0c:	000049c5 	.word	0x000049c5
    4a10:	00004a61 	.word	0x00004a61
    4a14:	000049c5 	.word	0x000049c5
    4a18:	000049c5 	.word	0x000049c5
    4a1c:	000049c5 	.word	0x000049c5
    4a20:	000049c5 	.word	0x000049c5
    4a24:	000049af 	.word	0x000049af
    4a28:	000049c5 	.word	0x000049c5
    4a2c:	000049c5 	.word	0x000049c5
    4a30:	000049c5 	.word	0x000049c5
    4a34:	000049c5 	.word	0x000049c5
    4a38:	000049c5 	.word	0x000049c5
    4a3c:	000049c5 	.word	0x000049c5
    4a40:	000049c5 	.word	0x000049c5
    4a44:	000049c5 	.word	0x000049c5
    4a48:	000049af 	.word	0x000049af
    4a4c:	000049c5 	.word	0x000049c5
    4a50:	000049c5 	.word	0x000049c5
    4a54:	000049c5 	.word	0x000049c5
    4a58:	000049c5 	.word	0x000049c5
    4a5c:	000049b1 	.word	0x000049b1
		{

		case 'c':
			sendContinuedACK(breakPointId);
    4a60:	4620      	mov	r0, r4
    4a62:	4629      	mov	r1, r5
    4a64:	f7ff ff70 	bl	4948 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    4a68:	2063      	movs	r0, #99	; 0x63
    4a6a:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    4a6c:	2300      	movs	r3, #0
    4a6e:	7623      	strb	r3, [r4, #24]
			return 'c';
    4a70:	2063      	movs	r0, #99	; 0x63
    4a72:	bd38      	pop	{r3, r4, r5, pc}

00004a74 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    4a74:	b570      	push	{r4, r5, r6, lr}
    4a76:	4605      	mov	r5, r0
    4a78:	b082      	sub	sp, #8
    4a7a:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    4a7c:	b1c9      	cbz	r1, 4ab2 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    4a7e:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a80:	4c0d      	ldr	r4, [pc, #52]	; (4ab8 <VisualMicroDebug::start(bool, bool)+0x44>)
    4a82:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    4a84:	2100      	movs	r1, #0
    4a86:	4628      	mov	r0, r5
    4a88:	f7ff ff8e 	bl	49a8 <VisualMicroDebug::breakWait(unsigned char)>
    4a8c:	2863      	cmp	r0, #99	; 0x63
    4a8e:	d010      	beq.n	4ab2 <VisualMicroDebug::start(bool, bool)+0x3e>
    4a90:	6823      	ldr	r3, [r4, #0]
    4a92:	9301      	str	r3, [sp, #4]
	return ret;
    4a94:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4a96:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a98:	6823      	ldr	r3, [r4, #0]
    4a9a:	9300      	str	r3, [sp, #0]
	return ret;
    4a9c:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4a9e:	429a      	cmp	r2, r3
    4aa0:	d8f0      	bhi.n	4a84 <VisualMicroDebug::start(bool, bool)+0x10>
    4aa2:	4299      	cmp	r1, r3
    4aa4:	d2f8      	bcs.n	4a98 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    4aa6:	2100      	movs	r1, #0
    4aa8:	4628      	mov	r0, r5
    4aaa:	f7ff ff7d 	bl	49a8 <VisualMicroDebug::breakWait(unsigned char)>
    4aae:	2863      	cmp	r0, #99	; 0x63
    4ab0:	d1ee      	bne.n	4a90 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    4ab2:	762e      	strb	r6, [r5, #24]
#endif

}
    4ab4:	b002      	add	sp, #8
    4ab6:	bd70      	pop	{r4, r5, r6, pc}
    4ab8:	1fff9668 	.word	0x1fff9668

00004abc <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    4abc:	4b03      	ldr	r3, [pc, #12]	; (4acc <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    4abe:	2200      	movs	r2, #0
    4ac0:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    4ac2:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    4ac4:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    4ac6:	615a      	str	r2, [r3, #20]
    4ac8:	4770      	bx	lr
    4aca:	bf00      	nop
    4acc:	1fff9618 	.word	0x1fff9618

00004ad0 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    4ad0:	4a37      	ldr	r2, [pc, #220]	; (4bb0 <wait_for_cal+0xe0>)
    4ad2:	4938      	ldr	r1, [pc, #224]	; (4bb4 <wait_for_cal+0xe4>)
    4ad4:	6813      	ldr	r3, [r2, #0]
    4ad6:	061b      	lsls	r3, r3, #24
    4ad8:	d4fc      	bmi.n	4ad4 <wait_for_cal+0x4>
    4ada:	680b      	ldr	r3, [r1, #0]
    4adc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    4ae0:	d1f8      	bne.n	4ad4 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    4ae2:	b672      	cpsid	i
	if (calibrating) {
    4ae4:	4934      	ldr	r1, [pc, #208]	; (4bb8 <wait_for_cal+0xe8>)
    4ae6:	780a      	ldrb	r2, [r1, #0]
    4ae8:	2a00      	cmp	r2, #0
    4aea:	d05f      	beq.n	4bac <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4aec:	4a33      	ldr	r2, [pc, #204]	; (4bbc <wait_for_cal+0xec>)
    4aee:	4834      	ldr	r0, [pc, #208]	; (4bc0 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    4af0:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4af2:	4c34      	ldr	r4, [pc, #208]	; (4bc4 <wait_for_cal+0xf4>)
    4af4:	6817      	ldr	r7, [r2, #0]
    4af6:	6806      	ldr	r6, [r0, #0]
    4af8:	6825      	ldr	r5, [r4, #0]
    4afa:	68d4      	ldr	r4, [r2, #12]
    4afc:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4afe:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4b00:	3214      	adds	r2, #20
    4b02:	6800      	ldr	r0, [r0, #0]
    4b04:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    4b06:	4f30      	ldr	r7, [pc, #192]	; (4bc8 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    4b08:	4435      	add	r5, r6
    4b0a:	442c      	add	r4, r5
    4b0c:	4420      	add	r0, r4
    4b0e:	4402      	add	r2, r0
    4b10:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4b14:	4e2d      	ldr	r6, [pc, #180]	; (4bcc <wait_for_cal+0xfc>)
    4b16:	482e      	ldr	r0, [pc, #184]	; (4bd0 <wait_for_cal+0x100>)
    4b18:	4d2e      	ldr	r5, [pc, #184]	; (4bd4 <wait_for_cal+0x104>)
    4b1a:	4c2f      	ldr	r4, [pc, #188]	; (4bd8 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    4b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    4b20:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4b22:	6837      	ldr	r7, [r6, #0]
    4b24:	6806      	ldr	r6, [r0, #0]
    4b26:	682d      	ldr	r5, [r5, #0]
    4b28:	4a2c      	ldr	r2, [pc, #176]	; (4bdc <wait_for_cal+0x10c>)
    4b2a:	6824      	ldr	r4, [r4, #0]
    4b2c:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4b2e:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4b30:	6800      	ldr	r0, [r0, #0]
    4b32:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    4b34:	4f2a      	ldr	r7, [pc, #168]	; (4be0 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    4b36:	4435      	add	r5, r6
    4b38:	442c      	add	r4, r5
    4b3a:	4420      	add	r0, r4
    4b3c:	4402      	add	r2, r0
    4b3e:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    4b42:	4e28      	ldr	r6, [pc, #160]	; (4be4 <wait_for_cal+0x114>)
    4b44:	4828      	ldr	r0, [pc, #160]	; (4be8 <wait_for_cal+0x118>)
    4b46:	4d29      	ldr	r5, [pc, #164]	; (4bec <wait_for_cal+0x11c>)
    4b48:	4c29      	ldr	r4, [pc, #164]	; (4bf0 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    4b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    4b4e:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    4b50:	6837      	ldr	r7, [r6, #0]
    4b52:	6806      	ldr	r6, [r0, #0]
    4b54:	682d      	ldr	r5, [r5, #0]
    4b56:	4a27      	ldr	r2, [pc, #156]	; (4bf4 <wait_for_cal+0x124>)
    4b58:	6824      	ldr	r4, [r4, #0]
    4b5a:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4b5c:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    4b5e:	6800      	ldr	r0, [r0, #0]
    4b60:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    4b62:	4f25      	ldr	r7, [pc, #148]	; (4bf8 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    4b64:	4435      	add	r5, r6
    4b66:	442c      	add	r4, r5
    4b68:	4420      	add	r0, r4
    4b6a:	4402      	add	r2, r0
    4b6c:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    4b70:	4e22      	ldr	r6, [pc, #136]	; (4bfc <wait_for_cal+0x12c>)
    4b72:	4823      	ldr	r0, [pc, #140]	; (4c00 <wait_for_cal+0x130>)
    4b74:	4d23      	ldr	r5, [pc, #140]	; (4c04 <wait_for_cal+0x134>)
    4b76:	4c24      	ldr	r4, [pc, #144]	; (4c08 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    4b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    4b7c:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    4b7e:	6837      	ldr	r7, [r6, #0]
    4b80:	6806      	ldr	r6, [r0, #0]
    4b82:	682d      	ldr	r5, [r5, #0]
    4b84:	4a21      	ldr	r2, [pc, #132]	; (4c0c <wait_for_cal+0x13c>)
    4b86:	6824      	ldr	r4, [r4, #0]
    4b88:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4b8a:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    4b8c:	6800      	ldr	r0, [r0, #0]
    4b8e:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    4b90:	4435      	add	r5, r6
    4b92:	442c      	add	r4, r5
    4b94:	4420      	add	r0, r4
    4b96:	4402      	add	r2, r0
    4b98:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    4b9c:	481c      	ldr	r0, [pc, #112]	; (4c10 <wait_for_cal+0x140>)
    4b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    4ba2:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    4ba4:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    4ba6:	b662      	cpsie	i
}
    4ba8:	bcf0      	pop	{r4, r5, r6, r7}
    4baa:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    4bac:	b662      	cpsie	i
    4bae:	4770      	bx	lr
    4bb0:	4003b024 	.word	0x4003b024
    4bb4:	400bb024 	.word	0x400bb024
    4bb8:	1fff9661 	.word	0x1fff9661
    4bbc:	4003b038 	.word	0x4003b038
    4bc0:	4003b03c 	.word	0x4003b03c
    4bc4:	4003b040 	.word	0x4003b040
    4bc8:	4003b02c 	.word	0x4003b02c
    4bcc:	4003b058 	.word	0x4003b058
    4bd0:	4003b05c 	.word	0x4003b05c
    4bd4:	4003b060 	.word	0x4003b060
    4bd8:	4003b064 	.word	0x4003b064
    4bdc:	4003b06c 	.word	0x4003b06c
    4be0:	4003b030 	.word	0x4003b030
    4be4:	400bb038 	.word	0x400bb038
    4be8:	400bb03c 	.word	0x400bb03c
    4bec:	400bb040 	.word	0x400bb040
    4bf0:	400bb044 	.word	0x400bb044
    4bf4:	400bb04c 	.word	0x400bb04c
    4bf8:	400bb02c 	.word	0x400bb02c
    4bfc:	400bb058 	.word	0x400bb058
    4c00:	400bb05c 	.word	0x400bb05c
    4c04:	400bb060 	.word	0x400bb060
    4c08:	400bb064 	.word	0x400bb064
    4c0c:	400bb06c 	.word	0x400bb06c
    4c10:	400bb030 	.word	0x400bb030

00004c14 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    4c14:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4c16:	4829      	ldr	r0, [pc, #164]	; (4cbc <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4c18:	4a29      	ldr	r2, [pc, #164]	; (4cc0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    4c1a:	4b2a      	ldr	r3, [pc, #168]	; (4cc4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4c1c:	4d2a      	ldr	r5, [pc, #168]	; (4cc8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4c1e:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4c20:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4c22:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4c24:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    4c26:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4c28:	4c28      	ldr	r4, [pc, #160]	; (4ccc <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    4c2a:	2b08      	cmp	r3, #8
    4c2c:	d030      	beq.n	4c90 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4c2e:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4c30:	4827      	ldr	r0, [pc, #156]	; (4cd0 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4c32:	4928      	ldr	r1, [pc, #160]	; (4cd4 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4c34:	d037      	beq.n	4ca6 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    4c36:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    4c38:	bf0c      	ite	eq
    4c3a:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4c3c:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4c3e:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4c40:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4c42:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4c44:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4c46:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4c48:	4b23      	ldr	r3, [pc, #140]	; (4cd8 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4c4a:	4924      	ldr	r1, [pc, #144]	; (4cdc <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4c4c:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4c4e:	4a24      	ldr	r2, [pc, #144]	; (4ce0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4c50:	b1bb      	cbz	r3, 4c82 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4c52:	2301      	movs	r3, #1
    4c54:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4c56:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4c58:	4b22      	ldr	r3, [pc, #136]	; (4ce4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4c5a:	4923      	ldr	r1, [pc, #140]	; (4ce8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4c5c:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    4c5e:	4a23      	ldr	r2, [pc, #140]	; (4cec <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    4c60:	2b01      	cmp	r3, #1
    4c62:	d926      	bls.n	4cb2 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    4c64:	2b04      	cmp	r3, #4
    4c66:	d90f      	bls.n	4c88 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    4c68:	2b08      	cmp	r3, #8
    4c6a:	d91e      	bls.n	4caa <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    4c6c:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    4c6e:	bf94      	ite	ls
    4c70:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    4c72:	2387      	movhi	r3, #135	; 0x87
    4c74:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    4c76:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    4c78:	4b1d      	ldr	r3, [pc, #116]	; (4cf0 <analog_init+0xdc>)
    4c7a:	2201      	movs	r2, #1
    4c7c:	701a      	strb	r2, [r3, #0]
}
    4c7e:	bc30      	pop	{r4, r5}
    4c80:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    4c82:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    4c84:	6013      	str	r3, [r2, #0]
    4c86:	e7e7      	b.n	4c58 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4c88:	2384      	movs	r3, #132	; 0x84
    4c8a:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4c8c:	6013      	str	r3, [r2, #0]
    4c8e:	e7f3      	b.n	4c78 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4c90:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4c94:	490f      	ldr	r1, [pc, #60]	; (4cd4 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4c96:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4c98:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4c9a:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4c9c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4c9e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4ca0:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4ca2:	600b      	str	r3, [r1, #0]
    4ca4:	e7d0      	b.n	4c48 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4ca6:	2239      	movs	r2, #57	; 0x39
    4ca8:	e7f7      	b.n	4c9a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    4caa:	2385      	movs	r3, #133	; 0x85
    4cac:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    4cae:	6013      	str	r3, [r2, #0]
    4cb0:	e7e2      	b.n	4c78 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4cb2:	2380      	movs	r3, #128	; 0x80
    4cb4:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    4cb6:	6013      	str	r3, [r2, #0]
    4cb8:	e7de      	b.n	4c78 <analog_init+0x64>
    4cba:	bf00      	nop
    4cbc:	40074000 	.word	0x40074000
    4cc0:	40074001 	.word	0x40074001
    4cc4:	1fff8784 	.word	0x1fff8784
    4cc8:	4003b008 	.word	0x4003b008
    4ccc:	4003b00c 	.word	0x4003b00c
    4cd0:	400bb008 	.word	0x400bb008
    4cd4:	400bb00c 	.word	0x400bb00c
    4cd8:	1fff9664 	.word	0x1fff9664
    4cdc:	4003b020 	.word	0x4003b020
    4ce0:	400bb020 	.word	0x400bb020
    4ce4:	1fff8785 	.word	0x1fff8785
    4ce8:	4003b024 	.word	0x4003b024
    4cec:	400bb024 	.word	0x400bb024
    4cf0:	1fff9661 	.word	0x1fff9661

00004cf4 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4cf4:	2828      	cmp	r0, #40	; 0x28
    4cf6:	d82f      	bhi.n	4d58 <analogRead+0x64>
	channel = pin2sc1a[pin];
    4cf8:	4b33      	ldr	r3, [pc, #204]	; (4dc8 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    4cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    4cfe:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    4d00:	2eff      	cmp	r6, #255	; 0xff
    4d02:	d02b      	beq.n	4d5c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    4d04:	4b31      	ldr	r3, [pc, #196]	; (4dcc <analogRead+0xd8>)
    4d06:	781b      	ldrb	r3, [r3, #0]
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d12a      	bne.n	4d62 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    4d0c:	0632      	lsls	r2, r6, #24
    4d0e:	d42c      	bmi.n	4d6a <analogRead+0x76>
#endif

	__disable_irq();
    4d10:	b672      	cpsid	i
    4d12:	4d2f      	ldr	r5, [pc, #188]	; (4dd0 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    4d14:	4c2f      	ldr	r4, [pc, #188]	; (4dd4 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    4d16:	462f      	mov	r7, r5
    4d18:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    4d1a:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    4d1c:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    4d1e:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    4d20:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    4d22:	6823      	ldr	r3, [r4, #0]
    4d24:	061b      	lsls	r3, r3, #24
    4d26:	d40c      	bmi.n	4d42 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    4d28:	783b      	ldrb	r3, [r7, #0]
    4d2a:	b91b      	cbnz	r3, 4d34 <analogRead+0x40>
    4d2c:	e7f4      	b.n	4d18 <analogRead+0x24>
    4d2e:	782b      	ldrb	r3, [r5, #0]
    4d30:	2b00      	cmp	r3, #0
    4d32:	d0f1      	beq.n	4d18 <analogRead+0x24>
		__enable_irq();
    4d34:	b662      	cpsie	i
		yield();
    4d36:	f001 fb8d 	bl	6454 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    4d3a:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    4d3c:	6823      	ldr	r3, [r4, #0]
    4d3e:	0618      	lsls	r0, r3, #24
    4d40:	d5f5      	bpl.n	4d2e <analogRead+0x3a>
			result = ADC0_RA;
    4d42:	4b25      	ldr	r3, [pc, #148]	; (4dd8 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    4d44:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    4d46:	2200      	movs	r2, #0
    4d48:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    4d4a:	b662      	cpsie	i
			result >>= analog_right_shift;
    4d4c:	4a23      	ldr	r2, [pc, #140]	; (4ddc <analogRead+0xe8>)
    4d4e:	7810      	ldrb	r0, [r2, #0]
    4d50:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    4d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4d58:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    4d5a:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4d5c:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    4d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    4d62:	f7ff feb5 	bl	4ad0 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    4d66:	0632      	lsls	r2, r6, #24
    4d68:	d5d2      	bpl.n	4d10 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    4d6a:	b672      	cpsid	i
    4d6c:	4d1c      	ldr	r5, [pc, #112]	; (4de0 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    4d6e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4dec <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    4d72:	4c1c      	ldr	r4, [pc, #112]	; (4de4 <analogRead+0xf0>)
    4d74:	f006 0740 	and.w	r7, r6, #64	; 0x40
    4d78:	b2ff      	uxtb	r7, r7
    4d7a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    4d7e:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    4d82:	b1df      	cbz	r7, 4dbc <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    4d84:	f023 0310 	bic.w	r3, r3, #16
    4d88:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    4d8c:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    4d8e:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    4d90:	4a13      	ldr	r2, [pc, #76]	; (4de0 <analogRead+0xec>)
    4d92:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    4d94:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    4d96:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    4d98:	6823      	ldr	r3, [r4, #0]
    4d9a:	0619      	lsls	r1, r3, #24
    4d9c:	d40c      	bmi.n	4db8 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    4d9e:	7813      	ldrb	r3, [r2, #0]
    4da0:	b91b      	cbnz	r3, 4daa <analogRead+0xb6>
    4da2:	e7ec      	b.n	4d7e <analogRead+0x8a>
    4da4:	782b      	ldrb	r3, [r5, #0]
    4da6:	2b00      	cmp	r3, #0
    4da8:	d0e9      	beq.n	4d7e <analogRead+0x8a>
		__enable_irq();
    4daa:	b662      	cpsie	i
		yield();
    4dac:	f001 fb52 	bl	6454 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    4db0:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    4db2:	6823      	ldr	r3, [r4, #0]
    4db4:	061b      	lsls	r3, r3, #24
    4db6:	d5f5      	bpl.n	4da4 <analogRead+0xb0>
			result = ADC1_RA;
    4db8:	4b0b      	ldr	r3, [pc, #44]	; (4de8 <analogRead+0xf4>)
    4dba:	e7c3      	b.n	4d44 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    4dbc:	f043 0310 	orr.w	r3, r3, #16
    4dc0:	f8c8 3000 	str.w	r3, [r8]
    4dc4:	e7e2      	b.n	4d8c <analogRead+0x98>
    4dc6:	bf00      	nop
    4dc8:	00008c3c 	.word	0x00008c3c
    4dcc:	1fff9661 	.word	0x1fff9661
    4dd0:	1fff9663 	.word	0x1fff9663
    4dd4:	4003b000 	.word	0x4003b000
    4dd8:	4003b010 	.word	0x4003b010
    4ddc:	1fff9660 	.word	0x1fff9660
    4de0:	1fff9662 	.word	0x1fff9662
    4de4:	400bb000 	.word	0x400bb000
    4de8:	400bb010 	.word	0x400bb010
    4dec:	400bb00c 	.word	0x400bb00c

00004df0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    4df0:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4df2:	4c10      	ldr	r4, [pc, #64]	; (4e34 <fault_isr+0x44>)
    4df4:	e008      	b.n	4e08 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4df6:	6823      	ldr	r3, [r4, #0]
    4df8:	0559      	lsls	r1, r3, #21
    4dfa:	d40d      	bmi.n	4e18 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4dfc:	6823      	ldr	r3, [r4, #0]
    4dfe:	051a      	lsls	r2, r3, #20
    4e00:	d40f      	bmi.n	4e22 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4e02:	6823      	ldr	r3, [r4, #0]
    4e04:	04db      	lsls	r3, r3, #19
    4e06:	d411      	bmi.n	4e2c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4e08:	6823      	ldr	r3, [r4, #0]
    4e0a:	0358      	lsls	r0, r3, #13
    4e0c:	d5f3      	bpl.n	4df6 <fault_isr+0x6>
    4e0e:	f000 fa37 	bl	5280 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4e12:	6823      	ldr	r3, [r4, #0]
    4e14:	0559      	lsls	r1, r3, #21
    4e16:	d5f1      	bpl.n	4dfc <fault_isr+0xc>
    4e18:	f001 fba0 	bl	655c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4e1c:	6823      	ldr	r3, [r4, #0]
    4e1e:	051a      	lsls	r2, r3, #20
    4e20:	d5ef      	bpl.n	4e02 <fault_isr+0x12>
    4e22:	f001 fc31 	bl	6688 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4e26:	6823      	ldr	r3, [r4, #0]
    4e28:	04db      	lsls	r3, r3, #19
    4e2a:	d5ed      	bpl.n	4e08 <fault_isr+0x18>
    4e2c:	f001 fcc2 	bl	67b4 <uart2_status_isr>
    4e30:	e7ea      	b.n	4e08 <fault_isr+0x18>
    4e32:	bf00      	nop
    4e34:	40048034 	.word	0x40048034

00004e38 <unused_isr>:
	}
}

void unused_isr(void)
{
    4e38:	b508      	push	{r3, lr}
	fault_isr();
    4e3a:	f7ff ffd9 	bl	4df0 <fault_isr>
    4e3e:	bf00      	nop

00004e40 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4e40:	4b01      	ldr	r3, [pc, #4]	; (4e48 <startup_early_hook+0x8>)
    4e42:	2210      	movs	r2, #16
    4e44:	801a      	strh	r2, [r3, #0]
    4e46:	4770      	bx	lr
    4e48:	40052000 	.word	0x40052000

00004e4c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4e4c:	4770      	bx	lr
    4e4e:	bf00      	nop

00004e50 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    4e50:	7800      	ldrb	r0, [r0, #0]
}
    4e52:	fab0 f080 	clz	r0, r0
    4e56:	0940      	lsrs	r0, r0, #5
    4e58:	4770      	bx	lr
    4e5a:	bf00      	nop

00004e5c <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    4e5c:	2301      	movs	r3, #1
    4e5e:	7003      	strb	r3, [r0, #0]
    4e60:	4770      	bx	lr
    4e62:	bf00      	nop

00004e64 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4e64:	4a1c      	ldr	r2, [pc, #112]	; (4ed8 <pinMode.part.2+0x74>)
    4e66:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4e6a:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4e6c:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4e6e:	d011      	beq.n	4e94 <pinMode.part.2+0x30>
    4e70:	2904      	cmp	r1, #4
    4e72:	d01b      	beq.n	4eac <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    4e74:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    4e78:	2200      	movs	r2, #0
    4e7a:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    4e7e:	b129      	cbz	r1, 4e8c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    4e80:	2902      	cmp	r1, #2
    4e82:	d020      	beq.n	4ec6 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    4e84:	2903      	cmp	r1, #3
    4e86:	d022      	beq.n	4ece <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    4e88:	601a      	str	r2, [r3, #0]
    4e8a:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    4e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4e90:	601a      	str	r2, [r3, #0]
    4e92:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4e94:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4e98:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4e9c:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4ea0:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    4ea2:	681a      	ldr	r2, [r3, #0]
    4ea4:	f022 0220 	bic.w	r2, r2, #32
    4ea8:	601a      	str	r2, [r3, #0]
    4eaa:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4eac:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4eb0:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4eb4:	2001      	movs	r0, #1
    4eb6:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4eba:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    4ebc:	681a      	ldr	r2, [r3, #0]
    4ebe:	f042 0220 	orr.w	r2, r2, #32
    4ec2:	601a      	str	r2, [r3, #0]
    4ec4:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    4ec6:	f240 1203 	movw	r2, #259	; 0x103
    4eca:	601a      	str	r2, [r3, #0]
    4ecc:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    4ece:	f44f 7281 	mov.w	r2, #258	; 0x102
    4ed2:	601a      	str	r2, [r3, #0]
    4ed4:	4770      	bx	lr
    4ed6:	bf00      	nop
    4ed8:	00008c68 	.word	0x00008c68

00004edc <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    4edc:	b430      	push	{r4, r5}
	RTC_SR = 0;
    4ede:	4b05      	ldr	r3, [pc, #20]	; (4ef4 <rtc_set+0x18>)
	RTC_TPR = 0;
    4ee0:	4d05      	ldr	r5, [pc, #20]	; (4ef8 <rtc_set+0x1c>)
	RTC_TSR = t;
    4ee2:	4c06      	ldr	r4, [pc, #24]	; (4efc <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4ee4:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    4ee6:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4ee8:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    4eea:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    4eec:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    4eee:	6019      	str	r1, [r3, #0]
}
    4ef0:	bc30      	pop	{r4, r5}
    4ef2:	4770      	bx	lr
    4ef4:	4003d014 	.word	0x4003d014
    4ef8:	4003d004 	.word	0x4003d004
    4efc:	4003d000 	.word	0x4003d000

00004f00 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    4f00:	2821      	cmp	r0, #33	; 0x21
    4f02:	d801      	bhi.n	4f08 <pinMode+0x8>
    4f04:	f7ff bfae 	b.w	4e64 <pinMode.part.2>
    4f08:	4770      	bx	lr
    4f0a:	bf00      	nop

00004f0c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4f0c:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4f0e:	490c      	ldr	r1, [pc, #48]	; (4f40 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4f10:	4b0c      	ldr	r3, [pc, #48]	; (4f44 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4f12:	4a0d      	ldr	r2, [pc, #52]	; (4f48 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4f14:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4f16:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4f18:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4f1a:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4f1c:	0152      	lsls	r2, r2, #5
    4f1e:	d502      	bpl.n	4f26 <micros+0x1a>
    4f20:	2b32      	cmp	r3, #50	; 0x32
    4f22:	bf88      	it	hi
    4f24:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4f26:	4909      	ldr	r1, [pc, #36]	; (4f4c <micros+0x40>)
    4f28:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4f30:	33ff      	adds	r3, #255	; 0xff
    4f32:	fba1 1303 	umull	r1, r3, r1, r3
    4f36:	fb02 f000 	mul.w	r0, r2, r0
}
    4f3a:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    4f3e:	4770      	bx	lr
    4f40:	1fff9668 	.word	0x1fff9668
    4f44:	e000e018 	.word	0xe000e018
    4f48:	e000ed04 	.word	0xe000ed04
    4f4c:	aaaaaaab 	.word	0xaaaaaaab

00004f50 <delay>:

void delay(uint32_t ms)
{
    4f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f54:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4f56:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4f58:	4f20      	ldr	r7, [pc, #128]	; (4fdc <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4f5a:	4b21      	ldr	r3, [pc, #132]	; (4fe0 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4f5c:	4a21      	ldr	r2, [pc, #132]	; (4fe4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4f5e:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4f60:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4f62:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4f64:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4f66:	0152      	lsls	r2, r2, #5
    4f68:	d502      	bpl.n	4f70 <delay+0x20>
    4f6a:	2b32      	cmp	r3, #50	; 0x32
    4f6c:	bf88      	it	hi
    4f6e:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    4f70:	b395      	cbz	r5, 4fd8 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4f72:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4f76:	4e1c      	ldr	r6, [pc, #112]	; (4fe8 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4f78:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4fe0 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4f7c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4fe4 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4f80:	33ff      	adds	r3, #255	; 0xff
    4f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4f86:	fba6 1303 	umull	r1, r3, r6, r3
    4f8a:	fb02 f404 	mul.w	r4, r2, r4
    4f8e:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4f92:	b672      	cpsid	i
	current = SYST_CVR;
    4f94:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    4f98:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4f9a:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    4f9e:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4fa0:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    4fa4:	33ff      	adds	r3, #255	; 0xff
    4fa6:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4faa:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4fae:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    4fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4fb6:	d002      	beq.n	4fbe <delay+0x6e>
    4fb8:	2932      	cmp	r1, #50	; 0x32
    4fba:	bf88      	it	hi
    4fbc:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4fbe:	fb00 3302 	mla	r3, r0, r2, r3
    4fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    4fc6:	d304      	bcc.n	4fd2 <delay+0x82>
				ms--;
				if (ms == 0) return;
    4fc8:	3d01      	subs	r5, #1
    4fca:	d005      	beq.n	4fd8 <delay+0x88>
				start += 1000;
    4fcc:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    4fd0:	e7df      	b.n	4f92 <delay+0x42>
			}
			yield();
    4fd2:	f001 fa3f 	bl	6454 <yield>
		}
    4fd6:	e7dc      	b.n	4f92 <delay+0x42>
    4fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4fdc:	1fff9668 	.word	0x1fff9668
    4fe0:	e000e018 	.word	0xe000e018
    4fe4:	e000ed04 	.word	0xe000ed04
    4fe8:	aaaaaaab 	.word	0xaaaaaaab

00004fec <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    4fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4fee:	4b2d      	ldr	r3, [pc, #180]	; (50a4 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4ff0:	492d      	ldr	r1, [pc, #180]	; (50a8 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4ff2:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 50c4 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    4ff6:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 50c8 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    4ffa:	4e2c      	ldr	r6, [pc, #176]	; (50ac <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    4ffc:	4d2c      	ldr	r5, [pc, #176]	; (50b0 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    4ffe:	4c2d      	ldr	r4, [pc, #180]	; (50b4 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    5000:	4a2d      	ldr	r2, [pc, #180]	; (50b8 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    5002:	4f2e      	ldr	r7, [pc, #184]	; (50bc <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    5004:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    5008:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    500a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    500e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    5010:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    5014:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    5016:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    501a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    501c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    5020:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    5022:	2000      	movs	r0, #0
    5024:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    5026:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    5028:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    502c:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    5030:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    5034:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    5036:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    5038:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    503a:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    503c:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    503e:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    5040:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5042:	2209      	movs	r2, #9
    5044:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    5048:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    504c:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    5050:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    5054:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    5058:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    505c:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    5060:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    5062:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5066:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    506a:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    506e:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    5072:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    5074:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5078:	4811      	ldr	r0, [pc, #68]	; (50c0 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    507a:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    507c:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    5080:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    5084:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    5086:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5088:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    508a:	f7ff fdc3 	bl	4c14 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    508e:	2019      	movs	r0, #25
    5090:	f7ff ff5e 	bl	4f50 <delay>
	usb_init();
    5094:	f000 fe5c 	bl	5d50 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    5098:	f240 1013 	movw	r0, #275	; 0x113
}
    509c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    50a0:	f7ff bf56 	b.w	4f50 <delay>
    50a4:	e000e108 	.word	0xe000e108
    50a8:	40038004 	.word	0x40038004
    50ac:	40038014 	.word	0x40038014
    50b0:	40038024 	.word	0x40038024
    50b4:	4003802c 	.word	0x4003802c
    50b8:	4003801c 	.word	0x4003801c
    50bc:	40038034 	.word	0x40038034
    50c0:	400b8000 	.word	0x400b8000
    50c4:	4003800c 	.word	0x4003800c
    50c8:	40038008 	.word	0x40038008

000050cc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    50cc:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    50ce:	2b03      	cmp	r3, #3
    50d0:	d814      	bhi.n	50fc <usb_rx+0x30>
	__disable_irq();
    50d2:	b672      	cpsid	i
	ret = rx_first[endpoint];
    50d4:	490a      	ldr	r1, [pc, #40]	; (5100 <usb_rx+0x34>)
    50d6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    50da:	b168      	cbz	r0, 50f8 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    50dc:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    50de:	4c09      	ldr	r4, [pc, #36]	; (5104 <usb_rx+0x38>)
    50e0:	8805      	ldrh	r5, [r0, #0]
    50e2:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    50e6:	6846      	ldr	r6, [r0, #4]
    50e8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    50ec:	1b52      	subs	r2, r2, r5
    50ee:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    50f2:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    50f4:	bc70      	pop	{r4, r5, r6}
    50f6:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    50f8:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    50fa:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    50fc:	2000      	movs	r0, #0
    50fe:	4770      	bx	lr
    5100:	1fff96c4 	.word	0x1fff96c4
    5104:	1fff9914 	.word	0x1fff9914

00005108 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    5108:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    510a:	2803      	cmp	r0, #3
    510c:	d80b      	bhi.n	5126 <usb_tx_packet_count+0x1e>
	__disable_irq();
    510e:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    5110:	4b07      	ldr	r3, [pc, #28]	; (5130 <usb_tx_packet_count+0x28>)
    5112:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5116:	b143      	cbz	r3, 512a <usb_tx_packet_count+0x22>
    5118:	2000      	movs	r0, #0
    511a:	685b      	ldr	r3, [r3, #4]
    511c:	3001      	adds	r0, #1
    511e:	2b00      	cmp	r3, #0
    5120:	d1fb      	bne.n	511a <usb_tx_packet_count+0x12>
	__enable_irq();
    5122:	b662      	cpsie	i
	return count;
    5124:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    5126:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    5128:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    512a:	4618      	mov	r0, r3
    512c:	e7f9      	b.n	5122 <usb_tx_packet_count+0x1a>
    512e:	bf00      	nop
    5130:	1fff9718 	.word	0x1fff9718

00005134 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    5134:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    5136:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5138:	4a2b      	ldr	r2, [pc, #172]	; (51e8 <usb_rx_memory+0xb4>)
    513a:	7813      	ldrb	r3, [r2, #0]
    513c:	071d      	lsls	r5, r3, #28
    513e:	d506      	bpl.n	514e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5140:	4b2a      	ldr	r3, [pc, #168]	; (51ec <usb_rx_memory+0xb8>)
    5142:	6a19      	ldr	r1, [r3, #32]
    5144:	2900      	cmp	r1, #0
    5146:	d036      	beq.n	51b6 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5148:	6a99      	ldr	r1, [r3, #40]	; 0x28
    514a:	2900      	cmp	r1, #0
    514c:	d041      	beq.n	51d2 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    514e:	7853      	ldrb	r3, [r2, #1]
    5150:	071c      	lsls	r4, r3, #28
    5152:	d506      	bpl.n	5162 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5154:	4b25      	ldr	r3, [pc, #148]	; (51ec <usb_rx_memory+0xb8>)
    5156:	6c19      	ldr	r1, [r3, #64]	; 0x40
    5158:	2900      	cmp	r1, #0
    515a:	d03e      	beq.n	51da <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    515c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    515e:	2900      	cmp	r1, #0
    5160:	d039      	beq.n	51d6 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5162:	7893      	ldrb	r3, [r2, #2]
    5164:	0719      	lsls	r1, r3, #28
    5166:	d505      	bpl.n	5174 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5168:	4b20      	ldr	r3, [pc, #128]	; (51ec <usb_rx_memory+0xb8>)
    516a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    516c:	2900      	cmp	r1, #0
    516e:	d036      	beq.n	51de <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5170:	6e99      	ldr	r1, [r3, #104]	; 0x68
    5172:	b189      	cbz	r1, 5198 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5174:	78d3      	ldrb	r3, [r2, #3]
    5176:	071b      	lsls	r3, r3, #28
    5178:	d507      	bpl.n	518a <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    517a:	4b1c      	ldr	r3, [pc, #112]	; (51ec <usb_rx_memory+0xb8>)
    517c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    5180:	b37a      	cbz	r2, 51e2 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5182:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5186:	2111      	movs	r1, #17
    5188:	b13a      	cbz	r2, 519a <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    518a:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    518c:	4b18      	ldr	r3, [pc, #96]	; (51f0 <usb_rx_memory+0xbc>)
    518e:	2200      	movs	r2, #0
    5190:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    5192:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    5194:	f000 be68 	b.w	5e68 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5198:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    519a:	4c15      	ldr	r4, [pc, #84]	; (51f0 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    519c:	4d15      	ldr	r5, [pc, #84]	; (51f4 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    519e:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    51a0:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    51a4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    51a8:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    51aa:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    51ac:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    51ae:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    51b0:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    51b2:	bc30      	pop	{r4, r5}
    51b4:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    51b6:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    51b8:	4c0d      	ldr	r4, [pc, #52]	; (51f0 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    51ba:	4d0f      	ldr	r5, [pc, #60]	; (51f8 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    51bc:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    51be:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    51c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    51c6:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    51c8:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    51ca:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    51cc:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    51ce:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    51d0:	e7ef      	b.n	51b2 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    51d2:	2105      	movs	r1, #5
    51d4:	e7e1      	b.n	519a <usb_rx_memory+0x66>
    51d6:	2109      	movs	r1, #9
    51d8:	e7df      	b.n	519a <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    51da:	2208      	movs	r2, #8
    51dc:	e7ec      	b.n	51b8 <usb_rx_memory+0x84>
    51de:	220c      	movs	r2, #12
    51e0:	e7ea      	b.n	51b8 <usb_rx_memory+0x84>
    51e2:	2210      	movs	r2, #16
    51e4:	e7e8      	b.n	51b8 <usb_rx_memory+0x84>
    51e6:	bf00      	nop
    51e8:	00008da4 	.word	0x00008da4
    51ec:	1fff8000 	.word	0x1fff8000
    51f0:	1fff9741 	.word	0x1fff9741
    51f4:	004000c8 	.word	0x004000c8
    51f8:	00400088 	.word	0x00400088

000051fc <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    51fc:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    51fe:	2b03      	cmp	r3, #3
    5200:	d81d      	bhi.n	523e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    5202:	4a1b      	ldr	r2, [pc, #108]	; (5270 <usb_tx+0x74>)
    5204:	0140      	lsls	r0, r0, #5
    5206:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    520a:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    520c:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    520e:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    5210:	4c18      	ldr	r4, [pc, #96]	; (5274 <usb_tx+0x78>)
    5212:	5ce2      	ldrb	r2, [r4, r3]
    5214:	2a03      	cmp	r2, #3
    5216:	d81b      	bhi.n	5250 <usb_tx+0x54>
    5218:	e8df f002 	tbb	[pc, r2]
    521c:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    5220:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5222:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    5224:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5226:	f010 0f08 	tst.w	r0, #8
    522a:	bf14      	ite	ne
    522c:	23c8      	movne	r3, #200	; 0xc8
    522e:	2388      	moveq	r3, #136	; 0x88
    5230:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    5234:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5236:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    5238:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    523a:	b662      	cpsie	i
}
    523c:	bc30      	pop	{r4, r5}
    523e:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    5240:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    5242:	2202      	movs	r2, #2
		break;
    5244:	e7ed      	b.n	5222 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    5246:	2205      	movs	r2, #5
    5248:	e7eb      	b.n	5222 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    524a:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    524c:	2204      	movs	r2, #4
		break;
    524e:	e7e8      	b.n	5222 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    5250:	4a09      	ldr	r2, [pc, #36]	; (5278 <usb_tx+0x7c>)
    5252:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5256:	b138      	cbz	r0, 5268 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    5258:	4a08      	ldr	r2, [pc, #32]	; (527c <usb_tx+0x80>)
    525a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    525e:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    5260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    5264:	b662      	cpsie	i
		return;
    5266:	e7e9      	b.n	523c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    5268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    526c:	4a03      	ldr	r2, [pc, #12]	; (527c <usb_tx+0x80>)
    526e:	e7f7      	b.n	5260 <usb_tx+0x64>
    5270:	1fff8000 	.word	0x1fff8000
    5274:	1fff9750 	.word	0x1fff9750
    5278:	1fff9718 	.word	0x1fff9718
    527c:	1fff9728 	.word	0x1fff9728

00005280 <usb_isr>:
}



void usb_isr(void)
{
    5280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    5284:	f8df b30c 	ldr.w	fp, [pc, #780]	; 5594 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    5288:	f8df a30c 	ldr.w	sl, [pc, #780]	; 5598 <usb_isr+0x318>
}



void usb_isr(void)
{
    528c:	b087      	sub	sp, #28
    528e:	e044      	b.n	531a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    5290:	4fab      	ldr	r7, [pc, #684]	; (5540 <usb_isr+0x2c0>)
    5292:	ea4f 0893 	mov.w	r8, r3, lsr #2
    5296:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    529a:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    529c:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    52a0:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    52a4:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    52a6:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    52aa:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    52ae:	2b00      	cmp	r3, #0
    52b0:	f040 8102 	bne.w	54b8 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    52b4:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    52b8:	0c1b      	lsrs	r3, r3, #16
    52ba:	b299      	uxth	r1, r3
    52bc:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    52c0:	2b00      	cmp	r3, #0
    52c2:	f000 80f0 	beq.w	54a6 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    52c6:	4b9f      	ldr	r3, [pc, #636]	; (5544 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    52c8:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    52cc:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    52d0:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    52d4:	2a00      	cmp	r2, #0
    52d6:	f000 82c5 	beq.w	5864 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    52da:	4d9b      	ldr	r5, [pc, #620]	; (5548 <usb_isr+0x2c8>)
    52dc:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    52e0:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    52e2:	4c9a      	ldr	r4, [pc, #616]	; (554c <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    52e4:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    52e8:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    52ec:	4419      	add	r1, r3
    52ee:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    52f2:	f000 fd99 	bl	5e28 <usb_malloc>
					if (packet) {
    52f6:	2800      	cmp	r0, #0
    52f8:	f000 82ad 	beq.w	5856 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    52fc:	4a94      	ldr	r2, [pc, #592]	; (5550 <usb_isr+0x2d0>)
    52fe:	4b95      	ldr	r3, [pc, #596]	; (5554 <usb_isr+0x2d4>)
    5300:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    5304:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    5308:	bf18      	it	ne
    530a:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    530c:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    5310:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    5314:	2308      	movs	r3, #8
    5316:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    531a:	f89b 4000 	ldrb.w	r4, [fp]
    531e:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    5320:	0761      	lsls	r1, r4, #29
    5322:	d51a      	bpl.n	535a <usb_isr+0xda>
		if (usb_configuration) {
    5324:	4b8c      	ldr	r3, [pc, #560]	; (5558 <usb_isr+0x2d8>)
    5326:	781b      	ldrb	r3, [r3, #0]
    5328:	b1a3      	cbz	r3, 5354 <usb_isr+0xd4>
			t = usb_reboot_timer;
    532a:	498c      	ldr	r1, [pc, #560]	; (555c <usb_isr+0x2dc>)
    532c:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    532e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5332:	b122      	cbz	r2, 533e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    5334:	3b01      	subs	r3, #1
    5336:	b2db      	uxtb	r3, r3
    5338:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    533a:	b903      	cbnz	r3, 533e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    533c:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    533e:	4988      	ldr	r1, [pc, #544]	; (5560 <usb_isr+0x2e0>)
    5340:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    5342:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5346:	b12a      	cbz	r2, 5354 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    5348:	3b01      	subs	r3, #1
    534a:	b2db      	uxtb	r3, r3
    534c:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    534e:	2b00      	cmp	r3, #0
    5350:	f000 8257 	beq.w	5802 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    5354:	2304      	movs	r3, #4
    5356:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    535a:	f004 0308 	and.w	r3, r4, #8
    535e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5362:	2b00      	cmp	r3, #0
    5364:	f000 80cc 	beq.w	5500 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    5368:	f89a 3000 	ldrb.w	r3, [sl]
    536c:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    536e:	091e      	lsrs	r6, r3, #4
    5370:	d18e      	bne.n	5290 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    5372:	089c      	lsrs	r4, r3, #2
    5374:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 5540 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    5378:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    537c:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    5380:	f3c2 0283 	ubfx	r2, r2, #2, #4
    5384:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    5386:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    5388:	2a0c      	cmp	r2, #12
    538a:	f200 8088 	bhi.w	549e <usb_isr+0x21e>
    538e:	e8df f002 	tbb	[pc, r2]
    5392:	7c7c      	.short	0x7c7c
    5394:	86868686 	.word	0x86868686
    5398:	86478686 	.word	0x86478686
    539c:	8686      	.short	0x8686
    539e:	07          	.byte	0x07
    539f:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    53a0:	6808      	ldr	r0, [r1, #0]
    53a2:	4d70      	ldr	r5, [pc, #448]	; (5564 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    53a4:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    53a6:	4f70      	ldr	r7, [pc, #448]	; (5568 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    53a8:	4e70      	ldr	r6, [pc, #448]	; (556c <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    53aa:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    53ac:	b281      	uxth	r1, r0
    53ae:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    53b2:	4b67      	ldr	r3, [pc, #412]	; (5550 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    53b4:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    53b6:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    53ba:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    53bc:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    53be:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    53c2:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    53c4:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    53c8:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    53cc:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    53d0:	4c5b      	ldr	r4, [pc, #364]	; (5540 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    53d2:	f200 80e3 	bhi.w	559c <usb_isr+0x31c>
    53d6:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    53da:	f080 8346 	bcs.w	5a6a <usb_isr+0x7ea>
    53de:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    53e2:	f000 82fc 	beq.w	59de <usb_isr+0x75e>
    53e6:	f200 828d 	bhi.w	5904 <usb_isr+0x684>
    53ea:	2980      	cmp	r1, #128	; 0x80
    53ec:	f000 8377 	beq.w	5ade <usb_isr+0x85e>
    53f0:	2982      	cmp	r1, #130	; 0x82
    53f2:	f040 82fa 	bne.w	59ea <usb_isr+0x76a>
    53f6:	88a9      	ldrh	r1, [r5, #4]
    53f8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    53fc:	2904      	cmp	r1, #4
    53fe:	f200 82f4 	bhi.w	59ea <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    5402:	485b      	ldr	r0, [pc, #364]	; (5570 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    5404:	4c5b      	ldr	r4, [pc, #364]	; (5574 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    5406:	0089      	lsls	r1, r1, #2
    5408:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    540a:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    540c:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    540e:	7802      	ldrb	r2, [r0, #0]
    5410:	0793      	lsls	r3, r2, #30
    5412:	f140 8458 	bpl.w	5cc6 <usb_isr+0xa46>
    5416:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    541a:	f04f 0e02 	mov.w	lr, #2
    541e:	e342      	b.n	5aa6 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    5420:	4f51      	ldr	r7, [pc, #324]	; (5568 <usb_isr+0x2e8>)
    5422:	683a      	ldr	r2, [r7, #0]
		if (data) {
    5424:	b332      	cbz	r2, 5474 <usb_isr+0x1f4>
			size = ep0_tx_len;
    5426:	4b54      	ldr	r3, [pc, #336]	; (5578 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5428:	4e50      	ldr	r6, [pc, #320]	; (556c <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    542a:	4954      	ldr	r1, [pc, #336]	; (557c <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    542c:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    542e:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5430:	780d      	ldrb	r5, [r1, #0]
    5432:	2840      	cmp	r0, #64	; 0x40
    5434:	4686      	mov	lr, r0
    5436:	f045 0802 	orr.w	r8, r5, #2
    543a:	bf28      	it	cs
    543c:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5440:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    5442:	f084 0401 	eor.w	r4, r4, #1
    5446:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    5448:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    544c:	bf0c      	ite	eq
    544e:	2488      	moveq	r4, #136	; 0x88
    5450:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5452:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    5456:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5458:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    545c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5460:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    5462:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5464:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    5468:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    546a:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    546c:	2800      	cmp	r0, #0
    546e:	f000 8145 	beq.w	56fc <usb_isr+0x47c>
    5472:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    5474:	4b3b      	ldr	r3, [pc, #236]	; (5564 <usb_isr+0x2e4>)
    5476:	881a      	ldrh	r2, [r3, #0]
    5478:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    547c:	d10f      	bne.n	549e <usb_isr+0x21e>
			setup.bRequest = 0;
    547e:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    5480:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    5482:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    5484:	4b3e      	ldr	r3, [pc, #248]	; (5580 <usb_isr+0x300>)
    5486:	701a      	strb	r2, [r3, #0]
    5488:	e009      	b.n	549e <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    548a:	4a36      	ldr	r2, [pc, #216]	; (5564 <usb_isr+0x2e4>)
    548c:	8810      	ldrh	r0, [r2, #0]
    548e:	f242 0221 	movw	r2, #8225	; 0x2021
    5492:	4290      	cmp	r0, r2
    5494:	f000 8137 	beq.w	5706 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    5498:	4a2d      	ldr	r2, [pc, #180]	; (5550 <usb_isr+0x2d0>)
    549a:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    549e:	4a39      	ldr	r2, [pc, #228]	; (5584 <usb_isr+0x304>)
    54a0:	2301      	movs	r3, #1
    54a2:	7013      	strb	r3, [r2, #0]
    54a4:	e736      	b.n	5314 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    54a6:	4a2a      	ldr	r2, [pc, #168]	; (5550 <usb_isr+0x2d0>)
    54a8:	4b2a      	ldr	r3, [pc, #168]	; (5554 <usb_isr+0x2d4>)
    54aa:	f019 0f08 	tst.w	r9, #8
    54ae:	bf18      	it	ne
    54b0:	4613      	movne	r3, r2
    54b2:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    54b6:	e72d      	b.n	5314 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    54b8:	f000 fcd6 	bl	5e68 <usb_free>
				packet = tx_first[endpoint];
    54bc:	4a32      	ldr	r2, [pc, #200]	; (5588 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    54be:	4933      	ldr	r1, [pc, #204]	; (558c <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    54c0:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    54c4:	2b00      	cmp	r3, #0
    54c6:	f000 81d1 	beq.w	586c <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    54ca:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    54cc:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    54ce:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    54d2:	f103 0208 	add.w	r2, r3, #8
    54d6:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    54da:	2c03      	cmp	r4, #3
    54dc:	d805      	bhi.n	54ea <usb_isr+0x26a>
    54de:	e8df f004 	tbb	[pc, r4]
    54e2:	022c      	.short	0x022c
    54e4:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    54e6:	2202      	movs	r2, #2
    54e8:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    54ea:	881a      	ldrh	r2, [r3, #0]
    54ec:	f019 0f08 	tst.w	r9, #8
    54f0:	bf0c      	ite	eq
    54f2:	2388      	moveq	r3, #136	; 0x88
    54f4:	23c8      	movne	r3, #200	; 0xc8
    54f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    54fa:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    54fe:	e709      	b.n	5314 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    5500:	07e0      	lsls	r0, r4, #31
    5502:	f100 8181 	bmi.w	5808 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    5506:	0621      	lsls	r1, r4, #24
    5508:	f100 81f2 	bmi.w	58f0 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    550c:	07a2      	lsls	r2, r4, #30
    550e:	d506      	bpl.n	551e <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    5510:	4a1f      	ldr	r2, [pc, #124]	; (5590 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    5512:	4920      	ldr	r1, [pc, #128]	; (5594 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    5514:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    5516:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    5518:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    551a:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    551c:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    551e:	06e3      	lsls	r3, r4, #27
    5520:	d502      	bpl.n	5528 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    5522:	4b1c      	ldr	r3, [pc, #112]	; (5594 <usb_isr+0x314>)
    5524:	2210      	movs	r2, #16
    5526:	701a      	strb	r2, [r3, #0]
	}

}
    5528:	b007      	add	sp, #28
    552a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    552e:	2204      	movs	r2, #4
    5530:	558a      	strb	r2, [r1, r6]
						break;
    5532:	e7da      	b.n	54ea <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    5534:	2205      	movs	r2, #5
    5536:	558a      	strb	r2, [r1, r6]
						break;
    5538:	e7d7      	b.n	54ea <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    553a:	2203      	movs	r2, #3
    553c:	558a      	strb	r2, [r1, r6]
						break;
    553e:	e7d4      	b.n	54ea <usb_isr+0x26a>
    5540:	1fff8000 	.word	0x1fff8000
    5544:	1fff96c4 	.word	0x1fff96c4
    5548:	1fff9670 	.word	0x1fff9670
    554c:	1fff9914 	.word	0x1fff9914
    5550:	004000c8 	.word	0x004000c8
    5554:	00400088 	.word	0x00400088
    5558:	1fff974c 	.word	0x1fff974c
    555c:	1fff96d5 	.word	0x1fff96d5
    5560:	1fff9754 	.word	0x1fff9754
    5564:	1fff9738 	.word	0x1fff9738
    5568:	1fff966c 	.word	0x1fff966c
    556c:	1fff96d4 	.word	0x1fff96d4
    5570:	400720c0 	.word	0x400720c0
    5574:	1fff9744 	.word	0x1fff9744
    5578:	1fff9680 	.word	0x1fff9680
    557c:	1fff9740 	.word	0x1fff9740
    5580:	40072098 	.word	0x40072098
    5584:	40072094 	.word	0x40072094
    5588:	1fff9718 	.word	0x1fff9718
    558c:	1fff9750 	.word	0x1fff9750
    5590:	40072088 	.word	0x40072088
    5594:	40072080 	.word	0x40072080
    5598:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    559c:	f242 0021 	movw	r0, #8225	; 0x2021
    55a0:	4281      	cmp	r1, r0
    55a2:	f000 812a 	beq.w	57fa <usb_isr+0x57a>
    55a6:	f200 80d8 	bhi.w	575a <usb_isr+0x4da>
    55aa:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    55ae:	f000 8276 	beq.w	5a9e <usb_isr+0x81e>
    55b2:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    55b6:	f040 8218 	bne.w	59ea <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    55ba:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    55bc:	49b3      	ldr	r1, [pc, #716]	; (588c <usb_isr+0x60c>)
    55be:	78a8      	ldrb	r0, [r5, #2]
    55c0:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    55c2:	0612      	lsls	r2, r2, #24
    55c4:	f100 833a 	bmi.w	5c3c <usb_isr+0x9bc>
    55c8:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    55cc:	49b0      	ldr	r1, [pc, #704]	; (5890 <usb_isr+0x610>)
    55ce:	0613      	lsls	r3, r2, #24
    55d0:	f100 830c 	bmi.w	5bec <usb_isr+0x96c>
    55d4:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    55d8:	49ad      	ldr	r1, [pc, #692]	; (5890 <usb_isr+0x610>)
    55da:	0615      	lsls	r5, r2, #24
    55dc:	f100 8301 	bmi.w	5be2 <usb_isr+0x962>
    55e0:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    55e4:	49aa      	ldr	r1, [pc, #680]	; (5890 <usb_isr+0x610>)
    55e6:	0614      	lsls	r4, r2, #24
    55e8:	f100 82f6 	bmi.w	5bd8 <usb_isr+0x958>
    55ec:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    55f0:	49a7      	ldr	r1, [pc, #668]	; (5890 <usb_isr+0x610>)
    55f2:	0610      	lsls	r0, r2, #24
    55f4:	f100 834a 	bmi.w	5c8c <usb_isr+0xa0c>
    55f8:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    55fc:	49a4      	ldr	r1, [pc, #656]	; (5890 <usb_isr+0x610>)
    55fe:	0612      	lsls	r2, r2, #24
    5600:	f100 833f 	bmi.w	5c82 <usb_isr+0xa02>
    5604:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    5608:	49a1      	ldr	r1, [pc, #644]	; (5890 <usb_isr+0x610>)
    560a:	0613      	lsls	r3, r2, #24
    560c:	f100 8334 	bmi.w	5c78 <usb_isr+0x9f8>
    5610:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    5614:	499e      	ldr	r1, [pc, #632]	; (5890 <usb_isr+0x610>)
    5616:	0615      	lsls	r5, r2, #24
    5618:	f100 8329 	bmi.w	5c6e <usb_isr+0x9ee>
    561c:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    5620:	499b      	ldr	r1, [pc, #620]	; (5890 <usb_isr+0x610>)
    5622:	0614      	lsls	r4, r2, #24
    5624:	f100 831e 	bmi.w	5c64 <usb_isr+0x9e4>
    5628:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    562c:	4998      	ldr	r1, [pc, #608]	; (5890 <usb_isr+0x610>)
    562e:	0610      	lsls	r0, r2, #24
    5630:	f100 8313 	bmi.w	5c5a <usb_isr+0x9da>
    5634:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    5638:	4995      	ldr	r1, [pc, #596]	; (5890 <usb_isr+0x610>)
    563a:	0612      	lsls	r2, r2, #24
    563c:	f100 8308 	bmi.w	5c50 <usb_isr+0x9d0>
    5640:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    5644:	4992      	ldr	r1, [pc, #584]	; (5890 <usb_isr+0x610>)
    5646:	0613      	lsls	r3, r2, #24
    5648:	f100 82fd 	bmi.w	5c46 <usb_isr+0x9c6>
    564c:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    5650:	498f      	ldr	r1, [pc, #572]	; (5890 <usb_isr+0x610>)
    5652:	0615      	lsls	r5, r2, #24
    5654:	f100 8331 	bmi.w	5cba <usb_isr+0xa3a>
    5658:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    565c:	498c      	ldr	r1, [pc, #560]	; (5890 <usb_isr+0x610>)
    565e:	0614      	lsls	r4, r2, #24
    5660:	f100 8325 	bmi.w	5cae <usb_isr+0xa2e>
    5664:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    5668:	4989      	ldr	r1, [pc, #548]	; (5890 <usb_isr+0x610>)
    566a:	0610      	lsls	r0, r2, #24
    566c:	f100 8319 	bmi.w	5ca2 <usb_isr+0xa22>
    5670:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    5674:	4986      	ldr	r1, [pc, #536]	; (5890 <usb_isr+0x610>)
    5676:	0612      	lsls	r2, r2, #24
    5678:	f100 830d 	bmi.w	5c96 <usb_isr+0xa16>
    567c:	4885      	ldr	r0, [pc, #532]	; (5894 <usb_isr+0x614>)
    567e:	4a86      	ldr	r2, [pc, #536]	; (5898 <usb_isr+0x618>)
    5680:	4986      	ldr	r1, [pc, #536]	; (589c <usb_isr+0x61c>)
    5682:	9001      	str	r0, [sp, #4]
    5684:	4886      	ldr	r0, [pc, #536]	; (58a0 <usb_isr+0x620>)
    5686:	4d87      	ldr	r5, [pc, #540]	; (58a4 <usb_isr+0x624>)
    5688:	4c87      	ldr	r4, [pc, #540]	; (58a8 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    568a:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    568c:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    568e:	9605      	str	r6, [sp, #20]
    5690:	9502      	str	r5, [sp, #8]
    5692:	4680      	mov	r8, r0
    5694:	460f      	mov	r7, r1
    5696:	4616      	mov	r6, r2
    5698:	461d      	mov	r5, r3
    569a:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    569c:	6830      	ldr	r0, [r6, #0]
			while (p) {
    569e:	b128      	cbz	r0, 56ac <usb_isr+0x42c>
				n = p->next;
    56a0:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    56a2:	f000 fbe1 	bl	5e68 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    56a6:	4620      	mov	r0, r4
    56a8:	2c00      	cmp	r4, #0
    56aa:	d1f9      	bne.n	56a0 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    56ac:	2300      	movs	r3, #0
    56ae:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    56b0:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    56b2:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    56b4:	461a      	mov	r2, r3
    56b6:	2300      	movs	r3, #0
    56b8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    56bc:	b128      	cbz	r0, 56ca <usb_isr+0x44a>
				n = p->next;
    56be:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    56c0:	f000 fbd2 	bl	5e68 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    56c4:	4620      	mov	r0, r4
    56c6:	2c00      	cmp	r4, #0
    56c8:	d1f9      	bne.n	56be <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    56ca:	2200      	movs	r2, #0
    56cc:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    56ce:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    56d0:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    56d4:	4611      	mov	r1, r2
    56d6:	2200      	movs	r2, #0
    56d8:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    56dc:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    56de:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    56e0:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    56e2:	f04f 0100 	mov.w	r1, #0
    56e6:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    56ea:	2b03      	cmp	r3, #3
    56ec:	f200 812b 	bhi.w	5946 <usb_isr+0x6c6>
    56f0:	e8df f013 	tbh	[pc, r3, lsl #1]
    56f4:	01250170 	.word	0x01250170
    56f8:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    56fc:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5700:	bf18      	it	ne
    5702:	2200      	movne	r2, #0
    5704:	e6b5      	b.n	5472 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    5706:	4a69      	ldr	r2, [pc, #420]	; (58ac <usb_isr+0x62c>)
    5708:	780d      	ldrb	r5, [r1, #0]
    570a:	7848      	ldrb	r0, [r1, #1]
    570c:	7015      	strb	r5, [r2, #0]
    570e:	7050      	strb	r0, [r2, #1]
    5710:	788d      	ldrb	r5, [r1, #2]
    5712:	78c8      	ldrb	r0, [r1, #3]
    5714:	7095      	strb	r5, [r2, #2]
    5716:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5718:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    571a:	790d      	ldrb	r5, [r1, #4]
    571c:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    571e:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    5720:	794d      	ldrb	r5, [r1, #5]
    5722:	7989      	ldrb	r1, [r1, #6]
    5724:	7155      	strb	r5, [r2, #5]
    5726:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5728:	f000 819b 	beq.w	5a62 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    572c:	4960      	ldr	r1, [pc, #384]	; (58b0 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    572e:	4e61      	ldr	r6, [pc, #388]	; (58b4 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5730:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5732:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5734:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5738:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    573a:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    573e:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5740:	bf0c      	ite	eq
    5742:	2188      	moveq	r1, #136	; 0x88
    5744:	21c8      	movne	r1, #200	; 0xc8
    5746:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    574a:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    574e:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5752:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    5754:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5756:	6051      	str	r1, [r2, #4]
    5758:	e69e      	b.n	5498 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    575a:	f242 2021 	movw	r0, #8737	; 0x2221
    575e:	4281      	cmp	r1, r0
    5760:	f040 81cb 	bne.w	5afa <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    5764:	4b54      	ldr	r3, [pc, #336]	; (58b8 <usb_isr+0x638>)
    5766:	4c55      	ldr	r4, [pc, #340]	; (58bc <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    5768:	4955      	ldr	r1, [pc, #340]	; (58c0 <usb_isr+0x640>)
    576a:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    576c:	681d      	ldr	r5, [r3, #0]
    576e:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    5770:	f8cd e004 	str.w	lr, [sp, #4]
    5774:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    5776:	2000      	movs	r0, #0
    5778:	9002      	str	r0, [sp, #8]
    577a:	4680      	mov	r8, r0
    577c:	4684      	mov	ip, r0
    577e:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5780:	494b      	ldr	r1, [pc, #300]	; (58b0 <usb_isr+0x630>)
    5782:	780d      	ldrb	r5, [r1, #0]
    5784:	f045 0e02 	orr.w	lr, r5, #2
    5788:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    578c:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    578e:	9b01      	ldr	r3, [sp, #4]
    5790:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5792:	9b03      	ldr	r3, [sp, #12]
    5794:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5796:	bf0c      	ite	eq
    5798:	2488      	moveq	r4, #136	; 0x88
    579a:	24c8      	movne	r4, #200	; 0xc8
    579c:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    57a0:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    57a4:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    57a8:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    57aa:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    57ac:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 5890 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    57b0:	4b40      	ldr	r3, [pc, #256]	; (58b4 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    57b2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 58b0 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    57b6:	2800      	cmp	r0, #0
    57b8:	f040 811e 	bne.w	59f8 <usb_isr+0x778>
    57bc:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    57c0:	d11b      	bne.n	57fa <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    57c2:	f044 0c02 	orr.w	ip, r4, #2
    57c6:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    57ca:	9c02      	ldr	r4, [sp, #8]
    57cc:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 5890 <usb_isr+0x610>
    57d0:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    57d2:	2a00      	cmp	r2, #0
    57d4:	f040 8126 	bne.w	5a24 <usb_isr+0x7a4>
    57d8:	0402      	lsls	r2, r0, #16
    57da:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    57de:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    57e2:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    57e6:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    57e8:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    57ea:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    57ec:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    57ee:	2840      	cmp	r0, #64	; 0x40
    57f0:	d103      	bne.n	57fa <usb_isr+0x57a>
    57f2:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    57f4:	4a33      	ldr	r2, [pc, #204]	; (58c4 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    57f6:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    57f8:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    57fa:	4a33      	ldr	r2, [pc, #204]	; (58c8 <usb_isr+0x648>)
    57fc:	2301      	movs	r3, #1
    57fe:	7013      	strb	r3, [r2, #0]
    5800:	e64d      	b.n	549e <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    5802:	f000 fc9d 	bl	6140 <usb_serial_flush_callback>
    5806:	e5a5      	b.n	5354 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    5808:	4b21      	ldr	r3, [pc, #132]	; (5890 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    580a:	482f      	ldr	r0, [pc, #188]	; (58c8 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    580c:	4928      	ldr	r1, [pc, #160]	; (58b0 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    580e:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    5810:	f04f 0e02 	mov.w	lr, #2
    5814:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5818:	4f2c      	ldr	r7, [pc, #176]	; (58cc <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    581a:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    581c:	492c      	ldr	r1, [pc, #176]	; (58d0 <usb_isr+0x650>)
    581e:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    5820:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    5822:	4e2c      	ldr	r6, [pc, #176]	; (58d4 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    5824:	4d2c      	ldr	r5, [pc, #176]	; (58d8 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    5826:	4c2d      	ldr	r4, [pc, #180]	; (58dc <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    5828:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    582a:	210d      	movs	r1, #13
    582c:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    582e:	21ff      	movs	r1, #255	; 0xff
    5830:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    5832:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 58ec <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    5836:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    5838:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    583a:	4d29      	ldr	r5, [pc, #164]	; (58e0 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    583c:	4a29      	ldr	r2, [pc, #164]	; (58e4 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    583e:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    5842:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5844:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    5846:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    584a:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    584c:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    584e:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    5850:	b007      	add	sp, #28
    5852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    5856:	4a24      	ldr	r2, [pc, #144]	; (58e8 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    5858:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    585c:	7813      	ldrb	r3, [r2, #0]
    585e:	3301      	adds	r3, #1
    5860:	7013      	strb	r3, [r2, #0]
    5862:	e557      	b.n	5314 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    5864:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    5868:	4d0e      	ldr	r5, [pc, #56]	; (58a4 <usb_isr+0x624>)
    586a:	e53a      	b.n	52e2 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    586c:	5d8b      	ldrb	r3, [r1, r6]
    586e:	2b03      	cmp	r3, #3
    5870:	f200 80f0 	bhi.w	5a54 <usb_isr+0x7d4>
    5874:	a201      	add	r2, pc, #4	; (adr r2, 587c <usb_isr+0x5fc>)
    5876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    587a:	bf00      	nop
    587c:	00005315 	.word	0x00005315
    5880:	00005315 	.word	0x00005315
    5884:	00005939 	.word	0x00005939
    5888:	00005933 	.word	0x00005933
    588c:	1fff974c 	.word	0x1fff974c
    5890:	1fff8000 	.word	0x1fff8000
    5894:	1fff9728 	.word	0x1fff9728
    5898:	1fff96c4 	.word	0x1fff96c4
    589c:	1fff9718 	.word	0x1fff9718
    58a0:	1fff9750 	.word	0x1fff9750
    58a4:	1fff9670 	.word	0x1fff9670
    58a8:	1fff9914 	.word	0x1fff9914
    58ac:	1fff991c 	.word	0x1fff991c
    58b0:	1fff9740 	.word	0x1fff9740
    58b4:	1fff96d4 	.word	0x1fff96d4
    58b8:	1fff9668 	.word	0x1fff9668
    58bc:	1fff9924 	.word	0x1fff9924
    58c0:	1fff9764 	.word	0x1fff9764
    58c4:	1fff9680 	.word	0x1fff9680
    58c8:	40072094 	.word	0x40072094
    58cc:	400720c0 	.word	0x400720c0
    58d0:	00400088 	.word	0x00400088
    58d4:	40072088 	.word	0x40072088
    58d8:	40072080 	.word	0x40072080
    58dc:	40072098 	.word	0x40072098
    58e0:	1fff9684 	.word	0x1fff9684
    58e4:	1fff96d8 	.word	0x1fff96d8
    58e8:	1fff9741 	.word	0x1fff9741
    58ec:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    58f0:	49c1      	ldr	r1, [pc, #772]	; (5bf8 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    58f2:	4bc2      	ldr	r3, [pc, #776]	; (5bfc <usb_isr+0x97c>)
    58f4:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    58f6:	200d      	movs	r0, #13
    58f8:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    58fa:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    58fc:	07a2      	lsls	r2, r4, #30
    58fe:	f57f ae0e 	bpl.w	551e <usb_isr+0x29e>
    5902:	e605      	b.n	5510 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    5904:	f240 3202 	movw	r2, #770	; 0x302
    5908:	4291      	cmp	r1, r2
    590a:	f040 80ee 	bne.w	5aea <usb_isr+0x86a>
    590e:	88a9      	ldrh	r1, [r5, #4]
    5910:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5914:	2904      	cmp	r1, #4
    5916:	d868      	bhi.n	59ea <usb_isr+0x76a>
    5918:	886a      	ldrh	r2, [r5, #2]
    591a:	2a00      	cmp	r2, #0
    591c:	d165      	bne.n	59ea <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    591e:	48b6      	ldr	r0, [pc, #728]	; (5bf8 <usb_isr+0x978>)
    5920:	f8cd e004 	str.w	lr, [sp, #4]
    5924:	0089      	lsls	r1, r1, #2
    5926:	4408      	add	r0, r1
    5928:	7801      	ldrb	r1, [r0, #0]
    592a:	f041 0102 	orr.w	r1, r1, #2
    592e:	7001      	strb	r1, [r0, #0]
    5930:	e721      	b.n	5776 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5932:	2301      	movs	r3, #1
    5934:	558b      	strb	r3, [r1, r6]
						break;
    5936:	e4ed      	b.n	5314 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    5938:	2300      	movs	r3, #0
    593a:	558b      	strb	r3, [r1, r6]
						break;
    593c:	e4ea      	b.n	5314 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    593e:	f04f 0301 	mov.w	r3, #1
    5942:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    5946:	3501      	adds	r5, #1
    5948:	2d04      	cmp	r5, #4
    594a:	f106 0604 	add.w	r6, r6, #4
    594e:	f107 0704 	add.w	r7, r7, #4
    5952:	f108 0801 	add.w	r8, r8, #1
    5956:	f47f aea1 	bne.w	569c <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    595a:	4ca9      	ldr	r4, [pc, #676]	; (5c00 <usb_isr+0x980>)
			*reg = epconf;
    595c:	4ba9      	ldr	r3, [pc, #676]	; (5c04 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    595e:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    5960:	4da9      	ldr	r5, [pc, #676]	; (5c08 <usb_isr+0x988>)
    5962:	9f04      	ldr	r7, [sp, #16]
    5964:	9e05      	ldr	r6, [sp, #20]
    5966:	2100      	movs	r1, #0
    5968:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    596a:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    596c:	0713      	lsls	r3, r2, #28
    596e:	f100 8105 	bmi.w	5b7c <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    5972:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    5974:	49a5      	ldr	r1, [pc, #660]	; (5c0c <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    5976:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 5c18 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    597a:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    597c:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    597e:	f04f 0100 	mov.w	r1, #0
    5982:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    5986:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    598a:	f100 80e0 	bmi.w	5b4e <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    598e:	49a0      	ldr	r1, [pc, #640]	; (5c10 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    5990:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    5992:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    5994:	2100      	movs	r1, #0
    5996:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    599a:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    599e:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    59a0:	f8df 8274 	ldr.w	r8, [pc, #628]	; 5c18 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    59a4:	f100 8101 	bmi.w	5baa <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    59a8:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    59aa:	499a      	ldr	r1, [pc, #616]	; (5c14 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    59ac:	4c9a      	ldr	r4, [pc, #616]	; (5c18 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    59ae:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    59b0:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    59b2:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    59b4:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    59b8:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    59bc:	f100 80b0 	bmi.w	5b20 <usb_isr+0x8a0>
    59c0:	7833      	ldrb	r3, [r6, #0]
    59c2:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    59c4:	2100      	movs	r1, #0
    59c6:	f083 0201 	eor.w	r2, r3, #1
    59ca:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    59ce:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    59d2:	e6d0      	b.n	5776 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    59d4:	f04f 0300 	mov.w	r3, #0
    59d8:	f888 3000 	strb.w	r3, [r8]
    59dc:	e7b3      	b.n	5946 <usb_isr+0x6c6>
    59de:	88a9      	ldrh	r1, [r5, #4]
    59e0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    59e4:	2904      	cmp	r1, #4
    59e6:	f240 808d 	bls.w	5b04 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    59ea:	4a83      	ldr	r2, [pc, #524]	; (5bf8 <usb_isr+0x978>)
    59ec:	230f      	movs	r3, #15
    59ee:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    59f0:	4a8a      	ldr	r2, [pc, #552]	; (5c1c <usb_isr+0x99c>)
    59f2:	2301      	movs	r3, #1
    59f4:	7013      	strb	r3, [r2, #0]
    59f6:	e552      	b.n	549e <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    59f8:	2840      	cmp	r0, #64	; 0x40
    59fa:	f67f aee2 	bls.w	57c2 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    59fe:	f044 0402 	orr.w	r4, r4, #2
    5a02:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    5a06:	9e02      	ldr	r6, [sp, #8]
    5a08:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5a0a:	b1ba      	cbz	r2, 5a3c <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    5a0c:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5a10:	4a83      	ldr	r2, [pc, #524]	; (5c20 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    5a12:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5a14:	4633      	mov	r3, r6
    5a16:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5a18:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5a1c:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5a1e:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5a22:	e6e7      	b.n	57f4 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    5a24:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5a28:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5a2a:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5a2c:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5a2e:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5a30:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5a34:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5a36:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    5a3a:	e6d8      	b.n	57ee <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    5a3c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5a40:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5a42:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5a44:	4a77      	ldr	r2, [pc, #476]	; (5c24 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5a46:	f888 5000 	strb.w	r5, [r8]
    5a4a:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5a4c:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5a4e:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5a52:	e6cf      	b.n	57f4 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    5a54:	f019 0f08 	tst.w	r9, #8
    5a58:	bf0c      	ite	eq
    5a5a:	2302      	moveq	r3, #2
    5a5c:	2303      	movne	r3, #3
    5a5e:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    5a60:	e458      	b.n	5314 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5a62:	4a71      	ldr	r2, [pc, #452]	; (5c28 <usb_isr+0x9a8>)
    5a64:	210f      	movs	r1, #15
    5a66:	7011      	strb	r1, [r2, #0]
    5a68:	e660      	b.n	572c <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    5a6a:	4a70      	ldr	r2, [pc, #448]	; (5c2c <usb_isr+0x9ac>)
    5a6c:	6854      	ldr	r4, [r2, #4]
    5a6e:	2c00      	cmp	r4, #0
    5a70:	d0bb      	beq.n	59ea <usb_isr+0x76a>
    5a72:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    5a74:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    5a78:	e003      	b.n	5a82 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    5a7a:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    5a7c:	6854      	ldr	r4, [r2, #4]
    5a7e:	2c00      	cmp	r4, #0
    5a80:	d0b3      	beq.n	59ea <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    5a82:	8813      	ldrh	r3, [r2, #0]
    5a84:	4283      	cmp	r3, r0
    5a86:	d1f8      	bne.n	5a7a <usb_isr+0x7fa>
    5a88:	8853      	ldrh	r3, [r2, #2]
    5a8a:	4573      	cmp	r3, lr
    5a8c:	d1f5      	bne.n	5a7a <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    5a8e:	0a00      	lsrs	r0, r0, #8
    5a90:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    5a92:	bf0c      	ite	eq
    5a94:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    5a98:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    5a9c:	e003      	b.n	5aa6 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    5a9e:	4a64      	ldr	r2, [pc, #400]	; (5c30 <usb_isr+0x9b0>)
    5aa0:	4c64      	ldr	r4, [pc, #400]	; (5c34 <usb_isr+0x9b4>)
    5aa2:	7812      	ldrb	r2, [r2, #0]
    5aa4:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    5aa6:	88e8      	ldrh	r0, [r5, #6]
    5aa8:	4570      	cmp	r0, lr
    5aaa:	f080 813f 	bcs.w	5d2c <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5aae:	4962      	ldr	r1, [pc, #392]	; (5c38 <usb_isr+0x9b8>)
    5ab0:	780d      	ldrb	r5, [r1, #0]
    5ab2:	2840      	cmp	r0, #64	; 0x40
    5ab4:	4684      	mov	ip, r0
    5ab6:	f045 0e02 	orr.w	lr, r5, #2
    5aba:	bf28      	it	cs
    5abc:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    5ac0:	eb04 030c 	add.w	r3, r4, ip
    5ac4:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    5ac8:	9302      	str	r3, [sp, #8]
    5aca:	2301      	movs	r3, #1
    5acc:	6054      	str	r4, [r2, #4]
    5ace:	ebcc 0000 	rsb	r0, ip, r0
    5ad2:	ea4f 480c 	mov.w	r8, ip, lsl #16
    5ad6:	2200      	movs	r2, #0
    5ad8:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5ada:	24c8      	movs	r4, #200	; 0xc8
    5adc:	e65e      	b.n	579c <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5ade:	4c55      	ldr	r4, [pc, #340]	; (5c34 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    5ae0:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5ae4:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    5ae6:	7062      	strb	r2, [r4, #1]
    5ae8:	e7dd      	b.n	5aa6 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    5aea:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    5aee:	f47f af7c 	bne.w	59ea <usb_isr+0x76a>
    5af2:	2301      	movs	r3, #1
    5af4:	2200      	movs	r2, #0
    5af6:	9301      	str	r3, [sp, #4]
    5af8:	e63d      	b.n	5776 <usb_isr+0x4f6>
    5afa:	f242 3221 	movw	r2, #8993	; 0x2321
    5afe:	4291      	cmp	r1, r2
    5b00:	d0f7      	beq.n	5af2 <usb_isr+0x872>
    5b02:	e772      	b.n	59ea <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5b04:	886a      	ldrh	r2, [r5, #2]
    5b06:	2a00      	cmp	r2, #0
    5b08:	f47f af6f 	bne.w	59ea <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    5b0c:	483a      	ldr	r0, [pc, #232]	; (5bf8 <usb_isr+0x978>)
    5b0e:	f8cd e004 	str.w	lr, [sp, #4]
    5b12:	0089      	lsls	r1, r1, #2
    5b14:	4408      	add	r0, r1
    5b16:	7801      	ldrb	r1, [r0, #0]
    5b18:	f021 0102 	bic.w	r1, r1, #2
    5b1c:	7001      	strb	r1, [r0, #0]
    5b1e:	e62a      	b.n	5776 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5b20:	f000 f982 	bl	5e28 <usb_malloc>
				if (p) {
    5b24:	2800      	cmp	r0, #0
    5b26:	f000 80ef 	beq.w	5d08 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    5b2a:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5b2c:	4a3d      	ldr	r2, [pc, #244]	; (5c24 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5b2e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5b32:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5b36:	f000 f977 	bl	5e28 <usb_malloc>
				if (p) {
    5b3a:	2800      	cmp	r0, #0
    5b3c:	f000 80de 	beq.w	5cfc <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    5b40:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5b42:	4a37      	ldr	r2, [pc, #220]	; (5c20 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5b44:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5b48:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    5b4c:	e738      	b.n	59c0 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5b4e:	f000 f96b 	bl	5e28 <usb_malloc>
				if (p) {
    5b52:	2800      	cmp	r0, #0
    5b54:	f000 80c0 	beq.w	5cd8 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    5b58:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5b5a:	4a32      	ldr	r2, [pc, #200]	; (5c24 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5b5c:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5b60:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5b64:	f000 f960 	bl	5e28 <usb_malloc>
				if (p) {
    5b68:	2800      	cmp	r0, #0
    5b6a:	f000 80af 	beq.w	5ccc <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    5b6e:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5b70:	4a2b      	ldr	r2, [pc, #172]	; (5c20 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5b72:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5b76:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    5b7a:	e708      	b.n	598e <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5b7c:	f000 f954 	bl	5e28 <usb_malloc>
				if (p) {
    5b80:	2800      	cmp	r0, #0
    5b82:	f000 80cd 	beq.w	5d20 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    5b86:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5b88:	4a26      	ldr	r2, [pc, #152]	; (5c24 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5b8a:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5b8e:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5b92:	f000 f949 	bl	5e28 <usb_malloc>
				if (p) {
    5b96:	2800      	cmp	r0, #0
    5b98:	f000 80bc 	beq.w	5d14 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    5b9c:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5b9e:	4a20      	ldr	r2, [pc, #128]	; (5c20 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5ba0:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5ba4:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    5ba8:	e6e3      	b.n	5972 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5baa:	f000 f93d 	bl	5e28 <usb_malloc>
				if (p) {
    5bae:	2800      	cmp	r0, #0
    5bb0:	f000 809e 	beq.w	5cf0 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    5bb4:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5bb6:	4a1b      	ldr	r2, [pc, #108]	; (5c24 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5bb8:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5bbc:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5bc0:	f000 f932 	bl	5e28 <usb_malloc>
				if (p) {
    5bc4:	2800      	cmp	r0, #0
    5bc6:	f000 808d 	beq.w	5ce4 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    5bca:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5bcc:	4a14      	ldr	r2, [pc, #80]	; (5c20 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5bce:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5bd2:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    5bd6:	e6e7      	b.n	59a8 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    5bd8:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    5bda:	3808      	subs	r0, #8
    5bdc:	f000 f944 	bl	5e68 <usb_free>
    5be0:	e504      	b.n	55ec <usb_isr+0x36c>
    5be2:	6b48      	ldr	r0, [r1, #52]	; 0x34
    5be4:	3808      	subs	r0, #8
    5be6:	f000 f93f 	bl	5e68 <usb_free>
    5bea:	e4f9      	b.n	55e0 <usb_isr+0x360>
    5bec:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    5bee:	3808      	subs	r0, #8
    5bf0:	f000 f93a 	bl	5e68 <usb_free>
    5bf4:	e4ee      	b.n	55d4 <usb_isr+0x354>
    5bf6:	bf00      	nop
    5bf8:	400720c0 	.word	0x400720c0
    5bfc:	40072080 	.word	0x40072080
    5c00:	00008da4 	.word	0x00008da4
    5c04:	400720c4 	.word	0x400720c4
    5c08:	1fff9741 	.word	0x1fff9741
    5c0c:	400720c8 	.word	0x400720c8
    5c10:	400720cc 	.word	0x400720cc
    5c14:	400720d0 	.word	0x400720d0
    5c18:	1fff8000 	.word	0x1fff8000
    5c1c:	40072094 	.word	0x40072094
    5c20:	004000c8 	.word	0x004000c8
    5c24:	00400088 	.word	0x00400088
    5c28:	1fff96d5 	.word	0x1fff96d5
    5c2c:	00008da8 	.word	0x00008da8
    5c30:	1fff974c 	.word	0x1fff974c
    5c34:	1fff9744 	.word	0x1fff9744
    5c38:	1fff9740 	.word	0x1fff9740
    5c3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c3e:	3808      	subs	r0, #8
    5c40:	f000 f912 	bl	5e68 <usb_free>
    5c44:	e4c0      	b.n	55c8 <usb_isr+0x348>
    5c46:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    5c48:	3808      	subs	r0, #8
    5c4a:	f000 f90d 	bl	5e68 <usb_free>
    5c4e:	e4fd      	b.n	564c <usb_isr+0x3cc>
    5c50:	6f48      	ldr	r0, [r1, #116]	; 0x74
    5c52:	3808      	subs	r0, #8
    5c54:	f000 f908 	bl	5e68 <usb_free>
    5c58:	e4f2      	b.n	5640 <usb_isr+0x3c0>
    5c5a:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    5c5c:	3808      	subs	r0, #8
    5c5e:	f000 f903 	bl	5e68 <usb_free>
    5c62:	e4e7      	b.n	5634 <usb_isr+0x3b4>
    5c64:	6e48      	ldr	r0, [r1, #100]	; 0x64
    5c66:	3808      	subs	r0, #8
    5c68:	f000 f8fe 	bl	5e68 <usb_free>
    5c6c:	e4dc      	b.n	5628 <usb_isr+0x3a8>
    5c6e:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    5c70:	3808      	subs	r0, #8
    5c72:	f000 f8f9 	bl	5e68 <usb_free>
    5c76:	e4d1      	b.n	561c <usb_isr+0x39c>
    5c78:	6d48      	ldr	r0, [r1, #84]	; 0x54
    5c7a:	3808      	subs	r0, #8
    5c7c:	f000 f8f4 	bl	5e68 <usb_free>
    5c80:	e4c6      	b.n	5610 <usb_isr+0x390>
    5c82:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    5c84:	3808      	subs	r0, #8
    5c86:	f000 f8ef 	bl	5e68 <usb_free>
    5c8a:	e4bb      	b.n	5604 <usb_isr+0x384>
    5c8c:	6c48      	ldr	r0, [r1, #68]	; 0x44
    5c8e:	3808      	subs	r0, #8
    5c90:	f000 f8ea 	bl	5e68 <usb_free>
    5c94:	e4b0      	b.n	55f8 <usb_isr+0x378>
    5c96:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    5c9a:	3808      	subs	r0, #8
    5c9c:	f000 f8e4 	bl	5e68 <usb_free>
    5ca0:	e4ec      	b.n	567c <usb_isr+0x3fc>
    5ca2:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    5ca6:	3808      	subs	r0, #8
    5ca8:	f000 f8de 	bl	5e68 <usb_free>
    5cac:	e4e0      	b.n	5670 <usb_isr+0x3f0>
    5cae:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    5cb2:	3808      	subs	r0, #8
    5cb4:	f000 f8d8 	bl	5e68 <usb_free>
    5cb8:	e4d4      	b.n	5664 <usb_isr+0x3e4>
    5cba:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    5cbe:	3808      	subs	r0, #8
    5cc0:	f000 f8d2 	bl	5e68 <usb_free>
    5cc4:	e4c8      	b.n	5658 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    5cc6:	f04f 0e02 	mov.w	lr, #2
    5cca:	e6ec      	b.n	5aa6 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5ccc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5cce:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    5cd2:	3201      	adds	r2, #1
    5cd4:	702a      	strb	r2, [r5, #0]
    5cd6:	e65a      	b.n	598e <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5cd8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5cda:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    5cde:	3201      	adds	r2, #1
    5ce0:	702a      	strb	r2, [r5, #0]
    5ce2:	e73f      	b.n	5b64 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5ce4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5ce6:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    5cea:	3201      	adds	r2, #1
    5cec:	702a      	strb	r2, [r5, #0]
    5cee:	e65b      	b.n	59a8 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5cf0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5cf2:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    5cf6:	3201      	adds	r2, #1
    5cf8:	702a      	strb	r2, [r5, #0]
    5cfa:	e761      	b.n	5bc0 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5cfc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5cfe:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    5d02:	3201      	adds	r2, #1
    5d04:	702a      	strb	r2, [r5, #0]
    5d06:	e65b      	b.n	59c0 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5d08:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5d0a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    5d0e:	3201      	adds	r2, #1
    5d10:	702a      	strb	r2, [r5, #0]
    5d12:	e710      	b.n	5b36 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5d14:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5d16:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    5d1a:	3201      	adds	r2, #1
    5d1c:	702a      	strb	r2, [r5, #0]
    5d1e:	e628      	b.n	5972 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5d20:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5d22:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    5d26:	3201      	adds	r2, #1
    5d28:	702a      	strb	r2, [r5, #0]
    5d2a:	e732      	b.n	5b92 <usb_isr+0x912>
    5d2c:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5d30:	46f4      	mov	ip, lr
    5d32:	bf28      	it	cs
    5d34:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    5d38:	eb04 030c 	add.w	r3, r4, ip
    5d3c:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    5d3e:	2301      	movs	r3, #1
    5d40:	ebcc 000e 	rsb	r0, ip, lr
    5d44:	ea4f 480c 	mov.w	r8, ip, lsl #16
    5d48:	2200      	movs	r2, #0
    5d4a:	9301      	str	r3, [sp, #4]
    5d4c:	e518      	b.n	5780 <usb_isr+0x500>
    5d4e:	bf00      	nop

00005d50 <usb_init>:
}



void usb_init(void)
{
    5d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    5d52:	f000 fd9b 	bl	688c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d56:	4b29      	ldr	r3, [pc, #164]	; (5dfc <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5d58:	4829      	ldr	r0, [pc, #164]	; (5e00 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5d5a:	4c2a      	ldr	r4, [pc, #168]	; (5e04 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5d5c:	4f2a      	ldr	r7, [pc, #168]	; (5e08 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5d5e:	4d2b      	ldr	r5, [pc, #172]	; (5e0c <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5d60:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 5e20 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    5d64:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 5e24 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5d68:	4e29      	ldr	r6, [pc, #164]	; (5e10 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d6a:	2200      	movs	r2, #0
    5d6c:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    5d6e:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d70:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    5d72:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d74:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    5d76:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d78:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    5d7a:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d7c:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    5d7e:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d80:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    5d82:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d84:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    5d86:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d88:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    5d8a:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d8c:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    5d8e:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d90:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    5d92:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d94:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    5d96:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d98:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    5d9a:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5d9c:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    5d9e:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5da0:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    5da2:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5da4:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    5da6:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5da8:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    5daa:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5db0:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    5db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5db6:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    5dba:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5dbc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    5dc0:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5dc2:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5dc6:	4913      	ldr	r1, [pc, #76]	; (5e14 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5dc8:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5dca:	0e1b      	lsrs	r3, r3, #24
    5dcc:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5dce:	23ff      	movs	r3, #255	; 0xff
    5dd0:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5dd4:	4d10      	ldr	r5, [pc, #64]	; (5e18 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    5dd6:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5dda:	4810      	ldr	r0, [pc, #64]	; (5e1c <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5ddc:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5dde:	2301      	movs	r3, #1
    5de0:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    5de2:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5de6:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5de8:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5dec:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5dee:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5df2:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5df4:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5df6:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    5dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dfc:	1fff8000 	.word	0x1fff8000
    5e00:	40048034 	.word	0x40048034
    5e04:	4007209c 	.word	0x4007209c
    5e08:	400720b0 	.word	0x400720b0
    5e0c:	400720b4 	.word	0x400720b4
    5e10:	40072094 	.word	0x40072094
    5e14:	40072010 	.word	0x40072010
    5e18:	e000e449 	.word	0xe000e449
    5e1c:	e000e108 	.word	0xe000e108
    5e20:	40072080 	.word	0x40072080
    5e24:	40072088 	.word	0x40072088

00005e28 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    5e28:	b672      	cpsid	i
	avail = usb_buffer_available;
    5e2a:	480d      	ldr	r0, [pc, #52]	; (5e60 <usb_malloc+0x38>)
    5e2c:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    5e2e:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    5e32:	2b0b      	cmp	r3, #11
    5e34:	dc10      	bgt.n	5e58 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    5e36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5e3a:	40d9      	lsrs	r1, r3
    5e3c:	ea22 0201 	bic.w	r2, r2, r1
    5e40:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5e42:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    5e44:	4807      	ldr	r0, [pc, #28]	; (5e64 <usb_malloc+0x3c>)
    5e46:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    5e4a:	00db      	lsls	r3, r3, #3
    5e4c:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    5e4e:	2100      	movs	r1, #0
    5e50:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    5e52:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    5e54:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    5e56:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    5e58:	b662      	cpsie	i
		return NULL;
    5e5a:	2000      	movs	r0, #0
    5e5c:	4770      	bx	lr
    5e5e:	bf00      	nop
    5e60:	1fff8788 	.word	0x1fff8788
    5e64:	1fff83bc 	.word	0x1fff83bc

00005e68 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    5e68:	4b0d      	ldr	r3, [pc, #52]	; (5ea0 <usb_free+0x38>)
    5e6a:	4a0e      	ldr	r2, [pc, #56]	; (5ea4 <usb_free+0x3c>)
    5e6c:	1ac3      	subs	r3, r0, r3
    5e6e:	fba2 2303 	umull	r2, r3, r2, r3
    5e72:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    5e74:	2b0b      	cmp	r3, #11
    5e76:	d80c      	bhi.n	5e92 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    5e78:	4a0b      	ldr	r2, [pc, #44]	; (5ea8 <usb_free+0x40>)
    5e7a:	7812      	ldrb	r2, [r2, #0]
    5e7c:	b952      	cbnz	r2, 5e94 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    5e7e:	b672      	cpsid	i
	usb_buffer_available |= mask;
    5e80:	480a      	ldr	r0, [pc, #40]	; (5eac <usb_free+0x44>)
    5e82:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5e86:	6802      	ldr	r2, [r0, #0]
    5e88:	fa21 f303 	lsr.w	r3, r1, r3
    5e8c:	431a      	orrs	r2, r3
    5e8e:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5e90:	b662      	cpsie	i
    5e92:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    5e94:	4a06      	ldr	r2, [pc, #24]	; (5eb0 <usb_free+0x48>)
    5e96:	7812      	ldrb	r2, [r2, #0]
    5e98:	2a00      	cmp	r2, #0
    5e9a:	d0f0      	beq.n	5e7e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    5e9c:	f7ff b94a 	b.w	5134 <usb_rx_memory>
    5ea0:	1fff83bc 	.word	0x1fff83bc
    5ea4:	38e38e39 	.word	0x38e38e39
    5ea8:	1fff9741 	.word	0x1fff9741
    5eac:	1fff8788 	.word	0x1fff8788
    5eb0:	1fff974c 	.word	0x1fff974c

00005eb4 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    5eb4:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    5eb6:	4d0f      	ldr	r5, [pc, #60]	; (5ef4 <usb_serial_getchar+0x40>)
    5eb8:	6828      	ldr	r0, [r5, #0]
    5eba:	b178      	cbz	r0, 5edc <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    5ebc:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    5ebe:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    5ec0:	18c1      	adds	r1, r0, r3
    5ec2:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    5ec4:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    5ec6:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    5ec8:	d202      	bcs.n	5ed0 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    5eca:	8043      	strh	r3, [r0, #2]
	}
	return c;
    5ecc:	4620      	mov	r0, r4
}
    5ece:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    5ed0:	f7ff ffca 	bl	5e68 <usb_free>
		rx_packet = NULL;
    5ed4:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    5ed6:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5ed8:	602b      	str	r3, [r5, #0]
    5eda:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5edc:	4b06      	ldr	r3, [pc, #24]	; (5ef8 <usb_serial_getchar+0x44>)
    5ede:	781b      	ldrb	r3, [r3, #0]
    5ee0:	b12b      	cbz	r3, 5eee <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5ee2:	2003      	movs	r0, #3
    5ee4:	f7ff f8f2 	bl	50cc <usb_rx>
    5ee8:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    5eea:	2800      	cmp	r0, #0
    5eec:	d1e6      	bne.n	5ebc <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5eee:	f04f 30ff 	mov.w	r0, #4294967295
    5ef2:	bd38      	pop	{r3, r4, r5, pc}
    5ef4:	1fff9760 	.word	0x1fff9760
    5ef8:	1fff974c 	.word	0x1fff974c

00005efc <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    5efc:	b510      	push	{r4, lr}
	if (!rx_packet) {
    5efe:	4c09      	ldr	r4, [pc, #36]	; (5f24 <usb_serial_peekchar+0x28>)
    5f00:	6820      	ldr	r0, [r4, #0]
    5f02:	b118      	cbz	r0, 5f0c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    5f04:	8843      	ldrh	r3, [r0, #2]
    5f06:	4418      	add	r0, r3
    5f08:	7a00      	ldrb	r0, [r0, #8]
}
    5f0a:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5f0c:	4b06      	ldr	r3, [pc, #24]	; (5f28 <usb_serial_peekchar+0x2c>)
    5f0e:	781b      	ldrb	r3, [r3, #0]
    5f10:	b12b      	cbz	r3, 5f1e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5f12:	2003      	movs	r0, #3
    5f14:	f7ff f8da 	bl	50cc <usb_rx>
    5f18:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    5f1a:	2800      	cmp	r0, #0
    5f1c:	d1f2      	bne.n	5f04 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5f1e:	f04f 30ff 	mov.w	r0, #4294967295
    5f22:	bd10      	pop	{r4, pc}
    5f24:	1fff9760 	.word	0x1fff9760
    5f28:	1fff974c 	.word	0x1fff974c

00005f2c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5f2c:	4b04      	ldr	r3, [pc, #16]	; (5f40 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    5f2e:	4a05      	ldr	r2, [pc, #20]	; (5f44 <usb_serial_available+0x18>)
    5f30:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    5f32:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5f34:	b11b      	cbz	r3, 5f3e <usb_serial_available+0x12>
    5f36:	881a      	ldrh	r2, [r3, #0]
    5f38:	885b      	ldrh	r3, [r3, #2]
    5f3a:	1ad3      	subs	r3, r2, r3
    5f3c:	4418      	add	r0, r3
	return count;
}
    5f3e:	4770      	bx	lr
    5f40:	1fff9760 	.word	0x1fff9760
    5f44:	1fff9914 	.word	0x1fff9914

00005f48 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    5f48:	4b0b      	ldr	r3, [pc, #44]	; (5f78 <usb_serial_flush_input+0x30>)
    5f4a:	781b      	ldrb	r3, [r3, #0]
    5f4c:	b19b      	cbz	r3, 5f76 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    5f4e:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    5f50:	4c0a      	ldr	r4, [pc, #40]	; (5f7c <usb_serial_flush_input+0x34>)
    5f52:	6820      	ldr	r0, [r4, #0]
    5f54:	b148      	cbz	r0, 5f6a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    5f56:	f7ff ff87 	bl	5e68 <usb_free>
		rx_packet = NULL;
    5f5a:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5f5c:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5f5e:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5f60:	f7ff f8b4 	bl	50cc <usb_rx>
		if (!rx) break;
    5f64:	b130      	cbz	r0, 5f74 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    5f66:	f7ff ff7f 	bl	5e68 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5f6a:	2003      	movs	r0, #3
    5f6c:	f7ff f8ae 	bl	50cc <usb_rx>
		if (!rx) break;
    5f70:	2800      	cmp	r0, #0
    5f72:	d1f8      	bne.n	5f66 <usb_serial_flush_input+0x1e>
    5f74:	bd10      	pop	{r4, pc}
    5f76:	4770      	bx	lr
    5f78:	1fff974c 	.word	0x1fff974c
    5f7c:	1fff9760 	.word	0x1fff9760

00005f80 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5f84:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 6080 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5f88:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5f8a:	2201      	movs	r2, #1
    5f8c:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    5f90:	9101      	str	r1, [sp, #4]
    5f92:	b369      	cbz	r1, 5ff0 <usb_serial_write+0x70>
    5f94:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 6084 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5f98:	4f36      	ldr	r7, [pc, #216]	; (6074 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5f9a:	9e01      	ldr	r6, [sp, #4]
    5f9c:	4683      	mov	fp, r0
		if (!tx_packet) {
    5f9e:	f8d8 0000 	ldr.w	r0, [r8]
    5fa2:	b3b0      	cbz	r0, 6012 <usb_serial_write+0x92>
    5fa4:	4d34      	ldr	r5, [pc, #208]	; (6078 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    5fa6:	8844      	ldrh	r4, [r0, #2]
    5fa8:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    5fac:	42b1      	cmp	r1, r6
    5fae:	bf28      	it	cs
    5fb0:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5fb2:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5fb6:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5fb8:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5fbc:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    5fbe:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5fc0:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    5fc4:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    5fc8:	b151      	cbz	r1, 5fe0 <usb_serial_write+0x60>
    5fca:	3c01      	subs	r4, #1
    5fcc:	4422      	add	r2, r4
    5fce:	4459      	add	r1, fp
    5fd0:	f81b 4b01 	ldrb.w	r4, [fp], #1
    5fd4:	f802 4f01 	strb.w	r4, [r2, #1]!
    5fd8:	458b      	cmp	fp, r1
    5fda:	d1f9      	bne.n	5fd0 <usb_serial_write+0x50>
    5fdc:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    5fe0:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    5fe4:	d80b      	bhi.n	5ffe <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    5fe6:	4a25      	ldr	r2, [pc, #148]	; (607c <usb_serial_write+0xfc>)
    5fe8:	2105      	movs	r1, #5
    5fea:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5fec:	2e00      	cmp	r6, #0
    5fee:	d1d6      	bne.n	5f9e <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    5ff0:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    5ff2:	2300      	movs	r3, #0
    5ff4:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    5ff8:	b003      	add	sp, #12
    5ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    5ffe:	2240      	movs	r2, #64	; 0x40
    6000:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    6002:	4601      	mov	r1, r0
    6004:	2004      	movs	r0, #4
    6006:	f7ff f8f9 	bl	51fc <usb_tx>
			tx_packet = NULL;
    600a:	2200      	movs	r2, #0
    600c:	f8c8 2000 	str.w	r2, [r8]
    6010:	e7e9      	b.n	5fe6 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    6012:	783a      	ldrb	r2, [r7, #0]
    6014:	b32a      	cbz	r2, 6062 <usb_serial_write+0xe2>
    6016:	4d18      	ldr	r5, [pc, #96]	; (6078 <usb_serial_write+0xf8>)
    6018:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    601c:	f04f 0a01 	mov.w	sl, #1
    6020:	e007      	b.n	6032 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    6022:	3c01      	subs	r4, #1
    6024:	d016      	beq.n	6054 <usb_serial_write+0xd4>
    6026:	782a      	ldrb	r2, [r5, #0]
    6028:	b9a2      	cbnz	r2, 6054 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    602a:	f000 fa13 	bl	6454 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    602e:	783a      	ldrb	r2, [r7, #0]
    6030:	b1ba      	cbz	r2, 6062 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    6032:	2004      	movs	r0, #4
    6034:	f7ff f868 	bl	5108 <usb_tx_packet_count>
    6038:	2807      	cmp	r0, #7
    603a:	d8f2      	bhi.n	6022 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    603c:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    6040:	f7ff fef2 	bl	5e28 <usb_malloc>
    6044:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    6048:	2800      	cmp	r0, #0
    604a:	d1ac      	bne.n	5fa6 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    604c:	4b0c      	ldr	r3, [pc, #48]	; (6080 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    604e:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    6050:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    6052:	d1e8      	bne.n	6026 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    6054:	2301      	movs	r3, #1
					return -1;
    6056:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    605a:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    605c:	b003      	add	sp, #12
    605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    6062:	2300      	movs	r3, #0
					return -1;
    6064:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    6068:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    606c:	b003      	add	sp, #12
    606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6072:	bf00      	nop
    6074:	1fff974c 	.word	0x1fff974c
    6078:	1fff975c 	.word	0x1fff975c
    607c:	1fff9754 	.word	0x1fff9754
    6080:	1fff9755 	.word	0x1fff9755
    6084:	1fff9758 	.word	0x1fff9758

00006088 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    6088:	b500      	push	{lr}
    608a:	b083      	sub	sp, #12
    608c:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    608e:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    6090:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    6094:	4618      	mov	r0, r3
    6096:	f7ff ff73 	bl	5f80 <usb_serial_write>
}
    609a:	b003      	add	sp, #12
    609c:	f85d fb04 	ldr.w	pc, [sp], #4

000060a0 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    60a0:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    60a2:	4d0e      	ldr	r5, [pc, #56]	; (60dc <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    60a4:	4c0e      	ldr	r4, [pc, #56]	; (60e0 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    60a6:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    60a8:	2301      	movs	r3, #1
    60aa:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    60ac:	b128      	cbz	r0, 60ba <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    60ae:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    60b0:	2300      	movs	r3, #0
    60b2:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    60b4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    60b8:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    60ba:	4b0a      	ldr	r3, [pc, #40]	; (60e4 <usb_serial_write_buffer_free+0x44>)
    60bc:	781b      	ldrb	r3, [r3, #0]
    60be:	b913      	cbnz	r3, 60c6 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    60c0:	2000      	movs	r0, #0
    60c2:	7020      	strb	r0, [r4, #0]
			return 0;
    60c4:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    60c6:	2004      	movs	r0, #4
    60c8:	f7ff f81e 	bl	5108 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    60cc:	2807      	cmp	r0, #7
    60ce:	d8f7      	bhi.n	60c0 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    60d0:	f7ff feaa 	bl	5e28 <usb_malloc>
    60d4:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    60d6:	2800      	cmp	r0, #0
    60d8:	d1e9      	bne.n	60ae <usb_serial_write_buffer_free+0xe>
    60da:	e7f1      	b.n	60c0 <usb_serial_write_buffer_free+0x20>
    60dc:	1fff9758 	.word	0x1fff9758
    60e0:	1fff9755 	.word	0x1fff9755
    60e4:	1fff974c 	.word	0x1fff974c

000060e8 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    60e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    60ea:	4b11      	ldr	r3, [pc, #68]	; (6130 <usb_serial_flush_output+0x48>)
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	b18b      	cbz	r3, 6114 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    60f0:	4e10      	ldr	r6, [pc, #64]	; (6134 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    60f2:	4d11      	ldr	r5, [pc, #68]	; (6138 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    60f4:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    60f6:	2701      	movs	r7, #1
    60f8:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    60fa:	b164      	cbz	r4, 6116 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    60fc:	4a0f      	ldr	r2, [pc, #60]	; (613c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    60fe:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    6100:	2700      	movs	r7, #0
    6102:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    6104:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    6106:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    6108:	2004      	movs	r0, #4
    610a:	f7ff f877 	bl	51fc <usb_tx>
		tx_packet = NULL;
    610e:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    6110:	2300      	movs	r3, #0
    6112:	702b      	strb	r3, [r5, #0]
    6114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    6116:	f7ff fe87 	bl	5e28 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    611a:	4b08      	ldr	r3, [pc, #32]	; (613c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    611c:	b128      	cbz	r0, 612a <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    611e:	4601      	mov	r1, r0
    6120:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    6122:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    6124:	f7ff f86a 	bl	51fc <usb_tx>
    6128:	e7f2      	b.n	6110 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    612a:	701f      	strb	r7, [r3, #0]
    612c:	e7f0      	b.n	6110 <usb_serial_flush_output+0x28>
    612e:	bf00      	nop
    6130:	1fff974c 	.word	0x1fff974c
    6134:	1fff9758 	.word	0x1fff9758
    6138:	1fff9755 	.word	0x1fff9755
    613c:	1fff9754 	.word	0x1fff9754

00006140 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    6140:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    6142:	4b0e      	ldr	r3, [pc, #56]	; (617c <usb_serial_flush_callback+0x3c>)
    6144:	781b      	ldrb	r3, [r3, #0]
    6146:	b973      	cbnz	r3, 6166 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    6148:	4c0d      	ldr	r4, [pc, #52]	; (6180 <usb_serial_flush_callback+0x40>)
    614a:	6821      	ldr	r1, [r4, #0]
    614c:	b161      	cbz	r1, 6168 <usb_serial_flush_callback+0x28>
    614e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    6152:	884b      	ldrh	r3, [r1, #2]
    6154:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    6156:	2004      	movs	r0, #4
    6158:	f7ff f850 	bl	51fc <usb_tx>
		tx_packet = NULL;
    615c:	6025      	str	r5, [r4, #0]
    615e:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    6160:	4b08      	ldr	r3, [pc, #32]	; (6184 <usb_serial_flush_callback+0x44>)
    6162:	2201      	movs	r2, #1
    6164:	701a      	strb	r2, [r3, #0]
    6166:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    6168:	f7ff fe5e 	bl	5e28 <usb_malloc>
		if (tx) {
    616c:	2800      	cmp	r0, #0
    616e:	d0f7      	beq.n	6160 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    6170:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    6172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    6176:	2004      	movs	r0, #4
    6178:	f7ff b840 	b.w	51fc <usb_tx>
    617c:	1fff9755 	.word	0x1fff9755
    6180:	1fff9758 	.word	0x1fff9758
    6184:	1fff9754 	.word	0x1fff9754

00006188 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    6188:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    618a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    618e:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    6190:	7f43      	ldrb	r3, [r0, #29]
    6192:	b933      	cbnz	r3, 61a2 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    6194:	7f01      	ldrb	r1, [r0, #28]
    6196:	2901      	cmp	r1, #1
    6198:	d007      	beq.n	61aa <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    619a:	2903      	cmp	r1, #3
    619c:	d00f      	beq.n	61be <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    619e:	2301      	movs	r3, #1
    61a0:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    61a2:	b902      	cbnz	r2, 61a6 <EventResponder::triggerEventNotImmediate()+0x1e>
    61a4:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    61a6:	bc10      	pop	{r4}
    61a8:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    61aa:	4c12      	ldr	r4, [pc, #72]	; (61f4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    61ac:	6821      	ldr	r1, [r4, #0]
    61ae:	b1a1      	cbz	r1, 61da <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    61b0:	4911      	ldr	r1, [pc, #68]	; (61f8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    61b2:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    61b4:	680b      	ldr	r3, [r1, #0]
    61b6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    61b8:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    61ba:	6158      	str	r0, [r3, #20]
    61bc:	e7ef      	b.n	619e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    61be:	4c0f      	ldr	r4, [pc, #60]	; (61fc <EventResponder::triggerEventNotImmediate()+0x74>)
    61c0:	6821      	ldr	r1, [r4, #0]
    61c2:	b181      	cbz	r1, 61e6 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    61c4:	490e      	ldr	r1, [pc, #56]	; (6200 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    61c6:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    61c8:	680b      	ldr	r3, [r1, #0]
    61ca:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    61cc:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    61ce:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    61d0:	4b0c      	ldr	r3, [pc, #48]	; (6204 <EventResponder::triggerEventNotImmediate()+0x7c>)
    61d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    61d6:	6019      	str	r1, [r3, #0]
    61d8:	e7e1      	b.n	619e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    61da:	4b07      	ldr	r3, [pc, #28]	; (61f8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    61dc:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    61de:	6181      	str	r1, [r0, #24]
				firstYield = this;
    61e0:	6020      	str	r0, [r4, #0]
				lastYield = this;
    61e2:	6018      	str	r0, [r3, #0]
    61e4:	e7db      	b.n	619e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    61e6:	4b06      	ldr	r3, [pc, #24]	; (6200 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    61e8:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    61ea:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    61ec:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    61ee:	6018      	str	r0, [r3, #0]
    61f0:	e7ee      	b.n	61d0 <EventResponder::triggerEventNotImmediate()+0x48>
    61f2:	bf00      	nop
    61f4:	1fff9778 	.word	0x1fff9778
    61f8:	1fff9774 	.word	0x1fff9774
    61fc:	1fff9768 	.word	0x1fff9768
    6200:	1fff976c 	.word	0x1fff976c
    6204:	e000ed04 	.word	0xe000ed04

00006208 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    6208:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    620a:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    620c:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    620e:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6210:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6212:	d002      	beq.n	621a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    6214:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    6216:	f7ff bfb7 	b.w	6188 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    621a:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    621c:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    621e:	4718      	bx	r3

00006220 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    6220:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6222:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    6226:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    6228:	4c0c      	ldr	r4, [pc, #48]	; (625c <EventResponder::runFromInterrupt()+0x3c>)
    622a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    622c:	b180      	cbz	r0, 6250 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    622e:	4e0c      	ldr	r6, [pc, #48]	; (6260 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    6230:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    6232:	6943      	ldr	r3, [r0, #20]
    6234:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    6236:	b173      	cbz	r3, 6256 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    6238:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    623a:	b902      	cbnz	r2, 623e <EventResponder::runFromInterrupt()+0x1e>
    623c:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    623e:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    6240:	6883      	ldr	r3, [r0, #8]
    6242:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6244:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    6248:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    624a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    624c:	2800      	cmp	r0, #0
    624e:	d1f0      	bne.n	6232 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6250:	b902      	cbnz	r2, 6254 <EventResponder::runFromInterrupt()+0x34>
    6252:	b662      	cpsie	i
    6254:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    6256:	6033      	str	r3, [r6, #0]
    6258:	e7ef      	b.n	623a <EventResponder::runFromInterrupt()+0x1a>
    625a:	bf00      	nop
    625c:	1fff9768 	.word	0x1fff9768
    6260:	1fff976c 	.word	0x1fff976c

00006264 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    6264:	f7ff bfdc 	b.w	6220 <EventResponder::runFromInterrupt()>

00006268 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    6268:	4a18      	ldr	r2, [pc, #96]	; (62cc <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    626a:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    626c:	6814      	ldr	r4, [r2, #0]
    626e:	2c00      	cmp	r4, #0
    6270:	d027      	beq.n	62c2 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    6272:	6803      	ldr	r3, [r0, #0]
    6274:	6821      	ldr	r1, [r4, #0]
    6276:	428b      	cmp	r3, r1
    6278:	d20e      	bcs.n	6298 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    627a:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    627c:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    627e:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    6280:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    6282:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    6284:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    6286:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    6288:	2302      	movs	r3, #2
    628a:	7503      	strb	r3, [r0, #20]
}
    628c:	bc30      	pop	{r4, r5}
    628e:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    6290:	6811      	ldr	r1, [r2, #0]
    6292:	428b      	cmp	r3, r1
    6294:	4614      	mov	r4, r2
    6296:	d308      	bcc.n	62aa <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    6298:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    629a:	1a5b      	subs	r3, r3, r1
    629c:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    629e:	2a00      	cmp	r2, #0
    62a0:	d1f6      	bne.n	6290 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    62a2:	6082      	str	r2, [r0, #8]
		_prev = timer;
    62a4:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    62a6:	60a0      	str	r0, [r4, #8]
    62a8:	e7ee      	b.n	6288 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    62aa:	68d2      	ldr	r2, [r2, #12]
    62ac:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    62ae:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    62b0:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    62b2:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    62b4:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    62b6:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    62b8:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    62ba:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    62bc:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    62be:	bc30      	pop	{r4, r5}
    62c0:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    62c2:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    62c4:	60c4      	str	r4, [r0, #12]
		listActive = this;
    62c6:	6010      	str	r0, [r2, #0]
    62c8:	e7de      	b.n	6288 <MillisTimer::addToActiveList()+0x20>
    62ca:	bf00      	nop
    62cc:	1fff9770 	.word	0x1fff9770

000062d0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    62d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    62d2:	4e22      	ldr	r6, [pc, #136]	; (635c <MillisTimer::runFromTimer()+0x8c>)
    62d4:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    62d6:	b32c      	cbz	r4, 6324 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    62d8:	6823      	ldr	r3, [r4, #0]
    62da:	2b00      	cmp	r3, #0
    62dc:	d13a      	bne.n	6354 <MillisTimer::runFromTimer()+0x84>
    62de:	4f20      	ldr	r7, [pc, #128]	; (6360 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    62e0:	461d      	mov	r5, r3
    62e2:	e004      	b.n	62ee <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    62e4:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    62e6:	b1ec      	cbz	r4, 6324 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    62e8:	6823      	ldr	r3, [r4, #0]
    62ea:	2b00      	cmp	r3, #0
    62ec:	d132      	bne.n	6354 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    62ee:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    62f0:	b103      	cbz	r3, 62f4 <MillisTimer::runFromTimer()+0x24>
    62f2:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    62f4:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    62f6:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    62f8:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    62fa:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    62fc:	681b      	ldr	r3, [r3, #0]
    62fe:	42bb      	cmp	r3, r7
    6300:	d121      	bne.n	6346 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6302:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    6304:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    6306:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6308:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    630a:	d020      	beq.n	634e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    630c:	f7ff ff3c 	bl	6188 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    6310:	6863      	ldr	r3, [r4, #4]
    6312:	2b00      	cmp	r3, #0
    6314:	d0e6      	beq.n	62e4 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    6316:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    6318:	4620      	mov	r0, r4
    631a:	f7ff ffa5 	bl	6268 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    631e:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    6320:	2c00      	cmp	r4, #0
    6322:	d1e1      	bne.n	62e8 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6324:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    6328:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    632a:	4a0e      	ldr	r2, [pc, #56]	; (6364 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    632c:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    632e:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    6330:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    6332:	b903      	cbnz	r3, 6336 <MillisTimer::runFromTimer()+0x66>
    6334:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    6336:	b128      	cbz	r0, 6344 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    6338:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    633a:	f7ff ff95 	bl	6268 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    633e:	4620      	mov	r0, r4
    6340:	2800      	cmp	r0, #0
    6342:	d1f9      	bne.n	6338 <MillisTimer::runFromTimer()+0x68>
    6344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    6346:	4622      	mov	r2, r4
    6348:	2100      	movs	r1, #0
    634a:	4798      	blx	r3
    634c:	e7e0      	b.n	6310 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    634e:	6883      	ldr	r3, [r0, #8]
    6350:	4798      	blx	r3
    6352:	e7dd      	b.n	6310 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    6354:	3b01      	subs	r3, #1
    6356:	6023      	str	r3, [r4, #0]
			break;
    6358:	e7e4      	b.n	6324 <MillisTimer::runFromTimer()+0x54>
    635a:	bf00      	nop
    635c:	1fff9770 	.word	0x1fff9770
    6360:	00006209 	.word	0x00006209
    6364:	1fff9780 	.word	0x1fff9780

00006368 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    6368:	4a02      	ldr	r2, [pc, #8]	; (6374 <systick_isr+0xc>)
    636a:	6813      	ldr	r3, [r2, #0]
    636c:	3301      	adds	r3, #1
    636e:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    6370:	f7ff bfae 	b.w	62d0 <MillisTimer::runFromTimer()>
    6374:	1fff9668 	.word	0x1fff9668

00006378 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    6378:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    637a:	f7fd f9f5 	bl	3768 <setup>
	while (1) {
		loop();
    637e:	f7fd fb07 	bl	3990 <loop>
		yield();
    6382:	f000 f867 	bl	6454 <yield>
    6386:	e7fa      	b.n	637e <main+0x6>

00006388 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    6388:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    638a:	4a06      	ldr	r2, [pc, #24]	; (63a4 <Print::println()+0x1c>)
	return write(buf, 2);
    638c:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    638e:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    6390:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    6392:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    6394:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    6396:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    639a:	2202      	movs	r2, #2
    639c:	4798      	blx	r3
}
    639e:	b003      	add	sp, #12
    63a0:	f85d fb04 	ldr.w	pc, [sp], #4
    63a4:	00008d78 	.word	0x00008d78

000063a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    63a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63aa:	4607      	mov	r7, r0
    63ac:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    63ae:	2a00      	cmp	r2, #0
    63b0:	d033      	beq.n	641a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    63b2:	2a01      	cmp	r2, #1
    63b4:	bf08      	it	eq
    63b6:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    63b8:	b351      	cbz	r1, 6410 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    63ba:	2421      	movs	r4, #33	; 0x21
    63bc:	e000      	b.n	63c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    63be:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    63c0:	fbb1 f5f2 	udiv	r5, r1, r2
    63c4:	fb02 1115 	mls	r1, r2, r5, r1
    63c8:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    63ca:	2909      	cmp	r1, #9
    63cc:	f100 0130 	add.w	r1, r0, #48	; 0x30
    63d0:	bf98      	it	ls
    63d2:	b2c8      	uxtbls	r0, r1
    63d4:	a90a      	add	r1, sp, #40	; 0x28
    63d6:	bf88      	it	hi
    63d8:	3037      	addhi	r0, #55	; 0x37
    63da:	4421      	add	r1, r4
    63dc:	bf88      	it	hi
    63de:	b2c0      	uxtbhi	r0, r0
    63e0:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    63e4:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    63e6:	4629      	mov	r1, r5
    63e8:	2d00      	cmp	r5, #0
    63ea:	d1e8      	bne.n	63be <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    63ec:	b133      	cbz	r3, 63fc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    63ee:	3c01      	subs	r4, #1
    63f0:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    63f2:	ab0a      	add	r3, sp, #40	; 0x28
    63f4:	4423      	add	r3, r4
    63f6:	222d      	movs	r2, #45	; 0x2d
    63f8:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    63fc:	683b      	ldr	r3, [r7, #0]
    63fe:	aa01      	add	r2, sp, #4
    6400:	1911      	adds	r1, r2, r4
    6402:	685b      	ldr	r3, [r3, #4]
    6404:	4638      	mov	r0, r7
    6406:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    640a:	4798      	blx	r3
}
    640c:	b00b      	add	sp, #44	; 0x2c
    640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    6410:	2230      	movs	r2, #48	; 0x30
    6412:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    6416:	2421      	movs	r4, #33	; 0x21
    6418:	e7e8      	b.n	63ec <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    641a:	6803      	ldr	r3, [r0, #0]
    641c:	b2c9      	uxtb	r1, r1
    641e:	681b      	ldr	r3, [r3, #0]
    6420:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    6422:	b00b      	add	sp, #44	; 0x2c
    6424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6426:	bf00      	nop

00006428 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    6428:	f7ff bd8e 	b.w	5f48 <usb_serial_flush_input>

0000642c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    642c:	f7ff bd66 	b.w	5efc <usb_serial_peekchar>

00006430 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    6430:	f7ff bd40 	b.w	5eb4 <usb_serial_getchar>

00006434 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    6434:	f7ff bd7a 	b.w	5f2c <usb_serial_available>

00006438 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    6438:	f7ff be56 	b.w	60e8 <usb_serial_flush_output>

0000643c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    643c:	f7ff be30 	b.w	60a0 <usb_serial_write_buffer_free>

00006440 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6440:	4608      	mov	r0, r1
    6442:	4611      	mov	r1, r2
    6444:	f7ff bd9c 	b.w	5f80 <usb_serial_write>

00006448 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6448:	4608      	mov	r0, r1
    644a:	f7ff be1d 	b.w	6088 <usb_serial_putchar>
    644e:	bf00      	nop

00006450 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    6450:	4770      	bx	lr
    6452:	bf00      	nop

00006454 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    6454:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    6456:	4c22      	ldr	r4, [pc, #136]	; (64e0 <yield+0x8c>)
    6458:	7823      	ldrb	r3, [r4, #0]
    645a:	b103      	cbz	r3, 645e <yield+0xa>
    645c:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    645e:	2301      	movs	r3, #1
    6460:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    6462:	f7ff fd63 	bl	5f2c <usb_serial_available>
	if (Serial.available()) serialEvent();
    6466:	bb70      	cbnz	r0, 64c6 <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    6468:	f000 f868 	bl	653c <serial_available>
	if (Serial1.available()) serialEvent1();
    646c:	bb40      	cbnz	r0, 64c0 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    646e:	f000 f8fb 	bl	6668 <serial2_available>
	if (Serial2.available()) serialEvent2();
    6472:	bb10      	cbnz	r0, 64ba <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    6474:	f000 f98e 	bl	6794 <serial3_available>
	if (Serial3.available()) serialEvent3();
    6478:	b9e0      	cbnz	r0, 64b4 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    647a:	2300      	movs	r3, #0
    647c:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    647e:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    6482:	2b00      	cmp	r3, #0
    6484:	d1ea      	bne.n	645c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6486:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    648a:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    648c:	4b15      	ldr	r3, [pc, #84]	; (64e4 <yield+0x90>)
    648e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    6490:	b1e0      	cbz	r0, 64cc <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    6492:	4c15      	ldr	r4, [pc, #84]	; (64e8 <yield+0x94>)
    6494:	7822      	ldrb	r2, [r4, #0]
    6496:	b9ca      	cbnz	r2, 64cc <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    6498:	6945      	ldr	r5, [r0, #20]
    649a:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    649c:	2301      	movs	r3, #1
    649e:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    64a0:	b1c5      	cbz	r5, 64d4 <yield+0x80>
			firstYield->_prev = nullptr;
    64a2:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    64a4:	b901      	cbnz	r1, 64a8 <yield+0x54>
    64a6:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    64a8:	2500      	movs	r5, #0
    64aa:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    64ac:	6883      	ldr	r3, [r0, #8]
    64ae:	4798      	blx	r3
		runningFromYield = false;
    64b0:	7025      	strb	r5, [r4, #0]
    64b2:	e7d3      	b.n	645c <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    64b4:	f000 fa30 	bl	6918 <serialEvent3()>
    64b8:	e7df      	b.n	647a <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    64ba:	f000 fa2b 	bl	6914 <serialEvent2()>
    64be:	e7d9      	b.n	6474 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    64c0:	f000 fa26 	bl	6910 <serialEvent1()>
    64c4:	e7d3      	b.n	646e <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    64c6:	f7ff ffc3 	bl	6450 <serialEvent()>
    64ca:	e7cd      	b.n	6468 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    64cc:	2900      	cmp	r1, #0
    64ce:	d1c5      	bne.n	645c <yield+0x8>
    64d0:	b662      	cpsie	i
    64d2:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    64d4:	4b05      	ldr	r3, [pc, #20]	; (64ec <yield+0x98>)
    64d6:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    64d8:	2900      	cmp	r1, #0
    64da:	d1e5      	bne.n	64a8 <yield+0x54>
    64dc:	e7e3      	b.n	64a6 <yield+0x52>
    64de:	bf00      	nop
    64e0:	1fff9784 	.word	0x1fff9784
    64e4:	1fff9778 	.word	0x1fff9778
    64e8:	1fff977c 	.word	0x1fff977c
    64ec:	1fff9774 	.word	0x1fff9774

000064f0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    64f0:	b4f0      	push	{r4, r5, r6, r7}
    64f2:	1e4d      	subs	r5, r1, #1
    64f4:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    64f6:	2400      	movs	r4, #0
    64f8:	e000      	b.n	64fc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    64fa:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    64fc:	fbb0 f3f2 	udiv	r3, r0, r2
    6500:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6504:	2809      	cmp	r0, #9
    6506:	f100 0730 	add.w	r7, r0, #48	; 0x30
    650a:	bf8a      	itet	hi
    650c:	3037      	addhi	r0, #55	; 0x37
    650e:	b2f8      	uxtbls	r0, r7
    6510:	b2c0      	uxtbhi	r0, r0
    6512:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    6516:	4618      	mov	r0, r3
    6518:	2b00      	cmp	r3, #0
    651a:	d1ee      	bne.n	64fa <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    651c:	190a      	adds	r2, r1, r4
    651e:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    6520:	b14c      	cbz	r4, 6536 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    6522:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    6524:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    6528:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    652a:	3301      	adds	r3, #1
    652c:	1ae0      	subs	r0, r4, r3
    652e:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    6530:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6534:	dbf5      	blt.n	6522 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    6536:	4608      	mov	r0, r1
    6538:	bcf0      	pop	{r4, r5, r6, r7}
    653a:	4770      	bx	lr

0000653c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    653c:	4a05      	ldr	r2, [pc, #20]	; (6554 <serial_available+0x18>)
	tail = rx_buffer_tail;
    653e:	4b06      	ldr	r3, [pc, #24]	; (6558 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6540:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    6542:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6544:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    6546:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    6548:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    654a:	bf38      	it	cc
    654c:	3040      	addcc	r0, #64	; 0x40
    654e:	1ac0      	subs	r0, r0, r3
}
    6550:	4770      	bx	lr
    6552:	bf00      	nop
    6554:	1fff978c 	.word	0x1fff978c
    6558:	1fff978d 	.word	0x1fff978d

0000655c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    655c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    655e:	4b38      	ldr	r3, [pc, #224]	; (6640 <uart0_status_isr+0xe4>)
    6560:	791a      	ldrb	r2, [r3, #4]
    6562:	f012 0f30 	tst.w	r2, #48	; 0x30
    6566:	d02c      	beq.n	65c2 <uart0_status_isr+0x66>
		__disable_irq();
    6568:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    656a:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    656c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    6570:	2900      	cmp	r1, #0
    6572:	d03d      	beq.n	65f0 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    6574:	b662      	cpsie	i
			head = rx_buffer_head;
    6576:	4f33      	ldr	r7, [pc, #204]	; (6644 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    6578:	4933      	ldr	r1, [pc, #204]	; (6648 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    657a:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    657c:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    657e:	4e33      	ldr	r6, [pc, #204]	; (664c <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    6580:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    6582:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    6584:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    6586:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    6588:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    658a:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    658c:	bf28      	it	cs
    658e:	2300      	movcs	r3, #0
				if (newhead != tail) {
    6590:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    6592:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    6596:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    6598:	bf1c      	itt	ne
    659a:	54f1      	strbne	r1, [r6, r3]
    659c:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    659e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    65a2:	d1f0      	bne.n	6586 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    65a4:	4b2a      	ldr	r3, [pc, #168]	; (6650 <uart0_status_isr+0xf4>)
    65a6:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    65a8:	b2c2      	uxtb	r2, r0
    65aa:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    65ac:	b14b      	cbz	r3, 65c2 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    65ae:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    65b0:	bf36      	itet	cc
    65b2:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    65b6:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    65b8:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    65ba:	2827      	cmp	r0, #39	; 0x27
    65bc:	bfc4      	itt	gt
    65be:	2201      	movgt	r2, #1
    65c0:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    65c2:	491f      	ldr	r1, [pc, #124]	; (6640 <uart0_status_isr+0xe4>)
    65c4:	78ca      	ldrb	r2, [r1, #3]
    65c6:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    65c8:	0615      	lsls	r5, r2, #24
    65ca:	d416      	bmi.n	65fa <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    65cc:	0652      	lsls	r2, r2, #25
    65ce:	d50d      	bpl.n	65ec <uart0_status_isr+0x90>
    65d0:	4b1b      	ldr	r3, [pc, #108]	; (6640 <uart0_status_isr+0xe4>)
    65d2:	791b      	ldrb	r3, [r3, #4]
    65d4:	065b      	lsls	r3, r3, #25
    65d6:	d509      	bpl.n	65ec <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    65d8:	4b1e      	ldr	r3, [pc, #120]	; (6654 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    65da:	491f      	ldr	r1, [pc, #124]	; (6658 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    65dc:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    65de:	2200      	movs	r2, #0
    65e0:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    65e2:	b103      	cbz	r3, 65e6 <uart0_status_isr+0x8a>
    65e4:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    65e6:	4b16      	ldr	r3, [pc, #88]	; (6640 <uart0_status_isr+0xe4>)
    65e8:	223c      	movs	r2, #60	; 0x3c
    65ea:	70da      	strb	r2, [r3, #3]
	}
}
    65ec:	bcf0      	pop	{r4, r5, r6, r7}
    65ee:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    65f0:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    65f2:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    65f4:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    65f6:	b662      	cpsie	i
    65f8:	e7e3      	b.n	65c2 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    65fa:	790b      	ldrb	r3, [r1, #4]
    65fc:	061c      	lsls	r4, r3, #24
    65fe:	d5e5      	bpl.n	65cc <uart0_status_isr+0x70>
		head = tx_buffer_head;
    6600:	4b16      	ldr	r3, [pc, #88]	; (665c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    6602:	4e17      	ldr	r6, [pc, #92]	; (6660 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6604:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    6606:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6608:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    660a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    660c:	429c      	cmp	r4, r3
    660e:	d00e      	beq.n	662e <uart0_status_isr+0xd2>
    6610:	4d14      	ldr	r5, [pc, #80]	; (6664 <uart0_status_isr+0x108>)
    6612:	e001      	b.n	6618 <uart0_status_isr+0xbc>
    6614:	42a3      	cmp	r3, r4
    6616:	d00a      	beq.n	662e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    6618:	3301      	adds	r3, #1
    661a:	2b40      	cmp	r3, #64	; 0x40
    661c:	bf28      	it	cs
    661e:	2300      	movcs	r3, #0
			avail = UART0_S1;
    6620:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    6622:	5ce8      	ldrb	r0, [r5, r3]
    6624:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    6626:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    6628:	7d08      	ldrb	r0, [r1, #20]
    662a:	2807      	cmp	r0, #7
    662c:	d9f2      	bls.n	6614 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    662e:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    6630:	4903      	ldr	r1, [pc, #12]	; (6640 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    6632:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    6634:	790b      	ldrb	r3, [r1, #4]
    6636:	0618      	lsls	r0, r3, #24
    6638:	bf44      	itt	mi
    663a:	237c      	movmi	r3, #124	; 0x7c
    663c:	70cb      	strbmi	r3, [r1, #3]
    663e:	e7c5      	b.n	65cc <uart0_status_isr+0x70>
    6640:	4006a000 	.word	0x4006a000
    6644:	1fff978c 	.word	0x1fff978c
    6648:	1fff978d 	.word	0x1fff978d
    664c:	1fff97d0 	.word	0x1fff97d0
    6650:	1fff9788 	.word	0x1fff9788
    6654:	1fff9814 	.word	0x1fff9814
    6658:	1fff9810 	.word	0x1fff9810
    665c:	1fff9818 	.word	0x1fff9818
    6660:	1fff9811 	.word	0x1fff9811
    6664:	1fff9790 	.word	0x1fff9790

00006668 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6668:	4a05      	ldr	r2, [pc, #20]	; (6680 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    666a:	4b06      	ldr	r3, [pc, #24]	; (6684 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    666c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    666e:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6670:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    6672:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    6674:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    6676:	bf38      	it	cc
    6678:	3040      	addcc	r0, #64	; 0x40
    667a:	1ac0      	subs	r0, r0, r3
}
    667c:	4770      	bx	lr
    667e:	bf00      	nop
    6680:	1fff988c 	.word	0x1fff988c
    6684:	1fff9821 	.word	0x1fff9821

00006688 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    6688:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    668a:	4b38      	ldr	r3, [pc, #224]	; (676c <uart1_status_isr+0xe4>)
    668c:	791a      	ldrb	r2, [r3, #4]
    668e:	f012 0f30 	tst.w	r2, #48	; 0x30
    6692:	d02c      	beq.n	66ee <uart1_status_isr+0x66>
		__disable_irq();
    6694:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    6696:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    6698:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    669c:	2900      	cmp	r1, #0
    669e:	d03d      	beq.n	671c <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    66a0:	b662      	cpsie	i
			head = rx_buffer_head;
    66a2:	4f33      	ldr	r7, [pc, #204]	; (6770 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    66a4:	4933      	ldr	r1, [pc, #204]	; (6774 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    66a6:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    66a8:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    66aa:	4e33      	ldr	r6, [pc, #204]	; (6778 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    66ac:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    66ae:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    66b0:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    66b2:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    66b4:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    66b6:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    66b8:	bf28      	it	cs
    66ba:	2300      	movcs	r3, #0
				if (newhead != tail) {
    66bc:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    66be:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    66c2:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    66c4:	bf1c      	itt	ne
    66c6:	54f1      	strbne	r1, [r6, r3]
    66c8:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    66ca:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    66ce:	d1f0      	bne.n	66b2 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    66d0:	4b2a      	ldr	r3, [pc, #168]	; (677c <uart1_status_isr+0xf4>)
    66d2:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    66d4:	b2c2      	uxtb	r2, r0
    66d6:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    66d8:	b14b      	cbz	r3, 66ee <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    66da:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    66dc:	bf36      	itet	cc
    66de:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    66e2:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    66e4:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    66e6:	2827      	cmp	r0, #39	; 0x27
    66e8:	bfc4      	itt	gt
    66ea:	2201      	movgt	r2, #1
    66ec:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    66ee:	491f      	ldr	r1, [pc, #124]	; (676c <uart1_status_isr+0xe4>)
    66f0:	78ca      	ldrb	r2, [r1, #3]
    66f2:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    66f4:	0615      	lsls	r5, r2, #24
    66f6:	d416      	bmi.n	6726 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    66f8:	0652      	lsls	r2, r2, #25
    66fa:	d50d      	bpl.n	6718 <uart1_status_isr+0x90>
    66fc:	4b1b      	ldr	r3, [pc, #108]	; (676c <uart1_status_isr+0xe4>)
    66fe:	791b      	ldrb	r3, [r3, #4]
    6700:	065b      	lsls	r3, r3, #25
    6702:	d509      	bpl.n	6718 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    6704:	4b1e      	ldr	r3, [pc, #120]	; (6780 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    6706:	491f      	ldr	r1, [pc, #124]	; (6784 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    6708:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    670a:	2200      	movs	r2, #0
    670c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    670e:	b103      	cbz	r3, 6712 <uart1_status_isr+0x8a>
    6710:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    6712:	4b16      	ldr	r3, [pc, #88]	; (676c <uart1_status_isr+0xe4>)
    6714:	223c      	movs	r2, #60	; 0x3c
    6716:	70da      	strb	r2, [r3, #3]
	}
}
    6718:	bcf0      	pop	{r4, r5, r6, r7}
    671a:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    671c:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    671e:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    6720:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    6722:	b662      	cpsie	i
    6724:	e7e3      	b.n	66ee <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    6726:	790b      	ldrb	r3, [r1, #4]
    6728:	061c      	lsls	r4, r3, #24
    672a:	d5e5      	bpl.n	66f8 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    672c:	4b16      	ldr	r3, [pc, #88]	; (6788 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    672e:	4e17      	ldr	r6, [pc, #92]	; (678c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6730:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    6732:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6734:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    6736:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    6738:	429c      	cmp	r4, r3
    673a:	d00e      	beq.n	675a <uart1_status_isr+0xd2>
    673c:	4d14      	ldr	r5, [pc, #80]	; (6790 <uart1_status_isr+0x108>)
    673e:	e001      	b.n	6744 <uart1_status_isr+0xbc>
    6740:	42a3      	cmp	r3, r4
    6742:	d00a      	beq.n	675a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    6744:	3301      	adds	r3, #1
    6746:	2b28      	cmp	r3, #40	; 0x28
    6748:	bf28      	it	cs
    674a:	2300      	movcs	r3, #0
			avail = UART1_S1;
    674c:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    674e:	5ce8      	ldrb	r0, [r5, r3]
    6750:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    6752:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    6754:	7d08      	ldrb	r0, [r1, #20]
    6756:	2807      	cmp	r0, #7
    6758:	d9f2      	bls.n	6740 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    675a:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    675c:	4903      	ldr	r1, [pc, #12]	; (676c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    675e:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    6760:	790b      	ldrb	r3, [r1, #4]
    6762:	0618      	lsls	r0, r3, #24
    6764:	bf44      	itt	mi
    6766:	237c      	movmi	r3, #124	; 0x7c
    6768:	70cb      	strbmi	r3, [r1, #3]
    676a:	e7c5      	b.n	66f8 <uart1_status_isr+0x70>
    676c:	4006b000 	.word	0x4006b000
    6770:	1fff988c 	.word	0x1fff988c
    6774:	1fff9821 	.word	0x1fff9821
    6778:	1fff984c 	.word	0x1fff984c
    677c:	1fff981c 	.word	0x1fff981c
    6780:	1fff9890 	.word	0x1fff9890
    6784:	1fff9820 	.word	0x1fff9820
    6788:	1fff9894 	.word	0x1fff9894
    678c:	1fff988d 	.word	0x1fff988d
    6790:	1fff9824 	.word	0x1fff9824

00006794 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6794:	4a05      	ldr	r2, [pc, #20]	; (67ac <serial3_available+0x18>)
	tail = rx_buffer_tail;
    6796:	4b06      	ldr	r3, [pc, #24]	; (67b0 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6798:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    679a:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    679c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    679e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    67a0:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    67a2:	bf38      	it	cc
    67a4:	3040      	addcc	r0, #64	; 0x40
    67a6:	1ac0      	subs	r0, r0, r3
}
    67a8:	4770      	bx	lr
    67aa:	bf00      	nop
    67ac:	1fff989c 	.word	0x1fff989c
    67b0:	1fff989d 	.word	0x1fff989d

000067b4 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    67b4:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    67b6:	4b2b      	ldr	r3, [pc, #172]	; (6864 <uart2_status_isr+0xb0>)
    67b8:	791a      	ldrb	r2, [r3, #4]
    67ba:	0694      	lsls	r4, r2, #26
    67bc:	d51f      	bpl.n	67fe <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    67be:	482a      	ldr	r0, [pc, #168]	; (6868 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    67c0:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    67c2:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    67c4:	4929      	ldr	r1, [pc, #164]	; (686c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    67c6:	3301      	adds	r3, #1
    67c8:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    67ca:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    67cc:	bfc8      	it	gt
    67ce:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    67d0:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    67d2:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    67d4:	d003      	beq.n	67de <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    67d6:	4c26      	ldr	r4, [pc, #152]	; (6870 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    67d8:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    67da:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    67dc:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    67de:	4a25      	ldr	r2, [pc, #148]	; (6874 <uart2_status_isr+0xc0>)
    67e0:	6811      	ldr	r1, [r2, #0]
    67e2:	b161      	cbz	r1, 67fe <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    67e4:	4a24      	ldr	r2, [pc, #144]	; (6878 <uart2_status_isr+0xc4>)
    67e6:	7812      	ldrb	r2, [r2, #0]
    67e8:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    67ea:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    67ec:	bf36      	itet	cc
    67ee:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    67f2:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    67f4:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    67f6:	2b27      	cmp	r3, #39	; 0x27
    67f8:	bfc4      	itt	gt
    67fa:	2301      	movgt	r3, #1
    67fc:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    67fe:	4a19      	ldr	r2, [pc, #100]	; (6864 <uart2_status_isr+0xb0>)
    6800:	78d3      	ldrb	r3, [r2, #3]
    6802:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    6804:	0618      	lsls	r0, r3, #24
    6806:	d411      	bmi.n	682c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    6808:	065a      	lsls	r2, r3, #25
    680a:	d50d      	bpl.n	6828 <uart2_status_isr+0x74>
    680c:	4b15      	ldr	r3, [pc, #84]	; (6864 <uart2_status_isr+0xb0>)
    680e:	791b      	ldrb	r3, [r3, #4]
    6810:	065b      	lsls	r3, r3, #25
    6812:	d509      	bpl.n	6828 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    6814:	4b19      	ldr	r3, [pc, #100]	; (687c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    6816:	491a      	ldr	r1, [pc, #104]	; (6880 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    6818:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    681a:	2200      	movs	r2, #0
    681c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    681e:	b103      	cbz	r3, 6822 <uart2_status_isr+0x6e>
    6820:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    6822:	4b10      	ldr	r3, [pc, #64]	; (6864 <uart2_status_isr+0xb0>)
    6824:	222c      	movs	r2, #44	; 0x2c
    6826:	70da      	strb	r2, [r3, #3]
	}
}
    6828:	bc30      	pop	{r4, r5}
    682a:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    682c:	7911      	ldrb	r1, [r2, #4]
    682e:	0609      	lsls	r1, r1, #24
    6830:	d5ea      	bpl.n	6808 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    6832:	4914      	ldr	r1, [pc, #80]	; (6884 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    6834:	4810      	ldr	r0, [pc, #64]	; (6878 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6836:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    6838:	7801      	ldrb	r1, [r0, #0]
    683a:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    683c:	428c      	cmp	r4, r1
    683e:	d00d      	beq.n	685c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    6840:	1c4a      	adds	r2, r1, #1
    6842:	2a27      	cmp	r2, #39	; 0x27
    6844:	bf84      	itt	hi
    6846:	2100      	movhi	r1, #0
    6848:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    684a:	4d0f      	ldr	r5, [pc, #60]	; (6888 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    684c:	4c05      	ldr	r4, [pc, #20]	; (6864 <uart2_status_isr+0xb0>)
    684e:	bf98      	it	ls
    6850:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    6852:	5caa      	ldrb	r2, [r5, r2]
    6854:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    6856:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    6858:	7001      	strb	r1, [r0, #0]
    685a:	e7d5      	b.n	6808 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    685c:	216c      	movs	r1, #108	; 0x6c
    685e:	70d1      	strb	r1, [r2, #3]
    6860:	e7d2      	b.n	6808 <uart2_status_isr+0x54>
    6862:	bf00      	nop
    6864:	4006c000 	.word	0x4006c000
    6868:	1fff989c 	.word	0x1fff989c
    686c:	1fff989d 	.word	0x1fff989d
    6870:	1fff98c8 	.word	0x1fff98c8
    6874:	1fff9898 	.word	0x1fff9898
    6878:	1fff9909 	.word	0x1fff9909
    687c:	1fff990c 	.word	0x1fff990c
    6880:	1fff9908 	.word	0x1fff9908
    6884:	1fff9910 	.word	0x1fff9910
    6888:	1fff98a0 	.word	0x1fff98a0

0000688c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    688c:	b570      	push	{r4, r5, r6, lr}
    688e:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    6890:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    6892:	4b19      	ldr	r3, [pc, #100]	; (68f8 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    6894:	4d19      	ldr	r5, [pc, #100]	; (68fc <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    6896:	481a      	ldr	r0, [pc, #104]	; (6900 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    6898:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    689a:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    689c:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    689e:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    68a0:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    68a2:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    68a4:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    68a6:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    68a8:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    68aa:	7813      	ldrb	r3, [r2, #0]
    68ac:	061b      	lsls	r3, r3, #24
    68ae:	d5fc      	bpl.n	68aa <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    68b0:	4b14      	ldr	r3, [pc, #80]	; (6904 <usb_init_serialnumber+0x78>)
    68b2:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    68b4:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    68b6:	4b14      	ldr	r3, [pc, #80]	; (6908 <usb_init_serialnumber+0x7c>)
    68b8:	4c14      	ldr	r4, [pc, #80]	; (690c <usb_init_serialnumber+0x80>)
    68ba:	4298      	cmp	r0, r3
    68bc:	bf98      	it	ls
    68be:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    68c2:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    68c4:	bf98      	it	ls
    68c6:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    68c8:	220a      	movs	r2, #10
    68ca:	f7ff fe11 	bl	64f0 <ultoa>
    68ce:	a901      	add	r1, sp, #4
    68d0:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    68d2:	2300      	movs	r3, #0
		char c = buf[i];
    68d4:	f811 2b01 	ldrb.w	r2, [r1], #1
    68d8:	3301      	adds	r3, #1
		if (!c) break;
    68da:	b13a      	cbz	r2, 68ec <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    68dc:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    68de:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    68e2:	d1f7      	bne.n	68d4 <usb_init_serialnumber+0x48>
    68e4:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    68e6:	7023      	strb	r3, [r4, #0]
}
    68e8:	b004      	add	sp, #16
    68ea:	bd70      	pop	{r4, r5, r6, pc}
    68ec:	005b      	lsls	r3, r3, #1
    68ee:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    68f0:	7023      	strb	r3, [r4, #0]
}
    68f2:	b004      	add	sp, #16
    68f4:	bd70      	pop	{r4, r5, r6, pc}
    68f6:	bf00      	nop
    68f8:	40020000 	.word	0x40020000
    68fc:	40020007 	.word	0x40020007
    6900:	40020006 	.word	0x40020006
    6904:	40020008 	.word	0x40020008
    6908:	0098967f 	.word	0x0098967f
    690c:	1fff8828 	.word	0x1fff8828

00006910 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    6910:	4770      	bx	lr
    6912:	bf00      	nop

00006914 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    6914:	4770      	bx	lr
    6916:	bf00      	nop

00006918 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    6918:	4770      	bx	lr
    691a:	bf00      	nop

0000691c <__aeabi_frsub>:
    691c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    6920:	e002      	b.n	6928 <__addsf3>
    6922:	bf00      	nop

00006924 <__aeabi_fsub>:
    6924:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00006928 <__addsf3>:
    6928:	0042      	lsls	r2, r0, #1
    692a:	bf1f      	itttt	ne
    692c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    6930:	ea92 0f03 	teqne	r2, r3
    6934:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    6938:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    693c:	d06a      	beq.n	6a14 <__addsf3+0xec>
    693e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    6942:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    6946:	bfc1      	itttt	gt
    6948:	18d2      	addgt	r2, r2, r3
    694a:	4041      	eorgt	r1, r0
    694c:	4048      	eorgt	r0, r1
    694e:	4041      	eorgt	r1, r0
    6950:	bfb8      	it	lt
    6952:	425b      	neglt	r3, r3
    6954:	2b19      	cmp	r3, #25
    6956:	bf88      	it	hi
    6958:	4770      	bxhi	lr
    695a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    695e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6962:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6966:	bf18      	it	ne
    6968:	4240      	negne	r0, r0
    696a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    696e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    6972:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6976:	bf18      	it	ne
    6978:	4249      	negne	r1, r1
    697a:	ea92 0f03 	teq	r2, r3
    697e:	d03f      	beq.n	6a00 <__addsf3+0xd8>
    6980:	f1a2 0201 	sub.w	r2, r2, #1
    6984:	fa41 fc03 	asr.w	ip, r1, r3
    6988:	eb10 000c 	adds.w	r0, r0, ip
    698c:	f1c3 0320 	rsb	r3, r3, #32
    6990:	fa01 f103 	lsl.w	r1, r1, r3
    6994:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6998:	d502      	bpl.n	69a0 <__addsf3+0x78>
    699a:	4249      	negs	r1, r1
    699c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    69a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    69a4:	d313      	bcc.n	69ce <__addsf3+0xa6>
    69a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    69aa:	d306      	bcc.n	69ba <__addsf3+0x92>
    69ac:	0840      	lsrs	r0, r0, #1
    69ae:	ea4f 0131 	mov.w	r1, r1, rrx
    69b2:	f102 0201 	add.w	r2, r2, #1
    69b6:	2afe      	cmp	r2, #254	; 0xfe
    69b8:	d251      	bcs.n	6a5e <__addsf3+0x136>
    69ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    69be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    69c2:	bf08      	it	eq
    69c4:	f020 0001 	biceq.w	r0, r0, #1
    69c8:	ea40 0003 	orr.w	r0, r0, r3
    69cc:	4770      	bx	lr
    69ce:	0049      	lsls	r1, r1, #1
    69d0:	eb40 0000 	adc.w	r0, r0, r0
    69d4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    69d8:	f1a2 0201 	sub.w	r2, r2, #1
    69dc:	d1ed      	bne.n	69ba <__addsf3+0x92>
    69de:	fab0 fc80 	clz	ip, r0
    69e2:	f1ac 0c08 	sub.w	ip, ip, #8
    69e6:	ebb2 020c 	subs.w	r2, r2, ip
    69ea:	fa00 f00c 	lsl.w	r0, r0, ip
    69ee:	bfaa      	itet	ge
    69f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    69f4:	4252      	neglt	r2, r2
    69f6:	4318      	orrge	r0, r3
    69f8:	bfbc      	itt	lt
    69fa:	40d0      	lsrlt	r0, r2
    69fc:	4318      	orrlt	r0, r3
    69fe:	4770      	bx	lr
    6a00:	f092 0f00 	teq	r2, #0
    6a04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    6a08:	bf06      	itte	eq
    6a0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    6a0e:	3201      	addeq	r2, #1
    6a10:	3b01      	subne	r3, #1
    6a12:	e7b5      	b.n	6980 <__addsf3+0x58>
    6a14:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6a18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6a1c:	bf18      	it	ne
    6a1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6a22:	d021      	beq.n	6a68 <__addsf3+0x140>
    6a24:	ea92 0f03 	teq	r2, r3
    6a28:	d004      	beq.n	6a34 <__addsf3+0x10c>
    6a2a:	f092 0f00 	teq	r2, #0
    6a2e:	bf08      	it	eq
    6a30:	4608      	moveq	r0, r1
    6a32:	4770      	bx	lr
    6a34:	ea90 0f01 	teq	r0, r1
    6a38:	bf1c      	itt	ne
    6a3a:	2000      	movne	r0, #0
    6a3c:	4770      	bxne	lr
    6a3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    6a42:	d104      	bne.n	6a4e <__addsf3+0x126>
    6a44:	0040      	lsls	r0, r0, #1
    6a46:	bf28      	it	cs
    6a48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6a4c:	4770      	bx	lr
    6a4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    6a52:	bf3c      	itt	cc
    6a54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    6a58:	4770      	bxcc	lr
    6a5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6a5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    6a62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6a66:	4770      	bx	lr
    6a68:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6a6c:	bf16      	itet	ne
    6a6e:	4608      	movne	r0, r1
    6a70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    6a74:	4601      	movne	r1, r0
    6a76:	0242      	lsls	r2, r0, #9
    6a78:	bf06      	itte	eq
    6a7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6a7e:	ea90 0f01 	teqeq	r0, r1
    6a82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    6a86:	4770      	bx	lr

00006a88 <__aeabi_ui2f>:
    6a88:	f04f 0300 	mov.w	r3, #0
    6a8c:	e004      	b.n	6a98 <__aeabi_i2f+0x8>
    6a8e:	bf00      	nop

00006a90 <__aeabi_i2f>:
    6a90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    6a94:	bf48      	it	mi
    6a96:	4240      	negmi	r0, r0
    6a98:	ea5f 0c00 	movs.w	ip, r0
    6a9c:	bf08      	it	eq
    6a9e:	4770      	bxeq	lr
    6aa0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    6aa4:	4601      	mov	r1, r0
    6aa6:	f04f 0000 	mov.w	r0, #0
    6aaa:	e01c      	b.n	6ae6 <__aeabi_l2f+0x2a>

00006aac <__aeabi_ul2f>:
    6aac:	ea50 0201 	orrs.w	r2, r0, r1
    6ab0:	bf08      	it	eq
    6ab2:	4770      	bxeq	lr
    6ab4:	f04f 0300 	mov.w	r3, #0
    6ab8:	e00a      	b.n	6ad0 <__aeabi_l2f+0x14>
    6aba:	bf00      	nop

00006abc <__aeabi_l2f>:
    6abc:	ea50 0201 	orrs.w	r2, r0, r1
    6ac0:	bf08      	it	eq
    6ac2:	4770      	bxeq	lr
    6ac4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6ac8:	d502      	bpl.n	6ad0 <__aeabi_l2f+0x14>
    6aca:	4240      	negs	r0, r0
    6acc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6ad0:	ea5f 0c01 	movs.w	ip, r1
    6ad4:	bf02      	ittt	eq
    6ad6:	4684      	moveq	ip, r0
    6ad8:	4601      	moveq	r1, r0
    6ada:	2000      	moveq	r0, #0
    6adc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6ae0:	bf08      	it	eq
    6ae2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    6ae6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6aea:	fabc f28c 	clz	r2, ip
    6aee:	3a08      	subs	r2, #8
    6af0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6af4:	db10      	blt.n	6b18 <__aeabi_l2f+0x5c>
    6af6:	fa01 fc02 	lsl.w	ip, r1, r2
    6afa:	4463      	add	r3, ip
    6afc:	fa00 fc02 	lsl.w	ip, r0, r2
    6b00:	f1c2 0220 	rsb	r2, r2, #32
    6b04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6b08:	fa20 f202 	lsr.w	r2, r0, r2
    6b0c:	eb43 0002 	adc.w	r0, r3, r2
    6b10:	bf08      	it	eq
    6b12:	f020 0001 	biceq.w	r0, r0, #1
    6b16:	4770      	bx	lr
    6b18:	f102 0220 	add.w	r2, r2, #32
    6b1c:	fa01 fc02 	lsl.w	ip, r1, r2
    6b20:	f1c2 0220 	rsb	r2, r2, #32
    6b24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    6b28:	fa21 f202 	lsr.w	r2, r1, r2
    6b2c:	eb43 0002 	adc.w	r0, r3, r2
    6b30:	bf08      	it	eq
    6b32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6b36:	4770      	bx	lr

00006b38 <__aeabi_fmul>:
    6b38:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6b3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    6b40:	bf1e      	ittt	ne
    6b42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    6b46:	ea92 0f0c 	teqne	r2, ip
    6b4a:	ea93 0f0c 	teqne	r3, ip
    6b4e:	d06f      	beq.n	6c30 <__aeabi_fmul+0xf8>
    6b50:	441a      	add	r2, r3
    6b52:	ea80 0c01 	eor.w	ip, r0, r1
    6b56:	0240      	lsls	r0, r0, #9
    6b58:	bf18      	it	ne
    6b5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    6b5e:	d01e      	beq.n	6b9e <__aeabi_fmul+0x66>
    6b60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    6b64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    6b68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    6b6c:	fba0 3101 	umull	r3, r1, r0, r1
    6b70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    6b74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    6b78:	bf3e      	ittt	cc
    6b7a:	0049      	lslcc	r1, r1, #1
    6b7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    6b80:	005b      	lslcc	r3, r3, #1
    6b82:	ea40 0001 	orr.w	r0, r0, r1
    6b86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    6b8a:	2afd      	cmp	r2, #253	; 0xfd
    6b8c:	d81d      	bhi.n	6bca <__aeabi_fmul+0x92>
    6b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6b92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6b96:	bf08      	it	eq
    6b98:	f020 0001 	biceq.w	r0, r0, #1
    6b9c:	4770      	bx	lr
    6b9e:	f090 0f00 	teq	r0, #0
    6ba2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    6ba6:	bf08      	it	eq
    6ba8:	0249      	lsleq	r1, r1, #9
    6baa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    6bae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    6bb2:	3a7f      	subs	r2, #127	; 0x7f
    6bb4:	bfc2      	ittt	gt
    6bb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    6bba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6bbe:	4770      	bxgt	lr
    6bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6bc4:	f04f 0300 	mov.w	r3, #0
    6bc8:	3a01      	subs	r2, #1
    6bca:	dc5d      	bgt.n	6c88 <__aeabi_fmul+0x150>
    6bcc:	f112 0f19 	cmn.w	r2, #25
    6bd0:	bfdc      	itt	le
    6bd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    6bd6:	4770      	bxle	lr
    6bd8:	f1c2 0200 	rsb	r2, r2, #0
    6bdc:	0041      	lsls	r1, r0, #1
    6bde:	fa21 f102 	lsr.w	r1, r1, r2
    6be2:	f1c2 0220 	rsb	r2, r2, #32
    6be6:	fa00 fc02 	lsl.w	ip, r0, r2
    6bea:	ea5f 0031 	movs.w	r0, r1, rrx
    6bee:	f140 0000 	adc.w	r0, r0, #0
    6bf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    6bf6:	bf08      	it	eq
    6bf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6bfc:	4770      	bx	lr
    6bfe:	f092 0f00 	teq	r2, #0
    6c02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    6c06:	bf02      	ittt	eq
    6c08:	0040      	lsleq	r0, r0, #1
    6c0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    6c0e:	3a01      	subeq	r2, #1
    6c10:	d0f9      	beq.n	6c06 <__aeabi_fmul+0xce>
    6c12:	ea40 000c 	orr.w	r0, r0, ip
    6c16:	f093 0f00 	teq	r3, #0
    6c1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6c1e:	bf02      	ittt	eq
    6c20:	0049      	lsleq	r1, r1, #1
    6c22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    6c26:	3b01      	subeq	r3, #1
    6c28:	d0f9      	beq.n	6c1e <__aeabi_fmul+0xe6>
    6c2a:	ea41 010c 	orr.w	r1, r1, ip
    6c2e:	e78f      	b.n	6b50 <__aeabi_fmul+0x18>
    6c30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    6c34:	ea92 0f0c 	teq	r2, ip
    6c38:	bf18      	it	ne
    6c3a:	ea93 0f0c 	teqne	r3, ip
    6c3e:	d00a      	beq.n	6c56 <__aeabi_fmul+0x11e>
    6c40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    6c44:	bf18      	it	ne
    6c46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    6c4a:	d1d8      	bne.n	6bfe <__aeabi_fmul+0xc6>
    6c4c:	ea80 0001 	eor.w	r0, r0, r1
    6c50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    6c54:	4770      	bx	lr
    6c56:	f090 0f00 	teq	r0, #0
    6c5a:	bf17      	itett	ne
    6c5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    6c60:	4608      	moveq	r0, r1
    6c62:	f091 0f00 	teqne	r1, #0
    6c66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    6c6a:	d014      	beq.n	6c96 <__aeabi_fmul+0x15e>
    6c6c:	ea92 0f0c 	teq	r2, ip
    6c70:	d101      	bne.n	6c76 <__aeabi_fmul+0x13e>
    6c72:	0242      	lsls	r2, r0, #9
    6c74:	d10f      	bne.n	6c96 <__aeabi_fmul+0x15e>
    6c76:	ea93 0f0c 	teq	r3, ip
    6c7a:	d103      	bne.n	6c84 <__aeabi_fmul+0x14c>
    6c7c:	024b      	lsls	r3, r1, #9
    6c7e:	bf18      	it	ne
    6c80:	4608      	movne	r0, r1
    6c82:	d108      	bne.n	6c96 <__aeabi_fmul+0x15e>
    6c84:	ea80 0001 	eor.w	r0, r0, r1
    6c88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    6c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6c94:	4770      	bx	lr
    6c96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6c9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    6c9e:	4770      	bx	lr

00006ca0 <__aeabi_fdiv>:
    6ca0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6ca4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    6ca8:	bf1e      	ittt	ne
    6caa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    6cae:	ea92 0f0c 	teqne	r2, ip
    6cb2:	ea93 0f0c 	teqne	r3, ip
    6cb6:	d069      	beq.n	6d8c <__aeabi_fdiv+0xec>
    6cb8:	eba2 0203 	sub.w	r2, r2, r3
    6cbc:	ea80 0c01 	eor.w	ip, r0, r1
    6cc0:	0249      	lsls	r1, r1, #9
    6cc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
    6cc6:	d037      	beq.n	6d38 <__aeabi_fdiv+0x98>
    6cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6ccc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    6cd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    6cd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    6cd8:	428b      	cmp	r3, r1
    6cda:	bf38      	it	cc
    6cdc:	005b      	lslcc	r3, r3, #1
    6cde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    6ce2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    6ce6:	428b      	cmp	r3, r1
    6ce8:	bf24      	itt	cs
    6cea:	1a5b      	subcs	r3, r3, r1
    6cec:	ea40 000c 	orrcs.w	r0, r0, ip
    6cf0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    6cf4:	bf24      	itt	cs
    6cf6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    6cfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    6cfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    6d02:	bf24      	itt	cs
    6d04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    6d08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    6d0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    6d10:	bf24      	itt	cs
    6d12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    6d16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    6d1a:	011b      	lsls	r3, r3, #4
    6d1c:	bf18      	it	ne
    6d1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    6d22:	d1e0      	bne.n	6ce6 <__aeabi_fdiv+0x46>
    6d24:	2afd      	cmp	r2, #253	; 0xfd
    6d26:	f63f af50 	bhi.w	6bca <__aeabi_fmul+0x92>
    6d2a:	428b      	cmp	r3, r1
    6d2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6d30:	bf08      	it	eq
    6d32:	f020 0001 	biceq.w	r0, r0, #1
    6d36:	4770      	bx	lr
    6d38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    6d3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    6d40:	327f      	adds	r2, #127	; 0x7f
    6d42:	bfc2      	ittt	gt
    6d44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    6d48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6d4c:	4770      	bxgt	lr
    6d4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6d52:	f04f 0300 	mov.w	r3, #0
    6d56:	3a01      	subs	r2, #1
    6d58:	e737      	b.n	6bca <__aeabi_fmul+0x92>
    6d5a:	f092 0f00 	teq	r2, #0
    6d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    6d62:	bf02      	ittt	eq
    6d64:	0040      	lsleq	r0, r0, #1
    6d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    6d6a:	3a01      	subeq	r2, #1
    6d6c:	d0f9      	beq.n	6d62 <__aeabi_fdiv+0xc2>
    6d6e:	ea40 000c 	orr.w	r0, r0, ip
    6d72:	f093 0f00 	teq	r3, #0
    6d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6d7a:	bf02      	ittt	eq
    6d7c:	0049      	lsleq	r1, r1, #1
    6d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    6d82:	3b01      	subeq	r3, #1
    6d84:	d0f9      	beq.n	6d7a <__aeabi_fdiv+0xda>
    6d86:	ea41 010c 	orr.w	r1, r1, ip
    6d8a:	e795      	b.n	6cb8 <__aeabi_fdiv+0x18>
    6d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    6d90:	ea92 0f0c 	teq	r2, ip
    6d94:	d108      	bne.n	6da8 <__aeabi_fdiv+0x108>
    6d96:	0242      	lsls	r2, r0, #9
    6d98:	f47f af7d 	bne.w	6c96 <__aeabi_fmul+0x15e>
    6d9c:	ea93 0f0c 	teq	r3, ip
    6da0:	f47f af70 	bne.w	6c84 <__aeabi_fmul+0x14c>
    6da4:	4608      	mov	r0, r1
    6da6:	e776      	b.n	6c96 <__aeabi_fmul+0x15e>
    6da8:	ea93 0f0c 	teq	r3, ip
    6dac:	d104      	bne.n	6db8 <__aeabi_fdiv+0x118>
    6dae:	024b      	lsls	r3, r1, #9
    6db0:	f43f af4c 	beq.w	6c4c <__aeabi_fmul+0x114>
    6db4:	4608      	mov	r0, r1
    6db6:	e76e      	b.n	6c96 <__aeabi_fmul+0x15e>
    6db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    6dbc:	bf18      	it	ne
    6dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    6dc2:	d1ca      	bne.n	6d5a <__aeabi_fdiv+0xba>
    6dc4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    6dc8:	f47f af5c 	bne.w	6c84 <__aeabi_fmul+0x14c>
    6dcc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    6dd0:	f47f af3c 	bne.w	6c4c <__aeabi_fmul+0x114>
    6dd4:	e75f      	b.n	6c96 <__aeabi_fmul+0x15e>
    6dd6:	bf00      	nop

00006dd8 <__gesf2>:
    6dd8:	f04f 3cff 	mov.w	ip, #4294967295
    6ddc:	e006      	b.n	6dec <__cmpsf2+0x4>
    6dde:	bf00      	nop

00006de0 <__lesf2>:
    6de0:	f04f 0c01 	mov.w	ip, #1
    6de4:	e002      	b.n	6dec <__cmpsf2+0x4>
    6de6:	bf00      	nop

00006de8 <__cmpsf2>:
    6de8:	f04f 0c01 	mov.w	ip, #1
    6dec:	f84d cd04 	str.w	ip, [sp, #-4]!
    6df0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    6df4:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6df8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6dfc:	bf18      	it	ne
    6dfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6e02:	d011      	beq.n	6e28 <__cmpsf2+0x40>
    6e04:	b001      	add	sp, #4
    6e06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    6e0a:	bf18      	it	ne
    6e0c:	ea90 0f01 	teqne	r0, r1
    6e10:	bf58      	it	pl
    6e12:	ebb2 0003 	subspl.w	r0, r2, r3
    6e16:	bf88      	it	hi
    6e18:	17c8      	asrhi	r0, r1, #31
    6e1a:	bf38      	it	cc
    6e1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    6e20:	bf18      	it	ne
    6e22:	f040 0001 	orrne.w	r0, r0, #1
    6e26:	4770      	bx	lr
    6e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6e2c:	d102      	bne.n	6e34 <__cmpsf2+0x4c>
    6e2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    6e32:	d105      	bne.n	6e40 <__cmpsf2+0x58>
    6e34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    6e38:	d1e4      	bne.n	6e04 <__cmpsf2+0x1c>
    6e3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    6e3e:	d0e1      	beq.n	6e04 <__cmpsf2+0x1c>
    6e40:	f85d 0b04 	ldr.w	r0, [sp], #4
    6e44:	4770      	bx	lr
    6e46:	bf00      	nop

00006e48 <__aeabi_cfrcmple>:
    6e48:	4684      	mov	ip, r0
    6e4a:	4608      	mov	r0, r1
    6e4c:	4661      	mov	r1, ip
    6e4e:	e7ff      	b.n	6e50 <__aeabi_cfcmpeq>

00006e50 <__aeabi_cfcmpeq>:
    6e50:	b50f      	push	{r0, r1, r2, r3, lr}
    6e52:	f7ff ffc9 	bl	6de8 <__cmpsf2>
    6e56:	2800      	cmp	r0, #0
    6e58:	bf48      	it	mi
    6e5a:	f110 0f00 	cmnmi.w	r0, #0
    6e5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00006e60 <__aeabi_fcmpeq>:
    6e60:	f84d ed08 	str.w	lr, [sp, #-8]!
    6e64:	f7ff fff4 	bl	6e50 <__aeabi_cfcmpeq>
    6e68:	bf0c      	ite	eq
    6e6a:	2001      	moveq	r0, #1
    6e6c:	2000      	movne	r0, #0
    6e6e:	f85d fb08 	ldr.w	pc, [sp], #8
    6e72:	bf00      	nop

00006e74 <__aeabi_fcmplt>:
    6e74:	f84d ed08 	str.w	lr, [sp, #-8]!
    6e78:	f7ff ffea 	bl	6e50 <__aeabi_cfcmpeq>
    6e7c:	bf34      	ite	cc
    6e7e:	2001      	movcc	r0, #1
    6e80:	2000      	movcs	r0, #0
    6e82:	f85d fb08 	ldr.w	pc, [sp], #8
    6e86:	bf00      	nop

00006e88 <__aeabi_fcmple>:
    6e88:	f84d ed08 	str.w	lr, [sp, #-8]!
    6e8c:	f7ff ffe0 	bl	6e50 <__aeabi_cfcmpeq>
    6e90:	bf94      	ite	ls
    6e92:	2001      	movls	r0, #1
    6e94:	2000      	movhi	r0, #0
    6e96:	f85d fb08 	ldr.w	pc, [sp], #8
    6e9a:	bf00      	nop

00006e9c <__aeabi_fcmpge>:
    6e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    6ea0:	f7ff ffd2 	bl	6e48 <__aeabi_cfrcmple>
    6ea4:	bf94      	ite	ls
    6ea6:	2001      	movls	r0, #1
    6ea8:	2000      	movhi	r0, #0
    6eaa:	f85d fb08 	ldr.w	pc, [sp], #8
    6eae:	bf00      	nop

00006eb0 <__aeabi_fcmpgt>:
    6eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
    6eb4:	f7ff ffc8 	bl	6e48 <__aeabi_cfrcmple>
    6eb8:	bf34      	ite	cc
    6eba:	2001      	movcc	r0, #1
    6ebc:	2000      	movcs	r0, #0
    6ebe:	f85d fb08 	ldr.w	pc, [sp], #8
    6ec2:	bf00      	nop

00006ec4 <__aeabi_f2iz>:
    6ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    6ec8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    6ecc:	d30f      	bcc.n	6eee <__aeabi_f2iz+0x2a>
    6ece:	f04f 039e 	mov.w	r3, #158	; 0x9e
    6ed2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    6ed6:	d90d      	bls.n	6ef4 <__aeabi_f2iz+0x30>
    6ed8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    6edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6ee0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6ee4:	fa23 f002 	lsr.w	r0, r3, r2
    6ee8:	bf18      	it	ne
    6eea:	4240      	negne	r0, r0
    6eec:	4770      	bx	lr
    6eee:	f04f 0000 	mov.w	r0, #0
    6ef2:	4770      	bx	lr
    6ef4:	f112 0f61 	cmn.w	r2, #97	; 0x61
    6ef8:	d101      	bne.n	6efe <__aeabi_f2iz+0x3a>
    6efa:	0242      	lsls	r2, r0, #9
    6efc:	d105      	bne.n	6f0a <__aeabi_f2iz+0x46>
    6efe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    6f02:	bf08      	it	eq
    6f04:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    6f08:	4770      	bx	lr
    6f0a:	f04f 0000 	mov.w	r0, #0
    6f0e:	4770      	bx	lr

00006f10 <__aeabi_f2uiz>:
    6f10:	0042      	lsls	r2, r0, #1
    6f12:	d20e      	bcs.n	6f32 <__aeabi_f2uiz+0x22>
    6f14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    6f18:	d30b      	bcc.n	6f32 <__aeabi_f2uiz+0x22>
    6f1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    6f1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    6f22:	d409      	bmi.n	6f38 <__aeabi_f2uiz+0x28>
    6f24:	ea4f 2300 	mov.w	r3, r0, lsl #8
    6f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6f2c:	fa23 f002 	lsr.w	r0, r3, r2
    6f30:	4770      	bx	lr
    6f32:	f04f 0000 	mov.w	r0, #0
    6f36:	4770      	bx	lr
    6f38:	f112 0f61 	cmn.w	r2, #97	; 0x61
    6f3c:	d101      	bne.n	6f42 <__aeabi_f2uiz+0x32>
    6f3e:	0242      	lsls	r2, r0, #9
    6f40:	d102      	bne.n	6f48 <__aeabi_f2uiz+0x38>
    6f42:	f04f 30ff 	mov.w	r0, #4294967295
    6f46:	4770      	bx	lr
    6f48:	f04f 0000 	mov.w	r0, #0
    6f4c:	4770      	bx	lr
    6f4e:	bf00      	nop

00006f50 <__libc_init_array>:
    6f50:	b570      	push	{r4, r5, r6, lr}
    6f52:	4e0f      	ldr	r6, [pc, #60]	; (6f90 <__libc_init_array+0x40>)
    6f54:	4d0f      	ldr	r5, [pc, #60]	; (6f94 <__libc_init_array+0x44>)
    6f56:	1b76      	subs	r6, r6, r5
    6f58:	10b6      	asrs	r6, r6, #2
    6f5a:	bf18      	it	ne
    6f5c:	2400      	movne	r4, #0
    6f5e:	d005      	beq.n	6f6c <__libc_init_array+0x1c>
    6f60:	3401      	adds	r4, #1
    6f62:	f855 3b04 	ldr.w	r3, [r5], #4
    6f66:	4798      	blx	r3
    6f68:	42a6      	cmp	r6, r4
    6f6a:	d1f9      	bne.n	6f60 <__libc_init_array+0x10>
    6f6c:	4e0a      	ldr	r6, [pc, #40]	; (6f98 <__libc_init_array+0x48>)
    6f6e:	4d0b      	ldr	r5, [pc, #44]	; (6f9c <__libc_init_array+0x4c>)
    6f70:	1b76      	subs	r6, r6, r5
    6f72:	f001 ff43 	bl	8dfc <_init>
    6f76:	10b6      	asrs	r6, r6, #2
    6f78:	bf18      	it	ne
    6f7a:	2400      	movne	r4, #0
    6f7c:	d006      	beq.n	6f8c <__libc_init_array+0x3c>
    6f7e:	3401      	adds	r4, #1
    6f80:	f855 3b04 	ldr.w	r3, [r5], #4
    6f84:	4798      	blx	r3
    6f86:	42a6      	cmp	r6, r4
    6f88:	d1f9      	bne.n	6f7e <__libc_init_array+0x2e>
    6f8a:	bd70      	pop	{r4, r5, r6, pc}
    6f8c:	bd70      	pop	{r4, r5, r6, pc}
    6f8e:	bf00      	nop
    6f90:	00008e08 	.word	0x00008e08
    6f94:	00008e08 	.word	0x00008e08
    6f98:	00008e1c 	.word	0x00008e1c
    6f9c:	00008e08 	.word	0x00008e08

00006fa0 <random>:
    6fa0:	b410      	push	{r4}
    6fa2:	4b0c      	ldr	r3, [pc, #48]	; (6fd4 <random+0x34>)
    6fa4:	4c0c      	ldr	r4, [pc, #48]	; (6fd8 <random+0x38>)
    6fa6:	6819      	ldr	r1, [r3, #0]
    6fa8:	4a0c      	ldr	r2, [pc, #48]	; (6fdc <random+0x3c>)
    6faa:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    6fae:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
    6fb2:	fb04 f403 	mul.w	r4, r4, r3
    6fb6:	fb02 4000 	mla	r0, r2, r0, r4
    6fba:	fba3 2302 	umull	r2, r3, r3, r2
    6fbe:	4403      	add	r3, r0
    6fc0:	3201      	adds	r2, #1
    6fc2:	f143 0300 	adc.w	r3, r3, #0
    6fc6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    6fca:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    6fce:	bc10      	pop	{r4}
    6fd0:	4770      	bx	lr
    6fd2:	bf00      	nop
    6fd4:	1fff8c68 	.word	0x1fff8c68
    6fd8:	5851f42d 	.word	0x5851f42d
    6fdc:	4c957f2d 	.word	0x4c957f2d

00006fe0 <register_fini>:
    6fe0:	4b02      	ldr	r3, [pc, #8]	; (6fec <register_fini+0xc>)
    6fe2:	b113      	cbz	r3, 6fea <register_fini+0xa>
    6fe4:	4802      	ldr	r0, [pc, #8]	; (6ff0 <register_fini+0x10>)
    6fe6:	f7fd bb05 	b.w	45f4 <atexit>
    6fea:	4770      	bx	lr
    6fec:	00000000 	.word	0x00000000
    6ff0:	00006ff5 	.word	0x00006ff5

00006ff4 <__libc_fini_array>:
    6ff4:	b538      	push	{r3, r4, r5, lr}
    6ff6:	4d07      	ldr	r5, [pc, #28]	; (7014 <__libc_fini_array+0x20>)
    6ff8:	4c07      	ldr	r4, [pc, #28]	; (7018 <__libc_fini_array+0x24>)
    6ffa:	1b2c      	subs	r4, r5, r4
    6ffc:	10a4      	asrs	r4, r4, #2
    6ffe:	d005      	beq.n	700c <__libc_fini_array+0x18>
    7000:	3c01      	subs	r4, #1
    7002:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    7006:	4798      	blx	r3
    7008:	2c00      	cmp	r4, #0
    700a:	d1f9      	bne.n	7000 <__libc_fini_array+0xc>
    700c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7010:	f001 bf04 	b.w	8e1c <__init_array_end>
	...

0000701c <vtable for APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>>:
	...
    7024:	1f95 0000 2059 0000 14e1 0000 17dd 0000     ....Y ..........
    7034:	046d 0000 0471 0000 1af5 0000               m...q.......

00007040 <Fire_1_gp>:
    7040:	ff00 0000 ff7f 0037 ffff 00ff               ......7.....

0000704c <b_gp>:
    704c:	0000 0000 003f ff00 ff7f 0000 ffbf 00ff     ....?...........
    705c:	ffff ffff                                   ....

00007060 <es_pinksplash_08_gp>:
    7060:	7e00 ff0b c57f 1601 d2af ac9d 9ddd 7003     .~.............p
    7070:	9dff 7003                                   ...p

00007074 <hallows_gp>:
    7074:	0100 0101 f714 011c ea19 0388 0123 0101     ............#...
    7084:	f730 011c ea33 0388 013d 0101 f74c 011c     0...3...=...L...
    7094:	f45b 01b0 ea6b 0388 017a 0101 ea8c 0388     [...k...z.......
    70a4:	f499 01b0 f7a8 011c 01ba 0101 f7c4 011c     ................
    70b4:	eacc 0388 01d8 0101 eae5 0388 f7ef 011c     ................
    70c4:	01f9 0101 01ff 0101                         ........

000070cc <scoutie_gp>:
    70cc:	ff00 009c 007f 12c3 01d8 2700 01ff 2700     ...........'...'

000070dc <Cyan_Magenta_Blue_gp>:
    70dc:	0000 ffff 2a3f ff37 ff7f ff00 2abf ff00     ....?*7......*..
    70ec:	00ff ff00                                   ....

000070f0 <purple_flower_gp>:
    70f0:	0000 0000 1442 2d04 7984 ff14 b3b4 ff49     ....B..-.y....I.
    7100:	ffe4 ffa4 fff1 ffcf ffff ffff               ............

0000710c <sea_treasure_gp>:
    710c:	0100 050d 0319 1939 122d acbf 023d 0c1d     ......9.-...=...
    711c:	034c 1939 1265 acbf 0a7c 1436 0199 0c1e     L.9.e...|.6.....
    712c:	0ab2 160e 09d1 2f5d 08e8 1637 01ff 050d     ......]/..7.....

0000713c <bhw3_61_gp>:
    713c:	0e00 1b01 1130 5801 0168 9c58 01a0 2a36     ....0..Xh.X...6*
    714c:	09db 34eb 8bff e9eb                         ...4....

00007154 <Magenta_Evening_gp>:
    7154:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
    7164:	fc4c 4501 7b6c 3302 2eff 2309               L..El{.3...#

00007170 <vibrant_gp>:
    7170:	ff00 ffff 011e 1d90 e547 0cf6 ff77 0801     ........G...w...
    7180:	b8a5 cb01 03d6 fa1c 00ff 0000               ............

0000718c <a_gp>:
    718c:	0000 0000 001f 0037 003f 2dff ff7f ff00     ......7.?..-....
    719c:	ffa3 2d00 ffc4 0000 ffff 00ff               ...-........

000071a8 <RedsandCyans_gp>:
    71a8:	0f00 8760 284e 4a57 5366 2250 7172 1d47     ..`.N(WJfSP"rqG.
    71b8:	967f 193f 3c8f 424f 0fb6 8760 0fdf 8760     ..?..<OB..`...`.
    71c8:	0fff 8760                                   ..`.

000071cc <Ribbon_Colors_gp>:
    71cc:	e300 0902 c21f 0933 a73f 08af 1b5f 4ed1     ......3.?..._..N
    71dc:	017f f7f8 019f a64e 01bf 6605 2adf 124f     ......N....f.*O.
    71ec:	ffff 00ff                                   ....

000071f0 <es_pinksplash_07_gp>:
    71f0:	e500 0101 f23d 3f04 ff65 ff0c f97f fc51     ....=..?e.....Q.
    7200:	ff99 eb0b f4c1 4405 e8ff 0501               .......D....

0000720c <rainbow2_gp>:
    720c:	7e00 8e01 ab19 1a01 e030 0109 ed47 018a     .~......0...G...
    721c:	345e 01ad 0175 01c9 018c 36d3 01a3 a87c     ^4..u......6..|.
    722c:	01ba 9508 0cd1 9701 0ce8 9701 abff be01     ................
    723c:	6170 6963 6966 6163 6c5f 6f6f 0070 0000     pacifica_loop...
    724c:	4d56 5044 5f56 7c31 5f31 4d56 5044 0a56     VMDPV_1|1_VMDPV.
    725c:	ff00 ffff                                   ....

00007260 <ultraviolet_mold_gp>:
    7260:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    7270:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    7280:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    7290:	011e 0101 0120 0102 0123 0102 0125 0202     .... ...#...%...
    72a0:	0228 0203 022a 0203 022d 0303 032f 0304     (...*...-.../...
    72b0:	0332 0404 0335 0504 0437 0505 043a 0605     2...5...7...:...
    72c0:	043c 0705 053f 0706 0541 0806 0544 0907     <...?...A...D...
    72d0:	0546 0a07 0649 0b08 064b 0c08 064e 0d08     F...I...K...N...
    72e0:	0650 0e09 0653 0f09 0655 1009 0783 3034     P...S...U.....40
    72f0:	0785 3339 0788 343f 078a 3443 078d 3245     ..93..?4..C4..E2
    7300:	078f 3048 0792 2e4a 0794 2b4e 0697 2950     ..H0..J...N+..P)
    7310:	069a 2554 069c 2257 069f 1f5a 06a1 1c5d     ..T%..W"..Z...].
    7320:	05a4 1960 05a6 1664 05a9 1267 05ab 0f6b     ..`...d...g...k.
    7330:	05ae 0d6d 05b0 0a72 04b3 0775 04b5 0579     ..m...r...u...y.
    7340:	05b8 057c 07ba 0480 09bd 0483 0cbf 0488     ..|.............
    7350:	10c2 048b 14c4 0390 19c7 0393 1ec9 0398     ................
    7360:	26cc 039d 2ecf 02a1 37d1 02a6 43d4 02a9     .&.......7...C..
    7370:	50d6 02af 5fd9 01b2 71db 01b8 85de 01bb     .P..._...q......
    7380:	9de0 01c1 b8e3 01c5 c2e5 01b8 c7e8 01a8     ................
    7390:	ceea 0198 d2ed 0187 d9ef 0177 def2 0167     ..........w...g.
    73a0:	e5f4 0158 eaf7 0149 f2f9 013b f7fc 012f     ..X...I...;.../.
    73b0:	ffff 0124                                   ..$.

000073b4 <faint_rainbow_gp>:
    73b4:	4300 4700 4502 4101 4805 3b01 4a07 3501     .C.G.E.A.H.;.J.5
    73c4:	4d0a 3001 4e0c 2b01 500f 2601 5311 2201     .M.0.N.+.P.&.S."
    73d4:	5614 1d01 5816 1901 5b19 1601 5e1b 1201     .V...X...[...^..
    73e4:	611e 0f01 6220 0c01 6523 0a01 6825 0701     .a.. b..#e..%h..
    73f4:	6b28 0501 6e2a 0401 712d 0201 752f 0101     (k..*n..-q../u..
    7404:	7832 0101 7935 0101 7d37 0101 803a 0101     2x..5y..7}..:...
    7414:	843c 0103 873f 0105 8b41 0108 8e44 010c     <...?...A...D...
    7424:	9046 010e 9049 0110 924b 0111 944e 0113     F...I...K...N...
    7434:	9450 0116 9653 0117 9855 011a af83 0158     P...S...U.....X.
    7444:	b185 015d b388 0163 b38a 0168 b68d 016c     ..]...c...h...l.
    7454:	b88f 0172 b892 0177 ba94 017d bc97 0183     ..r...w...}.....
    7464:	bc9a 018a be9c 0190 c09f 0197 c0a1 019d     ................
    7474:	c2a4 01a4 c5a6 01ab c7a9 01b2 c7ab 01ba     ................
    7484:	c9ae 01c1 cbb0 02c9 cbb3 02d1 c9b5 02d5     ................
    7494:	c5b8 02d7 beba 02d7 b8bd 02d9 b3bf 02db     ................
    74a4:	adc2 02db a7c4 02dd a1c7 02df 9dc9 02df     ................
    74b4:	98cc 02e1 92cf 02e3 8ed1 02e5 89d4 02e5     ................
    74c4:	84d6 03e7 7ed9 03e9 79db 03e9 76de 03eb     .....~...y...v..
    74d4:	71e0 03ed 6de3 03ed 68e5 03ef 65e8 03f1     .q...m...h...e..
    74e4:	61ea 03f1 5ced 03f4 58ef 03f6 54f2 04f8     .a...\...X...T..
    74f4:	50f4 04f8 4ef7 04fa 4af9 04fc 47fc 04fc     .P...N...J...G..
    7504:	43ff 04ff                                   .C..

00007508 <bhw2_10_gp>:
    7508:	0000 000c 993d 70ef 007f 000c 6aa5 02ef     ....=..p.....j..
    7518:	a7c4 47e5 6ae5 02ef 00ff 000c               ...G.j......

00007524 <es_ocean_breeze_068_gp>:
    7524:	6400 999c 0133 8963 0165 5444 2368 a88e     .d..3.c.e.DTh#..
    7534:	00b2 753f 01ff 0a0a                         ..?u....

0000753c <bhw3_21_gp>:
    753c:	0100 6228 0130 4441 024c 60a1 0068 1951     ..(b0.ADL..`h.Q.
    754c:	4182 52b6 0099 aa56 11b5 b6cf 11cc b6cf     .A.R..V.........
    755c:	01ff 2e17                                   ....

00007560 <otis_gp>:
    7560:	1a00 5901 117f 00c1 00d8 6222 00ff 6222     ...Y......"b.."b

00007570 <fire_gp>:
    7570:	0100 0001 204c 0005 c092 0018 dcc5 0569     ....L ........i.
    7580:	fcf0 1fff fcfa 6fff ffff ffff               .......o....

0000758c <blueice_gp>:
    758c:	0000 0000 011f 0f02 013f 590a 0142 5d0c     ........?..YB..]
    759c:	0144 600d 0147 640f 0149 6910 014c 6c12     D..`G..dI..iL..l
    75ac:	014e 7014 0151 7316 0153 7817 0156 7b1a     N..pQ..sS..xV..{
    75bc:	0158 801d 015b 841f 015d 8921 0160 8c24     X...[...].!.`.$.
    75cc:	0162 9128 0165 972b 0167 9b2e 016a a032     b.(.e.+.g...j.2.
    75dc:	016c a436 016f a638 0171 aa3c 0174 ac41     l.6.o.8.q.<.t.A.
    75ec:	0176 ae45 0179 b248 017b b44d 017e b651     v.E.y.H.{.M.~.Q.
    75fc:	0180 b856 0183 bc5b 0186 be60 0188 c065     ..V...[...`...e.
    760c:	018b c56b 018d c770 0190 c976 0192 cb7c     ..k...p...v...|.
    761c:	0195 cf82 0197 d28a 019a d490 019c d697     ................
    762c:	019f db9f 01a1 dda6 01a4 dfad 01a6 e4b6     ................
    763c:	01a9 e6bd 01ab e9c7 01ae ebcf 01b0 f0d9     ................
    764c:	01b3 f2e1 01b5 f5eb 02b8 f7f6 02ba f7fc     ................
    765c:	02bd f2ff 3dde f7ff ffff ffff               .....=......

00007668 <BlacK_Blue_Magenta_White_gp>:
    7668:	0000 0000 002a 2d00 0054 ff00 2a7f ff00     ....*..-T....*..
    7678:	ffaa ff00 ffd4 ff37 ffff ffff               ......7.....

00007684 <es_landscape_33_gp>:
    7684:	0100 0005 2013 0117 a126 0137 e53f 0190     ..... ..&.7.?...
    7694:	2742 4a8e 01ff 0104                         B'.J....

0000769c <froth316_gp>:
    769c:	f700 0000 f711 0000 9d11 0000 9d21 0000     ............!...
    76ac:	5621 0000 5633 0000 2733 0000 2744 0000     !V..3V..3'..D'..
    76bc:	0c44 0000 0c54 0000 0054 00f8 0066 00f8     D...T...T...f...
    76cc:	0066 00a9 0077 00a9 0077 0065 0087 0065     f...w...w.e...e.
    76dc:	0087 0034 0099 0034 0099 0013 00aa 0013     ..4...4.........
    76ec:	00aa f700 00ba f700 00ba a000 00cc a000     ................
    76fc:	00cc 5900 00dd 5900 00dd 2a00 00ed 2a00     ...Y...Y...*...*
    770c:	00ed 0e00 00ff 0e00                         ........

00007714 <fierce_ice_gp>:
    7714:	0000 0000 003b 2d07 0077 ff21 0395 ff52     ....;..-w.!...R.
    7724:	17b4 ff9c 64d9 ffcb ffff ffff               .....d......

00007730 <Sunset_Real_gp>:
    7730:	7800 0000 b316 0016 ff33 0068 a755 1216     .x......3.h.U...
    7740:	6487 6700 10c6 8200 00ff a000               .d.g........

0000774c <Fuschia_7_gp>:
    774c:	2b00 9903 643f 6704 bc7f 4205 a1bf 730b     .+..?d.g...B...s
    775c:	87ff b614                                   ....

00007760 <Split_03_gp>:
    7760:	0000 7b12 003f 1d4b 007f 01b2 1bbf 0130     ...{?.K.......0.
    7770:	a7ff 0201                                   ....

00007774 <GMT_drywet_gp>:
    7774:	2f00 021e d52a 1893 6754 34db 037f cfdb     ./..*...Tg.4....
    7784:	01aa d630 01d4 6f01 01ff 2107               ..0....o...!

00007790 <cloudcolors_gp>:
    7790:	0000 ff00 000f 8b00 006f 8b00 007f ff00     ........o.......
    77a0:	008f 8b00 879f face 87af face adbf e6d8     ................
    77b0:	c8cf c8c8 addf e6d8 87ef ebce 00ff ffbf     ................

000077c0 <cw1_029_gp>:
    77c0:	0c00 d250 ff7f 13eb e0ff 0f42               ..P.......B.

000077cc <BlacK_Red_Magenta_Yellow_gp>:
    77cc:	0000 0000 2a2a 0000 ff54 0000 ff7f 2d00     ....**..T......-
    77dc:	ffaa ff00 ffd4 2d37 ffff 00ff               ......7-....

000077e8 <sunlitwave_gp>:
    77e8:	0500 5409 252d 6f18 1051 3b05 1870 1401     ...T-%.oQ..;p...
    77f8:	2296 0201 afc6 0724 d0ed 1068 efff 9ed3     ."....$...h.....

00007808 <bhw4_009_gp>:
    7808:	4200 c0ba 012b 4716 024f 8e68 4275 c0ba     .B..+..GO.h.uB..
    7818:	0293 8e68 01ba 4716 02e0 8e68 04ff 1c1b     ..h....G..h.....

00007828 <bhw3_13_gp>:
    7828:	0300 4806 0c26 bc32 d96d 0123 f287 0caf     ...H&.2.m.#.....
    7838:	a1b2 5720 18ff 6c06                         .. W...l

00007840 <Analogous_1_gp>:
    7840:	0300 ff00 173f ff00 437f ff00 8ebf 2d00     ....?....C.....-
    7850:	ffff 0000                                   ....

00007854 <GMT_cool_gp>:
    7854:	0000 ffff ffff ff00                         ........

0000785c <b_m16_interleave>:
    785c:	3100 2931 1b5a 0a75                         .11)Z.u.

00007864 <es_landscape_64_gp>:
    7864:	0000 0000 0225 0119 0f4c 0573 4f7f 01d5     ....%...L.s..O..
    7874:	7e80 2fd3 bc82 f7d1 9099 cdb6 3bcc fa75     .~./.........;u.
    7884:	01ff c025                                   ..%.

00007888 <es_emerald_dragon_01_gp>:
    7888:	0100 0101 014f 0713 0182 193b 1ce5 ffff     ....O.....;.....
    7898:	1cff ffff                                   ....

0000789c <es_autumn_19_gp>:
    789c:	1a00 0101 4333 0104 7654 010e 8968 3498     ....3C..Tv..h..4
    78ac:	7170 0141 857a 3b95 897c 3498 7187 0141     pqA.z..;|..4.qA.
    78bc:	8b8e 2e9a 71a3 010d 37cc 0103 11f9 0101     .....q...7......
    78cc:	11ff 0101                                   ....

000078d0 <alarm_p4_0_2_gp>:
    78d0:	e300 dfff ff0c 0424 ff19 0102 ff26 1001     ......$.....&...
    78e0:	ff33 6201 ff3f e601 8c4c ff01 3f59 ff01     3..b?...L...Y?..
    78f0:	1866 ff01 0572 ff01 017f ff01 018c ff04     f...r...........
    7900:	0199 ff10 01a5 ff24 01b2 ff3e 01bf ff5f     ......$...>..._.
    7910:	01cc ff83 01d8 ffad 01e5 ffdd 01f2 ebff     ................
    7920:	01ff baff                                   ....

00007924 <water1_gp>:
    7924:	0100 2e01 4f1c be88 1035 b851 4f49 be88     .....O..5.Q.IO..
    7934:	4b63 e9c9 067c 670c 4b9e e9c9 54ba 6c6d     cK..|..g.K...Tml
    7944:	10c6 b851 4fe8 be88 01ff 2e01               ..Q..O......

00007950 <bhw1_28_gp>:
    7950:	4b00 dd01 fc1e ff49 a930 f200 0077 f295     .K....I.0...w...
    7960:	2baa f200 fcce ff49 4ee8 d60c 00ff f295     .+....I..N......

00007970 <Skydye11_gp>:
    7970:	0800 0400 0801 0400 0c02 0800 1003 0c00     ................
    7980:	1404 0c00 1405 1000 1806 1000 1c07 1400     ................
    7990:	1c09 1400 200a 1800 240b 1800 240c 1c00     ..... ...$...$..
    79a0:	280d 1c00 2c0e 2000 300f 2400 3410 2400     .(...,. .0.$.4.$
    79b0:	3811 2800 3c12 2c00 3c14 2c00 4015 3000     .8.(.<.,.<.,.@.0
    79c0:	4416 3400 4817 3400 4c18 3800 4c19 3804     .D.4.H.4.L.8.L.8
    79d0:	501a 3c04 541b 3c04 581c 4004 5c1d 4404     .P.<.T.<.X.@.\.D
    79e0:	601e 4808 601f 4c08 5c20 5008 5821 5408     .`.H.`.L \.P!X.T
    79f0:	5422 5c08 5423 6008 5024 6808 4c25 6c08     "T.\#T.`$P.h%L.l
    7a00:	4826 7008 4827 7808 4428 7c08 4029 8408     &H.p'H.x(D.|)@..
    7a10:	3c2a 8808 3c2b 9008 382c 9408 342d 9808     *<..+<..,8..-4..
    7a20:	302e a008 302f a404 2c30 ac04 2831 b004     .0../0..0,..1(..
    7a30:	2432 b404 2433 bc04 2034 c004 1c35 c804     2$..3$..4 ..5...
    7a40:	1836 cc04 1837 d404 1438 d804 1039 dc04     6...7...8...9...
    7a50:	0c3a e404 0c3b e804 083c f004 043d f404     :...;...<...=...
    7a60:	003e fc00 003f f804 0040 f40c 0041 f014     >...?...@...A...
    7a70:	0042 ec1c 0043 e824 0044 e42c 0045 e034     B...C.$.D.,.E.4.
    7a80:	0046 dc3c 0047 d844 0048 d44c 0049 d054     F.<.G.D.H.L.I.T.
    7a90:	004a cc5c 004b c864 004c c46c 004d c074     J.\.K.d.L.l.M.t.
    7aa0:	004e bc7c 004f b884 0050 b48c 0051 b094     N.|.O...P...Q...
    7ab0:	0052 ac9c 0053 a8a4 0054 a4ac 0055 a0b4     R...S...T...U...
    7ac0:	0056 9cbc 0057 98c4 0058 94cc 0059 90d4     V...W...X...Y...
    7ad0:	005a 8cdc 005b 88e4 005c 84ec 005d 7ce8     Z...[...\...]..|
    7ae0:	005e 78e0 005f 70dc 0060 68d8 0061 60d0     ^..x_..p`..ha..`
    7af0:	0062 5cc8 0063 58c0 0064 50b8 0065 4cac     b..\c..Xd..Pe..L
    7b00:	0066 44a4 0067 409c 0068 3894 0069 348c     f..Dg..@h..8i..4
    7b10:	006a 2c80 006b 2878 006c 2070 006d 1c68     j..,k.x(l.p m.h.
    7b20:	006e 145c 006f 1054 0070 084c 0071 0040     n.\.o.T.p.L.q.@.
    7b30:	0072 003c 0073 0038 0074 0034 0075 0030     r.<.s.8.t.4.u.0.
    7b40:	0076 002c 0077 0028 0078 0024 0479 0020     v.,.w.(.x.$.y. .
    7b50:	047a 001c 047b 0018 047c 0014 047d 0010     z...{...|...}...
    7b60:	047e 000c 047f 0008 0480 0004 0881 0400     ~...............
    7b70:	0c82 0800 1083 0c00 1484 0c00 1485 1000     ................
    7b80:	1886 1000 1c87 1400 2088 1400 2089 1800     ......... ... ..
    7b90:	248a 1800 288b 1c00 2c8c 2000 308d 2400     .$...(...,. .0.$
    7ba0:	348e 2404 388f 2804 3891 2804 3c92 2c04     .4.$.8.(.8.(.<.,
    7bb0:	4093 3004 4494 3004 4495 3404 4896 3404     .@.0.D.0.D.4.H.4
    7bc0:	4c97 3804 5098 3804 5099 3c04 549a 3c04     .L.8.P.8.P.<.T.<
    7bd0:	589b 4004 5c9c 4404 609d 4808 609e 4c08     .X.@.\.D.`.H.`.L
    7be0:	689f 4808 70a0 4408 7ca1 4008 84a2 3c08     .h.H.p.D.|.@...<
    7bf0:	90a3 3408 98a4 3008 a4a5 2c08 aca6 2808     ...4...0...,...(
    7c00:	b4a7 2404 c0a8 2004 c8a9 1c04 d4aa 1404     ...$... ........
    7c10:	dcab 1004 e8ac 0c04 f0ad 0804 fcae 0000     ................
    7c20:	fcaf 0008 fcb0 0014 fcb1 001c fcb2 0028     ..............(.
    7c30:	fcb3 0030 fcb4 003c fcb5 0044 fcb6 0050     ..0...<...D...P.
    7c40:	fcb7 0058 fcb8 0064 fcb9 006c fcba 0078     ..X...d...l...x.
    7c50:	fcbb 0084 fcbc 008c fcbd 0098 fcbe 00a0     ................
    7c60:	fcbf 00ac fcc0 00b4 fcc1 00c0 fcc2 00c8     ................
    7c70:	fcc3 00d4 fcc4 00dc fcc5 00e8 fcc6 00f0     ................
    7c80:	fcc7 00fc fcc8 00f0 fcc9 00e8 fcca 00dc     ................
    7c90:	fccb 00d0 fccc 00c4 fccd 00bc fcce 00b0     ................
    7ca0:	fccf 00a4 fcd0 0098 fcd1 0090 fcd2 0084     ................
    7cb0:	fcd3 0078 fcd4 0070 fcd5 0064 fcd6 0058     ..x...p...d...X.
    7cc0:	fcd7 004c fcd8 0044 fcd9 0038 fcda 002c     ..L...D...8...,.
    7cd0:	fcdb 0020 fcdc 0018 fcdd 000c fcde 0000     .. .............
    7ce0:	f4df 0400 ece0 0800 e0e1 0c00 d8e2 1000     ................
    7cf0:	cce3 1800 c4e4 1c00 b8e5 2000 b0e6 2404     ........... ...$
    7d00:	a8e7 2804 9ce8 2c04 94e9 3004 88ea 3804     ...(...,...0...8
    7d10:	80eb 3c04 74ec 4004 6ced 4404 60ee 4c08     ...<.t.@.l.D.`.L
    7d20:	5cef 4808 54f0 4408 50f1 4008 48f2 3808     .\.H.T.D.P.@.H.8
    7d30:	44f3 3404 3cf4 3004 38f5 2c04 30f6 2804     .D.4.<.0.8.,.0.(
    7d40:	2cf7 2004 24f8 1c04 20f9 1804 18fa 1404     .,. .$... ......
    7d50:	14fb 1000 0cfc 0800 00fd 0000 04fe 0400     ................
    7d60:	04ff 0400                                   ....

00007d64 <rainbow_gp>:
    7d64:	ff00 0000 ab20 0055 ab40 00ab 0060 00ff     .... .U.@...`...
    7d74:	0080 55ab 00a0 ff00 55c0 ab00 abe0 5500     ...U.....U.....U
    7d84:	ffff 0000                                   ....

00007d88 <Coral_reef_gp>:
    7d88:	2800 c5c7 0a32 9b98 0160 786f 2b60 a27f     .(..2...`.ox`+..
    7d98:	0a8b 6f49 01ff 4722                         ..Io.."G

00007da0 <sin16_C(unsigned short)::slope>:
    7da0:	3031 262c 171f 040e                         10,&....

00007da8 <bhw2_23_gp>:
    7da8:	0000 0000 3942 e9e3 ff60 08ff ff7c ffff     ....B9..`...|...
    7db8:	ff99 08ff 39bc e9e3 00ff 0000               .....9......

00007dc4 <bhw1_05_gp>:
    7dc4:	0100 35dd 49ff b203                         ...5.I..

00007dcc <g_gradient_palettes>:
    7dcc:	8a78 0000 84f8 0000 7840 0000 7060 0000     x.......@x..`p..
    7ddc:	71f0 0000 7d88 0000 7524 0000 873c 0000     .q...}..$u..<...
    7dec:	7864 0000 7684 0000 8b14 0000 8ae8 0000     dx...v..........
    7dfc:	8a10 0000 7774 0000 88a0 0000 774c 0000     ....tw......Lw..
    7e0c:	8628 0000 874c 0000 7570 0000 85fc 0000     (...L...pu......
    7e1c:	7154 0000 7730 0000 789c 0000 7668 0000     Tq..0w...x..hv..
    7e2c:	8b9c 0000 77cc 0000 8b00 0000 8b88 0000     .....w..........
    7e3c:	8a44 0000 7950 0000 7da8 0000 85e8 0000     D...Py...}......
    7e4c:	853c 0000 7508 0000 882c 0000 753c 0000     <....u..,...<u..
    7e5c:	8b54 0000 7170 0000 77c0 0000 78d0 0000     T...pq...w...x..
    7e6c:	71cc 0000 7f40 0000 7040 0000 8638 0000     .q..@...@p..8...
    7e7c:	718c 0000 704c 0000 7888 0000 769c 0000     .q..Lp...x...v..
    7e8c:	7970 0000 80d0 0000 8558 0000 851c 0000     py......X.......
    7e9c:	87b0 0000 7074 0000 710c 0000 8a94 0000     ....tp...q......
    7eac:	7760 0000 8848 0000 7d64 0000 7790 0000     `w..H...d}...w..
    7ebc:	8b30 0000 70f0 0000 7714 0000 758c 0000     0....p...w...u..
    7ecc:	88b8 0000 8acc 0000 7260 0000 7f78 0000     ........`r..x...
    7edc:	73b4 0000 7560 0000 8ab8 0000 70cc 0000     .s..`u.......p..
    7eec:	77e8 0000 7854 0000 8790 0000 7dc4 0000     .w..Tx.......}..
    7efc:	85cc 0000 7828 0000 713c 0000 7808 0000     ....(x..<q...x..
    7f0c:	7f5c 0000 7f4c 0000 8bb0 0000 7924 0000     \...L.......$y..
    7f1c:	8650 0000 71a8 0000 70dc 0000 8a88 0000     P....q...p......
    7f2c:	8a30 0000 87a0 0000 8aa8 0000 720c 0000     0............r..
    7f3c:	84d0 0000                                   ....

00007f40 <Orange_to_Purple_gp>:
    7f40:	d000 0132 927f 2d1b 61ff b20c               ..2....-.a..

00007f4c <es_emerald_dragon_09_gp>:
    7f4c:	0100 0101 014c 0102 0a99 012f 61ff 01ff     ....L...../..a..

00007f5c <bhw3_34_gp>:
    7f5c:	1d00 cd70 5c30 faff 345b 0cdf 047c 150d     ..p.0\..[4..|...
    7f6c:	09b7 0f67 0ad8 0250 26ff 34ff               ..g...P..&.4

00007f78 <apple_green_gp>:
    7f78:	0000 0000 0102 0101 0104 0101 0107 0101     ................
    7f88:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    7f98:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    7fa8:	011e 0102 0120 0102 0123 0103 0125 0103     .... ...#...%...
    7fb8:	0128 0104 012a 0105 012d 0105 012f 0106     (...*...-.../...
    7fc8:	0132 0107 0134 0108 0137 0108 0139 0209     2...4...7...9...
    7fd8:	013c 020a 013e 030b 0141 040c 0143 050d     <...>...A...C...
    7fe8:	0146 070e 0148 0710 014b 0811 014d 0812     F...H...K...M...
    7ff8:	0150 0813 0152 0915 0155 0916 0157 0918     P...R...U...W...
    8008:	0182 083a 0185 073c 0187 073f 018a 0642     ..:...<...?...B.
    8018:	018d 0645 018f 0547 0192 054a 0194 044e     ..E...G...J...N.
    8028:	0197 0450 0199 0354 019c 0356 019e 025a     ..P...T...V...Z.
    8038:	01a1 025c 01a3 0160 01a6 0163 01a8 0167     ..\...`...c...g.
    8048:	01ab 0169 02ad 016d 02b0 0170 03b3 0175     ..i...m...p...u.
    8058:	03b5 0177 04b8 017c 05ba 0180 05bd 0183     ..w...|.........
    8068:	06bf 0188 07c2 018b 09c4 0190 0ac7 0193     ................
    8078:	0bc9 0198 0dcc 019c 0fce 01a1 11d1 01a4     ................
    8088:	13d3 01a9 16d6 01ad 18d9 01b2 1bdb 01b8     ................
    8098:	1fde 01bb 23e0 01c1 27e3 01c5 2ce5 01cb     .....#...'...,..
    80a8:	31e8 01cf 36ea 01d5 3ced 01d9 43ef 01df     .1...6...<...C..
    80b8:	4af2 01e3 52f4 01e9 5bf7 01ed 64f9 01f4     .J...R...[...d..
    80c8:	6efc 01f8 79ff 00ff                         .n...y..

000080d0 <Wizzl019_gp>:
    80d0:	8c00 ac14 8c01 ac14 9402 b814 a003 c810     ................
    80e0:	9c04 c410 9805 bc10 9406 b410 8c07 ac0c     ................
    80f0:	8808 a40c 8409 9c0c 800a 940c 780b 8c08     .............x..
    8100:	740c 8808 700d 8008 6c0e 7808 640f 7004     .t...p...l.x.d.p
    8110:	6010 6804 5c11 6004 5812 5804 5013 5000     .`.h.\.`.X.X.P.P
    8120:	5414 4c04 5c15 480c 6416 4414 6c17 3c1c     .T.L.\.H.d.D.l.<
    8130:	7418 3824 7c19 342c 841a 3034 8c1b 283c     .t$8.|,4..40..<(
    8140:	901c 2440 981d 2048 a01e 1c50 a81f 1458     ..@$..H ..P...X.
    8150:	b020 1060 b821 0c68 c022 0870 c823 0078      .`.!.h.".p.#.x.
    8160:	c424 0074 bc25 0070 b426 006c ac27 0064     $.t.%.p.&.l.'.d.
    8170:	a428 0060 9c29 005c 942a 0058 8c2b 0050     (.`.).\.*.X.+.P.
    8180:	882c 004c 802d 0048 782e 0044 702f 003c     ,.L.-.H..xD./p<.
    8190:	6830 0038 6031 0034 5832 0030 5033 0028     0h8.1`4.2X0.3P(.
    81a0:	4c34 0430 4835 083c 4436 0c44 3c37 1450     4L0.5H<.6DD.7<P.
    81b0:	3838 1858 3439 1c64 303a 206c 283b 2878     88X.94d.:0l ;(x(
    81c0:	243c 2c80 203d 308c 1c3e 3494 143f 3ca0     <$.,= .0>..4?..<
    81d0:	1040 40a8 0c41 44b4 0842 48bc 0043 50c8     @..@A..DB..HC..P
    81e0:	0044 4cc0 0045 48b4 0046 44ac 0047 3ca0     D..LE..HF..DG..<
    81f0:	0048 3898 0049 348c 004a 3084 004b 2878     H..8I..4J..0K.x(
    8200:	004c 2470 004d 2064 004e 1c5c 004f 1450     L.p$M.d N.\.O.P.
    8210:	0050 1048 0051 0c3c 0052 0834 0053 0028     P.H.Q.<.R.4.S.(.
    8220:	0054 0c28 0455 1c24 0456 2c24 0857 3c20     T.(.U.$.V.$,W. <
    8230:	0c58 481c 0c59 581c 105a 6818 145b 7814     X..HY..XZ..h[..x
    8240:	145c 8414 185d 9410 185e a410 1c5f b40c     \...]...^..._...
    8250:	2060 c008 2061 d008 2462 e004 2863 f000     ` ..a ..b$..c(..
    8260:	2864 e800 2465 dc00 2466 d400 2067 c800     d(..e$..f$..g ..
    8270:	1c68 c000 1c69 b400 186a ac00 146b a000     h...i...j...k...
    8280:	146c 9800 106d 8c00 106e 8400 0c6f 7800     l...m...n...o..x
    8290:	0870 7000 0871 6400 0472 5c00 0073 5000     p..pq..dr..\s..P
    82a0:	0c74 5400 1875 5c00 2476 6400 3077 6c00     t..Tu..\v$.dw0.l
    82b0:	3c78 7400 4879 7c00 547a 8400 647b 8c00     x<.tyH.|zT..{d..
    82c0:	707c 9000 7c7d 9800 887e a000 947f a800     |p..}|..~.......
    82d0:	a080 b000 ac81 b800 b882 c000 c883 c800     ................
    82e0:	c084 c000 b485 b400 ac86 ac00 a087 a000     ................
    82f0:	9888 9800 8c89 8c00 848a 8400 788b 7800     .............x.x
    8300:	708c 7000 648d 6400 5c8e 5c00 508f 5000     .p.p.d.d.\.\.P.P
    8310:	4890 4800 3c91 3c00 3492 3400 2893 2800     .H.H.<.<.4.4.(.(
    8320:	3494 2800 4095 2800 4c96 2800 5897 2800     .4.(.@.(.L.(.X.(
    8330:	6498 2800 7099 2800 7c9a 2800 8c9b 2400     .d.(.p.(.|.(...$
    8340:	989c 2400 a49d 2400 b09e 2400 bc9f 2400     ...$...$...$...$
    8350:	c8a0 2400 d4a1 2400 e0a2 2400 f0a3 2000     ...$...$...$... 
    8360:	e8a4 2000 dca5 1c00 d4a6 1c00 c8a7 1800     ... ............
    8370:	c0a8 1800 b4a9 1400 acaa 1400 a0ab 1000     ................
    8380:	98ac 1000 8cad 0c00 84ae 0c00 78af 0800     .............x..
    8390:	70b0 0800 64b1 0400 5cb2 0400 50b3 0000     .p...d...\...P..
    83a0:	58b4 0008 60b5 0010 68b6 0018 74b7 0020     .X...`...h...t .
    83b0:	7cb8 0028 84b9 0030 8cba 0038 98bb 0040     .|(...0...8...@.
    83c0:	a0bc 0048 a8bd 0050 b0be 0058 bcbf 0060     ..H...P...X...`.
    83d0:	c4c0 0068 ccc1 0070 d4c2 0078 e0c3 0080     ..h...p...x.....
    83e0:	d8c4 007c ccc5 0074 c0c6 0070 b4c7 0068     ..|...t...p...h.
    83f0:	a8c8 0064 a0c9 005c 94ca 0058 88cb 0050     ..d...\...X...P.
    8400:	7ccc 0048 70cd 0044 68ce 003c 5ccf 0038     .|H..pD..h<..\8.
    8410:	50d0 0030 44d1 002c 38d2 0024 40d3 0824     .P0..D,..8$..@$.
    8420:	4cd4 1424 58d5 1c24 64d6 2820 70d7 3020     .L$..X$..d (.p 0
    8430:	7cd8 3c20 88d9 4420 94da 501c 9cdb 581c     .| <.. D...P...X
    8440:	a8dc 641c b4dd 6c1c c0de 7818 ccdf 8018     ...d...l...x....
    8450:	d8e0 8c18 e4e1 9418 f0e2 a014 e4e3 9814     ................
    8460:	d4e4 8c14 c4e5 8418 b4e6 7818 a8e7 7018     ...........x...p
    8470:	98e8 641c 88e9 5c1c 78ea 5020 6ceb 4820     ...d...\.x P.l H
    8480:	5cec 3c20 4ced 3424 3cee 2824 30ef 2024     .\ <.L$4.<$(.0$ 
    8490:	20f0 1428 10f1 0c28 00f2 002c 08f3 0c2c     . (...(...,...,.
    84a0:	14f4 182c 1cf5 2428 28f6 3028 30f7 3c24     ..,...($.((0.0$<
    84b0:	3cf8 4824 44f9 5420 50fa 6420 58fb 7020     .<$H.D T.P d.X p
    84c0:	64fc 7c1c 6cfd 881c 78fe 9418 80ff a018     .d.|.l...x......

000084d0 <blade_runner_2049_gp>:
    84d0:	c900 ad50 ab19 9b39 6832 7323 5e4b 6e21     ..P...9.2h#sK^!n
    84e0:	7f64 ac78 4d7d a98d 74a0 b255 14aa 731b     d.x.}M...tU....s
    84f0:	4bc8 4915 2cff 2a09                         .K.I.,.*

000084f8 <rgi_15_gp>:
    84f8:	0400 1f01 371f 1001 c53f 0703 3b5f 1102     .....7..?..._;..
    8508:	067f 2202 279f 2106 70bf 200d 38df 2309     ...".'.!.p. .8.#
    8518:	16ff 2606                                   ...&

0000851c <slope_gp>:
    851c:	ff00 ffff ff05 00ff 000e 00ff 001c ffff     ................
    852c:	002a ff00 ff54 ff00 ff8d 0000 00ff 0000     *...T...........

0000853c <bhw2_49_gp>:
    853c:	0900 0f0f 0028 2d37 0956 0f0f 1d82 3e29     ....(.7-V.....)>
    854c:	09aa 0f0f 40d3 c708 06ff 1601               .....@......

00008558 <Tropical_Colors_gp>:
    8558:	0100 0104 010e 010a 0115 0013 0123 012a     ............#.*.
    8568:	0331 014b 383b 0167 d046 0487 d954 0236     1.K.;8g.F...T.6.
    8578:	e062 010a 7582 030f 308d 0614 2a9b 4d12     b....u...0...*.M
    8588:	24aa ff11 37c5 f261 50d2 e4ff 2fdc 4ddb     .$...7a..P.../.M
    8598:	18e1 0abb 18e4 09b4 18e6 08ab 17e8 06a1     ................
    85a8:	17eb 0595 16ed 0488 16f0 027c 15f2 0170     ..........|...p.
    85b8:	15f5 0164 14f7 0158 13fa 014d 13fc 0142     ..d...X...M...B.
    85c8:	12ff 0037                                   ..7.

000085cc <bhw2_turq_gp>:
    85cc:	0100 5f21 0126 256b 2a4c 2dff ff7f 2dff     ..!_&.k%L*.-...-
    85dc:	2ab2 2dff 01d8 256b 01ff 5f21               .*.-..k%..!_

000085e8 <bhw2_22_gp>:
    85e8:	0000 0000 e363 0101 f982 5fc7 e39b 0101     ....c......_....
    85f8:	00ff 0000                                   ....

000085fc <Colorfull_gp>:
    85fc:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
    860c:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
    861c:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

00008628 <es_emerald_dragon_08_gp>:
    8628:	6100 01ff 2f65 0185 0db2 012b 02ff 010a     .a..e/....+.....

00008638 <standard_gp>:
    8638:	0000 0000 0a54 ff11 0054 0011 0aa9 0cff     ....T...T.......
    8648:	0aa9 0000 ffff 0c11                         ........

00008650 <stratosphere_sunset_gp>:
    8650:	0100 0902 0104 0902 0108 0a02 010d 0b02     ................
    8660:	0111 0b02 0115 0d03 011a 0f03 011e 1003     ................
    8670:	0123 1204 0127 1304 012b 1504 0130 1705     #...'...+...0...
    8680:	0134 1b05 0139 2006 013d 2607 0141 3109     4...9.. =..&A..1
    8690:	0146 3d0b 014a 5011 014f 6717 0153 871f     F..=J..PO..gS...
    86a0:	0257 ac2a 045c be30 0960 d236 0b65 d637     W.*.\.0.`.6.e.7.
    86b0:	0d69 dd3a 106d db3c 1372 d83e 1876 d242     i.:.m.<.r.>.v.B.
    86c0:	1e7b c945 237f b446 2783 a246 4088 9054     {.E..#F..'F..@T.
    86d0:	618c 8061 9491 7b79 d295 7792 b899 5c7a     .aa...y{...w..z\
    86e0:	9f9e 4564 85a2 2144 6ea7 0b2a 98ab 0635     ..dE..D!.n*...5.
    86f0:	cbaf 0341 deb4 0563 f2b8 078e debd 057a     ..A...c.......z.
    8700:	cbc1 0369 d0c5 0149 d2ca 0130 dece 012d     ..i...I...0...-.
    8710:	ead3 012a 96d7 0117 56db 010a 23e0 0103     ..*......V...#..
    8720:	09e4 0101 04e9 0101 01ed 0101 01f1 0101     ................
    8730:	01f6 0101 01fa 0101 01ff 0101               ............

0000873c <es_ocean_breeze_036_gp>:
    873c:	0100 0706 0159 6f63 9099 ffd1 00ff 5249     ....Y.co......IR

0000874c <lava_gp>:
    874c:	0000 0000 122e 0000 7160 0000 8e6c 0103     ........`q..l...
    875c:	af77 0111 d592 022c ffae 0452 ffbc 0473     w.....,...R...s.
    876c:	ffca 049c ffda 04cb ffea 04ff fff4 47ff     ...............G
    877c:	ffff ffff                                   ....

00008780 <sin16_C(unsigned short)::base>:
    8780:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

00008790 <bhw1_sunconure_gp>:
    8790:	1400 0ddf e8a0 0141 e8fc 0105 e8ff 0105     ......A.........

000087a0 <blue_fire_gp>:
    87a0:	0000 0000 0040 ff00 00c8 ffff ffff ffff     ....@...........

000087b0 <ofaurora_gp>:
    87b0:	ff00 f2f1 ed0a 0901 2a0f 0201 0116 0101     .........*......
    87c0:	ed23 0901 ff30 f2f1 ef3a 0139 0142 0101     #...0...:.9.B...
    87d0:	ef4c 0139 ff54 f2f1 f25e 01d9 0165 0101     L.9.T...^...e...
    87e0:	f26d 01d9 ff77 f2f1 097f 2490 0184 0101     m...w......$....
    87f0:	098c 2490 ff93 f2f1 019e ba9c 01a8 0101     ...$............
    8800:	01b2 ba9c ffba f2f1 10c6 ff0d 01ce 0101     ................
    8810:	10d8 ff0d ffe0 f2f1 4eea 9c01 0eed 1e01     .........N......
    8820:	01ef 0101 4ef4 9c01 ffff f2f1               .....N......

0000882c <bhw2_14_gp>:
    882c:	0000 0800 002d 2d00 074f ff0c 2a77 ff37     ....-..-O...w*7.
    883c:	079e ff0c 00d1 2d00 00ff 0800               .......-....

00008848 <GMT_seafloor_gp>:
    8848:	1900 6d00 1c0a 7700 2015 7f00 231f 8c00     ...m...w. ...#..
    8858:	1b2a 9101 1435 9701 0e4a 9c04 0954 a409     *...5...J...T...
    8868:	055f aa0f 026a b018 0174 b623 018a bc31     _...j...t.#...1.
    8878:	0094 c542 019f cb4f 03aa d25d 0ab4 d86d     ..B...O...]...m.
    8888:	18bf df80 2bd4 e695 48df f0ad 70e9 f7c5     .....+...H...p..
    8898:	a3f4 ffe1 dcff fff8                         ........

000088a0 <ib15_gp>:
    88a0:	7100 935b 9d48 4e58 d059 2155 ff6b 0b1d     .q[.H.XNY.U!k...
    88b0:	898d 271f 3bff 5921                         ...'.;!Y

000088b8 <twilight_gp>:
    88b8:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    88c8:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    88d8:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    88e8:	011e 0101 0120 0102 0123 0102 0125 0102     .... ...#...%...
    88f8:	0228 0203 022a 0203 022d 0203 032f 0304     (...*...-.../...
    8908:	0332 0304 0435 0405 0437 0405 053a 0505     2...5...7...:...
    8918:	063c 0606 063f 0606 0741 0707 0844 0807     <...?...A...D...
    8928:	0946 0908 0949 0a08 0a4b 0b08 0b4e 0d09     F...I...K...N...
    8938:	0c50 0e09 0d53 0f09 0e55 100a 0e58 110a     P...S...U...X...
    8948:	1185 330e 1088 340e 0f8a 370e 0e8d 390e     ...3...4...7...9
    8958:	0d8f 3d0e 0c92 3f0e 0c95 420e 0a97 450d     ...=...?...B...E
    8968:	0a9a 480d 099c 4b0d 089f 4e0d 07a1 520e     ...H...K...N...R
    8978:	07a4 5410 07a6 5811 07a9 5b13 07ab 5f15     ...T...X...[..._
    8988:	07ae 6216 07b0 6619 06b3 691b 06b5 6d1d     ...b...f...i...m
    8998:	06b8 7020 07ba 7525 08bd 782a 09bf 7d2f     .. p..%u..*x../}
    89a8:	0ac2 8036 0bc4 843b 0cc7 8942 0ec9 8c49     ..6...;...B...I.
    89b8:	10cc 9150 12ce 9557 14d0 995f 16d3 9e67     ..P...W..._...g.
    89c8:	18d5 a26f 1bd8 a877 1eda ac80 20dd b08a     ..o...w...... ..
    89d8:	23df b693 27e2 ba9c 2ae4 c0a6 2ee7 c5b0     .#...'...*......
    89e8:	34e9 c9b6 3aeb cfbb 41ee d4c1 49f0 dbc7     .4...:...A...I..
    89f8:	50f2 dfcd 5af5 e6d5 64f7 ebdb 6dfa f2e1     .P...Z...d...m..
    8a08:	78fc f7e7 84ff ffed                         .x......

00008a10 <gr64_hult_gp>:
    8a10:	0100 6d7c 0142 4f5d 3468 0141 7382 017f     ..|mB.]Oh4A..s..
    8a20:	3496 0141 01c9 4856 00ef 2d37 00ff 2d37     .4A...VH..7-..7-

00008a30 <cyberpunk_neon_gp>:
    8a30:	7100 911c ea3f d900 0a7f c6bd 13bf 7c3e     .q..?.........>|
    8a40:	09ff 3318                                   ...3

00008a44 <bhw1_26_gp>:
    8a44:	6b00 cd01 ff23 ffff 6b49 cd01 0a6b d295     .k..#...Ik..k...
    8a54:	ff82 ffff 0a99 d295 1baa 77af 35c6 38cb     ...........w.5.8
    8a64:	84cf 87e5 ffdb ffff 84e7 87e5 35fc 38cb     .............5.8
    8a74:	35ff 38cb                                   .5.8

00008a78 <ib_jul01_gp>:
    8a78:	c200 0101 015e 121d 3984 1c83 71ff 0101     ....^....9...q..

00008a88 <Complementary_01a_gp>:
    8a88:	0000 ff21 2a7f 2d21 ffff 0021               ..!..*!-..!.

00008a94 <Secondary_01a_gp>:
    8a94:	0300 ff00 433f 2d07 ff7f 0021 2abf 0173     ....?C.-..!..*s.
    8aa4:	00ff 01ff                                   ....

00008aa8 <purplefly_gp>:
    8aa8:	0000 0000 ef3f 7a00 fcbf 4eff 00ff 0000     ....?..z...N....

00008ab8 <parrot_gp>:
    8ab8:	7e00 0100 c572 10a8 c58c 10a8 00d8 2002     .~..r.......... 
    8ac8:	00ff 2002                                   ... 

00008acc <green_gp>:
    8acc:	0000 0000 003f 0011 007e 0052 009b 0080     ....?...~.R.....
    8adc:	00b8 00ba 2adb 2ddb ffff ffff               .....*.-....

00008ae8 <gr65_hult_gp>:
    8ae8:	f700 f7b0 ff30 ff88 dc59 e21d 07a0 b252     ....0...Y.....R.
    8af8:	01d8 6d7c 01ff 6d7c                         ..|m..|m

00008b00 <Blue_Cyan_Yellow_gp>:
    8b00:	0000 ff00 003f ff37 007f ffff 2abf 2dff     ....?.7......*.-
    8b10:	ffff 00ff                                   ....

00008b14 <rainbowsherbet_gp>:
    8b14:	ff00 0421 ff2b 1944 ff56 1907 ff7f 6752     ..!.+.D.V.....Rg
    8b24:	ffaa f2ff 2ad1 16ff 57ff 41ff               .....*...W.A

00008b30 <cequal_gp>:
    8b30:	0100 0101 0124 0103 014c 7b29 3b70 fc01     ....$...L.){p;..
    8b40:	757f b401 efac 0151 fcc3 01b4 fcde 93fa     .u....Q.........
    8b50:	fcff fcfc                                   ....

00008b54 <bhw3_30_gp>:
    8b54:	0100 0104 010c 021c 101c 0b44 123a 1c0b     ..........D.:...
    8b64:	1f4f 301b 0260 220d 1e75 7b56 0287 3e2a     O..0`.."u.V{..*>
    8b74:	4a99 9b80 3cb5 291f a7d6 dfd3 b3ed 4e46     .J...<.)......FN
    8b84:	39ff 0702                                   .9..

00008b88 <bhw1_greeny_gp>:
    8b88:	0000 0000 0727 0837 2a63 2dff 0799 0837     ....'.7.c*.-..7.
    8b98:	00ff 0000                                   ....

00008b9c <BlacK_Magenta_Red_gp>:
    8b9c:	0000 0000 2a3f 2d00 ff7f ff00 ffbf 2d00     ....?*.-.......-
    8bac:	ffff 0000                                   ....

00008bb0 <xanidu_2_gp>:
    8bb0:	7600 e2a1 4f35 a201 435e 0701 0184 9c37     .v..5O..^C....7.
    8bc0:	01ad 3d7f 27d3 482d 76ff e2a1 4d56 5044     ...=.'-H.v..VMDP
    8bd0:	5f45 0000 323a 003a 003a 0000 565f 444d     E_..:2:.:..._VMD
    8be0:	4550 0000 4d56 5044 5f43 0000 565f 444d     PE..VMDPC_.._VMD
    8bf0:	4350 0000 7245 6f72 3a72 4120 7474 6d65     PC..Error: Attem
    8c00:	7470 7420 206f 6573 2074 2061 6572 6461     pt to set a read
    8c10:	6f2d 6c6e 2079 6176 6972 6261 656c 6f20     -only variable o
    8c20:	2072 6164 6174 7420 7079 2065 6f6e 2074     r data type not 
    8c30:	7573 7070 726f 6574 0d64 000a               supported...

00008c3c <pin2sc1a>:
    8c3c:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
    8c4c:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
    8c5c:	ffff 1300 9303 921a ff17 ffff               ............

00008c68 <digital_pin_to_info_PGM>:
    8c68:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    8c78:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    8c88:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    8c98:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    8ca8:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    8cb8:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    8cc8:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    8cd8:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    8ce8:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    8cf8:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    8d08:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    8d18:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    8d28:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
    8d38:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
    8d48:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
    8d58:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
    8d68:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
    8d78:	0a0d ffff                                   ....

00008d7c <vtable for usb_serial_class>:
	...
    8d84:	6449 0000 6441 0000 643d 0000 6439 0000     Id..Ad..=d..9d..
    8d94:	6435 0000 6431 0000 642d 0000 6429 0000     5d..1d..-d..)d..

00008da4 <usb_endpoint_config_table>:
    8da4:	1500 1519                                   ....

00008da8 <usb_descriptor_list>:
    8da8:	0100 0000 879c 1fff 0012 0000 0200 0000     ................
    8db8:	87c8 1fff 0043 0000 0300 0000 8824 1fff     ....C.......$...
    8dc8:	0000 0000 0301 0409 87b0 1fff 0000 0000     ................
    8dd8:	0302 0409 880c 1fff 0000 0000 0303 0409     ................
    8de8:	8828 1fff 0000 0000 0000 0000 0000 0000     (...............
    8df8:	0000 0000                                   ....

00008dfc <_init>:
    8dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8dfe:	bf00      	nop
    8e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8e02:	bc08      	pop	{r3}
    8e04:	469e      	mov	lr, r3
    8e06:	4770      	bx	lr

00008e08 <__init_array_start>:
    8e08:	00006fe1 	.word	0x00006fe1

00008e0c <__frame_dummy_init_array_entry>:
    8e0c:	00000435 00003d25 000045f9 00004abd     5...%=...E...J..

Disassembly of section .fini:

00008e1c <_fini>:
    8e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e1e:	bf00      	nop
