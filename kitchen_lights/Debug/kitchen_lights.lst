
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\kitchen_lights\teensy36\Debug/kitchen_lights.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 00 03 20 d1 01 00 00 f5 60 00 00 ad 60 00 00     ... .....`...`..
      10:	ad 60 00 00 ad 60 00 00 ad 60 00 00 ad 60 00 00     .`...`...`...`..
      20:	ad 60 00 00 ad 60 00 00 ad 60 00 00 f5 60 00 00     .`...`...`...`..
      30:	f5 60 00 00 ad 60 00 00 4d 76 00 00 51 77 00 00     .`...`..Mv..Qw..
      40:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
      50:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
      60:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
      70:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
      80:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
      90:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
      a0:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
      b0:	f5 60 00 00 f5 60 00 00 f5 60 00 00 6d 79 00 00     .`...`...`..my..
      c0:	f5 60 00 00 99 7a 00 00 f5 60 00 00 c5 7b 00 00     .`...z...`...{..
      d0:	f5 60 00 00 bd 7c 00 00 f5 60 00 00 f5 60 00 00     .`...|...`...`..
      e0:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
      f0:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     100:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     110:	f5 60 00 00 3d 66 00 00 f5 60 00 00 f5 60 00 00     .`..=f...`...`..
     120:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     130:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     140:	f5 60 00 00 f5 60 00 00 b5 7d 00 00 f5 60 00 00     .`...`...}...`..
     150:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     160:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     170:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     180:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     190:	f5 60 00 00 f5 60 00 00 ad 7e 00 00 f5 60 00 00     .`...`...~...`..
     1a0:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     1b0:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..
     1c0:	f5 60 00 00 f5 60 00 00 f5 60 00 00 f5 60 00 00     .`...`...`...`..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b5c      	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f005 ff8a 	bl	60fc <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b57      	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a56      	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a56      	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	60da      	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	4b56      	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     1fe:	601a      	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	4b55      	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	4a56      	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	601a      	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	4b56      	ldr	r3, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	781a      	ldrb	r2, [r3, #0]
     20a:	0711      	lsls	r1, r2, #28
     20c:	d503      	bpl.n	216 <ResetHandler+0x46>
     20e:	781a      	ldrb	r2, [r3, #0]
     210:	f042 0208 	orr.w	r2, r2, #8
     214:	701a      	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	4b53      	ldr	r3, [pc, #332]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	4953      	ldr	r1, [pc, #332]	; (368 <ResetHandler+0x198>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	22aa      	movs	r2, #170	; 0xaa
     21c:	701a      	strb	r2, [r3, #0]
     21e:	4a53      	ldr	r2, [pc, #332]	; (36c <ResetHandler+0x19c>)
     220:	4b53      	ldr	r3, [pc, #332]	; (370 <ResetHandler+0x1a0>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	428b      	cmp	r3, r1
     224:	d204      	bcs.n	230 <ResetHandler+0x60>
     226:	f852 0f04 	ldr.w	r0, [r2, #4]!
     22a:	f843 0b04 	str.w	r0, [r3], #4
     22e:	e7f8      	b.n	222 <ResetHandler+0x52>
     230:	4b50      	ldr	r3, [pc, #320]	; (374 <ResetHandler+0x1a4>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	4951      	ldr	r1, [pc, #324]	; (378 <ResetHandler+0x1a8>)
     234:	2200      	movs	r2, #0
     236:	428b      	cmp	r3, r1
     238:	d202      	bcs.n	240 <ResetHandler+0x70>
     23a:	f843 2b04 	str.w	r2, [r3], #4
     23e:	e7fa      	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	494e      	ldr	r1, [pc, #312]	; (37c <ResetHandler+0x1ac>)
     242:	4a4f      	ldr	r2, [pc, #316]	; (380 <ResetHandler+0x1b0>)
     244:	2300      	movs	r3, #0
     246:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     24a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     24e:	3301      	adds	r3, #1
     250:	2b74      	cmp	r3, #116	; 0x74
     252:	d1f8      	bne.n	246 <ResetHandler+0x76>
     254:	4b4b      	ldr	r3, [pc, #300]	; (384 <ResetHandler+0x1b4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	4a4c      	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	2180      	movs	r1, #128	; 0x80
     25a:	f803 1b01 	strb.w	r1, [r3], #1
     25e:	4293      	cmp	r3, r2
     260:	d1fb      	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	4b4a      	ldr	r3, [pc, #296]	; (38c <ResetHandler+0x1bc>)
     264:	4a45      	ldr	r2, [pc, #276]	; (37c <ResetHandler+0x1ac>)
     266:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	4b49      	ldr	r3, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26a:	228a      	movs	r2, #138	; 0x8a
     26c:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     272:	2224      	movs	r2, #36	; 0x24
     274:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	22a0      	movs	r2, #160	; 0xa0
     278:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	799a      	ldrb	r2, [r3, #6]
     27c:	0792      	lsls	r2, r2, #30
     27e:	d5fc      	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	799a      	ldrb	r2, [r3, #6]
     282:	06d4      	lsls	r4, r2, #27
     284:	d4fc      	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	4a43      	ldr	r2, [pc, #268]	; (394 <ResetHandler+0x1c4>)
     288:	7993      	ldrb	r3, [r2, #6]
     28a:	f003 030c 	and.w	r3, r3, #12
     28e:	2b08      	cmp	r3, #8
     290:	d1fa      	bne.n	288 <ResetHandler+0xb8>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     292:	4b41      	ldr	r3, [pc, #260]	; (398 <ResetHandler+0x1c8>)
     294:	2260      	movs	r2, #96	; 0x60
     296:	701a      	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     298:	3302      	adds	r3, #2
     29a:	781a      	ldrb	r2, [r3, #0]
     29c:	2a80      	cmp	r2, #128	; 0x80
     29e:	d1fc      	bne.n	29a <ResetHandler+0xca>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2a0:	4b3c      	ldr	r3, [pc, #240]	; (394 <ResetHandler+0x1c4>)
     2a2:	2201      	movs	r2, #1
     2a4:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2a6:	225d      	movs	r2, #93	; 0x5d
     2a8:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2aa:	799a      	ldrb	r2, [r3, #6]
     2ac:	0690      	lsls	r0, r2, #26
     2ae:	d5fc      	bpl.n	2aa <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2b0:	7999      	ldrb	r1, [r3, #6]
     2b2:	4a38      	ldr	r2, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b4:	0649      	lsls	r1, r1, #25
     2b6:	d5fb      	bpl.n	2b0 <ResetHandler+0xe0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2b8:	4b38      	ldr	r3, [pc, #224]	; (39c <ResetHandler+0x1cc>)
     2ba:	4939      	ldr	r1, [pc, #228]	; (3a0 <ResetHandler+0x1d0>)
     2bc:	6019      	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2be:	2100      	movs	r1, #0
     2c0:	6059      	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2c2:	2320      	movs	r3, #32
     2c4:	7013      	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2c6:	7993      	ldrb	r3, [r2, #6]
     2c8:	f003 030c 	and.w	r3, r3, #12
     2cc:	2b0c      	cmp	r3, #12
     2ce:	d1fa      	bne.n	2c6 <ResetHandler+0xf6>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2d0:	4b34      	ldr	r3, [pc, #208]	; (3a4 <ResetHandler+0x1d4>)
     2d2:	4a35      	ldr	r2, [pc, #212]	; (3a8 <ResetHandler+0x1d8>)
     2d4:	601a      	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2d6:	4a35      	ldr	r2, [pc, #212]	; (3ac <ResetHandler+0x1dc>)
     2d8:	4c35      	ldr	r4, [pc, #212]	; (3b0 <ResetHandler+0x1e0>)
     2da:	6813      	ldr	r3, [r2, #0]
     2dc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     2e0:	d103      	bne.n	2ea <ResetHandler+0x11a>
		RTC_SR = 0;
     2e2:	6023      	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2e4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     2e8:	6013      	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	4b32      	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	4a32      	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	2200      	movs	r2, #0
     2f2:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	2207      	movs	r2, #7
     2f6:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	4a30      	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     302:	f006 f80b 	bl	631c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	6823      	ldr	r3, [r4, #0]
     308:	07da      	lsls	r2, r3, #31
     30a:	d505      	bpl.n	318 <ResetHandler+0x148>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30c:	482c      	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     30e:	f005 ff77 	bl	6200 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     312:	4b2c      	ldr	r3, [pc, #176]	; (3c4 <ResetHandler+0x1f4>)
     314:	4a2c      	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     316:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     318:	4b2c      	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	065b      	lsls	r3, r3, #25
     31e:	d509      	bpl.n	334 <ResetHandler+0x164>
     320:	4c28      	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     322:	4b29      	ldr	r3, [pc, #164]	; (3c8 <ResetHandler+0x1f8>)
     324:	6822      	ldr	r2, [r4, #0]
     326:	429a      	cmp	r2, r3
     328:	d104      	bne.n	334 <ResetHandler+0x164>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32a:	4825      	ldr	r0, [pc, #148]	; (3c0 <ResetHandler+0x1f0>)
     32c:	f005 ff68 	bl	6200 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     330:	2300      	movs	r3, #0
     332:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     334:	f007 fe7a 	bl	802c <__libc_init_array>

	startup_late_hook();
     338:	f005 fee6 	bl	6108 <startup_late_hook>
	main();
     33c:	f007 fa10 	bl	7760 <main>
     340:	e7fe      	b.n	340 <ResetHandler+0x170>
     342:	bf00      	nop
     344:	4005200e 	.word	0x4005200e
     348:	40048030 	.word	0x40048030
     34c:	00043f82 	.word	0x00043f82
     350:	2b000001 	.word	0x2b000001
     354:	e000ed88 	.word	0xe000ed88
     358:	e0082000 	.word	0xe0082000
     35c:	85000003 	.word	0x85000003
     360:	4007d002 	.word	0x4007d002
     364:	4007e000 	.word	0x4007e000
     368:	1fff0c7c 	.word	0x1fff0c7c
     36c:	0000a01c 	.word	0x0000a01c
     370:	1fff0730 	.word	0x1fff0730
     374:	1fff0c7c 	.word	0x1fff0c7c
     378:	1fff179c 	.word	0x1fff179c
     37c:	1fff0200 	.word	0x1fff0200
     380:	00000000 	.word	0x00000000
     384:	e000e400 	.word	0xe000e400
     388:	e000e464 	.word	0xe000e464
     38c:	e000ed08 	.word	0xe000ed08
     390:	40065000 	.word	0x40065000
     394:	40064000 	.word	0x40064000
     398:	4007e001 	.word	0x4007e001
     39c:	40048044 	.word	0x40048044
     3a0:	02060000 	.word	0x02060000
     3a4:	40048004 	.word	0x40048004
     3a8:	000710c0 	.word	0x000710c0
     3ac:	4003d010 	.word	0x4003d010
     3b0:	4003d014 	.word	0x4003d014
     3b4:	e000e014 	.word	0xe000e014
     3b8:	0002bf1f 	.word	0x0002bf1f
     3bc:	20200000 	.word	0x20200000
     3c0:	5ecfecdb 	.word	0x5ecfecdb
     3c4:	4003e01c 	.word	0x4003e01c
     3c8:	5a94c3a5 	.word	0x5a94c3a5
     3cc:	4007f000 	.word	0x4007f000
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff0c7c 	.word	0x1fff0c7c
     42c:	00000000 	.word	0x00000000
     430:	0000a020 	.word	0x0000a020

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff0c80 	.word	0x1fff0c80
     460:	0000a020 	.word	0x0000a020
     464:	1fff0c7c 	.word	0x1fff0c7c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::getMaxRefreshRate() const>:
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
		mPort = FastPin<DATA_PIN>::port();
	}

	virtual uint16_t getMaxRefreshRate() const { return 400; }
     474:	f44f 70c8 	mov.w	r0, #400	; 0x190
     478:	4770      	bx	lr
     47a:	bf00      	nop

0000047c <fire_mirror_pal()>:
}



// fire mirrored from ends or center using palette
void fire_mirror_pal() {
     47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mode_change) {
     480:	4c97      	ldr	r4, [pc, #604]	; (6e0 <fire_mirror_pal()+0x264>)
     482:	7823      	ldrb	r3, [r4, #0]
}



// fire mirrored from ends or center using palette
void fire_mirror_pal() {
     484:	b084      	sub	sp, #16
	if (mode_change) {
     486:	2b00      	cmp	r3, #0
     488:	f040 80e3 	bne.w	652 <fire_mirror_pal()+0x1d6>
     48c:	4b95      	ldr	r3, [pc, #596]	; (6e4 <fire_mirror_pal()+0x268>)
     48e:	4a96      	ldr	r2, [pc, #600]	; (6e8 <fire_mirror_pal()+0x26c>)
     490:	4896      	ldr	r0, [pc, #600]	; (6ec <fire_mirror_pal()+0x270>)
     492:	7819      	ldrb	r1, [r3, #0]
     494:	7812      	ldrb	r2, [r2, #0]
     496:	8803      	ldrh	r3, [r0, #0]
     498:	f8df 9270 	ldr.w	r9, [pc, #624]	; 70c <fire_mirror_pal()+0x290>
     49c:	4e94      	ldr	r6, [pc, #592]	; (6f0 <fire_mirror_pal()+0x274>)
     49e:	4f95      	ldr	r7, [pc, #596]	; (6f4 <fire_mirror_pal()+0x278>)
     4a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     4a4:	0052      	lsls	r2, r2, #1
     4a6:	fb86 4602 	smull	r4, r6, r6, r2
     4aa:	17d2      	asrs	r2, r2, #31
     4ac:	ebc2 06e6 	rsb	r6, r2, r6, asr #3
     4b0:	3602      	adds	r6, #2
     4b2:	b2f6      	uxtb	r6, r6
     4b4:	f107 0e11 	add.w	lr, r7, #17
     4b8:	463d      	mov	r5, r7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     4ba:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     4be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     4c2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     4c6:	3319      	adds	r3, #25
     4c8:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4ca:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     4ce:	f815 4f01 	ldrb.w	r4, [r5, #1]!
     4d2:	b2d2      	uxtb	r2, r2
     4d4:	fb12 f206 	smulbb	r2, r2, r6
     4d8:	eba4 2212 	sub.w	r2, r4, r2, lsr #8
		this_dir = random8(2);
		this_delay = 15;
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     4dc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
     4e0:	45ae      	cmp	lr, r5
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     4e2:	702a      	strb	r2, [r5, #0]
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
     4e4:	d1e9      	bne.n	4ba <fire_mirror_pal()+0x3e>
     4e6:	4d84      	ldr	r5, [pc, #528]	; (6f8 <fire_mirror_pal()+0x27c>)
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
	}
	for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     4e8:	f8df 8224 	ldr.w	r8, [pc, #548]	; 710 <fire_mirror_pal()+0x294>
     4ec:	f1a5 020f 	sub.w	r2, r5, #15
     4f0:	4694      	mov	ip, r2
     4f2:	f105 0e02 	add.w	lr, r5, #2
     4f6:	782c      	ldrb	r4, [r5, #0]
     4f8:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
     4fc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
     500:	fb88 a604 	smull	sl, r6, r8, r4
     504:	eba6 74e4 	sub.w	r4, r6, r4, asr #31
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
	}
	for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     508:	4565      	cmp	r5, ip
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     50a:	f80e 4d01 	strb.w	r4, [lr, #-1]!
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
	}
	for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     50e:	d1f2      	bne.n	4f6 <fire_mirror_pal()+0x7a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     510:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     514:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     518:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     51c:	3319      	adds	r3, #25
     51e:	b29b      	uxth	r3, r3
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
	}
	if (random8() < sparking) {
     520:	eb03 2413 	add.w	r4, r3, r3, lsr #8
     524:	b2e4      	uxtb	r4, r4
     526:	428c      	cmp	r4, r1
     528:	8003      	strh	r3, [r0, #0]
     52a:	4870      	ldr	r0, [pc, #448]	; (6ec <fire_mirror_pal()+0x270>)
     52c:	d224      	bcs.n	578 <fire_mirror_pal()+0xfc>
     52e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     532:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     536:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     53a:	3319      	adds	r3, #25
     53c:	b29b      	uxth	r3, r3
     53e:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     542:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     546:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
     54a:	3419      	adds	r4, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     54c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     550:	b2a4      	uxth	r4, r4
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     552:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     554:	eb04 2114 	add.w	r1, r4, r4, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     558:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     55c:	b2c9      	uxtb	r1, r1
     55e:	121b      	asrs	r3, r3, #8
     560:	eb01 0541 	add.w	r5, r1, r1, lsl #1
     564:	ebc1 1145 	rsb	r1, r1, r5, lsl #5
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
     568:	5cd5      	ldrb	r5, [r2, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     56a:	8004      	strh	r4, [r0, #0]
     56c:	1209      	asrs	r1, r1, #8
     56e:	3960      	subs	r1, #96	; 0x60
     570:	4628      	mov	r0, r5
     572:	fa80 f051 	uqadd8	r0, r0, r1
     576:	54d0      	strb	r0, [r2, r3]
     578:	4e60      	ldr	r6, [pc, #384]	; (6fc <fire_mirror_pal()+0x280>)
		if (this_dir) {
			leds[j]					= ColorFromPalette(current_palette, colorindex);
			leds[NUM_LEDS - 1 - j]  = ColorFromPalette(current_palette, colorindex);
		}
		else {
			leds[(NUM_LEDS / 2) - 1 - j] = ColorFromPalette(current_palette, colorindex);
     57a:	f04f 0801 	mov.w	r8, #1
     57e:	f106 0a33 	add.w	sl, r6, #51	; 0x33
     582:	4635      	mov	r5, r6
     584:	e024      	b.n	5d0 <fire_mirror_pal()+0x154>
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
		byte colorindex = scale8(heat[j], 240);
		if (this_dir) {
			leds[j]					= ColorFromPalette(current_palette, colorindex);
     586:	f005 f96d 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
			leds[NUM_LEDS - 1 - j]  = ColorFromPalette(current_palette, colorindex);
     58a:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     58c:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
     590:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
     594:	f89d 400e 	ldrb.w	r4, [sp, #14]
     598:	f8cd 8000 	str.w	r8, [sp]
     59c:	4958      	ldr	r1, [pc, #352]	; (700 <fire_mirror_pal()+0x284>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     59e:	702b      	strb	r3, [r5, #0]
        g = rhs.g;
     5a0:	f885 e001 	strb.w	lr, [r5, #1]
        b = rhs.b;
     5a4:	70ac      	strb	r4, [r5, #2]
     5a6:	23ff      	movs	r3, #255	; 0xff
     5a8:	a803      	add	r0, sp, #12
     5aa:	3503      	adds	r5, #3
     5ac:	f005 f95a 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5b0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     5b4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     5b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5bc:	f886 1066 	strb.w	r1, [r6, #102]	; 0x66
	}
	if (random8() < sparking) {
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
     5c0:	45aa      	cmp	sl, r5
        g = rhs.g;
     5c2:	f886 2067 	strb.w	r2, [r6, #103]	; 0x67
        b = rhs.b;
     5c6:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
     5ca:	f1a6 0603 	sub.w	r6, r6, #3
     5ce:	d03d      	beq.n	64c <fire_mirror_pal()+0x1d0>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5d0:	f817 2f01 	ldrb.w	r2, [r7, #1]!
		byte colorindex = scale8(heat[j], 240);
		if (this_dir) {
     5d4:	f899 e000 	ldrb.w	lr, [r9]
			leds[j]					= ColorFromPalette(current_palette, colorindex);
     5d8:	4949      	ldr	r1, [pc, #292]	; (700 <fire_mirror_pal()+0x284>)
     5da:	f8cd 8000 	str.w	r8, [sp]
     5de:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
     5e2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
     5e6:	f3c2 2407 	ubfx	r4, r2, #8, #8
     5ea:	23ff      	movs	r3, #255	; 0xff
     5ec:	a803      	add	r0, sp, #12
     5ee:	4622      	mov	r2, r4
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
		byte colorindex = scale8(heat[j], 240);
		if (this_dir) {
     5f0:	f1be 0f00 	cmp.w	lr, #0
     5f4:	d1c7      	bne.n	586 <fire_mirror_pal()+0x10a>
			leds[j]					= ColorFromPalette(current_palette, colorindex);
			leds[NUM_LEDS - 1 - j]  = ColorFromPalette(current_palette, colorindex);
		}
		else {
			leds[(NUM_LEDS / 2) - 1 - j] = ColorFromPalette(current_palette, colorindex);
     5f6:	4622      	mov	r2, r4
     5f8:	23ff      	movs	r3, #255	; 0xff
     5fa:	4941      	ldr	r1, [pc, #260]	; (700 <fire_mirror_pal()+0x284>)
     5fc:	a803      	add	r0, sp, #12
     5fe:	f005 f931 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
			leds[(NUM_LEDS / 2) + j]	 = ColorFromPalette(current_palette, colorindex);
     602:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     604:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
     608:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
     60c:	f89d 400e 	ldrb.w	r4, [sp, #14]
     610:	f8cd 8000 	str.w	r8, [sp]
     614:	493a      	ldr	r1, [pc, #232]	; (700 <fire_mirror_pal()+0x284>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     616:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
        g = rhs.g;
     61a:	f886 e031 	strb.w	lr, [r6, #49]	; 0x31
     61e:	23ff      	movs	r3, #255	; 0xff
        b = rhs.b;
     620:	f886 4032 	strb.w	r4, [r6, #50]	; 0x32
     624:	a803      	add	r0, sp, #12
     626:	f005 f91d 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     62a:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     62e:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     632:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     636:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
        g = rhs.g;
     63a:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        b = rhs.b;
     63e:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
     642:	3503      	adds	r5, #3
	}
	if (random8() < sparking) {
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
     644:	45aa      	cmp	sl, r5
     646:	f1a6 0603 	sub.w	r6, r6, #3
     64a:	d1c1      	bne.n	5d0 <fire_mirror_pal()+0x154>
		else {
			leds[(NUM_LEDS / 2) - 1 - j] = ColorFromPalette(current_palette, colorindex);
			leds[(NUM_LEDS / 2) + j]	 = ColorFromPalette(current_palette, colorindex);
		}
	}
}
     64c:	b004      	add	sp, #16
     64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     652:	4826      	ldr	r0, [pc, #152]	; (6ec <fire_mirror_pal()+0x270>)
// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     654:	4f24      	ldr	r7, [pc, #144]	; (6e8 <fire_mirror_pal()+0x26c>)
     656:	8803      	ldrh	r3, [r0, #0]
		use_palette = 1;
		this_dir = random8(2);
     658:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 70c <fire_mirror_pal()+0x290>
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
     65c:	4e29      	ldr	r6, [pc, #164]	; (704 <fire_mirror_pal()+0x288>)

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     65e:	f8df e084 	ldr.w	lr, [pc, #132]	; 6e4 <fire_mirror_pal()+0x268>
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
     662:	4d29      	ldr	r5, [pc, #164]	; (708 <fire_mirror_pal()+0x28c>)
     664:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     668:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     66c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     670:	3319      	adds	r3, #25
     672:	b29b      	uxth	r3, r3
     674:	eb03 2c43 	add.w	ip, r3, r3, lsl #9
     678:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
     67c:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
     680:	f10c 0c19 	add.w	ip, ip, #25
     684:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     688:	eb0c 221c 	add.w	r2, ip, ip, lsr #8
     68c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     690:	b2d2      	uxtb	r2, r2
     692:	b2d9      	uxtb	r1, r3
     694:	eb02 0282 	add.w	r2, r2, r2, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     698:	eb0c 234c 	add.w	r3, ip, ip, lsl #9
     69c:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6a0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6a4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6a8:	11d2      	asrs	r2, r2, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6aa:	3319      	adds	r3, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6ac:	3232      	adds	r2, #50	; 0x32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6ae:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6b0:	b2d2      	uxtb	r2, r2
     6b2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     6b6:	703a      	strb	r2, [r7, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     6b8:	eb03 2713 	add.w	r7, r3, r3, lsr #8
		use_palette = 1;
		this_dir = random8(2);
     6bc:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6c0:	1189      	asrs	r1, r1, #6
     6c2:	3132      	adds	r1, #50	; 0x32
     6c4:	f889 7000 	strb.w	r7, [r9]
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
     6c8:	2701      	movs	r7, #1
     6ca:	7037      	strb	r7, [r6, #0]
     6cc:	b2c9      	uxtb	r1, r1
		this_dir = random8(2);
		this_delay = 15;
     6ce:	270f      	movs	r7, #15


// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
     6d0:	2600      	movs	r6, #0
		sparking = random8(50, 110);
     6d2:	f88e 1000 	strb.w	r1, [lr]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6d6:	8003      	strh	r3, [r0, #0]
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
     6d8:	602f      	str	r7, [r5, #0]


// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
     6da:	7026      	strb	r6, [r4, #0]
     6dc:	e6de      	b.n	49c <fire_mirror_pal()+0x20>
     6de:	bf00      	nop
     6e0:	1fff077c 	.word	0x1fff077c
     6e4:	1fff0780 	.word	0x1fff0780
     6e8:	1fff077e 	.word	0x1fff077e
     6ec:	1fff0792 	.word	0x1fff0792
     6f0:	78787879 	.word	0x78787879
     6f4:	1fff111b 	.word	0x1fff111b
     6f8:	1fff112b 	.word	0x1fff112b
     6fc:	1fff0dcc 	.word	0x1fff0dcc
     700:	1fff0f40 	.word	0x1fff0f40
     704:	1fff0774 	.word	0x1fff0774
     708:	1fff0778 	.word	0x1fff0778
     70c:	1fff1118 	.word	0x1fff1118
     710:	55555556 	.word	0x55555556

00000714 <confetti()>:
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     714:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (mode_change) {
     716:	4836      	ldr	r0, [pc, #216]	; (7f0 <confetti()+0xdc>)
     718:	7803      	ldrb	r3, [r0, #0]
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     71a:	b085      	sub	sp, #20
	if (mode_change) {
     71c:	2b00      	cmp	r3, #0
     71e:	d062      	beq.n	7e6 <confetti()+0xd2>
     720:	4e34      	ldr	r6, [pc, #208]	; (7f4 <confetti()+0xe0>)
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
     722:	4f35      	ldr	r7, [pc, #212]	; (7f8 <confetti()+0xe4>)
     724:	8833      	ldrh	r3, [r6, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     726:	4d35      	ldr	r5, [pc, #212]	; (7fc <confetti()+0xe8>)
		this_fade = random8(10, 48);
		this_delay = 20;
     728:	4c35      	ldr	r4, [pc, #212]	; (800 <confetti()+0xec>)
     72a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     72e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     732:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     736:	3119      	adds	r1, #25
     738:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     73a:	eb01 2311 	add.w	r3, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     73e:	b2db      	uxtb	r3, r3
     740:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
     744:	eb03 0242 	add.w	r2, r3, r2, lsl #1
     748:	11d2      	asrs	r2, r2, #7
     74a:	320a      	adds	r2, #10
     74c:	b2d2      	uxtb	r2, r2

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     74e:	f04f 0e01 	mov.w	lr, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     752:	8031      	strh	r1, [r6, #0]
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
     754:	2300      	movs	r3, #0
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
     756:	2114      	movs	r1, #20
void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
     758:	703a      	strb	r2, [r7, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     75a:	f885 e000 	strb.w	lr, [r5]
		this_fade = random8(10, 48);
		this_delay = 20;
     75e:	6021      	str	r1, [r4, #0]
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
     760:	7003      	strb	r3, [r0, #0]
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     762:	4d28      	ldr	r5, [pc, #160]	; (804 <confetti()+0xf0>)
	int pos = random16(NUM_LEDS);
	this_index = random8();
     764:	4f28      	ldr	r7, [pc, #160]	; (808 <confetti()+0xf4>)
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     766:	4628      	mov	r0, r5
     768:	2123      	movs	r1, #35	; 0x23
     76a:	f005 f829 	bl	57c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     76e:	8833      	ldrh	r3, [r6, #0]
	int pos = random16(NUM_LEDS);
	this_index = random8();
	leds[pos] += ColorFromPalette(current_palette, this_index);
     770:	4926      	ldr	r1, [pc, #152]	; (80c <confetti()+0xf8>)
     772:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     776:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     77a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     77e:	3319      	adds	r3, #25
     780:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     782:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     786:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     78a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     78e:	3019      	adds	r0, #25
     790:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     792:	eb00 2e10 	add.w	lr, r0, r0, lsr #8
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = random16(NUM_LEDS);
     796:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     79a:	fa5f fe8e 	uxtb.w	lr, lr
     79e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	this_index = random8();
	leds[pos] += ColorFromPalette(current_palette, this_index);
     7a2:	2201      	movs	r2, #1
     7a4:	9200      	str	r2, [sp, #0]
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = random16(NUM_LEDS);
     7a6:	0c1c      	lsrs	r4, r3, #16
	this_index = random8();
	leds[pos] += ColorFromPalette(current_palette, this_index);
     7a8:	4672      	mov	r2, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     7aa:	8030      	strh	r0, [r6, #0]
     7ac:	23ff      	movs	r3, #255	; 0xff
     7ae:	a803      	add	r0, sp, #12
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = random16(NUM_LEDS);
	this_index = random8();
     7b0:	f887 e000 	strb.w	lr, [r7]
	leds[pos] += ColorFromPalette(current_palette, this_index);
     7b4:	f005 f856 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     7b8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     7bc:	18e9      	adds	r1, r5, r3
     7be:	5cea      	ldrb	r2, [r5, r3]
     7c0:	f89d 000c 	ldrb.w	r0, [sp, #12]
     7c4:	fa82 f250 	uqadd8	r2, r2, r0
     7c8:	54ea      	strb	r2, [r5, r3]
     7ca:	f89d 300d 	ldrb.w	r3, [sp, #13]
     7ce:	784a      	ldrb	r2, [r1, #1]
     7d0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     7d4:	704a      	strb	r2, [r1, #1]
     7d6:	788b      	ldrb	r3, [r1, #2]
     7d8:	f89d 200e 	ldrb.w	r2, [sp, #14]
     7dc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
     7e0:	708b      	strb	r3, [r1, #2]
}
     7e2:	b005      	add	sp, #20
     7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7e6:	4b04      	ldr	r3, [pc, #16]	; (7f8 <confetti()+0xe4>)
     7e8:	4e02      	ldr	r6, [pc, #8]	; (7f4 <confetti()+0xe0>)
     7ea:	781a      	ldrb	r2, [r3, #0]
     7ec:	e7b9      	b.n	762 <confetti()+0x4e>
     7ee:	bf00      	nop
     7f0:	1fff077c 	.word	0x1fff077c
     7f4:	1fff0792 	.word	0x1fff0792
     7f8:	1fff0770 	.word	0x1fff0770
     7fc:	1fff0774 	.word	0x1fff0774
     800:	1fff0778 	.word	0x1fff0778
     804:	1fff0dcc 	.word	0x1fff0dcc
     808:	1fff1075 	.word	0x1fff1075
     80c:	1fff0f40 	.word	0x1fff0f40

00000810 <fire()>:
#ifndef FIRE_H
#define FIRE_H



void fire() {
     810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (mode_change) {
     814:	4964      	ldr	r1, [pc, #400]	; (9a8 <fire()+0x198>)
     816:	780b      	ldrb	r3, [r1, #0]
#ifndef FIRE_H
#define FIRE_H



void fire() {
     818:	b083      	sub	sp, #12
	if (mode_change) {
     81a:	2b00      	cmp	r3, #0
     81c:	f040 808c 	bne.w	938 <fire()+0x128>
     820:	4b62      	ldr	r3, [pc, #392]	; (9ac <fire()+0x19c>)
     822:	4a63      	ldr	r2, [pc, #396]	; (9b0 <fire()+0x1a0>)
     824:	4d63      	ldr	r5, [pc, #396]	; (9b4 <fire()+0x1a4>)
     826:	7818      	ldrb	r0, [r3, #0]
     828:	7812      	ldrb	r2, [r2, #0]
     82a:	882b      	ldrh	r3, [r5, #0]
     82c:	4f62      	ldr	r7, [pc, #392]	; (9b8 <fire()+0x1a8>)
     82e:	4c63      	ldr	r4, [pc, #396]	; (9bc <fire()+0x1ac>)
     830:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     834:	0052      	lsls	r2, r2, #1
     836:	fb87 1702 	smull	r1, r7, r7, r2
     83a:	4417      	add	r7, r2
     83c:	17d2      	asrs	r2, r2, #31
     83e:	ebc2 1767 	rsb	r7, r2, r7, asr #5
     842:	3702      	adds	r7, #2
     844:	b2ff      	uxtb	r7, r7
     846:	f104 0e23 	add.w	lr, r4, #35	; 0x23
     84a:	4626      	mov	r6, r4
     84c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     850:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     854:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     858:	3319      	adds	r3, #25
     85a:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     85c:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     860:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     864:	b2d2      	uxtb	r2, r2
     866:	fb12 f207 	smulbb	r2, r2, r7
     86a:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
	// Array of temperature readings at each simulation cell
	static byte heat[NUM_LEDS];

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
     86e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	}
	// Array of temperature readings at each simulation cell
	static byte heat[NUM_LEDS];

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
     872:	45b6      	cmp	lr, r6
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
     874:	7032      	strb	r2, [r6, #0]
	}
	// Array of temperature readings at each simulation cell
	static byte heat[NUM_LEDS];

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
     876:	d1e9      	bne.n	84c <fire()+0x3c>
     878:	4e51      	ldr	r6, [pc, #324]	; (9c0 <fire()+0x1b0>)
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     87a:	f8df 8154 	ldr.w	r8, [pc, #340]	; 9d0 <fire()+0x1c0>
     87e:	f1a6 021f 	sub.w	r2, r6, #31
     882:	4694      	mov	ip, r2
     884:	f106 0e02 	add.w	lr, r6, #2
     888:	7831      	ldrb	r1, [r6, #0]
     88a:	f816 7d01 	ldrb.w	r7, [r6, #-1]!
     88e:	eb01 0147 	add.w	r1, r1, r7, lsl #1
     892:	fb88 9701 	smull	r9, r7, r8, r1
     896:	eba7 71e1 	sub.w	r1, r7, r1, asr #31
	for (int i = 0; i < NUM_LEDS; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
     89a:	4566      	cmp	r6, ip
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     89c:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	for (int i = 0; i < NUM_LEDS; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
     8a0:	d1f2      	bne.n	888 <fire()+0x78>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     8a2:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     8a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     8aa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     8ae:	3319      	adds	r3, #25
     8b0:	b29b      	uxth	r3, r3
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < sparking) {
     8b2:	eb03 2113 	add.w	r1, r3, r3, lsr #8
     8b6:	b2c9      	uxtb	r1, r1
     8b8:	4281      	cmp	r1, r0
     8ba:	802b      	strh	r3, [r5, #0]
     8bc:	4d3d      	ldr	r5, [pc, #244]	; (9b4 <fire()+0x1a4>)
     8be:	d224      	bcs.n	90a <fire()+0xfa>
     8c0:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     8c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     8c8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     8cc:	3319      	adds	r3, #25
     8ce:	b29b      	uxth	r3, r3
     8d0:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     8d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     8d8:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     8dc:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     8de:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     8e2:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     8e4:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     8e6:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     8ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     8ee:	b2c9      	uxtb	r1, r1
     8f0:	121b      	asrs	r3, r3, #8
     8f2:	eb01 0641 	add.w	r6, r1, r1, lsl #1
     8f6:	ebc1 1146 	rsb	r1, r1, r6, lsl #5
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
     8fa:	5cd6      	ldrb	r6, [r2, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     8fc:	8028      	strh	r0, [r5, #0]
     8fe:	1209      	asrs	r1, r1, #8
     900:	3960      	subs	r1, #96	; 0x60
     902:	4630      	mov	r0, r6
     904:	fa80 f051 	uqadd8	r0, r0, r1
     908:	54d0      	strb	r0, [r2, r3]
     90a:	4d2e      	ldr	r5, [pc, #184]	; (9c4 <fire()+0x1b4>)
     90c:	f105 0669 	add.w	r6, r5, #105	; 0x69
	}

	// Step 4.  Map from heat cells to LED colors
	for (int j = 0; j < NUM_LEDS; j++) {
		leds[j] = HeatColor(heat[j]);
     910:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     914:	a801      	add	r0, sp, #4
     916:	f004 ff83 	bl	5820 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     91a:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
     91e:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     922:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     926:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
     928:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
     92a:	70ab      	strb	r3, [r5, #2]
     92c:	3503      	adds	r5, #3
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}

	// Step 4.  Map from heat cells to LED colors
	for (int j = 0; j < NUM_LEDS; j++) {
     92e:	42ae      	cmp	r6, r5
     930:	d1ee      	bne.n	910 <fire()+0x100>
		leds[j] = HeatColor(heat[j]);
	}
}
     932:	b003      	add	sp, #12
     934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     938:	4d1e      	ldr	r5, [pc, #120]	; (9b4 <fire()+0x1a4>)

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     93a:	4f1d      	ldr	r7, [pc, #116]	; (9b0 <fire()+0x1a0>)
     93c:	882b      	ldrh	r3, [r5, #0]
		use_palette = 0;
     93e:	4e22      	ldr	r6, [pc, #136]	; (9c8 <fire()+0x1b8>)


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     940:	481a      	ldr	r0, [pc, #104]	; (9ac <fire()+0x19c>)
		cooling = random8(50, 120);
		use_palette = 0;
		this_delay = 15;
     942:	4c22      	ldr	r4, [pc, #136]	; (9cc <fire()+0x1bc>)
     944:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     948:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     94c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     950:	3219      	adds	r2, #25
     952:	b292      	uxth	r2, r2
     954:	eb02 2342 	add.w	r3, r2, r2, lsl #9
     958:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     95c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     960:	3319      	adds	r3, #25
     962:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     964:	eb02 2e12 	add.w	lr, r2, r2, lsr #8
     968:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     96c:	b2d2      	uxtb	r2, r2
     96e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     972:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
     976:	fa5f fe8e 	uxtb.w	lr, lr
     97a:	11d2      	asrs	r2, r2, #7
     97c:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
     980:	3232      	adds	r2, #50	; 0x32
     982:	ea4f 1eae 	mov.w	lr, lr, asr #6
     986:	b2d2      	uxtb	r2, r2
     988:	f10e 0e32 	add.w	lr, lr, #50	; 0x32

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     98c:	703a      	strb	r2, [r7, #0]



void fire() {
	if (mode_change) {
		mode_change = 0;
     98e:	2700      	movs	r7, #0
     990:	fa5f fe8e 	uxtb.w	lr, lr
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
     994:	7037      	strb	r7, [r6, #0]
		this_delay = 15;
     996:	260f      	movs	r6, #15


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     998:	f880 e000 	strb.w	lr, [r0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     99c:	802b      	strh	r3, [r5, #0]
     99e:	4670      	mov	r0, lr



void fire() {
	if (mode_change) {
		mode_change = 0;
     9a0:	700f      	strb	r7, [r1, #0]
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_delay = 15;
     9a2:	6026      	str	r6, [r4, #0]
     9a4:	e742      	b.n	82c <fire()+0x1c>
     9a6:	bf00      	nop
     9a8:	1fff077c 	.word	0x1fff077c
     9ac:	1fff0780 	.word	0x1fff0780
     9b0:	1fff077e 	.word	0x1fff077e
     9b4:	1fff0792 	.word	0x1fff0792
     9b8:	ea0ea0eb 	.word	0xea0ea0eb
     9bc:	1fff119b 	.word	0x1fff119b
     9c0:	1fff11bb 	.word	0x1fff11bb
     9c4:	1fff0dcc 	.word	0x1fff0dcc
     9c8:	1fff0774 	.word	0x1fff0774
     9cc:	1fff0778 	.word	0x1fff0778
     9d0:	55555556 	.word	0x55555556

000009d4 <fire_mirror()>:
}



// fire mirrored from ends or center
void fire_mirror() {
     9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mode_change) {
     9d8:	4c8f      	ldr	r4, [pc, #572]	; (c18 <fire_mirror()+0x244>)
     9da:	7823      	ldrb	r3, [r4, #0]
}



// fire mirrored from ends or center
void fire_mirror() {
     9dc:	b082      	sub	sp, #8
	if (mode_change) {
     9de:	2b00      	cmp	r3, #0
     9e0:	f040 80d2 	bne.w	b88 <fire_mirror()+0x1b4>
     9e4:	498d      	ldr	r1, [pc, #564]	; (c1c <fire_mirror()+0x248>)
     9e6:	4b8e      	ldr	r3, [pc, #568]	; (c20 <fire_mirror()+0x24c>)
     9e8:	4a8e      	ldr	r2, [pc, #568]	; (c24 <fire_mirror()+0x250>)
     9ea:	4d8f      	ldr	r5, [pc, #572]	; (c28 <fire_mirror()+0x254>)
     9ec:	7808      	ldrb	r0, [r1, #0]
     9ee:	7812      	ldrb	r2, [r2, #0]
     9f0:	7819      	ldrb	r1, [r3, #0]
     9f2:	882b      	ldrh	r3, [r5, #0]
     9f4:	4e8d      	ldr	r6, [pc, #564]	; (c2c <fire_mirror()+0x258>)
     9f6:	4c8e      	ldr	r4, [pc, #568]	; (c30 <fire_mirror()+0x25c>)
     9f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     9fc:	0052      	lsls	r2, r2, #1
     9fe:	fb86 6e02 	smull	r6, lr, r6, r2
     a02:	17d2      	asrs	r2, r2, #31
     a04:	ebc2 0eee 	rsb	lr, r2, lr, asr #3
     a08:	f10e 0e02 	add.w	lr, lr, #2
     a0c:	fa5f fe8e 	uxtb.w	lr, lr
     a10:	f104 0c11 	add.w	ip, r4, #17
     a14:	4627      	mov	r7, r4
     a16:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     a1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     a1e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     a22:	3319      	adds	r3, #25
     a24:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     a26:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     a2a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
     a2e:	b2d2      	uxtb	r2, r2
     a30:	fb12 f20e 	smulbb	r2, r2, lr
     a34:	eba6 2212 	sub.w	r2, r6, r2, lsr #8
		this_dir = random8(2);
		this_delay = 15;
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     a38:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
     a3c:	45bc      	cmp	ip, r7
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     a3e:	703a      	strb	r2, [r7, #0]
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
     a40:	d1e9      	bne.n	a16 <fire_mirror()+0x42>
     a42:	4f7c      	ldr	r7, [pc, #496]	; (c34 <fire_mirror()+0x260>)
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     a44:	f8df 91fc 	ldr.w	r9, [pc, #508]	; c44 <fire_mirror()+0x270>
     a48:	f1a7 020f 	sub.w	r2, r7, #15
     a4c:	4690      	mov	r8, r2
     a4e:	f107 0c02 	add.w	ip, r7, #2
     a52:	783e      	ldrb	r6, [r7, #0]
     a54:	f817 ed01 	ldrb.w	lr, [r7, #-1]!
     a58:	eb06 064e 	add.w	r6, r6, lr, lsl #1
     a5c:	fb89 ae06 	smull	sl, lr, r9, r6
     a60:	ebae 76e6 	sub.w	r6, lr, r6, asr #31
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     a64:	45b8      	cmp	r8, r7
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     a66:	f80c 6d01 	strb.w	r6, [ip, #-1]!
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     a6a:	d1f2      	bne.n	a52 <fire_mirror()+0x7e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a6c:	eb03 2643 	add.w	r6, r3, r3, lsl #9
     a70:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     a74:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     a78:	3319      	adds	r3, #25
     a7a:	b29b      	uxth	r3, r3
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
		}
		if (random8() < sparking) {
     a7c:	eb03 2613 	add.w	r6, r3, r3, lsr #8
     a80:	b2f6      	uxtb	r6, r6
     a82:	4286      	cmp	r6, r0
     a84:	802b      	strh	r3, [r5, #0]
     a86:	4d68      	ldr	r5, [pc, #416]	; (c28 <fire_mirror()+0x254>)
     a88:	d224      	bcs.n	ad4 <fire_mirror()+0x100>
     a8a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     a8e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     a92:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     a96:	3319      	adds	r3, #25
     a98:	b29b      	uxth	r3, r3
     a9a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
     a9e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     aa2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
     aa6:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     aa8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     aac:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     aae:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     ab0:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     ab4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     ab8:	b2c0      	uxtb	r0, r0
     aba:	121b      	asrs	r3, r3, #8
     abc:	eb00 0740 	add.w	r7, r0, r0, lsl #1
     ac0:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
     ac4:	5cd7      	ldrb	r7, [r2, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ac6:	802e      	strh	r6, [r5, #0]
     ac8:	1200      	asrs	r0, r0, #8
     aca:	3860      	subs	r0, #96	; 0x60
     acc:	463d      	mov	r5, r7
     ace:	fa85 f550 	uqadd8	r5, r5, r0
     ad2:	54d5      	strb	r5, [r2, r3]
		}
		if (this_dir) {
     ad4:	b351      	cbz	r1, b2c <fire_mirror()+0x158>
     ad6:	4e58      	ldr	r6, [pc, #352]	; (c38 <fire_mirror()+0x264>)
     ad8:	af01      	add	r7, sp, #4
     ada:	f106 0833 	add.w	r8, r6, #51	; 0x33
     ade:	4635      	mov	r5, r6
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				leds[j] = HeatColor(heat[j]);
     ae0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     ae4:	4638      	mov	r0, r7
     ae6:	f004 fe9b 	bl	5820 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     aea:	f89d 0004 	ldrb.w	r0, [sp, #4]
        g = rhs.g;
     aee:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     af2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     af6:	7028      	strb	r0, [r5, #0]
        g = rhs.g;
     af8:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
     afa:	70ab      	strb	r3, [r5, #2]
				leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
     afc:	7821      	ldrb	r1, [r4, #0]
     afe:	4638      	mov	r0, r7
     b00:	3503      	adds	r5, #3
     b02:	f004 fe8d 	bl	5820 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b06:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
     b0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b12:	f886 1066 	strb.w	r1, [r6, #102]	; 0x66
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
     b16:	45a8      	cmp	r8, r5
        g = rhs.g;
     b18:	f886 2067 	strb.w	r2, [r6, #103]	; 0x67
        b = rhs.b;
     b1c:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
     b20:	f1a6 0603 	sub.w	r6, r6, #3
     b24:	d1dc      	bne.n	ae0 <fire_mirror()+0x10c>
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
				leds[(NUM_LEDS / 2) + j]	 = HeatColor(heat[j]);
			}
		}
}
     b26:	b002      	add	sp, #8
     b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b2c:	4d42      	ldr	r5, [pc, #264]	; (c38 <fire_mirror()+0x264>)
     b2e:	af01      	add	r7, sp, #4
     b30:	f1a5 0833 	sub.w	r8, r5, #51	; 0x33
		}
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
     b34:	462e      	mov	r6, r5
				leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
     b36:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     b3a:	4638      	mov	r0, r7
     b3c:	f004 fe70 	bl	5820 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b40:	f89d 0004 	ldrb.w	r0, [sp, #4]
        g = rhs.g;
     b44:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b48:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b4c:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
        g = rhs.g;
     b50:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
        b = rhs.b;
     b54:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
				leds[(NUM_LEDS / 2) + j]	 = HeatColor(heat[j]);
     b58:	7821      	ldrb	r1, [r4, #0]
     b5a:	4638      	mov	r0, r7
     b5c:	3d03      	subs	r5, #3
     b5e:	f004 fe5f 	bl	5820 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b62:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
     b66:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b6e:	f886 1033 	strb.w	r1, [r6, #51]	; 0x33
				leds[j] = HeatColor(heat[j]);
				leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
     b72:	45a8      	cmp	r8, r5
        g = rhs.g;
     b74:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        b = rhs.b;
     b78:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
     b7c:	f106 0603 	add.w	r6, r6, #3
     b80:	d1d9      	bne.n	b36 <fire_mirror()+0x162>
				leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
				leds[(NUM_LEDS / 2) + j]	 = HeatColor(heat[j]);
			}
		}
}
     b82:	b002      	add	sp, #8
     b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b88:	4d27      	ldr	r5, [pc, #156]	; (c28 <fire_mirror()+0x254>)
// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     b8a:	4926      	ldr	r1, [pc, #152]	; (c24 <fire_mirror()+0x250>)
     b8c:	882b      	ldrh	r3, [r5, #0]
		use_palette = 0;
		this_dir = random8(2);
     b8e:	f8df e090 	ldr.w	lr, [pc, #144]	; c20 <fire_mirror()+0x24c>
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
     b92:	4f2a      	ldr	r7, [pc, #168]	; (c3c <fire_mirror()+0x268>)

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     b94:	f8df c084 	ldr.w	ip, [pc, #132]	; c1c <fire_mirror()+0x248>
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
     b98:	4e29      	ldr	r6, [pc, #164]	; (c40 <fire_mirror()+0x26c>)
     b9a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     b9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     ba2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     ba6:	3319      	adds	r3, #25
     ba8:	b29b      	uxth	r3, r3
     baa:	eb03 2843 	add.w	r8, r3, r3, lsl #9
     bae:	eb03 0888 	add.w	r8, r3, r8, lsl #2
     bb2:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
     bb6:	f108 0819 	add.w	r8, r8, #25
     bba:	fa1f f888 	uxth.w	r8, r8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     bbe:	eb08 2218 	add.w	r2, r8, r8, lsr #8
     bc2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bc6:	b2d2      	uxtb	r2, r2
     bc8:	b2d8      	uxtb	r0, r3
     bca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     bce:	eb08 2348 	add.w	r3, r8, r8, lsl #9
     bd2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bd6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     bda:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bde:	11d2      	asrs	r2, r2, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     be0:	3319      	adds	r3, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     be2:	3232      	adds	r2, #50	; 0x32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     be4:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     be6:	b2d2      	uxtb	r2, r2
     be8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     bec:	700a      	strb	r2, [r1, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     bee:	eb03 2113 	add.w	r1, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bf2:	1180      	asrs	r0, r0, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     bf4:	f3c1 11c0 	ubfx	r1, r1, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bf8:	3032      	adds	r0, #50	; 0x32
		use_palette = 0;
		this_dir = random8(2);
     bfa:	f88e 1000 	strb.w	r1, [lr]


// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
     bfe:	f04f 0e00 	mov.w	lr, #0
     c02:	b2c0      	uxtb	r0, r0
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
     c04:	f887 e000 	strb.w	lr, [r7]
		this_dir = random8(2);
		this_delay = 15;
     c08:	270f      	movs	r7, #15

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     c0a:	f88c 0000 	strb.w	r0, [ip]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c0e:	802b      	strh	r3, [r5, #0]


// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
     c10:	f884 e000 	strb.w	lr, [r4]
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
     c14:	6037      	str	r7, [r6, #0]
     c16:	e6ed      	b.n	9f4 <fire_mirror()+0x20>
     c18:	1fff077c 	.word	0x1fff077c
     c1c:	1fff0780 	.word	0x1fff0780
     c20:	1fff1118 	.word	0x1fff1118
     c24:	1fff077e 	.word	0x1fff077e
     c28:	1fff0792 	.word	0x1fff0792
     c2c:	78787879 	.word	0x78787879
     c30:	1fff1137 	.word	0x1fff1137
     c34:	1fff1147 	.word	0x1fff1147
     c38:	1fff0dcc 	.word	0x1fff0dcc
     c3c:	1fff0774 	.word	0x1fff0774
     c40:	1fff0778 	.word	0x1fff0778
     c44:	55555556 	.word	0x55555556

00000c48 <rainbow_march()>:
 * this_dir
 */


void rainbow_march() {
	if (mode_change) {
     c48:	482e      	ldr	r0, [pc, #184]	; (d04 <rainbow_march()+0xbc>)
     c4a:	7803      	ldrb	r3, [r0, #0]
 * this_rot
 * this_dir
 */


void rainbow_march() {
     c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (mode_change) {
     c4e:	b993      	cbnz	r3, c76 <rainbow_march()+0x2e>
     c50:	492d      	ldr	r1, [pc, #180]	; (d08 <rainbow_march()+0xc0>)
     c52:	4a2e      	ldr	r2, [pc, #184]	; (d0c <rainbow_march()+0xc4>)
     c54:	4b2e      	ldr	r3, [pc, #184]	; (d10 <rainbow_march()+0xc8>)
     c56:	7809      	ldrb	r1, [r1, #0]
     c58:	7812      	ldrb	r2, [r2, #0]
     c5a:	781b      	ldrb	r3, [r3, #0]
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
     c5c:	482d      	ldr	r0, [pc, #180]	; (d14 <rainbow_march()+0xcc>)
     c5e:	2900      	cmp	r1, #0
     c60:	d046      	beq.n	cf0 <rainbow_march()+0xa8>
     c62:	7801      	ldrb	r1, [r0, #0]
     c64:	1a8a      	subs	r2, r1, r2
     c66:	b2d2      	uxtb	r2, r2
     c68:	7002      	strb	r2, [r0, #0]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
     c6a:	2123      	movs	r1, #35	; 0x23
     c6c:	482a      	ldr	r0, [pc, #168]	; (d18 <rainbow_march()+0xd0>)
}
     c6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
     c72:	f004 bcf3 	b.w	565c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
     c76:	4c29      	ldr	r4, [pc, #164]	; (d1c <rainbow_march()+0xd4>)
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
     c78:	4f25      	ldr	r7, [pc, #148]	; (d10 <rainbow_march()+0xc8>)
     c7a:	8823      	ldrh	r3, [r4, #0]

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
     c7c:	4d22      	ldr	r5, [pc, #136]	; (d08 <rainbow_march()+0xc0>)
		this_rot = random8(1, 5);
     c7e:	4e23      	ldr	r6, [pc, #140]	; (d0c <rainbow_march()+0xc4>)
     c80:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     c84:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     c88:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     c8c:	3119      	adds	r1, #25
     c8e:	b289      	uxth	r1, r1
     c90:	eb01 2341 	add.w	r3, r1, r1, lsl #9
     c94:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     c98:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     c9c:	3319      	adds	r3, #25
     c9e:	b29b      	uxth	r3, r3
     ca0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     ca4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     ca8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     cac:	3219      	adds	r2, #25
     cae:	fa1f fe82 	uxth.w	lr, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     cb2:	eb03 2213 	add.w	r2, r3, r3, lsr #8
     cb6:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cba:	f3c3 1381 	ubfx	r3, r3, #6, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     cbe:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cc2:	3301      	adds	r3, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     cc4:	f8a4 e000 	strh.w	lr, [r4]
		this_diff = random8(1, 5);
     cc8:	703b      	strb	r3, [r7, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cca:	f3c2 1281 	ubfx	r2, r2, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     cce:	f3c1 11c0 	ubfx	r1, r1, #7, #1


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
     cd2:	f8df e050 	ldr.w	lr, [pc, #80]	; d24 <rainbow_march()+0xdc>
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
     cd6:	4f12      	ldr	r7, [pc, #72]	; (d20 <rainbow_march()+0xd8>)

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
     cd8:	7029      	strb	r1, [r5, #0]
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
     cda:	2400      	movs	r4, #0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cdc:	3201      	adds	r2, #1
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
     cde:	250a      	movs	r5, #10
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
     ce0:	7004      	strb	r4, [r0, #0]
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
     ce2:	7032      	strb	r2, [r6, #0]


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
     ce4:	f88e 4000 	strb.w	r4, [lr]
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
     ce8:	603d      	str	r5, [r7, #0]
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
     cea:	480a      	ldr	r0, [pc, #40]	; (d14 <rainbow_march()+0xcc>)
     cec:	2900      	cmp	r1, #0
     cee:	d1b8      	bne.n	c62 <rainbow_march()+0x1a>
     cf0:	7801      	ldrb	r1, [r0, #0]
     cf2:	440a      	add	r2, r1
     cf4:	b2d2      	uxtb	r2, r2
     cf6:	7002      	strb	r2, [r0, #0]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
     cf8:	2123      	movs	r1, #35	; 0x23
     cfa:	4807      	ldr	r0, [pc, #28]	; (d18 <rainbow_march()+0xd0>)
}
     cfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		this_rot = random8(1, 5);
		this_diff = random8(1, 5);
		this_delay = 10;
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
     d00:	f004 bcac 	b.w	565c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
     d04:	1fff077c 	.word	0x1fff077c
     d08:	1fff1118 	.word	0x1fff1118
     d0c:	1fff0784 	.word	0x1fff0784
     d10:	1fff0772 	.word	0x1fff0772
     d14:	1fff1075 	.word	0x1fff1075
     d18:	1fff0dcc 	.word	0x1fff0dcc
     d1c:	1fff0792 	.word	0x1fff0792
     d20:	1fff0778 	.word	0x1fff0778
     d24:	1fff0774 	.word	0x1fff0774

00000d28 <rainbow_split()>:
}

void rainbow_split(){
  if (mode_change){
     d28:	4933      	ldr	r1, [pc, #204]	; (df8 <rainbow_split()+0xd0>)
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
}

void rainbow_split(){
     d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (mode_change){
     d2c:	780b      	ldrb	r3, [r1, #0]
     d2e:	bb43      	cbnz	r3, d82 <rainbow_split()+0x5a>
     d30:	4932      	ldr	r1, [pc, #200]	; (dfc <rainbow_split()+0xd4>)
     d32:	4a33      	ldr	r2, [pc, #204]	; (e00 <rainbow_split()+0xd8>)
     d34:	4b33      	ldr	r3, [pc, #204]	; (e04 <rainbow_split()+0xdc>)
     d36:	7808      	ldrb	r0, [r1, #0]
     d38:	7812      	ldrb	r2, [r2, #0]
     d3a:	781b      	ldrb	r3, [r3, #0]
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     d3c:	b9d8      	cbnz	r0, d76 <rainbow_split()+0x4e>
     d3e:	4832      	ldr	r0, [pc, #200]	; (e08 <rainbow_split()+0xe0>)
     d40:	7801      	ldrb	r1, [r0, #0]
     d42:	440a      	add	r2, r1
     d44:	b2d2      	uxtb	r2, r2
     d46:	7002      	strb	r2, [r0, #0]
  fill_rainbow(leds, NUM_LEDS/2, this_index, this_diff); // 0 - 71
     d48:	4830      	ldr	r0, [pc, #192]	; (e0c <rainbow_split()+0xe4>)
     d4a:	2111      	movs	r1, #17
     d4c:	f004 fc86 	bl	565c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
     d50:	4b2e      	ldr	r3, [pc, #184]	; (e0c <rainbow_split()+0xe4>)
     d52:	f103 0033 	add.w	r0, r3, #51	; 0x33
     d56:	461a      	mov	r2, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d58:	7819      	ldrb	r1, [r3, #0]
     d5a:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
        g = rhs.g;
     d5e:	7859      	ldrb	r1, [r3, #1]
     d60:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
        b = rhs.b;
     d64:	7899      	ldrb	r1, [r3, #2]
     d66:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
     d6a:	3303      	adds	r3, #3
  for (int i = 0; i < NUM_LEDS/2; i++){
     d6c:	4283      	cmp	r3, r0
     d6e:	f1a2 0203 	sub.w	r2, r2, #3
     d72:	d1f1      	bne.n	d58 <rainbow_split()+0x30>
    leds[NUM_LEDS - 1 - i] = leds[i];
  }
    
}
     d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     d76:	4824      	ldr	r0, [pc, #144]	; (e08 <rainbow_split()+0xe0>)
     d78:	7801      	ldrb	r1, [r0, #0]
     d7a:	1a8a      	subs	r2, r1, r2
     d7c:	b2d2      	uxtb	r2, r2
     d7e:	7002      	strb	r2, [r0, #0]
     d80:	e7e2      	b.n	d48 <rainbow_split()+0x20>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     d82:	4823      	ldr	r0, [pc, #140]	; (e10 <rainbow_split()+0xe8>)
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
     d84:	4e1f      	ldr	r6, [pc, #124]	; (e04 <rainbow_split()+0xdc>)
     d86:	8803      	ldrh	r3, [r0, #0]
void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
     d88:	4d1d      	ldr	r5, [pc, #116]	; (e00 <rainbow_split()+0xd8>)

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
     d8a:	4c1c      	ldr	r4, [pc, #112]	; (dfc <rainbow_split()+0xd4>)
     d8c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     d90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     d94:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     d98:	3319      	adds	r3, #25
     d9a:	b29b      	uxth	r3, r3
     d9c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     da0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     da4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     da8:	3219      	adds	r2, #25
     daa:	b292      	uxth	r2, r2
     dac:	eb02 2742 	add.w	r7, r2, r2, lsl #9
     db0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
     db4:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
     db8:	3719      	adds	r7, #25
     dba:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     dbc:	eb07 2c17 	add.w	ip, r7, r7, lsr #8
     dc0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
     dc4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     dc8:	f3cc 1c81 	ubfx	ip, ip, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     dcc:	f3c3 1ec0 	ubfx	lr, r3, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     dd0:	f3c2 1281 	ubfx	r2, r2, #6, #2
     dd4:	f10c 0301 	add.w	r3, ip, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     dd8:	8007      	strh	r7, [r0, #0]
    this_rot = random8(1,5);
    this_diff = random8(1,5);
     dda:	7033      	strb	r3, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     ddc:	3201      	adds	r2, #1
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
     dde:	4f0d      	ldr	r7, [pc, #52]	; (e14 <rainbow_split()+0xec>)
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
     de0:	4e0d      	ldr	r6, [pc, #52]	; (e18 <rainbow_split()+0xf0>)
void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
     de2:	702a      	strb	r2, [r5, #0]

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
     de4:	f884 e000 	strb.w	lr, [r4]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
     de8:	2500      	movs	r5, #0
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
     dea:	240f      	movs	r4, #15
     dec:	4670      	mov	r0, lr
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
     dee:	703d      	strb	r5, [r7, #0]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
     df0:	700d      	strb	r5, [r1, #0]
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,5);
    this_delay = 15;
     df2:	6034      	str	r4, [r6, #0]
     df4:	e7a2      	b.n	d3c <rainbow_split()+0x14>
     df6:	bf00      	nop
     df8:	1fff077c 	.word	0x1fff077c
     dfc:	1fff1118 	.word	0x1fff1118
     e00:	1fff0784 	.word	0x1fff0784
     e04:	1fff0772 	.word	0x1fff0772
     e08:	1fff1075 	.word	0x1fff1075
     e0c:	1fff0dcc 	.word	0x1fff0dcc
     e10:	1fff0792 	.word	0x1fff0792
     e14:	1fff0774 	.word	0x1fff0774
     e18:	1fff0778 	.word	0x1fff0778

00000e1c <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::init()>:

	data_t mPinMask;
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
     e1c:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     e1e:	2101      	movs	r1, #1
     e20:	4604      	mov	r4, r0
     e22:	2007      	movs	r0, #7
     e24:	f005 f9fe 	bl	6224 <pinMode>
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     e28:	2204      	movs	r2, #4
		mPort = FastPin<DATA_PIN>::port();
     e2a:	4b02      	ldr	r3, [pc, #8]	; (e34 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::init()+0x18>)
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     e2c:	61a2      	str	r2, [r4, #24]
		mPort = FastPin<DATA_PIN>::port();
     e2e:	61e3      	str	r3, [r4, #28]
     e30:	bd10      	pop	{r4, pc}
     e32:	bf00      	nop
     e34:	400ff0c0 	.word	0x400ff0c0

00000e38 <juggle_pal_onedir()>:
	}
} // juggle_pal()



void juggle_pal_onedir() {
     e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     e3c:	498f      	ldr	r1, [pc, #572]	; (107c <juggle_pal_onedir()+0x244>)
     e3e:	780b      	ldrb	r3, [r1, #0]
	}
} // juggle_pal()



void juggle_pal_onedir() {
     e40:	b087      	sub	sp, #28
	if (mode_change) {
     e42:	2b00      	cmp	r3, #0
     e44:	f000 810a 	beq.w	105c <juggle_pal_onedir()+0x224>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e48:	4c8d      	ldr	r4, [pc, #564]	; (1080 <juggle_pal_onedir()+0x248>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
     e4a:	f8df a268 	ldr.w	sl, [pc, #616]	; 10b4 <juggle_pal_onedir()+0x27c>
     e4e:	8823      	ldrh	r3, [r4, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
     e50:	f8df b264 	ldr.w	fp, [pc, #612]	; 10b8 <juggle_pal_onedir()+0x280>


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
     e54:	f8df 8264 	ldr.w	r8, [pc, #612]	; 10bc <juggle_pal_onedir()+0x284>
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
     e58:	f8df 9264 	ldr.w	r9, [pc, #612]	; 10c0 <juggle_pal_onedir()+0x288>
     e5c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     e60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e64:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     e68:	3019      	adds	r0, #25
     e6a:	b280      	uxth	r0, r0
     e6c:	eb00 2340 	add.w	r3, r0, r0, lsl #9
     e70:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     e74:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     e78:	3319      	adds	r3, #25
     e7a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     e7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e82:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     e86:	3319      	adds	r3, #25
     e88:	b29b      	uxth	r3, r3
     e8a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     e8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     e92:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     e96:	3219      	adds	r2, #25
     e98:	b292      	uxth	r2, r2
     e9a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
     e9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
     ea2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
     ea6:	3619      	adds	r6, #25
     ea8:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     eaa:	eb00 2010 	add.w	r0, r0, r0, lsr #8
     eae:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     eb2:	f3c0 1081 	ubfx	r0, r0, #6, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     eb6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     eba:	3002      	adds	r0, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     ebc:	fa5f fe85 	uxtb.w	lr, r5
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     ec0:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ec2:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
/// Generate an 8-bit random number in the given range
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
     ec6:	25ff      	movs	r5, #255	; 0xff
     ec8:	fb95 f5f0 	sdiv	r5, r5, r0
     ecc:	3d01      	subs	r5, #1
    uint8_t r = random8(delta) + min;
     ece:	eb03 0343 	add.w	r3, r3, r3, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ed2:	eb06 068c 	add.w	r6, r6, ip, lsl #2
/// Generate an 8-bit random number in the given range
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
     ed6:	b2ed      	uxtb	r5, r5
    uint8_t r = random8(delta) + min;
     ed8:	111b      	asrs	r3, r3, #4
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
     eda:	fb1e f505 	smulbb	r5, lr, r5
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ede:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     ee2:	eb02 2712 	add.w	r7, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ee6:	3619      	adds	r6, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     ee8:	f103 0210 	add.w	r2, r3, #16
     eec:	122b      	asrs	r3, r5, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     eee:	8026      	strh	r6, [r4, #0]
     ef0:	3301      	adds	r3, #1
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
     ef2:	4c64      	ldr	r4, [pc, #400]	; (1084 <juggle_pal_onedir()+0x24c>)
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
     ef4:	f88a 3000 	strb.w	r3, [sl]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
     ef8:	f3c7 1703 	ubfx	r7, r7, #4, #4
     efc:	1d3d      	adds	r5, r7, #4

void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
     efe:	4b62      	ldr	r3, [pc, #392]	; (1088 <juggle_pal_onedir()+0x250>)
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
     f00:	f88b 5000 	strb.w	r5, [fp]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     f04:	b2d2      	uxtb	r2, r2
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
     f06:	7022      	strb	r2, [r4, #0]
void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
     f08:	4d60      	ldr	r5, [pc, #384]	; (108c <juggle_pal_onedir()+0x254>)
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    this_delay =10; 
     f0a:	4c61      	ldr	r4, [pc, #388]	; (1090 <juggle_pal_onedir()+0x258>)


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
     f0c:	f888 0000 	strb.w	r0, [r8]
		use_palette = 1;
     f10:	2001      	movs	r0, #1
     f12:	7018      	strb	r0, [r3, #0]



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
     f14:	2300      	movs	r3, #0
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    this_delay =10; 
     f16:	200a      	movs	r0, #10
void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
     f18:	702b      	strb	r3, [r5, #0]



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
     f1a:	700b      	strb	r3, [r1, #0]
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
     f1c:	f889 3000 	strb.w	r3, [r9]
    this_delay =10; 
     f20:	6020      	str	r0, [r4, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     f22:	2123      	movs	r1, #35	; 0x23
     f24:	485b      	ldr	r0, [pc, #364]	; (1094 <juggle_pal_onedir()+0x25c>)
     f26:	f004 fc4b 	bl	57c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	for (int i = 0; i < numdots; i++) {
     f2a:	f898 3000 	ldrb.w	r3, [r8]
     f2e:	2b00      	cmp	r3, #0
     f30:	f000 8091 	beq.w	1056 <juggle_pal_onedir()+0x21e>
     f34:	4f58      	ldr	r7, [pc, #352]	; (1098 <juggle_pal_onedir()+0x260>)
     f36:	f8df b180 	ldr.w	fp, [pc, #384]	; 10b8 <juggle_pal_onedir()+0x280>
     f3a:	783a      	ldrb	r2, [r7, #0]
     f3c:	f8df a174 	ldr.w	sl, [pc, #372]	; 10b4 <juggle_pal_onedir()+0x27c>
     f40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 10c0 <juggle_pal_onedir()+0x288>
     f44:	4e53      	ldr	r6, [pc, #332]	; (1094 <juggle_pal_onedir()+0x25c>)
     f46:	2500      	movs	r5, #0
     f48:	e062      	b.n	1010 <juggle_pal_onedir()+0x1d8>
		if (!this_dir) {
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
     f4a:	f89b 1000 	ldrb.w	r1, [fp]
     f4e:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f50:	4952      	ldr	r1, [pc, #328]	; (109c <juggle_pal_onedir()+0x264>)
     f52:	eb03 0345 	add.w	r3, r3, r5, lsl #1
     f56:	6809      	ldr	r1, [r1, #0]
     f58:	9104      	str	r1, [sp, #16]
     f5a:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     f5c:	2bff      	cmp	r3, #255	; 0xff
	return ret;
     f5e:	9804      	ldr	r0, [sp, #16]
     f60:	bf98      	it	ls
     f62:	021b      	lslls	r3, r3, #8
uint8_t ball_hue = 0;
*/
LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     f64:	f44f 718c 	mov.w	r1, #280	; 0x118
     f68:	bf98      	it	ls
     f6a:	b29b      	uxthls	r3, r3
     f6c:	fb01 f000 	mul.w	r0, r1, r0
     f70:	fb03 f000 	mul.w	r0, r3, r0
     f74:	f3c0 400e 	ubfx	r0, r0, #16, #15
     f78:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     f7c:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     f7e:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     f82:	d503      	bpl.n	f8c <juggle_pal_onedir()+0x154>
     f84:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     f88:	3307      	adds	r3, #7
     f8a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     f8c:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     f90:	f3c3 0146 	ubfx	r1, r3, #1, #7
     f94:	4b42      	ldr	r3, [pc, #264]	; (10a0 <juggle_pal_onedir()+0x268>)
     f96:	f813 400e 	ldrb.w	r4, [r3, lr]
     f9a:	4b42      	ldr	r3, [pc, #264]	; (10a4 <juggle_pal_onedir()+0x26c>)
     f9c:	f833 301e 	ldrh.w	r3, [r3, lr, lsl #1]
     fa0:	fb04 3301 	mla	r3, r4, r1, r3
     fa4:	b29c      	uxth	r4, r3

    if( theta & 0x8000 ) y = -y;
     fa6:	0403      	lsls	r3, r0, #16
     fa8:	bf48      	it	mi
     faa:	4264      	negmi	r4, r4
     fac:	b224      	sxth	r4, r4
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
     fae:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     fb2:	b2a4      	uxth	r4, r4
     fb4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     fb8:	493b      	ldr	r1, [pc, #236]	; (10a8 <juggle_pal_onedir()+0x270>)
     fba:	4b3c      	ldr	r3, [pc, #240]	; (10ac <juggle_pal_onedir()+0x274>)
     fbc:	7809      	ldrb	r1, [r1, #0]
     fbe:	781b      	ldrb	r3, [r3, #0]
     fc0:	9100      	str	r1, [sp, #0]
     fc2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
     fc6:	0c24      	lsrs	r4, r4, #16


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     fc8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     fcc:	4938      	ldr	r1, [pc, #224]	; (10b0 <juggle_pal_onedir()+0x278>)
     fce:	a803      	add	r0, sp, #12
     fd0:	f004 fc48 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
     fd4:	1931      	adds	r1, r6, r4
     fd6:	5d33      	ldrb	r3, [r6, r4]
     fd8:	f89d 200c 	ldrb.w	r2, [sp, #12]
     fdc:	fa83 f352 	uqadd8	r3, r3, r2
     fe0:	5533      	strb	r3, [r6, r4]
     fe2:	784a      	ldrb	r2, [r1, #1]
     fe4:	f89d 300d 	ldrb.w	r3, [sp, #13]
     fe8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     fec:	704a      	strb	r2, [r1, #1]
     fee:	788b      	ldrb	r3, [r1, #2]
     ff0:	f89d 200e 	ldrb.w	r2, [sp, #14]
     ff4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
     ff8:	708b      	strb	r3, [r1, #2]
		}
		this_index += this_diff;
     ffa:	7839      	ldrb	r1, [r7, #0]
     ffc:	f89a 2000 	ldrb.w	r2, [sl]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1000:	f898 3000 	ldrb.w	r3, [r8]
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		this_index += this_diff;
    1004:	440a      	add	r2, r1
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1006:	3501      	adds	r5, #1
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		this_index += this_diff;
    1008:	b2d2      	uxtb	r2, r2
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    100a:	42ab      	cmp	r3, r5
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		this_index += this_diff;
    100c:	703a      	strb	r2, [r7, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    100e:	dd22      	ble.n	1056 <juggle_pal_onedir()+0x21e>
		if (!this_dir) {
    1010:	f899 1000 	ldrb.w	r1, [r9]
    1014:	2900      	cmp	r1, #0
    1016:	d098      	beq.n	f4a <juggle_pal_onedir()+0x112>
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1018:	f89b 1000 	ldrb.w	r1, [fp]
    101c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    101e:	491f      	ldr	r1, [pc, #124]	; (109c <juggle_pal_onedir()+0x264>)
    1020:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    1024:	6809      	ldr	r1, [r1, #0]
    1026:	9105      	str	r1, [sp, #20]
    1028:	b29b      	uxth	r3, r3
    102a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    102c:	9805      	ldr	r0, [sp, #20]
    102e:	bf98      	it	ls
    1030:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1032:	f44f 718c 	mov.w	r1, #280	; 0x118
    1036:	bf98      	it	ls
    1038:	b29b      	uxthls	r3, r3
    103a:	fb01 f000 	mul.w	r0, r1, r0
    103e:	fb03 f000 	mul.w	r0, r3, r0
    1042:	f3c0 400e 	ubfx	r0, r0, #16, #15
    1046:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
    104a:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    104c:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    104e:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1052:	d59b      	bpl.n	f8c <juggle_pal_onedir()+0x154>
    1054:	e796      	b.n	f84 <juggle_pal_onedir()+0x14c>
		}
		this_index += this_diff;
	}
} // 
    1056:	b007      	add	sp, #28
    1058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    this_delay =10; 
	}
	if (reset_juggle_index) {
    105c:	4a0b      	ldr	r2, [pc, #44]	; (108c <juggle_pal_onedir()+0x254>)
    105e:	7812      	ldrb	r2, [r2, #0]
    1060:	b132      	cbz	r2, 1070 <juggle_pal_onedir()+0x238>
    1062:	4a08      	ldr	r2, [pc, #32]	; (1084 <juggle_pal_onedir()+0x24c>)
		this_index = 0;
    1064:	490c      	ldr	r1, [pc, #48]	; (1098 <juggle_pal_onedir()+0x260>)
    1066:	7812      	ldrb	r2, [r2, #0]
    1068:	f8df 8050 	ldr.w	r8, [pc, #80]	; 10bc <juggle_pal_onedir()+0x284>
    106c:	700b      	strb	r3, [r1, #0]
    106e:	e758      	b.n	f22 <juggle_pal_onedir()+0xea>
    1070:	4b04      	ldr	r3, [pc, #16]	; (1084 <juggle_pal_onedir()+0x24c>)
    1072:	f8df 8048 	ldr.w	r8, [pc, #72]	; 10bc <juggle_pal_onedir()+0x284>
    1076:	781a      	ldrb	r2, [r3, #0]
    1078:	e753      	b.n	f22 <juggle_pal_onedir()+0xea>
    107a:	bf00      	nop
    107c:	1fff077c 	.word	0x1fff077c
    1080:	1fff0792 	.word	0x1fff0792
    1084:	1fff0770 	.word	0x1fff0770
    1088:	1fff0774 	.word	0x1fff0774
    108c:	1fff1119 	.word	0x1fff1119
    1090:	1fff0778 	.word	0x1fff0778
    1094:	1fff0dcc 	.word	0x1fff0dcc
    1098:	1fff1075 	.word	0x1fff1075
    109c:	1fff1368 	.word	0x1fff1368
    10a0:	00008e94 	.word	0x00008e94
    10a4:	00009874 	.word	0x00009874
    10a8:	1fff1114 	.word	0x1fff1114
    10ac:	1fff077f 	.word	0x1fff077f
    10b0:	1fff0f40 	.word	0x1fff0f40
    10b4:	1fff0772 	.word	0x1fff0772
    10b8:	1fff078d 	.word	0x1fff078d
    10bc:	1fff078c 	.word	0x1fff078c
    10c0:	1fff1118 	.word	0x1fff1118

000010c4 <one_sin()>:
#ifndef ONE_SIN_H
#define ONE_SIN_H


void one_sin() {
    10c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    10c8:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 1380 <one_sin()+0x2bc>
    10cc:	f899 3000 	ldrb.w	r3, [r9]
#ifndef ONE_SIN_H
#define ONE_SIN_H


void one_sin() {
    10d0:	b08b      	sub	sp, #44	; 0x2c
	if (mode_change) {
    10d2:	2b00      	cmp	r3, #0
    10d4:	f040 8093 	bne.w	11fe <one_sin()+0x13a>
    10d8:	4999      	ldr	r1, [pc, #612]	; (1340 <one_sin()+0x27c>)
    10da:	9104      	str	r1, [sp, #16]
    10dc:	4999      	ldr	r1, [pc, #612]	; (1344 <one_sin()+0x280>)
    10de:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 1384 <one_sin()+0x2c0>
    10e2:	4b99      	ldr	r3, [pc, #612]	; (1348 <one_sin()+0x284>)
    10e4:	9103      	str	r1, [sp, #12]
    10e6:	4999      	ldr	r1, [pc, #612]	; (134c <one_sin()+0x288>)
    10e8:	9105      	str	r1, [sp, #20]
    10ea:	4999      	ldr	r1, [pc, #612]	; (1350 <one_sin()+0x28c>)
    10ec:	9107      	str	r1, [sp, #28]
    10ee:	f898 2000 	ldrb.w	r2, [r8]
    10f2:	4998      	ldr	r1, [pc, #608]	; (1354 <one_sin()+0x290>)
    10f4:	781b      	ldrb	r3, [r3, #0]
    10f6:	9106      	str	r1, [sp, #24]
		else {
			bg_bri = 0;
		}
		use_palette = 1;
	}
	start_index += this_inc;
    10f8:	4897      	ldr	r0, [pc, #604]	; (1358 <one_sin()+0x294>)
	this_index = start_index;
	if (this_dir) {
    10fa:	4c98      	ldr	r4, [pc, #608]	; (135c <one_sin()+0x298>)
		else {
			bg_bri = 0;
		}
		use_palette = 1;
	}
	start_index += this_inc;
    10fc:	7801      	ldrb	r1, [r0, #0]
	this_index = start_index;
    10fe:	4f98      	ldr	r7, [pc, #608]	; (1360 <one_sin()+0x29c>)
	if (this_dir) {
		this_phase += this_speed;                                                                   
    1100:	f8df 9284 	ldr.w	r9, [pc, #644]	; 1388 <one_sin()+0x2c4>
		}
		use_palette = 1;
	}
	start_index += this_inc;
	this_index = start_index;
	if (this_dir) {
    1104:	7824      	ldrb	r4, [r4, #0]
		else {
			bg_bri = 0;
		}
		use_palette = 1;
	}
	start_index += this_inc;
    1106:	440a      	add	r2, r1
    1108:	b2d2      	uxtb	r2, r2
    110a:	7002      	strb	r2, [r0, #0]
	this_index = start_index;
    110c:	703a      	strb	r2, [r7, #0]
	if (this_dir) {
		this_phase += this_speed;                                                                   
    110e:	f8d9 2000 	ldr.w	r2, [r9]
		}
		use_palette = 1;
	}
	start_index += this_inc;
	this_index = start_index;
	if (this_dir) {
    1112:	2c00      	cmp	r4, #0
    1114:	d06f      	beq.n	11f6 <one_sin()+0x132>
		this_phase += this_speed;                                                                   
    1116:	4413      	add	r3, r2
    1118:	f8c9 3000 	str.w	r3, [r9]
    111c:	4c91      	ldr	r4, [pc, #580]	; (1364 <one_sin()+0x2a0>)
    111e:	2500      	movs	r5, #0
    1120:	1c66      	adds	r6, r4, #1
    1122:	e001      	b.n	1128 <one_sin()+0x64>
    1124:	f8d9 3000 	ldr.w	r3, [r9]
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
    1128:	9a05      	ldr	r2, [sp, #20]
    112a:	7811      	ldrb	r1, [r2, #0]
    112c:	fa5f fb85 	uxtb.w	fp, r5
    1130:	fb01 330b 	mla	r3, r1, fp, r3
    1134:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    1136:	0619      	lsls	r1, r3, #24
        in = 255 - in;
    1138:	bf44      	itt	mi
    113a:	43db      	mvnmi	r3, r3
    113c:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    113e:	005b      	lsls	r3, r3, #1
    1140:	b2db      	uxtb	r3, r3
    1142:	1c59      	adds	r1, r3, #1
    1144:	fb01 f303 	mul.w	r3, r1, r3
    1148:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    114a:	fb03 f101 	mul.w	r1, r3, r1
    114e:	1209      	asrs	r1, r1, #8
    1150:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1154:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    1158:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    115a:	05da      	lsls	r2, r3, #23
    115c:	9a04      	ldr	r2, [sp, #16]
    115e:	7811      	ldrb	r1, [r2, #0]
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
    1160:	9a06      	ldr	r2, [sp, #24]
    1162:	7810      	ldrb	r0, [r2, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1164:	9a07      	ldr	r2, [sp, #28]
    1166:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    116a:	bf54      	ite	pl
    116c:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    116e:	23ff      	movmi	r3, #255	; 0xff
    1170:	f892 e000 	ldrb.w	lr, [r2]
    1174:	f88d e024 	strb.w	lr, [sp, #36]	; 0x24
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
    1178:	4299      	cmp	r1, r3
    117a:	bf34      	ite	cc
    117c:	f04f 0aff 	movcc.w	sl, #255	; 0xff
    1180:	f04f 0a00 	movcs.w	sl, #0
    1184:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1188:	4621      	mov	r1, r4
    118a:	a809      	add	r0, sp, #36	; 0x24
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    118c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1190:	f004 fcb2 	bl	5af8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
		leds[k] += ColorFromPalette(current_palette, this_index + k * this_inc, sin_bright, current_blending);
    1194:	7839      	ldrb	r1, [r7, #0]
    1196:	f898 0000 	ldrb.w	r0, [r8]
    119a:	4b73      	ldr	r3, [pc, #460]	; (1368 <one_sin()+0x2a4>)
    119c:	fb00 120b 	mla	r2, r0, fp, r1
    11a0:	781b      	ldrb	r3, [r3, #0]
    11a2:	9300      	str	r3, [sp, #0]
    11a4:	b2d2      	uxtb	r2, r2
    11a6:	4653      	mov	r3, sl
    11a8:	4970      	ldr	r1, [pc, #448]	; (136c <one_sin()+0x2a8>)
    11aa:	a809      	add	r0, sp, #36	; 0x24
    11ac:	f004 fb5a 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    11b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
    11b4:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    11b8:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    11bc:	f806 3c01 	strb.w	r3, [r6, #-1]
    11c0:	7862      	ldrb	r2, [r4, #1]
    11c2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    11c6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    11ca:	7062      	strb	r2, [r4, #1]
    11cc:	78a3      	ldrb	r3, [r4, #2]
    11ce:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    11d2:	fa83 f352 	uqadd8	r3, r3, r2
		this_index += this_rot;
    11d6:	9a03      	ldr	r2, [sp, #12]
    11d8:	7839      	ldrb	r1, [r7, #0]
    11da:	7812      	ldrb	r2, [r2, #0]
        b = qadd8( b, rhs.b);
    11dc:	70a3      	strb	r3, [r4, #2]
		this_phase += this_speed;                                                                   
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
    11de:	3501      	adds	r5, #1
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
		leds[k] += ColorFromPalette(current_palette, this_index + k * this_inc, sin_bright, current_blending);
		this_index += this_rot;
    11e0:	188b      	adds	r3, r1, r2
		this_phase += this_speed;                                                                   
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
    11e2:	2d23      	cmp	r5, #35	; 0x23
    11e4:	f104 0403 	add.w	r4, r4, #3
    11e8:	f106 0603 	add.w	r6, r6, #3
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
		leds[k] += ColorFromPalette(current_palette, this_index + k * this_inc, sin_bright, current_blending);
		this_index += this_rot;
    11ec:	703b      	strb	r3, [r7, #0]
		this_phase += this_speed;                                                                   
	}
	else {
		this_phase -= this_speed;                                                                     
	}
	for (int k = 0; k < NUM_LEDS; k++) {                                                           
    11ee:	d199      	bne.n	1124 <one_sin()+0x60>
		int sin_bright = qsubd(cubicwave8((k * all_freq) + this_phase), this_cutoff);                    
		leds[k] = CHSV(bg_clr, 255, bg_bri);                                                        
		leds[k] += ColorFromPalette(current_palette, this_index + k * this_inc, sin_bright, current_blending);
		this_index += this_rot;
	}
}
    11f0:	b00b      	add	sp, #44	; 0x2c
    11f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	this_index = start_index;
	if (this_dir) {
		this_phase += this_speed;                                                                   
	}
	else {
		this_phase -= this_speed;                                                                     
    11f6:	1ad3      	subs	r3, r2, r3
    11f8:	f8c9 3000 	str.w	r3, [r9]
    11fc:	e78e      	b.n	111c <one_sin()+0x58>
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
    11fe:	4b54      	ldr	r3, [pc, #336]	; (1350 <one_sin()+0x28c>)
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
    1200:	4a50      	ldr	r2, [pc, #320]	; (1344 <one_sin()+0x280>)
		all_freq = random8(1, 9);
		bg_clr = random8();
    1202:	9307      	str	r3, [sp, #28]
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1204:	2107      	movs	r1, #7
    1206:	461c      	mov	r4, r3
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
    1208:	4e4d      	ldr	r6, [pc, #308]	; (1340 <one_sin()+0x27c>)
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
    120a:	4b50      	ldr	r3, [pc, #320]	; (134c <one_sin()+0x288>)
    120c:	4858      	ldr	r0, [pc, #352]	; (1370 <one_sin()+0x2ac>)
    120e:	9305      	str	r3, [sp, #20]
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
    1210:	9203      	str	r2, [sp, #12]
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
    1212:	9604      	str	r6, [sp, #16]
    1214:	f006 f8a6 	bl	7364 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1218:	4856      	ldr	r0, [pc, #344]	; (1374 <one_sin()+0x2b0>)
void one_sin() {
	if (mode_change) {
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
    121a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1384 <one_sin()+0x2c0>
    121e:	f006 faa7 	bl	7770 <Print::println()>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1222:	f8df c168 	ldr.w	ip, [pc, #360]	; 138c <one_sin()+0x2c8>
    1226:	f8bc 3000 	ldrh.w	r3, [ip]
    122a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    122e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1232:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1236:	3319      	adds	r3, #25
    1238:	b29b      	uxth	r3, r3
    123a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    123e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    1242:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    1246:	3619      	adds	r6, #25
    1248:	b2b6      	uxth	r6, r6
    124a:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    124e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    1252:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    1256:	3119      	adds	r1, #25
    1258:	b289      	uxth	r1, r1
    125a:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    125e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1262:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1266:	3019      	adds	r0, #25
    1268:	b280      	uxth	r0, r0
    126a:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    126e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    1272:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    1276:	3519      	adds	r5, #25
    1278:	b2ad      	uxth	r5, r5
    127a:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    127e:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    1282:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    1286:	f10e 0e19 	add.w	lr, lr, #25
    128a:	fa1f fe8e 	uxth.w	lr, lr
    128e:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    1292:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    1296:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    129a:	3719      	adds	r7, #25
    129c:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    129e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    12a2:	eb05 2515 	add.w	r5, r5, r5, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    12a6:	f8ac 7000 	strh.w	r7, [ip]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    12aa:	b2da      	uxtb	r2, r3
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
    12ac:	f3c5 1542 	ubfx	r5, r5, #5, #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    12b0:	eb06 2316 	add.w	r3, r6, r6, lsr #8
    12b4:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    12b8:	9f05      	ldr	r7, [sp, #20]
	if (mode_change) {
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
    12ba:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1348 <one_sin()+0x284>
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
    12be:	3501      	adds	r5, #1
    12c0:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    12c4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
    12c8:	b2c9      	uxtb	r1, r1
		this_rot = random8(1, 5);
    12ca:	f3c0 1081 	ubfx	r0, r0, #6, #2
		all_freq = random8(1, 9);
    12ce:	703d      	strb	r5, [r7, #0]
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
    12d0:	9d03      	ldr	r5, [sp, #12]
    12d2:	3001      	adds	r0, #1
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
    12d4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    12d8:	b2f6      	uxtb	r6, r6
		this_rot = random8(1, 5);
    12da:	7028      	strb	r0, [r5, #0]
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
    12dc:	1109      	asrs	r1, r1, #4
    12de:	9d04      	ldr	r5, [sp, #16]

void one_sin() {
	if (mode_change) {
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
    12e0:	4825      	ldr	r0, [pc, #148]	; (1378 <one_sin()+0x2b4>)
    12e2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
    12e6:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    12ea:	f884 e000 	strb.w	lr, [r4]
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
    12ee:	3980      	subs	r1, #128	; 0x80
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
    12f0:	4c18      	ldr	r4, [pc, #96]	; (1354 <one_sin()+0x290>)
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
    12f2:	7029      	strb	r1, [r5, #0]
    12f4:	11f6      	asrs	r6, r6, #7
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
		if (bg_bri > 8) {
    12f6:	2e09      	cmp	r6, #9
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
    12f8:	9406      	str	r4, [sp, #24]

void one_sin() {
	if (mode_change) {
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
    12fa:	f04f 050a 	mov.w	r5, #10


void one_sin() {
	if (mode_change) {
    Serial.println("ONE_SIN");
		mode_change = 0;
    12fe:	f04f 0100 	mov.w	r1, #0
		this_delay = 10;
    1302:	6005      	str	r5, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1304:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
		bg_bri = random8(10);
		if (bg_bri > 8) {
			bg_bri = 200;
		}
		else {
			bg_bri = 0;
    1308:	bf18      	it	ne
    130a:	9806      	ldrne	r0, [sp, #24]


void one_sin() {
	if (mode_change) {
    Serial.println("ONE_SIN");
		mode_change = 0;
    130c:	f889 1000 	strb.w	r1, [r9]
    1310:	ea4f 2222 	mov.w	r2, r2, asr #8
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
		if (bg_bri > 8) {
			bg_bri = 200;
    1314:	bf08      	it	eq
    1316:	21c8      	moveq	r1, #200	; 0xc8
		this_speed = random8(1, 5);
		this_cutoff = random8(128, 240);
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
    1318:	7026      	strb	r6, [r4, #0]
    131a:	f102 0201 	add.w	r2, r2, #1
		if (bg_bri > 8) {
			bg_bri = 200;
		}
		else {
			bg_bri = 0;
    131e:	bf18      	it	ne
    1320:	7001      	strbne	r1, [r0, #0]
    1322:	f3c3 1381 	ubfx	r3, r3, #6, #2
		this_rot = random8(1, 5);
		all_freq = random8(1, 9);
		bg_clr = random8();
		bg_bri = random8(10);
		if (bg_bri > 8) {
			bg_bri = 200;
    1326:	bf08      	it	eq
    1328:	7021      	strbeq	r1, [r4, #0]
		}
		else {
			bg_bri = 0;
		}
		use_palette = 1;
    132a:	4914      	ldr	r1, [pc, #80]	; (137c <one_sin()+0x2b8>)
    132c:	b2d2      	uxtb	r2, r2
    132e:	3301      	adds	r3, #1
    1330:	2001      	movs	r0, #1
	if (mode_change) {
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
		this_speed = random8(1, 5);
    1332:	f88c 3000 	strb.w	r3, [ip]
void one_sin() {
	if (mode_change) {
    Serial.println("ONE_SIN");
		mode_change = 0;
		this_delay = 10;
		this_inc = random8(1, 10);
    1336:	f888 2000 	strb.w	r2, [r8]
			bg_bri = 200;
		}
		else {
			bg_bri = 0;
		}
		use_palette = 1;
    133a:	7008      	strb	r0, [r1, #0]
    133c:	e6dc      	b.n	10f8 <one_sin()+0x34>
    133e:	bf00      	nop
    1340:	1fff0783 	.word	0x1fff0783
    1344:	1fff0784 	.word	0x1fff0784
    1348:	1fff0773 	.word	0x1fff0773
    134c:	1fff077d 	.word	0x1fff077d
    1350:	1fff0e35 	.word	0x1fff0e35
    1354:	1fff1134 	.word	0x1fff1134
    1358:	1fff114c 	.word	0x1fff114c
    135c:	1fff1118 	.word	0x1fff1118
    1360:	1fff1075 	.word	0x1fff1075
    1364:	1fff0dcc 	.word	0x1fff0dcc
    1368:	1fff1114 	.word	0x1fff1114
    136c:	1fff0f40 	.word	0x1fff0f40
    1370:	00008318 	.word	0x00008318
    1374:	1fff079c 	.word	0x1fff079c
    1378:	1fff0778 	.word	0x1fff0778
    137c:	1fff0774 	.word	0x1fff0774
    1380:	1fff077c 	.word	0x1fff077c
    1384:	1fff0782 	.word	0x1fff0782
    1388:	1fff1198 	.word	0x1fff1198
    138c:	1fff0792 	.word	0x1fff0792

00001390 <two_sin()>:
#define TWO_SIN_H


bool hue_change;

void two_sin() {
    1390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1394:	4d7f      	ldr	r5, [pc, #508]	; (1594 <two_sin()+0x204>)
    1396:	782b      	ldrb	r3, [r5, #0]
#define TWO_SIN_H


bool hue_change;

void two_sin() {
    1398:	b087      	sub	sp, #28
	if (mode_change) {
    139a:	2b00      	cmp	r3, #0
    139c:	f040 8118 	bne.w	15d0 <two_sin()+0x240>
    13a0:	4a7d      	ldr	r2, [pc, #500]	; (1598 <two_sin()+0x208>)
    13a2:	4b7e      	ldr	r3, [pc, #504]	; (159c <two_sin()+0x20c>)
    13a4:	487e      	ldr	r0, [pc, #504]	; (15a0 <two_sin()+0x210>)
    13a6:	9001      	str	r0, [sp, #4]
    13a8:	487e      	ldr	r0, [pc, #504]	; (15a4 <two_sin()+0x214>)
    13aa:	7814      	ldrb	r4, [r2, #0]
    13ac:	9000      	str	r0, [sp, #0]
    13ae:	781a      	ldrb	r2, [r3, #0]
    13b0:	487d      	ldr	r0, [pc, #500]	; (15a8 <two_sin()+0x218>)
    13b2:	497e      	ldr	r1, [pc, #504]	; (15ac <two_sin()+0x21c>)
    13b4:	4b7e      	ldr	r3, [pc, #504]	; (15b0 <two_sin()+0x220>)
    13b6:	4f7f      	ldr	r7, [pc, #508]	; (15b4 <two_sin()+0x224>)
    13b8:	4e7f      	ldr	r6, [pc, #508]	; (15b8 <two_sin()+0x228>)
    13ba:	9002      	str	r0, [sp, #8]
		that_cutoff = random8(128, 200);
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
	}
	if (this_dir == 0) { this_phase += this_speed; that_phase += that_speed; }
    13bc:	487f      	ldr	r0, [pc, #508]	; (15bc <two_sin()+0x22c>)
    13be:	f8df 8204 	ldr.w	r8, [pc, #516]	; 15c4 <two_sin()+0x234>
    13c2:	7800      	ldrb	r0, [r0, #0]
    13c4:	f8df 9200 	ldr.w	r9, [pc, #512]	; 15c8 <two_sin()+0x238>
    13c8:	f8d8 5000 	ldr.w	r5, [r8]
    13cc:	2800      	cmp	r0, #0
    13ce:	f040 80d7 	bne.w	1580 <two_sin()+0x1f0>
    13d2:	f8d9 0000 	ldr.w	r0, [r9]
    13d6:	442c      	add	r4, r5
    13d8:	4402      	add	r2, r0
    13da:	f8c8 4000 	str.w	r4, [r8]
    13de:	f8c9 2000 	str.w	r2, [r9]
	else { this_phase -= this_speed; that_phase -= that_speed; }

	this_hue += this_rot;                                                // Hue rotation is fun for this_wave.
    13e2:	7809      	ldrb	r1, [r1, #0]
    13e4:	f897 e000 	ldrb.w	lr, [r7]
	that_hue += that_rot;                                                // It's also fun for that_wave.
    13e8:	7830      	ldrb	r0, [r6, #0]
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 15cc <two_sin()+0x23c>
    13f0:	4d73      	ldr	r5, [pc, #460]	; (15c0 <two_sin()+0x230>)
		that_hue = random8();
	}
	if (this_dir == 0) { this_phase += this_speed; that_phase += that_speed; }
	else { this_phase -= this_speed; that_phase -= that_speed; }

	this_hue += this_rot;                                                // Hue rotation is fun for this_wave.
    13f2:	448e      	add	lr, r1
    13f4:	fa5f fe8e 	uxtb.w	lr, lr
	that_hue += that_rot;                                                // It's also fun for that_wave.
    13f8:	4403      	add	r3, r0
		that_hue = random8();
	}
	if (this_dir == 0) { this_phase += this_speed; that_phase += that_speed; }
	else { this_phase -= this_speed; that_phase -= that_speed; }

	this_hue += this_rot;                                                // Hue rotation is fun for this_wave.
    13fa:	f887 e000 	strb.w	lr, [r7]
	that_hue += that_rot;                                                // It's also fun for that_wave.
    13fe:	7033      	strb	r3, [r6, #0]

	for (int k = 0; k < NUM_LEDS - 1; k++) {
    1400:	f04f 0b00 	mov.w	fp, #0
    1404:	4621      	mov	r1, r4
    1406:	e08e      	b.n	1526 <two_sin()+0x196>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    1408:	f1bc 0f00 	cmp.w	ip, #0
        in = 255 - in;
    140c:	bfbc      	itt	lt
    140e:	43c9      	mvnlt	r1, r1
    1410:	b2c9      	uxtblt	r1, r1
    1412:	0049      	lsls	r1, r1, #1
    1414:	b2c9      	uxtb	r1, r1
    1416:	1c4b      	adds	r3, r1, #1
    1418:	fb03 f101 	mul.w	r1, r3, r1
    141c:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    141e:	fb01 f303 	mul.w	r3, r1, r3
    1422:	121b      	asrs	r3, r3, #8
    1424:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1428:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    142c:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    142e:	05d9      	lsls	r1, r3, #23
    1430:	bf54      	ite	pl
    1432:	b2db      	uxtbpl	r3, r3
    1434:	23ff      	movmi	r3, #255	; 0xff
    1436:	1b1b      	subs	r3, r3, r4
    1438:	b2db      	uxtb	r3, r3
		int this_bright = qsuba(cubicwave8((k * all_freq) + this_phase), this_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
		int that_bright = qsuba(cubicwave8((k * all_freq) + 128 + that_phase), that_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    143a:	3a80      	subs	r2, #128	; 0x80
    143c:	4410      	add	r0, r2
    143e:	b2c0      	uxtb	r0, r0
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    1440:	fa4f fc80 	sxtb.w	ip, r0
    1444:	f1bc 0f00 	cmp.w	ip, #0
        in = 255 - in;
    1448:	bfba      	itte	lt
    144a:	43c1      	mvnlt	r1, r0
    144c:	b2c9      	uxtblt	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    144e:	4601      	movge	r1, r0
    1450:	0049      	lsls	r1, r1, #1
    1452:	b2c9      	uxtb	r1, r1
    1454:	1c4a      	adds	r2, r1, #1
    1456:	fb02 f101 	mul.w	r1, r2, r1
    145a:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    145c:	fb01 f202 	mul.w	r2, r1, r2
    1460:	1212      	asrs	r2, r2, #8
    1462:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1466:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    146a:	9900      	ldr	r1, [sp, #0]
    146c:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    146e:	05d4      	lsls	r4, r2, #23
    1470:	7809      	ldrb	r1, [r1, #0]

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    1472:	bf54      	ite	pl
    1474:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    1476:	22ff      	movmi	r2, #255	; 0xff
    1478:	4291      	cmp	r1, r2
    147a:	d27c      	bcs.n	1576 <two_sin()+0x1e6>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    147c:	f1bc 0f00 	cmp.w	ip, #0
        in = 255 - in;
    1480:	bfbc      	itt	lt
    1482:	43c0      	mvnlt	r0, r0
    1484:	b2c0      	uxtblt	r0, r0
    1486:	0040      	lsls	r0, r0, #1
    1488:	b2c0      	uxtb	r0, r0
    148a:	1c42      	adds	r2, r0, #1
    148c:	fb02 f000 	mul.w	r0, r2, r0
    1490:	1200      	asrs	r0, r0, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    1492:	fb00 f202 	mul.w	r2, r0, r2
    1496:	1212      	asrs	r2, r2, #8
    1498:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    149c:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
    14a0:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    14a2:	05d0      	lsls	r0, r2, #23
    14a4:	bf54      	ite	pl
    14a6:	b2d4      	uxtbpl	r4, r2
    14a8:	24ff      	movmi	r4, #255	; 0xff
    14aa:	1a64      	subs	r4, r4, r1
    14ac:	b2e4      	uxtb	r4, r4

		leds[k] = CHSV(this_hue, this_sat, this_bright);                              // Assigning hues and brightness to the led array.
    14ae:	782a      	ldrb	r2, [r5, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    14b0:	f88d e014 	strb.w	lr, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    14b4:	4651      	mov	r1, sl
    14b6:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    14b8:	f88d 3016 	strb.w	r3, [sp, #22]
    14bc:	f88d 2015 	strb.w	r2, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    14c0:	f004 fb1a 	bl	5af8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds[k] += CHSV(that_hue, this_sat, that_bright);
    14c4:	782a      	ldrb	r2, [r5, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    14c6:	7833      	ldrb	r3, [r6, #0]
    14c8:	f88d 2011 	strb.w	r2, [sp, #17]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    14cc:	a905      	add	r1, sp, #20
    14ce:	a804      	add	r0, sp, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    14d0:	f88d 3010 	strb.w	r3, [sp, #16]
    14d4:	f88d 4012 	strb.w	r4, [sp, #18]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    14d8:	f004 fb0e 	bl	5af8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    14dc:	f89a 3000 	ldrb.w	r3, [sl]
    14e0:	f89d 2014 	ldrb.w	r2, [sp, #20]
    14e4:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    14e8:	f88a 3000 	strb.w	r3, [sl]
    14ec:	f89a 2001 	ldrb.w	r2, [sl, #1]
    14f0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    14f4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    14f8:	f88a 2001 	strb.w	r2, [sl, #1]
    14fc:	f89a 3002 	ldrb.w	r3, [sl, #2]
    1500:	f89d 2016 	ldrb.w	r2, [sp, #22]
    1504:	fa83 f352 	uqadd8	r3, r3, r2
	else { this_phase -= this_speed; that_phase -= that_speed; }

	this_hue += this_rot;                                                // Hue rotation is fun for this_wave.
	that_hue += that_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < NUM_LEDS - 1; k++) {
    1508:	f10b 0b01 	add.w	fp, fp, #1
    150c:	f1bb 0f22 	cmp.w	fp, #34	; 0x22
        b = qadd8( b, rhs.b);
    1510:	f88a 3002 	strb.w	r3, [sl, #2]
    1514:	f10a 0a03 	add.w	sl, sl, #3
    1518:	d02f      	beq.n	157a <two_sin()+0x1ea>
    151a:	f8d8 1000 	ldr.w	r1, [r8]
    151e:	f8d9 2000 	ldr.w	r2, [r9]
    1522:	f897 e000 	ldrb.w	lr, [r7]
		int this_bright = qsuba(cubicwave8((k * all_freq) + this_phase), this_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    1526:	9b02      	ldr	r3, [sp, #8]
    1528:	7818      	ldrb	r0, [r3, #0]
    152a:	fb10 f00b 	smulbb	r0, r0, fp
    152e:	b2c0      	uxtb	r0, r0
    1530:	4401      	add	r1, r0
    1532:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    1534:	fa4f fc81 	sxtb.w	ip, r1
    1538:	f1bc 0f00 	cmp.w	ip, #0
        in = 255 - in;
    153c:	bfba      	itte	lt
    153e:	43cb      	mvnlt	r3, r1
    1540:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    1542:	460b      	movge	r3, r1
    1544:	005b      	lsls	r3, r3, #1
    1546:	b2db      	uxtb	r3, r3
    1548:	1c5c      	adds	r4, r3, #1
    154a:	fb04 f303 	mul.w	r3, r4, r3
    154e:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    1550:	fb03 f404 	mul.w	r4, r3, r4
    1554:	1224      	asrs	r4, r4, #8
    1556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    155a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
    155e:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    1560:	05dc      	lsls	r4, r3, #23
    1562:	9c01      	ldr	r4, [sp, #4]
    1564:	7824      	ldrb	r4, [r4, #0]

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    1566:	bf54      	ite	pl
    1568:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    156a:	23ff      	movmi	r3, #255	; 0xff
    156c:	429c      	cmp	r4, r3
    156e:	f4ff af4b 	bcc.w	1408 <two_sin()+0x78>
    1572:	2300      	movs	r3, #0
    1574:	e761      	b.n	143a <two_sin()+0xaa>
    1576:	2400      	movs	r4, #0
    1578:	e799      	b.n	14ae <two_sin()+0x11e>

		leds[k] = CHSV(this_hue, this_sat, this_bright);                              // Assigning hues and brightness to the led array.
		leds[k] += CHSV(that_hue, this_sat, that_bright);

	}
}
    157a:	b007      	add	sp, #28
    157c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
	}
	if (this_dir == 0) { this_phase += this_speed; that_phase += that_speed; }
	else { this_phase -= this_speed; that_phase -= that_speed; }
    1580:	f8d9 0000 	ldr.w	r0, [r9]
    1584:	1b2c      	subs	r4, r5, r4
    1586:	1a82      	subs	r2, r0, r2
    1588:	f8c8 4000 	str.w	r4, [r8]
    158c:	f8c9 2000 	str.w	r2, [r9]
    1590:	e727      	b.n	13e2 <two_sin()+0x52>
    1592:	bf00      	nop
    1594:	1fff077c 	.word	0x1fff077c
    1598:	1fff0773 	.word	0x1fff0773
    159c:	1fff078e 	.word	0x1fff078e
    15a0:	1fff0783 	.word	0x1fff0783
    15a4:	1fff078f 	.word	0x1fff078f
    15a8:	1fff077d 	.word	0x1fff077d
    15ac:	1fff0784 	.word	0x1fff0784
    15b0:	1fff11bf 	.word	0x1fff11bf
    15b4:	1fff0cc9 	.word	0x1fff0cc9
    15b8:	1fff0788 	.word	0x1fff0788
    15bc:	1fff1118 	.word	0x1fff1118
    15c0:	1fff0771 	.word	0x1fff0771
    15c4:	1fff1198 	.word	0x1fff1198
    15c8:	1fff1108 	.word	0x1fff1108
    15cc:	1fff0dcc 	.word	0x1fff0dcc
    15d0:	2107      	movs	r1, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    15d2:	f8df a198 	ldr.w	sl, [pc, #408]	; 176c <two_sin()+0x3dc>
    15d6:	485a      	ldr	r0, [pc, #360]	; (1740 <two_sin()+0x3b0>)
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
    15d8:	4e5a      	ldr	r6, [pc, #360]	; (1744 <two_sin()+0x3b4>)
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
		all_freq = random8(1, 9);
		this_hue = random8();
    15da:	4f5b      	ldr	r7, [pc, #364]	; (1748 <two_sin()+0x3b8>)
    15dc:	f005 fec2 	bl	7364 <usb_serial_write>
    15e0:	485a      	ldr	r0, [pc, #360]	; (174c <two_sin()+0x3bc>)
    15e2:	f006 f8c5 	bl	7770 <Print::println()>
    15e6:	f8ba 3000 	ldrh.w	r3, [sl]
    15ea:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    15ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    15f2:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    15f6:	3419      	adds	r4, #25
    15f8:	b2a4      	uxth	r4, r4
    15fa:	eb04 2244 	add.w	r2, r4, r4, lsl #9
    15fe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    1602:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    1606:	3219      	adds	r2, #25
    1608:	b292      	uxth	r2, r2
    160a:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    160e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    1612:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1616:	3019      	adds	r0, #25
    1618:	b280      	uxth	r0, r0
    161a:	eb00 2e40 	add.w	lr, r0, r0, lsl #9
    161e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
    1622:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    1626:	f10e 0e19 	add.w	lr, lr, #25
    162a:	fa1f fe8e 	uxth.w	lr, lr
    162e:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    1632:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    1636:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    163a:	3119      	adds	r1, #25
    163c:	b289      	uxth	r1, r1
    163e:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    1642:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1646:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    164a:	3319      	adds	r3, #25
    164c:	b29b      	uxth	r3, r3
    164e:	eb03 2843 	add.w	r8, r3, r3, lsl #9
    1652:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    1656:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    165a:	f108 0819 	add.w	r8, r8, #25
    165e:	fa1f f888 	uxth.w	r8, r8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1662:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1666:	eb08 2948 	add.w	r9, r8, r8, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    166a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
    166e:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1670:	eb08 0989 	add.w	r9, r8, r9, lsl #2
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
    1674:	b2c0      	uxtb	r0, r0
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
    1676:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    167a:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    167e:	eb08 2818 	add.w	r8, r8, r8, lsr #8
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
    1682:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
    1686:	115b      	asrs	r3, r3, #5
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
    1688:	11c0      	asrs	r0, r0, #7
		that_rot = random8(3);
		this_cutoff = random8();
    168a:	eb01 2b11 	add.w	fp, r1, r1, lsr #8
		that_cutoff = random8(128, 200);
    168e:	3b80      	subs	r3, #128	; 0x80
		all_freq = random8(1, 9);
    1690:	492f      	ldr	r1, [pc, #188]	; (1750 <two_sin()+0x3c0>)
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
    1692:	9003      	str	r0, [sp, #12]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1694:	f109 0919 	add.w	r9, r9, #25
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
		all_freq = random8(1, 9);
    1698:	f3c8 1842 	ubfx	r8, r8, #5, #3
    169c:	fa1f f989 	uxth.w	r9, r9
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
    16a0:	4618      	mov	r0, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    16a2:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    16a6:	4b2b      	ldr	r3, [pc, #172]	; (1754 <two_sin()+0x3c4>)
		all_freq = random8(1, 9);
    16a8:	9102      	str	r1, [sp, #8]
    16aa:	f108 0801 	add.w	r8, r8, #1
    16ae:	f881 8000 	strb.w	r8, [r1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    16b2:	eb09 2c49 	add.w	ip, r9, r9, lsl #9
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
    16b6:	4928      	ldr	r1, [pc, #160]	; (1758 <two_sin()+0x3c8>)
		that_cutoff = random8(128, 200);
    16b8:	7018      	strb	r0, [r3, #0]
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
    16ba:	fa5f fe8e 	uxtb.w	lr, lr
    16be:	eb09 0c8c 	add.w	ip, r9, ip, lsl #2
    16c2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
    16c6:	9300      	str	r3, [sp, #0]
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
    16c8:	4b24      	ldr	r3, [pc, #144]	; (175c <two_sin()+0x3cc>)
		this_cutoff = random8();
    16ca:	f881 b000 	strb.w	fp, [r1]
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
		that_rot = random8(3);
    16ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    16d2:	eb04 2414 	add.w	r4, r4, r4, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    16d6:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    16da:	eb02 2212 	add.w	r2, r2, r2, lsr #8
		this_cutoff = random8();
    16de:	9101      	str	r1, [sp, #4]
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
		this_rot = random8(10);
    16e0:	491f      	ldr	r1, [pc, #124]	; (1760 <two_sin()+0x3d0>)
    16e2:	f89d 000c 	ldrb.w	r0, [sp, #12]
		that_rot = random8(3);
    16e6:	f883 e000 	strb.w	lr, [r3]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    16ea:	b2e4      	uxtb	r4, r4
    Serial.println("TWO_SIN");
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
		that_speed = random8(1, 5);
    16ec:	f8df e080 	ldr.w	lr, [pc, #128]	; 1770 <two_sin()+0x3e0>
		this_rot = random8(10);
    16f0:	7008      	strb	r0, [r1, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    16f2:	f10c 0c19 	add.w	ip, ip, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    16f6:	f3c2 1281 	ubfx	r2, r2, #6, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    16fa:	fa1f fc8c 	uxth.w	ip, ip
	if (mode_change) {
    Serial.println("TWO_SIN");
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
    16fe:	4819      	ldr	r0, [pc, #100]	; (1764 <two_sin()+0x3d4>)
    1700:	f8aa c000 	strh.w	ip, [sl]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1704:	eb04 0484 	add.w	r4, r4, r4, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1708:	3201      	adds	r2, #1
		that_speed = random8(1, 5);
    170a:	f88e 2000 	strb.w	r2, [lr]
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
    170e:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8

void two_sin() {
	if (mode_change) {
    Serial.println("TWO_SIN");
		mode_change = 0;
		this_delay = 10;
    1712:	f8df e060 	ldr.w	lr, [pc, #96]	; 1774 <two_sin()+0x3e4>
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
		all_freq = random8(1, 9);
		this_hue = random8();
		that_hue = random8();
    1716:	f886 c000 	strb.w	ip, [r6]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    171a:	f3c4 2407 	ubfx	r4, r4, #8, #8
	if (mode_change) {
    Serial.println("TWO_SIN");
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_speed = random8(5);
    171e:	7004      	strb	r4, [r0, #0]

void two_sin() {
	if (mode_change) {
    Serial.println("TWO_SIN");
		mode_change = 0;
		this_delay = 10;
    1720:	f04f 0c0a 	mov.w	ip, #10
		use_palette = 0;
    1724:	4810      	ldr	r0, [pc, #64]	; (1768 <two_sin()+0x3d8>)

void two_sin() {
	if (mode_change) {
    Serial.println("TWO_SIN");
		mode_change = 0;
		this_delay = 10;
    1726:	f8ce c000 	str.w	ip, [lr]
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
		all_freq = random8(1, 9);
		this_hue = random8();
    172a:	eb09 2919 	add.w	r9, r9, r9, lsr #8
bool hue_change;

void two_sin() {
	if (mode_change) {
    Serial.println("TWO_SIN");
		mode_change = 0;
    172e:	f04f 0e00 	mov.w	lr, #0
		this_rot = random8(10);
		that_rot = random8(3);
		this_cutoff = random8();
		that_cutoff = random8(128, 200);
		all_freq = random8(1, 9);
		this_hue = random8();
    1732:	f887 9000 	strb.w	r9, [r7]
void two_sin() {
	if (mode_change) {
    Serial.println("TWO_SIN");
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
    1736:	f880 e000 	strb.w	lr, [r0]
bool hue_change;

void two_sin() {
	if (mode_change) {
    Serial.println("TWO_SIN");
		mode_change = 0;
    173a:	f885 e000 	strb.w	lr, [r5]
    173e:	e63d      	b.n	13bc <two_sin()+0x2c>
    1740:	00008320 	.word	0x00008320
    1744:	1fff0788 	.word	0x1fff0788
    1748:	1fff0cc9 	.word	0x1fff0cc9
    174c:	1fff079c 	.word	0x1fff079c
    1750:	1fff077d 	.word	0x1fff077d
    1754:	1fff078f 	.word	0x1fff078f
    1758:	1fff0783 	.word	0x1fff0783
    175c:	1fff11bf 	.word	0x1fff11bf
    1760:	1fff0784 	.word	0x1fff0784
    1764:	1fff0773 	.word	0x1fff0773
    1768:	1fff0774 	.word	0x1fff0774
    176c:	1fff0792 	.word	0x1fff0792
    1770:	1fff078e 	.word	0x1fff078e
    1774:	1fff0778 	.word	0x1fff0778

00001778 <juggle_pal()>:
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    1778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    177c:	4975      	ldr	r1, [pc, #468]	; (1954 <juggle_pal()+0x1dc>)
    177e:	780b      	ldrb	r3, [r1, #0]
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    1780:	b085      	sub	sp, #20
	if (mode_change) {
    1782:	2b00      	cmp	r3, #0
    1784:	f000 80d6 	beq.w	1934 <juggle_pal()+0x1bc>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1788:	4873      	ldr	r0, [pc, #460]	; (1958 <juggle_pal()+0x1e0>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    178a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 1988 <juggle_pal()+0x210>
    178e:	8803      	ldrh	r3, [r0, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1790:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 198c <juggle_pal()+0x214>
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1794:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 1990 <juggle_pal()+0x218>
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1798:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 1984 <juggle_pal()+0x20c>
    179c:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    17a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    17a4:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    17a8:	3419      	adds	r4, #25
    17aa:	b2a4      	uxth	r4, r4
    17ac:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    17b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    17b4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    17b8:	3319      	adds	r3, #25
    17ba:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    17be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    17c2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    17c6:	3319      	adds	r3, #25
    17c8:	b29b      	uxth	r3, r3
    17ca:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    17ce:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    17d2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    17d6:	3619      	adds	r6, #25
    17d8:	b2b6      	uxth	r6, r6
    17da:	eb06 2546 	add.w	r5, r6, r6, lsl #9
    17de:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    17e2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    17e6:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    17e8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    17ec:	b2ad      	uxth	r5, r5
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    17ee:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    17f0:	eb04 2414 	add.w	r4, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    17f4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    17f8:	f3c4 1481 	ubfx	r4, r4, #6, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    17fc:	eb05 2315 	add.w	r3, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1800:	3402      	adds	r4, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1802:	b2df      	uxtb	r7, r3
/// Generate an 8-bit random number in the given range
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    1804:	23ff      	movs	r3, #255	; 0xff
    1806:	fb93 f3f4 	sdiv	r3, r3, r4
    180a:	3b01      	subs	r3, #1
    180c:	b2db      	uxtb	r3, r3
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    180e:	fb17 f303 	smulbb	r3, r7, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1812:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1816:	1112      	asrs	r2, r2, #4
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1818:	f3c6 1603 	ubfx	r6, r6, #4, #4
		this_diff = random8(1, 255/numdots);
    181c:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    181e:	8005      	strh	r5, [r0, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1820:	3604      	adds	r6, #4
		this_diff = random8(1, 255/numdots);
    1822:	3301      	adds	r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1824:	3210      	adds	r2, #16

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1826:	4f4d      	ldr	r7, [pc, #308]	; (195c <juggle_pal()+0x1e4>)
		reset_juggle_index = random8(1);
    1828:	4d4d      	ldr	r5, [pc, #308]	; (1960 <juggle_pal()+0x1e8>)
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
    182a:	484e      	ldr	r0, [pc, #312]	; (1964 <juggle_pal()+0x1ec>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    182c:	f889 3000 	strb.w	r3, [r9]
    1830:	b2d2      	uxtb	r2, r2

bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
    1832:	2300      	movs	r3, #0
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1834:	f88a 6000 	strb.w	r6, [sl]
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1838:	f888 4000 	strb.w	r4, [r8]
		use_palette = 1;
    183c:	2601      	movs	r6, #1
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
    183e:	240a      	movs	r4, #10
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1840:	f88e 2000 	strb.w	r2, [lr]

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1844:	703e      	strb	r6, [r7, #0]
		reset_juggle_index = random8(1);
    1846:	702b      	strb	r3, [r5, #0]

bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
    1848:	700b      	strb	r3, [r1, #0]
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
    184a:	6004      	str	r4, [r0, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    184c:	2123      	movs	r1, #35	; 0x23
    184e:	4846      	ldr	r0, [pc, #280]	; (1968 <juggle_pal()+0x1f0>)
    1850:	f003 ffb6 	bl	57c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	for (int i = 0; i < numdots; i++) {
    1854:	f898 3000 	ldrb.w	r3, [r8]
    1858:	2b00      	cmp	r3, #0
    185a:	d068      	beq.n	192e <juggle_pal()+0x1b6>
    185c:	4f43      	ldr	r7, [pc, #268]	; (196c <juggle_pal()+0x1f4>)
    185e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 198c <juggle_pal()+0x214>
    1862:	783a      	ldrb	r2, [r7, #0]
    1864:	f8df 9120 	ldr.w	r9, [pc, #288]	; 1988 <juggle_pal()+0x210>
    1868:	4e3f      	ldr	r6, [pc, #252]	; (1968 <juggle_pal()+0x1f0>)
    186a:	2500      	movs	r5, #0
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    186c:	f44f 7b8c 	mov.w	fp, #280	; 0x118
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1870:	493f      	ldr	r1, [pc, #252]	; (1970 <juggle_pal()+0x1f8>)
    1872:	680c      	ldr	r4, [r1, #0]
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
    1874:	f89a 1000 	ldrb.w	r1, [sl]
    1878:	9403      	str	r4, [sp, #12]
    187a:	440b      	add	r3, r1
    187c:	442b      	add	r3, r5
    187e:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1880:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1882:	9803      	ldr	r0, [sp, #12]
    1884:	bf9c      	itt	ls
    1886:	021b      	lslls	r3, r3, #8
    1888:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    188a:	fb0b f000 	mul.w	r0, fp, r0
    188e:	fb03 f000 	mul.w	r0, r3, r0
    1892:	0c00      	lsrs	r0, r0, #16
    1894:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1896:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    189a:	d503      	bpl.n	18a4 <juggle_pal()+0x12c>
    189c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    18a0:	3307      	adds	r3, #7
    18a2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    18a4:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    18a8:	f3c3 0146 	ubfx	r1, r3, #1, #7
    18ac:	4b31      	ldr	r3, [pc, #196]	; (1974 <juggle_pal()+0x1fc>)
    18ae:	f813 400e 	ldrb.w	r4, [r3, lr]
    18b2:	4b31      	ldr	r3, [pc, #196]	; (1978 <juggle_pal()+0x200>)
    18b4:	f833 301e 	ldrh.w	r3, [r3, lr, lsl #1]
    18b8:	fb04 3301 	mla	r3, r4, r1, r3
    18bc:	b29c      	uxth	r4, r3

    if( theta & 0x8000 ) y = -y;
    18be:	0403      	lsls	r3, r0, #16
    18c0:	bf48      	it	mi
    18c2:	4264      	negmi	r4, r4
    18c4:	b224      	sxth	r4, r4
    18c6:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
    18ca:	b2a4      	uxth	r4, r4
    18cc:	482b      	ldr	r0, [pc, #172]	; (197c <juggle_pal()+0x204>)
    18ce:	492c      	ldr	r1, [pc, #176]	; (1980 <juggle_pal()+0x208>)
    18d0:	7800      	ldrb	r0, [r0, #0]
    18d2:	9000      	str	r0, [sp, #0]
    18d4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    18d8:	f3c4 348f 	ubfx	r4, r4, #14, #16


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    18dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    18e0:	23ff      	movs	r3, #255	; 0xff
    18e2:	a802      	add	r0, sp, #8
    18e4:	f003 ffbe 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    18e8:	eb06 0e04 	add.w	lr, r6, r4
    18ec:	5d33      	ldrb	r3, [r6, r4]
    18ee:	f89d 2008 	ldrb.w	r2, [sp, #8]
    18f2:	fa83 f352 	uqadd8	r3, r3, r2
    18f6:	5533      	strb	r3, [r6, r4]
    18f8:	f89d 2009 	ldrb.w	r2, [sp, #9]
    18fc:	f89e 3001 	ldrb.w	r3, [lr, #1]
    1900:	fa83 f352 	uqadd8	r3, r3, r2
        g = qadd8( g, rhs.g);
    1904:	f88e 3001 	strb.w	r3, [lr, #1]
    1908:	f89e 1002 	ldrb.w	r1, [lr, #2]
    190c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    1910:	fa81 f153 	uqadd8	r1, r1, r3
		this_index += this_diff;
    1914:	7838      	ldrb	r0, [r7, #0]
    1916:	f899 2000 	ldrb.w	r2, [r9]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    191a:	f898 3000 	ldrb.w	r3, [r8]
        b = qadd8( b, rhs.b);
    191e:	f88e 1002 	strb.w	r1, [lr, #2]
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
    1922:	4402      	add	r2, r0
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1924:	3501      	adds	r5, #1
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
    1926:	b2d2      	uxtb	r2, r2
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1928:	42ab      	cmp	r3, r5
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
    192a:	703a      	strb	r2, [r7, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    192c:	dca0      	bgt.n	1870 <juggle_pal()+0xf8>
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
	}
} // juggle_pal()
    192e:	b005      	add	sp, #20
    1930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
	}
	if (reset_juggle_index) {
    1934:	4a0a      	ldr	r2, [pc, #40]	; (1960 <juggle_pal()+0x1e8>)
    1936:	7812      	ldrb	r2, [r2, #0]
    1938:	b132      	cbz	r2, 1948 <juggle_pal()+0x1d0>
    193a:	4a12      	ldr	r2, [pc, #72]	; (1984 <juggle_pal()+0x20c>)
		this_index = 0;
    193c:	490b      	ldr	r1, [pc, #44]	; (196c <juggle_pal()+0x1f4>)
    193e:	7812      	ldrb	r2, [r2, #0]
    1940:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1990 <juggle_pal()+0x218>
    1944:	700b      	strb	r3, [r1, #0]
    1946:	e781      	b.n	184c <juggle_pal()+0xd4>
    1948:	4b0e      	ldr	r3, [pc, #56]	; (1984 <juggle_pal()+0x20c>)
    194a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1990 <juggle_pal()+0x218>
    194e:	781a      	ldrb	r2, [r3, #0]
    1950:	e77c      	b.n	184c <juggle_pal()+0xd4>
    1952:	bf00      	nop
    1954:	1fff077c 	.word	0x1fff077c
    1958:	1fff0792 	.word	0x1fff0792
    195c:	1fff0774 	.word	0x1fff0774
    1960:	1fff1119 	.word	0x1fff1119
    1964:	1fff0778 	.word	0x1fff0778
    1968:	1fff0dcc 	.word	0x1fff0dcc
    196c:	1fff1075 	.word	0x1fff1075
    1970:	1fff1368 	.word	0x1fff1368
    1974:	00008e94 	.word	0x00008e94
    1978:	00009874 	.word	0x00009874
    197c:	1fff1114 	.word	0x1fff1114
    1980:	1fff0f40 	.word	0x1fff0f40
    1984:	1fff0770 	.word	0x1fff0770
    1988:	1fff0772 	.word	0x1fff0772
    198c:	1fff078d 	.word	0x1fff078d
    1990:	1fff078c 	.word	0x1fff078c

00001994 <sinelon()>:
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;
void sinelon()
{
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (mode_change) {
    1996:	4952      	ldr	r1, [pc, #328]	; (1ae0 <sinelon()+0x14c>)
    1998:	780b      	ldrb	r3, [r1, #0]
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;
void sinelon()
{
    199a:	b085      	sub	sp, #20
	if (mode_change) {
    199c:	2b00      	cmp	r3, #0
    199e:	d157      	bne.n	1a50 <sinelon()+0xbc>
    19a0:	4b50      	ldr	r3, [pc, #320]	; (1ae4 <sinelon()+0x150>)
    19a2:	4c51      	ldr	r4, [pc, #324]	; (1ae8 <sinelon()+0x154>)
    19a4:	781a      	ldrb	r2, [r3, #0]
    19a6:	4d51      	ldr	r5, [pc, #324]	; (1aec <sinelon()+0x158>)
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    this_delay = 10;
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    19a8:	4851      	ldr	r0, [pc, #324]	; (1af0 <sinelon()+0x15c>)
    19aa:	2123      	movs	r1, #35	; 0x23
    19ac:	f003 ff08 	bl	57c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19b0:	4a50      	ldr	r2, [pc, #320]	; (1af4 <sinelon()+0x160>)
	int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    19b2:	7823      	ldrb	r3, [r4, #0]
    19b4:	6812      	ldr	r2, [r2, #0]
    19b6:	9203      	str	r2, [sp, #12]
	return ret;
    19b8:	9903      	ldr	r1, [sp, #12]
    19ba:	f44f 728c 	mov.w	r2, #280	; 0x118
    19be:	021b      	lsls	r3, r3, #8
    19c0:	fb02 f101 	mul.w	r1, r2, r1
    19c4:	fb03 f101 	mul.w	r1, r3, r1
    19c8:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    19ca:	044a      	lsls	r2, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    19cc:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    19d0:	d503      	bpl.n	19da <sinelon()+0x46>
    19d2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    19d6:	3307      	adds	r3, #7
    19d8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    19da:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    19dc:	4c46      	ldr	r4, [pc, #280]	; (1af8 <sinelon()+0x164>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    19de:	4847      	ldr	r0, [pc, #284]	; (1afc <sinelon()+0x168>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    19e0:	5ca4      	ldrb	r4, [r4, r2]
    19e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    19e6:	f3c3 0246 	ubfx	r2, r3, #1, #7
    19ea:	fb04 0302 	mla	r3, r4, r2, r0
    19ee:	b29c      	uxth	r4, r3

    if( theta & 0x8000 ) y = -y;
    19f0:	040b      	lsls	r3, r1, #16
    19f2:	bf48      	it	mi
    19f4:	4264      	negmi	r4, r4
    19f6:	b224      	sxth	r4, r4
    19f8:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
    19fc:	b2a4      	uxth	r4, r4
    19fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	if (sinelon_color_change) {
    1a02:	782b      	ldrb	r3, [r5, #0]
		sinelon_color_change = random8(1);
    this_delay = 10;
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    1a04:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    1a08:	0c24      	lsrs	r4, r4, #16
	if (sinelon_color_change) {
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d15e      	bne.n	1acc <sinelon()+0x138>
		leds[pos] += ColorFromPalette(current_palette, this_index++);
	}
	else {
		leds[pos] += ColorFromPalette(current_palette, this_index);
    1a0e:	4b3c      	ldr	r3, [pc, #240]	; (1b00 <sinelon()+0x16c>)
    1a10:	493c      	ldr	r1, [pc, #240]	; (1b04 <sinelon()+0x170>)
    1a12:	781a      	ldrb	r2, [r3, #0]
    1a14:	2301      	movs	r3, #1
    1a16:	9300      	str	r3, [sp, #0]
    1a18:	a802      	add	r0, sp, #8
    1a1a:	23ff      	movs	r3, #255	; 0xff
    1a1c:	f003 ff22 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1a20:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1a24:	4a32      	ldr	r2, [pc, #200]	; (1af0 <sinelon()+0x15c>)
    1a26:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1a2a:	5d13      	ldrb	r3, [r2, r4]
    1a2c:	1911      	adds	r1, r2, r4
    1a2e:	fa83 f350 	uqadd8	r3, r3, r0
    1a32:	5513      	strb	r3, [r2, r4]
    1a34:	784a      	ldrb	r2, [r1, #1]
    1a36:	f89d 3009 	ldrb.w	r3, [sp, #9]
    1a3a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1a3e:	704a      	strb	r2, [r1, #1]
    1a40:	788b      	ldrb	r3, [r1, #2]
    1a42:	f89d 200a 	ldrb.w	r2, [sp, #10]
    1a46:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1a4a:	708b      	strb	r3, [r1, #2]
	}
	//leds[pos] += CHSV(this_hue++, 255, 192);
}
    1a4c:	b005      	add	sp, #20
    1a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1a50:	4d2d      	ldr	r5, [pc, #180]	; (1b08 <sinelon()+0x174>)
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
    1a52:	4c25      	ldr	r4, [pc, #148]	; (1ae8 <sinelon()+0x154>)
    1a54:	882b      	ldrh	r3, [r5, #0]
bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    1a56:	482d      	ldr	r0, [pc, #180]	; (1b0c <sinelon()+0x178>)
		this_fade = random8(16, 128);
    1a58:	4e22      	ldr	r6, [pc, #136]	; (1ae4 <sinelon()+0x150>)
    1a5a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1a5e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1a62:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1a66:	3319      	adds	r3, #25
    1a68:	b29b      	uxth	r3, r3
    1a6a:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    1a6e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    1a72:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    1a76:	3719      	adds	r7, #25
    1a78:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1a7a:	eb07 2e17 	add.w	lr, r7, r7, lsr #8
    1a7e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1a82:	eb07 2c47 	add.w	ip, r7, r7, lsl #9
		this_beat = random8(8, 18);
    1a86:	fa5f fe8e 	uxtb.w	lr, lr
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1a8a:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1a8c:	eb07 078c 	add.w	r7, r7, ip, lsl #2
    1a90:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1a94:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1a98:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    1a9c:	ea4f 1eee 	mov.w	lr, lr, asr #7
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1aa0:	111a      	asrs	r2, r3, #4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1aa2:	3719      	adds	r7, #25
    1aa4:	f10e 0e08 	add.w	lr, lr, #8
    1aa8:	802f      	strh	r7, [r5, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1aaa:	3210      	adds	r2, #16
		sinelon_color_change = random8(1);
    1aac:	4d0f      	ldr	r5, [pc, #60]	; (1aec <sinelon()+0x158>)
    this_delay = 10;
    1aae:	4f18      	ldr	r7, [pc, #96]	; (1b10 <sinelon()+0x17c>)
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
    1ab0:	f884 e000 	strb.w	lr, [r4]
bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    1ab4:	f04f 0e01 	mov.w	lr, #1

bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
    1ab8:	2300      	movs	r3, #0
    1aba:	b2d2      	uxtb	r2, r2
		use_palette = 1;
    1abc:	f880 e000 	strb.w	lr, [r0]
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    this_delay = 10;
    1ac0:	200a      	movs	r0, #10
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    1ac2:	7032      	strb	r2, [r6, #0]
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    1ac4:	702b      	strb	r3, [r5, #0]

bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
    1ac6:	700b      	strb	r3, [r1, #0]
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    this_delay = 10;
    1ac8:	6038      	str	r0, [r7, #0]
    1aca:	e76d      	b.n	19a8 <sinelon()+0x14>
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
	if (sinelon_color_change) {
		leds[pos] += ColorFromPalette(current_palette, this_index++);
    1acc:	4d0c      	ldr	r5, [pc, #48]	; (1b00 <sinelon()+0x16c>)
    1ace:	490d      	ldr	r1, [pc, #52]	; (1b04 <sinelon()+0x170>)
    1ad0:	782a      	ldrb	r2, [r5, #0]
    1ad2:	2301      	movs	r3, #1
    1ad4:	18d6      	adds	r6, r2, r3
    1ad6:	9300      	str	r3, [sp, #0]
    1ad8:	a802      	add	r0, sp, #8
    1ada:	23ff      	movs	r3, #255	; 0xff
    1adc:	702e      	strb	r6, [r5, #0]
    1ade:	e79d      	b.n	1a1c <sinelon()+0x88>
    1ae0:	1fff077c 	.word	0x1fff077c
    1ae4:	1fff0770 	.word	0x1fff0770
    1ae8:	1fff078d 	.word	0x1fff078d
    1aec:	1fff0f32 	.word	0x1fff0f32
    1af0:	1fff0dcc 	.word	0x1fff0dcc
    1af4:	1fff1368 	.word	0x1fff1368
    1af8:	00008e94 	.word	0x00008e94
    1afc:	00009874 	.word	0x00009874
    1b00:	1fff1075 	.word	0x1fff1075
    1b04:	1fff0f40 	.word	0x1fff0f40
    1b08:	1fff0792 	.word	0x1fff0792
    1b0c:	1fff0774 	.word	0x1fff0774
    1b10:	1fff0778 	.word	0x1fff0778

00001b14 <pride()>:
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    1b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1b18:	4bb1      	ldr	r3, [pc, #708]	; (1de0 <pride()+0x2cc>)
    1b1a:	781a      	ldrb	r2, [r3, #0]
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    1b1c:	b08d      	sub	sp, #52	; 0x34
	if (mode_change) {
    1b1e:	b132      	cbz	r2, 1b2e <pride()+0x1a>
		mode_change = 0;
		use_palette = 0;
    1b20:	4cb0      	ldr	r4, [pc, #704]	; (1de4 <pride()+0x2d0>)
    this_delay = 10;
    1b22:	49b1      	ldr	r1, [pc, #708]	; (1de8 <pride()+0x2d4>)

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    1b24:	2200      	movs	r2, #0
		use_palette = 0;
    this_delay = 10;
    1b26:	200a      	movs	r0, #10
// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    1b28:	7022      	strb	r2, [r4, #0]

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    1b2a:	701a      	strb	r2, [r3, #0]
		use_palette = 0;
    this_delay = 10;
    1b2c:	6008      	str	r0, [r1, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b2e:	48af      	ldr	r0, [pc, #700]	; (1dec <pride()+0x2d8>)
    1b30:	6803      	ldr	r3, [r0, #0]
    1b32:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    1b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b36:	f645 7328 	movw	r3, #24360	; 0x5f28
    1b3a:	fb03 f101 	mul.w	r1, r3, r1
    1b3e:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b40:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1b42:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b46:	d503      	bpl.n	1b50 <pride()+0x3c>
    1b48:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1b4c:	3307      	adds	r3, #7
    1b4e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1b50:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    1b52:	4fa7      	ldr	r7, [pc, #668]	; (1df0 <pride()+0x2dc>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1b54:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 1e0c <pride()+0x2f8>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1b58:	5cbd      	ldrb	r5, [r7, r2]
    1b5a:	f838 4012 	ldrh.w	r4, [r8, r2, lsl #1]
    1b5e:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1b62:	fb05 4302 	mla	r3, r5, r2, r4
    1b66:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1b68:	040d      	lsls	r5, r1, #16
    1b6a:	bf48      	it	mi
    1b6c:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b6e:	6802      	ldr	r2, [r0, #0]
    1b70:	920a      	str	r2, [sp, #40]	; 0x28
    1b72:	b21b      	sxth	r3, r3
	}
	static uint16_t sPseudotime = 0;
	static uint16_t sLastMillis = 0;
	static uint16_t sHue16 = 0;

	uint8_t sat8 = beatsin88(87, 220, 250);
    1b74:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1b78:	b29b      	uxth	r3, r3
	return ret;
    1b7a:	990a      	ldr	r1, [sp, #40]	; 0x28
    1b7c:	4a9d      	ldr	r2, [pc, #628]	; (1df4 <pride()+0x2e0>)
    1b7e:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    1b82:	0c1b      	lsrs	r3, r3, #16
    1b84:	fb02 f101 	mul.w	r1, r2, r1
    1b88:	0c09      	lsrs	r1, r1, #16
    1b8a:	33dc      	adds	r3, #220	; 0xdc
    1b8c:	b2db      	uxtb	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b8e:	044c      	lsls	r4, r1, #17
    1b90:	9300      	str	r3, [sp, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1b92:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b96:	d503      	bpl.n	1ba0 <pride()+0x8c>
    1b98:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1b9c:	3307      	adds	r3, #7
    1b9e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1ba0:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ba2:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1ba6:	5d3d      	ldrb	r5, [r7, r4]
    1ba8:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    1bac:	fb05 3302 	mla	r3, r5, r2, r3
    1bb0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1bb2:	040a      	lsls	r2, r1, #16
    1bb4:	bf48      	it	mi
    1bb6:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bb8:	6802      	ldr	r2, [r0, #0]
    1bba:	9209      	str	r2, [sp, #36]	; 0x24
    1bbc:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1bbe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1bc2:	b29b      	uxth	r3, r3
	return ret;
    1bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1bc6:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1bca:	f64d 6208 	movw	r2, #56840	; 0xde08
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1bce:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1bd0:	fb02 f101 	mul.w	r1, r2, r1
    1bd4:	0c09      	lsrs	r1, r1, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1bd6:	3360      	adds	r3, #96	; 0x60
    1bd8:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1bda:	044e      	lsls	r6, r1, #17
    1bdc:	9301      	str	r3, [sp, #4]
	uint8_t brightdepth = beatsin88(341, 96, 224);
    1bde:	fa5f f983 	uxtb.w	r9, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1be2:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1be6:	d503      	bpl.n	1bf0 <pride()+0xdc>
    1be8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1bec:	3307      	adds	r3, #7
    1bee:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1bf0:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1bf2:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1bf6:	5d3d      	ldrb	r5, [r7, r4]
    1bf8:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    1bfc:	fb05 3302 	mla	r3, r5, r2, r3
    1c00:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1c02:	040d      	lsls	r5, r1, #16
    1c04:	bf48      	it	mi
    1c06:	425b      	negmi	r3, r3
    1c08:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c0a:	6802      	ldr	r2, [r0, #0]
    1c0c:	9208      	str	r2, [sp, #32]
    1c0e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1c12:	b29b      	uxth	r3, r3
    1c14:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
	return ret;
    1c18:	9908      	ldr	r1, [sp, #32]
    1c1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1c1e:	f24a 02c8 	movw	r2, #41160	; 0xa0c8
    1c22:	fb02 f101 	mul.w	r1, r2, r1
    1c26:	0c09      	lsrs	r1, r1, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1c28:	0c1b      	lsrs	r3, r3, #16
    1c2a:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c2e:	044c      	lsls	r4, r1, #17
    1c30:	fa1f fb83 	uxth.w	fp, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1c34:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c38:	d503      	bpl.n	1c42 <pride()+0x12e>
    1c3a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1c3e:	3307      	adds	r3, #7
    1c40:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1c42:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1c44:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1c48:	5d3d      	ldrb	r5, [r7, r4]
    1c4a:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
	uint16_t brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
    1c4e:	4c6a      	ldr	r4, [pc, #424]	; (1df8 <pride()+0x2e4>)
    1c50:	fb05 3302 	mla	r3, r5, r2, r3
    1c54:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1c56:	040a      	lsls	r2, r1, #16
    1c58:	bf48      	it	mi
    1c5a:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c5c:	6802      	ldr	r2, [r0, #0]
    1c5e:	9207      	str	r2, [sp, #28]
    1c60:	b21b      	sxth	r3, r3
    1c62:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1c66:	b29b      	uxth	r3, r3
    1c68:	2126      	movs	r1, #38	; 0x26
	return ret;
    1c6a:	9d07      	ldr	r5, [sp, #28]
    1c6c:	f8b4 a000 	ldrh.w	sl, [r4]
    1c70:	fb01 f103 	mul.w	r1, r1, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1c74:	f647 3398 	movw	r3, #31640	; 0x7b98
    1c78:	fb03 f505 	mul.w	r5, r3, r5
    1c7c:	0c2d      	lsrs	r5, r5, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1c7e:	0c09      	lsrs	r1, r1, #16
    1c80:	3117      	adds	r1, #23
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c82:	046e      	lsls	r6, r5, #17
    1c84:	b289      	uxth	r1, r1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1c86:	f3c5 02ca 	ubfx	r2, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c8a:	d503      	bpl.n	1c94 <pride()+0x180>
    1c8c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1c90:	3207      	adds	r2, #7
    1c92:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1c94:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1c98:	f3c2 0646 	ubfx	r6, r2, #1, #7
    1c9c:	f817 200e 	ldrb.w	r2, [r7, lr]
    1ca0:	f838 e01e 	ldrh.w	lr, [r8, lr, lsl #1]
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1ca4:	4b55      	ldr	r3, [pc, #340]	; (1dfc <pride()+0x2e8>)
    1ca6:	fb02 e206 	mla	r2, r2, r6, lr

    if( theta & 0x8000 ) y = -y;
    1caa:	042d      	lsls	r5, r5, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1cac:	b292      	uxth	r2, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1cae:	6805      	ldr	r5, [r0, #0]
    1cb0:	9505      	str	r5, [sp, #20]

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    1cb2:	4e53      	ldr	r6, [pc, #332]	; (1e00 <pride()+0x2ec>)
	return ret;
    1cb4:	9d05      	ldr	r5, [sp, #20]
    1cb6:	f8b6 e000 	ldrh.w	lr, [r6]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1cba:	6800      	ldr	r0, [r0, #0]
    1cbc:	9006      	str	r0, [sp, #24]

    if( theta & 0x8000 ) y = -y;
    1cbe:	bf48      	it	mi
    1cc0:	4252      	negmi	r2, r2
    1cc2:	b212      	sxth	r2, r2
    1cc4:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
    1cc8:	b2ad      	uxth	r5, r5
    1cca:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1cce:	b292      	uxth	r2, r2
	uint16_t deltams = ms - sLastMillis;
    1cd0:	ebce 0e05 	rsb	lr, lr, r5
    1cd4:	fb00 f202 	mul.w	r2, r0, r2
	sLastMillis = ms;
    1cd8:	8035      	strh	r5, [r6, #0]
	sPseudotime += deltams * msmultiplier;
    1cda:	8818      	ldrh	r0, [r3, #0]
	return ret;
    1cdc:	9e06      	ldr	r6, [sp, #24]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1cde:	4d49      	ldr	r5, [pc, #292]	; (1e04 <pride()+0x2f0>)

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    1ce0:	fa1f fe8e 	uxth.w	lr, lr
    1ce4:	fb05 f506 	mul.w	r5, r5, r6
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1ce8:	fb1e 0101 	smlabb	r1, lr, r1, r0
    1cec:	0c2d      	lsrs	r5, r5, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1cee:	0c12      	lsrs	r2, r2, #16
    1cf0:	b289      	uxth	r1, r1
    1cf2:	3201      	adds	r2, #1
    1cf4:	8019      	strh	r1, [r3, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1cf6:	046b      	lsls	r3, r5, #17
    1cf8:	b296      	uxth	r6, r2
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1cfa:	f3c5 02ca 	ubfx	r2, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1cfe:	d503      	bpl.n	1d08 <pride()+0x1f4>
    1d00:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1d04:	3207      	adds	r2, #7
    1d06:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1d08:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d0a:	f3c2 0246 	ubfx	r2, r2, #1, #7
    1d0e:	f817 c000 	ldrb.w	ip, [r7, r0]
    1d12:	f838 0010 	ldrh.w	r0, [r8, r0, lsl #1]
    1d16:	fb0c 0202 	mla	r2, ip, r2, r0
    1d1a:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    1d1c:	0428      	lsls	r0, r5, #16
    1d1e:	bf48      	it	mi
    1d20:	4252      	negmi	r2, r2
    1d22:	b212      	sxth	r2, r2
	sHue16 += deltams * beatsin88(400, 5, 9);
    1d24:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    1d28:	b292      	uxth	r2, r2
    1d2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1d2e:	0c12      	lsrs	r2, r2, #16
    1d30:	3205      	adds	r2, #5
    1d32:	ea6f 0909 	mvn.w	r9, r9
    1d36:	fa5f f989 	uxtb.w	r9, r9
    1d3a:	b292      	uxth	r2, r2
    1d3c:	fb0e ae02 	mla	lr, lr, r2, sl
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1d40:	464b      	mov	r3, r9
    1d42:	4459      	add	r1, fp

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    1d44:	f8a4 e000 	strh.w	lr, [r4]
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1d48:	46d1      	mov	r9, sl
    1d4a:	b28c      	uxth	r4, r1

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    1d4c:	2522      	movs	r5, #34	; 0x22
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1d4e:	469a      	mov	sl, r3
		hue16 += hueinc16;
    1d50:	eb09 0306 	add.w	r3, r9, r6
    1d54:	fa1f f983 	uxth.w	r9, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1d58:	0461      	lsls	r1, r4, #17
		uint8_t hue8 = hue16 / 256;
    1d5a:	ea4f 2e19 	mov.w	lr, r9, lsr #8
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1d5e:	f3c4 02ca 	ubfx	r2, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1d62:	d503      	bpl.n	1d6c <pride()+0x258>
    1d64:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1d68:	3207      	adds	r2, #7
    1d6a:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1d6c:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d6e:	f3c2 0146 	ubfx	r1, r2, #1, #7
    1d72:	f817 c000 	ldrb.w	ip, [r7, r0]
    1d76:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1d7a:	f88d e010 	strb.w	lr, [sp, #16]
    1d7e:	fb0c 2201 	mla	r2, ip, r1, r2

    if( theta & 0x8000 ) y = -y;
    1d82:	0423      	lsls	r3, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d84:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    1d86:	bf48      	it	mi
    1d88:	4252      	negmi	r2, r2
    1d8a:	b212      	sxth	r2, r2

		brightnesstheta16 += brightnessthetainc16;
		uint16_t b16 = sin16(brightnesstheta16) + 32768;

		uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    1d8c:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    1d90:	b292      	uxth	r2, r2
		uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    1d92:	9b01      	ldr	r3, [sp, #4]
    1d94:	fb02 f202 	mul.w	r2, r2, r2
    1d98:	0c12      	lsrs	r2, r2, #16
    1d9a:	fb03 f202 	mul.w	r2, r3, r2
    1d9e:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1da2:	4452      	add	r2, sl
    1da4:	f89d 3000 	ldrb.w	r3, [sp]
    1da8:	f88d 2012 	strb.w	r2, [sp, #18]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1dac:	a903      	add	r1, sp, #12
    1dae:	a804      	add	r0, sp, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1db0:	f88d 3011 	strb.w	r3, [sp, #17]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1db4:	f003 fea0 	bl	5af8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(hue8, sat8, bri8);

		uint16_t pixelnumber = i;
		pixelnumber = (NUM_LEDS - 1) - pixelnumber;
		nblend( leds[pixelnumber], newcolor, 64);
    1db8:	4b13      	ldr	r3, [pc, #76]	; (1e08 <pride()+0x2f4>)
    1dba:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1dbe:	4418      	add	r0, r3
    1dc0:	2240      	movs	r2, #64	; 0x40
    1dc2:	a903      	add	r1, sp, #12
    1dc4:	3d01      	subs	r5, #1
    1dc6:	f003 fcfd 	bl	57c4 <nblend(CRGB&, CRGB const&, unsigned char)>
    1dca:	b2ad      	uxth	r5, r5
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1dd0:	445c      	add	r4, fp
    1dd2:	429d      	cmp	r5, r3
    1dd4:	b2a4      	uxth	r4, r4
    1dd6:	d1bb      	bne.n	1d50 <pride()+0x23c>

		uint16_t pixelnumber = i;
		pixelnumber = (NUM_LEDS - 1) - pixelnumber;
		nblend( leds[pixelnumber], newcolor, 64);
	}
}
    1dd8:	b00d      	add	sp, #52	; 0x34
    1dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dde:	bf00      	nop
    1de0:	1fff077c 	.word	0x1fff077c
    1de4:	1fff0774 	.word	0x1fff0774
    1de8:	1fff0778 	.word	0x1fff0778
    1dec:	1fff1368 	.word	0x1fff1368
    1df0:	00008e94 	.word	0x00008e94
    1df4:	000174f8 	.word	0x000174f8
    1df8:	1fff0f3e 	.word	0x1fff0f3e
    1dfc:	1fff1062 	.word	0x1fff1062
    1e00:	1fff12f0 	.word	0x1fff12f0
    1e04:	0001b580 	.word	0x0001b580
    1e08:	1fff0dcc 	.word	0x1fff0dcc
    1e0c:	00009874 	.word	0x00009874

00001e10 <colorwave()>:
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    1e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1e14:	4bbb      	ldr	r3, [pc, #748]	; (2104 <colorwave()+0x2f4>)
    1e16:	781a      	ldrb	r2, [r3, #0]
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    1e18:	b08d      	sub	sp, #52	; 0x34
	if (mode_change) {
    1e1a:	b13a      	cbz	r2, 1e2c <colorwave()+0x1c>
		use_palette = 1;
    1e1c:	4cba      	ldr	r4, [pc, #744]	; (2108 <colorwave()+0x2f8>)
		mode_change = 0;
		this_delay = 10;
    1e1e:	49bb      	ldr	r1, [pc, #748]	; (210c <colorwave()+0x2fc>)
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    1e20:	2501      	movs	r5, #1
		mode_change = 0;
		this_delay = 10;
    1e22:	200a      	movs	r0, #10
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    1e24:	2200      	movs	r2, #0
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    1e26:	7025      	strb	r5, [r4, #0]
		mode_change = 0;
		this_delay = 10;
    1e28:	6008      	str	r0, [r1, #0]
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    1e2a:	701a      	strb	r2, [r3, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e2c:	49b8      	ldr	r1, [pc, #736]	; (2110 <colorwave()+0x300>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1e2e:	4bb9      	ldr	r3, [pc, #740]	; (2114 <colorwave()+0x304>)
    1e30:	680a      	ldr	r2, [r1, #0]
    1e32:	920b      	str	r2, [sp, #44]	; 0x2c
	return ret;
    1e34:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e36:	fb03 f000 	mul.w	r0, r3, r0
    1e3a:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e3c:	0447      	lsls	r7, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1e3e:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e42:	d503      	bpl.n	1e4c <colorwave()+0x3c>
    1e44:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1e48:	3307      	adds	r3, #7
    1e4a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1e4c:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    1e4e:	f8df a30c 	ldr.w	sl, [pc, #780]	; 215c <colorwave()+0x34c>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1e52:	f8df b30c 	ldr.w	fp, [pc, #780]	; 2160 <colorwave()+0x350>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1e56:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1e5a:	f83b 4012 	ldrh.w	r4, [fp, r2, lsl #1]
    1e5e:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1e62:	fb05 4302 	mla	r3, r5, r2, r4

    if( theta & 0x8000 ) y = -y;
    1e66:	0406      	lsls	r6, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1e68:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1e6a:	bf48      	it	mi
    1e6c:	425b      	negmi	r3, r3
    1e6e:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e70:	680a      	ldr	r2, [r1, #0]
    1e72:	920a      	str	r2, [sp, #40]	; 0x28
		this_delay = 10;
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
    1e74:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1e78:	b29b      	uxth	r3, r3
    1e7a:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
	return ret;
    1e7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1e80:	0c18      	lsrs	r0, r3, #16
    1e82:	f64d 6308 	movw	r3, #56840	; 0xde08
    1e86:	fb03 f404 	mul.w	r4, r3, r4
    1e8a:	0c24      	lsrs	r4, r4, #16
    1e8c:	4ba2      	ldr	r3, [pc, #648]	; (2118 <colorwave()+0x308>)
    1e8e:	3060      	adds	r0, #96	; 0x60
    1e90:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e92:	0465      	lsls	r5, r4, #17
    1e94:	7018      	strb	r0, [r3, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1e96:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e9a:	d503      	bpl.n	1ea4 <colorwave()+0x94>
    1e9c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1ea0:	3307      	adds	r3, #7
    1ea2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1ea4:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ea6:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1eaa:	f81a 6005 	ldrb.w	r6, [sl, r5]
    1eae:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
    1eb2:	fb06 3302 	mla	r3, r6, r2, r3
    1eb6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1eb8:	0422      	lsls	r2, r4, #16
    1eba:	bf48      	it	mi
    1ebc:	425b      	negmi	r3, r3
    1ebe:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ec0:	680a      	ldr	r2, [r1, #0]
    1ec2:	9209      	str	r2, [sp, #36]	; 0x24
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1ec4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1ec8:	b29b      	uxth	r3, r3
    1eca:	ebc3 1903 	rsb	r9, r3, r3, lsl #4
	return ret;
    1ece:	9c09      	ldr	r4, [sp, #36]	; 0x24
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    1ed0:	4a92      	ldr	r2, [pc, #584]	; (211c <colorwave()+0x30c>)
    1ed2:	eb03 2909 	add.w	r9, r3, r9, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1ed6:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    1eda:	fb03 f404 	mul.w	r4, r3, r4
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1ede:	ea4f 4919 	mov.w	r9, r9, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1ee2:	0c24      	lsrs	r4, r4, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1ee4:	f509 59c8 	add.w	r9, r9, #6400	; 0x1900
    1ee8:	fa1f f389 	uxth.w	r3, r9
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1eec:	0467      	lsls	r7, r4, #17
    1eee:	9303      	str	r3, [sp, #12]
    1ef0:	8013      	strh	r3, [r2, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1ef2:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1ef6:	d503      	bpl.n	1f00 <colorwave()+0xf0>
    1ef8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1efc:	3307      	adds	r3, #7
    1efe:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1f00:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f02:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1f06:	f81a 6005 	ldrb.w	r6, [sl, r5]
    1f0a:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
    1f0e:	f8df 8254 	ldr.w	r8, [pc, #596]	; 2164 <colorwave()+0x354>
    1f12:	fb06 3302 	mla	r3, r6, r2, r3
    1f16:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1f18:	0426      	lsls	r6, r4, #16
    1f1a:	bf48      	it	mi
    1f1c:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f1e:	680a      	ldr	r2, [r1, #0]
    1f20:	9208      	str	r2, [sp, #32]
    1f22:	b21b      	sxth	r3, r3
    1f24:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1f28:	b29b      	uxth	r3, r3
	return ret;
    1f2a:	9d08      	ldr	r5, [sp, #32]
    1f2c:	f8b8 e000 	ldrh.w	lr, [r8]
    1f30:	2226      	movs	r2, #38	; 0x26
    1f32:	fb02 f203 	mul.w	r2, r2, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1f36:	f647 3498 	movw	r4, #31640	; 0x7b98
    1f3a:	fb04 f405 	mul.w	r4, r4, r5
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1f3e:	0c12      	lsrs	r2, r2, #16
		this_delay = 10;
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);
    1f40:	4b77      	ldr	r3, [pc, #476]	; (2120 <colorwave()+0x310>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1f42:	0c24      	lsrs	r4, r4, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1f44:	3217      	adds	r2, #23
    1f46:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1f48:	0465      	lsls	r5, r4, #17
    1f4a:	701a      	strb	r2, [r3, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1f4c:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1f50:	d503      	bpl.n	1f5a <colorwave()+0x14a>
    1f52:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1f56:	3307      	adds	r3, #7
    1f58:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1f5a:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f5c:	f3c3 0546 	ubfx	r5, r3, #1, #7
    1f60:	f81a 3006 	ldrb.w	r3, [sl, r6]
    1f64:	f83b 6016 	ldrh.w	r6, [fp, r6, lsl #1]

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    1f68:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 2168 <colorwave()+0x358>
    1f6c:	fb03 6305 	mla	r3, r3, r5, r6

    if( theta & 0x8000 ) y = -y;
    1f70:	0427      	lsls	r7, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f72:	b29b      	uxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f74:	680c      	ldr	r4, [r1, #0]
    1f76:	9406      	str	r4, [sp, #24]

    if( theta & 0x8000 ) y = -y;
    1f78:	bf48      	it	mi
    1f7a:	425b      	negmi	r3, r3
    1f7c:	b21b      	sxth	r3, r3
	return ret;
    1f7e:	9f06      	ldr	r7, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f80:	6809      	ldr	r1, [r1, #0]
    1f82:	f8bc 4000 	ldrh.w	r4, [ip]
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1f86:	4e67      	ldr	r6, [pc, #412]	; (2124 <colorwave()+0x314>)
    1f88:	9107      	str	r1, [sp, #28]
    1f8a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1f8e:	f240 41b1 	movw	r1, #1201	; 0x4b1
    1f92:	b29b      	uxth	r3, r3
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    1f94:	b2bf      	uxth	r7, r7
    1f96:	fb01 f303 	mul.w	r3, r1, r3
    1f9a:	4963      	ldr	r1, [pc, #396]	; (2128 <colorwave()+0x318>)
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1f9c:	8835      	ldrh	r5, [r6, #0]
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    1f9e:	800f      	strh	r7, [r1, #0]
	deltams = ms - sLastMillis;
    1fa0:	1b3c      	subs	r4, r7, r4
    1fa2:	b2a4      	uxth	r4, r4
    1fa4:	4961      	ldr	r1, [pc, #388]	; (212c <colorwave()+0x31c>)
	sLastMillis = ms;
    1fa6:	f8ac 7000 	strh.w	r7, [ip]
	sPseudotime += deltams * msmultiplier;
    1faa:	fb14 5202 	smlabb	r2, r4, r2, r5
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1fae:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 216c <colorwave()+0x35c>
	return ret;
    1fb2:	9d07      	ldr	r5, [sp, #28]

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    1fb4:	800c      	strh	r4, [r1, #0]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1fb6:	0c1b      	lsrs	r3, r3, #16
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1fb8:	b291      	uxth	r1, r2
    1fba:	8031      	strh	r1, [r6, #0]
    1fbc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);
    1fc0:	4e5b      	ldr	r6, [pc, #364]	; (2130 <colorwave()+0x320>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1fc2:	fb0c f505 	mul.w	r5, ip, r5
    1fc6:	0c2d      	lsrs	r5, r5, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1fc8:	b29b      	uxth	r3, r3
    1fca:	8033      	strh	r3, [r6, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fcc:	046e      	lsls	r6, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1fce:	f3c5 02ca 	ubfx	r2, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fd2:	d503      	bpl.n	1fdc <colorwave()+0x1cc>
    1fd4:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1fd8:	3207      	adds	r2, #7
    1fda:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1fdc:	0a16      	lsrs	r6, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1fde:	f3c2 0246 	ubfx	r2, r2, #1, #7
    1fe2:	f81a 7006 	ldrb.w	r7, [sl, r6]
    1fe6:	f83b 6016 	ldrh.w	r6, [fp, r6, lsl #1]
    1fea:	f8df 9184 	ldr.w	r9, [pc, #388]	; 2170 <colorwave()+0x360>
    1fee:	fb07 6202 	mla	r2, r7, r2, r6
    1ff2:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    1ff4:	042d      	lsls	r5, r5, #16
    1ff6:	bf48      	it	mi
    1ff8:	4252      	negmi	r2, r2
    1ffa:	b212      	sxth	r2, r2

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    1ffc:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    2000:	b292      	uxth	r2, r2
    2002:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2006:	0c12      	lsrs	r2, r2, #16
    2008:	3205      	adds	r2, #5
    200a:	b292      	uxth	r2, r2
    200c:	fb04 e402 	mla	r4, r4, r2, lr
	brightnesstheta16 = sPseudotime;
    2010:	4f48      	ldr	r7, [pc, #288]	; (2134 <colorwave()+0x324>)
    2012:	4e49      	ldr	r6, [pc, #292]	; (2138 <colorwave()+0x328>)
    2014:	9a03      	ldr	r2, [sp, #12]

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    2016:	f8a8 4000 	strh.w	r4, [r8]
	brightnesstheta16 = sPseudotime;
    201a:	2522      	movs	r5, #34	; 0x22
    201c:	4c47      	ldr	r4, [pc, #284]	; (213c <colorwave()+0x32c>)
    201e:	9503      	str	r5, [sp, #12]
    2020:	eb05 0845 	add.w	r8, r5, r5, lsl #1
    2024:	44a0      	add	r8, r4
    2026:	2404      	movs	r4, #4

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
    2028:	4473      	add	r3, lr
    202a:	b29b      	uxth	r3, r3
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
    202c:	ea4f 1ed3 	mov.w	lr, r3, lsr #7
			if (h16_128 & 0x100) {
    2030:	f41e 7f80 	tst.w	lr, #256	; 0x100
				hue8 = 255 - (h16_128 >> 1);
    2034:	ea6f 2c13 	mvn.w	ip, r3, lsr #8
			}
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
    2038:	440a      	add	r2, r1
    203a:	b292      	uxth	r2, r2
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
    203c:	fa5f fc8c 	uxtb.w	ip, ip
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
    2040:	8033      	strh	r3, [r6, #0]
			h16_128 = hue16 >> 7;
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
			}
			else {
				hue8 = h16_128 >> 1;
    2042:	bf08      	it	eq
    2044:	ea4f 2c13 	moveq.w	ip, r3, lsr #8

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
    2048:	4d3d      	ldr	r5, [pc, #244]	; (2140 <colorwave()+0x330>)
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
			}
			else {
				hue8 = h16_128 >> 1;
    204a:	4b3e      	ldr	r3, [pc, #248]	; (2144 <colorwave()+0x334>)

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
    204c:	f8a5 e000 	strh.w	lr, [r5]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2050:	0451      	lsls	r1, r2, #17
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
			}
			else {
				hue8 = h16_128 >> 1;
    2052:	f883 c000 	strb.w	ip, [r3]
			}

			brightnesstheta16 += brightnessthetainc16;
    2056:	803a      	strh	r2, [r7, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2058:	f3c2 0eca 	ubfx	lr, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    205c:	d505      	bpl.n	206a <colorwave()+0x25a>
    205e:	f5ce 6eff 	rsb	lr, lr, #2040	; 0x7f8
    2062:	f10e 0e07 	add.w	lr, lr, #7
    2066:	fa1f fe8e 	uxth.w	lr, lr

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    206a:	ea4f 211e 	mov.w	r1, lr, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    206e:	f3ce 0346 	ubfx	r3, lr, #1, #7
    2072:	f81a e001 	ldrb.w	lr, [sl, r1]
    2076:	f83b 1011 	ldrh.w	r1, [fp, r1, lsl #1]
			b16 = sin16(brightnesstheta16) + 32768;

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    207a:	4d33      	ldr	r5, [pc, #204]	; (2148 <colorwave()+0x338>)
    207c:	fb0e 1e03 	mla	lr, lr, r3, r1
    2080:	fa1f fe8e 	uxth.w	lr, lr

    if( theta & 0x8000 ) y = -y;
    2084:	0413      	lsls	r3, r2, #16
    2086:	bf48      	it	mi
    2088:	f1ce 0e00 	rsbmi	lr, lr, #0
    208c:	fa0f fe8e 	sxth.w	lr, lr
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;
    2090:	f5ae 4e00 	sub.w	lr, lr, #32768	; 0x8000
    2094:	fa1f fe8e 	uxth.w	lr, lr

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    2098:	fb0e f20e 	mul.w	r2, lr, lr
    209c:	0c12      	lsrs	r2, r2, #16
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    209e:	fb02 f300 	mul.w	r3, r2, r0
    20a2:	43c0      	mvns	r0, r0
    20a4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    20a8:	ebcc 130c 	rsb	r3, ip, ip, lsl #4
    20ac:	eb0c 1c03 	add.w	ip, ip, r3, lsl #4

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    20b0:	2301      	movs	r3, #1
    20b2:	9300      	str	r3, [sp, #0]
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    20b4:	802a      	strh	r2, [r5, #0]
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;
    20b6:	4b25      	ldr	r3, [pc, #148]	; (214c <colorwave()+0x33c>)

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    20b8:	4d25      	ldr	r5, [pc, #148]	; (2150 <colorwave()+0x340>)
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;
    20ba:	f8a3 e000 	strh.w	lr, [r3]
    20be:	f3cc 2c07 	ubfx	ip, ip, #8, #8

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    20c2:	b2c0      	uxtb	r0, r0

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    20c4:	4603      	mov	r3, r0
    20c6:	4662      	mov	r2, ip
			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    20c8:	7028      	strb	r0, [r5, #0]

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    20ca:	4922      	ldr	r1, [pc, #136]	; (2154 <colorwave()+0x344>)
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);
    20cc:	f889 c000 	strb.w	ip, [r9]

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    20d0:	a805      	add	r0, sp, #20
    20d2:	f003 fbc7 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			pixelnumber = i;
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;
    20d6:	4b20      	ldr	r3, [pc, #128]	; (2158 <colorwave()+0x348>)
    20d8:	f8bd 500c 	ldrh.w	r5, [sp, #12]
    20dc:	801d      	strh	r5, [r3, #0]

			nblend(leds[pixelnumber], newcolor, 128);
    20de:	2280      	movs	r2, #128	; 0x80
    20e0:	a905      	add	r1, sp, #20
    20e2:	4640      	mov	r0, r8
    20e4:	3c01      	subs	r4, #1
    20e6:	f003 fb6d 	bl	57c4 <nblend(CRGB&, CRGB const&, unsigned char)>
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
    20ea:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    20ee:	d041      	beq.n	2174 <colorwave()+0x364>
    20f0:	4b0f      	ldr	r3, [pc, #60]	; (2130 <colorwave()+0x320>)
    20f2:	4a0a      	ldr	r2, [pc, #40]	; (211c <colorwave()+0x30c>)
    20f4:	4808      	ldr	r0, [pc, #32]	; (2118 <colorwave()+0x308>)
    20f6:	f8b6 e000 	ldrh.w	lr, [r6]
    20fa:	881b      	ldrh	r3, [r3, #0]
    20fc:	8839      	ldrh	r1, [r7, #0]
    20fe:	8812      	ldrh	r2, [r2, #0]
    2100:	7800      	ldrb	r0, [r0, #0]
    2102:	e791      	b.n	2028 <colorwave()+0x218>
    2104:	1fff077c 	.word	0x1fff077c
    2108:	1fff0774 	.word	0x1fff0774
    210c:	1fff0778 	.word	0x1fff0778
    2110:	1fff1368 	.word	0x1fff1368
    2114:	000174f8 	.word	0x000174f8
    2118:	1fff1064 	.word	0x1fff1064
    211c:	1fff0f34 	.word	0x1fff0f34
    2120:	1fff0dc8 	.word	0x1fff0dc8
    2124:	1fff1116 	.word	0x1fff1116
    2128:	1fff0cc4 	.word	0x1fff0cc4
    212c:	1fff11c0 	.word	0x1fff11c0
    2130:	1fff1194 	.word	0x1fff1194
    2134:	1fff0cc6 	.word	0x1fff0cc6
    2138:	1fff1066 	.word	0x1fff1066
    213c:	1fff0dcc 	.word	0x1fff0dcc
    2140:	1fff111a 	.word	0x1fff111a
    2144:	1fff112d 	.word	0x1fff112d
    2148:	1fff0f3c 	.word	0x1fff0f3c
    214c:	1fff118c 	.word	0x1fff118c
    2150:	1fff1060 	.word	0x1fff1060
    2154:	1fff0f40 	.word	0x1fff0f40
    2158:	1fff0f30 	.word	0x1fff0f30
    215c:	00008e94 	.word	0x00008e94
    2160:	00009874 	.word	0x00009874
    2164:	1fff114a 	.word	0x1fff114a
    2168:	1fff118e 	.word	0x1fff118e
    216c:	0001b580 	.word	0x0001b580
    2170:	1fff12b5 	.word	0x1fff12b5
    2174:	9d03      	ldr	r5, [sp, #12]
    2176:	3d01      	subs	r5, #1
    2178:	b2ad      	uxth	r5, r5
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    217a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    217e:	429d      	cmp	r5, r3
    2180:	d009      	beq.n	2196 <colorwave()+0x386>
    2182:	4b06      	ldr	r3, [pc, #24]	; (219c <colorwave()+0x38c>)
    2184:	4a06      	ldr	r2, [pc, #24]	; (21a0 <colorwave()+0x390>)
    2186:	4807      	ldr	r0, [pc, #28]	; (21a4 <colorwave()+0x394>)
    2188:	f8b6 e000 	ldrh.w	lr, [r6]
    218c:	881b      	ldrh	r3, [r3, #0]
    218e:	8839      	ldrh	r1, [r7, #0]
    2190:	8812      	ldrh	r2, [r2, #0]
    2192:	7800      	ldrb	r0, [r0, #0]
    2194:	e742      	b.n	201c <colorwave()+0x20c>
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;

			nblend(leds[pixelnumber], newcolor, 128);
		}
	}
}
    2196:	b00d      	add	sp, #52	; 0x34
    2198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    219c:	1fff1194 	.word	0x1fff1194
    21a0:	1fff0f34 	.word	0x1fff0f34
    21a4:	1fff1064 	.word	0x1fff1064

000021a8 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    21a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21ac:	b093      	sub	sp, #76	; 0x4c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    21ae:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    21b0:	6804      	ldr	r4, [r0, #0]
    21b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    21b6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    21ba:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    21be:	6825      	ldr	r5, [r4, #0]
    21c0:	4eb3      	ldr	r6, [pc, #716]	; (2490 <CLEDController::clearLeds(int)+0x2e8>)

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    21c2:	9007      	str	r0, [sp, #28]
    21c4:	42b5      	cmp	r5, r6
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    21c6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    21ca:	460a      	mov	r2, r1
    21cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    21d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    21d4:	f040 8315 	bne.w	2802 <L_9869_delayMicroseconds+0x31a>
    21d8:	7c81      	ldrb	r1, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    21da:	920c      	str	r2, [sp, #48]	; 0x30
    21dc:	a809      	add	r0, sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    21de:	2901      	cmp	r1, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    21e0:	920d      	str	r2, [sp, #52]	; 0x34
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    21e2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
        g = rhs.g;
    21e6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
        b = rhs.b;
    21ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    21ee:	900b      	str	r0, [sp, #44]	; 0x2c
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    21f0:	f000 82ca 	beq.w	2788 <L_9869_delayMicroseconds+0x2a0>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    21f4:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    21f8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    21fc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    2200:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    2204:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    2208:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    220c:	69a3      	ldr	r3, [r4, #24]
    220e:	49a1      	ldr	r1, [pc, #644]	; (2494 <CLEDController::clearLeds(int)+0x2ec>)
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    2210:	2200      	movs	r2, #0
    2212:	428b      	cmp	r3, r1
    2214:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    2218:	9211      	str	r2, [sp, #68]	; 0x44
    221a:	f040 82fa 	bne.w	2812 <L_9869_delayMicroseconds+0x32a>
    221e:	9c07      	ldr	r4, [sp, #28]
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    2220:	f004 f806 	bl	6230 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    2224:	8c23      	ldrh	r3, [r4, #32]
    2226:	1ac0      	subs	r0, r0, r3
    2228:	b283      	uxth	r3, r0
    222a:	2b31      	cmp	r3, #49	; 0x31
    222c:	d9f8      	bls.n	2220 <CLEDController::clearLeds(int)+0x78>

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    222e:	4a9a      	ldr	r2, [pc, #616]	; (2498 <CLEDController::clearLeds(int)+0x2f0>)

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    2230:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    2234:	6813      	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    2236:	f89d 403d 	ldrb.w	r4, [sp, #61]	; 0x3d

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    223a:	9101      	str	r1, [sp, #4]
            e[1] = other.e[1];
            e[2] = other.e[2];
    223c:	9402      	str	r4, [sp, #8]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    223e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    2242:	f99d 4041 	ldrsb.w	r4, [sp, #65]	; 0x41
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2246:	4895      	ldr	r0, [pc, #596]	; (249c <CLEDController::clearLeds(int)+0x2f4>)
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    2248:	9100      	str	r1, [sp, #0]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    224a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    224e:	f89d 5039 	ldrb.w	r5, [sp, #57]	; 0x39
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    2252:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    2256:	9403      	str	r4, [sp, #12]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    2258:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
            d[1] = other.d[1];
            d[2] = other.d[2];
    225c:	f89d 903a 	ldrb.w	r9, [sp, #58]	; 0x3a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2260:	f89d 603e 	ldrb.w	r6, [sp, #62]	; 0x3e
        g = rhs.g;
    2264:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
        b = rhs.b;
    2268:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
            mLenRemaining = mLen = other.mLen;
    226c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    2270:	6013      	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2272:	6802      	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2274:	4c8a      	ldr	r4, [pc, #552]	; (24a0 <CLEDController::clearLeds(int)+0x2f8>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2276:	4b8b      	ldr	r3, [pc, #556]	; (24a4 <CLEDController::clearLeds(int)+0x2fc>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2278:	f042 0201 	orr.w	r2, r2, #1
    227c:	6002      	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    227e:	2200      	movs	r2, #0
    2280:	6022      	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2282:	681a      	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    2284:	681a      	ldr	r2, [r3, #0]
    2286:	f022 0204 	bic.w	r2, r2, #4
		*port = lo;
    228a:	601a      	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    228c:	9b00      	ldr	r3, [sp, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    228e:	f898 4001 	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2292:	1b5d      	subs	r5, r3, r5
    2294:	fa5f fc85 	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2298:	2c00      	cmp	r4, #0
    229a:	f040 8117 	bne.w	24cc <CLEDController::clearLeds(int)+0x324>
    229e:	1c4b      	adds	r3, r1, #1
    22a0:	9304      	str	r3, [sp, #16]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    22a2:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    22a4:	4b7e      	ldr	r3, [pc, #504]	; (24a0 <CLEDController::clearLeds(int)+0x2f8>)
    22a6:	6819      	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    22a8:	f1bb 0f00 	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    22ac:	f101 01e2 	add.w	r1, r1, #226	; 0xe2

		while(pixels.has(1)) {
    22b0:	f340 80bb 	ble.w	242a <CLEDController::clearLeds(int)+0x282>
    22b4:	1c72      	adds	r2, r6, #1
    22b6:	9205      	str	r2, [sp, #20]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    22b8:	487a      	ldr	r0, [pc, #488]	; (24a4 <CLEDController::clearLeds(int)+0x2fc>)
    22ba:	1c7a      	adds	r2, r7, #1
    22bc:	9206      	str	r2, [sp, #24]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    22be:	461f      	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    22c0:	9a01      	ldr	r2, [sp, #4]
    22c2:	ebca 0a02 	rsb	sl, sl, r2
                d[1] = e[1] - d[1];
    22c6:	9a00      	ldr	r2, [sp, #0]
    22c8:	ebcc 0c02 	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    22cc:	9a02      	ldr	r2, [sp, #8]
    22ce:	ebc9 0902 	rsb	r9, r9, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    22d2:	fa5f fa8a 	uxtb.w	sl, sl
                d[1] = e[1] - d[1];
    22d6:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    22da:	fa5f f989 	uxtb.w	r9, r9
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    22de:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    22e0:	681a      	ldr	r2, [r3, #0]
    22e2:	428a      	cmp	r2, r1
    22e4:	d906      	bls.n	22f4 <CLEDController::clearLeds(int)+0x14c>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    22e6:	681a      	ldr	r2, [r3, #0]
    22e8:	f242 2574 	movw	r5, #8820	; 0x2274
    22ec:	1a52      	subs	r2, r2, r1
    22ee:	42aa      	cmp	r2, r5
    22f0:	f200 80f6 	bhi.w	24e0 <CLEDController::clearLeds(int)+0x338>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    22f4:	6805      	ldr	r5, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    22f6:	6806      	ldr	r6, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    22f8:	f045 0504 	orr.w	r5, r5, #4
			lo = *port & ~FastPin<DATA_PIN>::mask();
    22fc:	f026 0604 	bic.w	r6, r6, #4
    2300:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2304:	681a      	ldr	r2, [r3, #0]
    2306:	4291      	cmp	r1, r2
    2308:	d8fc      	bhi.n	2304 <CLEDController::clearLeds(int)+0x15c>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    230a:	6839      	ldr	r1, [r7, #0]

	inline static void toggle() __attribute__ ((always_inline)) { _PTOR::r() = _MASK; }

	inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }
	inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }
	inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }
    230c:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    230e:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2310:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2314:	f100 8095 	bmi.w	2442 <CLEDController::clearLeds(int)+0x29a>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2318:	681a      	ldr	r2, [r3, #0]
    231a:	1a8a      	subs	r2, r1, r2
    231c:	2ac3      	cmp	r2, #195	; 0xc3
    231e:	d8fb      	bhi.n	2318 <CLEDController::clearLeds(int)+0x170>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2320:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2322:	f1be 0e01 	subs.w	lr, lr, #1
    2326:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2328:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    232a:	d1eb      	bne.n	2304 <CLEDController::clearLeds(int)+0x15c>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    232c:	681a      	ldr	r2, [r3, #0]
    232e:	4291      	cmp	r1, r2
    2330:	d8fc      	bhi.n	232c <CLEDController::clearLeds(int)+0x184>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2332:	6839      	ldr	r1, [r7, #0]
    2334:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2336:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2338:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    233c:	f100 808b 	bmi.w	2456 <CLEDController::clearLeds(int)+0x2ae>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2340:	681a      	ldr	r2, [r3, #0]
    2342:	1a8a      	subs	r2, r1, r2
    2344:	2ac3      	cmp	r2, #195	; 0xc3
    2346:	d8fb      	bhi.n	2340 <CLEDController::clearLeds(int)+0x198>
    2348:	6006      	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    234a:	f898 4000 	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    234e:	b13c      	cbz	r4, 2360 <CLEDController::clearLeds(int)+0x1b8>
    2350:	fa84 f45a 	uqadd8	r4, r4, sl
    2354:	9a05      	ldr	r2, [sp, #20]
    2356:	b2e4      	uxtb	r4, r4
    2358:	fb04 f402 	mul.w	r4, r4, r2
    235c:	f3c4 2407 	ubfx	r4, r4, #8, #8
    2360:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2364:	681a      	ldr	r2, [r3, #0]
    2366:	428a      	cmp	r2, r1
    2368:	d3fc      	bcc.n	2364 <CLEDController::clearLeds(int)+0x1bc>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    236a:	6839      	ldr	r1, [r7, #0]
    236c:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    236e:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2370:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2374:	d479      	bmi.n	246a <CLEDController::clearLeds(int)+0x2c2>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2376:	681a      	ldr	r2, [r3, #0]
    2378:	1a8a      	subs	r2, r1, r2
    237a:	2ac3      	cmp	r2, #195	; 0xc3
    237c:	d8fb      	bhi.n	2376 <CLEDController::clearLeds(int)+0x1ce>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    237e:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2380:	f1be 0e01 	subs.w	lr, lr, #1
    2384:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2386:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2388:	d1ec      	bne.n	2364 <CLEDController::clearLeds(int)+0x1bc>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    238a:	681a      	ldr	r2, [r3, #0]
    238c:	4291      	cmp	r1, r2
    238e:	d8fc      	bhi.n	238a <CLEDController::clearLeds(int)+0x1e2>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2390:	6839      	ldr	r1, [r7, #0]
    2392:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2394:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2396:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    239a:	d46f      	bmi.n	247c <CLEDController::clearLeds(int)+0x2d4>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    239c:	681a      	ldr	r2, [r3, #0]
    239e:	1a8a      	subs	r2, r1, r2
    23a0:	2ac3      	cmp	r2, #195	; 0xc3
    23a2:	d8fb      	bhi.n	239c <CLEDController::clearLeds(int)+0x1f4>
    23a4:	6006      	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    23a6:	f898 4002 	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    23aa:	b13c      	cbz	r4, 23bc <CLEDController::clearLeds(int)+0x214>
    23ac:	fa84 f459 	uqadd8	r4, r4, r9
    23b0:	9a06      	ldr	r2, [sp, #24]
    23b2:	b2e4      	uxtb	r4, r4
    23b4:	fb04 f402 	mul.w	r4, r4, r2
    23b8:	f3c4 2407 	ubfx	r4, r4, #8, #8
    23bc:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    23c0:	681a      	ldr	r2, [r3, #0]
    23c2:	428a      	cmp	r2, r1
    23c4:	d3fc      	bcc.n	23c0 <CLEDController::clearLeds(int)+0x218>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    23c6:	6839      	ldr	r1, [r7, #0]
    23c8:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    23ca:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    23cc:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    23d0:	d46a      	bmi.n	24a8 <CLEDController::clearLeds(int)+0x300>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    23d2:	681a      	ldr	r2, [r3, #0]
    23d4:	1a8a      	subs	r2, r1, r2
    23d6:	2ac3      	cmp	r2, #195	; 0xc3
    23d8:	d8fb      	bhi.n	23d2 <CLEDController::clearLeds(int)+0x22a>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    23da:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    23dc:	f1be 0e01 	subs.w	lr, lr, #1
    23e0:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    23e2:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    23e4:	d1ec      	bne.n	23c0 <CLEDController::clearLeds(int)+0x218>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    23e6:	681a      	ldr	r2, [r3, #0]
    23e8:	4291      	cmp	r1, r2
    23ea:	d8fc      	bhi.n	23e6 <CLEDController::clearLeds(int)+0x23e>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    23ec:	6839      	ldr	r1, [r7, #0]
    23ee:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    23f0:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    23f2:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    23f6:	d460      	bmi.n	24ba <CLEDController::clearLeds(int)+0x312>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    23f8:	681a      	ldr	r2, [r3, #0]
    23fa:	1a8a      	subs	r2, r1, r2
    23fc:	2ac3      	cmp	r2, #195	; 0xc3
    23fe:	d8fb      	bhi.n	23f8 <CLEDController::clearLeds(int)+0x250>
    2400:	9a03      	ldr	r2, [sp, #12]
    2402:	6006      	str	r6, [r0, #0]
    2404:	4490      	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    2406:	f10b 3bff 	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    240a:	f898 4001 	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    240e:	b13c      	cbz	r4, 2420 <CLEDController::clearLeds(int)+0x278>
    2410:	fa84 f45c 	uqadd8	r4, r4, ip
    2414:	9a04      	ldr	r2, [sp, #16]
    2416:	b2e4      	uxtb	r4, r4
    2418:	fb02 f404 	mul.w	r4, r2, r4
    241c:	f3c4 2407 	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    2420:	b662      	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    2422:	f1bb 0f00 	cmp.w	fp, #0
    2426:	f47f af4b 	bne.w	22c0 <CLEDController::clearLeds(int)+0x118>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    242a:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    242c:	4b1c      	ldr	r3, [pc, #112]	; (24a0 <CLEDController::clearLeds(int)+0x2f8>)
    242e:	681b      	ldr	r3, [r3, #0]

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
    2430:	2b00      	cmp	r3, #0
    2432:	d056      	beq.n	24e2 <CLEDController::clearLeds(int)+0x33a>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    2434:	f003 fefc 	bl	6230 <micros>
    2438:	9b07      	ldr	r3, [sp, #28]
    243a:	8418      	strh	r0, [r3, #32]

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    243c:	b013      	add	sp, #76	; 0x4c
    243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2442:	681a      	ldr	r2, [r3, #0]
    2444:	1a8a      	subs	r2, r1, r2
    2446:	2a52      	cmp	r2, #82	; 0x52
    2448:	f67f af6a 	bls.w	2320 <CLEDController::clearLeds(int)+0x178>
    244c:	681a      	ldr	r2, [r3, #0]
    244e:	1a8a      	subs	r2, r1, r2
    2450:	2a52      	cmp	r2, #82	; 0x52
    2452:	d8f6      	bhi.n	2442 <CLEDController::clearLeds(int)+0x29a>
    2454:	e764      	b.n	2320 <CLEDController::clearLeds(int)+0x178>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2456:	681a      	ldr	r2, [r3, #0]
    2458:	1a8a      	subs	r2, r1, r2
    245a:	2a52      	cmp	r2, #82	; 0x52
    245c:	f67f af74 	bls.w	2348 <CLEDController::clearLeds(int)+0x1a0>
    2460:	681a      	ldr	r2, [r3, #0]
    2462:	1a8a      	subs	r2, r1, r2
    2464:	2a52      	cmp	r2, #82	; 0x52
    2466:	d8f6      	bhi.n	2456 <CLEDController::clearLeds(int)+0x2ae>
    2468:	e76e      	b.n	2348 <CLEDController::clearLeds(int)+0x1a0>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    246a:	681a      	ldr	r2, [r3, #0]
    246c:	1a8a      	subs	r2, r1, r2
    246e:	2a52      	cmp	r2, #82	; 0x52
    2470:	d985      	bls.n	237e <CLEDController::clearLeds(int)+0x1d6>
    2472:	681a      	ldr	r2, [r3, #0]
    2474:	1a8a      	subs	r2, r1, r2
    2476:	2a52      	cmp	r2, #82	; 0x52
    2478:	d8f7      	bhi.n	246a <CLEDController::clearLeds(int)+0x2c2>
    247a:	e780      	b.n	237e <CLEDController::clearLeds(int)+0x1d6>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    247c:	681a      	ldr	r2, [r3, #0]
    247e:	1a8a      	subs	r2, r1, r2
    2480:	2a52      	cmp	r2, #82	; 0x52
    2482:	d98f      	bls.n	23a4 <CLEDController::clearLeds(int)+0x1fc>
    2484:	681a      	ldr	r2, [r3, #0]
    2486:	1a8a      	subs	r2, r1, r2
    2488:	2a52      	cmp	r2, #82	; 0x52
    248a:	d8f7      	bhi.n	247c <CLEDController::clearLeds(int)+0x2d4>
    248c:	e78a      	b.n	23a4 <CLEDController::clearLeds(int)+0x1fc>
    248e:	bf00      	nop
    2490:	00002825 	.word	0x00002825
    2494:	000034a5 	.word	0x000034a5
    2498:	e000edfc 	.word	0xe000edfc
    249c:	e0001000 	.word	0xe0001000
    24a0:	e0001004 	.word	0xe0001004
    24a4:	400ff0c0 	.word	0x400ff0c0
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    24a8:	681a      	ldr	r2, [r3, #0]
    24aa:	1a8a      	subs	r2, r1, r2
    24ac:	2a52      	cmp	r2, #82	; 0x52
    24ae:	d994      	bls.n	23da <CLEDController::clearLeds(int)+0x232>
    24b0:	681a      	ldr	r2, [r3, #0]
    24b2:	1a8a      	subs	r2, r1, r2
    24b4:	2a52      	cmp	r2, #82	; 0x52
    24b6:	d8f7      	bhi.n	24a8 <CLEDController::clearLeds(int)+0x300>
    24b8:	e78f      	b.n	23da <CLEDController::clearLeds(int)+0x232>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    24ba:	681a      	ldr	r2, [r3, #0]
    24bc:	1a8a      	subs	r2, r1, r2
    24be:	2a52      	cmp	r2, #82	; 0x52
    24c0:	d99e      	bls.n	2400 <CLEDController::clearLeds(int)+0x258>
    24c2:	681a      	ldr	r2, [r3, #0]
    24c4:	1a8a      	subs	r2, r1, r2
    24c6:	2a52      	cmp	r2, #82	; 0x52
    24c8:	d8f7      	bhi.n	24ba <CLEDController::clearLeds(int)+0x312>
    24ca:	e799      	b.n	2400 <CLEDController::clearLeds(int)+0x258>
    24cc:	fa84 f45c 	uqadd8	r4, r4, ip
    24d0:	b2e3      	uxtb	r3, r4
    24d2:	1c4a      	adds	r2, r1, #1
    24d4:	fb02 f303 	mul.w	r3, r2, r3
    24d8:	9204      	str	r2, [sp, #16]
    24da:	f3c3 2407 	ubfx	r4, r3, #8, #8
    24de:	e6e0      	b.n	22a2 <CLEDController::clearLeds(int)+0xfa>
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    24e0:	b662      	cpsie	i
protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
      sei(); delayMicroseconds(WAIT_TIME); cli();
    24e2:	b662      	cpsie	i
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    24e4:	f640 33b8 	movw	r3, #3000	; 0xbb8

000024e8 <L_9869_delayMicroseconds>:
    24e8:	3b01      	subs	r3, #1
    24ea:	d1fd      	bne.n	24e8 <L_9869_delayMicroseconds>
    24ec:	b672      	cpsid	i

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    24ee:	4aa2      	ldr	r2, [pc, #648]	; (2778 <L_9869_delayMicroseconds+0x290>)

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    24f0:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    24f4:	6813      	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    24f6:	f89d 403d 	ldrb.w	r4, [sp, #61]	; 0x3d

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    24fa:	9101      	str	r1, [sp, #4]
            e[1] = other.e[1];
            e[2] = other.e[2];
    24fc:	9402      	str	r4, [sp, #8]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    24fe:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    2502:	f99d 4041 	ldrsb.w	r4, [sp, #65]	; 0x41
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2506:	489d      	ldr	r0, [pc, #628]	; (277c <L_9869_delayMicroseconds+0x294>)
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    2508:	9100      	str	r1, [sp, #0]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    250a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    250e:	f89d 5039 	ldrb.w	r5, [sp, #57]	; 0x39
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    2512:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    2516:	9403      	str	r4, [sp, #12]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    2518:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            d[1] = other.d[1];
            d[2] = other.d[2];
    251c:	f89d a03a 	ldrb.w	sl, [sp, #58]	; 0x3a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2520:	f89d 603e 	ldrb.w	r6, [sp, #62]	; 0x3e
        g = rhs.g;
    2524:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
        b = rhs.b;
    2528:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
            mLenRemaining = mLen = other.mLen;
    252c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    2530:	6013      	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2532:	6802      	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2534:	4c92      	ldr	r4, [pc, #584]	; (2780 <L_9869_delayMicroseconds+0x298>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2536:	4b93      	ldr	r3, [pc, #588]	; (2784 <L_9869_delayMicroseconds+0x29c>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2538:	f042 0201 	orr.w	r2, r2, #1
    253c:	6002      	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    253e:	2200      	movs	r2, #0
    2540:	6022      	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2542:	681a      	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    2544:	681a      	ldr	r2, [r3, #0]
    2546:	f022 0204 	bic.w	r2, r2, #4
		*port = lo;
    254a:	601a      	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    254c:	9b00      	ldr	r3, [sp, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    254e:	f898 4001 	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2552:	1b5d      	subs	r5, r3, r5
    2554:	fa5f fc85 	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2558:	2c00      	cmp	r4, #0
    255a:	f000 8109 	beq.w	2770 <L_9869_delayMicroseconds+0x288>
    255e:	fa84 f45c 	uqadd8	r4, r4, ip
    2562:	b2e3      	uxtb	r3, r4
    2564:	1c4a      	adds	r2, r1, #1
    2566:	fb02 f303 	mul.w	r3, r2, r3
    256a:	9204      	str	r2, [sp, #16]
    256c:	f3c3 2407 	ubfx	r4, r3, #8, #8

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    2570:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2572:	4b83      	ldr	r3, [pc, #524]	; (2780 <L_9869_delayMicroseconds+0x298>)
    2574:	6819      	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    2576:	f1bb 0f00 	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    257a:	f101 01e2 	add.w	r1, r1, #226	; 0xe2

		while(pixels.has(1)) {
    257e:	f340 80bb 	ble.w	26f8 <L_9869_delayMicroseconds+0x210>
    2582:	1c72      	adds	r2, r6, #1
    2584:	9205      	str	r2, [sp, #20]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2586:	487f      	ldr	r0, [pc, #508]	; (2784 <L_9869_delayMicroseconds+0x29c>)
    2588:	1c7a      	adds	r2, r7, #1
    258a:	9206      	str	r2, [sp, #24]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    258c:	461f      	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    258e:	9a01      	ldr	r2, [sp, #4]
    2590:	ebc9 0902 	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
    2594:	9a00      	ldr	r2, [sp, #0]
    2596:	ebcc 0c02 	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    259a:	9a02      	ldr	r2, [sp, #8]
    259c:	ebca 0a02 	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    25a0:	fa5f f989 	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
    25a4:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    25a8:	fa5f fa8a 	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    25ac:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    25ae:	681a      	ldr	r2, [r3, #0]
    25b0:	428a      	cmp	r2, r1
    25b2:	d906      	bls.n	25c2 <L_9869_delayMicroseconds+0xda>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    25b4:	681a      	ldr	r2, [r3, #0]
    25b6:	f242 2574 	movw	r5, #8820	; 0x2274
    25ba:	1a52      	subs	r2, r2, r1
    25bc:	42aa      	cmp	r2, r5
    25be:	f200 8126 	bhi.w	280e <L_9869_delayMicroseconds+0x326>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    25c2:	6806      	ldr	r6, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    25c4:	6805      	ldr	r5, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    25c6:	f046 0604 	orr.w	r6, r6, #4
			lo = *port & ~FastPin<DATA_PIN>::mask();
    25ca:	f025 0504 	bic.w	r5, r5, #4
    25ce:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    25d2:	681a      	ldr	r2, [r3, #0]
    25d4:	428a      	cmp	r2, r1
    25d6:	d3fc      	bcc.n	25d2 <L_9869_delayMicroseconds+0xea>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    25d8:	6839      	ldr	r1, [r7, #0]
    25da:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    25dc:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    25de:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    25e2:	f100 808d 	bmi.w	2700 <L_9869_delayMicroseconds+0x218>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    25e6:	681a      	ldr	r2, [r3, #0]
    25e8:	1a8a      	subs	r2, r1, r2
    25ea:	2ac3      	cmp	r2, #195	; 0xc3
    25ec:	d8fb      	bhi.n	25e6 <L_9869_delayMicroseconds+0xfe>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    25ee:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    25f0:	f1be 0e01 	subs.w	lr, lr, #1
    25f4:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    25f6:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    25f8:	d1eb      	bne.n	25d2 <L_9869_delayMicroseconds+0xea>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    25fa:	681a      	ldr	r2, [r3, #0]
    25fc:	4291      	cmp	r1, r2
    25fe:	d8fc      	bhi.n	25fa <L_9869_delayMicroseconds+0x112>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2600:	6839      	ldr	r1, [r7, #0]
    2602:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2604:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2606:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    260a:	f100 8083 	bmi.w	2714 <L_9869_delayMicroseconds+0x22c>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    260e:	681a      	ldr	r2, [r3, #0]
    2610:	1a8a      	subs	r2, r1, r2
    2612:	2ac3      	cmp	r2, #195	; 0xc3
    2614:	d8fb      	bhi.n	260e <L_9869_delayMicroseconds+0x126>
    2616:	6005      	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2618:	f898 4000 	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    261c:	b13c      	cbz	r4, 262e <L_9869_delayMicroseconds+0x146>
    261e:	fa84 f459 	uqadd8	r4, r4, r9
    2622:	9a05      	ldr	r2, [sp, #20]
    2624:	b2e4      	uxtb	r4, r4
    2626:	fb04 f402 	mul.w	r4, r4, r2
    262a:	f3c4 2407 	ubfx	r4, r4, #8, #8
    262e:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2632:	681a      	ldr	r2, [r3, #0]
    2634:	428a      	cmp	r2, r1
    2636:	d3fc      	bcc.n	2632 <L_9869_delayMicroseconds+0x14a>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2638:	6839      	ldr	r1, [r7, #0]
    263a:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    263c:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    263e:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2642:	d471      	bmi.n	2728 <L_9869_delayMicroseconds+0x240>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2644:	681a      	ldr	r2, [r3, #0]
    2646:	1a8a      	subs	r2, r1, r2
    2648:	2ac3      	cmp	r2, #195	; 0xc3
    264a:	d8fb      	bhi.n	2644 <L_9869_delayMicroseconds+0x15c>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    264c:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    264e:	f1be 0e01 	subs.w	lr, lr, #1
    2652:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2654:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2656:	d1ec      	bne.n	2632 <L_9869_delayMicroseconds+0x14a>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    2658:	681a      	ldr	r2, [r3, #0]
    265a:	4291      	cmp	r1, r2
    265c:	d8fc      	bhi.n	2658 <L_9869_delayMicroseconds+0x170>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    265e:	6839      	ldr	r1, [r7, #0]
    2660:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2662:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2664:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2668:	d467      	bmi.n	273a <L_9869_delayMicroseconds+0x252>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    266a:	681a      	ldr	r2, [r3, #0]
    266c:	1a8a      	subs	r2, r1, r2
    266e:	2ac3      	cmp	r2, #195	; 0xc3
    2670:	d8fb      	bhi.n	266a <L_9869_delayMicroseconds+0x182>
    2672:	6005      	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2674:	f898 4002 	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2678:	b13c      	cbz	r4, 268a <L_9869_delayMicroseconds+0x1a2>
    267a:	fa84 f45a 	uqadd8	r4, r4, sl
    267e:	9a06      	ldr	r2, [sp, #24]
    2680:	b2e4      	uxtb	r4, r4
    2682:	fb04 f402 	mul.w	r4, r4, r2
    2686:	f3c4 2407 	ubfx	r4, r4, #8, #8
    268a:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    268e:	681a      	ldr	r2, [r3, #0]
    2690:	428a      	cmp	r2, r1
    2692:	d3fc      	bcc.n	268e <L_9869_delayMicroseconds+0x1a6>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2694:	6839      	ldr	r1, [r7, #0]
    2696:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2698:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    269a:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    269e:	d455      	bmi.n	274c <L_9869_delayMicroseconds+0x264>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    26a0:	681a      	ldr	r2, [r3, #0]
    26a2:	1a8a      	subs	r2, r1, r2
    26a4:	2ac3      	cmp	r2, #195	; 0xc3
    26a6:	d8fb      	bhi.n	26a0 <L_9869_delayMicroseconds+0x1b8>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    26a8:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    26aa:	f1be 0e01 	subs.w	lr, lr, #1
    26ae:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    26b0:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    26b2:	d1ec      	bne.n	268e <L_9869_delayMicroseconds+0x1a6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    26b4:	681a      	ldr	r2, [r3, #0]
    26b6:	4291      	cmp	r1, r2
    26b8:	d8fc      	bhi.n	26b4 <L_9869_delayMicroseconds+0x1cc>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    26ba:	6839      	ldr	r1, [r7, #0]
    26bc:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    26be:	0622      	lsls	r2, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    26c0:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    26c4:	d44b      	bmi.n	275e <L_9869_delayMicroseconds+0x276>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    26c6:	681a      	ldr	r2, [r3, #0]
    26c8:	1a8a      	subs	r2, r1, r2
    26ca:	2ac3      	cmp	r2, #195	; 0xc3
    26cc:	d8fb      	bhi.n	26c6 <L_9869_delayMicroseconds+0x1de>
    26ce:	9a03      	ldr	r2, [sp, #12]
    26d0:	6005      	str	r5, [r0, #0]
    26d2:	4490      	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    26d4:	f10b 3bff 	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    26d8:	f898 4001 	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    26dc:	b13c      	cbz	r4, 26ee <L_9869_delayMicroseconds+0x206>
    26de:	fa84 f45c 	uqadd8	r4, r4, ip
    26e2:	9a04      	ldr	r2, [sp, #16]
    26e4:	b2e4      	uxtb	r4, r4
    26e6:	fb02 f404 	mul.w	r4, r2, r4
    26ea:	f3c4 2407 	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    26ee:	b662      	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    26f0:	f1bb 0f00 	cmp.w	fp, #0
    26f4:	f47f af4b 	bne.w	258e <L_9869_delayMicroseconds+0xa6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    26f8:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    26fa:	4b21      	ldr	r3, [pc, #132]	; (2780 <L_9869_delayMicroseconds+0x298>)
    26fc:	681b      	ldr	r3, [r3, #0]
    26fe:	e699      	b.n	2434 <CLEDController::clearLeds(int)+0x28c>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2700:	681a      	ldr	r2, [r3, #0]
    2702:	1a8a      	subs	r2, r1, r2
    2704:	2a52      	cmp	r2, #82	; 0x52
    2706:	f67f af72 	bls.w	25ee <L_9869_delayMicroseconds+0x106>
    270a:	681a      	ldr	r2, [r3, #0]
    270c:	1a8a      	subs	r2, r1, r2
    270e:	2a52      	cmp	r2, #82	; 0x52
    2710:	d8f6      	bhi.n	2700 <L_9869_delayMicroseconds+0x218>
    2712:	e76c      	b.n	25ee <L_9869_delayMicroseconds+0x106>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2714:	681a      	ldr	r2, [r3, #0]
    2716:	1a8a      	subs	r2, r1, r2
    2718:	2a52      	cmp	r2, #82	; 0x52
    271a:	f67f af7c 	bls.w	2616 <L_9869_delayMicroseconds+0x12e>
    271e:	681a      	ldr	r2, [r3, #0]
    2720:	1a8a      	subs	r2, r1, r2
    2722:	2a52      	cmp	r2, #82	; 0x52
    2724:	d8f6      	bhi.n	2714 <L_9869_delayMicroseconds+0x22c>
    2726:	e776      	b.n	2616 <L_9869_delayMicroseconds+0x12e>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2728:	681a      	ldr	r2, [r3, #0]
    272a:	1a8a      	subs	r2, r1, r2
    272c:	2a52      	cmp	r2, #82	; 0x52
    272e:	d98d      	bls.n	264c <L_9869_delayMicroseconds+0x164>
    2730:	681a      	ldr	r2, [r3, #0]
    2732:	1a8a      	subs	r2, r1, r2
    2734:	2a52      	cmp	r2, #82	; 0x52
    2736:	d8f7      	bhi.n	2728 <L_9869_delayMicroseconds+0x240>
    2738:	e788      	b.n	264c <L_9869_delayMicroseconds+0x164>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    273a:	681a      	ldr	r2, [r3, #0]
    273c:	1a8a      	subs	r2, r1, r2
    273e:	2a52      	cmp	r2, #82	; 0x52
    2740:	d997      	bls.n	2672 <L_9869_delayMicroseconds+0x18a>
    2742:	681a      	ldr	r2, [r3, #0]
    2744:	1a8a      	subs	r2, r1, r2
    2746:	2a52      	cmp	r2, #82	; 0x52
    2748:	d8f7      	bhi.n	273a <L_9869_delayMicroseconds+0x252>
    274a:	e792      	b.n	2672 <L_9869_delayMicroseconds+0x18a>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    274c:	681a      	ldr	r2, [r3, #0]
    274e:	1a8a      	subs	r2, r1, r2
    2750:	2a52      	cmp	r2, #82	; 0x52
    2752:	d9a9      	bls.n	26a8 <L_9869_delayMicroseconds+0x1c0>
    2754:	681a      	ldr	r2, [r3, #0]
    2756:	1a8a      	subs	r2, r1, r2
    2758:	2a52      	cmp	r2, #82	; 0x52
    275a:	d8f7      	bhi.n	274c <L_9869_delayMicroseconds+0x264>
    275c:	e7a4      	b.n	26a8 <L_9869_delayMicroseconds+0x1c0>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    275e:	681a      	ldr	r2, [r3, #0]
    2760:	1a8a      	subs	r2, r1, r2
    2762:	2a52      	cmp	r2, #82	; 0x52
    2764:	d9b3      	bls.n	26ce <L_9869_delayMicroseconds+0x1e6>
    2766:	681a      	ldr	r2, [r3, #0]
    2768:	1a8a      	subs	r2, r1, r2
    276a:	2a52      	cmp	r2, #82	; 0x52
    276c:	d8f7      	bhi.n	275e <L_9869_delayMicroseconds+0x276>
    276e:	e7ae      	b.n	26ce <L_9869_delayMicroseconds+0x1e6>
    2770:	1c4b      	adds	r3, r1, #1
    2772:	9304      	str	r3, [sp, #16]
    2774:	e6fc      	b.n	2570 <L_9869_delayMicroseconds+0x88>
    2776:	bf00      	nop
    2778:	e000edfc 	.word	0xe000edfc
    277c:	e0001000 	.word	0xe0001000
    2780:	e0001004 	.word	0xe0001004
    2784:	400ff0c0 	.word	0x400ff0c0
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    2788:	4b25      	ldr	r3, [pc, #148]	; (2820 <L_9869_delayMicroseconds+0x338>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    278a:	781a      	ldrb	r2, [r3, #0]
    278c:	3201      	adds	r2, #1
    278e:	f002 0207 	and.w	r2, r2, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    2792:	f012 0f01 	tst.w	r2, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    2796:	701a      	strb	r2, [r3, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    2798:	bf14      	ite	ne
    279a:	2380      	movne	r3, #128	; 0x80
    279c:	2300      	moveq	r3, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    279e:	0790      	lsls	r0, r2, #30
    27a0:	bf44      	itt	mi
    27a2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
    27a6:	b2db      	uxtbmi	r3, r3
                if(R & 0x04) { Q |= 0x20; }
    27a8:	0751      	lsls	r1, r2, #29
    27aa:	bf48      	it	mi
    27ac:	f043 0320 	orrmi.w	r3, r3, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    27b0:	3310      	adds	r3, #16
    27b2:	2100      	movs	r1, #0
    27b4:	b2db      	uxtb	r3, r3
    27b6:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
    27ba:	f10d 073e 	add.w	r7, sp, #62	; 0x3e
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    27be:	f44f 7680 	mov.w	r6, #256	; 0x100
    27c2:	b1a9      	cbz	r1, 27f0 <L_9869_delayMicroseconds+0x308>
    27c4:	fb96 f1f1 	sdiv	r1, r6, r1
    27c8:	b2c9      	uxtb	r1, r1
    27ca:	1c48      	adds	r0, r1, #1
    27cc:	b2c0      	uxtb	r0, r0
    27ce:	fb00 3503 	mla	r5, r0, r3, r3
    27d2:	122d      	asrs	r5, r5, #8
    27d4:	7010      	strb	r0, [r2, #0]
    27d6:	b2ec      	uxtb	r4, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    27d8:	b105      	cbz	r5, 27dc <L_9869_delayMicroseconds+0x2f4>
    27da:	3c01      	subs	r4, #1
    27dc:	f802 4c03 	strb.w	r4, [r2, #-3]
#endif
                    if(e[i]) e[i]--;
    27e0:	b100      	cbz	r0, 27e4 <L_9869_delayMicroseconds+0x2fc>
    27e2:	7011      	strb	r1, [r2, #0]
    27e4:	3201      	adds	r2, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    27e6:	42ba      	cmp	r2, r7
    27e8:	d008      	beq.n	27fc <L_9869_delayMicroseconds+0x314>
    27ea:	78d1      	ldrb	r1, [r2, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    27ec:	2900      	cmp	r1, #0
    27ee:	d1e9      	bne.n	27c4 <L_9869_delayMicroseconds+0x2dc>
    27f0:	7011      	strb	r1, [r2, #0]
                    d[i] = scale8(Q, e[i]);
    27f2:	f802 1c03 	strb.w	r1, [r2, #-3]
    27f6:	3201      	adds	r2, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    27f8:	42ba      	cmp	r2, r7
    27fa:	d1f6      	bne.n	27ea <L_9869_delayMicroseconds+0x302>
    27fc:	9b07      	ldr	r3, [sp, #28]
    27fe:	681c      	ldr	r4, [r3, #0]
    2800:	e504      	b.n	220c <CLEDController::clearLeds(int)+0x64>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    2802:	ab0a      	add	r3, sp, #40	; 0x28
    2804:	a909      	add	r1, sp, #36	; 0x24
    2806:	47a8      	blx	r5

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    2808:	b013      	add	sp, #76	; 0x4c
    280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    280e:	b662      	cpsie	i
    2810:	e610      	b.n	2434 <CLEDController::clearLeds(int)+0x28c>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2812:	9807      	ldr	r0, [sp, #28]
    2814:	a90b      	add	r1, sp, #44	; 0x2c
    2816:	4798      	blx	r3

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    2818:	b013      	add	sp, #76	; 0x4c
    281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    281e:	bf00      	nop
    2820:	1fff0c98 	.word	0x1fff0c98

00002824 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    2824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2828:	b091      	sub	sp, #68	; 0x44
    282a:	7c84      	ldrb	r4, [r0, #18]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    282c:	785d      	ldrb	r5, [r3, #1]
    282e:	9007      	str	r0, [sp, #28]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2830:	2c01      	cmp	r4, #1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2832:	7818      	ldrb	r0, [r3, #0]
        g = rhs.g;
        b = rhs.b;
    2834:	789b      	ldrb	r3, [r3, #2]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    2836:	9109      	str	r1, [sp, #36]	; 0x24
    2838:	920a      	str	r2, [sp, #40]	; 0x28
    283a:	920b      	str	r2, [sp, #44]	; 0x2c
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    283c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
        g = rhs.g;
    2840:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
        b = rhs.b;
    2844:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2848:	f000 82ca 	beq.w	2de0 <L_12244_delayMicroseconds+0x2b4>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    284c:	2300      	movs	r3, #0
    284e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    2852:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    2856:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    285a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    285e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    2862:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2866:	9c07      	ldr	r4, [sp, #28]
    2868:	49a9      	ldr	r1, [pc, #676]	; (2b10 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2ec>)
    286a:	6823      	ldr	r3, [r4, #0]
    286c:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    286e:	2200      	movs	r2, #0
    2870:	428b      	cmp	r3, r1
    2872:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    2876:	920f      	str	r2, [sp, #60]	; 0x3c
    2878:	f040 82ec 	bne.w	2e54 <L_12244_delayMicroseconds+0x328>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    287c:	f003 fcd8 	bl	6230 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    2880:	8c23      	ldrh	r3, [r4, #32]
    2882:	1ac0      	subs	r0, r0, r3
    2884:	b283      	uxth	r3, r0
    2886:	2b31      	cmp	r3, #49	; 0x31
    2888:	d9f8      	bls.n	287c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x58>

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    288a:	4aa2      	ldr	r2, [pc, #648]	; (2b14 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2f0>)

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    288c:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
    2890:	6813      	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    2892:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    2896:	9101      	str	r1, [sp, #4]
            e[1] = other.e[1];
            e[2] = other.e[2];
    2898:	9402      	str	r4, [sp, #8]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    289a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    289e:	f99d 4039 	ldrsb.w	r4, [sp, #57]	; 0x39
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    28a2:	489d      	ldr	r0, [pc, #628]	; (2b18 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2f4>)
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    28a4:	9100      	str	r1, [sp, #0]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    28a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    28aa:	f89d 5031 	ldrb.w	r5, [sp, #49]	; 0x31
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    28ae:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    28b2:	9403      	str	r4, [sp, #12]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    28b4:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
            d[1] = other.d[1];
            d[2] = other.d[2];
    28b8:	f89d a032 	ldrb.w	sl, [sp, #50]	; 0x32
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28bc:	f89d 6036 	ldrb.w	r6, [sp, #54]	; 0x36
        g = rhs.g;
    28c0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
        b = rhs.b;
    28c4:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
            mLenRemaining = mLen = other.mLen;
    28c8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    28cc:	6013      	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    28ce:	6802      	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    28d0:	4c92      	ldr	r4, [pc, #584]	; (2b1c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2f8>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    28d2:	4b93      	ldr	r3, [pc, #588]	; (2b20 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2fc>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    28d4:	f042 0201 	orr.w	r2, r2, #1
    28d8:	6002      	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    28da:	2200      	movs	r2, #0
    28dc:	6022      	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    28de:	681a      	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    28e0:	681a      	ldr	r2, [r3, #0]
    28e2:	f022 0204 	bic.w	r2, r2, #4
		*port = lo;
    28e6:	601a      	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    28e8:	9b00      	ldr	r3, [sp, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    28ea:	f898 4001 	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    28ee:	1b5d      	subs	r5, r3, r5
    28f0:	fa5f fc85 	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    28f4:	2c00      	cmp	r4, #0
    28f6:	f040 821e 	bne.w	2d36 <L_12244_delayMicroseconds+0x20a>
    28fa:	1c4b      	adds	r3, r1, #1
    28fc:	9304      	str	r3, [sp, #16]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    28fe:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2900:	4b86      	ldr	r3, [pc, #536]	; (2b1c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2f8>)
    2902:	6819      	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    2904:	f1bb 0f00 	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2908:	f101 01e2 	add.w	r1, r1, #226	; 0xe2

		while(pixels.has(1)) {
    290c:	f340 80bb 	ble.w	2a86 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x262>
    2910:	1c72      	adds	r2, r6, #1
    2912:	9205      	str	r2, [sp, #20]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2914:	4882      	ldr	r0, [pc, #520]	; (2b20 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2fc>)
    2916:	1c7a      	adds	r2, r7, #1
    2918:	9206      	str	r2, [sp, #24]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    291a:	461f      	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    291c:	9a01      	ldr	r2, [sp, #4]
    291e:	ebc9 0902 	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
    2922:	9a00      	ldr	r2, [sp, #0]
    2924:	ebcc 0c02 	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    2928:	9a02      	ldr	r2, [sp, #8]
    292a:	ebca 0a02 	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    292e:	fa5f f989 	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
    2932:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    2936:	fa5f fa8a 	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    293a:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    293c:	681a      	ldr	r2, [r3, #0]
    293e:	4291      	cmp	r1, r2
    2940:	d206      	bcs.n	2950 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x12c>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    2942:	681a      	ldr	r2, [r3, #0]
    2944:	f242 2574 	movw	r5, #8820	; 0x2274
    2948:	1a52      	subs	r2, r2, r1
    294a:	42aa      	cmp	r2, r5
    294c:	f200 80ea 	bhi.w	2b24 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x300>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2950:	6805      	ldr	r5, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2952:	6806      	ldr	r6, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2954:	f045 0504 	orr.w	r5, r5, #4
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2958:	f026 0604 	bic.w	r6, r6, #4
    295c:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2960:	681a      	ldr	r2, [r3, #0]
    2962:	4291      	cmp	r1, r2
    2964:	d8fc      	bhi.n	2960 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x13c>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2966:	6839      	ldr	r1, [r7, #0]
    2968:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    296a:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    296c:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2970:	f100 8095 	bmi.w	2a9e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x27a>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2974:	681a      	ldr	r2, [r3, #0]
    2976:	1a8a      	subs	r2, r1, r2
    2978:	2ac3      	cmp	r2, #195	; 0xc3
    297a:	d8fb      	bhi.n	2974 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x150>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    297c:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    297e:	f1be 0e01 	subs.w	lr, lr, #1
    2982:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2984:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2986:	d1eb      	bne.n	2960 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x13c>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    2988:	681a      	ldr	r2, [r3, #0]
    298a:	4291      	cmp	r1, r2
    298c:	d8fc      	bhi.n	2988 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x164>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    298e:	6839      	ldr	r1, [r7, #0]
    2990:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2992:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2994:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2998:	f100 808b 	bmi.w	2ab2 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x28e>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    299c:	681a      	ldr	r2, [r3, #0]
    299e:	1a8a      	subs	r2, r1, r2
    29a0:	2ac3      	cmp	r2, #195	; 0xc3
    29a2:	d8fb      	bhi.n	299c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x178>
    29a4:	6006      	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    29a6:	f898 4000 	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    29aa:	b13c      	cbz	r4, 29bc <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x198>
    29ac:	fa84 f459 	uqadd8	r4, r4, r9
    29b0:	9a05      	ldr	r2, [sp, #20]
    29b2:	b2e4      	uxtb	r4, r4
    29b4:	fb04 f402 	mul.w	r4, r4, r2
    29b8:	f3c4 2407 	ubfx	r4, r4, #8, #8
    29bc:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    29c0:	681a      	ldr	r2, [r3, #0]
    29c2:	428a      	cmp	r2, r1
    29c4:	d3fc      	bcc.n	29c0 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x19c>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    29c6:	6839      	ldr	r1, [r7, #0]
    29c8:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    29ca:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    29cc:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    29d0:	d479      	bmi.n	2ac6 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2a2>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    29d2:	681a      	ldr	r2, [r3, #0]
    29d4:	1a8a      	subs	r2, r1, r2
    29d6:	2ac3      	cmp	r2, #195	; 0xc3
    29d8:	d8fb      	bhi.n	29d2 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1ae>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    29da:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    29dc:	f1be 0e01 	subs.w	lr, lr, #1
    29e0:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    29e2:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    29e4:	d1ec      	bne.n	29c0 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x19c>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    29e6:	681a      	ldr	r2, [r3, #0]
    29e8:	4291      	cmp	r1, r2
    29ea:	d8fc      	bhi.n	29e6 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1c2>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    29ec:	6839      	ldr	r1, [r7, #0]
    29ee:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    29f0:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    29f2:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    29f6:	d46f      	bmi.n	2ad8 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2b4>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    29f8:	681a      	ldr	r2, [r3, #0]
    29fa:	1a8a      	subs	r2, r1, r2
    29fc:	2ac3      	cmp	r2, #195	; 0xc3
    29fe:	d8fb      	bhi.n	29f8 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1d4>
    2a00:	6006      	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2a02:	f898 4002 	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2a06:	b13c      	cbz	r4, 2a18 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1f4>
    2a08:	fa84 f45a 	uqadd8	r4, r4, sl
    2a0c:	9a06      	ldr	r2, [sp, #24]
    2a0e:	b2e4      	uxtb	r4, r4
    2a10:	fb04 f402 	mul.w	r4, r4, r2
    2a14:	f3c4 2407 	ubfx	r4, r4, #8, #8
    2a18:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2a1c:	681a      	ldr	r2, [r3, #0]
    2a1e:	428a      	cmp	r2, r1
    2a20:	d3fc      	bcc.n	2a1c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1f8>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2a22:	6839      	ldr	r1, [r7, #0]
    2a24:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2a26:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2a28:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2a2c:	d45d      	bmi.n	2aea <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2c6>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2a2e:	681a      	ldr	r2, [r3, #0]
    2a30:	1a8a      	subs	r2, r1, r2
    2a32:	2ac3      	cmp	r2, #195	; 0xc3
    2a34:	d8fb      	bhi.n	2a2e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x20a>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2a36:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2a38:	f1be 0e01 	subs.w	lr, lr, #1
    2a3c:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2a3e:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2a40:	d1ec      	bne.n	2a1c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1f8>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    2a42:	681a      	ldr	r2, [r3, #0]
    2a44:	4291      	cmp	r1, r2
    2a46:	d8fc      	bhi.n	2a42 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x21e>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2a48:	6839      	ldr	r1, [r7, #0]
    2a4a:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2a4c:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2a4e:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2a52:	d453      	bmi.n	2afc <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2d8>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2a54:	681a      	ldr	r2, [r3, #0]
    2a56:	1a8a      	subs	r2, r1, r2
    2a58:	2ac3      	cmp	r2, #195	; 0xc3
    2a5a:	d8fb      	bhi.n	2a54 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x230>
    2a5c:	9a03      	ldr	r2, [sp, #12]
    2a5e:	6006      	str	r6, [r0, #0]
    2a60:	4490      	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    2a62:	f10b 3bff 	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2a66:	f898 4001 	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2a6a:	b13c      	cbz	r4, 2a7c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x258>
    2a6c:	fa84 f45c 	uqadd8	r4, r4, ip
    2a70:	9a04      	ldr	r2, [sp, #16]
    2a72:	b2e4      	uxtb	r4, r4
    2a74:	fb02 f404 	mul.w	r4, r2, r4
    2a78:	f3c4 2407 	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    2a7c:	b662      	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    2a7e:	f1bb 0f00 	cmp.w	fp, #0
    2a82:	f47f af4b 	bne.w	291c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xf8>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    2a86:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    2a88:	4b24      	ldr	r3, [pc, #144]	; (2b1c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2f8>)
    2a8a:	681b      	ldr	r3, [r3, #0]

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d04a      	beq.n	2b26 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x302>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    2a90:	f003 fbce 	bl	6230 <micros>
    2a94:	9b07      	ldr	r3, [sp, #28]
    2a96:	8418      	strh	r0, [r3, #32]
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
    2a98:	b011      	add	sp, #68	; 0x44
    2a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2a9e:	681a      	ldr	r2, [r3, #0]
    2aa0:	1a8a      	subs	r2, r1, r2
    2aa2:	2a52      	cmp	r2, #82	; 0x52
    2aa4:	f67f af6a 	bls.w	297c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x158>
    2aa8:	681a      	ldr	r2, [r3, #0]
    2aaa:	1a8a      	subs	r2, r1, r2
    2aac:	2a52      	cmp	r2, #82	; 0x52
    2aae:	d8f6      	bhi.n	2a9e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x27a>
    2ab0:	e764      	b.n	297c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x158>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2ab2:	681a      	ldr	r2, [r3, #0]
    2ab4:	1a8a      	subs	r2, r1, r2
    2ab6:	2a52      	cmp	r2, #82	; 0x52
    2ab8:	f67f af74 	bls.w	29a4 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x180>
    2abc:	681a      	ldr	r2, [r3, #0]
    2abe:	1a8a      	subs	r2, r1, r2
    2ac0:	2a52      	cmp	r2, #82	; 0x52
    2ac2:	d8f6      	bhi.n	2ab2 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x28e>
    2ac4:	e76e      	b.n	29a4 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x180>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2ac6:	681a      	ldr	r2, [r3, #0]
    2ac8:	1a8a      	subs	r2, r1, r2
    2aca:	2a52      	cmp	r2, #82	; 0x52
    2acc:	d985      	bls.n	29da <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1b6>
    2ace:	681a      	ldr	r2, [r3, #0]
    2ad0:	1a8a      	subs	r2, r1, r2
    2ad2:	2a52      	cmp	r2, #82	; 0x52
    2ad4:	d8f7      	bhi.n	2ac6 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2a2>
    2ad6:	e780      	b.n	29da <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1b6>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2ad8:	681a      	ldr	r2, [r3, #0]
    2ada:	1a8a      	subs	r2, r1, r2
    2adc:	2a52      	cmp	r2, #82	; 0x52
    2ade:	d98f      	bls.n	2a00 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1dc>
    2ae0:	681a      	ldr	r2, [r3, #0]
    2ae2:	1a8a      	subs	r2, r1, r2
    2ae4:	2a52      	cmp	r2, #82	; 0x52
    2ae6:	d8f7      	bhi.n	2ad8 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2b4>
    2ae8:	e78a      	b.n	2a00 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x1dc>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2aea:	681a      	ldr	r2, [r3, #0]
    2aec:	1a8a      	subs	r2, r1, r2
    2aee:	2a52      	cmp	r2, #82	; 0x52
    2af0:	d9a1      	bls.n	2a36 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x212>
    2af2:	681a      	ldr	r2, [r3, #0]
    2af4:	1a8a      	subs	r2, r1, r2
    2af6:	2a52      	cmp	r2, #82	; 0x52
    2af8:	d8f7      	bhi.n	2aea <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2c6>
    2afa:	e79c      	b.n	2a36 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x212>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2afc:	681a      	ldr	r2, [r3, #0]
    2afe:	1a8a      	subs	r2, r1, r2
    2b00:	2a52      	cmp	r2, #82	; 0x52
    2b02:	d9ab      	bls.n	2a5c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x238>
    2b04:	681a      	ldr	r2, [r3, #0]
    2b06:	1a8a      	subs	r2, r1, r2
    2b08:	2a52      	cmp	r2, #82	; 0x52
    2b0a:	d8f7      	bhi.n	2afc <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x2d8>
    2b0c:	e7a6      	b.n	2a5c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x238>
    2b0e:	bf00      	nop
    2b10:	000034a5 	.word	0x000034a5
    2b14:	e000edfc 	.word	0xe000edfc
    2b18:	e0001000 	.word	0xe0001000
    2b1c:	e0001004 	.word	0xe0001004
    2b20:	400ff0c0 	.word	0x400ff0c0
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    2b24:	b662      	cpsie	i
protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
      sei(); delayMicroseconds(WAIT_TIME); cli();
    2b26:	b662      	cpsie	i
    2b28:	f640 33b8 	movw	r3, #3000	; 0xbb8

00002b2c <L_12244_delayMicroseconds>:
    2b2c:	3b01      	subs	r3, #1
    2b2e:	d1fd      	bne.n	2b2c <L_12244_delayMicroseconds>
    2b30:	b672      	cpsid	i

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    2b32:	4aa7      	ldr	r2, [pc, #668]	; (2dd0 <L_12244_delayMicroseconds+0x2a4>)

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    2b34:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
    2b38:	6813      	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    2b3a:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    2b3e:	9101      	str	r1, [sp, #4]
            e[1] = other.e[1];
            e[2] = other.e[2];
    2b40:	9402      	str	r4, [sp, #8]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    2b42:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    2b46:	f99d 4039 	ldrsb.w	r4, [sp, #57]	; 0x39
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2b4a:	48a2      	ldr	r0, [pc, #648]	; (2dd4 <L_12244_delayMicroseconds+0x2a8>)
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    2b4c:	9100      	str	r1, [sp, #0]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    2b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    2b52:	f89d 5031 	ldrb.w	r5, [sp, #49]	; 0x31
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    2b56:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    2b5a:	9403      	str	r4, [sp, #12]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    2b5c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
            d[1] = other.d[1];
            d[2] = other.d[2];
    2b60:	f89d a032 	ldrb.w	sl, [sp, #50]	; 0x32
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2b64:	f89d 6036 	ldrb.w	r6, [sp, #54]	; 0x36
        g = rhs.g;
    2b68:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
        b = rhs.b;
    2b6c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
            mLenRemaining = mLen = other.mLen;
    2b70:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    2b74:	6013      	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2b76:	6802      	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2b78:	4c97      	ldr	r4, [pc, #604]	; (2dd8 <L_12244_delayMicroseconds+0x2ac>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2b7a:	4b98      	ldr	r3, [pc, #608]	; (2ddc <L_12244_delayMicroseconds+0x2b0>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2b7c:	f042 0201 	orr.w	r2, r2, #1
    2b80:	6002      	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2b82:	2200      	movs	r2, #0
    2b84:	6022      	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2b86:	681a      	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    2b88:	681a      	ldr	r2, [r3, #0]
    2b8a:	f022 0204 	bic.w	r2, r2, #4
		*port = lo;
    2b8e:	601a      	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2b90:	9b00      	ldr	r3, [sp, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2b92:	f898 4001 	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2b96:	1b5d      	subs	r5, r3, r5
    2b98:	fa5f fc85 	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2b9c:	2c00      	cmp	r4, #0
    2b9e:	f040 810c 	bne.w	2dba <L_12244_delayMicroseconds+0x28e>
    2ba2:	1c4b      	adds	r3, r1, #1
    2ba4:	9304      	str	r3, [sp, #16]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    2ba6:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2ba8:	4b8b      	ldr	r3, [pc, #556]	; (2dd8 <L_12244_delayMicroseconds+0x2ac>)
    2baa:	6819      	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    2bac:	f1bb 0f00 	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2bb0:	f101 01e2 	add.w	r1, r1, #226	; 0xe2

		while(pixels.has(1)) {
    2bb4:	f340 80bb 	ble.w	2d2e <L_12244_delayMicroseconds+0x202>
    2bb8:	1c72      	adds	r2, r6, #1
    2bba:	9205      	str	r2, [sp, #20]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2bbc:	4887      	ldr	r0, [pc, #540]	; (2ddc <L_12244_delayMicroseconds+0x2b0>)
    2bbe:	1c7a      	adds	r2, r7, #1
    2bc0:	9206      	str	r2, [sp, #24]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2bc2:	461f      	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    2bc4:	9a01      	ldr	r2, [sp, #4]
    2bc6:	ebc9 0902 	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
    2bca:	9a00      	ldr	r2, [sp, #0]
    2bcc:	ebcc 0c02 	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    2bd0:	9a02      	ldr	r2, [sp, #8]
    2bd2:	ebca 0a02 	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    2bd6:	fa5f f989 	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
    2bda:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    2bde:	fa5f fa8a 	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    2be2:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    2be4:	681a      	ldr	r2, [r3, #0]
    2be6:	428a      	cmp	r2, r1
    2be8:	d906      	bls.n	2bf8 <L_12244_delayMicroseconds+0xcc>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    2bea:	681a      	ldr	r2, [r3, #0]
    2bec:	f242 2574 	movw	r5, #8820	; 0x2274
    2bf0:	1a52      	subs	r2, r2, r1
    2bf2:	42aa      	cmp	r2, r5
    2bf4:	f200 812c 	bhi.w	2e50 <L_12244_delayMicroseconds+0x324>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2bf8:	6806      	ldr	r6, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2bfa:	6805      	ldr	r5, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2bfc:	f046 0604 	orr.w	r6, r6, #4
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2c00:	f025 0504 	bic.w	r5, r5, #4
    2c04:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2c08:	681a      	ldr	r2, [r3, #0]
    2c0a:	428a      	cmp	r2, r1
    2c0c:	d3fc      	bcc.n	2c08 <L_12244_delayMicroseconds+0xdc>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2c0e:	6839      	ldr	r1, [r7, #0]
    2c10:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2c12:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2c14:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2c18:	f100 8097 	bmi.w	2d4a <L_12244_delayMicroseconds+0x21e>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2c1c:	681a      	ldr	r2, [r3, #0]
    2c1e:	1a8a      	subs	r2, r1, r2
    2c20:	2ac3      	cmp	r2, #195	; 0xc3
    2c22:	d8fb      	bhi.n	2c1c <L_12244_delayMicroseconds+0xf0>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2c24:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2c26:	f1be 0e01 	subs.w	lr, lr, #1
    2c2a:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2c2c:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2c2e:	d1eb      	bne.n	2c08 <L_12244_delayMicroseconds+0xdc>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    2c30:	681a      	ldr	r2, [r3, #0]
    2c32:	4291      	cmp	r1, r2
    2c34:	d8fc      	bhi.n	2c30 <L_12244_delayMicroseconds+0x104>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2c36:	6839      	ldr	r1, [r7, #0]
    2c38:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2c3a:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2c3c:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2c40:	f100 808d 	bmi.w	2d5e <L_12244_delayMicroseconds+0x232>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2c44:	681a      	ldr	r2, [r3, #0]
    2c46:	1a8a      	subs	r2, r1, r2
    2c48:	2ac3      	cmp	r2, #195	; 0xc3
    2c4a:	d8fb      	bhi.n	2c44 <L_12244_delayMicroseconds+0x118>
    2c4c:	6005      	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2c4e:	f898 4000 	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2c52:	b13c      	cbz	r4, 2c64 <L_12244_delayMicroseconds+0x138>
    2c54:	fa84 f459 	uqadd8	r4, r4, r9
    2c58:	9a05      	ldr	r2, [sp, #20]
    2c5a:	b2e4      	uxtb	r4, r4
    2c5c:	fb04 f402 	mul.w	r4, r4, r2
    2c60:	f3c4 2407 	ubfx	r4, r4, #8, #8
    2c64:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2c68:	681a      	ldr	r2, [r3, #0]
    2c6a:	428a      	cmp	r2, r1
    2c6c:	d3fc      	bcc.n	2c68 <L_12244_delayMicroseconds+0x13c>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2c6e:	6839      	ldr	r1, [r7, #0]
    2c70:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2c72:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2c74:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2c78:	d47b      	bmi.n	2d72 <L_12244_delayMicroseconds+0x246>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2c7a:	681a      	ldr	r2, [r3, #0]
    2c7c:	1a8a      	subs	r2, r1, r2
    2c7e:	2ac3      	cmp	r2, #195	; 0xc3
    2c80:	d8fb      	bhi.n	2c7a <L_12244_delayMicroseconds+0x14e>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2c82:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2c84:	f1be 0e01 	subs.w	lr, lr, #1
    2c88:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2c8a:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2c8c:	d1ec      	bne.n	2c68 <L_12244_delayMicroseconds+0x13c>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    2c8e:	681a      	ldr	r2, [r3, #0]
    2c90:	4291      	cmp	r1, r2
    2c92:	d8fc      	bhi.n	2c8e <L_12244_delayMicroseconds+0x162>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2c94:	6839      	ldr	r1, [r7, #0]
    2c96:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2c98:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2c9a:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2c9e:	d471      	bmi.n	2d84 <L_12244_delayMicroseconds+0x258>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2ca0:	681a      	ldr	r2, [r3, #0]
    2ca2:	1a8a      	subs	r2, r1, r2
    2ca4:	2ac3      	cmp	r2, #195	; 0xc3
    2ca6:	d8fb      	bhi.n	2ca0 <L_12244_delayMicroseconds+0x174>
    2ca8:	6005      	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2caa:	f898 4002 	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2cae:	b13c      	cbz	r4, 2cc0 <L_12244_delayMicroseconds+0x194>
    2cb0:	fa84 f45a 	uqadd8	r4, r4, sl
    2cb4:	9a06      	ldr	r2, [sp, #24]
    2cb6:	b2e4      	uxtb	r4, r4
    2cb8:	fb04 f402 	mul.w	r4, r4, r2
    2cbc:	f3c4 2407 	ubfx	r4, r4, #8, #8
    2cc0:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2cc4:	681a      	ldr	r2, [r3, #0]
    2cc6:	428a      	cmp	r2, r1
    2cc8:	d3fc      	bcc.n	2cc4 <L_12244_delayMicroseconds+0x198>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2cca:	6839      	ldr	r1, [r7, #0]
    2ccc:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2cce:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2cd0:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2cd4:	d45f      	bmi.n	2d96 <L_12244_delayMicroseconds+0x26a>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2cd6:	681a      	ldr	r2, [r3, #0]
    2cd8:	1a8a      	subs	r2, r1, r2
    2cda:	2ac3      	cmp	r2, #195	; 0xc3
    2cdc:	d8fb      	bhi.n	2cd6 <L_12244_delayMicroseconds+0x1aa>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2cde:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2ce0:	f1be 0e01 	subs.w	lr, lr, #1
    2ce4:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2ce6:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2ce8:	d1ec      	bne.n	2cc4 <L_12244_delayMicroseconds+0x198>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    2cea:	681a      	ldr	r2, [r3, #0]
    2cec:	4291      	cmp	r1, r2
    2cee:	d8fc      	bhi.n	2cea <L_12244_delayMicroseconds+0x1be>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2cf0:	6839      	ldr	r1, [r7, #0]
    2cf2:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2cf4:	0622      	lsls	r2, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2cf6:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2cfa:	d455      	bmi.n	2da8 <L_12244_delayMicroseconds+0x27c>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2cfc:	681a      	ldr	r2, [r3, #0]
    2cfe:	1a8a      	subs	r2, r1, r2
    2d00:	2ac3      	cmp	r2, #195	; 0xc3
    2d02:	d8fb      	bhi.n	2cfc <L_12244_delayMicroseconds+0x1d0>
    2d04:	9a03      	ldr	r2, [sp, #12]
    2d06:	6005      	str	r5, [r0, #0]
    2d08:	4490      	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    2d0a:	f10b 3bff 	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2d0e:	f898 4001 	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2d12:	b13c      	cbz	r4, 2d24 <L_12244_delayMicroseconds+0x1f8>
    2d14:	fa84 f45c 	uqadd8	r4, r4, ip
    2d18:	9a04      	ldr	r2, [sp, #16]
    2d1a:	b2e4      	uxtb	r4, r4
    2d1c:	fb02 f404 	mul.w	r4, r2, r4
    2d20:	f3c4 2407 	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    2d24:	b662      	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    2d26:	f1bb 0f00 	cmp.w	fp, #0
    2d2a:	f47f af4b 	bne.w	2bc4 <L_12244_delayMicroseconds+0x98>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    2d2e:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    2d30:	4b29      	ldr	r3, [pc, #164]	; (2dd8 <L_12244_delayMicroseconds+0x2ac>)
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	e6ac      	b.n	2a90 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x26c>
    2d36:	fa84 f45c 	uqadd8	r4, r4, ip
    2d3a:	b2e3      	uxtb	r3, r4
    2d3c:	1c4a      	adds	r2, r1, #1
    2d3e:	fb02 f303 	mul.w	r3, r2, r3
    2d42:	9204      	str	r2, [sp, #16]
    2d44:	f3c3 2407 	ubfx	r4, r3, #8, #8
    2d48:	e5d9      	b.n	28fe <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xda>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2d4a:	681a      	ldr	r2, [r3, #0]
    2d4c:	1a8a      	subs	r2, r1, r2
    2d4e:	2a52      	cmp	r2, #82	; 0x52
    2d50:	f67f af68 	bls.w	2c24 <L_12244_delayMicroseconds+0xf8>
    2d54:	681a      	ldr	r2, [r3, #0]
    2d56:	1a8a      	subs	r2, r1, r2
    2d58:	2a52      	cmp	r2, #82	; 0x52
    2d5a:	d8f6      	bhi.n	2d4a <L_12244_delayMicroseconds+0x21e>
    2d5c:	e762      	b.n	2c24 <L_12244_delayMicroseconds+0xf8>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2d5e:	681a      	ldr	r2, [r3, #0]
    2d60:	1a8a      	subs	r2, r1, r2
    2d62:	2a52      	cmp	r2, #82	; 0x52
    2d64:	f67f af72 	bls.w	2c4c <L_12244_delayMicroseconds+0x120>
    2d68:	681a      	ldr	r2, [r3, #0]
    2d6a:	1a8a      	subs	r2, r1, r2
    2d6c:	2a52      	cmp	r2, #82	; 0x52
    2d6e:	d8f6      	bhi.n	2d5e <L_12244_delayMicroseconds+0x232>
    2d70:	e76c      	b.n	2c4c <L_12244_delayMicroseconds+0x120>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2d72:	681a      	ldr	r2, [r3, #0]
    2d74:	1a8a      	subs	r2, r1, r2
    2d76:	2a52      	cmp	r2, #82	; 0x52
    2d78:	d983      	bls.n	2c82 <L_12244_delayMicroseconds+0x156>
    2d7a:	681a      	ldr	r2, [r3, #0]
    2d7c:	1a8a      	subs	r2, r1, r2
    2d7e:	2a52      	cmp	r2, #82	; 0x52
    2d80:	d8f7      	bhi.n	2d72 <L_12244_delayMicroseconds+0x246>
    2d82:	e77e      	b.n	2c82 <L_12244_delayMicroseconds+0x156>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2d84:	681a      	ldr	r2, [r3, #0]
    2d86:	1a8a      	subs	r2, r1, r2
    2d88:	2a52      	cmp	r2, #82	; 0x52
    2d8a:	d98d      	bls.n	2ca8 <L_12244_delayMicroseconds+0x17c>
    2d8c:	681a      	ldr	r2, [r3, #0]
    2d8e:	1a8a      	subs	r2, r1, r2
    2d90:	2a52      	cmp	r2, #82	; 0x52
    2d92:	d8f7      	bhi.n	2d84 <L_12244_delayMicroseconds+0x258>
    2d94:	e788      	b.n	2ca8 <L_12244_delayMicroseconds+0x17c>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2d96:	681a      	ldr	r2, [r3, #0]
    2d98:	1a8a      	subs	r2, r1, r2
    2d9a:	2a52      	cmp	r2, #82	; 0x52
    2d9c:	d99f      	bls.n	2cde <L_12244_delayMicroseconds+0x1b2>
    2d9e:	681a      	ldr	r2, [r3, #0]
    2da0:	1a8a      	subs	r2, r1, r2
    2da2:	2a52      	cmp	r2, #82	; 0x52
    2da4:	d8f7      	bhi.n	2d96 <L_12244_delayMicroseconds+0x26a>
    2da6:	e79a      	b.n	2cde <L_12244_delayMicroseconds+0x1b2>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    2da8:	681a      	ldr	r2, [r3, #0]
    2daa:	1a8a      	subs	r2, r1, r2
    2dac:	2a52      	cmp	r2, #82	; 0x52
    2dae:	d9a9      	bls.n	2d04 <L_12244_delayMicroseconds+0x1d8>
    2db0:	681a      	ldr	r2, [r3, #0]
    2db2:	1a8a      	subs	r2, r1, r2
    2db4:	2a52      	cmp	r2, #82	; 0x52
    2db6:	d8f7      	bhi.n	2da8 <L_12244_delayMicroseconds+0x27c>
    2db8:	e7a4      	b.n	2d04 <L_12244_delayMicroseconds+0x1d8>
    2dba:	fa84 f45c 	uqadd8	r4, r4, ip
    2dbe:	b2e3      	uxtb	r3, r4
    2dc0:	1c4a      	adds	r2, r1, #1
    2dc2:	fb02 f303 	mul.w	r3, r2, r3
    2dc6:	9204      	str	r2, [sp, #16]
    2dc8:	f3c3 2407 	ubfx	r4, r3, #8, #8
    2dcc:	e6eb      	b.n	2ba6 <L_12244_delayMicroseconds+0x7a>
    2dce:	bf00      	nop
    2dd0:	e000edfc 	.word	0xe000edfc
    2dd4:	e0001000 	.word	0xe0001000
    2dd8:	e0001004 	.word	0xe0001004
    2ddc:	400ff0c0 	.word	0x400ff0c0
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    2de0:	4b1f      	ldr	r3, [pc, #124]	; (2e60 <L_12244_delayMicroseconds+0x334>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    2de2:	781a      	ldrb	r2, [r3, #0]
    2de4:	3201      	adds	r2, #1
    2de6:	f002 0207 	and.w	r2, r2, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    2dea:	f012 0f01 	tst.w	r2, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    2dee:	701a      	strb	r2, [r3, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    2df0:	bf14      	ite	ne
    2df2:	2380      	movne	r3, #128	; 0x80
    2df4:	2300      	moveq	r3, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    2df6:	0794      	lsls	r4, r2, #30
    2df8:	bf44      	itt	mi
    2dfa:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
    2dfe:	b2db      	uxtbmi	r3, r3
                if(R & 0x04) { Q |= 0x20; }
    2e00:	0751      	lsls	r1, r2, #29
    2e02:	bf48      	it	mi
    2e04:	f043 0320 	orrmi.w	r3, r3, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    2e08:	3310      	adds	r3, #16
    2e0a:	b2db      	uxtb	r3, r3
    2e0c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    2e10:	f10d 0736 	add.w	r7, sp, #54	; 0x36
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    2e14:	f44f 7680 	mov.w	r6, #256	; 0x100
    2e18:	b1b0      	cbz	r0, 2e48 <L_12244_delayMicroseconds+0x31c>
    2e1a:	fb96 f1f0 	sdiv	r1, r6, r0
    2e1e:	b2c9      	uxtb	r1, r1
    2e20:	1c48      	adds	r0, r1, #1
    2e22:	b2c0      	uxtb	r0, r0
    2e24:	fb00 3503 	mla	r5, r0, r3, r3
    2e28:	122d      	asrs	r5, r5, #8
    2e2a:	7010      	strb	r0, [r2, #0]
    2e2c:	b2ec      	uxtb	r4, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    2e2e:	b105      	cbz	r5, 2e32 <L_12244_delayMicroseconds+0x306>
    2e30:	3c01      	subs	r4, #1
    2e32:	f802 4c03 	strb.w	r4, [r2, #-3]
#endif
                    if(e[i]) e[i]--;
    2e36:	b100      	cbz	r0, 2e3a <L_12244_delayMicroseconds+0x30e>
    2e38:	7011      	strb	r1, [r2, #0]
    2e3a:	3201      	adds	r2, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    2e3c:	42ba      	cmp	r2, r7
    2e3e:	f43f ad12 	beq.w	2866 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x42>
    2e42:	78d0      	ldrb	r0, [r2, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    2e44:	2800      	cmp	r0, #0
    2e46:	d1e8      	bne.n	2e1a <L_12244_delayMicroseconds+0x2ee>
    2e48:	7010      	strb	r0, [r2, #0]
                    d[i] = scale8(Q, e[i]);
    2e4a:	f802 0c03 	strb.w	r0, [r2, #-3]
    2e4e:	e7f4      	b.n	2e3a <L_12244_delayMicroseconds+0x30e>
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    2e50:	b662      	cpsie	i
    2e52:	e61d      	b.n	2a90 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x26c>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2e54:	9807      	ldr	r0, [sp, #28]
    2e56:	a909      	add	r1, sp, #36	; 0x24
    2e58:	4798      	blx	r3
  }
    2e5a:	b011      	add	sp, #68	; 0x44
    2e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e60:	1fff0c98 	.word	0x1fff0c98

00002e64 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    2e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e68:	b091      	sub	sp, #68	; 0x44
    2e6a:	7c84      	ldrb	r4, [r0, #18]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2e6c:	785d      	ldrb	r5, [r3, #1]
    2e6e:	9007      	str	r0, [sp, #28]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2e70:	2c01      	cmp	r4, #1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2e72:	7818      	ldrb	r0, [r3, #0]
        g = rhs.g;
        b = rhs.b;
    2e74:	789b      	ldrb	r3, [r3, #2]
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    2e76:	9109      	str	r1, [sp, #36]	; 0x24
    2e78:	920a      	str	r2, [sp, #40]	; 0x28
    2e7a:	920b      	str	r2, [sp, #44]	; 0x2c
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2e7c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
        g = rhs.g;
    2e80:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
        b = rhs.b;
    2e84:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2e88:	f000 82ca 	beq.w	3420 <L_14593_delayMicroseconds+0x2b4>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    2e8c:	2300      	movs	r3, #0
    2e8e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    2e92:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    2e96:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    2e9a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    2e9e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    2ea2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2ea6:	9c07      	ldr	r4, [sp, #28]
    2ea8:	4aa9      	ldr	r2, [pc, #676]	; (3150 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2ec>)
    2eaa:	6823      	ldr	r3, [r4, #0]
    2eac:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    2eae:	2003      	movs	r0, #3
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    2eb0:	2100      	movs	r1, #0
    2eb2:	4293      	cmp	r3, r2
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    2eb4:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    2eb8:	910f      	str	r1, [sp, #60]	; 0x3c
    2eba:	f040 82eb 	bne.w	3494 <L_14593_delayMicroseconds+0x328>
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    2ebe:	f003 f9b7 	bl	6230 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    2ec2:	8c23      	ldrh	r3, [r4, #32]
    2ec4:	1ac0      	subs	r0, r0, r3
    2ec6:	b283      	uxth	r3, r0
    2ec8:	2b31      	cmp	r3, #49	; 0x31
    2eca:	d9f8      	bls.n	2ebe <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x5a>

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    2ecc:	4aa1      	ldr	r2, [pc, #644]	; (3154 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2f0>)

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    2ece:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
    2ed2:	6813      	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    2ed4:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    2ed8:	9101      	str	r1, [sp, #4]
            e[1] = other.e[1];
            e[2] = other.e[2];
    2eda:	9402      	str	r4, [sp, #8]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    2edc:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    2ee0:	f99d 4039 	ldrsb.w	r4, [sp, #57]	; 0x39
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2ee4:	489c      	ldr	r0, [pc, #624]	; (3158 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2f4>)
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    2ee6:	9100      	str	r1, [sp, #0]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    2ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    2eec:	f89d 5031 	ldrb.w	r5, [sp, #49]	; 0x31
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    2ef0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    2ef4:	9403      	str	r4, [sp, #12]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    2ef6:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
            d[1] = other.d[1];
            d[2] = other.d[2];
    2efa:	f89d a032 	ldrb.w	sl, [sp, #50]	; 0x32
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2efe:	f89d 6036 	ldrb.w	r6, [sp, #54]	; 0x36
        g = rhs.g;
    2f02:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
        b = rhs.b;
    2f06:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
            mLenRemaining = mLen = other.mLen;
    2f0a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    2f0e:	6013      	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2f10:	6802      	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2f12:	4c92      	ldr	r4, [pc, #584]	; (315c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2f8>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2f14:	4b92      	ldr	r3, [pc, #584]	; (3160 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2fc>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    2f16:	f042 0201 	orr.w	r2, r2, #1
    2f1a:	6002      	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    2f1c:	2200      	movs	r2, #0
    2f1e:	6022      	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    2f20:	681a      	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    2f22:	681a      	ldr	r2, [r3, #0]
    2f24:	f022 0204 	bic.w	r2, r2, #4
		*port = lo;
    2f28:	601a      	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2f2a:	9b00      	ldr	r3, [sp, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2f2c:	f898 4001 	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    2f30:	1b5d      	subs	r5, r3, r5
    2f32:	fa5f fc85 	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2f36:	2c00      	cmp	r4, #0
    2f38:	f040 821d 	bne.w	3376 <L_14593_delayMicroseconds+0x20a>
    2f3c:	1c4b      	adds	r3, r1, #1
    2f3e:	9304      	str	r3, [sp, #16]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    2f40:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2f42:	4b86      	ldr	r3, [pc, #536]	; (315c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2f8>)
    2f44:	6819      	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    2f46:	f1bb 0f00 	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2f4a:	f101 01e2 	add.w	r1, r1, #226	; 0xe2

		while(pixels.has(1)) {
    2f4e:	f340 80bb 	ble.w	30c8 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x264>
    2f52:	1c72      	adds	r2, r6, #1
    2f54:	9205      	str	r2, [sp, #20]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2f56:	4882      	ldr	r0, [pc, #520]	; (3160 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2fc>)
    2f58:	1c7a      	adds	r2, r7, #1
    2f5a:	9206      	str	r2, [sp, #24]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2f5c:	461f      	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    2f5e:	9a01      	ldr	r2, [sp, #4]
    2f60:	ebc9 0902 	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
    2f64:	9a00      	ldr	r2, [sp, #0]
    2f66:	ebcc 0c02 	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    2f6a:	9a02      	ldr	r2, [sp, #8]
    2f6c:	ebca 0a02 	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    2f70:	fa5f f989 	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
    2f74:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    2f78:	fa5f fa8a 	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    2f7c:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    2f7e:	681a      	ldr	r2, [r3, #0]
    2f80:	428a      	cmp	r2, r1
    2f82:	d906      	bls.n	2f92 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x12e>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    2f84:	681a      	ldr	r2, [r3, #0]
    2f86:	f242 2574 	movw	r5, #8820	; 0x2274
    2f8a:	1a52      	subs	r2, r2, r1
    2f8c:	42aa      	cmp	r2, r5
    2f8e:	f200 80e9 	bhi.w	3164 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x300>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2f92:	6805      	ldr	r5, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2f94:	6806      	ldr	r6, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    2f96:	f045 0504 	orr.w	r5, r5, #4
			lo = *port & ~FastPin<DATA_PIN>::mask();
    2f9a:	f026 0604 	bic.w	r6, r6, #4
    2f9e:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    2fa2:	681a      	ldr	r2, [r3, #0]
    2fa4:	4291      	cmp	r1, r2
    2fa6:	d8fc      	bhi.n	2fa2 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x13e>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2fa8:	6839      	ldr	r1, [r7, #0]
    2faa:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2fac:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2fae:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    2fb2:	f100 8095 	bmi.w	30e0 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x27c>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2fb6:	681a      	ldr	r2, [r3, #0]
    2fb8:	1a8a      	subs	r2, r1, r2
    2fba:	2ac3      	cmp	r2, #195	; 0xc3
    2fbc:	d8fb      	bhi.n	2fb6 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x152>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2fbe:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2fc0:	f1be 0e01 	subs.w	lr, lr, #1
    2fc4:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    2fc6:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    2fc8:	d1eb      	bne.n	2fa2 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x13e>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    2fca:	681a      	ldr	r2, [r3, #0]
    2fcc:	4291      	cmp	r1, r2
    2fce:	d8fc      	bhi.n	2fca <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x166>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2fd0:	6839      	ldr	r1, [r7, #0]
    2fd2:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2fd4:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    2fd6:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    2fda:	f100 808b 	bmi.w	30f4 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x290>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    2fde:	681a      	ldr	r2, [r3, #0]
    2fe0:	1a8a      	subs	r2, r1, r2
    2fe2:	2ac3      	cmp	r2, #195	; 0xc3
    2fe4:	d8fb      	bhi.n	2fde <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x17a>
    2fe6:	6006      	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    2fe8:	f898 4000 	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    2fec:	b13c      	cbz	r4, 2ffe <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x19a>
    2fee:	fa84 f459 	uqadd8	r4, r4, r9
    2ff2:	9a05      	ldr	r2, [sp, #20]
    2ff4:	b2e4      	uxtb	r4, r4
    2ff6:	fb04 f402 	mul.w	r4, r4, r2
    2ffa:	f3c4 2407 	ubfx	r4, r4, #8, #8
    2ffe:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    3002:	681a      	ldr	r2, [r3, #0]
    3004:	428a      	cmp	r2, r1
    3006:	d3fc      	bcc.n	3002 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x19e>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3008:	6839      	ldr	r1, [r7, #0]
    300a:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    300c:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    300e:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3012:	d479      	bmi.n	3108 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2a4>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3014:	681a      	ldr	r2, [r3, #0]
    3016:	1a8a      	subs	r2, r1, r2
    3018:	2ac3      	cmp	r2, #195	; 0xc3
    301a:	d8fb      	bhi.n	3014 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1b0>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    301c:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    301e:	f1be 0e01 	subs.w	lr, lr, #1
    3022:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3024:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3026:	d1ec      	bne.n	3002 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x19e>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    3028:	681a      	ldr	r2, [r3, #0]
    302a:	4291      	cmp	r1, r2
    302c:	d8fc      	bhi.n	3028 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1c4>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    302e:	6839      	ldr	r1, [r7, #0]
    3030:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    3032:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3034:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    3038:	d46f      	bmi.n	311a <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2b6>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    303a:	681a      	ldr	r2, [r3, #0]
    303c:	1a8a      	subs	r2, r1, r2
    303e:	2ac3      	cmp	r2, #195	; 0xc3
    3040:	d8fb      	bhi.n	303a <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1d6>
    3042:	6006      	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    3044:	f898 4002 	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    3048:	b13c      	cbz	r4, 305a <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1f6>
    304a:	fa84 f45a 	uqadd8	r4, r4, sl
    304e:	9a06      	ldr	r2, [sp, #24]
    3050:	b2e4      	uxtb	r4, r4
    3052:	fb04 f402 	mul.w	r4, r4, r2
    3056:	f3c4 2407 	ubfx	r4, r4, #8, #8
    305a:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    305e:	681a      	ldr	r2, [r3, #0]
    3060:	428a      	cmp	r2, r1
    3062:	d3fc      	bcc.n	305e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1fa>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3064:	6839      	ldr	r1, [r7, #0]
    3066:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3068:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    306a:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    306e:	d45d      	bmi.n	312c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2c8>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3070:	681a      	ldr	r2, [r3, #0]
    3072:	1a8a      	subs	r2, r1, r2
    3074:	2ac3      	cmp	r2, #195	; 0xc3
    3076:	d8fb      	bhi.n	3070 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x20c>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3078:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    307a:	f1be 0e01 	subs.w	lr, lr, #1
    307e:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3080:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3082:	d1ec      	bne.n	305e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1fa>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    3084:	681a      	ldr	r2, [r3, #0]
    3086:	4291      	cmp	r1, r2
    3088:	d8fc      	bhi.n	3084 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x220>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    308a:	6839      	ldr	r1, [r7, #0]
    308c:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    308e:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3090:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    3094:	d453      	bmi.n	313e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2da>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3096:	681a      	ldr	r2, [r3, #0]
    3098:	1a8a      	subs	r2, r1, r2
    309a:	2ac3      	cmp	r2, #195	; 0xc3
    309c:	d8fb      	bhi.n	3096 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x232>
    309e:	9a03      	ldr	r2, [sp, #12]
    30a0:	6006      	str	r6, [r0, #0]
    30a2:	4490      	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    30a4:	f10b 3bff 	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    30a8:	f898 4001 	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    30ac:	b13c      	cbz	r4, 30be <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x25a>
    30ae:	fa84 f45c 	uqadd8	r4, r4, ip
    30b2:	9a04      	ldr	r2, [sp, #16]
    30b4:	b2e4      	uxtb	r4, r4
    30b6:	fb02 f404 	mul.w	r4, r2, r4
    30ba:	f3c4 2407 	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    30be:	b662      	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    30c0:	f1bb 0f00 	cmp.w	fp, #0
    30c4:	f47f af4b 	bne.w	2f5e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xfa>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    30c8:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    30ca:	4b24      	ldr	r3, [pc, #144]	; (315c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2f8>)
    30cc:	681b      	ldr	r3, [r3, #0]

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
    30ce:	2b00      	cmp	r3, #0
    30d0:	d049      	beq.n	3166 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x302>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    30d2:	f003 f8ad 	bl	6230 <micros>
    30d6:	9b07      	ldr	r3, [sp, #28]
    30d8:	8418      	strh	r0, [r3, #32]
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
  }
    30da:	b011      	add	sp, #68	; 0x44
    30dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    30e0:	681a      	ldr	r2, [r3, #0]
    30e2:	1a8a      	subs	r2, r1, r2
    30e4:	2a52      	cmp	r2, #82	; 0x52
    30e6:	f67f af6a 	bls.w	2fbe <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x15a>
    30ea:	681a      	ldr	r2, [r3, #0]
    30ec:	1a8a      	subs	r2, r1, r2
    30ee:	2a52      	cmp	r2, #82	; 0x52
    30f0:	d8f6      	bhi.n	30e0 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x27c>
    30f2:	e764      	b.n	2fbe <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x15a>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    30f4:	681a      	ldr	r2, [r3, #0]
    30f6:	1a8a      	subs	r2, r1, r2
    30f8:	2a52      	cmp	r2, #82	; 0x52
    30fa:	f67f af74 	bls.w	2fe6 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x182>
    30fe:	681a      	ldr	r2, [r3, #0]
    3100:	1a8a      	subs	r2, r1, r2
    3102:	2a52      	cmp	r2, #82	; 0x52
    3104:	d8f6      	bhi.n	30f4 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x290>
    3106:	e76e      	b.n	2fe6 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x182>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    3108:	681a      	ldr	r2, [r3, #0]
    310a:	1a8a      	subs	r2, r1, r2
    310c:	2a52      	cmp	r2, #82	; 0x52
    310e:	d985      	bls.n	301c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1b8>
    3110:	681a      	ldr	r2, [r3, #0]
    3112:	1a8a      	subs	r2, r1, r2
    3114:	2a52      	cmp	r2, #82	; 0x52
    3116:	d8f7      	bhi.n	3108 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2a4>
    3118:	e780      	b.n	301c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1b8>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    311a:	681a      	ldr	r2, [r3, #0]
    311c:	1a8a      	subs	r2, r1, r2
    311e:	2a52      	cmp	r2, #82	; 0x52
    3120:	d98f      	bls.n	3042 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1de>
    3122:	681a      	ldr	r2, [r3, #0]
    3124:	1a8a      	subs	r2, r1, r2
    3126:	2a52      	cmp	r2, #82	; 0x52
    3128:	d8f7      	bhi.n	311a <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2b6>
    312a:	e78a      	b.n	3042 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x1de>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    312c:	681a      	ldr	r2, [r3, #0]
    312e:	1a8a      	subs	r2, r1, r2
    3130:	2a52      	cmp	r2, #82	; 0x52
    3132:	d9a1      	bls.n	3078 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x214>
    3134:	681a      	ldr	r2, [r3, #0]
    3136:	1a8a      	subs	r2, r1, r2
    3138:	2a52      	cmp	r2, #82	; 0x52
    313a:	d8f7      	bhi.n	312c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2c8>
    313c:	e79c      	b.n	3078 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x214>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    313e:	681a      	ldr	r2, [r3, #0]
    3140:	1a8a      	subs	r2, r1, r2
    3142:	2a52      	cmp	r2, #82	; 0x52
    3144:	d9ab      	bls.n	309e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x23a>
    3146:	681a      	ldr	r2, [r3, #0]
    3148:	1a8a      	subs	r2, r1, r2
    314a:	2a52      	cmp	r2, #82	; 0x52
    314c:	d8f7      	bhi.n	313e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x2da>
    314e:	e7a6      	b.n	309e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x23a>
    3150:	000034a5 	.word	0x000034a5
    3154:	e000edfc 	.word	0xe000edfc
    3158:	e0001000 	.word	0xe0001000
    315c:	e0001004 	.word	0xe0001004
    3160:	400ff0c0 	.word	0x400ff0c0
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    3164:	b662      	cpsie	i
protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
      sei(); delayMicroseconds(WAIT_TIME); cli();
    3166:	b662      	cpsie	i
    3168:	f640 33b8 	movw	r3, #3000	; 0xbb8

0000316c <L_14593_delayMicroseconds>:
    316c:	3b01      	subs	r3, #1
    316e:	d1fd      	bne.n	316c <L_14593_delayMicroseconds>
    3170:	b672      	cpsid	i

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    3172:	4aa7      	ldr	r2, [pc, #668]	; (3410 <L_14593_delayMicroseconds+0x2a4>)

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    3174:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
    3178:	6813      	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    317a:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    317e:	9101      	str	r1, [sp, #4]
            e[1] = other.e[1];
            e[2] = other.e[2];
    3180:	9402      	str	r4, [sp, #8]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    3182:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    3186:	f99d 4039 	ldrsb.w	r4, [sp, #57]	; 0x39
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    318a:	48a2      	ldr	r0, [pc, #648]	; (3414 <L_14593_delayMicroseconds+0x2a8>)
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    318c:	9100      	str	r1, [sp, #0]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    318e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    3192:	f89d 5031 	ldrb.w	r5, [sp, #49]	; 0x31
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    3196:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    319a:	9403      	str	r4, [sp, #12]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    319c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
            d[1] = other.d[1];
            d[2] = other.d[2];
    31a0:	f89d a032 	ldrb.w	sl, [sp, #50]	; 0x32
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31a4:	f89d 6036 	ldrb.w	r6, [sp, #54]	; 0x36
        g = rhs.g;
    31a8:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
        b = rhs.b;
    31ac:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
            mLenRemaining = mLen = other.mLen;
    31b0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    31b4:	6013      	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    31b6:	6802      	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    31b8:	4c97      	ldr	r4, [pc, #604]	; (3418 <L_14593_delayMicroseconds+0x2ac>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    31ba:	4b98      	ldr	r3, [pc, #608]	; (341c <L_14593_delayMicroseconds+0x2b0>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    31bc:	f042 0201 	orr.w	r2, r2, #1
    31c0:	6002      	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    31c2:	2200      	movs	r2, #0
    31c4:	6022      	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    31c6:	681a      	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    31c8:	681a      	ldr	r2, [r3, #0]
    31ca:	f022 0204 	bic.w	r2, r2, #4
		*port = lo;
    31ce:	601a      	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    31d0:	9b00      	ldr	r3, [sp, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    31d2:	f898 4001 	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    31d6:	1b5d      	subs	r5, r3, r5
    31d8:	fa5f fc85 	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    31dc:	2c00      	cmp	r4, #0
    31de:	f040 810c 	bne.w	33fa <L_14593_delayMicroseconds+0x28e>
    31e2:	1c4b      	adds	r3, r1, #1
    31e4:	9304      	str	r3, [sp, #16]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    31e6:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    31e8:	4b8b      	ldr	r3, [pc, #556]	; (3418 <L_14593_delayMicroseconds+0x2ac>)
    31ea:	6819      	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    31ec:	f1bb 0f00 	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    31f0:	f101 01e2 	add.w	r1, r1, #226	; 0xe2

		while(pixels.has(1)) {
    31f4:	f340 80bb 	ble.w	336e <L_14593_delayMicroseconds+0x202>
    31f8:	1c72      	adds	r2, r6, #1
    31fa:	9205      	str	r2, [sp, #20]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    31fc:	4887      	ldr	r0, [pc, #540]	; (341c <L_14593_delayMicroseconds+0x2b0>)
    31fe:	1c7a      	adds	r2, r7, #1
    3200:	9206      	str	r2, [sp, #24]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    3202:	461f      	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    3204:	9a01      	ldr	r2, [sp, #4]
    3206:	ebc9 0902 	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
    320a:	9a00      	ldr	r2, [sp, #0]
    320c:	ebcc 0c02 	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    3210:	9a02      	ldr	r2, [sp, #8]
    3212:	ebca 0a02 	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    3216:	fa5f f989 	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
    321a:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    321e:	fa5f fa8a 	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    3222:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    3224:	681a      	ldr	r2, [r3, #0]
    3226:	4291      	cmp	r1, r2
    3228:	d206      	bcs.n	3238 <L_14593_delayMicroseconds+0xcc>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    322a:	681a      	ldr	r2, [r3, #0]
    322c:	f242 2574 	movw	r5, #8820	; 0x2274
    3230:	1a52      	subs	r2, r2, r1
    3232:	42aa      	cmp	r2, r5
    3234:	f200 812c 	bhi.w	3490 <L_14593_delayMicroseconds+0x324>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    3238:	6806      	ldr	r6, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    323a:	6805      	ldr	r5, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    323c:	f046 0604 	orr.w	r6, r6, #4
			lo = *port & ~FastPin<DATA_PIN>::mask();
    3240:	f025 0504 	bic.w	r5, r5, #4
    3244:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    3248:	681a      	ldr	r2, [r3, #0]
    324a:	428a      	cmp	r2, r1
    324c:	d3fc      	bcc.n	3248 <L_14593_delayMicroseconds+0xdc>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    324e:	6839      	ldr	r1, [r7, #0]
    3250:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3252:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3254:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3258:	f100 8097 	bmi.w	338a <L_14593_delayMicroseconds+0x21e>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    325c:	681a      	ldr	r2, [r3, #0]
    325e:	1a8a      	subs	r2, r1, r2
    3260:	2ac3      	cmp	r2, #195	; 0xc3
    3262:	d8fb      	bhi.n	325c <L_14593_delayMicroseconds+0xf0>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3264:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3266:	f1be 0e01 	subs.w	lr, lr, #1
    326a:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    326c:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    326e:	d1eb      	bne.n	3248 <L_14593_delayMicroseconds+0xdc>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    3270:	681a      	ldr	r2, [r3, #0]
    3272:	4291      	cmp	r1, r2
    3274:	d8fc      	bhi.n	3270 <L_14593_delayMicroseconds+0x104>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3276:	6839      	ldr	r1, [r7, #0]
    3278:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    327a:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    327c:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    3280:	f100 808d 	bmi.w	339e <L_14593_delayMicroseconds+0x232>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3284:	681a      	ldr	r2, [r3, #0]
    3286:	1a8a      	subs	r2, r1, r2
    3288:	2ac3      	cmp	r2, #195	; 0xc3
    328a:	d8fb      	bhi.n	3284 <L_14593_delayMicroseconds+0x118>
    328c:	6005      	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    328e:	f898 4000 	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    3292:	b13c      	cbz	r4, 32a4 <L_14593_delayMicroseconds+0x138>
    3294:	fa84 f459 	uqadd8	r4, r4, r9
    3298:	9a05      	ldr	r2, [sp, #20]
    329a:	b2e4      	uxtb	r4, r4
    329c:	fb04 f402 	mul.w	r4, r4, r2
    32a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
    32a4:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    32a8:	681a      	ldr	r2, [r3, #0]
    32aa:	428a      	cmp	r2, r1
    32ac:	d3fc      	bcc.n	32a8 <L_14593_delayMicroseconds+0x13c>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    32ae:	6839      	ldr	r1, [r7, #0]
    32b0:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    32b2:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    32b4:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    32b8:	d47b      	bmi.n	33b2 <L_14593_delayMicroseconds+0x246>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    32ba:	681a      	ldr	r2, [r3, #0]
    32bc:	1a8a      	subs	r2, r1, r2
    32be:	2ac3      	cmp	r2, #195	; 0xc3
    32c0:	d8fb      	bhi.n	32ba <L_14593_delayMicroseconds+0x14e>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    32c2:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    32c4:	f1be 0e01 	subs.w	lr, lr, #1
    32c8:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    32ca:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    32cc:	d1ec      	bne.n	32a8 <L_14593_delayMicroseconds+0x13c>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    32ce:	681a      	ldr	r2, [r3, #0]
    32d0:	4291      	cmp	r1, r2
    32d2:	d8fc      	bhi.n	32ce <L_14593_delayMicroseconds+0x162>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    32d4:	6839      	ldr	r1, [r7, #0]
    32d6:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    32d8:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    32da:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    32de:	d471      	bmi.n	33c4 <L_14593_delayMicroseconds+0x258>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    32e0:	681a      	ldr	r2, [r3, #0]
    32e2:	1a8a      	subs	r2, r1, r2
    32e4:	2ac3      	cmp	r2, #195	; 0xc3
    32e6:	d8fb      	bhi.n	32e0 <L_14593_delayMicroseconds+0x174>
    32e8:	6005      	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    32ea:	f898 4002 	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    32ee:	b13c      	cbz	r4, 3300 <L_14593_delayMicroseconds+0x194>
    32f0:	fa84 f45a 	uqadd8	r4, r4, sl
    32f4:	9a06      	ldr	r2, [sp, #24]
    32f6:	b2e4      	uxtb	r4, r4
    32f8:	fb04 f402 	mul.w	r4, r4, r2
    32fc:	f3c4 2407 	ubfx	r4, r4, #8, #8
    3300:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    3304:	681a      	ldr	r2, [r3, #0]
    3306:	428a      	cmp	r2, r1
    3308:	d3fc      	bcc.n	3304 <L_14593_delayMicroseconds+0x198>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    330a:	6839      	ldr	r1, [r7, #0]
    330c:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    330e:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3310:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3314:	d45f      	bmi.n	33d6 <L_14593_delayMicroseconds+0x26a>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3316:	681a      	ldr	r2, [r3, #0]
    3318:	1a8a      	subs	r2, r1, r2
    331a:	2ac3      	cmp	r2, #195	; 0xc3
    331c:	d8fb      	bhi.n	3316 <L_14593_delayMicroseconds+0x1aa>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    331e:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3320:	f1be 0e01 	subs.w	lr, lr, #1
    3324:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3326:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3328:	d1ec      	bne.n	3304 <L_14593_delayMicroseconds+0x198>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    332a:	681a      	ldr	r2, [r3, #0]
    332c:	4291      	cmp	r1, r2
    332e:	d8fc      	bhi.n	332a <L_14593_delayMicroseconds+0x1be>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3330:	6839      	ldr	r1, [r7, #0]
    3332:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    3334:	0622      	lsls	r2, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3336:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    333a:	d455      	bmi.n	33e8 <L_14593_delayMicroseconds+0x27c>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    333c:	681a      	ldr	r2, [r3, #0]
    333e:	1a8a      	subs	r2, r1, r2
    3340:	2ac3      	cmp	r2, #195	; 0xc3
    3342:	d8fb      	bhi.n	333c <L_14593_delayMicroseconds+0x1d0>
    3344:	9a03      	ldr	r2, [sp, #12]
    3346:	6005      	str	r5, [r0, #0]
    3348:	4490      	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    334a:	f10b 3bff 	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    334e:	f898 4001 	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    3352:	b13c      	cbz	r4, 3364 <L_14593_delayMicroseconds+0x1f8>
    3354:	fa84 f45c 	uqadd8	r4, r4, ip
    3358:	9a04      	ldr	r2, [sp, #16]
    335a:	b2e4      	uxtb	r4, r4
    335c:	fb02 f404 	mul.w	r4, r2, r4
    3360:	f3c4 2407 	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    3364:	b662      	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    3366:	f1bb 0f00 	cmp.w	fp, #0
    336a:	f47f af4b 	bne.w	3204 <L_14593_delayMicroseconds+0x98>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    336e:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    3370:	4b29      	ldr	r3, [pc, #164]	; (3418 <L_14593_delayMicroseconds+0x2ac>)
    3372:	681b      	ldr	r3, [r3, #0]
    3374:	e6ad      	b.n	30d2 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x26e>
    3376:	fa84 f45c 	uqadd8	r4, r4, ip
    337a:	b2e3      	uxtb	r3, r4
    337c:	1c4a      	adds	r2, r1, #1
    337e:	fb02 f303 	mul.w	r3, r2, r3
    3382:	9204      	str	r2, [sp, #16]
    3384:	f3c3 2407 	ubfx	r4, r3, #8, #8
    3388:	e5da      	b.n	2f40 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xdc>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    338a:	681a      	ldr	r2, [r3, #0]
    338c:	1a8a      	subs	r2, r1, r2
    338e:	2a52      	cmp	r2, #82	; 0x52
    3390:	f67f af68 	bls.w	3264 <L_14593_delayMicroseconds+0xf8>
    3394:	681a      	ldr	r2, [r3, #0]
    3396:	1a8a      	subs	r2, r1, r2
    3398:	2a52      	cmp	r2, #82	; 0x52
    339a:	d8f6      	bhi.n	338a <L_14593_delayMicroseconds+0x21e>
    339c:	e762      	b.n	3264 <L_14593_delayMicroseconds+0xf8>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    339e:	681a      	ldr	r2, [r3, #0]
    33a0:	1a8a      	subs	r2, r1, r2
    33a2:	2a52      	cmp	r2, #82	; 0x52
    33a4:	f67f af72 	bls.w	328c <L_14593_delayMicroseconds+0x120>
    33a8:	681a      	ldr	r2, [r3, #0]
    33aa:	1a8a      	subs	r2, r1, r2
    33ac:	2a52      	cmp	r2, #82	; 0x52
    33ae:	d8f6      	bhi.n	339e <L_14593_delayMicroseconds+0x232>
    33b0:	e76c      	b.n	328c <L_14593_delayMicroseconds+0x120>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    33b2:	681a      	ldr	r2, [r3, #0]
    33b4:	1a8a      	subs	r2, r1, r2
    33b6:	2a52      	cmp	r2, #82	; 0x52
    33b8:	d983      	bls.n	32c2 <L_14593_delayMicroseconds+0x156>
    33ba:	681a      	ldr	r2, [r3, #0]
    33bc:	1a8a      	subs	r2, r1, r2
    33be:	2a52      	cmp	r2, #82	; 0x52
    33c0:	d8f7      	bhi.n	33b2 <L_14593_delayMicroseconds+0x246>
    33c2:	e77e      	b.n	32c2 <L_14593_delayMicroseconds+0x156>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    33c4:	681a      	ldr	r2, [r3, #0]
    33c6:	1a8a      	subs	r2, r1, r2
    33c8:	2a52      	cmp	r2, #82	; 0x52
    33ca:	d98d      	bls.n	32e8 <L_14593_delayMicroseconds+0x17c>
    33cc:	681a      	ldr	r2, [r3, #0]
    33ce:	1a8a      	subs	r2, r1, r2
    33d0:	2a52      	cmp	r2, #82	; 0x52
    33d2:	d8f7      	bhi.n	33c4 <L_14593_delayMicroseconds+0x258>
    33d4:	e788      	b.n	32e8 <L_14593_delayMicroseconds+0x17c>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    33d6:	681a      	ldr	r2, [r3, #0]
    33d8:	1a8a      	subs	r2, r1, r2
    33da:	2a52      	cmp	r2, #82	; 0x52
    33dc:	d99f      	bls.n	331e <L_14593_delayMicroseconds+0x1b2>
    33de:	681a      	ldr	r2, [r3, #0]
    33e0:	1a8a      	subs	r2, r1, r2
    33e2:	2a52      	cmp	r2, #82	; 0x52
    33e4:	d8f7      	bhi.n	33d6 <L_14593_delayMicroseconds+0x26a>
    33e6:	e79a      	b.n	331e <L_14593_delayMicroseconds+0x1b2>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    33e8:	681a      	ldr	r2, [r3, #0]
    33ea:	1a8a      	subs	r2, r1, r2
    33ec:	2a52      	cmp	r2, #82	; 0x52
    33ee:	d9a9      	bls.n	3344 <L_14593_delayMicroseconds+0x1d8>
    33f0:	681a      	ldr	r2, [r3, #0]
    33f2:	1a8a      	subs	r2, r1, r2
    33f4:	2a52      	cmp	r2, #82	; 0x52
    33f6:	d8f7      	bhi.n	33e8 <L_14593_delayMicroseconds+0x27c>
    33f8:	e7a4      	b.n	3344 <L_14593_delayMicroseconds+0x1d8>
    33fa:	fa84 f45c 	uqadd8	r4, r4, ip
    33fe:	b2e3      	uxtb	r3, r4
    3400:	1c4a      	adds	r2, r1, #1
    3402:	fb02 f303 	mul.w	r3, r2, r3
    3406:	9204      	str	r2, [sp, #16]
    3408:	f3c3 2407 	ubfx	r4, r3, #8, #8
    340c:	e6eb      	b.n	31e6 <L_14593_delayMicroseconds+0x7a>
    340e:	bf00      	nop
    3410:	e000edfc 	.word	0xe000edfc
    3414:	e0001000 	.word	0xe0001000
    3418:	e0001004 	.word	0xe0001004
    341c:	400ff0c0 	.word	0x400ff0c0
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    3420:	4b1f      	ldr	r3, [pc, #124]	; (34a0 <L_14593_delayMicroseconds+0x334>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    3422:	781a      	ldrb	r2, [r3, #0]
    3424:	3201      	adds	r2, #1
    3426:	f002 0207 	and.w	r2, r2, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    342a:	f012 0f01 	tst.w	r2, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    342e:	701a      	strb	r2, [r3, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    3430:	bf14      	ite	ne
    3432:	2380      	movne	r3, #128	; 0x80
    3434:	2300      	moveq	r3, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    3436:	0794      	lsls	r4, r2, #30
    3438:	bf44      	itt	mi
    343a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
    343e:	b2db      	uxtbmi	r3, r3
                if(R & 0x04) { Q |= 0x20; }
    3440:	0751      	lsls	r1, r2, #29
    3442:	bf48      	it	mi
    3444:	f043 0320 	orrmi.w	r3, r3, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    3448:	3310      	adds	r3, #16
    344a:	b2db      	uxtb	r3, r3
    344c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    3450:	f10d 0736 	add.w	r7, sp, #54	; 0x36
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    3454:	f44f 7680 	mov.w	r6, #256	; 0x100
    3458:	b1b0      	cbz	r0, 3488 <L_14593_delayMicroseconds+0x31c>
    345a:	fb96 f1f0 	sdiv	r1, r6, r0
    345e:	b2c9      	uxtb	r1, r1
    3460:	1c48      	adds	r0, r1, #1
    3462:	b2c0      	uxtb	r0, r0
    3464:	fb00 3503 	mla	r5, r0, r3, r3
    3468:	122d      	asrs	r5, r5, #8
    346a:	7010      	strb	r0, [r2, #0]
    346c:	b2ec      	uxtb	r4, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    346e:	b105      	cbz	r5, 3472 <L_14593_delayMicroseconds+0x306>
    3470:	3c01      	subs	r4, #1
    3472:	f802 4c03 	strb.w	r4, [r2, #-3]
#endif
                    if(e[i]) e[i]--;
    3476:	b100      	cbz	r0, 347a <L_14593_delayMicroseconds+0x30e>
    3478:	7011      	strb	r1, [r2, #0]
    347a:	3201      	adds	r2, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    347c:	42ba      	cmp	r2, r7
    347e:	f43f ad12 	beq.w	2ea6 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x42>
    3482:	78d0      	ldrb	r0, [r2, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    3484:	2800      	cmp	r0, #0
    3486:	d1e8      	bne.n	345a <L_14593_delayMicroseconds+0x2ee>
    3488:	7010      	strb	r0, [r2, #0]
                    d[i] = scale8(Q, e[i]);
    348a:	f802 0c03 	strb.w	r0, [r2, #-3]
    348e:	e7f4      	b.n	347a <L_14593_delayMicroseconds+0x30e>
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    3490:	b662      	cpsie	i
    3492:	e61e      	b.n	30d2 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x26e>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    3494:	9807      	ldr	r0, [sp, #28]
    3496:	a909      	add	r1, sp, #36	; 0x24
    3498:	4798      	blx	r3
  }
    349a:	b011      	add	sp, #68	; 0x44
    349c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34a0:	1fff0c98 	.word	0x1fff0c98

000034a4 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:

	virtual uint16_t getMaxRefreshRate() const { return 400; }

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    34a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34a8:	b08b      	sub	sp, #44	; 0x2c
    34aa:	4604      	mov	r4, r0
    34ac:	9009      	str	r0, [sp, #36]	; 0x24
    34ae:	9108      	str	r1, [sp, #32]
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    34b0:	f002 febe 	bl	6230 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    34b4:	8c23      	ldrh	r3, [r4, #32]
    34b6:	1ac0      	subs	r0, r0, r3
    34b8:	b283      	uxth	r3, r0
    34ba:	2b31      	cmp	r3, #49	; 0x31
    34bc:	d9f8      	bls.n	34b0 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    34be:	9c08      	ldr	r4, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    34c0:	4a9e      	ldr	r2, [pc, #632]	; (373c <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x298>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    34c2:	7be0      	ldrb	r0, [r4, #15]
    34c4:	6813      	ldr	r3, [r2, #0]
    34c6:	9002      	str	r0, [sp, #8]
            e[1] = other.e[1];
    34c8:	7c20      	ldrb	r0, [r4, #16]
            e[2] = other.e[2];
    34ca:	7c65      	ldrb	r5, [r4, #17]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    34cc:	9001      	str	r0, [sp, #4]
            e[2] = other.e[2];
    34ce:	4620      	mov	r0, r4
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    34d0:	7b66      	ldrb	r6, [r4, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    34d2:	f8d4 8000 	ldr.w	r8, [r4]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    34d6:	f894 900c 	ldrb.w	r9, [r4, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
    34da:	f894 a00e 	ldrb.w	sl, [r4, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
    34de:	9503      	str	r5, [sp, #12]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    34e0:	7ca7      	ldrb	r7, [r4, #18]
        g = rhs.g;
    34e2:	7ce5      	ldrb	r5, [r4, #19]
        b = rhs.b;
    34e4:	f894 e014 	ldrb.w	lr, [r4, #20]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    34e8:	4995      	ldr	r1, [pc, #596]	; (3740 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x29c>)
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    34ea:	f994 4015 	ldrsb.w	r4, [r4, #21]
    34ee:	9404      	str	r4, [sp, #16]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    34f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
            mLenRemaining = mLen = other.mLen;
    34f4:	f8d0 b004 	ldr.w	fp, [r0, #4]
    34f8:	6013      	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    34fa:	680a      	ldr	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
    34fc:	4891      	ldr	r0, [pc, #580]	; (3744 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    34fe:	4b92      	ldr	r3, [pc, #584]	; (3748 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    3500:	f042 0201 	orr.w	r2, r2, #1
    3504:	600a      	str	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
    3506:	2200      	movs	r2, #0
    3508:	6002      	str	r2, [r0, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    350a:	681a      	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    350c:	681a      	ldr	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    350e:	9801      	ldr	r0, [sp, #4]
    3510:	f022 0204 	bic.w	r2, r2, #4
		*port = lo;
    3514:	601a      	str	r2, [r3, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    3516:	f898 4001 	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    351a:	1b86      	subs	r6, r0, r6
    351c:	fa5f fc86 	uxtb.w	ip, r6
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    3520:	2c00      	cmp	r4, #0
    3522:	f040 8258 	bne.w	39d6 <L_16834_delayMicroseconds+0x282>
    3526:	1c6b      	adds	r3, r5, #1
    3528:	9305      	str	r3, [sp, #20]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    352a:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    352c:	4b85      	ldr	r3, [pc, #532]	; (3744 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
    352e:	6819      	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    3530:	f1bb 0f00 	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3534:	f101 01e2 	add.w	r1, r1, #226	; 0xe2

		while(pixels.has(1)) {
    3538:	f340 80bc 	ble.w	36b4 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x210>
    353c:	1c7a      	adds	r2, r7, #1
    353e:	9206      	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    3540:	4881      	ldr	r0, [pc, #516]	; (3748 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
    3542:	f10e 0201 	add.w	r2, lr, #1
    3546:	9207      	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    3548:	461f      	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    354a:	9a02      	ldr	r2, [sp, #8]
    354c:	ebc9 0902 	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
    3550:	9a01      	ldr	r2, [sp, #4]
    3552:	ebcc 0c02 	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    3556:	9a03      	ldr	r2, [sp, #12]
    3558:	ebca 0a02 	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    355c:	fa5f f989 	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
    3560:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    3564:	fa5f fa8a 	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    3568:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    356a:	681a      	ldr	r2, [r3, #0]
    356c:	428a      	cmp	r2, r1
    356e:	d906      	bls.n	357e <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xda>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    3570:	681a      	ldr	r2, [r3, #0]
    3572:	f242 2574 	movw	r5, #8820	; 0x2274
    3576:	1a52      	subs	r2, r2, r1
    3578:	42aa      	cmp	r2, r5
    357a:	f200 80e7 	bhi.w	374c <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a8>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    357e:	6805      	ldr	r5, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    3580:	6806      	ldr	r6, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    3582:	f045 0504 	orr.w	r5, r5, #4
			lo = *port & ~FastPin<DATA_PIN>::mask();
    3586:	f026 0604 	bic.w	r6, r6, #4
    358a:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    358e:	681a      	ldr	r2, [r3, #0]
    3590:	428a      	cmp	r2, r1
    3592:	d3fc      	bcc.n	358e <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xea>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3594:	6839      	ldr	r1, [r7, #0]
    3596:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3598:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    359a:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    359e:	f100 8095 	bmi.w	36cc <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x228>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    35a2:	681a      	ldr	r2, [r3, #0]
    35a4:	1a8a      	subs	r2, r1, r2
    35a6:	2ac3      	cmp	r2, #195	; 0xc3
    35a8:	d8fb      	bhi.n	35a2 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xfe>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    35aa:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    35ac:	f1be 0e01 	subs.w	lr, lr, #1
    35b0:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    35b2:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    35b4:	d1eb      	bne.n	358e <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xea>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    35b6:	681a      	ldr	r2, [r3, #0]
    35b8:	4291      	cmp	r1, r2
    35ba:	d8fc      	bhi.n	35b6 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x112>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    35bc:	6839      	ldr	r1, [r7, #0]
    35be:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    35c0:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    35c2:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    35c6:	f100 808b 	bmi.w	36e0 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23c>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    35ca:	681a      	ldr	r2, [r3, #0]
    35cc:	1a8a      	subs	r2, r1, r2
    35ce:	2ac3      	cmp	r2, #195	; 0xc3
    35d0:	d8fb      	bhi.n	35ca <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x126>
    35d2:	6006      	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    35d4:	f898 4000 	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    35d8:	b13c      	cbz	r4, 35ea <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x146>
    35da:	fa84 f459 	uqadd8	r4, r4, r9
    35de:	9a06      	ldr	r2, [sp, #24]
    35e0:	b2e4      	uxtb	r4, r4
    35e2:	fb04 f402 	mul.w	r4, r4, r2
    35e6:	f3c4 2407 	ubfx	r4, r4, #8, #8
    35ea:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    35ee:	681a      	ldr	r2, [r3, #0]
    35f0:	4291      	cmp	r1, r2
    35f2:	d8fc      	bhi.n	35ee <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x14a>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    35f4:	6839      	ldr	r1, [r7, #0]
    35f6:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    35f8:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    35fa:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    35fe:	d479      	bmi.n	36f4 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x250>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3600:	681a      	ldr	r2, [r3, #0]
    3602:	1a8a      	subs	r2, r1, r2
    3604:	2ac3      	cmp	r2, #195	; 0xc3
    3606:	d8fb      	bhi.n	3600 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x15c>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3608:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    360a:	f1be 0e01 	subs.w	lr, lr, #1
    360e:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3610:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3612:	d1ec      	bne.n	35ee <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x14a>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    3614:	681a      	ldr	r2, [r3, #0]
    3616:	4291      	cmp	r1, r2
    3618:	d8fc      	bhi.n	3614 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x170>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    361a:	6839      	ldr	r1, [r7, #0]
    361c:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    361e:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3620:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    3624:	d46f      	bmi.n	3706 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x262>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3626:	681a      	ldr	r2, [r3, #0]
    3628:	1a8a      	subs	r2, r1, r2
    362a:	2ac3      	cmp	r2, #195	; 0xc3
    362c:	d8fb      	bhi.n	3626 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x182>
    362e:	6006      	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    3630:	f898 4002 	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    3634:	b13c      	cbz	r4, 3646 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a2>
    3636:	fa84 f45a 	uqadd8	r4, r4, sl
    363a:	9a07      	ldr	r2, [sp, #28]
    363c:	b2e4      	uxtb	r4, r4
    363e:	fb04 f402 	mul.w	r4, r4, r2
    3642:	f3c4 2407 	ubfx	r4, r4, #8, #8
    3646:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    364a:	681a      	ldr	r2, [r3, #0]
    364c:	428a      	cmp	r2, r1
    364e:	d3fc      	bcc.n	364a <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a6>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3650:	6839      	ldr	r1, [r7, #0]
    3652:	6005      	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3654:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3656:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    365a:	d45d      	bmi.n	3718 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x274>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    365c:	681a      	ldr	r2, [r3, #0]
    365e:	1a8a      	subs	r2, r1, r2
    3660:	2ac3      	cmp	r2, #195	; 0xc3
    3662:	d8fb      	bhi.n	365c <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1b8>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3664:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3666:	f1be 0e01 	subs.w	lr, lr, #1
    366a:	6006      	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    366c:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    366e:	d1ec      	bne.n	364a <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    3670:	681a      	ldr	r2, [r3, #0]
    3672:	4291      	cmp	r1, r2
    3674:	d8fc      	bhi.n	3670 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1cc>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3676:	6839      	ldr	r1, [r7, #0]
    3678:	6005      	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    367a:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    367c:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    3680:	d453      	bmi.n	372a <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x286>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3682:	681a      	ldr	r2, [r3, #0]
    3684:	1a8a      	subs	r2, r1, r2
    3686:	2ac3      	cmp	r2, #195	; 0xc3
    3688:	d8fb      	bhi.n	3682 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1de>
    368a:	9a04      	ldr	r2, [sp, #16]
    368c:	6006      	str	r6, [r0, #0]
    368e:	4490      	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    3690:	f10b 3bff 	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    3694:	f898 4001 	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    3698:	b13c      	cbz	r4, 36aa <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x206>
    369a:	fa84 f45c 	uqadd8	r4, r4, ip
    369e:	9a05      	ldr	r2, [sp, #20]
    36a0:	b2e4      	uxtb	r4, r4
    36a2:	fb02 f404 	mul.w	r4, r2, r4
    36a6:	f3c4 2407 	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    36aa:	b662      	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    36ac:	f1bb 0f00 	cmp.w	fp, #0
    36b0:	f47f af4b 	bne.w	354a <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xa6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    36b4:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    36b6:	4b23      	ldr	r3, [pc, #140]	; (3744 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
    36b8:	681b      	ldr	r3, [r3, #0]

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
    36ba:	2b00      	cmp	r3, #0
    36bc:	d047      	beq.n	374e <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2aa>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    36be:	f002 fdb7 	bl	6230 <micros>
    36c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36c4:	8418      	strh	r0, [r3, #32]
      sei(); delayMicroseconds(WAIT_TIME); cli();
      showRGBInternal(pixels);
    }
    mWait.mark();
  }
    36c6:	b00b      	add	sp, #44	; 0x2c
    36c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    36cc:	681a      	ldr	r2, [r3, #0]
    36ce:	1a8a      	subs	r2, r1, r2
    36d0:	2a52      	cmp	r2, #82	; 0x52
    36d2:	f67f af6a 	bls.w	35aa <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x106>
    36d6:	681a      	ldr	r2, [r3, #0]
    36d8:	1a8a      	subs	r2, r1, r2
    36da:	2a52      	cmp	r2, #82	; 0x52
    36dc:	d8f6      	bhi.n	36cc <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x228>
    36de:	e764      	b.n	35aa <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x106>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    36e0:	681a      	ldr	r2, [r3, #0]
    36e2:	1a8a      	subs	r2, r1, r2
    36e4:	2a52      	cmp	r2, #82	; 0x52
    36e6:	f67f af74 	bls.w	35d2 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12e>
    36ea:	681a      	ldr	r2, [r3, #0]
    36ec:	1a8a      	subs	r2, r1, r2
    36ee:	2a52      	cmp	r2, #82	; 0x52
    36f0:	d8f6      	bhi.n	36e0 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23c>
    36f2:	e76e      	b.n	35d2 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12e>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    36f4:	681a      	ldr	r2, [r3, #0]
    36f6:	1a8a      	subs	r2, r1, r2
    36f8:	2a52      	cmp	r2, #82	; 0x52
    36fa:	d985      	bls.n	3608 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x164>
    36fc:	681a      	ldr	r2, [r3, #0]
    36fe:	1a8a      	subs	r2, r1, r2
    3700:	2a52      	cmp	r2, #82	; 0x52
    3702:	d8f7      	bhi.n	36f4 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x250>
    3704:	e780      	b.n	3608 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x164>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    3706:	681a      	ldr	r2, [r3, #0]
    3708:	1a8a      	subs	r2, r1, r2
    370a:	2a52      	cmp	r2, #82	; 0x52
    370c:	d98f      	bls.n	362e <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x18a>
    370e:	681a      	ldr	r2, [r3, #0]
    3710:	1a8a      	subs	r2, r1, r2
    3712:	2a52      	cmp	r2, #82	; 0x52
    3714:	d8f7      	bhi.n	3706 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x262>
    3716:	e78a      	b.n	362e <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x18a>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    3718:	681a      	ldr	r2, [r3, #0]
    371a:	1a8a      	subs	r2, r1, r2
    371c:	2a52      	cmp	r2, #82	; 0x52
    371e:	d9a1      	bls.n	3664 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1c0>
    3720:	681a      	ldr	r2, [r3, #0]
    3722:	1a8a      	subs	r2, r1, r2
    3724:	2a52      	cmp	r2, #82	; 0x52
    3726:	d8f7      	bhi.n	3718 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x274>
    3728:	e79c      	b.n	3664 <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1c0>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    372a:	681a      	ldr	r2, [r3, #0]
    372c:	1a8a      	subs	r2, r1, r2
    372e:	2a52      	cmp	r2, #82	; 0x52
    3730:	d9ab      	bls.n	368a <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e6>
    3732:	681a      	ldr	r2, [r3, #0]
    3734:	1a8a      	subs	r2, r1, r2
    3736:	2a52      	cmp	r2, #82	; 0x52
    3738:	d8f7      	bhi.n	372a <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x286>
    373a:	e7a6      	b.n	368a <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e6>
    373c:	e000edfc 	.word	0xe000edfc
    3740:	e0001000 	.word	0xe0001000
    3744:	e0001004 	.word	0xe0001004
    3748:	400ff0c0 	.word	0x400ff0c0
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    374c:	b662      	cpsie	i
protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
      sei(); delayMicroseconds(WAIT_TIME); cli();
    374e:	b662      	cpsie	i
    3750:	f640 33b8 	movw	r3, #3000	; 0xbb8

00003754 <L_16834_delayMicroseconds>:
    3754:	3b01      	subs	r3, #1
    3756:	d1fd      	bne.n	3754 <L_16834_delayMicroseconds>
    3758:	b672      	cpsid	i
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    375a:	9f08      	ldr	r7, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    375c:	4aa5      	ldr	r2, [pc, #660]	; (39f4 <L_16834_delayMicroseconds+0x2a0>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    375e:	7bf9      	ldrb	r1, [r7, #15]
    3760:	6813      	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    3762:	7c7e      	ldrb	r6, [r7, #17]

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    3764:	9102      	str	r1, [sp, #8]
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    3766:	463c      	mov	r4, r7
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    3768:	7c39      	ldrb	r1, [r7, #16]
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    376a:	f994 e015 	ldrsb.w	lr, [r4, #21]
            mLenRemaining = mLen = other.mLen;
    376e:	9c08      	ldr	r4, [sp, #32]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    3770:	48a1      	ldr	r0, [pc, #644]	; (39f8 <L_16834_delayMicroseconds+0x2a4>)
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    3772:	7b7d      	ldrb	r5, [r7, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    3774:	9101      	str	r1, [sp, #4]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    3776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
            e[2] = other.e[2];
            mData = other.mData;
    377a:	f8d7 8000 	ldr.w	r8, [r7]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    377e:	f897 a00c 	ldrb.w	sl, [r7, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
    3782:	f897 900e 	ldrb.w	r9, [r7, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
    3786:	9603      	str	r6, [sp, #12]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3788:	7cf9      	ldrb	r1, [r7, #19]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    378a:	7cbe      	ldrb	r6, [r7, #18]
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    378c:	f8cd e010 	str.w	lr, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    3790:	7d3f      	ldrb	r7, [r7, #20]
            mLenRemaining = mLen = other.mLen;
    3792:	f8d4 b004 	ldr.w	fp, [r4, #4]
    3796:	6013      	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    3798:	6802      	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    379a:	4c98      	ldr	r4, [pc, #608]	; (39fc <L_16834_delayMicroseconds+0x2a8>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    379c:	4b98      	ldr	r3, [pc, #608]	; (3a00 <L_16834_delayMicroseconds+0x2ac>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    379e:	f042 0201 	orr.w	r2, r2, #1
    37a2:	6002      	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    37a4:	2200      	movs	r2, #0
    37a6:	6022      	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    37a8:	681a      	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    37aa:	681a      	ldr	r2, [r3, #0]
    37ac:	f022 0204 	bic.w	r2, r2, #4
		*port = lo;
    37b0:	601a      	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    37b2:	9b01      	ldr	r3, [sp, #4]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    37b4:	f898 4001 	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    37b8:	1b5d      	subs	r5, r3, r5
    37ba:	fa5f fc85 	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    37be:	2c00      	cmp	r4, #0
    37c0:	f000 8113 	beq.w	39ea <L_16834_delayMicroseconds+0x296>
    37c4:	fa84 f45c 	uqadd8	r4, r4, ip
    37c8:	b2e3      	uxtb	r3, r4
    37ca:	1c4a      	adds	r2, r1, #1
    37cc:	fb02 f303 	mul.w	r3, r2, r3
    37d0:	9205      	str	r2, [sp, #20]
    37d2:	f3c3 2407 	ubfx	r4, r3, #8, #8

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    37d6:	b672      	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    37d8:	4b88      	ldr	r3, [pc, #544]	; (39fc <L_16834_delayMicroseconds+0x2a8>)
    37da:	6819      	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    37dc:	f1bb 0f00 	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    37e0:	f101 01e2 	add.w	r1, r1, #226	; 0xe2

		while(pixels.has(1)) {
    37e4:	f340 80bb 	ble.w	395e <L_16834_delayMicroseconds+0x20a>
    37e8:	1c72      	adds	r2, r6, #1
    37ea:	9206      	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    37ec:	4884      	ldr	r0, [pc, #528]	; (3a00 <L_16834_delayMicroseconds+0x2ac>)
    37ee:	1c7a      	adds	r2, r7, #1
    37f0:	9207      	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    37f2:	461f      	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    37f4:	9a02      	ldr	r2, [sp, #8]
    37f6:	ebca 0a02 	rsb	sl, sl, r2
                d[1] = e[1] - d[1];
    37fa:	9a01      	ldr	r2, [sp, #4]
    37fc:	ebcc 0c02 	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    3800:	9a03      	ldr	r2, [sp, #12]
    3802:	ebc9 0902 	rsb	r9, r9, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    3806:	fa5f fa8a 	uxtb.w	sl, sl
                d[1] = e[1] - d[1];
    380a:	fa5f fc8c 	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    380e:	fa5f f989 	uxtb.w	r9, r9
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    3812:	b672      	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    3814:	681a      	ldr	r2, [r3, #0]
    3816:	428a      	cmp	r2, r1
    3818:	d906      	bls.n	3828 <L_16834_delayMicroseconds+0xd4>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    381a:	681a      	ldr	r2, [r3, #0]
    381c:	f242 2574 	movw	r5, #8820	; 0x2274
    3820:	1a52      	subs	r2, r2, r1
    3822:	42aa      	cmp	r2, r5
    3824:	f200 80e4 	bhi.w	39f0 <L_16834_delayMicroseconds+0x29c>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    3828:	6806      	ldr	r6, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    382a:	6805      	ldr	r5, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    382c:	f046 0604 	orr.w	r6, r6, #4
			lo = *port & ~FastPin<DATA_PIN>::mask();
    3830:	f025 0504 	bic.w	r5, r5, #4
    3834:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    3838:	681a      	ldr	r2, [r3, #0]
    383a:	428a      	cmp	r2, r1
    383c:	d3fc      	bcc.n	3838 <L_16834_delayMicroseconds+0xe4>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    383e:	6839      	ldr	r1, [r7, #0]
    3840:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3842:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3844:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3848:	f100 808d 	bmi.w	3966 <L_16834_delayMicroseconds+0x212>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    384c:	681a      	ldr	r2, [r3, #0]
    384e:	1a8a      	subs	r2, r1, r2
    3850:	2ac3      	cmp	r2, #195	; 0xc3
    3852:	d8fb      	bhi.n	384c <L_16834_delayMicroseconds+0xf8>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3854:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3856:	f1be 0e01 	subs.w	lr, lr, #1
    385a:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    385c:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    385e:	d1eb      	bne.n	3838 <L_16834_delayMicroseconds+0xe4>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    3860:	681a      	ldr	r2, [r3, #0]
    3862:	4291      	cmp	r1, r2
    3864:	d8fc      	bhi.n	3860 <L_16834_delayMicroseconds+0x10c>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3866:	6839      	ldr	r1, [r7, #0]
    3868:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    386a:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    386c:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    3870:	f100 8083 	bmi.w	397a <L_16834_delayMicroseconds+0x226>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3874:	681a      	ldr	r2, [r3, #0]
    3876:	1a8a      	subs	r2, r1, r2
    3878:	2ac3      	cmp	r2, #195	; 0xc3
    387a:	d8fb      	bhi.n	3874 <L_16834_delayMicroseconds+0x120>
    387c:	6005      	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    387e:	f898 4000 	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    3882:	b13c      	cbz	r4, 3894 <L_16834_delayMicroseconds+0x140>
    3884:	fa84 f45a 	uqadd8	r4, r4, sl
    3888:	9a06      	ldr	r2, [sp, #24]
    388a:	b2e4      	uxtb	r4, r4
    388c:	fb04 f402 	mul.w	r4, r4, r2
    3890:	f3c4 2407 	ubfx	r4, r4, #8, #8
    3894:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    3898:	681a      	ldr	r2, [r3, #0]
    389a:	428a      	cmp	r2, r1
    389c:	d3fc      	bcc.n	3898 <L_16834_delayMicroseconds+0x144>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    389e:	6839      	ldr	r1, [r7, #0]
    38a0:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    38a2:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    38a4:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    38a8:	d471      	bmi.n	398e <L_16834_delayMicroseconds+0x23a>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    38aa:	681a      	ldr	r2, [r3, #0]
    38ac:	1a8a      	subs	r2, r1, r2
    38ae:	2ac3      	cmp	r2, #195	; 0xc3
    38b0:	d8fb      	bhi.n	38aa <L_16834_delayMicroseconds+0x156>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    38b2:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    38b4:	f1be 0e01 	subs.w	lr, lr, #1
    38b8:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    38ba:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    38bc:	d1ec      	bne.n	3898 <L_16834_delayMicroseconds+0x144>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    38be:	681a      	ldr	r2, [r3, #0]
    38c0:	4291      	cmp	r1, r2
    38c2:	d8fc      	bhi.n	38be <L_16834_delayMicroseconds+0x16a>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    38c4:	6839      	ldr	r1, [r7, #0]
    38c6:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    38c8:	0624      	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    38ca:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    38ce:	d467      	bmi.n	39a0 <L_16834_delayMicroseconds+0x24c>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    38d0:	681a      	ldr	r2, [r3, #0]
    38d2:	1a8a      	subs	r2, r1, r2
    38d4:	2ac3      	cmp	r2, #195	; 0xc3
    38d6:	d8fb      	bhi.n	38d0 <L_16834_delayMicroseconds+0x17c>
    38d8:	6005      	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    38da:	f898 4002 	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    38de:	b13c      	cbz	r4, 38f0 <L_16834_delayMicroseconds+0x19c>
    38e0:	fa84 f459 	uqadd8	r4, r4, r9
    38e4:	9a07      	ldr	r2, [sp, #28]
    38e6:	b2e4      	uxtb	r4, r4
    38e8:	fb04 f402 	mul.w	r4, r4, r2
    38ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
    38f0:	f04f 0e07 	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    38f4:	681a      	ldr	r2, [r3, #0]
    38f6:	428a      	cmp	r2, r1
    38f8:	d3fc      	bcc.n	38f4 <L_16834_delayMicroseconds+0x1a0>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    38fa:	6839      	ldr	r1, [r7, #0]
    38fc:	6006      	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    38fe:	0622      	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3900:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    3904:	d455      	bmi.n	39b2 <L_16834_delayMicroseconds+0x25e>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    3906:	681a      	ldr	r2, [r3, #0]
    3908:	1a8a      	subs	r2, r1, r2
    390a:	2ac3      	cmp	r2, #195	; 0xc3
    390c:	d8fb      	bhi.n	3906 <L_16834_delayMicroseconds+0x1b2>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    390e:	0064      	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3910:	f1be 0e01 	subs.w	lr, lr, #1
    3914:	6005      	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    3916:	b2e4      	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    3918:	d1ec      	bne.n	38f4 <L_16834_delayMicroseconds+0x1a0>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    391a:	681a      	ldr	r2, [r3, #0]
    391c:	4291      	cmp	r1, r2
    391e:	d8fc      	bhi.n	391a <L_16834_delayMicroseconds+0x1c6>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3920:	6839      	ldr	r1, [r7, #0]
    3922:	6006      	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    3924:	0622      	lsls	r2, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    3926:	f101 01e2 	add.w	r1, r1, #226	; 0xe2
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    392a:	d44b      	bmi.n	39c4 <L_16834_delayMicroseconds+0x270>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    392c:	681a      	ldr	r2, [r3, #0]
    392e:	1a8a      	subs	r2, r1, r2
    3930:	2ac3      	cmp	r2, #195	; 0xc3
    3932:	d8fb      	bhi.n	392c <L_16834_delayMicroseconds+0x1d8>
    3934:	9a04      	ldr	r2, [sp, #16]
    3936:	6005      	str	r5, [r0, #0]
    3938:	4490      	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    393a:	f10b 3bff 	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    393e:	f898 4001 	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    3942:	b13c      	cbz	r4, 3954 <L_16834_delayMicroseconds+0x200>
    3944:	fa84 f45c 	uqadd8	r4, r4, ip
    3948:	9a05      	ldr	r2, [sp, #20]
    394a:	b2e4      	uxtb	r4, r4
    394c:	fb02 f404 	mul.w	r4, r2, r4
    3950:	f3c4 2407 	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    3954:	b662      	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    3956:	f1bb 0f00 	cmp.w	fp, #0
    395a:	f47f af4b 	bne.w	37f4 <L_16834_delayMicroseconds+0xa0>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    395e:	b662      	cpsie	i
		return ARM_DWT_CYCCNT;
    3960:	4b26      	ldr	r3, [pc, #152]	; (39fc <L_16834_delayMicroseconds+0x2a8>)
    3962:	681b      	ldr	r3, [r3, #0]
    3964:	e6ab      	b.n	36be <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x21a>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    3966:	681a      	ldr	r2, [r3, #0]
    3968:	1a8a      	subs	r2, r1, r2
    396a:	2a52      	cmp	r2, #82	; 0x52
    396c:	f67f af72 	bls.w	3854 <L_16834_delayMicroseconds+0x100>
    3970:	681a      	ldr	r2, [r3, #0]
    3972:	1a8a      	subs	r2, r1, r2
    3974:	2a52      	cmp	r2, #82	; 0x52
    3976:	d8f6      	bhi.n	3966 <L_16834_delayMicroseconds+0x212>
    3978:	e76c      	b.n	3854 <L_16834_delayMicroseconds+0x100>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    397a:	681a      	ldr	r2, [r3, #0]
    397c:	1a8a      	subs	r2, r1, r2
    397e:	2a52      	cmp	r2, #82	; 0x52
    3980:	f67f af7c 	bls.w	387c <L_16834_delayMicroseconds+0x128>
    3984:	681a      	ldr	r2, [r3, #0]
    3986:	1a8a      	subs	r2, r1, r2
    3988:	2a52      	cmp	r2, #82	; 0x52
    398a:	d8f6      	bhi.n	397a <L_16834_delayMicroseconds+0x226>
    398c:	e776      	b.n	387c <L_16834_delayMicroseconds+0x128>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    398e:	681a      	ldr	r2, [r3, #0]
    3990:	1a8a      	subs	r2, r1, r2
    3992:	2a52      	cmp	r2, #82	; 0x52
    3994:	d98d      	bls.n	38b2 <L_16834_delayMicroseconds+0x15e>
    3996:	681a      	ldr	r2, [r3, #0]
    3998:	1a8a      	subs	r2, r1, r2
    399a:	2a52      	cmp	r2, #82	; 0x52
    399c:	d8f7      	bhi.n	398e <L_16834_delayMicroseconds+0x23a>
    399e:	e788      	b.n	38b2 <L_16834_delayMicroseconds+0x15e>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    39a0:	681a      	ldr	r2, [r3, #0]
    39a2:	1a8a      	subs	r2, r1, r2
    39a4:	2a52      	cmp	r2, #82	; 0x52
    39a6:	d997      	bls.n	38d8 <L_16834_delayMicroseconds+0x184>
    39a8:	681a      	ldr	r2, [r3, #0]
    39aa:	1a8a      	subs	r2, r1, r2
    39ac:	2a52      	cmp	r2, #82	; 0x52
    39ae:	d8f7      	bhi.n	39a0 <L_16834_delayMicroseconds+0x24c>
    39b0:	e792      	b.n	38d8 <L_16834_delayMicroseconds+0x184>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    39b2:	681a      	ldr	r2, [r3, #0]
    39b4:	1a8a      	subs	r2, r1, r2
    39b6:	2a52      	cmp	r2, #82	; 0x52
    39b8:	d9a9      	bls.n	390e <L_16834_delayMicroseconds+0x1ba>
    39ba:	681a      	ldr	r2, [r3, #0]
    39bc:	1a8a      	subs	r2, r1, r2
    39be:	2a52      	cmp	r2, #82	; 0x52
    39c0:	d8f7      	bhi.n	39b2 <L_16834_delayMicroseconds+0x25e>
    39c2:	e7a4      	b.n	390e <L_16834_delayMicroseconds+0x1ba>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    39c4:	681a      	ldr	r2, [r3, #0]
    39c6:	1a8a      	subs	r2, r1, r2
    39c8:	2a52      	cmp	r2, #82	; 0x52
    39ca:	d9b3      	bls.n	3934 <L_16834_delayMicroseconds+0x1e0>
    39cc:	681a      	ldr	r2, [r3, #0]
    39ce:	1a8a      	subs	r2, r1, r2
    39d0:	2a52      	cmp	r2, #82	; 0x52
    39d2:	d8f7      	bhi.n	39c4 <L_16834_delayMicroseconds+0x270>
    39d4:	e7ae      	b.n	3934 <L_16834_delayMicroseconds+0x1e0>
    39d6:	fa84 f45c 	uqadd8	r4, r4, ip
    39da:	b2e3      	uxtb	r3, r4
    39dc:	1c6a      	adds	r2, r5, #1
    39de:	fb02 f303 	mul.w	r3, r2, r3
    39e2:	9205      	str	r2, [sp, #20]
    39e4:	f3c3 2407 	ubfx	r4, r3, #8, #8
    39e8:	e59f      	b.n	352a <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x86>
    39ea:	1c4b      	adds	r3, r1, #1
    39ec:	9305      	str	r3, [sp, #20]
    39ee:	e6f2      	b.n	37d6 <L_16834_delayMicroseconds+0x82>
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    39f0:	b662      	cpsie	i
    39f2:	e664      	b.n	36be <ClocklessController<7, 45, 113, 68, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x21a>
    39f4:	e000edfc 	.word	0xe000edfc
    39f8:	e0001000 	.word	0xe0001000
    39fc:	e0001004 	.word	0xe0001004
    3a00:	400ff0c0 	.word	0x400ff0c0

00003a04 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
    3a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a08:	780d      	ldrb	r5, [r1, #0]
    3a0a:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    3a0c:	784d      	ldrb	r5, [r1, #1]
    3a0e:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    3a10:	7889      	ldrb	r1, [r1, #2]
    3a12:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a14:	7811      	ldrb	r1, [r2, #0]
    3a16:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
    3a18:	7851      	ldrb	r1, [r2, #1]
    3a1a:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
    3a1c:	7892      	ldrb	r2, [r2, #2]
    3a1e:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a20:	781a      	ldrb	r2, [r3, #0]
    3a22:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
    3a24:	785a      	ldrb	r2, [r3, #1]
    3a26:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
    3a28:	789b      	ldrb	r3, [r3, #2]
    3a2a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    3a2e:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a30:	f89a b000 	ldrb.w	fp, [sl]
    3a34:	f880 b009 	strb.w	fp, [r0, #9]
    3a38:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    3a3c:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
    3a40:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    3a44:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3a46:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    3a48:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3a4a:	9911      	ldr	r1, [sp, #68]	; 0x44
    3a4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
    3a50:	f89a b001 	ldrb.w	fp, [sl, #1]
    3a54:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
    3a58:	f89a a002 	ldrb.w	sl, [sl, #2]
    3a5c:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a60:	f899 a000 	ldrb.w	sl, [r9]
    3a64:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
    3a68:	f899 a001 	ldrb.w	sl, [r9, #1]
    3a6c:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
    3a70:	f899 9002 	ldrb.w	r9, [r9, #2]
    3a74:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a78:	f898 9000 	ldrb.w	r9, [r8]
    3a7c:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
    3a80:	f898 9001 	ldrb.w	r9, [r8, #1]
    3a84:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
    3a88:	f898 8002 	ldrb.w	r8, [r8, #2]
    3a8c:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a90:	f89c 8000 	ldrb.w	r8, [ip]
    3a94:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
    3a98:	f89c 8001 	ldrb.w	r8, [ip, #1]
    3a9c:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
    3aa0:	f89c c002 	ldrb.w	ip, [ip, #2]
    3aa4:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3aa8:	f89e c000 	ldrb.w	ip, [lr]
    3aac:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
    3ab0:	f89e c001 	ldrb.w	ip, [lr, #1]
    3ab4:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
    3ab8:	f89e e002 	ldrb.w	lr, [lr, #2]
    3abc:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ac0:	f897 e000 	ldrb.w	lr, [r7]
    3ac4:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
    3ac8:	f897 e001 	ldrb.w	lr, [r7, #1]
    3acc:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
    3ad0:	78bf      	ldrb	r7, [r7, #2]
    3ad2:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ad4:	7837      	ldrb	r7, [r6, #0]
    3ad6:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
    3ad8:	7877      	ldrb	r7, [r6, #1]
    3ada:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
    3adc:	78b6      	ldrb	r6, [r6, #2]
    3ade:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ae0:	782e      	ldrb	r6, [r5, #0]
    3ae2:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
    3ae4:	786e      	ldrb	r6, [r5, #1]
    3ae6:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
    3ae8:	78ad      	ldrb	r5, [r5, #2]
    3aea:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3aee:	780d      	ldrb	r5, [r1, #0]
    3af0:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
    3af4:	784d      	ldrb	r5, [r1, #1]
    3af6:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
    3afa:	7889      	ldrb	r1, [r1, #2]
    3afc:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b00:	7811      	ldrb	r1, [r2, #0]
    3b02:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
    3b06:	7851      	ldrb	r1, [r2, #1]
    3b08:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
    3b0c:	7892      	ldrb	r2, [r2, #2]
    3b0e:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3b14:	7812      	ldrb	r2, [r2, #0]
    3b16:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
    3b1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3b1c:	7852      	ldrb	r2, [r2, #1]
    3b1e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
    3b22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3b24:	7892      	ldrb	r2, [r2, #2]
    3b26:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3b2c:	7812      	ldrb	r2, [r2, #0]
    3b2e:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
    3b32:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3b34:	7852      	ldrb	r2, [r2, #1]
    3b36:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
    3b3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3b3c:	7892      	ldrb	r2, [r2, #2]
    3b3e:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b42:	781a      	ldrb	r2, [r3, #0]
    3b44:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
    3b48:	785a      	ldrb	r2, [r3, #1]
    3b4a:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
    3b4e:	789b      	ldrb	r3, [r3, #2]
    3b50:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
    3b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003b58 <updatePaletteIndex(CRGBPalette16)>:
// Count of how many cpt-city gradients are defined:
const uint8_t g_gradient_palette_count =
  sizeof( g_gradient_palettes) / sizeof( TProgmemRGBGradientPalettePtr );

// Find index of current (target) palette
void updatePaletteIndex(CRGBPalette16 pal){
    3b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b5c:	b09b      	sub	sp, #108	; 0x6c
    3b5e:	4b3f      	ldr	r3, [pc, #252]	; (3c5c <updatePaletteIndex(CRGBPalette16)+0x104>)
    3b60:	9309      	str	r3, [sp, #36]	; 0x24
    3b62:	1e43      	subs	r3, r0, #1
    3b64:	930a      	str	r3, [sp, #40]	; 0x28
    3b66:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    3b6a:	930b      	str	r3, [sp, #44]	; 0x2c
    3b6c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 3c64 <updatePaletteIndex(CRGBPalette16)+0x10c>
	for (int i = 0; i < g_gradient_palette_count; i++){
    3b70:	2300      	movs	r3, #0
    3b72:	9308      	str	r3, [sp, #32]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    3b74:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    3b76:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    3b7a:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3b7c:	3701      	adds	r7, #1
        } while ( u.index != 255);
    3b7e:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3b80:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    3b82:	d1f8      	bne.n	3b76 <updatePaletteIndex(CRGBPalette16)+0x1e>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3b84:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    3b88:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3b8a:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3b8e:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    3b92:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3b94:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3b96:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    3b9a:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    3b9e:	2400      	movs	r4, #0
    3ba0:	46c8      	mov	r8, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3ba2:	f858 5f04 	ldr.w	r5, [r8, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3ba6:	f3c5 2707 	ubfx	r7, r5, #8, #8
    3baa:	f3c5 4607 	ubfx	r6, r5, #16, #8
    3bae:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    3bb0:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3bb4:	9104      	str	r1, [sp, #16]
    3bb6:	b2f1      	uxtb	r1, r6
    3bb8:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    3bba:	fa5f f18c 	uxtb.w	r1, ip
    3bbe:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    3bc0:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    3bc2:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3bc4:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3bc6:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3bca:	aa0d      	add	r2, sp, #52	; 0x34
    3bcc:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    3bce:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3bd2:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3bd6:	d80c      	bhi.n	3bf2 <updatePaletteIndex(CRGBPalette16)+0x9a>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    3bd8:	9906      	ldr	r1, [sp, #24]
    3bda:	458c      	cmp	ip, r1
    3bdc:	dc07      	bgt.n	3bee <updatePaletteIndex(CRGBPalette16)+0x96>
    3bde:	290f      	cmp	r1, #15
    3be0:	d005      	beq.n	3bee <updatePaletteIndex(CRGBPalette16)+0x96>
                    istart8 = lastSlotUsed + 1;
    3be2:	3101      	adds	r1, #1
    3be4:	b2c9      	uxtb	r1, r1
    3be6:	428b      	cmp	r3, r1
    3be8:	9103      	str	r1, [sp, #12]
    3bea:	bf38      	it	cc
    3bec:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    3bee:	b259      	sxtb	r1, r3
    3bf0:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3bf2:	a90c      	add	r1, sp, #48	; 0x30
    3bf4:	9100      	str	r1, [sp, #0]
    3bf6:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3bf8:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
    3bfc:	f88d a035 	strb.w	sl, [sp, #53]	; 0x35
        b = rhs.b;
    3c00:	f88d e036 	strb.w	lr, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c04:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
    3c08:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
    3c0c:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
    3c10:	f001 fd44 	bl	569c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3c14:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c16:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    3c1a:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    3c1e:	46ce      	mov	lr, r9
    3c20:	d1bf      	bne.n	3ba2 <updatePaletteIndex(CRGBPalette16)+0x4a>
    3c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3c26:	aa0e      	add	r2, sp, #56	; 0x38
    3c28:	e001      	b.n	3c2e <updatePaletteIndex(CRGBPalette16)+0xd6>
    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
    3c2a:	42a3      	cmp	r3, r4
    3c2c:	d00f      	beq.n	3c4e <updatePaletteIndex(CRGBPalette16)+0xf6>
            if( *p != *q) return false;
    3c2e:	f812 1b01 	ldrb.w	r1, [r2], #1
    3c32:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    3c36:	4288      	cmp	r0, r1
    3c38:	d0f7      	beq.n	3c2a <updatePaletteIndex(CRGBPalette16)+0xd2>
    3c3a:	9b08      	ldr	r3, [sp, #32]
    3c3c:	3301      	adds	r3, #1
    3c3e:	2b5d      	cmp	r3, #93	; 0x5d
    3c40:	9308      	str	r3, [sp, #32]
    3c42:	d008      	beq.n	3c56 <updatePaletteIndex(CRGBPalette16)+0xfe>
    3c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c46:	f853 9f04 	ldr.w	r9, [r3, #4]!
    3c4a:	9309      	str	r3, [sp, #36]	; 0x24
    3c4c:	e792      	b.n	3b74 <updatePaletteIndex(CRGBPalette16)+0x1c>
		if (pal == g_gradient_palettes[i]){
			palette_index = i;
    3c4e:	4b04      	ldr	r3, [pc, #16]	; (3c60 <updatePaletteIndex(CRGBPalette16)+0x108>)
    3c50:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3c54:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
    3c56:	b01b      	add	sp, #108	; 0x6c
    3c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c5c:	00008ec0 	.word	0x00008ec0
    3c60:	1fff12be 	.word	0x1fff12be
    3c64:	00009b6c 	.word	0x00009b6c

00003c68 <prepare_for_explosion()>:
float spark_fade[MAX_NUMBER_OF_SPARKS];
uint8_t firework_bg_fade = 128;
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
    3c68:	b5f0      	push	{r4, r5, r6, r7, lr}
	random16_add_entropy(analogRead(2));
    3c6a:	2002      	movs	r0, #2
float spark_fade[MAX_NUMBER_OF_SPARKS];
uint8_t firework_bg_fade = 128;
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
    3c6c:	b083      	sub	sp, #12
	random16_add_entropy(analogRead(2));
    3c6e:	f002 f99f 	bl	5fb0 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    3c72:	491a      	ldr	r1, [pc, #104]	; (3cdc <prepare_for_explosion()+0x74>)
	firework_position = random8(20,NUM_LEDS - 10);
    3c74:	4a1a      	ldr	r2, [pc, #104]	; (3ce0 <prepare_for_explosion()+0x78>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c76:	880b      	ldrh	r3, [r1, #0]
	current_stage = FADEUP;
	firework_hue = random8();
	firework_bri = 0;
	exploded = false;
    3c78:	f8df e078 	ldr.w	lr, [pc, #120]	; 3cf4 <prepare_for_explosion()+0x8c>

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
	firework_hue = random8();
    3c7c:	4e19      	ldr	r6, [pc, #100]	; (3ce4 <prepare_for_explosion()+0x7c>)
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
    3c7e:	4d1a      	ldr	r5, [pc, #104]	; (3ce8 <prepare_for_explosion()+0x80>)
	firework_hue = random8();
	firework_bri = 0;
    3c80:	4c1a      	ldr	r4, [pc, #104]	; (3cec <prepare_for_explosion()+0x84>)
    3c82:	4418      	add	r0, r3
    3c84:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    3c88:	f243 6719 	movw	r7, #13849	; 0x3619
    3c8c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3c90:	4438      	add	r0, r7
    3c92:	b280      	uxth	r0, r0
    3c94:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    3c98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c9c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
    3ca0:	b2c0      	uxtb	r0, r0
    3ca2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ca6:	443b      	add	r3, r7
    3ca8:	1200      	asrs	r0, r0, #8
    3caa:	b29b      	uxth	r3, r3
    3cac:	3014      	adds	r0, #20
	current_stage = FADEUP;
    3cae:	2700      	movs	r7, #0
    3cb0:	800b      	strh	r3, [r1, #0]
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
    3cb2:	7010      	strb	r0, [r2, #0]
	current_stage = FADEUP;
	firework_hue = random8();
    3cb4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	firework_bri = 0;
	exploded = false;
	fill_solid(leds, NUM_LEDS, CRGB::Black);
    3cb8:	aa01      	add	r2, sp, #4
    3cba:	2123      	movs	r1, #35	; 0x23
    3cbc:	480c      	ldr	r0, [pc, #48]	; (3cf0 <prepare_for_explosion()+0x88>)

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
	firework_hue = random8();
    3cbe:	7033      	strb	r3, [r6, #0]
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
    3cc0:	702f      	strb	r7, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3cc2:	f88d 7004 	strb.w	r7, [sp, #4]
    3cc6:	f88d 7005 	strb.w	r7, [sp, #5]
    3cca:	f88d 7006 	strb.w	r7, [sp, #6]
	firework_hue = random8();
	firework_bri = 0;
    3cce:	7027      	strb	r7, [r4, #0]
	exploded = false;
    3cd0:	f88e 7000 	strb.w	r7, [lr]
	fill_solid(leds, NUM_LEDS, CRGB::Black);
    3cd4:	f001 fcb2 	bl	563c <fill_solid(CRGB*, int, CRGB const&)>
}
    3cd8:	b003      	add	sp, #12
    3cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cdc:	1fff0792 	.word	0x1fff0792
    3ce0:	1fff1135 	.word	0x1fff1135
    3ce4:	1fff112e 	.word	0x1fff112e
    3ce8:	1fff0dc9 	.word	0x1fff0dc9
    3cec:	1fff1061 	.word	0x1fff1061
    3cf0:	1fff0dcc 	.word	0x1fff0dcc
    3cf4:	1fff0cc8 	.word	0x1fff0cc8

00003cf8 <fadeup()>:

void fadeup() {
    3cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (exploded) {
    3cfc:	4c55      	ldr	r4, [pc, #340]	; (3e54 <fadeup()+0x15c>)
    3cfe:	7823      	ldrb	r3, [r4, #0]
	firework_bri = 0;
	exploded = false;
	fill_solid(leds, NUM_LEDS, CRGB::Black);
}

void fadeup() {
    3d00:	b083      	sub	sp, #12
	if (exploded) {
    3d02:	2b00      	cmp	r3, #0
    3d04:	f000 8086 	beq.w	3e14 <fadeup()+0x11c>
    3d08:	f8df 917c 	ldr.w	r9, [pc, #380]	; 3e88 <fadeup()+0x190>
    3d0c:	4a52      	ldr	r2, [pc, #328]	; (3e58 <fadeup()+0x160>)
    3d0e:	f8b9 3000 	ldrh.w	r3, [r9]
    3d12:	f892 8000 	ldrb.w	r8, [r2]
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    3d16:	4951      	ldr	r1, [pc, #324]	; (3e5c <fadeup()+0x164>)
	fill_solid(leds, NUM_LEDS, CRGB::Black);
}

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
    3d18:	4a51      	ldr	r2, [pc, #324]	; (3e60 <fadeup()+0x168>)
    3d1a:	4f52      	ldr	r7, [pc, #328]	; (3e64 <fadeup()+0x16c>)
    3d1c:	4e52      	ldr	r6, [pc, #328]	; (3e68 <fadeup()+0x170>)
    3d1e:	4d53      	ldr	r5, [pc, #332]	; (3e6c <fadeup()+0x174>)
    3d20:	4c53      	ldr	r4, [pc, #332]	; (3e70 <fadeup()+0x178>)
    3d22:	4854      	ldr	r0, [pc, #336]	; (3e74 <fadeup()+0x17c>)
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    3d24:	ed9f 6a54 	vldr	s12, [pc, #336]	; 3e78 <fadeup()+0x180>
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
			spark_bri[i] = 255;
    3d28:	f8df b160 	ldr.w	fp, [pc, #352]	; 3e8c <fadeup()+0x194>
    3d2c:	eb03 2a43 	add.w	sl, r3, r3, lsl #9
    3d30:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    3d34:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    3d38:	f10a 0a19 	add.w	sl, sl, #25
    3d3c:	fa1f fa8a 	uxth.w	sl, sl
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d40:	eb0a 231a 	add.w	r3, sl, sl, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3d44:	b2db      	uxtb	r3, r3
    3d46:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    3d4a:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
    3d4e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3d52:	ee07 8a90 	vmov	s15, r8
    3d56:	f10e 0e14 	add.w	lr, lr, #20
    3d5a:	fa5f fe8e 	uxtb.w	lr, lr
	fill_solid(leds, NUM_LEDS, CRGB::Black);
}

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
    3d5e:	2301      	movs	r3, #1
    3d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    3d64:	f881 e000 	strb.w	lr, [r1]
	fill_solid(leds, NUM_LEDS, CRGB::Black);
}

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
    3d68:	7013      	strb	r3, [r2, #0]
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    3d6a:	2100      	movs	r1, #0
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    3d6c:	f04f 0c73 	mov.w	ip, #115	; 0x73
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d70:	eb0a 234a 	add.w	r3, sl, sl, lsl #9
    3d74:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    3d78:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3d7c:	3319      	adds	r3, #25
    3d7e:	b29b      	uxth	r3, r3
    3d80:	fb0c f203 	mul.w	r2, ip, r3
    3d84:	0c12      	lsrs	r2, r2, #16
    3d86:	320a      	adds	r2, #10
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d88:	eb03 2a43 	add.w	sl, r3, r3, lsl #9
    3d8c:	b292      	uxth	r2, r2
    3d8e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    3d92:	ee07 2a90 	vmov	s15, r2
    3d96:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3d9e:	3319      	adds	r3, #25
    3da0:	b29b      	uxth	r3, r3
    3da2:	ee87 7a86 	vdiv.f32	s14, s15, s12
    3da6:	eb03 2a43 	add.w	sl, r3, r3, lsl #9
    3daa:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    3dae:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    3db2:	f10a 0a19 	add.w	sl, sl, #25
    3db6:	fa1f fa8a 	uxth.w	sl, sl
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3dba:	eb0a 221a 	add.w	r2, sl, sl, lsr #8
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
    3dbe:	b2d2      	uxtb	r2, r2
    3dc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3dc4:	11d2      	asrs	r2, r2, #7
    3dc6:	3205      	adds	r2, #5
    3dc8:	b2d2      	uxtb	r2, r2
    3dca:	3101      	adds	r1, #1
    3dcc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3dd0:	ee07 2a90 	vmov	s15, r2

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
    3dd4:	b2ca      	uxtb	r2, r1
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
    3dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
    3dda:	f3c3 13c0 	ubfx	r3, r3, #7, #1

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
    3dde:	4596      	cmp	lr, r2
			spark_pos[i] = (float)firework_position;
    3de0:	ece7 6a01 	vstmia	r7!, {s13}
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
			spark_bri[i] = 255;
    3de4:	f840 bb04 	str.w	fp, [r0], #4
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
    3de8:	f805 3f01 	strb.w	r3, [r5, #1]!
			spark_fade[i] = random8(5, 15);
    3dec:	ece4 7a01 	vstmia	r4!, {s15}
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    3df0:	eca6 7a01 	vstmia	r6!, {s14}

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
    3df4:	d8bc      	bhi.n	3d70 <fadeup()+0x78>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    3df6:	4921      	ldr	r1, [pc, #132]	; (3e7c <fadeup()+0x184>)
    3df8:	f8a9 a000 	strh.w	sl, [r9]
    3dfc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    3e00:	eb01 0208 	add.w	r2, r1, r8
    3e04:	23ff      	movs	r3, #255	; 0xff
    3e06:	f801 3008 	strb.w	r3, [r1, r8]
        g = (colorcode >>  8) & 0xFF;
    3e0a:	7053      	strb	r3, [r2, #1]
        b = (colorcode >>  0) & 0xFF;
    3e0c:	7093      	strb	r3, [r2, #2]
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
		if (firework_bri >= 255) {
			exploded = true;
		}
	}
}
    3e0e:	b003      	add	sp, #12
    3e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			spark_bri[i] = 255;
		}
		leds[firework_position] = CRGB::White;
	}
	else {
		firework_bri += 5;
    3e14:	4d1a      	ldr	r5, [pc, #104]	; (3e80 <fadeup()+0x188>)
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
    3e16:	4a10      	ldr	r2, [pc, #64]	; (3e58 <fadeup()+0x160>)
			spark_bri[i] = 255;
		}
		leds[firework_position] = CRGB::White;
	}
	else {
		firework_bri += 5;
    3e18:	782b      	ldrb	r3, [r5, #0]
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
    3e1a:	7812      	ldrb	r2, [r2, #0]
    3e1c:	4819      	ldr	r0, [pc, #100]	; (3e84 <fadeup()+0x18c>)
    3e1e:	4917      	ldr	r1, [pc, #92]	; (3e7c <fadeup()+0x184>)
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3e20:	7806      	ldrb	r6, [r0, #0]
    3e22:	f88d 6004 	strb.w	r6, [sp, #4]
    3e26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
			spark_bri[i] = 255;
		}
		leds[firework_position] = CRGB::White;
	}
	else {
		firework_bri += 5;
    3e2a:	3305      	adds	r3, #5
    3e2c:	b2db      	uxtb	r3, r3
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3e2e:	4411      	add	r1, r2
    3e30:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3e32:	22ff      	movs	r2, #255	; 0xff
    3e34:	702b      	strb	r3, [r5, #0]
    3e36:	f88d 3006 	strb.w	r3, [sp, #6]
    3e3a:	f88d 2005 	strb.w	r2, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3e3e:	f001 fe5b 	bl	5af8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
		if (firework_bri >= 255) {
    3e42:	782b      	ldrb	r3, [r5, #0]
    3e44:	2bff      	cmp	r3, #255	; 0xff
			exploded = true;
    3e46:	bf04      	itt	eq
    3e48:	2301      	moveq	r3, #1
    3e4a:	7023      	strbeq	r3, [r4, #0]
		}
	}
}
    3e4c:	b003      	add	sp, #12
    3e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e52:	bf00      	nop
    3e54:	1fff0cc8 	.word	0x1fff0cc8
    3e58:	1fff1135 	.word	0x1fff1135
    3e5c:	1fff1074 	.word	0x1fff1074
    3e60:	1fff0dc9 	.word	0x1fff0dc9
    3e64:	1fff0f70 	.word	0x1fff0f70
    3e68:	1fff0ccc 	.word	0x1fff0ccc
    3e6c:	1fff114f 	.word	0x1fff114f
    3e70:	1fff11c4 	.word	0x1fff11c4
    3e74:	1fff0e38 	.word	0x1fff0e38
    3e78:	42c80000 	.word	0x42c80000
    3e7c:	1fff0dcc 	.word	0x1fff0dcc
    3e80:	1fff1061 	.word	0x1fff1061
    3e84:	1fff112e 	.word	0x1fff112e
    3e88:	1fff0792 	.word	0x1fff0792
    3e8c:	437f0000 	.word	0x437f0000

00003e90 <explosion()>:

void explosion() {
    3e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e94:	ed2d 8b04 	vpush	{d8-d9}
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
    3e98:	4b75      	ldr	r3, [pc, #468]	; (4070 <explosion()+0x1e0>)
    3e9a:	4876      	ldr	r0, [pc, #472]	; (4074 <explosion()+0x1e4>)
    3e9c:	781a      	ldrb	r2, [r3, #0]
			exploded = true;
		}
	}
}

void explosion() {
    3e9e:	b085      	sub	sp, #20
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
    3ea0:	2123      	movs	r1, #35	; 0x23
    3ea2:	f001 fc8d 	bl	57c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    3ea6:	4b74      	ldr	r3, [pc, #464]	; (4078 <explosion()+0x1e8>)
	}
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
    3ea8:	4a74      	ldr	r2, [pc, #464]	; (407c <explosion()+0x1ec>)
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    3eaa:	781b      	ldrb	r3, [r3, #0]
	}
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
    3eac:	2500      	movs	r5, #0
    3eae:	7015      	strb	r5, [r2, #0]
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	f000 80ac 	beq.w	400e <explosion()+0x17e>
    3eb6:	ab03      	add	r3, sp, #12
    3eb8:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 40b4 <explosion()+0x224>
    3ebc:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 40b8 <explosion()+0x228>
    3ec0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 4074 <explosion()+0x1e4>
    3ec4:	4f6e      	ldr	r7, [pc, #440]	; (4080 <explosion()+0x1f0>)
    3ec6:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 40bc <explosion()+0x22c>
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    3eca:	eddf 8a6e 	vldr	s17, [pc, #440]	; 4084 <explosion()+0x1f4>
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    3ece:	ed9f 9a6e 	vldr	s18, [pc, #440]	; 4088 <explosion()+0x1f8>
    3ed2:	9301      	str	r3, [sp, #4]
    3ed4:	e042      	b.n	3f5c <explosion()+0xcc>
void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
    3ed6:	edd6 6a00 	vldr	s13, [r6]
    3eda:	ed9c 6a00 	vldr	s12, [ip]
    3ede:	ee76 6a26 	vadd.f32	s13, s12, s13
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    3ee2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    3ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
    3eea:	edc6 6a00 	vstr	s13, [r6]
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    3eee:	f100 8082 	bmi.w	3ff6 <explosion()+0x166>
    3ef2:	eef4 6a68 	vcmp.f32	s13, s17
    3ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3efa:	bfc8      	it	gt
    3efc:	eef0 6a68 	vmovgt.f32	s13, s17
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    3f00:	4b62      	ldr	r3, [pc, #392]	; (408c <explosion()+0x1fc>)
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		spark_vel[x] *= gravity;
    3f02:	edda 5a00 	vldr	s11, [sl]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    3f06:	4423      	add	r3, r4
    3f08:	ed93 7a00 	vldr	s14, [r3]
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    3f0c:	4b5a      	ldr	r3, [pc, #360]	; (4078 <explosion()+0x1e8>)
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    3f0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3f12:	eee7 7a49 	vfms.f32	s15, s14, s18
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    3f16:	781a      	ldrb	r2, [r3, #0]
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    3f18:	eb09 0304 	add.w	r3, r9, r4
    3f1c:	ed93 7a00 	vldr	s14, [r3]
    3f20:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		spark_vel[x] *= gravity;
    3f24:	ee25 6a86 	vmul.f32	s12, s11, s12
    3f28:	1939      	adds	r1, r7, r4
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
    3f2a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		spark_vel[x] *= gravity;
    3f2e:	ed81 6a00 	vstr	s12, [r1]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
    3f32:	4952      	ldr	r1, [pc, #328]	; (407c <explosion()+0x1ec>)
    3f34:	ed8d 7a00 	vstr	s14, [sp]
    3f38:	7809      	ldrb	r1, [r1, #0]
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    3f3a:	edc3 7a00 	vstr	s15, [r3]
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
    3f3e:	f89d 3000 	ldrb.w	r3, [sp]
    3f42:	4299      	cmp	r1, r3
    3f44:	bf38      	it	cc
    3f46:	494d      	ldrcc	r1, [pc, #308]	; (407c <explosion()+0x1ec>)
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    3f48:	f105 0501 	add.w	r5, r5, #1
    3f4c:	b2ed      	uxtb	r5, r5
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    3f4e:	445c      	add	r4, fp
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
    3f50:	bf38      	it	cc
    3f52:	700b      	strbcc	r3, [r1, #0]
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    3f54:	42aa      	cmp	r2, r5
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    3f56:	edc4 6a00 	vstr	s13, [r4]
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    3f5a:	d94f      	bls.n	3ffc <explosion()+0x16c>
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
    3f5c:	00ac      	lsls	r4, r5, #2
    3f5e:	eb09 0304 	add.w	r3, r9, r4
    3f62:	edd3 7a00 	vldr	s15, [r3]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3f66:	4b4a      	ldr	r3, [pc, #296]	; (4090 <explosion()+0x200>)
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3f68:	9901      	ldr	r1, [sp, #4]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3f6a:	781b      	ldrb	r3, [r3, #0]
    3f6c:	f88d 3008 	strb.w	r3, [sp, #8]
    3f70:	eb0b 0604 	add.w	r6, fp, r4
    3f74:	ed96 8a00 	vldr	s16, [r6]
    3f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3f7c:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    3f80:	ee17 3a90 	vmov	r3, s15
    3f84:	f04f 0eff 	mov.w	lr, #255	; 0xff
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3f88:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3f8a:	f88d 300a 	strb.w	r3, [sp, #10]
    3f8e:	f88d e009 	strb.w	lr, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3f92:	f001 fdb1 	bl	5af8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3f96:	ee18 3a10 	vmov	r3, s16
    3f9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f9e:	eb08 0003 	add.w	r0, r8, r3
    3fa2:	f818 1003 	ldrb.w	r1, [r8, r3]
    3fa6:	f89d e00c 	ldrb.w	lr, [sp, #12]
    3faa:	fa81 f15e 	uqadd8	r1, r1, lr
    3fae:	f808 1003 	strb.w	r1, [r8, r3]
    3fb2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3fb6:	7841      	ldrb	r1, [r0, #1]
    3fb8:	fa81 f153 	uqadd8	r1, r1, r3
        g = qadd8( g, rhs.g);
    3fbc:	7041      	strb	r1, [r0, #1]
    3fbe:	7883      	ldrb	r3, [r0, #2]
    3fc0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    3fc4:	fa83 f351 	uqadd8	r3, r3, r1
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
    3fc8:	4a32      	ldr	r2, [pc, #200]	; (4094 <explosion()+0x204>)
        b = qadd8( b, rhs.b);
    3fca:	7083      	strb	r3, [r0, #2]
    3fcc:	5d51      	ldrb	r1, [r2, r5]
    3fce:	eb07 0c04 	add.w	ip, r7, r4
		else { spark_pos[x] -= spark_vel[x]; }
    3fd2:	46e6      	mov	lr, ip
void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
    3fd4:	2900      	cmp	r1, #0
    3fd6:	f47f af7e 	bne.w	3ed6 <explosion()+0x46>
		else { spark_pos[x] -= spark_vel[x]; }
    3fda:	edd6 6a00 	vldr	s13, [r6]
    3fde:	ed9c 6a00 	vldr	s12, [ip]
    3fe2:	ee76 6ac6 	vsub.f32	s13, s13, s12
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    3fe6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    3fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
    3fee:	edc6 6a00 	vstr	s13, [r6]
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    3ff2:	f57f af7e 	bpl.w	3ef2 <explosion()+0x62>
    3ff6:	eddf 6a28 	vldr	s13, [pc, #160]	; 4098 <explosion()+0x208>
    3ffa:	e781      	b.n	3f00 <explosion()+0x70>
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
    3ffc:	4b1f      	ldr	r3, [pc, #124]	; (407c <explosion()+0x1ec>)
    3ffe:	781b      	ldrb	r3, [r3, #0]
    4000:	2b05      	cmp	r3, #5
    4002:	d906      	bls.n	4012 <explosion()+0x182>
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
		next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    4004:	b005      	add	sp, #20
    4006:	ecbd 8b04 	vpop	{d8-d9}
    400a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    400e:	ab03      	add	r3, sp, #12
    4010:	9301      	str	r3, [sp, #4]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4012:	2300      	movs	r3, #0
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
    4014:	9a01      	ldr	r2, [sp, #4]
    4016:	4817      	ldr	r0, [pc, #92]	; (4074 <explosion()+0x1e4>)
    4018:	f88d 300c 	strb.w	r3, [sp, #12]
    401c:	2123      	movs	r1, #35	; 0x23
    401e:	f88d 300d 	strb.w	r3, [sp, #13]
    4022:	f88d 300e 	strb.w	r3, [sp, #14]
    4026:	f001 fb09 	bl	563c <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    402a:	481c      	ldr	r0, [pc, #112]	; (409c <explosion()+0x20c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    402c:	4c1c      	ldr	r4, [pc, #112]	; (40a0 <explosion()+0x210>)
    402e:	8803      	ldrh	r3, [r0, #0]
    4030:	6824      	ldr	r4, [r4, #0]
		current_stage = WAITING;
		next_explosion_time = millis() + random16(min_wait + max_wait);
    4032:	491c      	ldr	r1, [pc, #112]	; (40a4 <explosion()+0x214>)
    4034:	4a1c      	ldr	r2, [pc, #112]	; (40a8 <explosion()+0x218>)
    4036:	9403      	str	r4, [sp, #12]
    4038:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    403c:	8809      	ldrh	r1, [r1, #0]
    403e:	8812      	ldrh	r2, [r2, #0]
    4040:	4d1a      	ldr	r5, [pc, #104]	; (40ac <explosion()+0x21c>)
    4042:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4046:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    404a:	440a      	add	r2, r1
    404c:	3319      	adds	r3, #25
    404e:	b29b      	uxth	r3, r3
    4050:	b292      	uxth	r2, r2
	return ret;
    4052:	9903      	ldr	r1, [sp, #12]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
    4054:	4c16      	ldr	r4, [pc, #88]	; (40b0 <explosion()+0x220>)
    4056:	8003      	strh	r3, [r0, #0]
		next_explosion_time = millis() + random16(min_wait + max_wait);
    4058:	fb03 f302 	mul.w	r3, r3, r2
    405c:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
    4060:	2202      	movs	r2, #2
		next_explosion_time = millis() + random16(min_wait + max_wait);
    4062:	602b      	str	r3, [r5, #0]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
    4064:	7022      	strb	r2, [r4, #0]
		next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    4066:	b005      	add	sp, #20
    4068:	ecbd 8b04 	vpop	{d8-d9}
    406c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4070:	1fff0790 	.word	0x1fff0790
    4074:	1fff0dcc 	.word	0x1fff0dcc
    4078:	1fff1074 	.word	0x1fff1074
    407c:	1fff12b4 	.word	0x1fff12b4
    4080:	1fff0ccc 	.word	0x1fff0ccc
    4084:	42080000 	.word	0x42080000
    4088:	3b800000 	.word	0x3b800000
    408c:	1fff11c4 	.word	0x1fff11c4
    4090:	1fff112e 	.word	0x1fff112e
    4094:	1fff1150 	.word	0x1fff1150
    4098:	00000000 	.word	0x00000000
    409c:	1fff0792 	.word	0x1fff0792
    40a0:	1fff1368 	.word	0x1fff1368
    40a4:	1fff0786 	.word	0x1fff0786
    40a8:	1fff078a 	.word	0x1fff078a
    40ac:	1fff0f2c 	.word	0x1fff0f2c
    40b0:	1fff0dc9 	.word	0x1fff0dc9
    40b4:	1fff0f70 	.word	0x1fff0f70
    40b8:	1fff0e38 	.word	0x1fff0e38
    40bc:	1fff076c 	.word	0x1fff076c

000040c0 <render_firework()>:


void render_firework() {
    40c0:	b500      	push	{lr}
	if (current_stage == WAITING) {
    40c2:	4b10      	ldr	r3, [pc, #64]	; (4104 <render_firework()+0x44>)
    40c4:	781b      	ldrb	r3, [r3, #0]
    40c6:	2b02      	cmp	r3, #2
		next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void render_firework() {
    40c8:	b083      	sub	sp, #12
	if (current_stage == WAITING) {
    40ca:	d005      	beq.n	40d8 <render_firework()+0x18>
		if (millis() >= next_explosion_time) {
			prepare_for_explosion();
		}
	}
	else if (current_stage == FADEUP) {
    40cc:	b1a3      	cbz	r3, 40f8 <render_firework()+0x38>
		fadeup();
	}
	else if (current_stage == EXPLOSION) {
    40ce:	2b01      	cmp	r3, #1
    40d0:	d00d      	beq.n	40ee <render_firework()+0x2e>
		explosion();
	}
}
    40d2:	b003      	add	sp, #12
    40d4:	f85d fb04 	ldr.w	pc, [sp], #4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40d8:	4a0b      	ldr	r2, [pc, #44]	; (4108 <render_firework()+0x48>)
}


void render_firework() {
	if (current_stage == WAITING) {
		if (millis() >= next_explosion_time) {
    40da:	4b0c      	ldr	r3, [pc, #48]	; (410c <render_firework()+0x4c>)
    40dc:	6812      	ldr	r2, [r2, #0]
    40de:	9201      	str	r2, [sp, #4]
	return ret;
    40e0:	9a01      	ldr	r2, [sp, #4]
    40e2:	681b      	ldr	r3, [r3, #0]
    40e4:	429a      	cmp	r2, r3
    40e6:	d3f4      	bcc.n	40d2 <render_firework()+0x12>
			prepare_for_explosion();
    40e8:	f7ff fdbe 	bl	3c68 <prepare_for_explosion()>
    40ec:	e7f1      	b.n	40d2 <render_firework()+0x12>
	}
	else if (current_stage == FADEUP) {
		fadeup();
	}
	else if (current_stage == EXPLOSION) {
		explosion();
    40ee:	f7ff fecf 	bl	3e90 <explosion()>
	}
}
    40f2:	b003      	add	sp, #12
    40f4:	f85d fb04 	ldr.w	pc, [sp], #4
		if (millis() >= next_explosion_time) {
			prepare_for_explosion();
		}
	}
	else if (current_stage == FADEUP) {
		fadeup();
    40f8:	f7ff fdfe 	bl	3cf8 <fadeup()>
	}
	else if (current_stage == EXPLOSION) {
		explosion();
	}
}
    40fc:	b003      	add	sp, #12
    40fe:	f85d fb04 	ldr.w	pc, [sp], #4
    4102:	bf00      	nop
    4104:	1fff0dc9 	.word	0x1fff0dc9
    4108:	1fff1368 	.word	0x1fff1368
    410c:	1fff0f2c 	.word	0x1fff0f2c

00004110 <fireworks()>:

void fireworks() {
	if (mode_change) {
    4110:	4a19      	ldr	r2, [pc, #100]	; (4178 <fireworks()+0x68>)
    4112:	7813      	ldrb	r3, [r2, #0]
    4114:	b36b      	cbz	r3, 4172 <fireworks()+0x62>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4116:	4919      	ldr	r1, [pc, #100]	; (417c <fireworks()+0x6c>)
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
    4118:	4819      	ldr	r0, [pc, #100]	; (4180 <fireworks()+0x70>)
    411a:	880b      	ldrh	r3, [r1, #0]
	else if (current_stage == EXPLOSION) {
		explosion();
	}
}

void fireworks() {
    411c:	b4f0      	push	{r4, r5, r6, r7}
    411e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4122:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    4126:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    412a:	3319      	adds	r3, #25
    412c:	b29b      	uxth	r3, r3
    412e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4132:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4136:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    413a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
    413e:	b2db      	uxtb	r3, r3
    4140:	3719      	adds	r7, #25
    4142:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
		firework_hue = random8();
    4146:	4d0f      	ldr	r5, [pc, #60]	; (4184 <fireworks()+0x74>)
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
    4148:	4e0f      	ldr	r6, [pc, #60]	; (4188 <fireworks()+0x78>)
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    414a:	4c10      	ldr	r4, [pc, #64]	; (418c <fireworks()+0x7c>)
    414c:	b2bf      	uxth	r7, r7
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
    414e:	121b      	asrs	r3, r3, #8
    4150:	800f      	strh	r7, [r1, #0]
    4152:	330a      	adds	r3, #10
		firework_hue = random8();
    4154:	eb07 2717 	add.w	r7, r7, r7, lsr #8
void fireworks() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
		current_stage = WAITING;
    4158:	490d      	ldr	r1, [pc, #52]	; (4190 <fireworks()+0x80>)
		firework_position = random8(10, NUM_LEDS - 10);
    415a:	7033      	strb	r3, [r6, #0]
		firework_hue = random8();
    415c:	702f      	strb	r7, [r5, #0]
	}
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
    415e:	2300      	movs	r3, #0
		use_palette = 0;
		this_delay = 10;
    4160:	260a      	movs	r6, #10
		current_stage = WAITING;
    4162:	2502      	movs	r5, #2
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    4164:	7023      	strb	r3, [r4, #0]
		this_delay = 10;
    4166:	6006      	str	r6, [r0, #0]
		current_stage = WAITING;
    4168:	700d      	strb	r5, [r1, #0]
		firework_position = random8(10, NUM_LEDS - 10);
		firework_hue = random8();
	}
	render_firework();
}
    416a:	bcf0      	pop	{r4, r5, r6, r7}
	}
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
    416c:	7013      	strb	r3, [r2, #0]
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
		firework_hue = random8();
	}
	render_firework();
    416e:	f7ff bfa7 	b.w	40c0 <render_firework()>
    4172:	f7ff bfa5 	b.w	40c0 <render_firework()>
    4176:	bf00      	nop
    4178:	1fff077c 	.word	0x1fff077c
    417c:	1fff0792 	.word	0x1fff0792
    4180:	1fff0778 	.word	0x1fff0778
    4184:	1fff112e 	.word	0x1fff112e
    4188:	1fff1135 	.word	0x1fff1135
    418c:	1fff0774 	.word	0x1fff0774
    4190:	1fff0dc9 	.word	0x1fff0dc9

00004194 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    4194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    4198:	0852      	lsrs	r2, r2, #1
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    419a:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    419c:	f102 0914 	add.w	r9, r2, #20
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    41a0:	469a      	mov	sl, r3
    41a2:	4d36      	ldr	r5, [pc, #216]	; (427c <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xe8>)
    41a4:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
    41a8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 4288 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf4>
    41ac:	4f34      	ldr	r7, [pc, #208]	; (4280 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xec>)
    41ae:	f109 0301 	add.w	r3, r9, #1
    41b2:	4683      	mov	fp, r0
    41b4:	460c      	mov	r4, r1
    41b6:	9303      	str	r3, [sp, #12]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        waveangle += 250;
    41b8:	36fa      	adds	r6, #250	; 0xfa
    41ba:	b2b6      	uxth	r6, r6
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    41bc:	0472      	lsls	r2, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    41be:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    41c2:	d503      	bpl.n	41cc <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x38>
    41c4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    41c8:	3307      	adds	r3, #7
    41ca:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    41cc:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    41ce:	f3c3 0246 	ubfx	r2, r3, #1, #7
    41d2:	f818 0001 	ldrb.w	r0, [r8, r1]
    41d6:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
    41da:	fb00 3302 	mla	r3, r0, r2, r3
    41de:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    41e0:	0430      	lsls	r0, r6, #16
    41e2:	bf48      	it	mi
    41e4:	425b      	negmi	r3, r3
    41e6:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    41e8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    41ec:	9a03      	ldr	r2, [sp, #12]
    41ee:	b29b      	uxth	r3, r3
    41f0:	fb02 f303 	mul.w	r3, r2, r3
    41f4:	eb09 4313 	add.w	r3, r9, r3, lsr #16
    41f8:	441c      	add	r4, r3
    41fa:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    41fc:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    41fe:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4202:	d503      	bpl.n	420c <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x78>
    4204:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4208:	3307      	adds	r3, #7
    420a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    420c:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    420e:	f3c3 0246 	ubfx	r2, r3, #1, #7
    4212:	f818 0001 	ldrb.w	r0, [r8, r1]
    4216:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
    421a:	fb00 3302 	mla	r3, r0, r2, r3
    421e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4220:	0422      	lsls	r2, r4, #16
    4222:	bf48      	it	mi
    4224:	425b      	negmi	r3, r3
    4226:	b21b      	sxth	r3, r3
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    4228:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    422c:	b29b      	uxth	r3, r3
    422e:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    4232:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4236:	2301      	movs	r3, #1
    4238:	9300      	str	r3, [sp, #0]
    423a:	f3c2 4207 	ubfx	r2, r2, #16, #8
    423e:	4653      	mov	r3, sl
    4240:	4659      	mov	r1, fp
    4242:	a805      	add	r0, sp, #20
    4244:	f001 fb0e 	bl	5864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4248:	782b      	ldrb	r3, [r5, #0]
    424a:	f89d 2014 	ldrb.w	r2, [sp, #20]
    424e:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4252:	702b      	strb	r3, [r5, #0]
    4254:	786a      	ldrb	r2, [r5, #1]
    4256:	f89d 3015 	ldrb.w	r3, [sp, #21]
    425a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    425e:	706a      	strb	r2, [r5, #1]
    4260:	78ab      	ldrb	r3, [r5, #2]
    4262:	f89d 2016 	ldrb.w	r2, [sp, #22]
    4266:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    426a:	70ab      	strb	r3, [r5, #2]
void pacifica_one_layer(CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
    426c:	4b05      	ldr	r3, [pc, #20]	; (4284 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf0>)
    426e:	3503      	adds	r5, #3
    4270:	42ab      	cmp	r3, r5
    4272:	d1a1      	bne.n	41b8 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x24>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds[i] += c;
    }
}
    4274:	b007      	add	sp, #28
    4276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    427a:	bf00      	nop
    427c:	1fff0dcc 	.word	0x1fff0dcc
    4280:	00009874 	.word	0x00009874
    4284:	1fff0e35 	.word	0x1fff0e35
    4288:	00008e94 	.word	0x00008e94

0000428c <pacifica_add_whitecaps()>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps()
{
    428c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4290:	4856      	ldr	r0, [pc, #344]	; (43ec <pacifica_add_whitecaps()+0x160>)
    4292:	b083      	sub	sp, #12
    4294:	6803      	ldr	r3, [r0, #0]
    4296:	9301      	str	r3, [sp, #4]
	return ret;
    4298:	9901      	ldr	r1, [sp, #4]
    429a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    429e:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
    42a2:	f3c1 3147 	ubfx	r1, r1, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    42a6:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    42a8:	065d      	lsls	r5, r3, #25
    42aa:	f140 809a 	bpl.w	43e2 <pacifica_add_whitecaps()+0x156>
        offset = (uint8_t)255 - offset;
    42ae:	43db      	mvns	r3, r3
    42b0:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    42b2:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    42b6:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    42b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    42bc:	f8df 9134 	ldr.w	r9, [pc, #308]	; 43f4 <pacifica_add_whitecaps()+0x168>
    42c0:	4d4b      	ldr	r5, [pc, #300]	; (43f0 <pacifica_add_whitecaps()+0x164>)
    42c2:	1112      	asrs	r2, r2, #4
    42c4:	0052      	lsls	r2, r2, #1
    42c6:	eb09 0402 	add.w	r4, r9, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    42ca:	f819 2002 	ldrb.w	r2, [r9, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    42ce:	7864      	ldrb	r4, [r4, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    42d0:	fb14 f303 	smulbb	r3, r4, r3
    42d4:	eb02 1323 	add.w	r3, r2, r3, asr #4
    42d8:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    42da:	060c      	lsls	r4, r1, #24
    42dc:	bf48      	it	mi
    42de:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42e0:	6802      	ldr	r2, [r0, #0]
    42e2:	9200      	str	r2, [sp, #0]
    42e4:	b25b      	sxtb	r3, r3

    y += 128;
    42e6:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    42e8:	b2db      	uxtb	r3, r3
	return ret;
    42ea:	9800      	ldr	r0, [sp, #0]
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    42ec:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    42f0:	eb03 0a83 	add.w	sl, r3, r3, lsl #2
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    42f4:	fb02 f000 	mul.w	r0, r2, r0
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    42f8:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    42fc:	0e00      	lsrs	r0, r0, #24
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    42fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
    4302:	43c7      	mvns	r7, r0
    4304:	f1a0 0b0b 	sub.w	fp, r0, #11
    4308:	f10a 0a37 	add.w	sl, sl, #55	; 0x37
    430c:	b2ff      	uxtb	r7, r7
    430e:	fa5f fb8b 	uxtb.w	fp, fp
    4312:	fa5f fa8a 	uxtb.w	sl, sl
    4316:	f105 0801 	add.w	r8, r5, #1
    431a:	e058      	b.n	43ce <pacifica_add_whitecaps()+0x142>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    431c:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    4320:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    4322:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    4326:	1112      	asrs	r2, r2, #4
    4328:	0052      	lsls	r2, r2, #1
    432a:	eb09 0102 	add.w	r1, r9, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    432e:	f819 2002 	ldrb.w	r2, [r9, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    4332:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    4334:	f818 ec01 	ldrb.w	lr, [r8, #-1]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    4338:	78ae      	ldrb	r6, [r5, #2]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    433a:	fb11 f303 	smulbb	r3, r1, r3
    433e:	eb02 1323 	add.w	r3, r2, r3, asr #4
    4342:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    4344:	0602      	lsls	r2, r0, #24
    4346:	786a      	ldrb	r2, [r5, #1]
    4348:	bf48      	it	mi
    434a:	425b      	negmi	r3, r3
    434c:	fa0f fc8e 	sxth.w	ip, lr
    4350:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    4354:	b25b      	sxtb	r3, r3
    4356:	eb01 1101 	add.w	r1, r1, r1, lsl #4

    y += 128;
    435a:	3b80      	subs	r3, #128	; 0x80
    435c:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
    4360:	440a      	add	r2, r1
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
    4362:	b2db      	uxtb	r3, r3
    4364:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    4368:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    436c:	1212      	asrs	r2, r2, #8
    436e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    4372:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4376:	4464      	add	r4, ip
    4378:	eb02 2424 	add.w	r4, r2, r4, asr #8
    437c:	440e      	add	r6, r1
    437e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4382:	eb0a 2323 	add.w	r3, sl, r3, asr #8
    4386:	eb04 2626 	add.w	r6, r4, r6, asr #8
    438a:	b2db      	uxtb	r3, r3
    438c:	b2f6      	uxtb	r6, r6
        wave += 7;
        uint8_t l = leds[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    438e:	1af2      	subs	r2, r6, r3
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    4390:	3007      	adds	r0, #7
        uint8_t l = leds[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    4392:	b2d2      	uxtb	r2, r2

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
        uint8_t l = leds[i].getAverageLight();
        if (l > threshold) {
    4394:	42b3      	cmp	r3, r6
    4396:	4611      	mov	r1, r2
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    4398:	b2c0      	uxtb	r0, r0
        uint8_t l = leds[i].getAverageLight();
        if (l > threshold) {
    439a:	d210      	bcs.n	43be <pacifica_add_whitecaps()+0x132>
    439c:	fa81 f152 	uqadd8	r1, r1, r2
    43a0:	460c      	mov	r4, r1
    43a2:	fa84 f451 	uqadd8	r4, r4, r1
    43a6:	fa8e fe52 	uqadd8	lr, lr, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    43aa:	f808 ec01 	strb.w	lr, [r8, #-1]
    43ae:	786a      	ldrb	r2, [r5, #1]
    43b0:	fa82 f251 	uqadd8	r2, r2, r1
    43b4:	78ab      	ldrb	r3, [r5, #2]
        g = qadd8( g, rhs.g);
    43b6:	706a      	strb	r2, [r5, #1]
    43b8:	fa83 f354 	uqadd8	r3, r3, r4
        b = qadd8( b, rhs.b);
    43bc:	70ab      	strb	r3, [r5, #2]
    43be:	3f07      	subs	r7, #7
void pacifica_add_whitecaps()
{
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
    43c0:	4558      	cmp	r0, fp
    43c2:	b2ff      	uxtb	r7, r7
    43c4:	f105 0503 	add.w	r5, r5, #3
    43c8:	f108 0803 	add.w	r8, r8, #3
    43cc:	d006      	beq.n	43dc <pacifica_add_whitecaps()+0x150>
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    43ce:	0641      	lsls	r1, r0, #25
    43d0:	d4a4      	bmi.n	431c <pacifica_add_whitecaps()+0x90>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    43d2:	f000 023f 	and.w	r2, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    43d6:	f000 030f 	and.w	r3, r0, #15
    43da:	e7a4      	b.n	4326 <pacifica_add_whitecaps()+0x9a>
            uint8_t overage = l - threshold;
            uint8_t overage2 = qadd8(overage, overage);
            leds[i] += CRGB(overage, overage2, qadd8(overage2, overage2));
        }
    }
}
    43dc:	b003      	add	sp, #12
    43de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    43e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    43e6:	f003 030f 	and.w	r3, r3, #15
    43ea:	e767      	b.n	42bc <pacifica_add_whitecaps()+0x30>
    43ec:	1fff1368 	.word	0x1fff1368
    43f0:	1fff0dcc 	.word	0x1fff0dcc
    43f4:	00008950 	.word	0x00008950

000043f8 <pacifica_deepen_colors()>:

// Deepen the blues and greens
void pacifica_deepen_colors()
{
    43f8:	4816      	ldr	r0, [pc, #88]	; (4454 <pacifica_deepen_colors()+0x5c>)
    43fa:	1e82      	subs	r2, r0, #2
    43fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43fe:	f102 0469 	add.w	r4, r2, #105	; 0x69
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    4402:	2702      	movs	r7, #2
        if( rhs.g > g) g = rhs.g;
    4404:	2605      	movs	r6, #5
        if( rhs.b > b) b = rhs.b;
    4406:	2507      	movs	r5, #7
    4408:	7853      	ldrb	r3, [r2, #1]
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        leds[i].blue = scale8(leds[i].blue, 145);
    440a:	7891      	ldrb	r1, [r2, #2]
    440c:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
    4410:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    4414:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    4418:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    441c:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    4420:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4424:	11c9      	asrs	r1, r1, #7
        leds[i].green = scale8(leds[i].green, 200);
    4426:	7053      	strb	r3, [r2, #1]

// Deepen the blues and greens
void pacifica_deepen_colors()
{
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        leds[i].blue = scale8(leds[i].blue, 145);
    4428:	7091      	strb	r1, [r2, #2]
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    442a:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    442e:	2901      	cmp	r1, #1
    4430:	bf9c      	itt	ls
    4432:	f800 7c02 	strbls.w	r7, [r0, #-2]
    4436:	7853      	ldrbls	r3, [r2, #1]
        if( rhs.g > g) g = rhs.g;
    4438:	2b04      	cmp	r3, #4
        if( rhs.b > b) b = rhs.b;
    443a:	7893      	ldrb	r3, [r2, #2]

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
        if( rhs.g > g) g = rhs.g;
    443c:	bf98      	it	ls
    443e:	7056      	strbls	r6, [r2, #1]
        if( rhs.b > b) b = rhs.b;
    4440:	2b06      	cmp	r3, #6
    4442:	bf98      	it	ls
    4444:	7095      	strbls	r5, [r2, #2]
    4446:	3203      	adds	r2, #3
}

// Deepen the blues and greens
void pacifica_deepen_colors()
{
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
    4448:	42a2      	cmp	r2, r4
    444a:	f100 0003 	add.w	r0, r0, #3
    444e:	d1db      	bne.n	4408 <pacifica_deepen_colors()+0x10>
        leds[i].blue = scale8(leds[i].blue, 145);
        leds[i].green = scale8(leds[i].green, 200);
        leds[i] |= CRGB(2, 5, 7);
    }
}
    4450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4452:	bf00      	nop
    4454:	1fff0dce 	.word	0x1fff0dce

00004458 <pacifica_loop()>:

void pacifica_loop()
{
    4458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (mode_change) {
    445c:	4bc6      	ldr	r3, [pc, #792]	; (4778 <pacifica_loop()+0x320>)
    445e:	781a      	ldrb	r2, [r3, #0]
        leds[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_loop()
{
    4460:	b094      	sub	sp, #80	; 0x50
    if (mode_change) {
    4462:	b16a      	cbz	r2, 4480 <pacifica_loop()+0x28>
        mode_change = 0;
        use_palette = 0;
    4464:	4ec5      	ldr	r6, [pc, #788]	; (477c <pacifica_loop()+0x324>)
        this_delay = 20;
    4466:	4cc6      	ldr	r4, [pc, #792]	; (4780 <pacifica_loop()+0x328>)
    4468:	48c6      	ldr	r0, [pc, #792]	; (4784 <pacifica_loop()+0x32c>)
}

void pacifica_loop()
{
    if (mode_change) {
        mode_change = 0;
    446a:	2200      	movs	r2, #0
        use_palette = 0;
        this_delay = 20;
    446c:	2514      	movs	r5, #20
    446e:	210d      	movs	r1, #13

void pacifica_loop()
{
    if (mode_change) {
        mode_change = 0;
        use_palette = 0;
    4470:	7032      	strb	r2, [r6, #0]
}

void pacifica_loop()
{
    if (mode_change) {
        mode_change = 0;
    4472:	701a      	strb	r2, [r3, #0]
        use_palette = 0;
        this_delay = 20;
    4474:	6025      	str	r5, [r4, #0]
    4476:	f002 ff75 	bl	7364 <usb_serial_write>
    447a:	48c3      	ldr	r0, [pc, #780]	; (4788 <pacifica_loop()+0x330>)
    447c:	f003 f978 	bl	7770 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4480:	4cc2      	ldr	r4, [pc, #776]	; (478c <pacifica_loop()+0x334>)
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    4482:	4ac3      	ldr	r2, [pc, #780]	; (4790 <pacifica_loop()+0x338>)
    4484:	6823      	ldr	r3, [r4, #0]
    4486:	9303      	str	r3, [sp, #12]
	return ret;
    4488:	9b03      	ldr	r3, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    448a:	6821      	ldr	r1, [r4, #0]
    448c:	9113      	str	r1, [sp, #76]	; 0x4c
	return ret;
    448e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    4490:	6811      	ldr	r1, [r2, #0]
    sLastms = ms;
    4492:	6013      	str	r3, [r2, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4494:	f44f 3252 	mov.w	r2, #215040	; 0x34800
    4498:	fb02 f000 	mul.w	r0, r2, r0
    449c:	0c00      	lsrs	r0, r0, #16
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    449e:	ebc1 0e03 	rsb	lr, r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    44a2:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    44a4:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    44a8:	d503      	bpl.n	44b2 <pacifica_loop()+0x5a>
    44aa:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    44ae:	3207      	adds	r2, #7
    44b0:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    44b2:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];
    44b4:	4db7      	ldr	r5, [pc, #732]	; (4794 <pacifica_loop()+0x33c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    44b6:	4eb8      	ldr	r6, [pc, #736]	; (4798 <pacifica_loop()+0x340>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    44b8:	5c6f      	ldrb	r7, [r5, r1]
    44ba:	f836 3011 	ldrh.w	r3, [r6, r1, lsl #1]
    44be:	f3c2 0146 	ubfx	r1, r2, #1, #7
    44c2:	fb07 3201 	mla	r2, r7, r1, r3
    44c6:	b293      	uxth	r3, r2

    if( theta & 0x8000 ) y = -y;
    44c8:	0402      	lsls	r2, r0, #16
    44ca:	bf48      	it	mi
    44cc:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44ce:	6822      	ldr	r2, [r4, #0]
    44d0:	9212      	str	r2, [sp, #72]	; 0x48
    44d2:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    44d4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    44d8:	b29b      	uxth	r3, r3
    44da:	205b      	movs	r0, #91	; 0x5b
	return ret;
    44dc:	9912      	ldr	r1, [sp, #72]	; 0x48
    44de:	fb00 f003 	mul.w	r0, r0, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    44e2:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    44e6:	fb03 f101 	mul.w	r1, r3, r1
    44ea:	0c09      	lsrs	r1, r1, #16
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    44ec:	0c00      	lsrs	r0, r0, #16
    44ee:	30b3      	adds	r0, #179	; 0xb3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    44f0:	044f      	lsls	r7, r1, #17
    44f2:	b280      	uxth	r0, r0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    44f4:	f3c1 02ca 	ubfx	r2, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    44f8:	d503      	bpl.n	4502 <pacifica_loop()+0xaa>
    44fa:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    44fe:	3207      	adds	r2, #7
    4500:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4502:	0a13      	lsrs	r3, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4504:	f3c2 0746 	ubfx	r7, r2, #1, #7
    4508:	5cea      	ldrb	r2, [r5, r3]
    450a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
    450e:	fb02 3207 	mla	r2, r2, r7, r3

    if( theta & 0x8000 ) y = -y;
    4512:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4514:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    4516:	bf48      	it	mi
    4518:	4252      	negmi	r2, r2
    451a:	b212      	sxth	r2, r2
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    451c:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    4520:	b292      	uxth	r2, r2
    4522:	215b      	movs	r1, #91	; 0x5b
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4524:	6823      	ldr	r3, [r4, #0]
    4526:	9311      	str	r3, [sp, #68]	; 0x44
    4528:	fb01 f102 	mul.w	r1, r1, r2
    452c:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    452e:	4a9b      	ldr	r2, [pc, #620]	; (479c <pacifica_loop()+0x344>)
	return ret;
    4530:	9f11      	ldr	r7, [sp, #68]	; 0x44
    4532:	31b3      	adds	r1, #179	; 0xb3
    4534:	b289      	uxth	r1, r1
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    4536:	fb0e f000 	mul.w	r0, lr, r0
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    453a:	fb0e f101 	mul.w	r1, lr, r1
    453e:	fb02 f707 	mul.w	r7, r2, r7
    4542:	0c3f      	lsrs	r7, r7, #16
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    4544:	0a00      	lsrs	r0, r0, #8
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    4546:	0a09      	lsrs	r1, r1, #8
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    4548:	1843      	adds	r3, r0, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    454a:	047a      	lsls	r2, r7, #17
    454c:	ea4f 0e53 	mov.w	lr, r3, lsr #1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4550:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4554:	d503      	bpl.n	455e <pacifica_loop()+0x106>
    4556:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    455a:	3307      	adds	r3, #7
    455c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    455e:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4562:	f3c3 0246 	ubfx	r2, r3, #1, #7
    4566:	f815 800c 	ldrb.w	r8, [r5, ip]
    456a:	f836 301c 	ldrh.w	r3, [r6, ip, lsl #1]
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    456e:	f8df 9244 	ldr.w	r9, [pc, #580]	; 47b4 <pacifica_loop()+0x35c>
    4572:	fb08 3302 	mla	r3, r8, r2, r3

    if( theta & 0x8000 ) y = -y;
    4576:	043f      	lsls	r7, r7, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4578:	6822      	ldr	r2, [r4, #0]
    457a:	9210      	str	r2, [sp, #64]	; 0x40
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    457c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    457e:	bf48      	it	mi
    4580:	425b      	negmi	r3, r3
    4582:	b21b      	sxth	r3, r3
	return ret;
    4584:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    4588:	4a85      	ldr	r2, [pc, #532]	; (47a0 <pacifica_loop()+0x348>)
    458a:	f8b9 7000 	ldrh.w	r7, [r9]
    458e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    4592:	f3c3 3381 	ubfx	r3, r3, #14, #2
    4596:	fb02 fc0c 	mul.w	ip, r2, ip
    459a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    459e:	330a      	adds	r3, #10
    45a0:	fb00 7303 	mla	r3, r0, r3, r7
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    45a4:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
    45a8:	f8a9 3000 	strh.w	r3, [r9]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    45ac:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    45b0:	d003      	beq.n	45ba <pacifica_loop()+0x162>
    45b2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    45b6:	3307      	adds	r3, #7
    45b8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    45ba:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    45be:	f3c3 0746 	ubfx	r7, r3, #1, #7
    45c2:	f815 2008 	ldrb.w	r2, [r5, r8]
    45c6:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    45ca:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 47b8 <pacifica_loop()+0x360>
    45ce:	fb02 3207 	mla	r2, r2, r7, r3

    if( theta & 0x8000 ) y = -y;
    45d2:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    45d6:	6823      	ldr	r3, [r4, #0]
    45d8:	930f      	str	r3, [sp, #60]	; 0x3c
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    45da:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    45dc:	bf18      	it	ne
    45de:	4252      	negne	r2, r2
    45e0:	b212      	sxth	r2, r2
	return ret;
    45e2:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    45e6:	4f6f      	ldr	r7, [pc, #444]	; (47a4 <pacifica_loop()+0x34c>)
    45e8:	f8b8 3000 	ldrh.w	r3, [r8]
    45ec:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    45f0:	f3c2 3281 	ubfx	r2, r2, #14, #2
    45f4:	fb07 f70c 	mul.w	r7, r7, ip
    45f8:	3208      	adds	r2, #8
    45fa:	0c3f      	lsrs	r7, r7, #16
    45fc:	fb0e 3312 	mls	r3, lr, r2, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4600:	047a      	lsls	r2, r7, #17
    4602:	f8a8 3000 	strh.w	r3, [r8]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4606:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    460a:	d503      	bpl.n	4614 <pacifica_loop()+0x1bc>
    460c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4610:	3307      	adds	r3, #7
    4612:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4614:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4618:	f3c3 0246 	ubfx	r2, r3, #1, #7
    461c:	f815 c00e 	ldrb.w	ip, [r5, lr]
    4620:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    4624:	fb0c 3302 	mla	r3, ip, r2, r3

    if( theta & 0x8000 ) y = -y;
    4628:	043f      	lsls	r7, r7, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    462a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    462c:	bf48      	it	mi
    462e:	425b      	negmi	r3, r3
    4630:	b21b      	sxth	r3, r3
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    4632:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4636:	6822      	ldr	r2, [r4, #0]
    4638:	4f5b      	ldr	r7, [pc, #364]	; (47a8 <pacifica_loop()+0x350>)
    463a:	920e      	str	r2, [sp, #56]	; 0x38
    463c:	b29b      	uxth	r3, r3
    463e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    4642:	0c12      	lsrs	r2, r2, #16
    4644:	4b59      	ldr	r3, [pc, #356]	; (47ac <pacifica_loop()+0x354>)
	return ret;
    4646:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    464a:	f8b7 c000 	ldrh.w	ip, [r7]
    464e:	3205      	adds	r2, #5
    4650:	b292      	uxth	r2, r2
    4652:	fb03 fe0e 	mul.w	lr, r3, lr
    4656:	fb00 c312 	mls	r3, r0, r2, ip
    465a:	ea4f 401e 	mov.w	r0, lr, lsr #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    465e:	0442      	lsls	r2, r0, #17
    4660:	803b      	strh	r3, [r7, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4662:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4666:	d503      	bpl.n	4670 <pacifica_loop()+0x218>
    4668:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    466c:	3307      	adds	r3, #7
    466e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4670:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4674:	f3c3 0246 	ubfx	r2, r3, #1, #7
    4678:	f815 c00e 	ldrb.w	ip, [r5, lr]
    467c:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    4680:	f8df a138 	ldr.w	sl, [pc, #312]	; 47bc <pacifica_loop()+0x364>
    4684:	fb0c 3302 	mla	r3, ip, r2, r3

    if( theta & 0x8000 ) y = -y;
    4688:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    468a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    468c:	bf48      	it	mi
    468e:	425b      	negmi	r3, r3
    4690:	b21b      	sxth	r3, r3
    4692:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    4696:	b29b      	uxth	r3, r3
    4698:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    469c:	0c12      	lsrs	r2, r2, #16
    469e:	f8ba 3000 	ldrh.w	r3, [sl]

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds, NUM_LEDS, CRGB(2, 6, 10));
    46a2:	4843      	ldr	r0, [pc, #268]	; (47b0 <pacifica_loop()+0x358>)
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    46a4:	3204      	adds	r2, #4
    46a6:	b292      	uxth	r2, r2
    46a8:	fb01 3312 	mls	r3, r1, r2, r3
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    46ac:	2202      	movs	r2, #2
    46ae:	2106      	movs	r1, #6
    46b0:	f8aa 3000 	strh.w	r3, [sl]
    46b4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    46b8:	230a      	movs	r3, #10

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds, NUM_LEDS, CRGB(2, 6, 10));
    46ba:	aa0d      	add	r2, sp, #52	; 0x34
    46bc:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    46c0:	2123      	movs	r1, #35	; 0x23
    46c2:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    46c6:	f000 ffb9 	bl	563c <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    46ca:	6823      	ldr	r3, [r4, #0]
    46cc:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    46ce:	980d      	ldr	r0, [sp, #52]	; 0x34

    // Render each of four layers, with different scales and speeds, that vary over time
    pacifica_one_layer(pacifica_palette_1, sCIStart1, beatsin16(3, 11 * 256, 14 * 256), beatsin8(10, 70, 130), 0 - beat16(301));
    46d0:	f8b9 1000 	ldrh.w	r1, [r9]
    46d4:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    46d8:	fb03 f000 	mul.w	r0, r3, r0
    46dc:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    46de:	0442      	lsls	r2, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    46e0:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    46e4:	d503      	bpl.n	46ee <pacifica_loop()+0x296>
    46e6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    46ea:	3307      	adds	r3, #7
    46ec:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    46ee:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    46f2:	f3c3 0246 	ubfx	r2, r3, #1, #7
    46f6:	f815 c00e 	ldrb.w	ip, [r5, lr]
    46fa:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    46fe:	fb0c 3302 	mla	r3, ip, r2, r3
    4702:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4704:	0402      	lsls	r2, r0, #16
    4706:	bf48      	it	mi
    4708:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    470a:	6822      	ldr	r2, [r4, #0]
    470c:	920c      	str	r2, [sp, #48]	; 0x30
    470e:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4710:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    4714:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    4718:	b29b      	uxth	r3, r3
    471a:	f44f 202f 	mov.w	r0, #716800	; 0xaf000
    471e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    4722:	fb00 fe0e 	mul.w	lr, r0, lr
    4726:	eb03 2202 	add.w	r2, r3, r2, lsl #8
    472a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    472e:	0c12      	lsrs	r2, r2, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    4730:	fa5f f38e 	uxtb.w	r3, lr
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    4738:	0658      	lsls	r0, r3, #25
    473a:	b292      	uxth	r2, r2
    473c:	f140 813e 	bpl.w	49bc <pacifica_loop()+0x564>
        offset = (uint8_t)255 - offset;
    4740:	43db      	mvns	r3, r3
    4742:	b2d8      	uxtb	r0, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4744:	f000 030f 	and.w	r3, r0, #15
    if( theta & 0x40) secoffset++;
    4748:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    474a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    474e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 47c0 <pacifica_loop()+0x368>
    4752:	1100      	asrs	r0, r0, #4
    4754:	0040      	lsls	r0, r0, #1
    4756:	eb09 0c00 	add.w	ip, r9, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    475a:	f819 0000 	ldrb.w	r0, [r9, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    475e:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4762:	fb1c f303 	smulbb	r3, ip, r3
    4766:	eb00 1323 	add.w	r3, r0, r3, asr #4
    if( theta & 0x80 ) y = -y;
    476a:	f01e 0f80 	tst.w	lr, #128	; 0x80
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    476e:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4770:	6820      	ldr	r0, [r4, #0]
    4772:	9007      	str	r0, [sp, #28]
    4774:	e026      	b.n	47c4 <pacifica_loop()+0x36c>
    4776:	bf00      	nop
    4778:	1fff077c 	.word	0x1fff077c
    477c:	1fff0774 	.word	0x1fff0774
    4780:	1fff0778 	.word	0x1fff0778
    4784:	00008328 	.word	0x00008328
    4788:	1fff079c 	.word	0x1fff079c
    478c:	1fff1368 	.word	0x1fff1368
    4790:	1fff1130 	.word	0x1fff1130
    4794:	00008e94 	.word	0x00008e94
    4798:	00009874 	.word	0x00009874
    479c:	000451c8 	.word	0x000451c8
    47a0:	000351d8 	.word	0x000351d8
    47a4:	000223f8 	.word	0x000223f8
    47a8:	1fff12ba 	.word	0x1fff12ba
    47ac:	00011918 	.word	0x00011918
    47b0:	1fff0dcc 	.word	0x1fff0dcc
    47b4:	1fff12b6 	.word	0x1fff12b6
    47b8:	1fff12b8 	.word	0x1fff12b8
    47bc:	1fff12bc 	.word	0x1fff12bc
    47c0:	00008950 	.word	0x00008950
    if( theta & 0x80 ) y = -y;
    47c4:	bf18      	it	ne
    47c6:	425b      	negne	r3, r3
    47c8:	b25b      	sxtb	r3, r3
	return ret;
    47ca:	f8dd c01c 	ldr.w	ip, [sp, #28]
    47ce:	f8df e230 	ldr.w	lr, [pc, #560]	; 4a00 <pacifica_loop()+0x5a8>
    47d2:	4884      	ldr	r0, [pc, #528]	; (49e4 <pacifica_loop()+0x58c>)

    y += 128;
    47d4:	3b80      	subs	r3, #128	; 0x80
    47d6:	b2db      	uxtb	r3, r3
    47d8:	fb0e fe0c 	mul.w	lr, lr, ip
    47dc:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
    47e0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    47e4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    47e8:	f1ce 0e00 	rsb	lr, lr, #0
    47ec:	121b      	asrs	r3, r3, #8
    47ee:	fa1f fe8e 	uxth.w	lr, lr
    47f2:	3346      	adds	r3, #70	; 0x46
    47f4:	b2db      	uxtb	r3, r3
    47f6:	f8cd e000 	str.w	lr, [sp]
    47fa:	f7ff fccb 	bl	4194 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47fe:	6823      	ldr	r3, [r4, #0]
    4800:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    4802:	980b      	ldr	r0, [sp, #44]	; 0x2c
    pacifica_one_layer(pacifica_palette_2, sCIStart2, beatsin16(4, 6 * 256, 9 * 256), beatsin8(17, 40, 80), beat16(401));
    4804:	f8b8 1000 	ldrh.w	r1, [r8]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4808:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    480c:	fb03 f000 	mul.w	r0, r3, r0
    4810:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4812:	0442      	lsls	r2, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4814:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4818:	d503      	bpl.n	4822 <pacifica_loop()+0x3ca>
    481a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    481e:	3307      	adds	r3, #7
    4820:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4822:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4826:	f3c3 0246 	ubfx	r2, r3, #1, #7
    482a:	f815 500e 	ldrb.w	r5, [r5, lr]
    482e:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    4832:	fb05 3302 	mla	r3, r5, r2, r3
    4836:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4838:	0402      	lsls	r2, r0, #16
    483a:	bf48      	it	mi
    483c:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    483e:	6822      	ldr	r2, [r4, #0]
    4840:	920a      	str	r2, [sp, #40]	; 0x28
    4842:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4844:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    4848:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    484a:	4867      	ldr	r0, [pc, #412]	; (49e8 <pacifica_loop()+0x590>)
    484c:	b29b      	uxth	r3, r3
    484e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    4852:	fb00 f505 	mul.w	r5, r0, r5
    4856:	eb03 2202 	add.w	r2, r3, r2, lsl #8
    485a:	0e2d      	lsrs	r5, r5, #24
    485c:	0c12      	lsrs	r2, r2, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    485e:	b2eb      	uxtb	r3, r5
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4860:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    4864:	065e      	lsls	r6, r3, #25
    4866:	b292      	uxth	r2, r2
    4868:	f140 80b7 	bpl.w	49da <pacifica_loop()+0x582>
        offset = (uint8_t)255 - offset;
    486c:	43d8      	mvns	r0, r3
    486e:	b2c0      	uxtb	r0, r0
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4870:	f000 030f 	and.w	r3, r0, #15
    if( theta & 0x40) secoffset++;
    4874:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    4876:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    487a:	1100      	asrs	r0, r0, #4
    487c:	0040      	lsls	r0, r0, #1
    487e:	eb09 0600 	add.w	r6, r9, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4882:	f819 0000 	ldrb.w	r0, [r9, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    4886:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4888:	fb16 f303 	smulbb	r3, r6, r3
    488c:	eb00 1323 	add.w	r3, r0, r3, asr #4
    4890:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    4892:	0628      	lsls	r0, r5, #24
    4894:	bf48      	it	mi
    4896:	425b      	negmi	r3, r3
    4898:	b25b      	sxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    489a:	6820      	ldr	r0, [r4, #0]
    489c:	9006      	str	r0, [sp, #24]

    y += 128;
    489e:	3b80      	subs	r3, #128	; 0x80
    48a0:	b2db      	uxtb	r3, r3
	return ret;
    48a2:	9d06      	ldr	r5, [sp, #24]
    48a4:	4851      	ldr	r0, [pc, #324]	; (49ec <pacifica_loop()+0x594>)
    48a6:	eb03 0683 	add.w	r6, r3, r3, lsl #2
    48aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    48ae:	121b      	asrs	r3, r3, #8
    48b0:	fb00 f005 	mul.w	r0, r0, r5
    48b4:	0c00      	lsrs	r0, r0, #16
    48b6:	3328      	adds	r3, #40	; 0x28
    48b8:	b2db      	uxtb	r3, r3
    48ba:	9000      	str	r0, [sp, #0]
    48bc:	484c      	ldr	r0, [pc, #304]	; (49f0 <pacifica_loop()+0x598>)
    48be:	f7ff fc69 	bl	4194 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48c2:	6823      	ldr	r3, [r4, #0]
    48c4:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    48c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    pacifica_one_layer(pacifica_palette_3, sCIStart3, 6 * 256, beatsin8(9, 10, 38), 0 - beat16(503));
    48c8:	8839      	ldrh	r1, [r7, #0]
    48ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    48ce:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
    48d2:	f3c0 3047 	ubfx	r0, r0, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    48d6:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    48d8:	065f      	lsls	r7, r3, #25
    48da:	d579      	bpl.n	49d0 <pacifica_loop()+0x578>
        offset = (uint8_t)255 - offset;
    48dc:	43db      	mvns	r3, r3
    48de:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    48e0:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    48e4:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    48e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    48ea:	1112      	asrs	r2, r2, #4
    48ec:	0052      	lsls	r2, r2, #1
    48ee:	eb09 0502 	add.w	r5, r9, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    48f2:	f819 2002 	ldrb.w	r2, [r9, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    48f6:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    48f8:	fb15 f303 	smulbb	r3, r5, r3
    48fc:	eb02 1323 	add.w	r3, r2, r3, asr #4
    if( theta & 0x80 ) y = -y;
    4900:	0606      	lsls	r6, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4902:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4904:	6822      	ldr	r2, [r4, #0]
    4906:	9205      	str	r2, [sp, #20]
    if( theta & 0x80 ) y = -y;
    4908:	bf48      	it	mi
    490a:	425b      	negmi	r3, r3
    490c:	b25b      	sxtb	r3, r3
	return ret;
    490e:	9d05      	ldr	r5, [sp, #20]
    4910:	4a38      	ldr	r2, [pc, #224]	; (49f4 <pacifica_loop()+0x59c>)
    4912:	4839      	ldr	r0, [pc, #228]	; (49f8 <pacifica_loop()+0x5a0>)

    y += 128;
    4914:	3b80      	subs	r3, #128	; 0x80
    4916:	b2db      	uxtb	r3, r3
    4918:	fb02 f205 	mul.w	r2, r2, r5
    491c:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
    4920:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4924:	0c12      	lsrs	r2, r2, #16
    4926:	4252      	negs	r2, r2
    4928:	121b      	asrs	r3, r3, #8
    492a:	b292      	uxth	r2, r2
    492c:	330a      	adds	r3, #10
    492e:	9200      	str	r2, [sp, #0]
    4930:	b2db      	uxtb	r3, r3
    4932:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    4936:	f7ff fc2d 	bl	4194 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    493a:	6823      	ldr	r3, [r4, #0]
    493c:	9308      	str	r3, [sp, #32]
	return ret;
    493e:	9808      	ldr	r0, [sp, #32]
    pacifica_one_layer(pacifica_palette_3, sCIStart4, 5 * 256, beatsin8(8, 10, 28), beat16(601));
    4940:	f8ba 1000 	ldrh.w	r1, [sl]
    4944:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    4948:	fb03 f000 	mul.w	r0, r3, r0
    494c:	0e00      	lsrs	r0, r0, #24
    494e:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    4950:	065d      	lsls	r5, r3, #25
    4952:	d538      	bpl.n	49c6 <pacifica_loop()+0x56e>
        offset = (uint8_t)255 - offset;
    4954:	43db      	mvns	r3, r3
    4956:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4958:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    495c:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    495e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    4962:	1112      	asrs	r2, r2, #4
    4964:	0052      	lsls	r2, r2, #1
    4966:	eb09 0502 	add.w	r5, r9, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    496a:	f819 2002 	ldrb.w	r2, [r9, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    496e:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4970:	fb15 f303 	smulbb	r3, r5, r3
    4974:	eb02 1323 	add.w	r3, r2, r3, asr #4
    4978:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    497a:	0602      	lsls	r2, r0, #24
    497c:	bf48      	it	mi
    497e:	425b      	negmi	r3, r3
    4980:	b25b      	sxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4982:	6822      	ldr	r2, [r4, #0]
    4984:	9204      	str	r2, [sp, #16]

    y += 128;
    4986:	3b80      	subs	r3, #128	; 0x80
    4988:	b2db      	uxtb	r3, r3
	return ret;
    498a:	9c04      	ldr	r4, [sp, #16]
    498c:	4a1b      	ldr	r2, [pc, #108]	; (49fc <pacifica_loop()+0x5a4>)
    498e:	481a      	ldr	r0, [pc, #104]	; (49f8 <pacifica_loop()+0x5a0>)
    4990:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
    4994:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4998:	fb02 f204 	mul.w	r2, r2, r4
    499c:	121b      	asrs	r3, r3, #8
    499e:	0c12      	lsrs	r2, r2, #16
    49a0:	330a      	adds	r3, #10
    49a2:	b2db      	uxtb	r3, r3
    49a4:	9200      	str	r2, [sp, #0]
    49a6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    49aa:	f7ff fbf3 	bl	4194 <pacifica_one_layer(CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>

    // Add brighter 'whitecaps' where the waves lines up more
    pacifica_add_whitecaps();
    49ae:	f7ff fc6d 	bl	428c <pacifica_add_whitecaps()>

    // Deepen the blues and greens a bit
    pacifica_deepen_colors();
    49b2:	f7ff fd21 	bl	43f8 <pacifica_deepen_colors()>
}
    49b6:	b014      	add	sp, #80	; 0x50
    49b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    49bc:	f003 003f 	and.w	r0, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    49c0:	f003 030f 	and.w	r3, r3, #15
    49c4:	e6c3      	b.n	474e <pacifica_loop()+0x2f6>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    49c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    49ca:	f003 030f 	and.w	r3, r3, #15
    49ce:	e7c8      	b.n	4962 <pacifica_loop()+0x50a>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    49d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    49d4:	f003 030f 	and.w	r3, r3, #15
    49d8:	e787      	b.n	48ea <pacifica_loop()+0x492>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    49da:	f003 003f 	and.w	r0, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    49de:	f003 030f 	and.w	r3, r3, #15
    49e2:	e74a      	b.n	487a <pacifica_loop()+0x422>
    49e4:	1fff1078 	.word	0x1fff1078
    49e8:	00129800 	.word	0x00129800
    49ec:	0001b698 	.word	0x0001b698
    49f0:	1fff10a8 	.word	0x1fff10a8
    49f4:	00022628 	.word	0x00022628
    49f8:	1fff10d8 	.word	0x1fff10d8
    49fc:	00029158 	.word	0x00029158
    4a00:	00014938 	.word	0x00014938

00004a04 <setup>:

uint8_t current_mode_number = 0;

#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))


    4a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a08:	f640 31b8 	movw	r1, #3000	; 0xbb8
    4a0c:	b097      	sub	sp, #92	; 0x5c
    4a0e:	487f      	ldr	r0, [pc, #508]	; (4c0c <setup+0x208>)
    4a10:	f000 fd3a 	bl	5488 <VisualMicroDebug::init(unsigned long)>
    4a14:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    4a18:	487c      	ldr	r0, [pc, #496]	; (4c0c <setup+0x208>)
    4a1a:	f000 fd31 	bl	5480 <VisualMicroDebug::begin(unsigned long)>
    4a1e:	2101      	movs	r1, #1
    4a20:	487a      	ldr	r0, [pc, #488]	; (4c0c <setup+0x208>)
    4a22:	f000 fd07 	bl	5434 <VisualMicroDebug::outPacketStart(bool)>
    4a26:	2800      	cmp	r0, #0
    4a28:	f040 80e2 	bne.w	4bf0 <setup+0x1ec>
    4a2c:	2100      	movs	r1, #0
    4a2e:	4877      	ldr	r0, [pc, #476]	; (4c0c <setup+0x208>)
    4a30:	2201      	movs	r2, #1
    4a32:	f000 fdd5 	bl	55e0 <VisualMicroDebug::start(bool, bool)>
    4a36:	2101      	movs	r1, #1
    4a38:	4874      	ldr	r0, [pc, #464]	; (4c0c <setup+0x208>)
    4a3a:	f000 fcfb 	bl	5434 <VisualMicroDebug::outPacketStart(bool)>
    4a3e:	b130      	cbz	r0, 4a4e <setup+0x4a>
    4a40:	2106      	movs	r1, #6
    4a42:	4873      	ldr	r0, [pc, #460]	; (4c10 <setup+0x20c>)
    4a44:	f002 fc8e 	bl	7364 <usb_serial_write>
    4a48:	4870      	ldr	r0, [pc, #448]	; (4c0c <setup+0x208>)
    4a4a:	f000 fd17 	bl	547c <VisualMicroDebug::outPacketEnd()>
void setup() {
    4a4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    4a52:	f001 fc11 	bl	6278 <delay>
	/// @tparam DATA_PIN - the optional data pin for the leds (required)
	/// @tparam RGB_ORDER - the rgb ordering for the leds (e.g. what order red, green, and blue data is written out in)
	/// @returns a reference to the added controller
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    4a56:	486f      	ldr	r0, [pc, #444]	; (4c14 <setup+0x210>)
	delay(2000);
	//Serial.begin(57600);

    4a58:	496f      	ldr	r1, [pc, #444]	; (4c18 <setup+0x214>)
    4a5a:	6803      	ldr	r3, [r0, #0]
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    4a5c:	4a6f      	ldr	r2, [pc, #444]	; (4c1c <setup+0x218>)
    4a5e:	7809      	ldrb	r1, [r1, #0]
    4a60:	7011      	strb	r1, [r2, #0]
	/// @tparam DATA_PIN - the optional data pin for the leds (required)
	/// @tparam RGB_ORDER - the rgb ordering for the leds (e.g. what order red, green, and blue data is written out in)
	/// @returns a reference to the added controller
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    4a62:	f013 0401 	ands.w	r4, r3, #1
    4a66:	f000 80a1 	beq.w	4bac <setup+0x1a8>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
    4a6a:	2223      	movs	r2, #35	; 0x23
    4a6c:	2300      	movs	r3, #0
    4a6e:	496c      	ldr	r1, [pc, #432]	; (4c20 <setup+0x21c>)
    4a70:	486c      	ldr	r0, [pc, #432]	; (4c24 <setup+0x220>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    4a72:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 4c48 <setup+0x244>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    4a76:	4c6c      	ldr	r4, [pc, #432]	; (4c28 <setup+0x224>)
    4a78:	f000 ff7c 	bl	5974 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
	LEDS.setBrightness(max_bright);

	//LEDS.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(leds, NUM_LEDS);

	LEDS.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS);
    4a7c:	f640 31b8 	movw	r1, #3000	; 0xbb8
    4a80:	2005      	movs	r0, #5
    4a82:	f001 f977 	bl	5d74 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    4a86:	f44f 5397 	mov.w	r3, #4832	; 0x12e0
	set_max_power_in_volts_and_milliamps(5, 3000);

	random16_set_seed(4832);
    4a8a:	2002      	movs	r0, #2
    4a8c:	f8a8 3000 	strh.w	r3, [r8]
    4a90:	f001 fa8e 	bl	5fb0 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    4a94:	f8b8 3000 	ldrh.w	r3, [r8]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4a98:	2700      	movs	r7, #0
    4a9a:	4403      	add	r3, r0
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    4a9c:	aa09      	add	r2, sp, #36	; 0x24
    4a9e:	a80a      	add	r0, sp, #40	; 0x28
    4aa0:	2110      	movs	r1, #16
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    4aa2:	ad0a      	add	r5, sp, #40	; 0x28
    4aa4:	f8a8 3000 	strh.w	r3, [r8]
    4aa8:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    4aac:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    4ab0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    4ab4:	f000 fdc2 	bl	563c <fill_solid(CRGB*, int, CRGB const&)>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    4ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4abe:	f8b8 6000 	ldrh.w	r6, [r8]
    4ac2:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    4ac6:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    4aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4acc:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4ad0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4ad4:	3619      	adds	r6, #25
    4ad6:	b2b5      	uxth	r5, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ad8:	eb05 2615 	add.w	r6, r5, r5, lsr #8
	random16_add_entropy(analogRead(2));

	//led_mode = EEPROM.read(STARTMODE);

	current_palette  = CRGBPalette16(CRGB::Black);
    4adc:	b2f6      	uxtb	r6, r6
    4ade:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    4ae2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    4ae6:	ebc6 1603 	rsb	r6, r6, r3, lsl #4
    4aea:	11f6      	asrs	r6, r6, #7
    4aec:	4b4f      	ldr	r3, [pc, #316]	; (4c2c <setup+0x228>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4aee:	f8a8 5000 	strh.w	r5, [r8]
    4af2:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    4af6:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    4afa:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    4afc:	3701      	adds	r7, #1
        } while ( u.index != 255);
    4afe:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    4b00:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    4b02:	d1f8      	bne.n	4af6 <setup+0xf2>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    4b04:	f8d8 3000 	ldr.w	r3, [r8]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    4b08:	9707      	str	r7, [sp, #28]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    4b0a:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    4b0e:	ea4f 6913 	mov.w	r9, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    4b12:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    4b14:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    4b18:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    4b1c:	2400      	movs	r4, #0
    4b1e:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    4b20:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    4b24:	4842      	ldr	r0, [pc, #264]	; (4c30 <setup+0x22c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    4b26:	f3c5 2707 	ubfx	r7, r5, #8, #8
    4b2a:	f3c5 4607 	ubfx	r6, r5, #16, #8
    4b2e:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    4b30:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    4b34:	9104      	str	r1, [sp, #16]
    4b36:	b2f1      	uxtb	r1, r6
    4b38:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    4b3a:	fa5f f18c 	uxtb.w	r1, ip
    4b3e:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    4b40:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    4b42:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    4b44:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    4b46:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    4b4a:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    4b4c:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    4b50:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    4b54:	d80c      	bhi.n	4b70 <setup+0x16c>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    4b56:	9906      	ldr	r1, [sp, #24]
    4b58:	458c      	cmp	ip, r1
    4b5a:	dc07      	bgt.n	4b6c <setup+0x168>
    4b5c:	290f      	cmp	r1, #15
    4b5e:	d005      	beq.n	4b6c <setup+0x168>
                    istart8 = lastSlotUsed + 1;
    4b60:	3101      	adds	r1, #1
    4b62:	b2c9      	uxtb	r1, r1
    4b64:	428b      	cmp	r3, r1
    4b66:	9103      	str	r1, [sp, #12]
    4b68:	bf38      	it	cc
    4b6a:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    4b6c:	b259      	sxtb	r1, r3
    4b6e:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    4b70:	a909      	add	r1, sp, #36	; 0x24
    4b72:	9100      	str	r1, [sp, #0]
    4b74:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b76:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    4b7a:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    4b7e:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b82:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
    4b86:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
    4b8a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
    4b8e:	f000 fd85 	bl	569c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    4b92:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b94:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    4b98:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    4b9c:	46ce      	mov	lr, r9
    4b9e:	d1bf      	bne.n	4b20 <setup+0x11c>
	target_palette   = g_gradient_palettes[random8(g_gradient_palette_count + 1)];
    4ba0:	4b24      	ldr	r3, [pc, #144]	; (4c34 <setup+0x230>)
    4ba2:	2201      	movs	r2, #1
    4ba4:	701a      	strb	r2, [r3, #0]
	current_blending = LINEARBLEND;

    4ba6:	b017      	add	sp, #92	; 0x5c
    4ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	/// @tparam DATA_PIN - the optional data pin for the leds (required)
	/// @tparam RGB_ORDER - the rgb ordering for the leds (e.g. what order red, green, and blue data is written out in)
	/// @returns a reference to the added controller
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    4bac:	f001 faae 	bl	610c <__cxa_guard_acquire>
    4bb0:	2800      	cmp	r0, #0
    4bb2:	f43f af5a 	beq.w	4a6a <setup+0x66>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4bb6:	4920      	ldr	r1, [pc, #128]	; (4c38 <setup+0x234>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    4bb8:	4b1a      	ldr	r3, [pc, #104]	; (4c24 <setup+0x220>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4bba:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    4bbc:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4bbe:	22ff      	movs	r2, #255	; 0xff
    4bc0:	2501      	movs	r5, #1
    4bc2:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    4bc4:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    4bc6:	749d      	strb	r5, [r3, #18]
    4bc8:	731a      	strb	r2, [r3, #12]
    4bca:	735a      	strb	r2, [r3, #13]
    4bcc:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4bce:	73da      	strb	r2, [r3, #15]
    4bd0:	741a      	strb	r2, [r3, #16]
    4bd2:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4bd4:	b1c0      	cbz	r0, 4c08 <setup+0x204>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    4bd6:	4a19      	ldr	r2, [pc, #100]	; (4c3c <setup+0x238>)
    4bd8:	6811      	ldr	r1, [r2, #0]
    4bda:	b101      	cbz	r1, 4bde <setup+0x1da>
    4bdc:	608b      	str	r3, [r1, #8]
/// Class to ensure that a minimum amount of time has kicked since the last time run - and delay if not enough time has passed yet
/// this should make sure that chipsets that have
template<int WAIT> class CMinWait {
	uint16_t mLastMicros;
public:
	CMinWait() { mLastMicros = 0; }
    4bde:	2400      	movs	r4, #0
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1803 : public TM1803Controller400Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903 : public UCS1903Controller400Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903B : public UCS1903BController800Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1904 : public UCS1904Controller800Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS2903 : public UCS2903Controller<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};
    4be0:	4917      	ldr	r1, [pc, #92]	; (4c40 <setup+0x23c>)
	/// @tparam DATA_PIN - the optional data pin for the leds (required)
	/// @tparam RGB_ORDER - the rgb ordering for the leds (e.g. what order red, green, and blue data is written out in)
	/// @returns a reference to the added controller
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    4be2:	480c      	ldr	r0, [pc, #48]	; (4c14 <setup+0x210>)
    4be4:	841c      	strh	r4, [r3, #32]
        m_pTail = this;
    4be6:	6013      	str	r3, [r2, #0]
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1803 : public TM1803Controller400Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903 : public UCS1903Controller400Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903B : public UCS1903BController800Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1904 : public UCS1904Controller800Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS2903 : public UCS2903Controller<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};
    4be8:	6019      	str	r1, [r3, #0]
	/// @tparam DATA_PIN - the optional data pin for the leds (required)
	/// @tparam RGB_ORDER - the rgb ordering for the leds (e.g. what order red, green, and blue data is written out in)
	/// @returns a reference to the added controller
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    4bea:	f001 fa95 	bl	6118 <__cxa_guard_release>
    4bee:	e73c      	b.n	4a6a <setup+0x66>
    4bf0:	2110      	movs	r1, #16
    4bf2:	4814      	ldr	r0, [pc, #80]	; (4c44 <setup+0x240>)
    4bf4:	f002 fbb6 	bl	7364 <usb_serial_write>

uint8_t current_mode_number = 0;

#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))


    4bf8:	210a      	movs	r1, #10
    4bfa:	4804      	ldr	r0, [pc, #16]	; (4c0c <setup+0x208>)
    4bfc:	f000 fc08 	bl	5410 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    4c00:	4802      	ldr	r0, [pc, #8]	; (4c0c <setup+0x208>)
    4c02:	f000 fc3b 	bl	547c <VisualMicroDebug::outPacketEnd()>
    4c06:	e711      	b.n	4a2c <setup+0x28>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4c08:	600b      	str	r3, [r1, #0]
    4c0a:	e7e4      	b.n	4bd6 <setup+0x1d2>
    4c0c:	1fff12f4 	.word	0x1fff12f4
    4c10:	0000834c 	.word	0x0000834c
    4c14:	1fff0c9c 	.word	0x1fff0c9c
    4c18:	1fff0781 	.word	0x1fff0781
    4c1c:	1fff133c 	.word	0x1fff133c
    4c20:	1fff0dcc 	.word	0x1fff0dcc
    4c24:	1fff0ca0 	.word	0x1fff0ca0
    4c28:	1fff0f40 	.word	0x1fff0f40
    4c2c:	00008ec0 	.word	0x00008ec0
    4c30:	1fff12c0 	.word	0x1fff12c0
    4c34:	1fff1114 	.word	0x1fff1114
    4c38:	1fff134c 	.word	0x1fff134c
    4c3c:	1fff135c 	.word	0x1fff135c
    4c40:	00008100 	.word	0x00008100
    4c44:	00008338 	.word	0x00008338
    4c48:	1fff0792 	.word	0x1fff0792

00004c4c <loop>:
	target_palette   = g_gradient_palettes[random8(g_gradient_palette_count + 1)];
	current_blending = LINEARBLEND;

}


    4c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    4c50:	f8df 9324 	ldr.w	r9, [pc, #804]	; 4f78 <loop+0x32c>
void loop() {
	random16_add_entropy(random());

    4c54:	4db5      	ldr	r5, [pc, #724]	; (4f2c <loop+0x2e0>)
	target_palette   = g_gradient_palettes[random8(g_gradient_palette_count + 1)];
	current_blending = LINEARBLEND;

}


    4c56:	b0a3      	sub	sp, #140	; 0x8c
void loop() {
    4c58:	f003 fa10 	bl	807c <random>
    4c5c:	f8b9 3000 	ldrh.w	r3, [r9]
	random16_add_entropy(random());

    4c60:	682a      	ldr	r2, [r5, #0]
    4c62:	4418      	add	r0, r3
    4c64:	f8a9 0000 	strh.w	r0, [r9]
    4c68:	07d0      	lsls	r0, r2, #31
    4c6a:	f140 8086 	bpl.w	4d7a <loop+0x12e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4c6e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 4f7c <loop+0x330>
    4c72:	4caf      	ldr	r4, [pc, #700]	; (4f30 <loop+0x2e4>)
    4c74:	f8d8 3000 	ldr.w	r3, [r8]
    4c78:	930d      	str	r3, [sp, #52]	; 0x34
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4c7a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c80:	1a5b      	subs	r3, r3, r1
    4c82:	429a      	cmp	r2, r3
    4c84:	f240 808c 	bls.w	4da0 <loop+0x154>
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

    4c88:	4daa      	ldr	r5, [pc, #680]	; (4f34 <loop+0x2e8>)
    4c8a:	682b      	ldr	r3, [r5, #0]
    4c8c:	07d9      	lsls	r1, r3, #31
    4c8e:	f140 8096 	bpl.w	4dbe <loop+0x172>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4c92:	f8d8 3000 	ldr.w	r3, [r8]
    4c96:	4ca8      	ldr	r4, [pc, #672]	; (4f38 <loop+0x2ec>)
    4c98:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    4c9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    4c9c:	48a7      	ldr	r0, [pc, #668]	; (4f3c <loop+0x2f0>)
    4c9e:	8822      	ldrh	r2, [r4, #0]
    4ca0:	8861      	ldrh	r1, [r4, #2]
    4ca2:	fba0 0303 	umull	r0, r3, r0, r3
    4ca6:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    4caa:	b29b      	uxth	r3, r3
    4cac:	4299      	cmp	r1, r3
    4cae:	d80d      	bhi.n	4ccc <loop+0x80>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4cb0:	f8d8 3000 	ldr.w	r3, [r8]
    4cb4:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    4cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4cb8:	49a0      	ldr	r1, [pc, #640]	; (4f3c <loop+0x2f0>)
	EVERY_N_SECONDS(25){
    4cba:	4aa1      	ldr	r2, [pc, #644]	; (4f40 <loop+0x2f4>)
    4cbc:	fba1 1303 	umull	r1, r3, r1, r3
    4cc0:	7812      	ldrb	r2, [r2, #0]
    4cc2:	099b      	lsrs	r3, r3, #6
    4cc4:	8023      	strh	r3, [r4, #0]
    4cc6:	2a00      	cmp	r2, #0
    4cc8:	f040 8099 	bne.w	4dfe <loop+0x1b2>
			updatePaletteIndex(target_palette);
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

    4ccc:	4d9d      	ldr	r5, [pc, #628]	; (4f44 <loop+0x2f8>)
    4cce:	682b      	ldr	r3, [r5, #0]
    4cd0:	07da      	lsls	r2, r3, #31
    4cd2:	f140 8089 	bpl.w	4de8 <loop+0x19c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4cd6:	f8d8 3000 	ldr.w	r3, [r8]
    4cda:	4c9b      	ldr	r4, [pc, #620]	; (4f48 <loop+0x2fc>)
    4cdc:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    4cde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4ce0:	4896      	ldr	r0, [pc, #600]	; (4f3c <loop+0x2f0>)
    4ce2:	8822      	ldrh	r2, [r4, #0]
    4ce4:	8861      	ldrh	r1, [r4, #2]
    4ce6:	fba0 0303 	umull	r0, r3, r0, r3
    4cea:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    4cee:	b29b      	uxth	r3, r3
    4cf0:	4299      	cmp	r1, r3
    4cf2:	d81f      	bhi.n	4d34 <loop+0xe8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4cf4:	f8b9 3000 	ldrh.w	r3, [r9]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4cf8:	f8d8 2000 	ldr.w	r2, [r8]
    4cfc:	9212      	str	r2, [sp, #72]	; 0x48
    4cfe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4d02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4d06:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4d0a:	3319      	adds	r3, #25
    4d0c:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d0e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
	return ret;
    4d12:	9912      	ldr	r1, [sp, #72]	; 0x48
    4d14:	4e89      	ldr	r6, [pc, #548]	; (4f3c <loop+0x2f0>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d16:	f8a9 3000 	strh.w	r3, [r9]
	EVERY_N_SECONDS(120) {
		mode_change = 1;
    4d1a:	b2d3      	uxtb	r3, r2
    4d1c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4d20:	fba6 1201 	umull	r1, r2, r6, r1
    4d24:	4d89      	ldr	r5, [pc, #548]	; (4f4c <loop+0x300>)
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
    4d26:	488a      	ldr	r0, [pc, #552]	; (4f50 <loop+0x304>)
		mode_change = 1;
    4d28:	121b      	asrs	r3, r3, #8
    4d2a:	0992      	lsrs	r2, r2, #6
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
    4d2c:	2101      	movs	r1, #1
		mode_change = 1;
    4d2e:	702b      	strb	r3, [r5, #0]
    4d30:	8022      	strh	r2, [r4, #0]
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
    4d32:	7001      	strb	r1, [r0, #0]
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

    4d34:	4d87      	ldr	r5, [pc, #540]	; (4f54 <loop+0x308>)
    4d36:	682b      	ldr	r3, [r5, #0]
    4d38:	07db      	lsls	r3, r3, #31
    4d3a:	d54b      	bpl.n	4dd4 <loop+0x188>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4d3c:	f8d8 3000 	ldr.w	r3, [r8]
    4d40:	4c85      	ldr	r4, [pc, #532]	; (4f58 <loop+0x30c>)
    4d42:	9316      	str	r3, [sp, #88]	; 0x58
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4d44:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4d48:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4d4a:	1a5b      	subs	r3, r3, r1
    4d4c:	4293      	cmp	r3, r2
    4d4e:	d30d      	bcc.n	4d6c <loop+0x120>
	EVERY_N_MILLIS_I(this_timer, this_delay) {
		this_timer.setPeriod(this_delay);
    4d50:	4b7e      	ldr	r3, [pc, #504]	; (4f4c <loop+0x300>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4d52:	f8d8 1000 	ldr.w	r1, [r8]
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

	EVERY_N_MILLIS_I(this_timer, this_delay) {
    4d56:	4a81      	ldr	r2, [pc, #516]	; (4f5c <loop+0x310>)
		this_timer.setPeriod(this_delay);
    4d58:	7818      	ldrb	r0, [r3, #0]
    4d5a:	9115      	str	r1, [sp, #84]	; 0x54
    4d5c:	4b80      	ldr	r3, [pc, #512]	; (4f60 <loop+0x314>)
	return ret;
    4d5e:	9915      	ldr	r1, [sp, #84]	; 0x54
    4d60:	6812      	ldr	r2, [r2, #0]
    4d62:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4d66:	e884 0006 	stmia.w	r4, {r1, r2}
    4d6a:	4798      	blx	r3
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    4d6c:	487d      	ldr	r0, [pc, #500]	; (4f64 <loop+0x318>)
    4d6e:	7801      	ldrb	r1, [r0, #0]
    4d70:	f000 fe52 	bl	5a18 <CFastLED::show(unsigned char)>
		modes[current_mode_number]();
	}


	FastLED.show();

    4d74:	b023      	add	sp, #140	; 0x8c
    4d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}


void loop() {
	random16_add_entropy(random());

    4d7a:	4628      	mov	r0, r5
    4d7c:	f001 f9c6 	bl	610c <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4d80:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 4f7c <loop+0x330>
    4d84:	4c6a      	ldr	r4, [pc, #424]	; (4f30 <loop+0x2e4>)
    4d86:	2800      	cmp	r0, #0
    4d88:	f040 8107 	bne.w	4f9a <loop+0x34e>
    4d8c:	f8d8 3000 	ldr.w	r3, [r8]
    4d90:	930d      	str	r3, [sp, #52]	; 0x34
    4d92:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d98:	1a5b      	subs	r3, r3, r1
    4d9a:	4293      	cmp	r3, r2
    4d9c:	f4ff af74 	bcc.w	4c88 <loop+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4da0:	f8d8 3000 	ldr.w	r3, [r8]
    4da4:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    4da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

    4da8:	4d62      	ldr	r5, [pc, #392]	; (4f34 <loop+0x2e8>)


void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    4daa:	496f      	ldr	r1, [pc, #444]	; (4f68 <loop+0x31c>)
    4dac:	6023      	str	r3, [r4, #0]
    4dae:	486f      	ldr	r0, [pc, #444]	; (4f6c <loop+0x320>)
    4db0:	2218      	movs	r2, #24
    4db2:	f000 fdb7 	bl	5924 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

    4db6:	682b      	ldr	r3, [r5, #0]
    4db8:	07d9      	lsls	r1, r3, #31
    4dba:	f53f af6a 	bmi.w	4c92 <loop+0x46>
    4dbe:	4628      	mov	r0, r5
    4dc0:	f001 f9a4 	bl	610c <__cxa_guard_acquire>
    4dc4:	2800      	cmp	r0, #0
    4dc6:	f040 80f3 	bne.w	4fb0 <loop+0x364>
    4dca:	4c5b      	ldr	r4, [pc, #364]	; (4f38 <loop+0x2ec>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4dcc:	f8d8 3000 	ldr.w	r3, [r8]
    4dd0:	9310      	str	r3, [sp, #64]	; 0x40
    4dd2:	e762      	b.n	4c9a <loop+0x4e>
	EVERY_N_SECONDS(120) {
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

    4dd4:	4628      	mov	r0, r5
    4dd6:	f001 f999 	bl	610c <__cxa_guard_acquire>
    4dda:	2800      	cmp	r0, #0
    4ddc:	f040 80d0 	bne.w	4f80 <loop+0x334>
    4de0:	4c5d      	ldr	r4, [pc, #372]	; (4f58 <loop+0x30c>)
    4de2:	f8d8 3000 	ldr.w	r3, [r8]
    4de6:	e7ac      	b.n	4d42 <loop+0xf6>
			updatePaletteIndex(target_palette);
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

    4de8:	4628      	mov	r0, r5
    4dea:	f001 f98f 	bl	610c <__cxa_guard_acquire>
    4dee:	2800      	cmp	r0, #0
    4df0:	f040 808c 	bne.w	4f0c <loop+0x2c0>
    4df4:	4c54      	ldr	r4, [pc, #336]	; (4f48 <loop+0x2fc>)
    4df6:	f8d8 3000 	ldr.w	r3, [r8]
    4dfa:	9313      	str	r3, [sp, #76]	; 0x4c
    4dfc:	e76f      	b.n	4cde <loop+0x92>
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };

    CRGBPalette16( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    4dfe:	4d5a      	ldr	r5, [pc, #360]	; (4f68 <loop+0x31c>)
    4e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4e02:	ac16      	add	r4, sp, #88	; 0x58
    4e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4e0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4e0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
		if(use_palette){
    4e12:	a816      	add	r0, sp, #88	; 0x58
    4e14:	f7fe fea0 	bl	3b58 <updatePaletteIndex(CRGBPalette16)>
    4e18:	f8b9 3000 	ldrh.w	r3, [r9]
			updatePaletteIndex(target_palette);
			palette_index = random8(g_gradient_palette_count);
    4e1c:	4854      	ldr	r0, [pc, #336]	; (4f70 <loop+0x324>)
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
		if(use_palette){
			updatePaletteIndex(target_palette);
    4e1e:	4955      	ldr	r1, [pc, #340]	; (4f74 <loop+0x328>)
    4e20:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4e24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4e28:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4e2c:	3319      	adds	r3, #25
    4e2e:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e30:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4e34:	b2d2      	uxtb	r2, r2
    4e36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4e3a:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
    4e3e:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e40:	f8a9 3000 	strh.w	r3, [r9]
			palette_index = random8(g_gradient_palette_count);
    4e44:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
		if(use_palette){
			updatePaletteIndex(target_palette);
    4e48:	700a      	strb	r2, [r1, #0]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    4e4a:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    4e4c:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    4e50:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    4e52:	3701      	adds	r7, #1
        } while ( u.index != 255);
    4e54:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    4e56:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    4e58:	d1f8      	bne.n	4e4c <loop+0x200>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    4e5a:	f8da 3000 	ldr.w	r3, [sl]
    4e5e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    4e62:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    4e66:	f3c3 4b07 	ubfx	fp, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    4e6a:	9207      	str	r2, [sp, #28]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    4e6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4e70:	0e1b      	lsrs	r3, r3, #24
    4e72:	9205      	str	r2, [sp, #20]
    4e74:	9304      	str	r3, [sp, #16]

        int indexstart = 0;
    4e76:	2400      	movs	r4, #0
    4e78:	9708      	str	r7, [sp, #32]
    4e7a:	46de      	mov	lr, fp
    4e7c:	46d0      	mov	r8, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    4e7e:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    4e82:	4839      	ldr	r0, [pc, #228]	; (4f68 <loop+0x31c>)
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
    4e84:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    4e88:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    4e8c:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    4e8e:	f3c5 4607 	ubfx	r6, r5, #16, #8
    4e92:	f3c5 6507 	ubfx	r5, r5, #24, #8
    4e96:	b2e9      	uxtb	r1, r5
    4e98:	9106      	str	r1, [sp, #24]
            istart8 = indexstart / 16;
    4e9a:	fa5f f18c 	uxtb.w	r1, ip
    4e9e:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    4ea0:	9908      	ldr	r1, [sp, #32]
    4ea2:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    4ea4:	aa16      	add	r2, sp, #88	; 0x58
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    4ea6:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    4eaa:	fa5f fb87 	uxtb.w	fp, r7
    4eae:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    4eb2:	d80c      	bhi.n	4ece <loop+0x282>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    4eb4:	9907      	ldr	r1, [sp, #28]
    4eb6:	458c      	cmp	ip, r1
    4eb8:	dc07      	bgt.n	4eca <loop+0x27e>
    4eba:	290f      	cmp	r1, #15
    4ebc:	d005      	beq.n	4eca <loop+0x27e>
                    istart8 = lastSlotUsed + 1;
    4ebe:	3101      	adds	r1, #1
    4ec0:	b2c9      	uxtb	r1, r1
    4ec2:	428b      	cmp	r3, r1
    4ec4:	9103      	str	r1, [sp, #12]
    4ec6:	bf38      	it	cc
    4ec8:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    4eca:	b259      	sxtb	r1, r3
    4ecc:	9107      	str	r1, [sp, #28]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    4ece:	a915      	add	r1, sp, #84	; 0x54
    4ed0:	9100      	str	r1, [sp, #0]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ed2:	f89d c014 	ldrb.w	ip, [sp, #20]
        g = rhs.g;
    4ed6:	f88d e059 	strb.w	lr, [sp, #89]	; 0x59
    4eda:	9903      	ldr	r1, [sp, #12]
        b = rhs.b;
    4edc:	f89d e010 	ldrb.w	lr, [sp, #16]
    4ee0:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ee4:	f88d c058 	strb.w	ip, [sp, #88]	; 0x58
    4ee8:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
        g = rhs.g;
    4eec:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
        b = rhs.b;
    4ef0:	f88d 5056 	strb.w	r5, [sp, #86]	; 0x56
    4ef4:	f000 fbd2 	bl	569c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    4ef8:	9b06      	ldr	r3, [sp, #24]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4efa:	f8cd b014 	str.w	fp, [sp, #20]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    4efe:	2cff      	cmp	r4, #255	; 0xff
        g = rhs.g;
    4f00:	46d6      	mov	lr, sl
        b = rhs.b;
    4f02:	9304      	str	r3, [sp, #16]
    4f04:	d1bb      	bne.n	4e7e <loop+0x232>
    4f06:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    4f0a:	e6df      	b.n	4ccc <loop+0x80>
    4f0c:	f8d8 3000 	ldr.w	r3, [r8]
    4f10:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    4f12:	9b11      	ldr	r3, [sp, #68]	; 0x44
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    4f14:	4a09      	ldr	r2, [pc, #36]	; (4f3c <loop+0x2f0>)
    4f16:	4c0c      	ldr	r4, [pc, #48]	; (4f48 <loop+0x2fc>)
    4f18:	fba2 2303 	umull	r2, r3, r2, r3
    4f1c:	099b      	lsrs	r3, r3, #6
    4f1e:	2278      	movs	r2, #120	; 0x78
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

    4f20:	4628      	mov	r0, r5
    4f22:	8023      	strh	r3, [r4, #0]
    4f24:	8062      	strh	r2, [r4, #2]
    4f26:	f001 f8f7 	bl	6118 <__cxa_guard_release>
    4f2a:	e764      	b.n	4df6 <loop+0x1aa>
    4f2c:	1fff1068 	.word	0x1fff1068
    4f30:	1fff0dbc 	.word	0x1fff0dbc
    4f34:	1fff106c 	.word	0x1fff106c
    4f38:	1fff0f38 	.word	0x1fff0f38
    4f3c:	10624dd3 	.word	0x10624dd3
    4f40:	1fff0774 	.word	0x1fff0774
    4f44:	1fff1070 	.word	0x1fff1070
    4f48:	1fff0dc4 	.word	0x1fff0dc4
    4f4c:	1fff0f33 	.word	0x1fff0f33
    4f50:	1fff077c 	.word	0x1fff077c
    4f54:	1fff0f28 	.word	0x1fff0f28
    4f58:	1fff110c 	.word	0x1fff110c
    4f5c:	1fff0778 	.word	0x1fff0778
    4f60:	1fff0730 	.word	0x1fff0730
    4f64:	1fff133c 	.word	0x1fff133c
    4f68:	1fff12c0 	.word	0x1fff12c0
    4f6c:	1fff0f40 	.word	0x1fff0f40
    4f70:	00008ec0 	.word	0x00008ec0
    4f74:	1fff12be 	.word	0x1fff12be
    4f78:	1fff0792 	.word	0x1fff0792
    4f7c:	1fff1368 	.word	0x1fff1368
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4f80:	f8d8 2000 	ldr.w	r2, [r8]
	EVERY_N_SECONDS(120) {
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

    4f84:	4b12      	ldr	r3, [pc, #72]	; (4fd0 <loop+0x384>)
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4f86:	4c13      	ldr	r4, [pc, #76]	; (4fd4 <loop+0x388>)
    4f88:	9214      	str	r2, [sp, #80]	; 0x50
	return ret;
    4f8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4f8c:	681b      	ldr	r3, [r3, #0]
    4f8e:	6022      	str	r2, [r4, #0]
    4f90:	4628      	mov	r0, r5
    4f92:	6063      	str	r3, [r4, #4]
    4f94:	f001 f8c0 	bl	6118 <__cxa_guard_release>
    4f98:	e723      	b.n	4de2 <loop+0x196>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4f9a:	f8d8 3000 	ldr.w	r3, [r8]
    4f9e:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    4fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4fa2:	6023      	str	r3, [r4, #0]
    4fa4:	2332      	movs	r3, #50	; 0x32
}


void loop() {
	random16_add_entropy(random());

    4fa6:	4628      	mov	r0, r5
    4fa8:	6063      	str	r3, [r4, #4]
    4faa:	f001 f8b5 	bl	6118 <__cxa_guard_release>
    4fae:	e6ed      	b.n	4d8c <loop+0x140>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4fb0:	f8d8 3000 	ldr.w	r3, [r8]
    4fb4:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    4fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    4fb8:	4a07      	ldr	r2, [pc, #28]	; (4fd8 <loop+0x38c>)
    4fba:	4c08      	ldr	r4, [pc, #32]	; (4fdc <loop+0x390>)
    4fbc:	fba2 2303 	umull	r2, r3, r2, r3
    4fc0:	099b      	lsrs	r3, r3, #6
    4fc2:	2219      	movs	r2, #25
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

    4fc4:	4628      	mov	r0, r5
    4fc6:	8023      	strh	r3, [r4, #0]
    4fc8:	8062      	strh	r2, [r4, #2]
    4fca:	f001 f8a5 	bl	6118 <__cxa_guard_release>
    4fce:	e6fd      	b.n	4dcc <loop+0x180>
    4fd0:	1fff0778 	.word	0x1fff0778
    4fd4:	1fff110c 	.word	0x1fff110c
    4fd8:	10624dd3 	.word	0x10624dd3
    4fdc:	1fff0f38 	.word	0x1fff0f38

00004fe0 <_GLOBAL__sub_I_leds>:
		modes[current_mode_number]();
	}


	FastLED.show();

    4fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4fe4:	4be1      	ldr	r3, [pc, #900]	; (536c <_GLOBAL__sub_I_leds+0x38c>)
#ifndef PACIFIC_WAVES_H
#define PACIFIC_WAVES_H


CRGBPalette16 pacifica_palette_1 =
    4fe6:	48e2      	ldr	r0, [pc, #904]	; (5370 <_GLOBAL__sub_I_leds+0x390>)
    4fe8:	b09f      	sub	sp, #124	; 0x7c
    4fea:	2400      	movs	r4, #0
    4fec:	701c      	strb	r4, [r3, #0]
    4fee:	705c      	strb	r4, [r3, #1]
    4ff0:	709c      	strb	r4, [r3, #2]
    4ff2:	f04f 0305 	mov.w	r3, #5
    4ff6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    4ffa:	f04f 0307 	mov.w	r3, #7
    4ffe:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    5002:	f04f 0304 	mov.w	r3, #4
    5006:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    500a:	f04f 0309 	mov.w	r3, #9
    500e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    5012:	f04f 030b 	mov.w	r3, #11
    5016:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    501a:	f04f 030d 	mov.w	r3, #13
    501e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    5022:	f04f 0310 	mov.w	r3, #16
    5026:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    502a:	f04f 0312 	mov.w	r3, #18
    502e:	f04f 0a03 	mov.w	sl, #3
    5032:	f04f 0b02 	mov.w	fp, #2
    5036:	f04f 0914 	mov.w	r9, #20
    503a:	2501      	movs	r5, #1
    503c:	2717      	movs	r7, #23
    503e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    5042:	ae11      	add	r6, sp, #68	; 0x44
    5044:	f04f 0319 	mov.w	r3, #25
    5048:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    504c:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    5050:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    5054:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    5058:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    505c:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    5060:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    5064:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    5068:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    506c:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    5070:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    5074:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    5078:	f88d a041 	strb.w	sl, [sp, #65]	; 0x41
    507c:	f88d a045 	strb.w	sl, [sp, #69]	; 0x45
    5080:	f88d b049 	strb.w	fp, [sp, #73]	; 0x49
    5084:	f88d b04d 	strb.w	fp, [sp, #77]	; 0x4d
    5088:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    508c:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    5090:	f88d 9052 	strb.w	r9, [sp, #82]	; 0x52
    5094:	f88d 7056 	strb.w	r7, [sp, #86]	; 0x56
    5098:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    509c:	9600      	str	r6, [sp, #0]
    509e:	f04f 0626 	mov.w	r6, #38	; 0x26
    50a2:	f88d 6062 	strb.w	r6, [sp, #98]	; 0x62
    50a6:	f04f 0631 	mov.w	r6, #49	; 0x31
    50aa:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    50ae:	f04f 063b 	mov.w	r6, #59	; 0x3b
    50b2:	f88d 606a 	strb.w	r6, [sp, #106]	; 0x6a
    50b6:	f04f 0646 	mov.w	r6, #70	; 0x46
    50ba:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    50be:	f06f 0655 	mvn.w	r6, #85	; 0x55
    50c2:	f88d 6075 	strb.w	r6, [sp, #117]	; 0x75
    50c6:	f04f 0650 	mov.w	r6, #80	; 0x50
    50ca:	f88d 6076 	strb.w	r6, [sp, #118]	; 0x76
    50ce:	ae1d      	add	r6, sp, #116	; 0x74
    50d0:	960c      	str	r6, [sp, #48]	; 0x30
    50d2:	ae1c      	add	r6, sp, #112	; 0x70
    50d4:	960b      	str	r6, [sp, #44]	; 0x2c
    50d6:	ae1b      	add	r6, sp, #108	; 0x6c
    50d8:	960a      	str	r6, [sp, #40]	; 0x28
    50da:	ae1a      	add	r6, sp, #104	; 0x68
    50dc:	9609      	str	r6, [sp, #36]	; 0x24
    50de:	ae19      	add	r6, sp, #100	; 0x64
    50e0:	9608      	str	r6, [sp, #32]
    50e2:	ae18      	add	r6, sp, #96	; 0x60
    50e4:	9607      	str	r6, [sp, #28]
    50e6:	ae17      	add	r6, sp, #92	; 0x5c
    50e8:	9606      	str	r6, [sp, #24]
    50ea:	ae16      	add	r6, sp, #88	; 0x58
    50ec:	9605      	str	r6, [sp, #20]
    50ee:	ae15      	add	r6, sp, #84	; 0x54
    50f0:	9604      	str	r6, [sp, #16]
    50f2:	f04f 021c 	mov.w	r2, #28
    50f6:	ae14      	add	r6, sp, #80	; 0x50
    50f8:	f04f 0855 	mov.w	r8, #85	; 0x55
    50fc:	f04f 0c4b 	mov.w	ip, #75	; 0x4b
    5100:	ab10      	add	r3, sp, #64	; 0x40
    5102:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
    5106:	a90e      	add	r1, sp, #56	; 0x38
    5108:	aa0f      	add	r2, sp, #60	; 0x3c
    510a:	f04f 0e28 	mov.w	lr, #40	; 0x28
    510e:	f88d 8071 	strb.w	r8, [sp, #113]	; 0x71
    5112:	9603      	str	r6, [sp, #12]
    5114:	f10d 0848 	add.w	r8, sp, #72	; 0x48
    5118:	ae13      	add	r6, sp, #76	; 0x4c
    511a:	f88d c072 	strb.w	ip, [sp, #114]	; 0x72
    511e:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    5122:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    5126:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    512a:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    512e:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    5132:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    5136:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    513a:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    513e:	f88d 9070 	strb.w	r9, [sp, #112]	; 0x70
    5142:	f88d e074 	strb.w	lr, [sp, #116]	; 0x74
    5146:	9602      	str	r6, [sp, #8]
    5148:	f8cd 8004 	str.w	r8, [sp, #4]
    514c:	f7fe fc5a 	bl	3a04 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    5150:	f04f 0307 	mov.w	r3, #7
    5154:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    5158:	f04f 0305 	mov.w	r3, #5
    515c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    5160:	f04f 0304 	mov.w	r3, #4
    5164:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    5168:	f04f 0309 	mov.w	r3, #9
    516c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    5170:	f04f 030b 	mov.w	r3, #11
    5174:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    5178:	f04f 030d 	mov.w	r3, #13
    517c:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    5180:	f04f 0310 	mov.w	r3, #16
    5184:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    5188:	f04f 0312 	mov.w	r3, #18
    518c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    5190:	f04f 0319 	mov.w	r3, #25
    5194:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    5198:	f04f 0226 	mov.w	r2, #38	; 0x26
    519c:	f04f 031c 	mov.w	r3, #28
    51a0:	f04f 0631 	mov.w	r6, #49	; 0x31
    51a4:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    51a8:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    51ac:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    51b0:	f88d a041 	strb.w	sl, [sp, #65]	; 0x41
    51b4:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    51b8:	f88d a045 	strb.w	sl, [sp, #69]	; 0x45
    51bc:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    51c0:	f88d b049 	strb.w	fp, [sp, #73]	; 0x49
    51c4:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    51c8:	f88d b04d 	strb.w	fp, [sp, #77]	; 0x4d
    51cc:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    51d0:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    51d4:	f88d 9052 	strb.w	r9, [sp, #82]	; 0x52
    51d8:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    51dc:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    51e0:	f88d 7056 	strb.w	r7, [sp, #86]	; 0x56
    51e4:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    51e8:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    51ec:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    51f0:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    51f4:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    51f8:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    51fc:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    5200:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
    5204:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    5208:	f04f 063b 	mov.w	r6, #59	; 0x3b
    520c:	f88d 606a 	strb.w	r6, [sp, #106]	; 0x6a
    5210:	f04f 0646 	mov.w	r6, #70	; 0x46
    5214:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    5218:	f04f 0619 	mov.w	r6, #25
    521c:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x14554B, 0x28AA50 };
CRGBPalette16 pacifica_palette_2 =
    5220:	ae1d      	add	r6, sp, #116	; 0x74
    5222:	960c      	str	r6, [sp, #48]	; 0x30
    5224:	ae1c      	add	r6, sp, #112	; 0x70
    5226:	960b      	str	r6, [sp, #44]	; 0x2c
    5228:	ae1b      	add	r6, sp, #108	; 0x6c
    522a:	960a      	str	r6, [sp, #40]	; 0x28
    522c:	ae1a      	add	r6, sp, #104	; 0x68
    522e:	9609      	str	r6, [sp, #36]	; 0x24
    5230:	ae19      	add	r6, sp, #100	; 0x64
    5232:	9608      	str	r6, [sp, #32]
    5234:	ae18      	add	r6, sp, #96	; 0x60
    5236:	a914      	add	r1, sp, #80	; 0x50
    5238:	9607      	str	r6, [sp, #28]
    523a:	ae17      	add	r6, sp, #92	; 0x5c
    523c:	9103      	str	r1, [sp, #12]
    523e:	9606      	str	r6, [sp, #24]
    5240:	a913      	add	r1, sp, #76	; 0x4c
    5242:	ae16      	add	r6, sp, #88	; 0x58
    5244:	9102      	str	r1, [sp, #8]
    5246:	9605      	str	r6, [sp, #20]
    5248:	a911      	add	r1, sp, #68	; 0x44
    524a:	ae15      	add	r6, sp, #84	; 0x54
    524c:	ab10      	add	r3, sp, #64	; 0x40
    524e:	aa0f      	add	r2, sp, #60	; 0x3c
    5250:	f8cd 8004 	str.w	r8, [sp, #4]
    5254:	9100      	str	r1, [sp, #0]
    5256:	255f      	movs	r5, #95	; 0x5f
    5258:	a90e      	add	r1, sp, #56	; 0x38
    525a:	f04f 0ebe 	mov.w	lr, #190	; 0xbe
    525e:	9604      	str	r6, [sp, #16]
    5260:	2752      	movs	r7, #82	; 0x52
    5262:	f04f 060c 	mov.w	r6, #12
    5266:	4843      	ldr	r0, [pc, #268]	; (5374 <_GLOBAL__sub_I_leds+0x394>)
    5268:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    526c:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    5270:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    5274:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    5278:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    527c:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    5280:	f88d 6070 	strb.w	r6, [sp, #112]	; 0x70
    5284:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
    5288:	f88d 5076 	strb.w	r5, [sp, #118]	; 0x76
    528c:	f88d 7072 	strb.w	r7, [sp, #114]	; 0x72
    5290:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
    5294:	f7fe fbb6 	bl	3a04 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    5298:	200e      	movs	r0, #14
    529a:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    529e:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
    52a2:	f04f 0305 	mov.w	r3, #5
    52a6:	f04f 0006 	mov.w	r0, #6
    52aa:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    52ae:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    52b2:	f04f 0309 	mov.w	r3, #9
    52b6:	f04f 001a 	mov.w	r0, #26
    52ba:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    52be:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    52c2:	f04f 030b 	mov.w	r3, #11
    52c6:	f04f 0027 	mov.w	r0, #39	; 0x27
    52ca:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    52ce:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    52d2:	f04f 030c 	mov.w	r3, #12
    52d6:	f04f 002d 	mov.w	r0, #45	; 0x2d
    52da:	2520      	movs	r5, #32
    52dc:	2640      	movs	r6, #64	; 0x40
    52de:	2708      	movs	r7, #8
    52e0:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    52e4:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    52e8:	f04f 0c33 	mov.w	ip, #51	; 0x33
    52ec:	f04f 0e39 	mov.w	lr, #57	; 0x39
    52f0:	f04f 0310 	mov.w	r3, #16
    52f4:	f04f 0050 	mov.w	r0, #80	; 0x50
    52f8:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    52fc:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
    5300:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    5304:	f88d a03d 	strb.w	sl, [sp, #61]	; 0x3d
    5308:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    530c:	f88d 9042 	strb.w	r9, [sp, #66]	; 0x42
    5310:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    5314:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    5318:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    531c:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    5320:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    5324:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    5328:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    532c:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    5330:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    5334:	f88d 9061 	strb.w	r9, [sp, #97]	; 0x61
    5338:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
    533c:	f88d 7049 	strb.w	r7, [sp, #73]	; 0x49
    5340:	f88d c056 	strb.w	ip, [sp, #86]	; 0x56
    5344:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    5348:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
    534c:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
    5350:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    5354:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    5358:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    535c:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    5360:	f04f 0410 	mov.w	r4, #16
    5364:	f04f 0a70 	mov.w	sl, #112	; 0x70
    5368:	e006      	b.n	5378 <_GLOBAL__sub_I_leds+0x398>
    536a:	bf00      	nop
    536c:	1fff1190 	.word	0x1fff1190
    5370:	1fff1078 	.word	0x1fff1078
    5374:	1fff10a8 	.word	0x1fff10a8
    5378:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x0C5F52, 0x19BE5F };
CRGBPalette16 pacifica_palette_3 =
    537c:	ac1d      	add	r4, sp, #116	; 0x74
    537e:	940c      	str	r4, [sp, #48]	; 0x30
    5380:	eb0d 040a 	add.w	r4, sp, sl
    5384:	940b      	str	r4, [sp, #44]	; 0x2c
    5386:	ac1b      	add	r4, sp, #108	; 0x6c
    5388:	940a      	str	r4, [sp, #40]	; 0x28
    538a:	ac1a      	add	r4, sp, #104	; 0x68
    538c:	2760      	movs	r7, #96	; 0x60
    538e:	9409      	str	r4, [sp, #36]	; 0x24
    5390:	ac19      	add	r4, sp, #100	; 0x64
    5392:	a814      	add	r0, sp, #80	; 0x50
    5394:	9408      	str	r4, [sp, #32]
    5396:	eb0d 0407 	add.w	r4, sp, r7
    539a:	9003      	str	r0, [sp, #12]
    539c:	9407      	str	r4, [sp, #28]
    539e:	a813      	add	r0, sp, #76	; 0x4c
    53a0:	ac17      	add	r4, sp, #92	; 0x5c
    53a2:	9002      	str	r0, [sp, #8]
    53a4:	9406      	str	r4, [sp, #24]
    53a6:	a811      	add	r0, sp, #68	; 0x44
    53a8:	ac16      	add	r4, sp, #88	; 0x58
    53aa:	f04f 0c18 	mov.w	ip, #24
    53ae:	f8cd 8004 	str.w	r8, [sp, #4]
    53b2:	9000      	str	r0, [sp, #0]
    53b4:	f04f 0eff 	mov.w	lr, #255	; 0xff
    53b8:	9405      	str	r4, [sp, #20]
    53ba:	eb0d 0306 	add.w	r3, sp, r6
    53be:	aa0f      	add	r2, sp, #60	; 0x3c
    53c0:	a90e      	add	r1, sp, #56	; 0x38
    53c2:	f04f 0980 	mov.w	r9, #128	; 0x80
    53c6:	f04f 08bf 	mov.w	r8, #191	; 0xbf
    53ca:	f04f 0b1c 	mov.w	fp, #28
    53ce:	ac15      	add	r4, sp, #84	; 0x54
    53d0:	480e      	ldr	r0, [pc, #56]	; (540c <_GLOBAL__sub_I_leds+0x42c>)
    53d2:	f88d b069 	strb.w	fp, [sp, #105]	; 0x69
    53d6:	f88d 506d 	strb.w	r5, [sp, #109]	; 0x6d
    53da:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
    53de:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
    53e2:	9404      	str	r4, [sp, #16]
    53e4:	f88d c065 	strb.w	ip, [sp, #101]	; 0x65
    53e8:	f88d 7066 	strb.w	r7, [sp, #102]	; 0x66
    53ec:	f88d 7075 	strb.w	r7, [sp, #117]	; 0x75
    53f0:	f88d a06a 	strb.w	sl, [sp, #106]	; 0x6a
    53f4:	f88d 906e 	strb.w	r9, [sp, #110]	; 0x6e
    53f8:	f88d 8072 	strb.w	r8, [sp, #114]	; 0x72
    53fc:	f88d e076 	strb.w	lr, [sp, #118]	; 0x76
    5400:	f7fe fb00 	bl	3a04 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    5404:	b01f      	add	sp, #124	; 0x7c
    5406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    540a:	bf00      	nop
    540c:	1fff10d8 	.word	0x1fff10d8

00005410 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5410:	4807      	ldr	r0, [pc, #28]	; (5430 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#endif // #ifdef  DBG_DYN_DBG
}
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    5412:	b082      	sub	sp, #8
    5414:	6803      	ldr	r3, [r0, #0]
    5416:	9301      	str	r3, [sp, #4]
	return ret;
    5418:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    541a:	4411      	add	r1, r2
    541c:	e001      	b.n	5422 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    541e:	4299      	cmp	r1, r3
    5420:	d304      	bcc.n	542c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5422:	6803      	ldr	r3, [r0, #0]
    5424:	9300      	str	r3, [sp, #0]
	return ret;
    5426:	9b00      	ldr	r3, [sp, #0]
    5428:	429a      	cmp	r2, r3
    542a:	d9f8      	bls.n	541e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    542c:	b002      	add	sp, #8
    542e:	4770      	bx	lr
    5430:	1fff1368 	.word	0x1fff1368

00005434 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    5434:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5436:	4a10      	ldr	r2, [pc, #64]	; (5478 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    5438:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DEBUGGER_TYPE != VM_DEBUGGER_TYPE_NET_UDP)
	if (!noWait)
    543a:	b9a1      	cbnz	r1, 5466 <VisualMicroDebug::outPacketStart(bool)+0x32>
    543c:	6813      	ldr	r3, [r2, #0]
    543e:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    5440:	6841      	ldr	r1, [r0, #4]
	return ret;
    5442:	9b00      	ldr	r3, [sp, #0]
    5444:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    5446:	2931      	cmp	r1, #49	; 0x31
    5448:	d80d      	bhi.n	5466 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    544a:	6813      	ldr	r3, [r2, #0]
    544c:	9302      	str	r3, [sp, #8]
	return ret;
    544e:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    5450:	f104 0332 	add.w	r3, r4, #50	; 0x32
    5454:	1a59      	subs	r1, r3, r1
    5456:	e001      	b.n	545c <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    5458:	4299      	cmp	r1, r3
    545a:	d304      	bcc.n	5466 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    545c:	6813      	ldr	r3, [r2, #0]
    545e:	9301      	str	r3, [sp, #4]
	return ret;
    5460:	9b01      	ldr	r3, [sp, #4]
    5462:	429c      	cmp	r4, r3
    5464:	d9f8      	bls.n	5458 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5466:	6813      	ldr	r3, [r2, #0]
    5468:	9303      	str	r3, [sp, #12]
	return ret;
    546a:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    546c:	6043      	str	r3, [r0, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    546e:	2001      	movs	r0, #1
    5470:	b005      	add	sp, #20
    5472:	f85d 4b04 	ldr.w	r4, [sp], #4
    5476:	4770      	bx	lr
    5478:	1fff1368 	.word	0x1fff1368

0000547c <VisualMicroDebug::outPacketEnd()>:
    547c:	4770      	bx	lr
    547e:	bf00      	nop

00005480 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    5480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5484:	f000 bef8 	b.w	6278 <delay>

00005488 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    5488:	2300      	movs	r3, #0
    548a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    548c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    548e:	b171      	cbz	r1, 54ae <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5490:	4807      	ldr	r0, [pc, #28]	; (54b0 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    5492:	b082      	sub	sp, #8
    5494:	6803      	ldr	r3, [r0, #0]
    5496:	9301      	str	r3, [sp, #4]
	return ret;
    5498:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    549a:	4411      	add	r1, r2
    549c:	e001      	b.n	54a2 <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    549e:	4299      	cmp	r1, r3
    54a0:	d304      	bcc.n	54ac <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    54a2:	6803      	ldr	r3, [r0, #0]
    54a4:	9300      	str	r3, [sp, #0]
	return ret;
    54a6:	9b00      	ldr	r3, [sp, #0]
    54a8:	429a      	cmp	r2, r3
    54aa:	d9f8      	bls.n	549e <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    54ac:	b002      	add	sp, #8
    54ae:	4770      	bx	lr
    54b0:	1fff1368 	.word	0x1fff1368

000054b4 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    54b4:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    54b6:	4c13      	ldr	r4, [pc, #76]	; (5504 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    54b8:	b085      	sub	sp, #20
    54ba:	6823      	ldr	r3, [r4, #0]
    54bc:	9303      	str	r3, [sp, #12]
	return ret;
    54be:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    54c0:	6043      	str	r3, [r0, #4]
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    54c2:	460d      	mov	r5, r1
    54c4:	4810      	ldr	r0, [pc, #64]	; (5508 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    54c6:	2106      	movs	r1, #6
    54c8:	f001 ff4c 	bl	7364 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    54cc:	2300      	movs	r3, #0
    54ce:	220a      	movs	r2, #10
    54d0:	4629      	mov	r1, r5
    54d2:	480e      	ldr	r0, [pc, #56]	; (550c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    54d4:	f002 f95c 	bl	7790 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    54d8:	2106      	movs	r1, #6
    54da:	480d      	ldr	r0, [pc, #52]	; (5510 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    54dc:	f001 ff42 	bl	7364 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    54e0:	480a      	ldr	r0, [pc, #40]	; (550c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    54e2:	f002 f945 	bl	7770 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    54e6:	6823      	ldr	r3, [r4, #0]
    54e8:	9302      	str	r3, [sp, #8]
	return ret;
    54ea:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    54ec:	f102 0132 	add.w	r1, r2, #50	; 0x32
    54f0:	e001      	b.n	54f6 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    54f2:	4299      	cmp	r1, r3
    54f4:	d304      	bcc.n	5500 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    54f6:	6823      	ldr	r3, [r4, #0]
    54f8:	9301      	str	r3, [sp, #4]
	return ret;
    54fa:	9b01      	ldr	r3, [sp, #4]
    54fc:	429a      	cmp	r2, r3
    54fe:	d9f8      	bls.n	54f2 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);

#endif //#if defined(VM_DEBUGGER_TYPE) 
}
    5500:	b005      	add	sp, #20
    5502:	bd30      	pop	{r4, r5, pc}
    5504:	1fff1368 	.word	0x1fff1368
    5508:	00009cd8 	.word	0x00009cd8
    550c:	1fff079c 	.word	0x1fff079c
    5510:	00009ce0 	.word	0x00009ce0

00005514 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    5514:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    5516:	7e03      	ldrb	r3, [r0, #24]
    5518:	b90b      	cbnz	r3, 551e <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
    551a:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
    551c:	bd38      	pop	{r3, r4, r5, pc}
    551e:	460d      	mov	r5, r1
    5520:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5522:	f001 fef5 	bl	7310 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    5526:	f010 0fff 	tst.w	r0, #255	; 0xff
    552a:	d101      	bne.n	5530 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
    552c:	2065      	movs	r0, #101	; 0x65
    552e:	bd38      	pop	{r3, r4, r5, pc}
    5530:	f001 feee 	bl	7310 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    5534:	f010 0fff 	tst.w	r0, #255	; 0xff
    5538:	d0f8      	beq.n	552c <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    553a:	f001 fead 	bl	7298 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    553e:	b2c0      	uxtb	r0, r0
    5540:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    5544:	2b1e      	cmp	r3, #30
    5546:	d8f3      	bhi.n	5530 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    5548:	a201      	add	r2, pc, #4	; (adr r2, 5550 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    554a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    554e:	bf00      	nop
    5550:	000055d9 	.word	0x000055d9
    5554:	00005531 	.word	0x00005531
    5558:	00005531 	.word	0x00005531
    555c:	00005531 	.word	0x00005531
    5560:	00005531 	.word	0x00005531
    5564:	00005531 	.word	0x00005531
    5568:	00005531 	.word	0x00005531
    556c:	00005531 	.word	0x00005531
    5570:	00005531 	.word	0x00005531
    5574:	00005531 	.word	0x00005531
    5578:	00005531 	.word	0x00005531
    557c:	000055cd 	.word	0x000055cd
    5580:	00005531 	.word	0x00005531
    5584:	00005531 	.word	0x00005531
    5588:	00005531 	.word	0x00005531
    558c:	00005531 	.word	0x00005531
    5590:	0000551b 	.word	0x0000551b
    5594:	00005531 	.word	0x00005531
    5598:	00005531 	.word	0x00005531
    559c:	00005531 	.word	0x00005531
    55a0:	00005531 	.word	0x00005531
    55a4:	00005531 	.word	0x00005531
    55a8:	00005531 	.word	0x00005531
    55ac:	00005531 	.word	0x00005531
    55b0:	00005531 	.word	0x00005531
    55b4:	0000551b 	.word	0x0000551b
    55b8:	00005531 	.word	0x00005531
    55bc:	00005531 	.word	0x00005531
    55c0:	00005531 	.word	0x00005531
    55c4:	00005531 	.word	0x00005531
    55c8:	0000551d 	.word	0x0000551d
		{

		case 'c':
			sendContinuedACK(breakPointId);
    55cc:	4620      	mov	r0, r4
    55ce:	4629      	mov	r1, r5
    55d0:	f7ff ff70 	bl	54b4 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    55d4:	2063      	movs	r0, #99	; 0x63
    55d6:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    55d8:	2300      	movs	r3, #0
    55da:	7623      	strb	r3, [r4, #24]
			return 'c';
    55dc:	2063      	movs	r0, #99	; 0x63
    55de:	bd38      	pop	{r3, r4, r5, pc}

000055e0 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    55e0:	b570      	push	{r4, r5, r6, lr}
    55e2:	4605      	mov	r5, r0
    55e4:	b082      	sub	sp, #8
    55e6:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    55e8:	b1c9      	cbz	r1, 561e <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    55ea:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55ec:	4c0d      	ldr	r4, [pc, #52]	; (5624 <VisualMicroDebug::start(bool, bool)+0x44>)
    55ee:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    55f0:	2100      	movs	r1, #0
    55f2:	4628      	mov	r0, r5
    55f4:	f7ff ff8e 	bl	5514 <VisualMicroDebug::breakWait(unsigned char)>
    55f8:	2863      	cmp	r0, #99	; 0x63
    55fa:	d010      	beq.n	561e <VisualMicroDebug::start(bool, bool)+0x3e>
    55fc:	6823      	ldr	r3, [r4, #0]
    55fe:	9301      	str	r3, [sp, #4]
	return ret;
    5600:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    5602:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5604:	6823      	ldr	r3, [r4, #0]
    5606:	9300      	str	r3, [sp, #0]
	return ret;
    5608:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    560a:	429a      	cmp	r2, r3
    560c:	d8f0      	bhi.n	55f0 <VisualMicroDebug::start(bool, bool)+0x10>
    560e:	4299      	cmp	r1, r3
    5610:	d2f8      	bcs.n	5604 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    5612:	2100      	movs	r1, #0
    5614:	4628      	mov	r0, r5
    5616:	f7ff ff7d 	bl	5514 <VisualMicroDebug::breakWait(unsigned char)>
    561a:	2863      	cmp	r0, #99	; 0x63
    561c:	d1ee      	bne.n	55fc <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    561e:	762e      	strb	r6, [r5, #24]
#endif

}
    5620:	b002      	add	sp, #8
    5622:	bd70      	pop	{r4, r5, r6, pc}
    5624:	1fff1368 	.word	0x1fff1368

00005628 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    5628:	4b03      	ldr	r3, [pc, #12]	; (5638 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    562a:	2200      	movs	r2, #0
    562c:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    562e:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    5630:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    5632:	615a      	str	r2, [r3, #20]
    5634:	4770      	bx	lr
    5636:	bf00      	nop
    5638:	1fff12f4 	.word	0x1fff12f4

0000563c <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    563c:	2900      	cmp	r1, #0
    563e:	dd0b      	ble.n	5658 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    5640:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5644:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5646:	7813      	ldrb	r3, [r2, #0]
    5648:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    564a:	7853      	ldrb	r3, [r2, #1]
    564c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    564e:	7893      	ldrb	r3, [r2, #2]
    5650:	7083      	strb	r3, [r0, #2]
    5652:	3003      	adds	r0, #3
    5654:	4288      	cmp	r0, r1
    5656:	d1f6      	bne.n	5646 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    5658:	4770      	bx	lr
    565a:	bf00      	nop

0000565c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    565c:	b570      	push	{r4, r5, r6, lr}
    565e:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    5660:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    5662:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    5664:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    5666:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    566a:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    566e:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    5672:	dd10      	ble.n	5696 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    5674:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5678:	461e      	mov	r6, r3
    567a:	4604      	mov	r4, r0
    567c:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    567e:	4621      	mov	r1, r4
    5680:	a801      	add	r0, sp, #4
    5682:	f000 fa39 	bl	5af8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    5686:	f89d 2004 	ldrb.w	r2, [sp, #4]
    568a:	3403      	adds	r4, #3
    568c:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    568e:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    5690:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    5694:	d1f3      	bne.n	567e <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    5696:	b002      	add	sp, #8
    5698:	bd70      	pop	{r4, r5, r6, pc}
    569a:	bf00      	nop

0000569c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    56a0:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    56a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    56a4:	d352      	bcc.n	574c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    56a6:	f896 e000 	ldrb.w	lr, [r6]
    56aa:	7815      	ldrb	r5, [r2, #0]
    56ac:	7877      	ldrb	r7, [r6, #1]
    56ae:	f896 8002 	ldrb.w	r8, [r6, #2]
    56b2:	7854      	ldrb	r4, [r2, #1]
    56b4:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    56b8:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    56bc:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    56c0:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    56c4:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    56c8:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    56cc:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    56d0:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    56d4:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    56d6:	b3b2      	cbz	r2, 5746 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    56d8:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    56dc:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    56e0:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    56e4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    56e8:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    56ec:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    56f0:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    56f2:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    56f6:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    56fa:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    56fe:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    5702:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    5706:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    570a:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    570e:	d818      	bhi.n	5742 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    5710:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    5714:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    5716:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    5718:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    571a:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    571e:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    5722:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    5726:	4475      	add	r5, lr
        g88 += gdelta87;
    5728:	4454      	add	r4, sl
        b88 += bdelta87;
    572a:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    572c:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    572e:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    5732:	b2ad      	uxth	r5, r5
        g = rhs.g;
    5734:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    5738:	b2a4      	uxth	r4, r4
        b = rhs.b;
    573a:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    573e:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    5740:	d2e6      	bcs.n	5710 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    5742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5746:	f04f 0b01 	mov.w	fp, #1
    574a:	e7c7      	b.n	56dc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    574c:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    574e:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5750:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5754:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5756:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    5758:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    575c:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5760:	7015      	strb	r5, [r2, #0]
    5762:	4619      	mov	r1, r3
    5764:	f886 e000 	strb.w	lr, [r6]
    5768:	464b      	mov	r3, r9
        g = rhs.g;
    576a:	7054      	strb	r4, [r2, #1]
    576c:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    576e:	f882 c002 	strb.w	ip, [r2, #2]
    5772:	f886 8002 	strb.w	r8, [r6, #2]
    5776:	e79f      	b.n	56b8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00005778 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    5778:	b309      	cbz	r1, 57be <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    577a:	b430      	push	{r4, r5}
    577c:	1e4d      	subs	r5, r1, #1
    577e:	b2ad      	uxth	r5, r5
    5780:	43d2      	mvns	r2, r2
    5782:	3501      	adds	r5, #1
    5784:	b2d2      	uxtb	r2, r2
    5786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    578a:	4405      	add	r5, r0
    578c:	3201      	adds	r2, #1
    578e:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5790:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    5794:	fb02 f303 	mul.w	r3, r2, r3
    5798:	121b      	asrs	r3, r3, #8
    579a:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    579e:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    57a0:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    57a2:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    57a6:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    57aa:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    57ac:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    57ae:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    57b0:	7083      	strb	r3, [r0, #2]
    57b2:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    57b4:	4285      	cmp	r5, r0
    57b6:	f104 0403 	add.w	r4, r4, #3
    57ba:	d1e9      	bne.n	5790 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    57bc:	bc30      	pop	{r4, r5}
    57be:	4770      	bx	lr

000057c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    57c0:	f7ff bfda 	b.w	5778 <fade_raw(CRGB*, unsigned short, unsigned char)>

000057c4 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    57c4:	b322      	cbz	r2, 5810 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    57c6:	2aff      	cmp	r2, #255	; 0xff
    57c8:	d023      	beq.n	5812 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    57ca:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    57cc:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    57ce:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    57d0:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    57d2:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    57d4:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    57d6:	43d2      	mvns	r2, r2
    57d8:	fb06 7605 	mla	r6, r6, r5, r7
    57dc:	b2d2      	uxtb	r2, r2
    57de:	fb04 6402 	mla	r4, r4, r2, r6
    57e2:	f3c4 2407 	ubfx	r4, r4, #8, #8
    57e6:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    57e8:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    57ea:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    57ec:	191f      	adds	r7, r3, r4
    57ee:	fb04 7405 	mla	r4, r4, r5, r7
    57f2:	fb03 4302 	mla	r3, r3, r2, r4
    57f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    57fa:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    57fc:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    57fe:	18f1      	adds	r1, r6, r3
    5800:	fb03 1505 	mla	r5, r3, r5, r1
    5804:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    5808:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    580a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    580e:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    5810:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5812:	780b      	ldrb	r3, [r1, #0]
    5814:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    5816:	784b      	ldrb	r3, [r1, #1]
    5818:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    581a:	788b      	ldrb	r3, [r1, #2]
    581c:	7083      	strb	r3, [r0, #2]
    581e:	4770      	bx	lr

00005820 <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    5820:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    5824:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    5828:	3100      	adds	r1, #0
    582a:	bf18      	it	ne
    582c:	2101      	movne	r1, #1
    582e:	eb01 2123 	add.w	r1, r1, r3, asr #8
    5832:	b2c9      	uxtb	r1, r1
    5834:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    5836:	060a      	lsls	r2, r1, #24
    5838:	b2db      	uxtb	r3, r3
    583a:	d40e      	bmi.n	585a <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    583c:	f001 0140 	and.w	r1, r1, #64	; 0x40
    5840:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    5844:	b919      	cbnz	r1, 584e <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    5846:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    5848:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    584a:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    584c:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    584e:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    5850:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    5852:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    5854:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    5856:	7082      	strb	r2, [r0, #2]
    5858:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    585a:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    585c:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    585e:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    5860:	7042      	strb	r2, [r0, #1]
    5862:	4770      	bx	lr

00005864 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    5864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    5868:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    586a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    586e:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    5872:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    5874:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    5878:	d000      	beq.n	587c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    587a:	b9e6      	cbnz	r6, 58b6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    587c:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    587e:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    5880:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    5882:	2bff      	cmp	r3, #255	; 0xff
    5884:	d012      	beq.n	58ac <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    5886:	2b00      	cmp	r3, #0
    5888:	d043      	beq.n	5912 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    588a:	3301      	adds	r3, #1
    588c:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    588e:	b11c      	cbz	r4, 5898 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5890:	fb03 4404 	mla	r4, r3, r4, r4
    5894:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    5898:	b119      	cbz	r1, 58a2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    589a:	fb03 1101 	mla	r1, r3, r1, r1
    589e:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    58a2:	b11a      	cbz	r2, 58ac <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    58a4:	fb03 2202 	mla	r2, r3, r2, r2
    58a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    58ac:	7004      	strb	r4, [r0, #0]
    58ae:	7041      	strb	r1, [r0, #1]
    58b0:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    58b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    58b6:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    58b8:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    58ba:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    58be:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    58c0:	d000      	beq.n	58c4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    58c2:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    58c4:	0112      	lsls	r2, r2, #4
    58c6:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    58ca:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    58cc:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    58d0:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    58d4:	f891 8002 	ldrb.w	r8, [r1, #2]
    58d8:	fb04 f606 	mul.w	r6, r4, r6
    58dc:	1c51      	adds	r1, r2, #1
    58de:	fb04 f509 	mul.w	r5, r4, r9
    58e2:	fb04 f407 	mul.w	r4, r4, r7
    58e6:	f3c4 2407 	ubfx	r4, r4, #8, #8
    58ea:	f3c6 2707 	ubfx	r7, r6, #8, #8
    58ee:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    58f2:	fb01 f60c 	mul.w	r6, r1, ip
    58f6:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    58fa:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    58fe:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5902:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5906:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    590a:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    590c:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    590e:	b2d2      	uxtb	r2, r2
    5910:	e7b7      	b.n	5882 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    5912:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    5914:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    5916:	461c      	mov	r4, r3
    5918:	7004      	strb	r4, [r0, #0]
    591a:	7041      	strb	r1, [r0, #1]
    591c:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    591e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5922:	bf00      	nop

00005924 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    5924:	b5f0      	push	{r4, r5, r6, r7, lr}
    5926:	3901      	subs	r1, #1
    5928:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    592a:	2500      	movs	r5, #0
    592c:	302f      	adds	r0, #47	; 0x2f
    592e:	e001      	b.n	5934 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    5930:	4284      	cmp	r4, r0
    5932:	d01e      	beq.n	5972 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    5934:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    5938:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    593c:	42b3      	cmp	r3, r6
    593e:	d0f7      	beq.n	5930 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    5940:	f103 0701 	add.w	r7, r3, #1
    5944:	d204      	bcs.n	5950 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    5946:	b2fb      	uxtb	r3, r7
    5948:	7023      	strb	r3, [r4, #0]
    594a:	3501      	adds	r5, #1
    594c:	780e      	ldrb	r6, [r1, #0]
    594e:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    5950:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    5952:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    5954:	b2ff      	uxtb	r7, r7
    5956:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    595a:	d208      	bcs.n	596e <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    595c:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    595e:	780e      	ldrb	r6, [r1, #0]
    5960:	42be      	cmp	r6, r7
    5962:	bf38      	it	cc
    5964:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    5966:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    596a:	bf38      	it	cc
    596c:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    596e:	4295      	cmp	r5, r2
    5970:	d3de      	bcc.n	5930 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    5972:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005974 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    5974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    5976:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    5978:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    597a:	4604      	mov	r4, r0
    597c:	bfcc      	ite	gt
    597e:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    5982:	2500      	movle	r5, #0
    5984:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    5986:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    5988:	bfd8      	it	le
    598a:	4616      	movle	r6, r2

	pLed->init();
    598c:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    598e:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    5990:	6823      	ldr	r3, [r4, #0]
    5992:	6062      	str	r2, [r4, #4]
    5994:	695b      	ldr	r3, [r3, #20]
    5996:	4a0a      	ldr	r2, [pc, #40]	; (59c0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    5998:	6166      	str	r6, [r4, #20]
    599a:	4293      	cmp	r3, r2
    599c:	d101      	bne.n	59a2 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    599e:	4620      	mov	r0, r4
    59a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    59a2:	4620      	mov	r0, r4
    59a4:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    59a6:	2800      	cmp	r0, #0
    59a8:	d0f9      	beq.n	599e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    59aa:	4a06      	ldr	r2, [pc, #24]	; (59c4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    59ac:	4b06      	ldr	r3, [pc, #24]	; (59c8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    59ae:	6851      	ldr	r1, [r2, #4]
    59b0:	fb93 f0f0 	sdiv	r0, r3, r0
    59b4:	4288      	cmp	r0, r1
    59b6:	bf38      	it	cc
    59b8:	4608      	movcc	r0, r1
    59ba:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    59bc:	4620      	mov	r0, r4
    59be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59c0:	00000471 	.word	0x00000471
    59c4:	1fff133c 	.word	0x1fff133c
    59c8:	000f4240 	.word	0x000f4240

000059cc <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    59cc:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    59ce:	4c0f      	ldr	r4, [pc, #60]	; (5a0c <CFastLED::countFPS(int)+0x40>)
    59d0:	6822      	ldr	r2, [r4, #0]
    59d2:	1c53      	adds	r3, r2, #1
    59d4:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    59d6:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    59d8:	6023      	str	r3, [r4, #0]
    59da:	db13      	blt.n	5a04 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    59dc:	4d0c      	ldr	r5, [pc, #48]	; (5a10 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    59de:	4a0d      	ldr	r2, [pc, #52]	; (5a14 <CFastLED::countFPS(int)+0x48>)
    59e0:	6829      	ldr	r1, [r5, #0]
    59e2:	9101      	str	r1, [sp, #4]
	return ret;
    59e4:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    59e6:	682d      	ldr	r5, [r5, #0]
    59e8:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    59ea:	6816      	ldr	r6, [r2, #0]
	return ret;
    59ec:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    59ee:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    59f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    59f4:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    59f6:	1b89      	subs	r1, r1, r6
    59f8:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    59fc:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    59fe:	fbb3 f3f1 	udiv	r3, r3, r1
    5a02:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    5a04:	b003      	add	sp, #12
    5a06:	bc70      	pop	{r4, r5, r6}
    5a08:	4770      	bx	lr
    5a0a:	bf00      	nop
    5a0c:	1fff1350 	.word	0x1fff1350
    5a10:	1fff1368 	.word	0x1fff1368
    5a14:	1fff1358 	.word	0x1fff1358

00005a18 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    5a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a1c:	6843      	ldr	r3, [r0, #4]
    5a1e:	4c2d      	ldr	r4, [pc, #180]	; (5ad4 <CFastLED::show(unsigned char)+0xbc>)
    5a20:	b083      	sub	sp, #12
    5a22:	4606      	mov	r6, r0
    5a24:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    5a26:	2b00      	cmp	r3, #0
    5a28:	d14b      	bne.n	5ac2 <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    5a2a:	f000 fc01 	bl	6230 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    5a2e:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    5a30:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    5a32:	b11b      	cbz	r3, 5a3c <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    5a34:	4648      	mov	r0, r9
    5a36:	68b1      	ldr	r1, [r6, #8]
    5a38:	4798      	blx	r3
    5a3a:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    5a3c:	4b26      	ldr	r3, [pc, #152]	; (5ad8 <CFastLED::show(unsigned char)+0xc0>)
    5a3e:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5a40:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5a42:	2c00      	cmp	r4, #0
    5a44:	d036      	beq.n	5ab4 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    5a46:	8873      	ldrh	r3, [r6, #2]
    5a48:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    5a4a:	6861      	ldr	r1, [r4, #4]
    5a4c:	6962      	ldr	r2, [r4, #20]
    5a4e:	2b63      	cmp	r3, #99	; 0x63
    5a50:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5a52:	bf98      	it	ls
    5a54:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    5a56:	f8d3 8004 	ldr.w	r8, [r3, #4]
    5a5a:	f88d 5004 	strb.w	r5, [sp, #4]
    5a5e:	f88d 5005 	strb.w	r5, [sp, #5]
    5a62:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    5a66:	f1b9 0f00 	cmp.w	r9, #0
    5a6a:	d01c      	beq.n	5aa6 <CFastLED::show(unsigned char)+0x8e>
    5a6c:	f104 030b 	add.w	r3, r4, #11
    5a70:	f10d 0e04 	add.w	lr, sp, #4
    5a74:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    5a78:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5a7c:	f1bb 0f00 	cmp.w	fp, #0
    5a80:	d00d      	beq.n	5a9e <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    5a82:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    5a86:	f10a 0001 	add.w	r0, sl, #1
    5a8a:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5a8e:	f1ba 0f00 	cmp.w	sl, #0
    5a92:	d004      	beq.n	5a9e <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    5a94:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    5a98:	0c00      	lsrs	r0, r0, #16
    5a9a:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    5a9e:	4563      	cmp	r3, ip
    5aa0:	f10e 0e01 	add.w	lr, lr, #1
    5aa4:	d1e8      	bne.n	5a78 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    5aa6:	4620      	mov	r0, r4
    5aa8:	ab01      	add	r3, sp, #4
    5aaa:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5aac:	74a7      	strb	r7, [r4, #18]
    5aae:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5ab0:	2c00      	cmp	r4, #0
    5ab2:	d1c8      	bne.n	5a46 <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    5ab4:	4630      	mov	r0, r6
    5ab6:	2119      	movs	r1, #25
    5ab8:	f7ff ff88 	bl	59cc <CFastLED::countFPS(int)>
}
    5abc:	b003      	add	sp, #12
    5abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    5ac2:	f000 fbb5 	bl	6230 <micros>
    5ac6:	6822      	ldr	r2, [r4, #0]
    5ac8:	6873      	ldr	r3, [r6, #4]
    5aca:	1a80      	subs	r0, r0, r2
    5acc:	4298      	cmp	r0, r3
    5ace:	d3aa      	bcc.n	5a26 <CFastLED::show(unsigned char)+0xe>
    5ad0:	e7ab      	b.n	5a2a <CFastLED::show(unsigned char)+0x12>
    5ad2:	bf00      	nop
    5ad4:	1fff1354 	.word	0x1fff1354
    5ad8:	1fff134c 	.word	0x1fff134c

00005adc <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    5adc:	2000      	movs	r0, #0
    5ade:	4770      	bx	lr

00005ae0 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5ae0:	4b04      	ldr	r3, [pc, #16]	; (5af4 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    5ae2:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5ae4:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    5ae6:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5aea:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    5aec:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    5aee:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    5af0:	60da      	str	r2, [r3, #12]
    5af2:	4770      	bx	lr
    5af4:	1fff133c 	.word	0x1fff133c

00005af8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    5af8:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    5afa:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    5afc:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    5afe:	7882      	ldrb	r2, [r0, #2]
    5b00:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5b02:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    5b06:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5b0a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    5b0e:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    5b10:	0625      	lsls	r5, r4, #24
    5b12:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5b16:	d45f      	bmi.n	5bd8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    5b18:	f004 0540 	and.w	r5, r4, #64	; 0x40
    5b1c:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    5b20:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    5b24:	2d00      	cmp	r5, #0
    5b26:	d146      	bne.n	5bb6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    5b28:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    5b2c:	2c00      	cmp	r4, #0
    5b2e:	d06c      	beq.n	5c0a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    5b30:	3355      	adds	r3, #85	; 0x55
    5b32:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    5b34:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    5b36:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    5b38:	2eff      	cmp	r6, #255	; 0xff
    5b3a:	d01c      	beq.n	5b76 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    5b3c:	2e00      	cmp	r6, #0
    5b3e:	d079      	beq.n	5c34 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    5b40:	b11c      	cbz	r4, 5b4a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5b42:	fb06 4404 	mla	r4, r6, r4, r4
    5b46:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    5b4a:	b11d      	cbz	r5, 5b54 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    5b4c:	fb06 5505 	mla	r5, r6, r5, r5
    5b50:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    5b54:	b11b      	cbz	r3, 5b5e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    5b56:	fb06 3303 	mla	r3, r6, r3, r3
    5b5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5b5e:	43f0      	mvns	r0, r6
    5b60:	b2c0      	uxtb	r0, r0
    5b62:	fb00 0000 	mla	r0, r0, r0, r0
    5b66:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    5b6a:	4404      	add	r4, r0
            g += brightness_floor;
    5b6c:	4405      	add	r5, r0
            b += brightness_floor;
    5b6e:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    5b70:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    5b72:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    5b74:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    5b76:	2aff      	cmp	r2, #255	; 0xff
    5b78:	d018      	beq.n	5bac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    5b7a:	fb12 f002 	smulbb	r0, r2, r2
    5b7e:	3200      	adds	r2, #0
    5b80:	bf18      	it	ne
    5b82:	2201      	movne	r2, #1
    5b84:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    5b88:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    5b8c:	d056      	beq.n	5c3c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    5b8e:	b11c      	cbz	r4, 5b98 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5b90:	fb02 4404 	mla	r4, r2, r4, r4
    5b94:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    5b98:	b11d      	cbz	r5, 5ba2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    5b9a:	fb02 5505 	mla	r5, r2, r5, r5
    5b9e:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    5ba2:	b11b      	cbz	r3, 5bac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    5ba4:	fb02 3303 	mla	r3, r2, r3, r3
    5ba8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    5bac:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    5bae:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    5bb0:	708b      	strb	r3, [r1, #2]
}
    5bb2:	bcf0      	pop	{r4, r5, r6, r7}
    5bb4:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    5bb6:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    5bba:	bb5c      	cbnz	r4, 5c14 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5bbc:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    5bc0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    5bc4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    5bc8:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    5bca:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5bcc:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    5bd0:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5bd2:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    5bd4:	463b      	mov	r3, r7
    5bd6:	e7af      	b.n	5b38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    5bd8:	f004 0740 	and.w	r7, r4, #64	; 0x40
    5bdc:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    5be0:	b9e7      	cbnz	r7, 5c1c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    5be2:	f004 0720 	and.w	r7, r4, #32
    5be6:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    5bea:	2f00      	cmp	r7, #0
    5bec:	d136      	bne.n	5c5c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5bee:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    5bf2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    5bf6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    5bfa:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    5bfe:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    5c02:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    5c04:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    5c06:	b2c3      	uxtb	r3, r0
    5c08:	e796      	b.n	5b38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    5c0a:	43dc      	mvns	r4, r3
    5c0c:	b2e4      	uxtb	r4, r4
                g = third;
    5c0e:	461d      	mov	r5, r3
                b = 0;
    5c10:	4603      	mov	r3, r0
    5c12:	e791      	b.n	5b38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    5c14:	2400      	movs	r4, #0
                g = K255 - third;
    5c16:	43dd      	mvns	r5, r3
    5c18:	b2ed      	uxtb	r5, r5
    5c1a:	e78d      	b.n	5b38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    5c1c:	f004 0420 	and.w	r4, r4, #32
    5c20:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    5c24:	b994      	cbnz	r4, 5c4c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    5c26:	f103 0455 	add.w	r4, r3, #85	; 0x55
    5c2a:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    5c2c:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    5c30:	b2db      	uxtb	r3, r3
    5c32:	e781      	b.n	5b38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    5c34:	23ff      	movs	r3, #255	; 0xff
    5c36:	461d      	mov	r5, r3
    5c38:	461c      	mov	r4, r3
    5c3a:	e79c      	b.n	5b76 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    5c3c:	4615      	mov	r5, r2
    5c3e:	4614      	mov	r4, r2
    5c40:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    5c42:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    5c44:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    5c46:	708b      	strb	r3, [r1, #2]
}
    5c48:	bcf0      	pop	{r4, r5, r6, r7}
    5c4a:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    5c4c:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    5c50:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    5c52:	2500      	movs	r5, #0
                b = K85 - third;
    5c54:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    5c58:	b2db      	uxtb	r3, r3
    5c5a:	e76d      	b.n	5b38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    5c5c:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    5c5e:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    5c60:	b2c3      	uxtb	r3, r0
    5c62:	e769      	b.n	5b38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00005c64 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    5c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5c66:	b361      	cbz	r1, 5cc2 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    5c68:	f101 3eff 	add.w	lr, r1, #4294967295
    5c6c:	fa1f fe8e 	uxth.w	lr, lr
    5c70:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    5c74:	2200      	movs	r2, #0
    5c76:	f10e 0e06 	add.w	lr, lr, #6
    5c7a:	4486      	add	lr, r0
    5c7c:	1cc3      	adds	r3, r0, #3
    5c7e:	4615      	mov	r5, r2
    5c80:	4614      	mov	r4, r2
        red32   += *p++;
    5c82:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    5c86:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    5c8a:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    5c8e:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5c90:	4573      	cmp	r3, lr
        red32   += *p++;
    5c92:	443c      	add	r4, r7
        green32 += *p++;
    5c94:	4405      	add	r5, r0
        blue32  += *p++;
    5c96:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5c98:	d1f3      	bne.n	5c82 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    5c9a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5c9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5ca2:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    5ca6:	f3c4 1317 	ubfx	r3, r4, #4, #24
    5caa:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    5cae:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    5cb2:	0a12      	lsrs	r2, r2, #8
    5cb4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    5cb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5cbc:	1910      	adds	r0, r2, r4
}
    5cbe:	4408      	add	r0, r1
    5cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5cc2:	460c      	mov	r4, r1
    5cc4:	460a      	mov	r2, r1
    5cc6:	e7f7      	b.n	5cb8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

00005cc8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    5cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    5ccc:	4b25      	ldr	r3, [pc, #148]	; (5d64 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    5cce:	681c      	ldr	r4, [r3, #0]
    5cd0:	b085      	sub	sp, #20
    5cd2:	4607      	mov	r7, r0
    5cd4:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5cd6:	b19c      	cbz	r4, 5d00 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    5cd8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 5d70 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    5cdc:	257d      	movs	r5, #125	; 0x7d
    5cde:	e007      	b.n	5cf0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    5ce0:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    5ce2:	b281      	uxth	r1, r0
    5ce4:	4630      	mov	r0, r6
    5ce6:	f7ff ffbd 	bl	5c64 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    5cea:	68a4      	ldr	r4, [r4, #8]
    5cec:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5cee:	b144      	cbz	r4, 5d02 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    5cf0:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    5cf4:	691b      	ldr	r3, [r3, #16]
    5cf6:	454b      	cmp	r3, r9
    5cf8:	d0f2      	beq.n	5ce0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    5cfa:	4620      	mov	r0, r4
    5cfc:	4798      	blx	r3
    5cfe:	e7f0      	b.n	5ce2 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    5d00:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    5d02:	fb05 f507 	mul.w	r5, r5, r7
    5d06:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    5d08:	4b17      	ldr	r3, [pc, #92]	; (5d68 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    5d0a:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    5d0c:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    5d0e:	d210      	bcs.n	5d32 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    5d10:	b323      	cbz	r3, 5d5c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    5d12:	4a16      	ldr	r2, [pc, #88]	; (5d6c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    5d14:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    5d16:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    5d1a:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    5d1e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    5d22:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    5d24:	4638      	mov	r0, r7
    5d26:	ea23 0301 	bic.w	r3, r3, r1
    5d2a:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    5d2c:	b005      	add	sp, #20
    5d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    5d32:	fb08 f707 	mul.w	r7, r8, r7
    5d36:	fbb7 f0f5 	udiv	r0, r7, r5
    5d3a:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    5d3c:	b173      	cbz	r3, 5d5c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    5d3e:	4a0b      	ldr	r2, [pc, #44]	; (5d6c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    5d40:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    5d42:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    5d46:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    5d4a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    5d4e:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    5d50:	4638      	mov	r0, r7
    5d52:	430b      	orrs	r3, r1
    5d54:	7013      	strb	r3, [r2, #0]
}
    5d56:	b005      	add	sp, #20
    5d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    5d5c:	4638      	mov	r0, r7
}
    5d5e:	b005      	add	sp, #20
    5d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5d64:	1fff134c 	.word	0x1fff134c
    5d68:	1fff1360 	.word	0x1fff1360
    5d6c:	00009d78 	.word	0x00009d78
    5d70:	0000046d 	.word	0x0000046d

00005d74 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    5d74:	4b03      	ldr	r3, [pc, #12]	; (5d84 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    5d76:	4a04      	ldr	r2, [pc, #16]	; (5d88 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    5d78:	60da      	str	r2, [r3, #12]
    5d7a:	fb01 f100 	mul.w	r1, r1, r0
    5d7e:	6099      	str	r1, [r3, #8]
    5d80:	4770      	bx	lr
    5d82:	bf00      	nop
    5d84:	1fff133c 	.word	0x1fff133c
    5d88:	00005cc9 	.word	0x00005cc9

00005d8c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    5d8c:	4a37      	ldr	r2, [pc, #220]	; (5e6c <wait_for_cal+0xe0>)
    5d8e:	4938      	ldr	r1, [pc, #224]	; (5e70 <wait_for_cal+0xe4>)
    5d90:	6813      	ldr	r3, [r2, #0]
    5d92:	061b      	lsls	r3, r3, #24
    5d94:	d4fc      	bmi.n	5d90 <wait_for_cal+0x4>
    5d96:	680b      	ldr	r3, [r1, #0]
    5d98:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    5d9c:	d1f8      	bne.n	5d90 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    5d9e:	b672      	cpsid	i
	if (calibrating) {
    5da0:	4934      	ldr	r1, [pc, #208]	; (5e74 <wait_for_cal+0xe8>)
    5da2:	780a      	ldrb	r2, [r1, #0]
    5da4:	2a00      	cmp	r2, #0
    5da6:	d05f      	beq.n	5e68 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    5da8:	4a33      	ldr	r2, [pc, #204]	; (5e78 <wait_for_cal+0xec>)
    5daa:	4834      	ldr	r0, [pc, #208]	; (5e7c <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    5dac:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    5dae:	4c34      	ldr	r4, [pc, #208]	; (5e80 <wait_for_cal+0xf4>)
    5db0:	6817      	ldr	r7, [r2, #0]
    5db2:	6806      	ldr	r6, [r0, #0]
    5db4:	6825      	ldr	r5, [r4, #0]
    5db6:	68d4      	ldr	r4, [r2, #12]
    5db8:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    5dba:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    5dbc:	3214      	adds	r2, #20
    5dbe:	6800      	ldr	r0, [r0, #0]
    5dc0:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    5dc2:	4f30      	ldr	r7, [pc, #192]	; (5e84 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    5dc4:	4435      	add	r5, r6
    5dc6:	442c      	add	r4, r5
    5dc8:	4420      	add	r0, r4
    5dca:	4402      	add	r2, r0
    5dcc:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    5dd0:	4e2d      	ldr	r6, [pc, #180]	; (5e88 <wait_for_cal+0xfc>)
    5dd2:	482e      	ldr	r0, [pc, #184]	; (5e8c <wait_for_cal+0x100>)
    5dd4:	4d2e      	ldr	r5, [pc, #184]	; (5e90 <wait_for_cal+0x104>)
    5dd6:	4c2f      	ldr	r4, [pc, #188]	; (5e94 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    5dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    5ddc:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    5dde:	6837      	ldr	r7, [r6, #0]
    5de0:	6806      	ldr	r6, [r0, #0]
    5de2:	682d      	ldr	r5, [r5, #0]
    5de4:	4a2c      	ldr	r2, [pc, #176]	; (5e98 <wait_for_cal+0x10c>)
    5de6:	6824      	ldr	r4, [r4, #0]
    5de8:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    5dea:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    5dec:	6800      	ldr	r0, [r0, #0]
    5dee:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    5df0:	4f2a      	ldr	r7, [pc, #168]	; (5e9c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    5df2:	4435      	add	r5, r6
    5df4:	442c      	add	r4, r5
    5df6:	4420      	add	r0, r4
    5df8:	4402      	add	r2, r0
    5dfa:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    5dfe:	4e28      	ldr	r6, [pc, #160]	; (5ea0 <wait_for_cal+0x114>)
    5e00:	4828      	ldr	r0, [pc, #160]	; (5ea4 <wait_for_cal+0x118>)
    5e02:	4d29      	ldr	r5, [pc, #164]	; (5ea8 <wait_for_cal+0x11c>)
    5e04:	4c29      	ldr	r4, [pc, #164]	; (5eac <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    5e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    5e0a:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    5e0c:	6837      	ldr	r7, [r6, #0]
    5e0e:	6806      	ldr	r6, [r0, #0]
    5e10:	682d      	ldr	r5, [r5, #0]
    5e12:	4a27      	ldr	r2, [pc, #156]	; (5eb0 <wait_for_cal+0x124>)
    5e14:	6824      	ldr	r4, [r4, #0]
    5e16:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    5e18:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    5e1a:	6800      	ldr	r0, [r0, #0]
    5e1c:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    5e1e:	4f25      	ldr	r7, [pc, #148]	; (5eb4 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    5e20:	4435      	add	r5, r6
    5e22:	442c      	add	r4, r5
    5e24:	4420      	add	r0, r4
    5e26:	4402      	add	r2, r0
    5e28:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    5e2c:	4e22      	ldr	r6, [pc, #136]	; (5eb8 <wait_for_cal+0x12c>)
    5e2e:	4823      	ldr	r0, [pc, #140]	; (5ebc <wait_for_cal+0x130>)
    5e30:	4d23      	ldr	r5, [pc, #140]	; (5ec0 <wait_for_cal+0x134>)
    5e32:	4c24      	ldr	r4, [pc, #144]	; (5ec4 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    5e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    5e38:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    5e3a:	6837      	ldr	r7, [r6, #0]
    5e3c:	6806      	ldr	r6, [r0, #0]
    5e3e:	682d      	ldr	r5, [r5, #0]
    5e40:	4a21      	ldr	r2, [pc, #132]	; (5ec8 <wait_for_cal+0x13c>)
    5e42:	6824      	ldr	r4, [r4, #0]
    5e44:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    5e46:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    5e48:	6800      	ldr	r0, [r0, #0]
    5e4a:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    5e4c:	4435      	add	r5, r6
    5e4e:	442c      	add	r4, r5
    5e50:	4420      	add	r0, r4
    5e52:	4402      	add	r2, r0
    5e54:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    5e58:	481c      	ldr	r0, [pc, #112]	; (5ecc <wait_for_cal+0x140>)
    5e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    5e5e:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    5e60:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    5e62:	b662      	cpsie	i
}
    5e64:	bcf0      	pop	{r4, r5, r6, r7}
    5e66:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    5e68:	b662      	cpsie	i
    5e6a:	4770      	bx	lr
    5e6c:	4003b024 	.word	0x4003b024
    5e70:	400bb024 	.word	0x400bb024
    5e74:	1fff1362 	.word	0x1fff1362
    5e78:	4003b038 	.word	0x4003b038
    5e7c:	4003b03c 	.word	0x4003b03c
    5e80:	4003b040 	.word	0x4003b040
    5e84:	4003b02c 	.word	0x4003b02c
    5e88:	4003b058 	.word	0x4003b058
    5e8c:	4003b05c 	.word	0x4003b05c
    5e90:	4003b060 	.word	0x4003b060
    5e94:	4003b064 	.word	0x4003b064
    5e98:	4003b06c 	.word	0x4003b06c
    5e9c:	4003b030 	.word	0x4003b030
    5ea0:	400bb038 	.word	0x400bb038
    5ea4:	400bb03c 	.word	0x400bb03c
    5ea8:	400bb040 	.word	0x400bb040
    5eac:	400bb044 	.word	0x400bb044
    5eb0:	400bb04c 	.word	0x400bb04c
    5eb4:	400bb02c 	.word	0x400bb02c
    5eb8:	400bb058 	.word	0x400bb058
    5ebc:	400bb05c 	.word	0x400bb05c
    5ec0:	400bb060 	.word	0x400bb060
    5ec4:	400bb064 	.word	0x400bb064
    5ec8:	400bb06c 	.word	0x400bb06c
    5ecc:	400bb030 	.word	0x400bb030

00005ed0 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    5ed0:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5ed2:	4829      	ldr	r0, [pc, #164]	; (5f78 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5ed4:	4a29      	ldr	r2, [pc, #164]	; (5f7c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    5ed6:	4b2a      	ldr	r3, [pc, #168]	; (5f80 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5ed8:	4d2a      	ldr	r5, [pc, #168]	; (5f84 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5eda:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5edc:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5ede:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5ee0:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    5ee2:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5ee4:	4c28      	ldr	r4, [pc, #160]	; (5f88 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    5ee6:	2b08      	cmp	r3, #8
    5ee8:	d030      	beq.n	5f4c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    5eea:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5eec:	4827      	ldr	r0, [pc, #156]	; (5f8c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5eee:	4928      	ldr	r1, [pc, #160]	; (5f90 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    5ef0:	d037      	beq.n	5f62 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    5ef2:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    5ef4:	bf0c      	ite	eq
    5ef6:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    5ef8:	225d      	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    5efa:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    5efc:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    5efe:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    5f00:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    5f02:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    5f04:	4b23      	ldr	r3, [pc, #140]	; (5f94 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5f06:	4924      	ldr	r1, [pc, #144]	; (5f98 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    5f08:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5f0a:	4a24      	ldr	r2, [pc, #144]	; (5f9c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    5f0c:	b1bb      	cbz	r3, 5f3e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5f0e:	2301      	movs	r3, #1
    5f10:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5f12:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    5f14:	4b22      	ldr	r3, [pc, #136]	; (5fa0 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    5f16:	4923      	ldr	r1, [pc, #140]	; (5fa4 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    5f18:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    5f1a:	4a23      	ldr	r2, [pc, #140]	; (5fa8 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    5f1c:	2b01      	cmp	r3, #1
    5f1e:	d926      	bls.n	5f6e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    5f20:	2b04      	cmp	r3, #4
    5f22:	d90f      	bls.n	5f44 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    5f24:	2b08      	cmp	r3, #8
    5f26:	d91e      	bls.n	5f66 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    5f28:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    5f2a:	bf94      	ite	ls
    5f2c:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    5f2e:	2387      	movhi	r3, #135	; 0x87
    5f30:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    5f32:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    5f34:	4b1d      	ldr	r3, [pc, #116]	; (5fac <analog_init+0xdc>)
    5f36:	2201      	movs	r2, #1
    5f38:	701a      	strb	r2, [r3, #0]
}
    5f3a:	bc30      	pop	{r4, r5}
    5f3c:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    5f3e:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    5f40:	6013      	str	r3, [r2, #0]
    5f42:	e7e7      	b.n	5f14 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    5f44:	2384      	movs	r3, #132	; 0x84
    5f46:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    5f48:	6013      	str	r3, [r2, #0]
    5f4a:	e7f3      	b.n	5f34 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5f4c:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5f50:	490f      	ldr	r1, [pc, #60]	; (5f90 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5f52:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5f54:	2221      	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5f56:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5f58:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5f5a:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5f5c:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5f5e:	600b      	str	r3, [r1, #0]
    5f60:	e7d0      	b.n	5f04 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5f62:	2239      	movs	r2, #57	; 0x39
    5f64:	e7f7      	b.n	5f56 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    5f66:	2385      	movs	r3, #133	; 0x85
    5f68:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    5f6a:	6013      	str	r3, [r2, #0]
    5f6c:	e7e2      	b.n	5f34 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    5f6e:	2380      	movs	r3, #128	; 0x80
    5f70:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    5f72:	6013      	str	r3, [r2, #0]
    5f74:	e7de      	b.n	5f34 <analog_init+0x64>
    5f76:	bf00      	nop
    5f78:	40074000 	.word	0x40074000
    5f7c:	40074001 	.word	0x40074001
    5f80:	1fff0794 	.word	0x1fff0794
    5f84:	4003b008 	.word	0x4003b008
    5f88:	4003b00c 	.word	0x4003b00c
    5f8c:	400bb008 	.word	0x400bb008
    5f90:	400bb00c 	.word	0x400bb00c
    5f94:	1fff1365 	.word	0x1fff1365
    5f98:	4003b020 	.word	0x4003b020
    5f9c:	400bb020 	.word	0x400bb020
    5fa0:	1fff0795 	.word	0x1fff0795
    5fa4:	4003b024 	.word	0x4003b024
    5fa8:	400bb024 	.word	0x400bb024
    5fac:	1fff1362 	.word	0x1fff1362

00005fb0 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    5fb0:	2847      	cmp	r0, #71	; 0x47
    5fb2:	d82f      	bhi.n	6014 <analogRead+0x64>
	channel = pin2sc1a[pin];
    5fb4:	4b33      	ldr	r3, [pc, #204]	; (6084 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    5fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    5fba:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    5fbc:	2eff      	cmp	r6, #255	; 0xff
    5fbe:	d02b      	beq.n	6018 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    5fc0:	4b31      	ldr	r3, [pc, #196]	; (6088 <analogRead+0xd8>)
    5fc2:	781b      	ldrb	r3, [r3, #0]
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d12a      	bne.n	601e <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    5fc8:	0632      	lsls	r2, r6, #24
    5fca:	d42c      	bmi.n	6026 <analogRead+0x76>
#endif

	__disable_irq();
    5fcc:	b672      	cpsid	i
    5fce:	4d2f      	ldr	r5, [pc, #188]	; (608c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    5fd0:	4c2f      	ldr	r4, [pc, #188]	; (6090 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    5fd2:	462f      	mov	r7, r5
    5fd4:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    5fd6:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    5fd8:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    5fda:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    5fdc:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    5fde:	6823      	ldr	r3, [r4, #0]
    5fe0:	061b      	lsls	r3, r3, #24
    5fe2:	d40c      	bmi.n	5ffe <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    5fe4:	783b      	ldrb	r3, [r7, #0]
    5fe6:	b91b      	cbnz	r3, 5ff0 <analogRead+0x40>
    5fe8:	e7f4      	b.n	5fd4 <analogRead+0x24>
    5fea:	782b      	ldrb	r3, [r5, #0]
    5fec:	2b00      	cmp	r3, #0
    5fee:	d0f1      	beq.n	5fd4 <analogRead+0x24>
		__enable_irq();
    5ff0:	b662      	cpsie	i
		yield();
    5ff2:	f001 fc23 	bl	783c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    5ff6:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    5ff8:	6823      	ldr	r3, [r4, #0]
    5ffa:	0618      	lsls	r0, r3, #24
    5ffc:	d5f5      	bpl.n	5fea <analogRead+0x3a>
			result = ADC0_RA;
    5ffe:	4b25      	ldr	r3, [pc, #148]	; (6094 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    6000:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    6002:	2200      	movs	r2, #0
    6004:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    6006:	b662      	cpsie	i
			result >>= analog_right_shift;
    6008:	4a23      	ldr	r2, [pc, #140]	; (6098 <analogRead+0xe8>)
    600a:	7810      	ldrb	r0, [r2, #0]
    600c:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    6010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    6014:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    6016:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    6018:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    601a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    601e:	f7ff feb5 	bl	5d8c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    6022:	0632      	lsls	r2, r6, #24
    6024:	d5d2      	bpl.n	5fcc <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    6026:	b672      	cpsid	i
    6028:	4d1c      	ldr	r5, [pc, #112]	; (609c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    602a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 60a8 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    602e:	4c1c      	ldr	r4, [pc, #112]	; (60a0 <analogRead+0xf0>)
    6030:	f006 0740 	and.w	r7, r6, #64	; 0x40
    6034:	b2ff      	uxtb	r7, r7
    6036:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    603a:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    603e:	b1df      	cbz	r7, 6078 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    6040:	f023 0310 	bic.w	r3, r3, #16
    6044:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    6048:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    604a:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    604c:	4a13      	ldr	r2, [pc, #76]	; (609c <analogRead+0xec>)
    604e:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    6050:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    6052:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    6054:	6823      	ldr	r3, [r4, #0]
    6056:	0619      	lsls	r1, r3, #24
    6058:	d40c      	bmi.n	6074 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    605a:	7813      	ldrb	r3, [r2, #0]
    605c:	b91b      	cbnz	r3, 6066 <analogRead+0xb6>
    605e:	e7ec      	b.n	603a <analogRead+0x8a>
    6060:	782b      	ldrb	r3, [r5, #0]
    6062:	2b00      	cmp	r3, #0
    6064:	d0e9      	beq.n	603a <analogRead+0x8a>
		__enable_irq();
    6066:	b662      	cpsie	i
		yield();
    6068:	f001 fbe8 	bl	783c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    606c:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    606e:	6823      	ldr	r3, [r4, #0]
    6070:	061b      	lsls	r3, r3, #24
    6072:	d5f5      	bpl.n	6060 <analogRead+0xb0>
			result = ADC1_RA;
    6074:	4b0b      	ldr	r3, [pc, #44]	; (60a4 <analogRead+0xf4>)
    6076:	e7c3      	b.n	6000 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    6078:	f043 0310 	orr.w	r3, r3, #16
    607c:	f8c8 3000 	str.w	r3, [r8]
    6080:	e7e2      	b.n	6048 <analogRead+0x98>
    6082:	bf00      	nop
    6084:	00009d30 	.word	0x00009d30
    6088:	1fff1362 	.word	0x1fff1362
    608c:	1fff1364 	.word	0x1fff1364
    6090:	4003b000 	.word	0x4003b000
    6094:	4003b010 	.word	0x4003b010
    6098:	1fff1361 	.word	0x1fff1361
    609c:	1fff1363 	.word	0x1fff1363
    60a0:	400bb000 	.word	0x400bb000
    60a4:	400bb010 	.word	0x400bb010
    60a8:	400bb00c 	.word	0x400bb00c

000060ac <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    60ac:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    60ae:	4c10      	ldr	r4, [pc, #64]	; (60f0 <fault_isr+0x44>)
    60b0:	e008      	b.n	60c4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    60b2:	6823      	ldr	r3, [r4, #0]
    60b4:	0559      	lsls	r1, r3, #21
    60b6:	d40d      	bmi.n	60d4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    60b8:	6823      	ldr	r3, [r4, #0]
    60ba:	051a      	lsls	r2, r3, #20
    60bc:	d40f      	bmi.n	60de <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    60be:	6823      	ldr	r3, [r4, #0]
    60c0:	04db      	lsls	r3, r3, #19
    60c2:	d411      	bmi.n	60e8 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    60c4:	6823      	ldr	r3, [r4, #0]
    60c6:	0358      	lsls	r0, r3, #13
    60c8:	d5f3      	bpl.n	60b2 <fault_isr+0x6>
    60ca:	f000 fab7 	bl	663c <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    60ce:	6823      	ldr	r3, [r4, #0]
    60d0:	0559      	lsls	r1, r3, #21
    60d2:	d5f1      	bpl.n	60b8 <fault_isr+0xc>
    60d4:	f001 fc4a 	bl	796c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    60d8:	6823      	ldr	r3, [r4, #0]
    60da:	051a      	lsls	r2, r3, #20
    60dc:	d5ef      	bpl.n	60be <fault_isr+0x12>
    60de:	f001 fcdb 	bl	7a98 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    60e2:	6823      	ldr	r3, [r4, #0]
    60e4:	04db      	lsls	r3, r3, #19
    60e6:	d5ed      	bpl.n	60c4 <fault_isr+0x18>
    60e8:	f001 fd6c 	bl	7bc4 <uart2_status_isr>
    60ec:	e7ea      	b.n	60c4 <fault_isr+0x18>
    60ee:	bf00      	nop
    60f0:	40048034 	.word	0x40048034

000060f4 <unused_isr>:
	}
}

void unused_isr(void)
{
    60f4:	b508      	push	{r3, lr}
	fault_isr();
    60f6:	f7ff ffd9 	bl	60ac <fault_isr>
    60fa:	bf00      	nop

000060fc <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    60fc:	4b01      	ldr	r3, [pc, #4]	; (6104 <startup_early_hook+0x8>)
    60fe:	2210      	movs	r2, #16
    6100:	801a      	strh	r2, [r3, #0]
    6102:	4770      	bx	lr
    6104:	40052000 	.word	0x40052000

00006108 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    6108:	4770      	bx	lr
    610a:	bf00      	nop

0000610c <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    610c:	7800      	ldrb	r0, [r0, #0]
}
    610e:	fab0 f080 	clz	r0, r0
    6112:	0940      	lsrs	r0, r0, #5
    6114:	4770      	bx	lr
    6116:	bf00      	nop

00006118 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    6118:	2301      	movs	r3, #1
    611a:	7003      	strb	r3, [r0, #0]
    611c:	4770      	bx	lr
    611e:	bf00      	nop

00006120 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    6120:	4a08      	ldr	r2, [pc, #32]	; (6144 <kinetis_hsrun_disable+0x24>)
    6122:	7813      	ldrb	r3, [r2, #0]
    6124:	2b80      	cmp	r3, #128	; 0x80
    6126:	d001      	beq.n	612c <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    6128:	2000      	movs	r0, #0
}
    612a:	4770      	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    612c:	4906      	ldr	r1, [pc, #24]	; (6148 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    612e:	4b07      	ldr	r3, [pc, #28]	; (614c <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    6130:	4807      	ldr	r0, [pc, #28]	; (6150 <kinetis_hsrun_disable+0x30>)
    6132:	6008      	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    6134:	2100      	movs	r1, #0
    6136:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    6138:	7813      	ldrb	r3, [r2, #0]
    613a:	2b80      	cmp	r3, #128	; 0x80
    613c:	d0fc      	beq.n	6138 <kinetis_hsrun_disable+0x18>
		return 1;
    613e:	2001      	movs	r0, #1
    6140:	4770      	bx	lr
    6142:	bf00      	nop
    6144:	4007e003 	.word	0x4007e003
    6148:	40048044 	.word	0x40048044
    614c:	4007e001 	.word	0x4007e001
    6150:	22280000 	.word	0x22280000

00006154 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    6154:	4a09      	ldr	r2, [pc, #36]	; (617c <kinetis_hsrun_enable+0x28>)
    6156:	7813      	ldrb	r3, [r2, #0]
    6158:	2b01      	cmp	r3, #1
    615a:	d001      	beq.n	6160 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    615c:	2000      	movs	r0, #0
}
    615e:	4770      	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    6160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6164:	f503 23fc 	add.w	r3, r3, #516096	; 0x7e000
    6168:	2160      	movs	r1, #96	; 0x60
    616a:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    616c:	7813      	ldrb	r3, [r2, #0]
    616e:	2b80      	cmp	r3, #128	; 0x80
    6170:	d1fc      	bne.n	616c <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    6172:	4b03      	ldr	r3, [pc, #12]	; (6180 <kinetis_hsrun_enable+0x2c>)
    6174:	4a03      	ldr	r2, [pc, #12]	; (6184 <kinetis_hsrun_enable+0x30>)
    6176:	601a      	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    6178:	2001      	movs	r0, #1
    617a:	4770      	bx	lr
    617c:	4007e003 	.word	0x4007e003
    6180:	40048044 	.word	0x40048044
    6184:	02060000 	.word	0x02060000

00006188 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    6188:	4a1c      	ldr	r2, [pc, #112]	; (61fc <pinMode.part.2+0x74>)
    618a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    618e:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    6190:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    6192:	d011      	beq.n	61b8 <pinMode.part.2+0x30>
    6194:	2904      	cmp	r1, #4
    6196:	d01b      	beq.n	61d0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    6198:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    619c:	2200      	movs	r2, #0
    619e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    61a2:	b129      	cbz	r1, 61b0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    61a4:	2902      	cmp	r1, #2
    61a6:	d020      	beq.n	61ea <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    61a8:	2903      	cmp	r1, #3
    61aa:	d022      	beq.n	61f2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    61ac:	601a      	str	r2, [r3, #0]
    61ae:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    61b0:	f44f 7280 	mov.w	r2, #256	; 0x100
    61b4:	601a      	str	r2, [r3, #0]
    61b6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    61b8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    61bc:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    61c0:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    61c4:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    61c6:	681a      	ldr	r2, [r3, #0]
    61c8:	f022 0220 	bic.w	r2, r2, #32
    61cc:	601a      	str	r2, [r3, #0]
    61ce:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    61d0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    61d4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    61d8:	2001      	movs	r0, #1
    61da:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    61de:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    61e0:	681a      	ldr	r2, [r3, #0]
    61e2:	f042 0220 	orr.w	r2, r2, #32
    61e6:	601a      	str	r2, [r3, #0]
    61e8:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    61ea:	f240 1203 	movw	r2, #259	; 0x103
    61ee:	601a      	str	r2, [r3, #0]
    61f0:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    61f2:	f44f 7281 	mov.w	r2, #258	; 0x102
    61f6:	601a      	str	r2, [r3, #0]
    61f8:	4770      	bx	lr
    61fa:	bf00      	nop
    61fc:	00009d78 	.word	0x00009d78

00006200 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    6200:	b430      	push	{r4, r5}
	RTC_SR = 0;
    6202:	4b05      	ldr	r3, [pc, #20]	; (6218 <rtc_set+0x18>)
	RTC_TPR = 0;
    6204:	4d05      	ldr	r5, [pc, #20]	; (621c <rtc_set+0x1c>)
	RTC_TSR = t;
    6206:	4c06      	ldr	r4, [pc, #24]	; (6220 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    6208:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    620a:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    620c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    620e:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    6210:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    6212:	6019      	str	r1, [r3, #0]
}
    6214:	bc30      	pop	{r4, r5}
    6216:	4770      	bx	lr
    6218:	4003d014 	.word	0x4003d014
    621c:	4003d004 	.word	0x4003d004
    6220:	4003d000 	.word	0x4003d000

00006224 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    6224:	283f      	cmp	r0, #63	; 0x3f
    6226:	d801      	bhi.n	622c <pinMode+0x8>
    6228:	f7ff bfae 	b.w	6188 <pinMode.part.2>
    622c:	4770      	bx	lr
    622e:	bf00      	nop

00006230 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    6230:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    6232:	490d      	ldr	r1, [pc, #52]	; (6268 <micros+0x38>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6234:	4b0d      	ldr	r3, [pc, #52]	; (626c <micros+0x3c>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6236:	4a0e      	ldr	r2, [pc, #56]	; (6270 <micros+0x40>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6238:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    623a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    623c:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    623e:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    6240:	0152      	lsls	r2, r2, #5
    6242:	d502      	bpl.n	624a <micros+0x1a>
    6244:	2b32      	cmp	r3, #50	; 0x32
    6246:	bf88      	it	hi
    6248:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    624a:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
    624e:	4909      	ldr	r1, [pc, #36]	; (6274 <micros+0x44>)
    6250:	f203 331f 	addw	r3, r3, #799	; 0x31f
    6254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6258:	089b      	lsrs	r3, r3, #2
    625a:	fba1 1303 	umull	r1, r3, r1, r3
    625e:	fb02 f000 	mul.w	r0, r2, r0
}
    6262:	eb00 0093 	add.w	r0, r0, r3, lsr #2
    6266:	4770      	bx	lr
    6268:	1fff1368 	.word	0x1fff1368
    626c:	e000e018 	.word	0xe000e018
    6270:	e000ed04 	.word	0xe000ed04
    6274:	16c16c17 	.word	0x16c16c17

00006278 <delay>:

void delay(uint32_t ms)
{
    6278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    627c:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    627e:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    6280:	4f22      	ldr	r7, [pc, #136]	; (630c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6282:	4b23      	ldr	r3, [pc, #140]	; (6310 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6284:	4a23      	ldr	r2, [pc, #140]	; (6314 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6286:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    6288:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    628a:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    628c:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    628e:	0152      	lsls	r2, r2, #5
    6290:	d502      	bpl.n	6298 <delay+0x20>
    6292:	2b32      	cmp	r3, #50	; 0x32
    6294:	bf88      	it	hi
    6296:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    6298:	b3b5      	cbz	r5, 6308 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    629a:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
    629e:	f203 331f 	addw	r3, r3, #799	; 0x31f
    62a2:	4e1d      	ldr	r6, [pc, #116]	; (6318 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    62a4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 6310 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    62a8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 6314 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    62ac:	089b      	lsrs	r3, r3, #2
    62ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    62b2:	fba6 1303 	umull	r1, r3, r6, r3
    62b6:	fb02 f404 	mul.w	r4, r2, r4
    62ba:	eb04 0493 	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    62be:	b672      	cpsid	i
	current = SYST_CVR;
    62c0:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    62c4:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    62c6:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    62ca:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    62cc:	f5c1 332f 	rsb	r3, r1, #179200	; 0x2bc00
    62d0:	f203 331f 	addw	r3, r3, #799	; 0x31f
    62d4:	089b      	lsrs	r3, r3, #2
    62d6:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    62da:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    62de:	ebc4 0393 	rsb	r3, r4, r3, lsr #2
    62e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    62e6:	d002      	beq.n	62ee <delay+0x76>
    62e8:	2932      	cmp	r1, #50	; 0x32
    62ea:	bf88      	it	hi
    62ec:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    62ee:	fb00 3302 	mla	r3, r0, r2, r3
    62f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    62f6:	d304      	bcc.n	6302 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    62f8:	3d01      	subs	r5, #1
    62fa:	d005      	beq.n	6308 <delay+0x90>
				start += 1000;
    62fc:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    6300:	e7dd      	b.n	62be <delay+0x46>
			}
			yield();
    6302:	f001 fa9b 	bl	783c <yield>
		}
    6306:	e7da      	b.n	62be <delay+0x46>
    6308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    630c:	1fff1368 	.word	0x1fff1368
    6310:	e000e018 	.word	0xe000e018
    6314:	e000ed04 	.word	0xe000ed04
    6318:	16c16c17 	.word	0x16c16c17

0000631c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    631e:	4b4e      	ldr	r3, [pc, #312]	; (6458 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    6320:	484e      	ldr	r0, [pc, #312]	; (645c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    6322:	f8df c15c 	ldr.w	ip, [pc, #348]	; 6480 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    6326:	4c4e      	ldr	r4, [pc, #312]	; (6460 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    6328:	494e      	ldr	r1, [pc, #312]	; (6464 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    632a:	f8df e158 	ldr.w	lr, [pc, #344]	; 6484 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    632e:	4e4e      	ldr	r6, [pc, #312]	; (6468 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    6330:	4d4e      	ldr	r5, [pc, #312]	; (646c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    6332:	4f4f      	ldr	r7, [pc, #316]	; (6470 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    6334:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    6338:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    633a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    633e:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    6340:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6344:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    6346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    634a:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    634c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6350:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    6352:	2200      	movs	r2, #0
    6354:	6002      	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    6356:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    6358:	f64e 70ff 	movw	r0, #61439	; 0xefff
    635c:	f8cc 0000 	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    6360:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    6364:	6023      	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    6366:	f50e 2e01 	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    636a:	600b      	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    636c:	6033      	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    636e:	602b      	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    6370:	f506 2600 	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    6374:	603b      	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    6376:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    637a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    637c:	f507 2700 	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    6380:	628b      	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    6382:	f504 2401 	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    6386:	f501 2101 	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    638a:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    638e:	f605 75e8 	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    6392:	f507 677f 	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    6396:	3110      	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    6398:	f10e 0e10 	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    639c:	3420      	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    639e:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    63a0:	602b      	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    63a2:	f8ce 3000 	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    63a6:	603b      	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    63a8:	600b      	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    63aa:	6023      	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    63ac:	4c31      	ldr	r4, [pc, #196]	; (6474 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    63ae:	61bb      	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    63b0:	618b      	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    63b2:	2109      	movs	r1, #9
    63b4:	6021      	str	r1, [r4, #0]
	FTM1_CNT = 0;
    63b6:	f5a7 2700 	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    63ba:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    63be:	3f20      	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    63c0:	3408      	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    63c2:	603a      	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    63c4:	6020      	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    63c6:	60bb      	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    63c8:	60e3      	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    63ca:	f847 1c04 	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    63ce:	f504 24fd 	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    63d2:	f507 27fe 	add.w	r7, r7, #520192	; 0x7f000
    63d6:	3704      	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    63d8:	f204 74fc 	addw	r4, r4, #2044	; 0x7fc
    63dc:	6022      	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    63de:	6038      	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    63e0:	60a3      	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    63e2:	60fb      	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    63e4:	f844 1c04 	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    63e8:	3408      	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    63ea:	f604 74fc 	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    63ee:	f8c7 2ffc 	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    63f2:	6020      	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    63f4:	f5a4 24e1 	sub.w	r4, r4, #460800	; 0x70800
    63f8:	f2a4 74dc 	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    63fc:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    63fe:	602b      	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    6400:	f8c7 1ff8 	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    6404:	6821      	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    6406:	481c      	ldr	r0, [pc, #112]	; (6478 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    6408:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    640c:	6021      	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    640e:	6801      	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    6410:	4c1a      	ldr	r4, [pc, #104]	; (647c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    6412:	f50e 4e7f 	add.w	lr, lr, #65280	; 0xff00
    6416:	f10e 0ee8 	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    641a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    641e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    6422:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    6426:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    642a:	6001      	str	r1, [r0, #0]
	TPM1_CNT = 0;
    642c:	f8ce 2000 	str.w	r2, [lr]
	TPM1_MOD = 32767;
    6430:	f647 71ff 	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    6434:	2208      	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    6436:	6039      	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    6438:	6033      	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    643a:	602b      	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    643c:	6022      	str	r2, [r4, #0]
#endif
	analog_init();
    643e:	f7ff fd47 	bl	5ed0 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    6442:	2019      	movs	r0, #25
    6444:	f7ff ff18 	bl	6278 <delay>
	usb_init();
    6448:	f000 fe60 	bl	710c <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    644c:	f240 1013 	movw	r0, #275	; 0x113
}
    6450:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    6454:	f7ff bf10 	b.w	6278 <delay>
    6458:	e000e104 	.word	0xe000e104
    645c:	40038004 	.word	0x40038004
    6460:	40038014 	.word	0x40038014
    6464:	4003801c 	.word	0x4003801c
    6468:	40038024 	.word	0x40038024
    646c:	4003802c 	.word	0x4003802c
    6470:	40038034 	.word	0x40038034
    6474:	40038000 	.word	0x40038000
    6478:	40048004 	.word	0x40048004
    647c:	400c9000 	.word	0x400c9000
    6480:	40038008 	.word	0x40038008
    6484:	4003800c 	.word	0x4003800c

00006488 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    6488:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    648a:	2b03      	cmp	r3, #3
    648c:	d814      	bhi.n	64b8 <usb_rx+0x30>
	__disable_irq();
    648e:	b672      	cpsid	i
	ret = rx_first[endpoint];
    6490:	490a      	ldr	r1, [pc, #40]	; (64bc <usb_rx+0x34>)
    6492:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    6496:	b168      	cbz	r0, 64b4 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    6498:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    649a:	4c09      	ldr	r4, [pc, #36]	; (64c0 <usb_rx+0x38>)
    649c:	8805      	ldrh	r5, [r0, #0]
    649e:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    64a2:	6846      	ldr	r6, [r0, #4]
    64a4:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    64a8:	1b52      	subs	r2, r2, r5
    64aa:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    64ae:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    64b0:	bc70      	pop	{r4, r5, r6}
    64b2:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    64b4:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    64b6:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    64b8:	2000      	movs	r0, #0
    64ba:	4770      	bx	lr
    64bc:	1fff13c4 	.word	0x1fff13c4
    64c0:	1fff1788 	.word	0x1fff1788

000064c4 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    64c4:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    64c6:	2803      	cmp	r0, #3
    64c8:	d80b      	bhi.n	64e2 <usb_tx_packet_count+0x1e>
	__disable_irq();
    64ca:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    64cc:	4b07      	ldr	r3, [pc, #28]	; (64ec <usb_tx_packet_count+0x28>)
    64ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64d2:	b143      	cbz	r3, 64e6 <usb_tx_packet_count+0x22>
    64d4:	2000      	movs	r0, #0
    64d6:	685b      	ldr	r3, [r3, #4]
    64d8:	3001      	adds	r0, #1
    64da:	2b00      	cmp	r3, #0
    64dc:	d1fb      	bne.n	64d6 <usb_tx_packet_count+0x12>
	__enable_irq();
    64de:	b662      	cpsie	i
	return count;
    64e0:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    64e2:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    64e4:	4770      	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    64e6:	4618      	mov	r0, r3
    64e8:	e7f9      	b.n	64de <usb_tx_packet_count+0x1a>
    64ea:	bf00      	nop
    64ec:	1fff1418 	.word	0x1fff1418

000064f0 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    64f0:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    64f2:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    64f4:	4a2b      	ldr	r2, [pc, #172]	; (65a4 <usb_rx_memory+0xb4>)
    64f6:	7813      	ldrb	r3, [r2, #0]
    64f8:	071d      	lsls	r5, r3, #28
    64fa:	d506      	bpl.n	650a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    64fc:	4b2a      	ldr	r3, [pc, #168]	; (65a8 <usb_rx_memory+0xb8>)
    64fe:	6a19      	ldr	r1, [r3, #32]
    6500:	2900      	cmp	r1, #0
    6502:	d036      	beq.n	6572 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    6504:	6a99      	ldr	r1, [r3, #40]	; 0x28
    6506:	2900      	cmp	r1, #0
    6508:	d041      	beq.n	658e <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    650a:	7853      	ldrb	r3, [r2, #1]
    650c:	071c      	lsls	r4, r3, #28
    650e:	d506      	bpl.n	651e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    6510:	4b25      	ldr	r3, [pc, #148]	; (65a8 <usb_rx_memory+0xb8>)
    6512:	6c19      	ldr	r1, [r3, #64]	; 0x40
    6514:	2900      	cmp	r1, #0
    6516:	d03e      	beq.n	6596 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    6518:	6c99      	ldr	r1, [r3, #72]	; 0x48
    651a:	2900      	cmp	r1, #0
    651c:	d039      	beq.n	6592 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    651e:	7893      	ldrb	r3, [r2, #2]
    6520:	0719      	lsls	r1, r3, #28
    6522:	d505      	bpl.n	6530 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    6524:	4b20      	ldr	r3, [pc, #128]	; (65a8 <usb_rx_memory+0xb8>)
    6526:	6e19      	ldr	r1, [r3, #96]	; 0x60
    6528:	2900      	cmp	r1, #0
    652a:	d036      	beq.n	659a <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    652c:	6e99      	ldr	r1, [r3, #104]	; 0x68
    652e:	b189      	cbz	r1, 6554 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    6530:	78d3      	ldrb	r3, [r2, #3]
    6532:	071b      	lsls	r3, r3, #28
    6534:	d507      	bpl.n	6546 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    6536:	4b1c      	ldr	r3, [pc, #112]	; (65a8 <usb_rx_memory+0xb8>)
    6538:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    653c:	b37a      	cbz	r2, 659e <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    653e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6542:	2111      	movs	r1, #17
    6544:	b13a      	cbz	r2, 6556 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    6546:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    6548:	4b18      	ldr	r3, [pc, #96]	; (65ac <usb_rx_memory+0xbc>)
    654a:	2200      	movs	r2, #0
    654c:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    654e:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    6550:	f000 be7c 	b.w	724c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    6554:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    6556:	4c15      	ldr	r4, [pc, #84]	; (65ac <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6558:	4d15      	ldr	r5, [pc, #84]	; (65b0 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    655a:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    655c:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    6560:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6564:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    6566:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    6568:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    656a:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    656c:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    656e:	bc30      	pop	{r4, r5}
    6570:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    6572:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    6574:	4c0d      	ldr	r4, [pc, #52]	; (65ac <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6576:	4d0f      	ldr	r5, [pc, #60]	; (65b4 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    6578:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    657a:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    657e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6582:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    6584:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    6586:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    6588:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    658a:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    658c:	e7ef      	b.n	656e <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    658e:	2105      	movs	r1, #5
    6590:	e7e1      	b.n	6556 <usb_rx_memory+0x66>
    6592:	2109      	movs	r1, #9
    6594:	e7df      	b.n	6556 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    6596:	2208      	movs	r2, #8
    6598:	e7ec      	b.n	6574 <usb_rx_memory+0x84>
    659a:	220c      	movs	r2, #12
    659c:	e7ea      	b.n	6574 <usb_rx_memory+0x84>
    659e:	2210      	movs	r2, #16
    65a0:	e7e8      	b.n	6574 <usb_rx_memory+0x84>
    65a2:	bf00      	nop
    65a4:	00009fa4 	.word	0x00009fa4
    65a8:	1fff0000 	.word	0x1fff0000
    65ac:	1fff1441 	.word	0x1fff1441
    65b0:	004000c8 	.word	0x004000c8
    65b4:	00400088 	.word	0x00400088

000065b8 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    65b8:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    65ba:	2b03      	cmp	r3, #3
    65bc:	d81d      	bhi.n	65fa <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    65be:	4a1b      	ldr	r2, [pc, #108]	; (662c <usb_tx+0x74>)
    65c0:	0140      	lsls	r0, r0, #5
    65c2:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    65c6:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    65c8:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    65ca:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    65cc:	4c18      	ldr	r4, [pc, #96]	; (6630 <usb_tx+0x78>)
    65ce:	5ce2      	ldrb	r2, [r4, r3]
    65d0:	2a03      	cmp	r2, #3
    65d2:	d81b      	bhi.n	660c <usb_tx+0x54>
    65d4:	e8df f002 	tbb	[pc, r2]
    65d8:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    65dc:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    65de:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    65e0:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    65e2:	f010 0f08 	tst.w	r0, #8
    65e6:	bf14      	ite	ne
    65e8:	23c8      	movne	r3, #200	; 0xc8
    65ea:	2388      	moveq	r3, #136	; 0x88
    65ec:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    65f0:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    65f2:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    65f4:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    65f6:	b662      	cpsie	i
}
    65f8:	bc30      	pop	{r4, r5}
    65fa:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    65fc:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    65fe:	2202      	movs	r2, #2
		break;
    6600:	e7ed      	b.n	65de <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    6602:	2205      	movs	r2, #5
    6604:	e7eb      	b.n	65de <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    6606:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    6608:	2204      	movs	r2, #4
		break;
    660a:	e7e8      	b.n	65de <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    660c:	4a09      	ldr	r2, [pc, #36]	; (6634 <usb_tx+0x7c>)
    660e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6612:	b138      	cbz	r0, 6624 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    6614:	4a08      	ldr	r2, [pc, #32]	; (6638 <usb_tx+0x80>)
    6616:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    661a:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    661c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    6620:	b662      	cpsie	i
		return;
    6622:	e7e9      	b.n	65f8 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    6624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    6628:	4a03      	ldr	r2, [pc, #12]	; (6638 <usb_tx+0x80>)
    662a:	e7f7      	b.n	661c <usb_tx+0x64>
    662c:	1fff0000 	.word	0x1fff0000
    6630:	1fff1450 	.word	0x1fff1450
    6634:	1fff1418 	.word	0x1fff1418
    6638:	1fff1428 	.word	0x1fff1428

0000663c <usb_isr>:
}



void usb_isr(void)
{
    663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    6640:	f8df b30c 	ldr.w	fp, [pc, #780]	; 6950 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    6644:	f8df a30c 	ldr.w	sl, [pc, #780]	; 6954 <usb_isr+0x318>
}



void usb_isr(void)
{
    6648:	b087      	sub	sp, #28
    664a:	e044      	b.n	66d6 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    664c:	4fab      	ldr	r7, [pc, #684]	; (68fc <usb_isr+0x2c0>)
    664e:	ea4f 0893 	mov.w	r8, r3, lsr #2
    6652:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    6656:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6658:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    665c:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    6660:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6662:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    6666:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    666a:	2b00      	cmp	r3, #0
    666c:	f040 8102 	bne.w	6874 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    6670:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    6674:	0c1b      	lsrs	r3, r3, #16
    6676:	b299      	uxth	r1, r3
    6678:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    667c:	2b00      	cmp	r3, #0
    667e:	f000 80f0 	beq.w	6862 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    6682:	4b9f      	ldr	r3, [pc, #636]	; (6900 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    6684:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    6688:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    668c:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    6690:	2a00      	cmp	r2, #0
    6692:	f000 82c5 	beq.w	6c20 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    6696:	4d9b      	ldr	r5, [pc, #620]	; (6904 <usb_isr+0x2c8>)
    6698:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    669c:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    669e:	4c9a      	ldr	r4, [pc, #616]	; (6908 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    66a0:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    66a4:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    66a8:	4419      	add	r1, r3
    66aa:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    66ae:	f000 fdad 	bl	720c <usb_malloc>
					if (packet) {
    66b2:	2800      	cmp	r0, #0
    66b4:	f000 82ad 	beq.w	6c12 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    66b8:	4a94      	ldr	r2, [pc, #592]	; (690c <usb_isr+0x2d0>)
    66ba:	4b95      	ldr	r3, [pc, #596]	; (6910 <usb_isr+0x2d4>)
    66bc:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    66c0:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    66c4:	bf18      	it	ne
    66c6:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    66c8:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    66cc:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    66d0:	2308      	movs	r3, #8
    66d2:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    66d6:	f89b 4000 	ldrb.w	r4, [fp]
    66da:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    66dc:	0761      	lsls	r1, r4, #29
    66de:	d51a      	bpl.n	6716 <usb_isr+0xda>
		if (usb_configuration) {
    66e0:	4b8c      	ldr	r3, [pc, #560]	; (6914 <usb_isr+0x2d8>)
    66e2:	781b      	ldrb	r3, [r3, #0]
    66e4:	b1a3      	cbz	r3, 6710 <usb_isr+0xd4>
			t = usb_reboot_timer;
    66e6:	498c      	ldr	r1, [pc, #560]	; (6918 <usb_isr+0x2dc>)
    66e8:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    66ea:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    66ee:	b122      	cbz	r2, 66fa <usb_isr+0xbe>
				usb_reboot_timer = --t;
    66f0:	3b01      	subs	r3, #1
    66f2:	b2db      	uxtb	r3, r3
    66f4:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    66f6:	b903      	cbnz	r3, 66fa <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    66f8:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    66fa:	4988      	ldr	r1, [pc, #544]	; (691c <usb_isr+0x2e0>)
    66fc:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    66fe:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    6702:	b12a      	cbz	r2, 6710 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    6704:	3b01      	subs	r3, #1
    6706:	b2db      	uxtb	r3, r3
    6708:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    670a:	2b00      	cmp	r3, #0
    670c:	f000 8257 	beq.w	6bbe <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    6710:	2304      	movs	r3, #4
    6712:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    6716:	f004 0308 	and.w	r3, r4, #8
    671a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    671e:	2b00      	cmp	r3, #0
    6720:	f000 80cc 	beq.w	68bc <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    6724:	f89a 3000 	ldrb.w	r3, [sl]
    6728:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    672a:	091e      	lsrs	r6, r3, #4
    672c:	d18e      	bne.n	664c <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    672e:	089c      	lsrs	r4, r3, #2
    6730:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 68fc <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    6734:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    6738:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    673c:	f3c2 0283 	ubfx	r2, r2, #2, #4
    6740:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    6742:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    6744:	2a0c      	cmp	r2, #12
    6746:	f200 8088 	bhi.w	685a <usb_isr+0x21e>
    674a:	e8df f002 	tbb	[pc, r2]
    674e:	7c7c      	.short	0x7c7c
    6750:	86868686 	.word	0x86868686
    6754:	86478686 	.word	0x86478686
    6758:	8686      	.short	0x8686
    675a:	07          	.byte	0x07
    675b:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    675c:	6808      	ldr	r0, [r1, #0]
    675e:	4d70      	ldr	r5, [pc, #448]	; (6920 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    6760:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    6762:	4f70      	ldr	r7, [pc, #448]	; (6924 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6764:	4e70      	ldr	r6, [pc, #448]	; (6928 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    6766:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6768:	b281      	uxth	r1, r0
    676a:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    676e:	4b67      	ldr	r3, [pc, #412]	; (690c <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    6770:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6772:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    6776:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6778:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    677a:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    677e:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    6780:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    6784:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6788:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    678c:	4c5b      	ldr	r4, [pc, #364]	; (68fc <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    678e:	f200 80e3 	bhi.w	6958 <usb_isr+0x31c>
    6792:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    6796:	f080 8346 	bcs.w	6e26 <usb_isr+0x7ea>
    679a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    679e:	f000 82fc 	beq.w	6d9a <usb_isr+0x75e>
    67a2:	f200 828d 	bhi.w	6cc0 <usb_isr+0x684>
    67a6:	2980      	cmp	r1, #128	; 0x80
    67a8:	f000 8377 	beq.w	6e9a <usb_isr+0x85e>
    67ac:	2982      	cmp	r1, #130	; 0x82
    67ae:	f040 82fa 	bne.w	6da6 <usb_isr+0x76a>
    67b2:	88a9      	ldrh	r1, [r5, #4]
    67b4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    67b8:	2904      	cmp	r1, #4
    67ba:	f200 82f4 	bhi.w	6da6 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    67be:	485b      	ldr	r0, [pc, #364]	; (692c <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    67c0:	4c5b      	ldr	r4, [pc, #364]	; (6930 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    67c2:	0089      	lsls	r1, r1, #2
    67c4:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    67c6:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    67c8:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    67ca:	7802      	ldrb	r2, [r0, #0]
    67cc:	0793      	lsls	r3, r2, #30
    67ce:	f140 8458 	bpl.w	7082 <usb_isr+0xa46>
    67d2:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    67d6:	f04f 0e02 	mov.w	lr, #2
    67da:	e342      	b.n	6e62 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    67dc:	4f51      	ldr	r7, [pc, #324]	; (6924 <usb_isr+0x2e8>)
    67de:	683a      	ldr	r2, [r7, #0]
		if (data) {
    67e0:	b332      	cbz	r2, 6830 <usb_isr+0x1f4>
			size = ep0_tx_len;
    67e2:	4b54      	ldr	r3, [pc, #336]	; (6934 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    67e4:	4e50      	ldr	r6, [pc, #320]	; (6928 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    67e6:	4954      	ldr	r1, [pc, #336]	; (6938 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    67e8:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    67ea:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    67ec:	780d      	ldrb	r5, [r1, #0]
    67ee:	2840      	cmp	r0, #64	; 0x40
    67f0:	4686      	mov	lr, r0
    67f2:	f045 0802 	orr.w	r8, r5, #2
    67f6:	bf28      	it	cs
    67f8:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    67fc:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    67fe:	f084 0401 	eor.w	r4, r4, #1
    6802:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    6804:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6808:	bf0c      	ite	eq
    680a:	2488      	moveq	r4, #136	; 0x88
    680c:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    680e:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    6812:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6814:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6818:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    681c:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    681e:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6820:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    6824:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6826:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    6828:	2800      	cmp	r0, #0
    682a:	f000 8145 	beq.w	6ab8 <usb_isr+0x47c>
    682e:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    6830:	4b3b      	ldr	r3, [pc, #236]	; (6920 <usb_isr+0x2e4>)
    6832:	881a      	ldrh	r2, [r3, #0]
    6834:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    6838:	d10f      	bne.n	685a <usb_isr+0x21e>
			setup.bRequest = 0;
    683a:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    683c:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    683e:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    6840:	4b3e      	ldr	r3, [pc, #248]	; (693c <usb_isr+0x300>)
    6842:	701a      	strb	r2, [r3, #0]
    6844:	e009      	b.n	685a <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    6846:	4a36      	ldr	r2, [pc, #216]	; (6920 <usb_isr+0x2e4>)
    6848:	8810      	ldrh	r0, [r2, #0]
    684a:	f242 0221 	movw	r2, #8225	; 0x2021
    684e:	4290      	cmp	r0, r2
    6850:	f000 8137 	beq.w	6ac2 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    6854:	4a2d      	ldr	r2, [pc, #180]	; (690c <usb_isr+0x2d0>)
    6856:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    685a:	4a39      	ldr	r2, [pc, #228]	; (6940 <usb_isr+0x304>)
    685c:	2301      	movs	r3, #1
    685e:	7013      	strb	r3, [r2, #0]
    6860:	e736      	b.n	66d0 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    6862:	4a2a      	ldr	r2, [pc, #168]	; (690c <usb_isr+0x2d0>)
    6864:	4b2a      	ldr	r3, [pc, #168]	; (6910 <usb_isr+0x2d4>)
    6866:	f019 0f08 	tst.w	r9, #8
    686a:	bf18      	it	ne
    686c:	4613      	movne	r3, r2
    686e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    6872:	e72d      	b.n	66d0 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    6874:	f000 fcea 	bl	724c <usb_free>
				packet = tx_first[endpoint];
    6878:	4a32      	ldr	r2, [pc, #200]	; (6944 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    687a:	4933      	ldr	r1, [pc, #204]	; (6948 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    687c:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    6880:	2b00      	cmp	r3, #0
    6882:	f000 81d1 	beq.w	6c28 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    6886:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    6888:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    688a:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    688e:	f103 0208 	add.w	r2, r3, #8
    6892:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    6896:	2c03      	cmp	r4, #3
    6898:	d805      	bhi.n	68a6 <usb_isr+0x26a>
    689a:	e8df f004 	tbb	[pc, r4]
    689e:	022c      	.short	0x022c
    68a0:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    68a2:	2202      	movs	r2, #2
    68a4:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    68a6:	881a      	ldrh	r2, [r3, #0]
    68a8:	f019 0f08 	tst.w	r9, #8
    68ac:	bf0c      	ite	eq
    68ae:	2388      	moveq	r3, #136	; 0x88
    68b0:	23c8      	movne	r3, #200	; 0xc8
    68b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    68b6:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    68ba:	e709      	b.n	66d0 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    68bc:	07e0      	lsls	r0, r4, #31
    68be:	f100 8181 	bmi.w	6bc4 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    68c2:	0621      	lsls	r1, r4, #24
    68c4:	f100 81f2 	bmi.w	6cac <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    68c8:	07a2      	lsls	r2, r4, #30
    68ca:	d506      	bpl.n	68da <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    68cc:	4a1f      	ldr	r2, [pc, #124]	; (694c <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    68ce:	4920      	ldr	r1, [pc, #128]	; (6950 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    68d0:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    68d2:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    68d4:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    68d6:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    68d8:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    68da:	06e3      	lsls	r3, r4, #27
    68dc:	d502      	bpl.n	68e4 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    68de:	4b1c      	ldr	r3, [pc, #112]	; (6950 <usb_isr+0x314>)
    68e0:	2210      	movs	r2, #16
    68e2:	701a      	strb	r2, [r3, #0]
	}

}
    68e4:	b007      	add	sp, #28
    68e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    68ea:	2204      	movs	r2, #4
    68ec:	558a      	strb	r2, [r1, r6]
						break;
    68ee:	e7da      	b.n	68a6 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    68f0:	2205      	movs	r2, #5
    68f2:	558a      	strb	r2, [r1, r6]
						break;
    68f4:	e7d7      	b.n	68a6 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    68f6:	2203      	movs	r2, #3
    68f8:	558a      	strb	r2, [r1, r6]
						break;
    68fa:	e7d4      	b.n	68a6 <usb_isr+0x26a>
    68fc:	1fff0000 	.word	0x1fff0000
    6900:	1fff13c4 	.word	0x1fff13c4
    6904:	1fff1370 	.word	0x1fff1370
    6908:	1fff1788 	.word	0x1fff1788
    690c:	004000c8 	.word	0x004000c8
    6910:	00400088 	.word	0x00400088
    6914:	1fff144c 	.word	0x1fff144c
    6918:	1fff13d5 	.word	0x1fff13d5
    691c:	1fff1454 	.word	0x1fff1454
    6920:	1fff1438 	.word	0x1fff1438
    6924:	1fff136c 	.word	0x1fff136c
    6928:	1fff13d4 	.word	0x1fff13d4
    692c:	400720c0 	.word	0x400720c0
    6930:	1fff1444 	.word	0x1fff1444
    6934:	1fff1380 	.word	0x1fff1380
    6938:	1fff1440 	.word	0x1fff1440
    693c:	40072098 	.word	0x40072098
    6940:	40072094 	.word	0x40072094
    6944:	1fff1418 	.word	0x1fff1418
    6948:	1fff1450 	.word	0x1fff1450
    694c:	40072088 	.word	0x40072088
    6950:	40072080 	.word	0x40072080
    6954:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6958:	f242 0021 	movw	r0, #8225	; 0x2021
    695c:	4281      	cmp	r1, r0
    695e:	f000 812a 	beq.w	6bb6 <usb_isr+0x57a>
    6962:	f200 80d8 	bhi.w	6b16 <usb_isr+0x4da>
    6966:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    696a:	f000 8276 	beq.w	6e5a <usb_isr+0x81e>
    696e:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    6972:	f040 8218 	bne.w	6da6 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    6976:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    6978:	49b3      	ldr	r1, [pc, #716]	; (6c48 <usb_isr+0x60c>)
    697a:	78a8      	ldrb	r0, [r5, #2]
    697c:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    697e:	0612      	lsls	r2, r2, #24
    6980:	f100 833a 	bmi.w	6ff8 <usb_isr+0x9bc>
    6984:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    6988:	49b0      	ldr	r1, [pc, #704]	; (6c4c <usb_isr+0x610>)
    698a:	0613      	lsls	r3, r2, #24
    698c:	f100 830c 	bmi.w	6fa8 <usb_isr+0x96c>
    6990:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    6994:	49ad      	ldr	r1, [pc, #692]	; (6c4c <usb_isr+0x610>)
    6996:	0615      	lsls	r5, r2, #24
    6998:	f100 8301 	bmi.w	6f9e <usb_isr+0x962>
    699c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    69a0:	49aa      	ldr	r1, [pc, #680]	; (6c4c <usb_isr+0x610>)
    69a2:	0614      	lsls	r4, r2, #24
    69a4:	f100 82f6 	bmi.w	6f94 <usb_isr+0x958>
    69a8:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    69ac:	49a7      	ldr	r1, [pc, #668]	; (6c4c <usb_isr+0x610>)
    69ae:	0610      	lsls	r0, r2, #24
    69b0:	f100 834a 	bmi.w	7048 <usb_isr+0xa0c>
    69b4:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    69b8:	49a4      	ldr	r1, [pc, #656]	; (6c4c <usb_isr+0x610>)
    69ba:	0612      	lsls	r2, r2, #24
    69bc:	f100 833f 	bmi.w	703e <usb_isr+0xa02>
    69c0:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    69c4:	49a1      	ldr	r1, [pc, #644]	; (6c4c <usb_isr+0x610>)
    69c6:	0613      	lsls	r3, r2, #24
    69c8:	f100 8334 	bmi.w	7034 <usb_isr+0x9f8>
    69cc:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    69d0:	499e      	ldr	r1, [pc, #632]	; (6c4c <usb_isr+0x610>)
    69d2:	0615      	lsls	r5, r2, #24
    69d4:	f100 8329 	bmi.w	702a <usb_isr+0x9ee>
    69d8:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    69dc:	499b      	ldr	r1, [pc, #620]	; (6c4c <usb_isr+0x610>)
    69de:	0614      	lsls	r4, r2, #24
    69e0:	f100 831e 	bmi.w	7020 <usb_isr+0x9e4>
    69e4:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    69e8:	4998      	ldr	r1, [pc, #608]	; (6c4c <usb_isr+0x610>)
    69ea:	0610      	lsls	r0, r2, #24
    69ec:	f100 8313 	bmi.w	7016 <usb_isr+0x9da>
    69f0:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    69f4:	4995      	ldr	r1, [pc, #596]	; (6c4c <usb_isr+0x610>)
    69f6:	0612      	lsls	r2, r2, #24
    69f8:	f100 8308 	bmi.w	700c <usb_isr+0x9d0>
    69fc:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    6a00:	4992      	ldr	r1, [pc, #584]	; (6c4c <usb_isr+0x610>)
    6a02:	0613      	lsls	r3, r2, #24
    6a04:	f100 82fd 	bmi.w	7002 <usb_isr+0x9c6>
    6a08:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    6a0c:	498f      	ldr	r1, [pc, #572]	; (6c4c <usb_isr+0x610>)
    6a0e:	0615      	lsls	r5, r2, #24
    6a10:	f100 8331 	bmi.w	7076 <usb_isr+0xa3a>
    6a14:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    6a18:	498c      	ldr	r1, [pc, #560]	; (6c4c <usb_isr+0x610>)
    6a1a:	0614      	lsls	r4, r2, #24
    6a1c:	f100 8325 	bmi.w	706a <usb_isr+0xa2e>
    6a20:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    6a24:	4989      	ldr	r1, [pc, #548]	; (6c4c <usb_isr+0x610>)
    6a26:	0610      	lsls	r0, r2, #24
    6a28:	f100 8319 	bmi.w	705e <usb_isr+0xa22>
    6a2c:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    6a30:	4986      	ldr	r1, [pc, #536]	; (6c4c <usb_isr+0x610>)
    6a32:	0612      	lsls	r2, r2, #24
    6a34:	f100 830d 	bmi.w	7052 <usb_isr+0xa16>
    6a38:	4885      	ldr	r0, [pc, #532]	; (6c50 <usb_isr+0x614>)
    6a3a:	4a86      	ldr	r2, [pc, #536]	; (6c54 <usb_isr+0x618>)
    6a3c:	4986      	ldr	r1, [pc, #536]	; (6c58 <usb_isr+0x61c>)
    6a3e:	9001      	str	r0, [sp, #4]
    6a40:	4886      	ldr	r0, [pc, #536]	; (6c5c <usb_isr+0x620>)
    6a42:	4d87      	ldr	r5, [pc, #540]	; (6c60 <usb_isr+0x624>)
    6a44:	4c87      	ldr	r4, [pc, #540]	; (6c64 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6a46:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    6a48:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6a4a:	9605      	str	r6, [sp, #20]
    6a4c:	9502      	str	r5, [sp, #8]
    6a4e:	4680      	mov	r8, r0
    6a50:	460f      	mov	r7, r1
    6a52:	4616      	mov	r6, r2
    6a54:	461d      	mov	r5, r3
    6a56:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    6a58:	6830      	ldr	r0, [r6, #0]
			while (p) {
    6a5a:	b128      	cbz	r0, 6a68 <usb_isr+0x42c>
				n = p->next;
    6a5c:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    6a5e:	f000 fbf5 	bl	724c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    6a62:	4620      	mov	r0, r4
    6a64:	2c00      	cmp	r4, #0
    6a66:	d1f9      	bne.n	6a5c <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    6a68:	2300      	movs	r3, #0
    6a6a:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    6a6c:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    6a6e:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    6a70:	461a      	mov	r2, r3
    6a72:	2300      	movs	r3, #0
    6a74:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    6a78:	b128      	cbz	r0, 6a86 <usb_isr+0x44a>
				n = p->next;
    6a7a:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    6a7c:	f000 fbe6 	bl	724c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    6a80:	4620      	mov	r0, r4
    6a82:	2c00      	cmp	r4, #0
    6a84:	d1f9      	bne.n	6a7a <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    6a86:	2200      	movs	r2, #0
    6a88:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    6a8a:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    6a8c:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    6a90:	4611      	mov	r1, r2
    6a92:	2200      	movs	r2, #0
    6a94:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    6a98:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    6a9a:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    6a9c:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    6a9e:	f04f 0100 	mov.w	r1, #0
    6aa2:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    6aa6:	2b03      	cmp	r3, #3
    6aa8:	f200 812b 	bhi.w	6d02 <usb_isr+0x6c6>
    6aac:	e8df f013 	tbh	[pc, r3, lsl #1]
    6ab0:	01250170 	.word	0x01250170
    6ab4:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    6ab8:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    6abc:	bf18      	it	ne
    6abe:	2200      	movne	r2, #0
    6ac0:	e6b5      	b.n	682e <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    6ac2:	4a69      	ldr	r2, [pc, #420]	; (6c68 <usb_isr+0x62c>)
    6ac4:	780d      	ldrb	r5, [r1, #0]
    6ac6:	7848      	ldrb	r0, [r1, #1]
    6ac8:	7015      	strb	r5, [r2, #0]
    6aca:	7050      	strb	r0, [r2, #1]
    6acc:	788d      	ldrb	r5, [r1, #2]
    6ace:	78c8      	ldrb	r0, [r1, #3]
    6ad0:	7095      	strb	r5, [r2, #2]
    6ad2:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    6ad4:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    6ad6:	790d      	ldrb	r5, [r1, #4]
    6ad8:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    6ada:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    6adc:	794d      	ldrb	r5, [r1, #5]
    6ade:	7989      	ldrb	r1, [r1, #6]
    6ae0:	7155      	strb	r5, [r2, #5]
    6ae2:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    6ae4:	f000 819b 	beq.w	6e1e <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6ae8:	4960      	ldr	r1, [pc, #384]	; (6c6c <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6aea:	4e61      	ldr	r6, [pc, #388]	; (6c70 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6aec:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6aee:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6af0:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6af4:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6af6:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6afa:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6afc:	bf0c      	ite	eq
    6afe:	2188      	moveq	r1, #136	; 0x88
    6b00:	21c8      	movne	r1, #200	; 0xc8
    6b02:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6b06:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    6b0a:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6b0e:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    6b10:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6b12:	6051      	str	r1, [r2, #4]
    6b14:	e69e      	b.n	6854 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6b16:	f242 2021 	movw	r0, #8737	; 0x2221
    6b1a:	4281      	cmp	r1, r0
    6b1c:	f040 81cb 	bne.w	6eb6 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    6b20:	4b54      	ldr	r3, [pc, #336]	; (6c74 <usb_isr+0x638>)
    6b22:	4c55      	ldr	r4, [pc, #340]	; (6c78 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    6b24:	4955      	ldr	r1, [pc, #340]	; (6c7c <usb_isr+0x640>)
    6b26:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    6b28:	681d      	ldr	r5, [r3, #0]
    6b2a:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    6b2c:	f8cd e004 	str.w	lr, [sp, #4]
    6b30:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    6b32:	2000      	movs	r0, #0
    6b34:	9002      	str	r0, [sp, #8]
    6b36:	4680      	mov	r8, r0
    6b38:	4684      	mov	ip, r0
    6b3a:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6b3c:	494b      	ldr	r1, [pc, #300]	; (6c6c <usb_isr+0x630>)
    6b3e:	780d      	ldrb	r5, [r1, #0]
    6b40:	f045 0e02 	orr.w	lr, r5, #2
    6b44:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    6b48:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6b4a:	9b01      	ldr	r3, [sp, #4]
    6b4c:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6b4e:	9b03      	ldr	r3, [sp, #12]
    6b50:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6b52:	bf0c      	ite	eq
    6b54:	2488      	moveq	r4, #136	; 0x88
    6b56:	24c8      	movne	r4, #200	; 0xc8
    6b58:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6b5c:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6b60:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    6b64:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    6b66:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6b68:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 6c4c <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    6b6c:	4b40      	ldr	r3, [pc, #256]	; (6c70 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    6b6e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 6c6c <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    6b72:	2800      	cmp	r0, #0
    6b74:	f040 811e 	bne.w	6db4 <usb_isr+0x778>
    6b78:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    6b7c:	d11b      	bne.n	6bb6 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6b7e:	f044 0c02 	orr.w	ip, r4, #2
    6b82:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    6b86:	9c02      	ldr	r4, [sp, #8]
    6b88:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 6c4c <usb_isr+0x610>
    6b8c:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6b8e:	2a00      	cmp	r2, #0
    6b90:	f040 8126 	bne.w	6de0 <usb_isr+0x7a4>
    6b94:	0402      	lsls	r2, r0, #16
    6b96:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    6b9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6b9e:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6ba2:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    6ba4:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    6ba6:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6ba8:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    6baa:	2840      	cmp	r0, #64	; 0x40
    6bac:	d103      	bne.n	6bb6 <usb_isr+0x57a>
    6bae:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    6bb0:	4a33      	ldr	r2, [pc, #204]	; (6c80 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    6bb2:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    6bb4:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6bb6:	4a33      	ldr	r2, [pc, #204]	; (6c84 <usb_isr+0x648>)
    6bb8:	2301      	movs	r3, #1
    6bba:	7013      	strb	r3, [r2, #0]
    6bbc:	e64d      	b.n	685a <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    6bbe:	f000 fcb1 	bl	7524 <usb_serial_flush_callback>
    6bc2:	e5a5      	b.n	6710 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    6bc4:	4b21      	ldr	r3, [pc, #132]	; (6c4c <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6bc6:	482f      	ldr	r0, [pc, #188]	; (6c84 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    6bc8:	4928      	ldr	r1, [pc, #160]	; (6c6c <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    6bca:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6bcc:	f04f 0e02 	mov.w	lr, #2
    6bd0:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6bd4:	4f2c      	ldr	r7, [pc, #176]	; (6c88 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    6bd6:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    6bd8:	492c      	ldr	r1, [pc, #176]	; (6c8c <usb_isr+0x650>)
    6bda:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    6bdc:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    6bde:	4e2c      	ldr	r6, [pc, #176]	; (6c90 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    6be0:	4d2c      	ldr	r5, [pc, #176]	; (6c94 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    6be2:	4c2d      	ldr	r4, [pc, #180]	; (6c98 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    6be4:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6be6:	210d      	movs	r1, #13
    6be8:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    6bea:	21ff      	movs	r1, #255	; 0xff
    6bec:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    6bee:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 6ca8 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    6bf2:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    6bf4:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    6bf6:	4d29      	ldr	r5, [pc, #164]	; (6c9c <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    6bf8:	4a29      	ldr	r2, [pc, #164]	; (6ca0 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    6bfa:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    6bfe:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    6c00:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    6c02:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    6c06:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    6c08:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    6c0a:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    6c0c:	b007      	add	sp, #28
    6c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    6c12:	4a24      	ldr	r2, [pc, #144]	; (6ca4 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    6c14:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    6c18:	7813      	ldrb	r3, [r2, #0]
    6c1a:	3301      	adds	r3, #1
    6c1c:	7013      	strb	r3, [r2, #0]
    6c1e:	e557      	b.n	66d0 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    6c20:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    6c24:	4d0e      	ldr	r5, [pc, #56]	; (6c60 <usb_isr+0x624>)
    6c26:	e53a      	b.n	669e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    6c28:	5d8b      	ldrb	r3, [r1, r6]
    6c2a:	2b03      	cmp	r3, #3
    6c2c:	f200 80f0 	bhi.w	6e10 <usb_isr+0x7d4>
    6c30:	a201      	add	r2, pc, #4	; (adr r2, 6c38 <usb_isr+0x5fc>)
    6c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6c36:	bf00      	nop
    6c38:	000066d1 	.word	0x000066d1
    6c3c:	000066d1 	.word	0x000066d1
    6c40:	00006cf5 	.word	0x00006cf5
    6c44:	00006cef 	.word	0x00006cef
    6c48:	1fff144c 	.word	0x1fff144c
    6c4c:	1fff0000 	.word	0x1fff0000
    6c50:	1fff1428 	.word	0x1fff1428
    6c54:	1fff13c4 	.word	0x1fff13c4
    6c58:	1fff1418 	.word	0x1fff1418
    6c5c:	1fff1450 	.word	0x1fff1450
    6c60:	1fff1370 	.word	0x1fff1370
    6c64:	1fff1788 	.word	0x1fff1788
    6c68:	1fff1790 	.word	0x1fff1790
    6c6c:	1fff1440 	.word	0x1fff1440
    6c70:	1fff13d4 	.word	0x1fff13d4
    6c74:	1fff1368 	.word	0x1fff1368
    6c78:	1fff1798 	.word	0x1fff1798
    6c7c:	1fff1464 	.word	0x1fff1464
    6c80:	1fff1380 	.word	0x1fff1380
    6c84:	40072094 	.word	0x40072094
    6c88:	400720c0 	.word	0x400720c0
    6c8c:	00400088 	.word	0x00400088
    6c90:	40072088 	.word	0x40072088
    6c94:	40072080 	.word	0x40072080
    6c98:	40072098 	.word	0x40072098
    6c9c:	1fff1384 	.word	0x1fff1384
    6ca0:	1fff13d8 	.word	0x1fff13d8
    6ca4:	1fff1441 	.word	0x1fff1441
    6ca8:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6cac:	49c1      	ldr	r1, [pc, #772]	; (6fb4 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    6cae:	4bc2      	ldr	r3, [pc, #776]	; (6fb8 <usb_isr+0x97c>)
    6cb0:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6cb2:	200d      	movs	r0, #13
    6cb4:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    6cb6:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    6cb8:	07a2      	lsls	r2, r4, #30
    6cba:	f57f ae0e 	bpl.w	68da <usb_isr+0x29e>
    6cbe:	e605      	b.n	68cc <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6cc0:	f240 3202 	movw	r2, #770	; 0x302
    6cc4:	4291      	cmp	r1, r2
    6cc6:	f040 80ee 	bne.w	6ea6 <usb_isr+0x86a>
    6cca:	88a9      	ldrh	r1, [r5, #4]
    6ccc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    6cd0:	2904      	cmp	r1, #4
    6cd2:	d868      	bhi.n	6da6 <usb_isr+0x76a>
    6cd4:	886a      	ldrh	r2, [r5, #2]
    6cd6:	2a00      	cmp	r2, #0
    6cd8:	d165      	bne.n	6da6 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    6cda:	48b6      	ldr	r0, [pc, #728]	; (6fb4 <usb_isr+0x978>)
    6cdc:	f8cd e004 	str.w	lr, [sp, #4]
    6ce0:	0089      	lsls	r1, r1, #2
    6ce2:	4408      	add	r0, r1
    6ce4:	7801      	ldrb	r1, [r0, #0]
    6ce6:	f041 0102 	orr.w	r1, r1, #2
    6cea:	7001      	strb	r1, [r0, #0]
    6cec:	e721      	b.n	6b32 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6cee:	2301      	movs	r3, #1
    6cf0:	558b      	strb	r3, [r1, r6]
						break;
    6cf2:	e4ed      	b.n	66d0 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    6cf4:	2300      	movs	r3, #0
    6cf6:	558b      	strb	r3, [r1, r6]
						break;
    6cf8:	e4ea      	b.n	66d0 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6cfa:	f04f 0301 	mov.w	r3, #1
    6cfe:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    6d02:	3501      	adds	r5, #1
    6d04:	2d04      	cmp	r5, #4
    6d06:	f106 0604 	add.w	r6, r6, #4
    6d0a:	f107 0704 	add.w	r7, r7, #4
    6d0e:	f108 0801 	add.w	r8, r8, #1
    6d12:	f47f aea1 	bne.w	6a58 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6d16:	4ca9      	ldr	r4, [pc, #676]	; (6fbc <usb_isr+0x980>)
			*reg = epconf;
    6d18:	4ba9      	ldr	r3, [pc, #676]	; (6fc0 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6d1a:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    6d1c:	4da9      	ldr	r5, [pc, #676]	; (6fc4 <usb_isr+0x988>)
    6d1e:	9f04      	ldr	r7, [sp, #16]
    6d20:	9e05      	ldr	r6, [sp, #20]
    6d22:	2100      	movs	r1, #0
    6d24:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    6d26:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6d28:	0713      	lsls	r3, r2, #28
    6d2a:	f100 8105 	bmi.w	6f38 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6d2e:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    6d30:	49a5      	ldr	r1, [pc, #660]	; (6fc8 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6d32:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 6fd4 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    6d36:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6d38:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6d3a:	f04f 0100 	mov.w	r1, #0
    6d3e:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    6d42:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6d46:	f100 80e0 	bmi.w	6f0a <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    6d4a:	49a0      	ldr	r1, [pc, #640]	; (6fcc <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6d4c:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    6d4e:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6d50:	2100      	movs	r1, #0
    6d52:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    6d56:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6d5a:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6d5c:	f8df 8274 	ldr.w	r8, [pc, #628]	; 6fd4 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6d60:	f100 8101 	bmi.w	6f66 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6d64:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    6d66:	499a      	ldr	r1, [pc, #616]	; (6fd0 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6d68:	4c9a      	ldr	r4, [pc, #616]	; (6fd4 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    6d6a:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6d6c:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6d6e:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6d70:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    6d74:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6d78:	f100 80b0 	bmi.w	6edc <usb_isr+0x8a0>
    6d7c:	7833      	ldrb	r3, [r6, #0]
    6d7e:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6d80:	2100      	movs	r1, #0
    6d82:	f083 0201 	eor.w	r2, r3, #1
    6d86:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    6d8a:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    6d8e:	e6d0      	b.n	6b32 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    6d90:	f04f 0300 	mov.w	r3, #0
    6d94:	f888 3000 	strb.w	r3, [r8]
    6d98:	e7b3      	b.n	6d02 <usb_isr+0x6c6>
    6d9a:	88a9      	ldrh	r1, [r5, #4]
    6d9c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    6da0:	2904      	cmp	r1, #4
    6da2:	f240 808d 	bls.w	6ec0 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6da6:	4a83      	ldr	r2, [pc, #524]	; (6fb4 <usb_isr+0x978>)
    6da8:	230f      	movs	r3, #15
    6daa:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6dac:	4a8a      	ldr	r2, [pc, #552]	; (6fd8 <usb_isr+0x99c>)
    6dae:	2301      	movs	r3, #1
    6db0:	7013      	strb	r3, [r2, #0]
    6db2:	e552      	b.n	685a <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    6db4:	2840      	cmp	r0, #64	; 0x40
    6db6:	f67f aee2 	bls.w	6b7e <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6dba:	f044 0402 	orr.w	r4, r4, #2
    6dbe:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    6dc2:	9e02      	ldr	r6, [sp, #8]
    6dc4:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6dc6:	b1ba      	cbz	r2, 6df8 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    6dc8:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6dcc:	4a83      	ldr	r2, [pc, #524]	; (6fdc <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    6dce:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6dd0:	4633      	mov	r3, r6
    6dd2:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6dd4:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6dd8:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6dda:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    6dde:	e6e7      	b.n	6bb0 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    6de0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6de4:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6de6:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6de8:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6dea:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6dec:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6df0:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6df2:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    6df6:	e6d8      	b.n	6baa <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    6df8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6dfc:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6dfe:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6e00:	4a77      	ldr	r2, [pc, #476]	; (6fe0 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6e02:	f888 5000 	strb.w	r5, [r8]
    6e06:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6e08:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6e0a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    6e0e:	e6cf      	b.n	6bb0 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    6e10:	f019 0f08 	tst.w	r9, #8
    6e14:	bf0c      	ite	eq
    6e16:	2302      	moveq	r3, #2
    6e18:	2303      	movne	r3, #3
    6e1a:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    6e1c:	e458      	b.n	66d0 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    6e1e:	4a71      	ldr	r2, [pc, #452]	; (6fe4 <usb_isr+0x9a8>)
    6e20:	210f      	movs	r1, #15
    6e22:	7011      	strb	r1, [r2, #0]
    6e24:	e660      	b.n	6ae8 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    6e26:	4a70      	ldr	r2, [pc, #448]	; (6fe8 <usb_isr+0x9ac>)
    6e28:	6854      	ldr	r4, [r2, #4]
    6e2a:	2c00      	cmp	r4, #0
    6e2c:	d0bb      	beq.n	6da6 <usb_isr+0x76a>
    6e2e:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    6e30:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    6e34:	e003      	b.n	6e3e <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    6e36:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    6e38:	6854      	ldr	r4, [r2, #4]
    6e3a:	2c00      	cmp	r4, #0
    6e3c:	d0b3      	beq.n	6da6 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    6e3e:	8813      	ldrh	r3, [r2, #0]
    6e40:	4283      	cmp	r3, r0
    6e42:	d1f8      	bne.n	6e36 <usb_isr+0x7fa>
    6e44:	8853      	ldrh	r3, [r2, #2]
    6e46:	4573      	cmp	r3, lr
    6e48:	d1f5      	bne.n	6e36 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    6e4a:	0a00      	lsrs	r0, r0, #8
    6e4c:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    6e4e:	bf0c      	ite	eq
    6e50:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    6e54:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    6e58:	e003      	b.n	6e62 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    6e5a:	4a64      	ldr	r2, [pc, #400]	; (6fec <usb_isr+0x9b0>)
    6e5c:	4c64      	ldr	r4, [pc, #400]	; (6ff0 <usb_isr+0x9b4>)
    6e5e:	7812      	ldrb	r2, [r2, #0]
    6e60:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    6e62:	88e8      	ldrh	r0, [r5, #6]
    6e64:	4570      	cmp	r0, lr
    6e66:	f080 813f 	bcs.w	70e8 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6e6a:	4962      	ldr	r1, [pc, #392]	; (6ff4 <usb_isr+0x9b8>)
    6e6c:	780d      	ldrb	r5, [r1, #0]
    6e6e:	2840      	cmp	r0, #64	; 0x40
    6e70:	4684      	mov	ip, r0
    6e72:	f045 0e02 	orr.w	lr, r5, #2
    6e76:	bf28      	it	cs
    6e78:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    6e7c:	eb04 030c 	add.w	r3, r4, ip
    6e80:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    6e84:	9302      	str	r3, [sp, #8]
    6e86:	2301      	movs	r3, #1
    6e88:	6054      	str	r4, [r2, #4]
    6e8a:	ebcc 0000 	rsb	r0, ip, r0
    6e8e:	ea4f 480c 	mov.w	r8, ip, lsl #16
    6e92:	2200      	movs	r2, #0
    6e94:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6e96:	24c8      	movs	r4, #200	; 0xc8
    6e98:	e65e      	b.n	6b58 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    6e9a:	4c55      	ldr	r4, [pc, #340]	; (6ff0 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    6e9c:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    6ea0:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    6ea2:	7062      	strb	r2, [r4, #1]
    6ea4:	e7dd      	b.n	6e62 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6ea6:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    6eaa:	f47f af7c 	bne.w	6da6 <usb_isr+0x76a>
    6eae:	2301      	movs	r3, #1
    6eb0:	2200      	movs	r2, #0
    6eb2:	9301      	str	r3, [sp, #4]
    6eb4:	e63d      	b.n	6b32 <usb_isr+0x4f6>
    6eb6:	f242 3221 	movw	r2, #8993	; 0x2321
    6eba:	4291      	cmp	r1, r2
    6ebc:	d0f7      	beq.n	6eae <usb_isr+0x872>
    6ebe:	e772      	b.n	6da6 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    6ec0:	886a      	ldrh	r2, [r5, #2]
    6ec2:	2a00      	cmp	r2, #0
    6ec4:	f47f af6f 	bne.w	6da6 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    6ec8:	483a      	ldr	r0, [pc, #232]	; (6fb4 <usb_isr+0x978>)
    6eca:	f8cd e004 	str.w	lr, [sp, #4]
    6ece:	0089      	lsls	r1, r1, #2
    6ed0:	4408      	add	r0, r1
    6ed2:	7801      	ldrb	r1, [r0, #0]
    6ed4:	f021 0102 	bic.w	r1, r1, #2
    6ed8:	7001      	strb	r1, [r0, #0]
    6eda:	e62a      	b.n	6b32 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    6edc:	f000 f996 	bl	720c <usb_malloc>
				if (p) {
    6ee0:	2800      	cmp	r0, #0
    6ee2:	f000 80ef 	beq.w	70c4 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    6ee6:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6ee8:	4a3d      	ldr	r2, [pc, #244]	; (6fe0 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    6eea:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6eee:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    6ef2:	f000 f98b 	bl	720c <usb_malloc>
				if (p) {
    6ef6:	2800      	cmp	r0, #0
    6ef8:	f000 80de 	beq.w	70b8 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    6efc:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6efe:	4a37      	ldr	r2, [pc, #220]	; (6fdc <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    6f00:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6f04:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    6f08:	e738      	b.n	6d7c <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    6f0a:	f000 f97f 	bl	720c <usb_malloc>
				if (p) {
    6f0e:	2800      	cmp	r0, #0
    6f10:	f000 80c0 	beq.w	7094 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    6f14:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6f16:	4a32      	ldr	r2, [pc, #200]	; (6fe0 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    6f18:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6f1c:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    6f20:	f000 f974 	bl	720c <usb_malloc>
				if (p) {
    6f24:	2800      	cmp	r0, #0
    6f26:	f000 80af 	beq.w	7088 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    6f2a:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6f2c:	4a2b      	ldr	r2, [pc, #172]	; (6fdc <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    6f2e:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6f32:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    6f36:	e708      	b.n	6d4a <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    6f38:	f000 f968 	bl	720c <usb_malloc>
				if (p) {
    6f3c:	2800      	cmp	r0, #0
    6f3e:	f000 80cd 	beq.w	70dc <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    6f42:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6f44:	4a26      	ldr	r2, [pc, #152]	; (6fe0 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    6f46:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6f4a:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    6f4e:	f000 f95d 	bl	720c <usb_malloc>
				if (p) {
    6f52:	2800      	cmp	r0, #0
    6f54:	f000 80bc 	beq.w	70d0 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    6f58:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6f5a:	4a20      	ldr	r2, [pc, #128]	; (6fdc <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    6f5c:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6f60:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    6f64:	e6e3      	b.n	6d2e <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    6f66:	f000 f951 	bl	720c <usb_malloc>
				if (p) {
    6f6a:	2800      	cmp	r0, #0
    6f6c:	f000 809e 	beq.w	70ac <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    6f70:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6f72:	4a1b      	ldr	r2, [pc, #108]	; (6fe0 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    6f74:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6f78:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    6f7c:	f000 f946 	bl	720c <usb_malloc>
				if (p) {
    6f80:	2800      	cmp	r0, #0
    6f82:	f000 808d 	beq.w	70a0 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    6f86:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6f88:	4a14      	ldr	r2, [pc, #80]	; (6fdc <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    6f8a:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6f8e:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    6f92:	e6e7      	b.n	6d64 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    6f94:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6f96:	3808      	subs	r0, #8
    6f98:	f000 f958 	bl	724c <usb_free>
    6f9c:	e504      	b.n	69a8 <usb_isr+0x36c>
    6f9e:	6b48      	ldr	r0, [r1, #52]	; 0x34
    6fa0:	3808      	subs	r0, #8
    6fa2:	f000 f953 	bl	724c <usb_free>
    6fa6:	e4f9      	b.n	699c <usb_isr+0x360>
    6fa8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    6faa:	3808      	subs	r0, #8
    6fac:	f000 f94e 	bl	724c <usb_free>
    6fb0:	e4ee      	b.n	6990 <usb_isr+0x354>
    6fb2:	bf00      	nop
    6fb4:	400720c0 	.word	0x400720c0
    6fb8:	40072080 	.word	0x40072080
    6fbc:	00009fa4 	.word	0x00009fa4
    6fc0:	400720c4 	.word	0x400720c4
    6fc4:	1fff1441 	.word	0x1fff1441
    6fc8:	400720c8 	.word	0x400720c8
    6fcc:	400720cc 	.word	0x400720cc
    6fd0:	400720d0 	.word	0x400720d0
    6fd4:	1fff0000 	.word	0x1fff0000
    6fd8:	40072094 	.word	0x40072094
    6fdc:	004000c8 	.word	0x004000c8
    6fe0:	00400088 	.word	0x00400088
    6fe4:	1fff13d5 	.word	0x1fff13d5
    6fe8:	00009fa8 	.word	0x00009fa8
    6fec:	1fff144c 	.word	0x1fff144c
    6ff0:	1fff1444 	.word	0x1fff1444
    6ff4:	1fff1440 	.word	0x1fff1440
    6ff8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6ffa:	3808      	subs	r0, #8
    6ffc:	f000 f926 	bl	724c <usb_free>
    7000:	e4c0      	b.n	6984 <usb_isr+0x348>
    7002:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    7004:	3808      	subs	r0, #8
    7006:	f000 f921 	bl	724c <usb_free>
    700a:	e4fd      	b.n	6a08 <usb_isr+0x3cc>
    700c:	6f48      	ldr	r0, [r1, #116]	; 0x74
    700e:	3808      	subs	r0, #8
    7010:	f000 f91c 	bl	724c <usb_free>
    7014:	e4f2      	b.n	69fc <usb_isr+0x3c0>
    7016:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    7018:	3808      	subs	r0, #8
    701a:	f000 f917 	bl	724c <usb_free>
    701e:	e4e7      	b.n	69f0 <usb_isr+0x3b4>
    7020:	6e48      	ldr	r0, [r1, #100]	; 0x64
    7022:	3808      	subs	r0, #8
    7024:	f000 f912 	bl	724c <usb_free>
    7028:	e4dc      	b.n	69e4 <usb_isr+0x3a8>
    702a:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    702c:	3808      	subs	r0, #8
    702e:	f000 f90d 	bl	724c <usb_free>
    7032:	e4d1      	b.n	69d8 <usb_isr+0x39c>
    7034:	6d48      	ldr	r0, [r1, #84]	; 0x54
    7036:	3808      	subs	r0, #8
    7038:	f000 f908 	bl	724c <usb_free>
    703c:	e4c6      	b.n	69cc <usb_isr+0x390>
    703e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    7040:	3808      	subs	r0, #8
    7042:	f000 f903 	bl	724c <usb_free>
    7046:	e4bb      	b.n	69c0 <usb_isr+0x384>
    7048:	6c48      	ldr	r0, [r1, #68]	; 0x44
    704a:	3808      	subs	r0, #8
    704c:	f000 f8fe 	bl	724c <usb_free>
    7050:	e4b0      	b.n	69b4 <usb_isr+0x378>
    7052:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    7056:	3808      	subs	r0, #8
    7058:	f000 f8f8 	bl	724c <usb_free>
    705c:	e4ec      	b.n	6a38 <usb_isr+0x3fc>
    705e:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    7062:	3808      	subs	r0, #8
    7064:	f000 f8f2 	bl	724c <usb_free>
    7068:	e4e0      	b.n	6a2c <usb_isr+0x3f0>
    706a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    706e:	3808      	subs	r0, #8
    7070:	f000 f8ec 	bl	724c <usb_free>
    7074:	e4d4      	b.n	6a20 <usb_isr+0x3e4>
    7076:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    707a:	3808      	subs	r0, #8
    707c:	f000 f8e6 	bl	724c <usb_free>
    7080:	e4c8      	b.n	6a14 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    7082:	f04f 0e02 	mov.w	lr, #2
    7086:	e6ec      	b.n	6e62 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    7088:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    708a:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    708e:	3201      	adds	r2, #1
    7090:	702a      	strb	r2, [r5, #0]
    7092:	e65a      	b.n	6d4a <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    7094:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    7096:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    709a:	3201      	adds	r2, #1
    709c:	702a      	strb	r2, [r5, #0]
    709e:	e73f      	b.n	6f20 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    70a0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    70a2:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    70a6:	3201      	adds	r2, #1
    70a8:	702a      	strb	r2, [r5, #0]
    70aa:	e65b      	b.n	6d64 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    70ac:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    70ae:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    70b2:	3201      	adds	r2, #1
    70b4:	702a      	strb	r2, [r5, #0]
    70b6:	e761      	b.n	6f7c <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    70b8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    70ba:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    70be:	3201      	adds	r2, #1
    70c0:	702a      	strb	r2, [r5, #0]
    70c2:	e65b      	b.n	6d7c <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    70c4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    70c6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    70ca:	3201      	adds	r2, #1
    70cc:	702a      	strb	r2, [r5, #0]
    70ce:	e710      	b.n	6ef2 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    70d0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    70d2:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    70d6:	3201      	adds	r2, #1
    70d8:	702a      	strb	r2, [r5, #0]
    70da:	e628      	b.n	6d2e <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    70dc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    70de:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    70e2:	3201      	adds	r2, #1
    70e4:	702a      	strb	r2, [r5, #0]
    70e6:	e732      	b.n	6f4e <usb_isr+0x912>
    70e8:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    70ec:	46f4      	mov	ip, lr
    70ee:	bf28      	it	cs
    70f0:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    70f4:	eb04 030c 	add.w	r3, r4, ip
    70f8:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    70fa:	2301      	movs	r3, #1
    70fc:	ebcc 000e 	rsb	r0, ip, lr
    7100:	ea4f 480c 	mov.w	r8, ip, lsl #16
    7104:	2200      	movs	r2, #0
    7106:	9301      	str	r3, [sp, #4]
    7108:	e518      	b.n	6b3c <usb_isr+0x500>
    710a:	bf00      	nop

0000710c <usb_init>:
}



void usb_init(void)
{
    710c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    7110:	f000 ff3e 	bl	7f90 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    7114:	4c31      	ldr	r4, [pc, #196]	; (71dc <usb_init+0xd0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7116:	4b32      	ldr	r3, [pc, #200]	; (71e0 <usb_init+0xd4>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    7118:	4832      	ldr	r0, [pc, #200]	; (71e4 <usb_init+0xd8>)
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    711a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 7200 <usb_init+0xf4>
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    711e:	4e32      	ldr	r6, [pc, #200]	; (71e8 <usb_init+0xdc>)
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    7120:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 7204 <usb_init+0xf8>
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    7124:	4f31      	ldr	r7, [pc, #196]	; (71ec <usb_init+0xe0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    7126:	4d32      	ldr	r5, [pc, #200]	; (71f0 <usb_init+0xe4>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    7128:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 7208 <usb_init+0xfc>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    712c:	2200      	movs	r2, #0
    712e:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    7130:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7132:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    7134:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7136:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    7138:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    713a:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    713c:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    713e:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    7140:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7142:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    7144:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7146:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    7148:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    714a:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    714c:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    714e:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    7150:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7152:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    7154:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7156:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    7158:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    715a:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    715c:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    715e:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    7160:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7162:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    7164:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7166:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    7168:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    716a:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    716c:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    716e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    7172:	6821      	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    7174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    7178:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    717c:	6021      	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    717e:	6801      	ldr	r1, [r0, #0]
    7180:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
    7184:	6001      	str	r1, [r0, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    7186:	2103      	movs	r1, #3
    7188:	f888 1000 	strb.w	r1, [r8]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    718c:	20a0      	movs	r0, #160	; 0xa0
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    718e:	f3c3 2107 	ubfx	r1, r3, #8, #8
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    7192:	f88c 0000 	strb.w	r0, [ip]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    7196:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    719a:	7031      	strb	r1, [r6, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    719c:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    71a0:	4914      	ldr	r1, [pc, #80]	; (71f4 <usb_init+0xe8>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    71a2:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    71a4:	0e1b      	lsrs	r3, r3, #24
    71a6:	702b      	strb	r3, [r5, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    71a8:	34cc      	adds	r4, #204	; 0xcc
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    71aa:	23ff      	movs	r3, #255	; 0xff
    71ac:	f88e 3000 	strb.w	r3, [lr]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    71b0:	4d11      	ldr	r5, [pc, #68]	; (71f8 <usb_init+0xec>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    71b2:	f80c 3cb8 	strb.w	r3, [ip, #-184]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    71b6:	4811      	ldr	r0, [pc, #68]	; (71fc <usb_init+0xf0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    71b8:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    71ba:	2301      	movs	r3, #1
    71bc:	f806 3c08 	strb.w	r3, [r6, #-8]
	USB0_USBCTRL = 0;
    71c0:	7022      	strb	r2, [r4, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    71c2:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    71c4:	f44f 1400 	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    71c8:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    71ca:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    71ce:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    71d0:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    71d2:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    71d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71da:	bf00      	nop
    71dc:	40048034 	.word	0x40048034
    71e0:	1fff0000 	.word	0x1fff0000
    71e4:	4000d800 	.word	0x4000d800
    71e8:	4007209c 	.word	0x4007209c
    71ec:	400720b0 	.word	0x400720b0
    71f0:	400720b4 	.word	0x400720b4
    71f4:	40072010 	.word	0x40072010
    71f8:	e000e435 	.word	0xe000e435
    71fc:	e000e104 	.word	0xe000e104
    7200:	40072144 	.word	0x40072144
    7204:	40072140 	.word	0x40072140
    7208:	40072080 	.word	0x40072080

0000720c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    720c:	b672      	cpsid	i
	avail = usb_buffer_available;
    720e:	480d      	ldr	r0, [pc, #52]	; (7244 <usb_malloc+0x38>)
    7210:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    7212:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    7216:	2b0b      	cmp	r3, #11
    7218:	dc10      	bgt.n	723c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    721a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    721e:	40d9      	lsrs	r1, r3
    7220:	ea22 0201 	bic.w	r2, r2, r1
    7224:	6002      	str	r2, [r0, #0]
	__enable_irq();
    7226:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    7228:	4807      	ldr	r0, [pc, #28]	; (7248 <usb_malloc+0x3c>)
    722a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    722e:	00db      	lsls	r3, r3, #3
    7230:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    7232:	2100      	movs	r1, #0
    7234:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    7236:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    7238:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    723a:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    723c:	b662      	cpsie	i
		return NULL;
    723e:	2000      	movs	r0, #0
    7240:	4770      	bx	lr
    7242:	bf00      	nop
    7244:	1fff0798 	.word	0x1fff0798
    7248:	1fff03d0 	.word	0x1fff03d0

0000724c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    724c:	4b0d      	ldr	r3, [pc, #52]	; (7284 <usb_free+0x38>)
    724e:	4a0e      	ldr	r2, [pc, #56]	; (7288 <usb_free+0x3c>)
    7250:	1ac3      	subs	r3, r0, r3
    7252:	fba2 2303 	umull	r2, r3, r2, r3
    7256:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    7258:	2b0b      	cmp	r3, #11
    725a:	d80c      	bhi.n	7276 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    725c:	4a0b      	ldr	r2, [pc, #44]	; (728c <usb_free+0x40>)
    725e:	7812      	ldrb	r2, [r2, #0]
    7260:	b952      	cbnz	r2, 7278 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    7262:	b672      	cpsid	i
	usb_buffer_available |= mask;
    7264:	480a      	ldr	r0, [pc, #40]	; (7290 <usb_free+0x44>)
    7266:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    726a:	6802      	ldr	r2, [r0, #0]
    726c:	fa21 f303 	lsr.w	r3, r1, r3
    7270:	431a      	orrs	r2, r3
    7272:	6002      	str	r2, [r0, #0]
	__enable_irq();
    7274:	b662      	cpsie	i
    7276:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    7278:	4a06      	ldr	r2, [pc, #24]	; (7294 <usb_free+0x48>)
    727a:	7812      	ldrb	r2, [r2, #0]
    727c:	2a00      	cmp	r2, #0
    727e:	d0f0      	beq.n	7262 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    7280:	f7ff b936 	b.w	64f0 <usb_rx_memory>
    7284:	1fff03d0 	.word	0x1fff03d0
    7288:	38e38e39 	.word	0x38e38e39
    728c:	1fff1441 	.word	0x1fff1441
    7290:	1fff0798 	.word	0x1fff0798
    7294:	1fff144c 	.word	0x1fff144c

00007298 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    7298:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    729a:	4d0f      	ldr	r5, [pc, #60]	; (72d8 <usb_serial_getchar+0x40>)
    729c:	6828      	ldr	r0, [r5, #0]
    729e:	b178      	cbz	r0, 72c0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    72a0:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    72a2:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    72a4:	18c1      	adds	r1, r0, r3
    72a6:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    72a8:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    72aa:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    72ac:	d202      	bcs.n	72b4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    72ae:	8043      	strh	r3, [r0, #2]
	}
	return c;
    72b0:	4620      	mov	r0, r4
}
    72b2:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    72b4:	f7ff ffca 	bl	724c <usb_free>
		rx_packet = NULL;
    72b8:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    72ba:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    72bc:	602b      	str	r3, [r5, #0]
    72be:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    72c0:	4b06      	ldr	r3, [pc, #24]	; (72dc <usb_serial_getchar+0x44>)
    72c2:	781b      	ldrb	r3, [r3, #0]
    72c4:	b12b      	cbz	r3, 72d2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    72c6:	2003      	movs	r0, #3
    72c8:	f7ff f8de 	bl	6488 <usb_rx>
    72cc:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    72ce:	2800      	cmp	r0, #0
    72d0:	d1e6      	bne.n	72a0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    72d2:	f04f 30ff 	mov.w	r0, #4294967295
    72d6:	bd38      	pop	{r3, r4, r5, pc}
    72d8:	1fff1460 	.word	0x1fff1460
    72dc:	1fff144c 	.word	0x1fff144c

000072e0 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    72e0:	b510      	push	{r4, lr}
	if (!rx_packet) {
    72e2:	4c09      	ldr	r4, [pc, #36]	; (7308 <usb_serial_peekchar+0x28>)
    72e4:	6820      	ldr	r0, [r4, #0]
    72e6:	b118      	cbz	r0, 72f0 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    72e8:	8843      	ldrh	r3, [r0, #2]
    72ea:	4418      	add	r0, r3
    72ec:	7a00      	ldrb	r0, [r0, #8]
}
    72ee:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    72f0:	4b06      	ldr	r3, [pc, #24]	; (730c <usb_serial_peekchar+0x2c>)
    72f2:	781b      	ldrb	r3, [r3, #0]
    72f4:	b12b      	cbz	r3, 7302 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    72f6:	2003      	movs	r0, #3
    72f8:	f7ff f8c6 	bl	6488 <usb_rx>
    72fc:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    72fe:	2800      	cmp	r0, #0
    7300:	d1f2      	bne.n	72e8 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    7302:	f04f 30ff 	mov.w	r0, #4294967295
    7306:	bd10      	pop	{r4, pc}
    7308:	1fff1460 	.word	0x1fff1460
    730c:	1fff144c 	.word	0x1fff144c

00007310 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    7310:	4b04      	ldr	r3, [pc, #16]	; (7324 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    7312:	4a05      	ldr	r2, [pc, #20]	; (7328 <usb_serial_available+0x18>)
    7314:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    7316:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    7318:	b11b      	cbz	r3, 7322 <usb_serial_available+0x12>
    731a:	881a      	ldrh	r2, [r3, #0]
    731c:	885b      	ldrh	r3, [r3, #2]
    731e:	1ad3      	subs	r3, r2, r3
    7320:	4418      	add	r0, r3
	return count;
}
    7322:	4770      	bx	lr
    7324:	1fff1460 	.word	0x1fff1460
    7328:	1fff1788 	.word	0x1fff1788

0000732c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    732c:	4b0b      	ldr	r3, [pc, #44]	; (735c <usb_serial_flush_input+0x30>)
    732e:	781b      	ldrb	r3, [r3, #0]
    7330:	b19b      	cbz	r3, 735a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    7332:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    7334:	4c0a      	ldr	r4, [pc, #40]	; (7360 <usb_serial_flush_input+0x34>)
    7336:	6820      	ldr	r0, [r4, #0]
    7338:	b148      	cbz	r0, 734e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    733a:	f7ff ff87 	bl	724c <usb_free>
		rx_packet = NULL;
    733e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    7340:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    7342:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    7344:	f7ff f8a0 	bl	6488 <usb_rx>
		if (!rx) break;
    7348:	b130      	cbz	r0, 7358 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    734a:	f7ff ff7f 	bl	724c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    734e:	2003      	movs	r0, #3
    7350:	f7ff f89a 	bl	6488 <usb_rx>
		if (!rx) break;
    7354:	2800      	cmp	r0, #0
    7356:	d1f8      	bne.n	734a <usb_serial_flush_input+0x1e>
    7358:	bd10      	pop	{r4, pc}
    735a:	4770      	bx	lr
    735c:	1fff144c 	.word	0x1fff144c
    7360:	1fff1460 	.word	0x1fff1460

00007364 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    7364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    7368:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 7464 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    736c:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    736e:	2201      	movs	r2, #1
    7370:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    7374:	9101      	str	r1, [sp, #4]
    7376:	b369      	cbz	r1, 73d4 <usb_serial_write+0x70>
    7378:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 7468 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    737c:	4f35      	ldr	r7, [pc, #212]	; (7454 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    737e:	9e01      	ldr	r6, [sp, #4]
    7380:	4683      	mov	fp, r0
		if (!tx_packet) {
    7382:	f8d8 0000 	ldr.w	r0, [r8]
    7386:	b3b0      	cbz	r0, 73f6 <usb_serial_write+0x92>
    7388:	4d33      	ldr	r5, [pc, #204]	; (7458 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    738a:	8844      	ldrh	r4, [r0, #2]
    738c:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    7390:	42b1      	cmp	r1, r6
    7392:	bf28      	it	cs
    7394:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7396:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    739a:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    739c:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    73a0:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    73a2:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    73a4:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    73a8:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    73ac:	b151      	cbz	r1, 73c4 <usb_serial_write+0x60>
    73ae:	3c01      	subs	r4, #1
    73b0:	4422      	add	r2, r4
    73b2:	4459      	add	r1, fp
    73b4:	f81b 4b01 	ldrb.w	r4, [fp], #1
    73b8:	f802 4f01 	strb.w	r4, [r2, #1]!
    73bc:	458b      	cmp	fp, r1
    73be:	d1f9      	bne.n	73b4 <usb_serial_write+0x50>
    73c0:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    73c4:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    73c8:	d80b      	bhi.n	73e2 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    73ca:	4a24      	ldr	r2, [pc, #144]	; (745c <usb_serial_write+0xf8>)
    73cc:	2105      	movs	r1, #5
    73ce:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    73d0:	2e00      	cmp	r6, #0
    73d2:	d1d6      	bne.n	7382 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    73d4:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    73d6:	2300      	movs	r3, #0
    73d8:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    73dc:	b003      	add	sp, #12
    73de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    73e2:	2240      	movs	r2, #64	; 0x40
    73e4:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    73e6:	4601      	mov	r1, r0
    73e8:	2004      	movs	r0, #4
    73ea:	f7ff f8e5 	bl	65b8 <usb_tx>
			tx_packet = NULL;
    73ee:	2200      	movs	r2, #0
    73f0:	f8c8 2000 	str.w	r2, [r8]
    73f4:	e7e9      	b.n	73ca <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    73f6:	783a      	ldrb	r2, [r7, #0]
    73f8:	b322      	cbz	r2, 7444 <usb_serial_write+0xe0>
    73fa:	4c19      	ldr	r4, [pc, #100]	; (7460 <usb_serial_write+0xfc>)
    73fc:	4d16      	ldr	r5, [pc, #88]	; (7458 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    73fe:	f04f 0a01 	mov.w	sl, #1
    7402:	e007      	b.n	7414 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    7404:	3c01      	subs	r4, #1
    7406:	d016      	beq.n	7436 <usb_serial_write+0xd2>
    7408:	782a      	ldrb	r2, [r5, #0]
    740a:	b9a2      	cbnz	r2, 7436 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    740c:	f000 fa16 	bl	783c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    7410:	783a      	ldrb	r2, [r7, #0]
    7412:	b1ba      	cbz	r2, 7444 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    7414:	2004      	movs	r0, #4
    7416:	f7ff f855 	bl	64c4 <usb_tx_packet_count>
    741a:	2807      	cmp	r0, #7
    741c:	d8f2      	bhi.n	7404 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    741e:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    7422:	f7ff fef3 	bl	720c <usb_malloc>
    7426:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    742a:	2800      	cmp	r0, #0
    742c:	d1ad      	bne.n	738a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    742e:	4b0d      	ldr	r3, [pc, #52]	; (7464 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    7430:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    7432:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    7434:	d1e8      	bne.n	7408 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    7436:	2301      	movs	r3, #1
					return -1;
    7438:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    743c:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    743e:	b003      	add	sp, #12
    7440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    7444:	2300      	movs	r3, #0
					return -1;
    7446:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    744a:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    744e:	b003      	add	sp, #12
    7450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7454:	1fff144c 	.word	0x1fff144c
    7458:	1fff145c 	.word	0x1fff145c
    745c:	1fff1454 	.word	0x1fff1454
    7460:	00014821 	.word	0x00014821
    7464:	1fff1455 	.word	0x1fff1455
    7468:	1fff1458 	.word	0x1fff1458

0000746c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    746c:	b500      	push	{lr}
    746e:	b083      	sub	sp, #12
    7470:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    7472:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    7474:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    7478:	4618      	mov	r0, r3
    747a:	f7ff ff73 	bl	7364 <usb_serial_write>
}
    747e:	b003      	add	sp, #12
    7480:	f85d fb04 	ldr.w	pc, [sp], #4

00007484 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    7484:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    7486:	4d0e      	ldr	r5, [pc, #56]	; (74c0 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    7488:	4c0e      	ldr	r4, [pc, #56]	; (74c4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    748a:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    748c:	2301      	movs	r3, #1
    748e:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    7490:	b128      	cbz	r0, 749e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    7492:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    7494:	2300      	movs	r3, #0
    7496:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    7498:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    749c:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    749e:	4b0a      	ldr	r3, [pc, #40]	; (74c8 <usb_serial_write_buffer_free+0x44>)
    74a0:	781b      	ldrb	r3, [r3, #0]
    74a2:	b913      	cbnz	r3, 74aa <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    74a4:	2000      	movs	r0, #0
    74a6:	7020      	strb	r0, [r4, #0]
			return 0;
    74a8:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    74aa:	2004      	movs	r0, #4
    74ac:	f7ff f80a 	bl	64c4 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    74b0:	2807      	cmp	r0, #7
    74b2:	d8f7      	bhi.n	74a4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    74b4:	f7ff feaa 	bl	720c <usb_malloc>
    74b8:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    74ba:	2800      	cmp	r0, #0
    74bc:	d1e9      	bne.n	7492 <usb_serial_write_buffer_free+0xe>
    74be:	e7f1      	b.n	74a4 <usb_serial_write_buffer_free+0x20>
    74c0:	1fff1458 	.word	0x1fff1458
    74c4:	1fff1455 	.word	0x1fff1455
    74c8:	1fff144c 	.word	0x1fff144c

000074cc <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    74cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    74ce:	4b11      	ldr	r3, [pc, #68]	; (7514 <usb_serial_flush_output+0x48>)
    74d0:	781b      	ldrb	r3, [r3, #0]
    74d2:	b18b      	cbz	r3, 74f8 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    74d4:	4e10      	ldr	r6, [pc, #64]	; (7518 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    74d6:	4d11      	ldr	r5, [pc, #68]	; (751c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    74d8:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    74da:	2701      	movs	r7, #1
    74dc:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    74de:	b164      	cbz	r4, 74fa <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    74e0:	4a0f      	ldr	r2, [pc, #60]	; (7520 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    74e2:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    74e4:	2700      	movs	r7, #0
    74e6:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    74e8:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    74ea:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    74ec:	2004      	movs	r0, #4
    74ee:	f7ff f863 	bl	65b8 <usb_tx>
		tx_packet = NULL;
    74f2:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    74f4:	2300      	movs	r3, #0
    74f6:	702b      	strb	r3, [r5, #0]
    74f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    74fa:	f7ff fe87 	bl	720c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    74fe:	4b08      	ldr	r3, [pc, #32]	; (7520 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    7500:	b128      	cbz	r0, 750e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    7502:	4601      	mov	r1, r0
    7504:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    7506:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    7508:	f7ff f856 	bl	65b8 <usb_tx>
    750c:	e7f2      	b.n	74f4 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    750e:	701f      	strb	r7, [r3, #0]
    7510:	e7f0      	b.n	74f4 <usb_serial_flush_output+0x28>
    7512:	bf00      	nop
    7514:	1fff144c 	.word	0x1fff144c
    7518:	1fff1458 	.word	0x1fff1458
    751c:	1fff1455 	.word	0x1fff1455
    7520:	1fff1454 	.word	0x1fff1454

00007524 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    7524:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    7526:	4b0e      	ldr	r3, [pc, #56]	; (7560 <usb_serial_flush_callback+0x3c>)
    7528:	781b      	ldrb	r3, [r3, #0]
    752a:	b973      	cbnz	r3, 754a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    752c:	4c0d      	ldr	r4, [pc, #52]	; (7564 <usb_serial_flush_callback+0x40>)
    752e:	6821      	ldr	r1, [r4, #0]
    7530:	b161      	cbz	r1, 754c <usb_serial_flush_callback+0x28>
    7532:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    7536:	884b      	ldrh	r3, [r1, #2]
    7538:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    753a:	2004      	movs	r0, #4
    753c:	f7ff f83c 	bl	65b8 <usb_tx>
		tx_packet = NULL;
    7540:	6025      	str	r5, [r4, #0]
    7542:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    7544:	4b08      	ldr	r3, [pc, #32]	; (7568 <usb_serial_flush_callback+0x44>)
    7546:	2201      	movs	r2, #1
    7548:	701a      	strb	r2, [r3, #0]
    754a:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    754c:	f7ff fe5e 	bl	720c <usb_malloc>
		if (tx) {
    7550:	2800      	cmp	r0, #0
    7552:	d0f7      	beq.n	7544 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    7554:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    7556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    755a:	2004      	movs	r0, #4
    755c:	f7ff b82c 	b.w	65b8 <usb_tx>
    7560:	1fff1455 	.word	0x1fff1455
    7564:	1fff1458 	.word	0x1fff1458
    7568:	1fff1454 	.word	0x1fff1454

0000756c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    756c:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    756e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7572:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    7574:	7f43      	ldrb	r3, [r0, #29]
    7576:	b933      	cbnz	r3, 7586 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    7578:	7f01      	ldrb	r1, [r0, #28]
    757a:	2901      	cmp	r1, #1
    757c:	d008      	beq.n	7590 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    757e:	2903      	cmp	r1, #3
    7580:	d010      	beq.n	75a4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    7582:	2301      	movs	r3, #1
    7584:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7586:	b902      	cbnz	r2, 758a <EventResponder::triggerEventNotImmediate()+0x1e>
    7588:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    758a:	f85d 4b04 	ldr.w	r4, [sp], #4
    758e:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    7590:	4c11      	ldr	r4, [pc, #68]	; (75d8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    7592:	6821      	ldr	r1, [r4, #0]
    7594:	b1a1      	cbz	r1, 75c0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    7596:	4911      	ldr	r1, [pc, #68]	; (75dc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    7598:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    759a:	680b      	ldr	r3, [r1, #0]
    759c:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    759e:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    75a0:	6158      	str	r0, [r3, #20]
    75a2:	e7ee      	b.n	7582 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    75a4:	4c0e      	ldr	r4, [pc, #56]	; (75e0 <EventResponder::triggerEventNotImmediate()+0x74>)
    75a6:	6821      	ldr	r1, [r4, #0]
    75a8:	b181      	cbz	r1, 75cc <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    75aa:	490e      	ldr	r1, [pc, #56]	; (75e4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    75ac:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    75ae:	680b      	ldr	r3, [r1, #0]
    75b0:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    75b2:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    75b4:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    75b6:	4b0c      	ldr	r3, [pc, #48]	; (75e8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    75b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    75bc:	6019      	str	r1, [r3, #0]
    75be:	e7e0      	b.n	7582 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    75c0:	4b06      	ldr	r3, [pc, #24]	; (75dc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    75c2:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    75c4:	6181      	str	r1, [r0, #24]
				firstYield = this;
    75c6:	6020      	str	r0, [r4, #0]
				lastYield = this;
    75c8:	6018      	str	r0, [r3, #0]
    75ca:	e7da      	b.n	7582 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    75cc:	4b05      	ldr	r3, [pc, #20]	; (75e4 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    75ce:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    75d0:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    75d2:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    75d4:	6018      	str	r0, [r3, #0]
    75d6:	e7ee      	b.n	75b6 <EventResponder::triggerEventNotImmediate()+0x4a>
    75d8:	1fff1478 	.word	0x1fff1478
    75dc:	1fff1474 	.word	0x1fff1474
    75e0:	1fff1468 	.word	0x1fff1468
    75e4:	1fff146c 	.word	0x1fff146c
    75e8:	e000ed04 	.word	0xe000ed04

000075ec <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    75ec:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    75ee:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    75f0:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    75f2:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    75f4:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    75f6:	d003      	beq.n	7600 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    75f8:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    75fc:	f7ff bfb6 	b.w	756c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7600:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    7602:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7606:	4718      	bx	r3

00007608 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    7608:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    760a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    760e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    7610:	4c0c      	ldr	r4, [pc, #48]	; (7644 <EventResponder::runFromInterrupt()+0x3c>)
    7612:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7614:	b180      	cbz	r0, 7638 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    7616:	4e0c      	ldr	r6, [pc, #48]	; (7648 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    7618:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    761a:	6943      	ldr	r3, [r0, #20]
    761c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    761e:	b173      	cbz	r3, 763e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    7620:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7622:	b902      	cbnz	r2, 7626 <EventResponder::runFromInterrupt()+0x1e>
    7624:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    7626:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    7628:	6883      	ldr	r3, [r0, #8]
    762a:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    762c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7630:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    7632:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7634:	2800      	cmp	r0, #0
    7636:	d1f0      	bne.n	761a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7638:	b902      	cbnz	r2, 763c <EventResponder::runFromInterrupt()+0x34>
    763a:	b662      	cpsie	i
    763c:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    763e:	6033      	str	r3, [r6, #0]
    7640:	e7ef      	b.n	7622 <EventResponder::runFromInterrupt()+0x1a>
    7642:	bf00      	nop
    7644:	1fff1468 	.word	0x1fff1468
    7648:	1fff146c 	.word	0x1fff146c

0000764c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    764c:	f7ff bfdc 	b.w	7608 <EventResponder::runFromInterrupt()>

00007650 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    7650:	4a18      	ldr	r2, [pc, #96]	; (76b4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    7652:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    7654:	6814      	ldr	r4, [r2, #0]
    7656:	2c00      	cmp	r4, #0
    7658:	d027      	beq.n	76aa <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    765a:	6803      	ldr	r3, [r0, #0]
    765c:	6821      	ldr	r1, [r4, #0]
    765e:	428b      	cmp	r3, r1
    7660:	d20e      	bcs.n	7680 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    7662:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    7664:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    7666:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    7668:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    766a:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    766c:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    766e:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    7670:	2302      	movs	r3, #2
    7672:	7503      	strb	r3, [r0, #20]
}
    7674:	bc30      	pop	{r4, r5}
    7676:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    7678:	6811      	ldr	r1, [r2, #0]
    767a:	428b      	cmp	r3, r1
    767c:	4614      	mov	r4, r2
    767e:	d308      	bcc.n	7692 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    7680:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    7682:	1a5b      	subs	r3, r3, r1
    7684:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    7686:	2a00      	cmp	r2, #0
    7688:	d1f6      	bne.n	7678 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    768a:	6082      	str	r2, [r0, #8]
		_prev = timer;
    768c:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    768e:	60a0      	str	r0, [r4, #8]
    7690:	e7ee      	b.n	7670 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    7692:	68d2      	ldr	r2, [r2, #12]
    7694:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    7696:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    7698:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    769a:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    769c:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    769e:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    76a0:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    76a2:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    76a4:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    76a6:	bc30      	pop	{r4, r5}
    76a8:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    76aa:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    76ac:	60c4      	str	r4, [r0, #12]
		listActive = this;
    76ae:	6010      	str	r0, [r2, #0]
    76b0:	e7de      	b.n	7670 <MillisTimer::addToActiveList()+0x20>
    76b2:	bf00      	nop
    76b4:	1fff1470 	.word	0x1fff1470

000076b8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    76b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    76ba:	4e22      	ldr	r6, [pc, #136]	; (7744 <MillisTimer::runFromTimer()+0x8c>)
    76bc:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    76be:	b32c      	cbz	r4, 770c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    76c0:	6823      	ldr	r3, [r4, #0]
    76c2:	2b00      	cmp	r3, #0
    76c4:	d13a      	bne.n	773c <MillisTimer::runFromTimer()+0x84>
    76c6:	4f20      	ldr	r7, [pc, #128]	; (7748 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    76c8:	461d      	mov	r5, r3
    76ca:	e004      	b.n	76d6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    76cc:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    76ce:	b1ec      	cbz	r4, 770c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    76d0:	6823      	ldr	r3, [r4, #0]
    76d2:	2b00      	cmp	r3, #0
    76d4:	d132      	bne.n	773c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    76d6:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    76d8:	b103      	cbz	r3, 76dc <MillisTimer::runFromTimer()+0x24>
    76da:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    76dc:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    76de:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    76e0:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    76e2:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    76e4:	681b      	ldr	r3, [r3, #0]
    76e6:	42bb      	cmp	r3, r7
    76e8:	d121      	bne.n	772e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    76ea:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    76ec:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    76ee:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    76f0:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    76f2:	d020      	beq.n	7736 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    76f4:	f7ff ff3a 	bl	756c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    76f8:	6863      	ldr	r3, [r4, #4]
    76fa:	2b00      	cmp	r3, #0
    76fc:	d0e6      	beq.n	76cc <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    76fe:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    7700:	4620      	mov	r0, r4
    7702:	f7ff ffa5 	bl	7650 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    7706:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    7708:	2c00      	cmp	r4, #0
    770a:	d1e1      	bne.n	76d0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    770c:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    7710:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    7712:	4a0e      	ldr	r2, [pc, #56]	; (774c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    7714:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    7716:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    7718:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    771a:	b903      	cbnz	r3, 771e <MillisTimer::runFromTimer()+0x66>
    771c:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    771e:	b128      	cbz	r0, 772c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    7720:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    7722:	f7ff ff95 	bl	7650 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    7726:	4620      	mov	r0, r4
    7728:	2800      	cmp	r0, #0
    772a:	d1f9      	bne.n	7720 <MillisTimer::runFromTimer()+0x68>
    772c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    772e:	4622      	mov	r2, r4
    7730:	2100      	movs	r1, #0
    7732:	4798      	blx	r3
    7734:	e7e0      	b.n	76f8 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7736:	6883      	ldr	r3, [r0, #8]
    7738:	4798      	blx	r3
    773a:	e7dd      	b.n	76f8 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    773c:	3b01      	subs	r3, #1
    773e:	6023      	str	r3, [r4, #0]
			break;
    7740:	e7e4      	b.n	770c <MillisTimer::runFromTimer()+0x54>
    7742:	bf00      	nop
    7744:	1fff1470 	.word	0x1fff1470
    7748:	000075ed 	.word	0x000075ed
    774c:	1fff1480 	.word	0x1fff1480

00007750 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    7750:	4a02      	ldr	r2, [pc, #8]	; (775c <systick_isr+0xc>)
    7752:	6813      	ldr	r3, [r2, #0]
    7754:	3301      	adds	r3, #1
    7756:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    7758:	f7ff bfae 	b.w	76b8 <MillisTimer::runFromTimer()>
    775c:	1fff1368 	.word	0x1fff1368

00007760 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    7760:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    7762:	f7fd f94f 	bl	4a04 <setup>
	while (1) {
		loop();
    7766:	f7fd fa71 	bl	4c4c <loop>
		yield();
    776a:	f000 f867 	bl	783c <yield>
    776e:	e7fa      	b.n	7766 <main+0x6>

00007770 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    7770:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    7772:	4a06      	ldr	r2, [pc, #24]	; (778c <Print::println()+0x1c>)
	return write(buf, 2);
    7774:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    7776:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    7778:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    777a:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    777c:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    777e:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    7782:	2202      	movs	r2, #2
    7784:	4798      	blx	r3
}
    7786:	b003      	add	sp, #12
    7788:	f85d fb04 	ldr.w	pc, [sp], #4
    778c:	00009f78 	.word	0x00009f78

00007790 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    7790:	b5f0      	push	{r4, r5, r6, r7, lr}
    7792:	4607      	mov	r7, r0
    7794:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    7796:	2a00      	cmp	r2, #0
    7798:	d033      	beq.n	7802 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    779a:	2a01      	cmp	r2, #1
    779c:	bf08      	it	eq
    779e:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    77a0:	b351      	cbz	r1, 77f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    77a2:	2421      	movs	r4, #33	; 0x21
    77a4:	e000      	b.n	77a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    77a6:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    77a8:	fbb1 f5f2 	udiv	r5, r1, r2
    77ac:	fb02 1115 	mls	r1, r2, r5, r1
    77b0:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    77b2:	2909      	cmp	r1, #9
    77b4:	f100 0130 	add.w	r1, r0, #48	; 0x30
    77b8:	bf98      	it	ls
    77ba:	b2c8      	uxtbls	r0, r1
    77bc:	a90a      	add	r1, sp, #40	; 0x28
    77be:	bf88      	it	hi
    77c0:	3037      	addhi	r0, #55	; 0x37
    77c2:	4421      	add	r1, r4
    77c4:	bf88      	it	hi
    77c6:	b2c0      	uxtbhi	r0, r0
    77c8:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    77cc:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    77ce:	4629      	mov	r1, r5
    77d0:	2d00      	cmp	r5, #0
    77d2:	d1e8      	bne.n	77a6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    77d4:	b133      	cbz	r3, 77e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    77d6:	3c01      	subs	r4, #1
    77d8:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    77da:	ab0a      	add	r3, sp, #40	; 0x28
    77dc:	4423      	add	r3, r4
    77de:	222d      	movs	r2, #45	; 0x2d
    77e0:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    77e4:	683b      	ldr	r3, [r7, #0]
    77e6:	aa01      	add	r2, sp, #4
    77e8:	1911      	adds	r1, r2, r4
    77ea:	685b      	ldr	r3, [r3, #4]
    77ec:	4638      	mov	r0, r7
    77ee:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    77f2:	4798      	blx	r3
}
    77f4:	b00b      	add	sp, #44	; 0x2c
    77f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    77f8:	2230      	movs	r2, #48	; 0x30
    77fa:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    77fe:	2421      	movs	r4, #33	; 0x21
    7800:	e7e8      	b.n	77d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    7802:	6803      	ldr	r3, [r0, #0]
    7804:	b2c9      	uxtb	r1, r1
    7806:	681b      	ldr	r3, [r3, #0]
    7808:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    780a:	b00b      	add	sp, #44	; 0x2c
    780c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    780e:	bf00      	nop

00007810 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    7810:	f7ff bd8c 	b.w	732c <usb_serial_flush_input>

00007814 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    7814:	f7ff bd64 	b.w	72e0 <usb_serial_peekchar>

00007818 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    7818:	f7ff bd3e 	b.w	7298 <usb_serial_getchar>

0000781c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    781c:	f7ff bd78 	b.w	7310 <usb_serial_available>

00007820 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    7820:	f7ff be54 	b.w	74cc <usb_serial_flush_output>

00007824 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    7824:	f7ff be2e 	b.w	7484 <usb_serial_write_buffer_free>

00007828 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7828:	4608      	mov	r0, r1
    782a:	4611      	mov	r1, r2
    782c:	f7ff bd9a 	b.w	7364 <usb_serial_write>

00007830 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7830:	4608      	mov	r0, r1
    7832:	f7ff be1b 	b.w	746c <usb_serial_putchar>
    7836:	bf00      	nop

00007838 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    7838:	4770      	bx	lr
    783a:	bf00      	nop

0000783c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    783c:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    783e:	4c2c      	ldr	r4, [pc, #176]	; (78f0 <yield+0xb4>)
    7840:	7823      	ldrb	r3, [r4, #0]
    7842:	b103      	cbz	r3, 7846 <yield+0xa>
    7844:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    7846:	2301      	movs	r3, #1
    7848:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    784a:	f7ff fd61 	bl	7310 <usb_serial_available>
	if (Serial.available()) serialEvent();
    784e:	2800      	cmp	r0, #0
    7850:	d142      	bne.n	78d8 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    7852:	f000 f87b 	bl	794c <serial_available>
	if (Serial1.available()) serialEvent1();
    7856:	2800      	cmp	r0, #0
    7858:	d13b      	bne.n	78d2 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    785a:	f000 f90d 	bl	7a78 <serial2_available>
	if (Serial2.available()) serialEvent2();
    785e:	2800      	cmp	r0, #0
    7860:	d134      	bne.n	78cc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    7862:	f000 f99f 	bl	7ba4 <serial3_available>
	if (Serial3.available()) serialEvent3();
    7866:	bb70      	cbnz	r0, 78c6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    7868:	f000 fa18 	bl	7c9c <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    786c:	bb40      	cbnz	r0, 78c0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    786e:	f000 fa91 	bl	7d94 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    7872:	bb10      	cbnz	r0, 78ba <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    7874:	f000 fb0a 	bl	7e8c <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    7878:	b9e0      	cbnz	r0, 78b4 <yield+0x78>
#endif
	running = 0;
    787a:	2300      	movs	r3, #0
    787c:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    787e:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    7882:	2b00      	cmp	r3, #0
    7884:	d1de      	bne.n	7844 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7886:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    788a:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    788c:	4b19      	ldr	r3, [pc, #100]	; (78f4 <yield+0xb8>)
    788e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    7890:	b328      	cbz	r0, 78de <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    7892:	4c19      	ldr	r4, [pc, #100]	; (78f8 <yield+0xbc>)
    7894:	7822      	ldrb	r2, [r4, #0]
    7896:	bb12      	cbnz	r2, 78de <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    7898:	6945      	ldr	r5, [r0, #20]
    789a:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    789c:	2301      	movs	r3, #1
    789e:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    78a0:	b30d      	cbz	r5, 78e6 <yield+0xaa>
			firstYield->_prev = nullptr;
    78a2:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    78a4:	b901      	cbnz	r1, 78a8 <yield+0x6c>
    78a6:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    78a8:	2500      	movs	r5, #0
    78aa:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    78ac:	6883      	ldr	r3, [r0, #8]
    78ae:	4798      	blx	r3
		runningFromYield = false;
    78b0:	7025      	strb	r5, [r4, #0]
    78b2:	e7c7      	b.n	7844 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    78b4:	f000 fbb8 	bl	8028 <serialEvent6()>
    78b8:	e7df      	b.n	787a <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    78ba:	f000 fbb3 	bl	8024 <serialEvent5()>
    78be:	e7d9      	b.n	7874 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    78c0:	f000 fbae 	bl	8020 <serialEvent4()>
    78c4:	e7d3      	b.n	786e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    78c6:	f000 fba9 	bl	801c <serialEvent3()>
    78ca:	e7cd      	b.n	7868 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    78cc:	f000 fba4 	bl	8018 <serialEvent2()>
    78d0:	e7c7      	b.n	7862 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    78d2:	f000 fb9f 	bl	8014 <serialEvent1()>
    78d6:	e7c0      	b.n	785a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    78d8:	f7ff ffae 	bl	7838 <serialEvent()>
    78dc:	e7b9      	b.n	7852 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    78de:	2900      	cmp	r1, #0
    78e0:	d1b0      	bne.n	7844 <yield+0x8>
    78e2:	b662      	cpsie	i
    78e4:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    78e6:	4b05      	ldr	r3, [pc, #20]	; (78fc <yield+0xc0>)
    78e8:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    78ea:	2900      	cmp	r1, #0
    78ec:	d1dc      	bne.n	78a8 <yield+0x6c>
    78ee:	e7da      	b.n	78a6 <yield+0x6a>
    78f0:	1fff1484 	.word	0x1fff1484
    78f4:	1fff1478 	.word	0x1fff1478
    78f8:	1fff147c 	.word	0x1fff147c
    78fc:	1fff1474 	.word	0x1fff1474

00007900 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    7900:	b4f0      	push	{r4, r5, r6, r7}
    7902:	1e4d      	subs	r5, r1, #1
    7904:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    7906:	2400      	movs	r4, #0
    7908:	e000      	b.n	790c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    790a:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    790c:	fbb0 f3f2 	udiv	r3, r0, r2
    7910:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7914:	2809      	cmp	r0, #9
    7916:	f100 0730 	add.w	r7, r0, #48	; 0x30
    791a:	bf8a      	itet	hi
    791c:	3037      	addhi	r0, #55	; 0x37
    791e:	b2f8      	uxtbls	r0, r7
    7920:	b2c0      	uxtbhi	r0, r0
    7922:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    7926:	4618      	mov	r0, r3
    7928:	2b00      	cmp	r3, #0
    792a:	d1ee      	bne.n	790a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    792c:	190a      	adds	r2, r1, r4
    792e:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    7930:	b14c      	cbz	r4, 7946 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    7932:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    7934:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    7938:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    793a:	3301      	adds	r3, #1
    793c:	1ae0      	subs	r0, r4, r3
    793e:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    7940:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    7944:	dbf5      	blt.n	7932 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    7946:	4608      	mov	r0, r1
    7948:	bcf0      	pop	{r4, r5, r6, r7}
    794a:	4770      	bx	lr

0000794c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    794c:	4a05      	ldr	r2, [pc, #20]	; (7964 <serial_available+0x18>)
	tail = rx_buffer_tail;
    794e:	4b06      	ldr	r3, [pc, #24]	; (7968 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7950:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    7952:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7954:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    7956:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    7958:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    795a:	bf38      	it	cc
    795c:	3040      	addcc	r0, #64	; 0x40
    795e:	1ac0      	subs	r0, r0, r3
}
    7960:	4770      	bx	lr
    7962:	bf00      	nop
    7964:	1fff148c 	.word	0x1fff148c
    7968:	1fff148d 	.word	0x1fff148d

0000796c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    796c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    796e:	4b38      	ldr	r3, [pc, #224]	; (7a50 <uart0_status_isr+0xe4>)
    7970:	791a      	ldrb	r2, [r3, #4]
    7972:	f012 0f30 	tst.w	r2, #48	; 0x30
    7976:	d02c      	beq.n	79d2 <uart0_status_isr+0x66>
		__disable_irq();
    7978:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    797a:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    797c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    7980:	2900      	cmp	r1, #0
    7982:	d03d      	beq.n	7a00 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    7984:	b662      	cpsie	i
			head = rx_buffer_head;
    7986:	4f33      	ldr	r7, [pc, #204]	; (7a54 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    7988:	4933      	ldr	r1, [pc, #204]	; (7a58 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    798a:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    798c:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    798e:	4e33      	ldr	r6, [pc, #204]	; (7a5c <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    7990:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    7992:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    7994:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    7996:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    7998:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    799a:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    799c:	bf28      	it	cs
    799e:	2300      	movcs	r3, #0
				if (newhead != tail) {
    79a0:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    79a2:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    79a6:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    79a8:	bf1c      	itt	ne
    79aa:	54f1      	strbne	r1, [r6, r3]
    79ac:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    79ae:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    79b2:	d1f0      	bne.n	7996 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    79b4:	4b2a      	ldr	r3, [pc, #168]	; (7a60 <uart0_status_isr+0xf4>)
    79b6:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    79b8:	b2c2      	uxtb	r2, r0
    79ba:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    79bc:	b14b      	cbz	r3, 79d2 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    79be:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    79c0:	bf36      	itet	cc
    79c2:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    79c6:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    79c8:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    79ca:	2827      	cmp	r0, #39	; 0x27
    79cc:	bfc4      	itt	gt
    79ce:	2201      	movgt	r2, #1
    79d0:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    79d2:	491f      	ldr	r1, [pc, #124]	; (7a50 <uart0_status_isr+0xe4>)
    79d4:	78ca      	ldrb	r2, [r1, #3]
    79d6:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    79d8:	0615      	lsls	r5, r2, #24
    79da:	d416      	bmi.n	7a0a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    79dc:	0652      	lsls	r2, r2, #25
    79de:	d50d      	bpl.n	79fc <uart0_status_isr+0x90>
    79e0:	4b1b      	ldr	r3, [pc, #108]	; (7a50 <uart0_status_isr+0xe4>)
    79e2:	791b      	ldrb	r3, [r3, #4]
    79e4:	065b      	lsls	r3, r3, #25
    79e6:	d509      	bpl.n	79fc <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    79e8:	4b1e      	ldr	r3, [pc, #120]	; (7a64 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    79ea:	491f      	ldr	r1, [pc, #124]	; (7a68 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    79ec:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    79ee:	2200      	movs	r2, #0
    79f0:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    79f2:	b103      	cbz	r3, 79f6 <uart0_status_isr+0x8a>
    79f4:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    79f6:	4b16      	ldr	r3, [pc, #88]	; (7a50 <uart0_status_isr+0xe4>)
    79f8:	223c      	movs	r2, #60	; 0x3c
    79fa:	70da      	strb	r2, [r3, #3]
	}
}
    79fc:	bcf0      	pop	{r4, r5, r6, r7}
    79fe:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    7a00:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    7a02:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    7a04:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    7a06:	b662      	cpsie	i
    7a08:	e7e3      	b.n	79d2 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    7a0a:	790b      	ldrb	r3, [r1, #4]
    7a0c:	061c      	lsls	r4, r3, #24
    7a0e:	d5e5      	bpl.n	79dc <uart0_status_isr+0x70>
		head = tx_buffer_head;
    7a10:	4b16      	ldr	r3, [pc, #88]	; (7a6c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    7a12:	4e17      	ldr	r6, [pc, #92]	; (7a70 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    7a14:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    7a16:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    7a18:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    7a1a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    7a1c:	429c      	cmp	r4, r3
    7a1e:	d00e      	beq.n	7a3e <uart0_status_isr+0xd2>
    7a20:	4d14      	ldr	r5, [pc, #80]	; (7a74 <uart0_status_isr+0x108>)
    7a22:	e001      	b.n	7a28 <uart0_status_isr+0xbc>
    7a24:	42a3      	cmp	r3, r4
    7a26:	d00a      	beq.n	7a3e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    7a28:	3301      	adds	r3, #1
    7a2a:	2b40      	cmp	r3, #64	; 0x40
    7a2c:	bf28      	it	cs
    7a2e:	2300      	movcs	r3, #0
			avail = UART0_S1;
    7a30:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    7a32:	5ce8      	ldrb	r0, [r5, r3]
    7a34:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    7a36:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    7a38:	7d08      	ldrb	r0, [r1, #20]
    7a3a:	2807      	cmp	r0, #7
    7a3c:	d9f2      	bls.n	7a24 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    7a3e:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    7a40:	4903      	ldr	r1, [pc, #12]	; (7a50 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    7a42:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    7a44:	790b      	ldrb	r3, [r1, #4]
    7a46:	0618      	lsls	r0, r3, #24
    7a48:	bf44      	itt	mi
    7a4a:	237c      	movmi	r3, #124	; 0x7c
    7a4c:	70cb      	strbmi	r3, [r1, #3]
    7a4e:	e7c5      	b.n	79dc <uart0_status_isr+0x70>
    7a50:	4006a000 	.word	0x4006a000
    7a54:	1fff148c 	.word	0x1fff148c
    7a58:	1fff148d 	.word	0x1fff148d
    7a5c:	1fff14d0 	.word	0x1fff14d0
    7a60:	1fff1488 	.word	0x1fff1488
    7a64:	1fff1514 	.word	0x1fff1514
    7a68:	1fff1510 	.word	0x1fff1510
    7a6c:	1fff1518 	.word	0x1fff1518
    7a70:	1fff1511 	.word	0x1fff1511
    7a74:	1fff1490 	.word	0x1fff1490

00007a78 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7a78:	4a05      	ldr	r2, [pc, #20]	; (7a90 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    7a7a:	4b06      	ldr	r3, [pc, #24]	; (7a94 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7a7c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    7a7e:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7a80:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    7a82:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    7a84:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    7a86:	bf38      	it	cc
    7a88:	3040      	addcc	r0, #64	; 0x40
    7a8a:	1ac0      	subs	r0, r0, r3
}
    7a8c:	4770      	bx	lr
    7a8e:	bf00      	nop
    7a90:	1fff158c 	.word	0x1fff158c
    7a94:	1fff1521 	.word	0x1fff1521

00007a98 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    7a98:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    7a9a:	4b38      	ldr	r3, [pc, #224]	; (7b7c <uart1_status_isr+0xe4>)
    7a9c:	791a      	ldrb	r2, [r3, #4]
    7a9e:	f012 0f30 	tst.w	r2, #48	; 0x30
    7aa2:	d02c      	beq.n	7afe <uart1_status_isr+0x66>
		__disable_irq();
    7aa4:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    7aa6:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    7aa8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    7aac:	2900      	cmp	r1, #0
    7aae:	d03d      	beq.n	7b2c <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    7ab0:	b662      	cpsie	i
			head = rx_buffer_head;
    7ab2:	4f33      	ldr	r7, [pc, #204]	; (7b80 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    7ab4:	4933      	ldr	r1, [pc, #204]	; (7b84 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    7ab6:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    7ab8:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    7aba:	4e33      	ldr	r6, [pc, #204]	; (7b88 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    7abc:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    7abe:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    7ac0:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    7ac2:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    7ac4:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    7ac6:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    7ac8:	bf28      	it	cs
    7aca:	2300      	movcs	r3, #0
				if (newhead != tail) {
    7acc:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    7ace:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    7ad2:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    7ad4:	bf1c      	itt	ne
    7ad6:	54f1      	strbne	r1, [r6, r3]
    7ad8:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    7ada:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7ade:	d1f0      	bne.n	7ac2 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    7ae0:	4b2a      	ldr	r3, [pc, #168]	; (7b8c <uart1_status_isr+0xf4>)
    7ae2:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    7ae4:	b2c2      	uxtb	r2, r0
    7ae6:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    7ae8:	b14b      	cbz	r3, 7afe <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    7aea:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    7aec:	bf36      	itet	cc
    7aee:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    7af2:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    7af4:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    7af6:	2827      	cmp	r0, #39	; 0x27
    7af8:	bfc4      	itt	gt
    7afa:	2201      	movgt	r2, #1
    7afc:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    7afe:	491f      	ldr	r1, [pc, #124]	; (7b7c <uart1_status_isr+0xe4>)
    7b00:	78ca      	ldrb	r2, [r1, #3]
    7b02:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    7b04:	0615      	lsls	r5, r2, #24
    7b06:	d416      	bmi.n	7b36 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    7b08:	0652      	lsls	r2, r2, #25
    7b0a:	d50d      	bpl.n	7b28 <uart1_status_isr+0x90>
    7b0c:	4b1b      	ldr	r3, [pc, #108]	; (7b7c <uart1_status_isr+0xe4>)
    7b0e:	791b      	ldrb	r3, [r3, #4]
    7b10:	065b      	lsls	r3, r3, #25
    7b12:	d509      	bpl.n	7b28 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    7b14:	4b1e      	ldr	r3, [pc, #120]	; (7b90 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    7b16:	491f      	ldr	r1, [pc, #124]	; (7b94 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    7b18:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    7b1a:	2200      	movs	r2, #0
    7b1c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    7b1e:	b103      	cbz	r3, 7b22 <uart1_status_isr+0x8a>
    7b20:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    7b22:	4b16      	ldr	r3, [pc, #88]	; (7b7c <uart1_status_isr+0xe4>)
    7b24:	223c      	movs	r2, #60	; 0x3c
    7b26:	70da      	strb	r2, [r3, #3]
	}
}
    7b28:	bcf0      	pop	{r4, r5, r6, r7}
    7b2a:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    7b2c:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    7b2e:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    7b30:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    7b32:	b662      	cpsie	i
    7b34:	e7e3      	b.n	7afe <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    7b36:	790b      	ldrb	r3, [r1, #4]
    7b38:	061c      	lsls	r4, r3, #24
    7b3a:	d5e5      	bpl.n	7b08 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    7b3c:	4b16      	ldr	r3, [pc, #88]	; (7b98 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    7b3e:	4e17      	ldr	r6, [pc, #92]	; (7b9c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    7b40:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    7b42:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    7b44:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    7b46:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    7b48:	429c      	cmp	r4, r3
    7b4a:	d00e      	beq.n	7b6a <uart1_status_isr+0xd2>
    7b4c:	4d14      	ldr	r5, [pc, #80]	; (7ba0 <uart1_status_isr+0x108>)
    7b4e:	e001      	b.n	7b54 <uart1_status_isr+0xbc>
    7b50:	42a3      	cmp	r3, r4
    7b52:	d00a      	beq.n	7b6a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    7b54:	3301      	adds	r3, #1
    7b56:	2b28      	cmp	r3, #40	; 0x28
    7b58:	bf28      	it	cs
    7b5a:	2300      	movcs	r3, #0
			avail = UART1_S1;
    7b5c:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    7b5e:	5ce8      	ldrb	r0, [r5, r3]
    7b60:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    7b62:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    7b64:	7d08      	ldrb	r0, [r1, #20]
    7b66:	2807      	cmp	r0, #7
    7b68:	d9f2      	bls.n	7b50 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    7b6a:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    7b6c:	4903      	ldr	r1, [pc, #12]	; (7b7c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    7b6e:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    7b70:	790b      	ldrb	r3, [r1, #4]
    7b72:	0618      	lsls	r0, r3, #24
    7b74:	bf44      	itt	mi
    7b76:	237c      	movmi	r3, #124	; 0x7c
    7b78:	70cb      	strbmi	r3, [r1, #3]
    7b7a:	e7c5      	b.n	7b08 <uart1_status_isr+0x70>
    7b7c:	4006b000 	.word	0x4006b000
    7b80:	1fff158c 	.word	0x1fff158c
    7b84:	1fff1521 	.word	0x1fff1521
    7b88:	1fff154c 	.word	0x1fff154c
    7b8c:	1fff151c 	.word	0x1fff151c
    7b90:	1fff1590 	.word	0x1fff1590
    7b94:	1fff1520 	.word	0x1fff1520
    7b98:	1fff1594 	.word	0x1fff1594
    7b9c:	1fff158d 	.word	0x1fff158d
    7ba0:	1fff1524 	.word	0x1fff1524

00007ba4 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7ba4:	4a05      	ldr	r2, [pc, #20]	; (7bbc <serial3_available+0x18>)
	tail = rx_buffer_tail;
    7ba6:	4b06      	ldr	r3, [pc, #24]	; (7bc0 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7ba8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    7baa:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7bac:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    7bae:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    7bb0:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    7bb2:	bf38      	it	cc
    7bb4:	3040      	addcc	r0, #64	; 0x40
    7bb6:	1ac0      	subs	r0, r0, r3
}
    7bb8:	4770      	bx	lr
    7bba:	bf00      	nop
    7bbc:	1fff159c 	.word	0x1fff159c
    7bc0:	1fff159d 	.word	0x1fff159d

00007bc4 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    7bc4:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    7bc6:	4b2b      	ldr	r3, [pc, #172]	; (7c74 <uart2_status_isr+0xb0>)
    7bc8:	791a      	ldrb	r2, [r3, #4]
    7bca:	0694      	lsls	r4, r2, #26
    7bcc:	d51f      	bpl.n	7c0e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    7bce:	482a      	ldr	r0, [pc, #168]	; (7c78 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    7bd0:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    7bd2:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7bd4:	4929      	ldr	r1, [pc, #164]	; (7c7c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    7bd6:	3301      	adds	r3, #1
    7bd8:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7bda:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    7bdc:	bfc8      	it	gt
    7bde:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7be0:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    7be2:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7be4:	d003      	beq.n	7bee <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    7be6:	4c26      	ldr	r4, [pc, #152]	; (7c80 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    7be8:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    7bea:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    7bec:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    7bee:	4a25      	ldr	r2, [pc, #148]	; (7c84 <uart2_status_isr+0xc0>)
    7bf0:	6811      	ldr	r1, [r2, #0]
    7bf2:	b161      	cbz	r1, 7c0e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    7bf4:	4a24      	ldr	r2, [pc, #144]	; (7c88 <uart2_status_isr+0xc4>)
    7bf6:	7812      	ldrb	r2, [r2, #0]
    7bf8:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    7bfa:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    7bfc:	bf36      	itet	cc
    7bfe:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    7c02:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    7c04:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    7c06:	2b27      	cmp	r3, #39	; 0x27
    7c08:	bfc4      	itt	gt
    7c0a:	2301      	movgt	r3, #1
    7c0c:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    7c0e:	4a19      	ldr	r2, [pc, #100]	; (7c74 <uart2_status_isr+0xb0>)
    7c10:	78d3      	ldrb	r3, [r2, #3]
    7c12:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    7c14:	0618      	lsls	r0, r3, #24
    7c16:	d411      	bmi.n	7c3c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    7c18:	065a      	lsls	r2, r3, #25
    7c1a:	d50d      	bpl.n	7c38 <uart2_status_isr+0x74>
    7c1c:	4b15      	ldr	r3, [pc, #84]	; (7c74 <uart2_status_isr+0xb0>)
    7c1e:	791b      	ldrb	r3, [r3, #4]
    7c20:	065b      	lsls	r3, r3, #25
    7c22:	d509      	bpl.n	7c38 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    7c24:	4b19      	ldr	r3, [pc, #100]	; (7c8c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    7c26:	491a      	ldr	r1, [pc, #104]	; (7c90 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    7c28:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    7c2a:	2200      	movs	r2, #0
    7c2c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    7c2e:	b103      	cbz	r3, 7c32 <uart2_status_isr+0x6e>
    7c30:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    7c32:	4b10      	ldr	r3, [pc, #64]	; (7c74 <uart2_status_isr+0xb0>)
    7c34:	222c      	movs	r2, #44	; 0x2c
    7c36:	70da      	strb	r2, [r3, #3]
	}
}
    7c38:	bc30      	pop	{r4, r5}
    7c3a:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    7c3c:	7911      	ldrb	r1, [r2, #4]
    7c3e:	0609      	lsls	r1, r1, #24
    7c40:	d5ea      	bpl.n	7c18 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    7c42:	4914      	ldr	r1, [pc, #80]	; (7c94 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    7c44:	4810      	ldr	r0, [pc, #64]	; (7c88 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    7c46:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    7c48:	7801      	ldrb	r1, [r0, #0]
    7c4a:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    7c4c:	428c      	cmp	r4, r1
    7c4e:	d00d      	beq.n	7c6c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    7c50:	1c4a      	adds	r2, r1, #1
    7c52:	2a27      	cmp	r2, #39	; 0x27
    7c54:	bf84      	itt	hi
    7c56:	2100      	movhi	r1, #0
    7c58:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    7c5a:	4d0f      	ldr	r5, [pc, #60]	; (7c98 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    7c5c:	4c05      	ldr	r4, [pc, #20]	; (7c74 <uart2_status_isr+0xb0>)
    7c5e:	bf98      	it	ls
    7c60:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    7c62:	5caa      	ldrb	r2, [r5, r2]
    7c64:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    7c66:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    7c68:	7001      	strb	r1, [r0, #0]
    7c6a:	e7d5      	b.n	7c18 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    7c6c:	216c      	movs	r1, #108	; 0x6c
    7c6e:	70d1      	strb	r1, [r2, #3]
    7c70:	e7d2      	b.n	7c18 <uart2_status_isr+0x54>
    7c72:	bf00      	nop
    7c74:	4006c000 	.word	0x4006c000
    7c78:	1fff159c 	.word	0x1fff159c
    7c7c:	1fff159d 	.word	0x1fff159d
    7c80:	1fff15c8 	.word	0x1fff15c8
    7c84:	1fff1598 	.word	0x1fff1598
    7c88:	1fff1609 	.word	0x1fff1609
    7c8c:	1fff160c 	.word	0x1fff160c
    7c90:	1fff1608 	.word	0x1fff1608
    7c94:	1fff1610 	.word	0x1fff1610
    7c98:	1fff15a0 	.word	0x1fff15a0

00007c9c <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7c9c:	4a05      	ldr	r2, [pc, #20]	; (7cb4 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    7c9e:	4b06      	ldr	r3, [pc, #24]	; (7cb8 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7ca0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    7ca2:	781b      	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7ca4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    7ca6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    7ca8:	4298      	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    7caa:	bf38      	it	cc
    7cac:	3040      	addcc	r0, #64	; 0x40
    7cae:	1ac0      	subs	r0, r0, r3
}
    7cb0:	4770      	bx	lr
    7cb2:	bf00      	nop
    7cb4:	1fff1618 	.word	0x1fff1618
    7cb8:	1fff1619 	.word	0x1fff1619

00007cbc <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    7cbc:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    7cbe:	4b2b      	ldr	r3, [pc, #172]	; (7d6c <uart3_status_isr+0xb0>)
    7cc0:	791a      	ldrb	r2, [r3, #4]
    7cc2:	0694      	lsls	r4, r2, #26
    7cc4:	d51f      	bpl.n	7d06 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    7cc6:	482a      	ldr	r0, [pc, #168]	; (7d70 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    7cc8:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    7cca:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7ccc:	4929      	ldr	r1, [pc, #164]	; (7d74 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    7cce:	3301      	adds	r3, #1
    7cd0:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7cd2:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    7cd4:	bfc8      	it	gt
    7cd6:	2300      	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7cd8:	428b      	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    7cda:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7cdc:	d003      	beq.n	7ce6 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    7cde:	4c26      	ldr	r4, [pc, #152]	; (7d78 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    7ce0:	b2d9      	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    7ce2:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    7ce4:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    7ce6:	4a25      	ldr	r2, [pc, #148]	; (7d7c <uart3_status_isr+0xc0>)
    7ce8:	6811      	ldr	r1, [r2, #0]
    7cea:	b161      	cbz	r1, 7d06 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    7cec:	4a24      	ldr	r2, [pc, #144]	; (7d80 <uart3_status_isr+0xc4>)
    7cee:	7812      	ldrb	r2, [r2, #0]
    7cf0:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    7cf2:	4293      	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    7cf4:	bf36      	itet	cc
    7cf6:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    7cfa:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    7cfc:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    7cfe:	2b27      	cmp	r3, #39	; 0x27
    7d00:	bfc4      	itt	gt
    7d02:	2301      	movgt	r3, #1
    7d04:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    7d06:	4a19      	ldr	r2, [pc, #100]	; (7d6c <uart3_status_isr+0xb0>)
    7d08:	78d3      	ldrb	r3, [r2, #3]
    7d0a:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    7d0c:	0618      	lsls	r0, r3, #24
    7d0e:	d411      	bmi.n	7d34 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    7d10:	065a      	lsls	r2, r3, #25
    7d12:	d50d      	bpl.n	7d30 <uart3_status_isr+0x74>
    7d14:	4b15      	ldr	r3, [pc, #84]	; (7d6c <uart3_status_isr+0xb0>)
    7d16:	791b      	ldrb	r3, [r3, #4]
    7d18:	065b      	lsls	r3, r3, #25
    7d1a:	d509      	bpl.n	7d30 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    7d1c:	4b19      	ldr	r3, [pc, #100]	; (7d84 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    7d1e:	491a      	ldr	r1, [pc, #104]	; (7d88 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    7d20:	681b      	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    7d22:	2200      	movs	r2, #0
    7d24:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    7d26:	b103      	cbz	r3, 7d2a <uart3_status_isr+0x6e>
    7d28:	701a      	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    7d2a:	4b10      	ldr	r3, [pc, #64]	; (7d6c <uart3_status_isr+0xb0>)
    7d2c:	222c      	movs	r2, #44	; 0x2c
    7d2e:	70da      	strb	r2, [r3, #3]
	}
}
    7d30:	bc30      	pop	{r4, r5}
    7d32:	4770      	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    7d34:	7911      	ldrb	r1, [r2, #4]
    7d36:	0609      	lsls	r1, r1, #24
    7d38:	d5ea      	bpl.n	7d10 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    7d3a:	4914      	ldr	r1, [pc, #80]	; (7d8c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    7d3c:	4810      	ldr	r0, [pc, #64]	; (7d80 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    7d3e:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    7d40:	7801      	ldrb	r1, [r0, #0]
    7d42:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    7d44:	428c      	cmp	r4, r1
    7d46:	d00d      	beq.n	7d64 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    7d48:	1c4a      	adds	r2, r1, #1
    7d4a:	2a27      	cmp	r2, #39	; 0x27
    7d4c:	bf84      	itt	hi
    7d4e:	2100      	movhi	r1, #0
    7d50:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    7d52:	4d0f      	ldr	r5, [pc, #60]	; (7d90 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    7d54:	4c05      	ldr	r4, [pc, #20]	; (7d6c <uart3_status_isr+0xb0>)
    7d56:	bf98      	it	ls
    7d58:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    7d5a:	5caa      	ldrb	r2, [r5, r2]
    7d5c:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    7d5e:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    7d60:	7001      	strb	r1, [r0, #0]
    7d62:	e7d5      	b.n	7d10 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    7d64:	216c      	movs	r1, #108	; 0x6c
    7d66:	70d1      	strb	r1, [r2, #3]
    7d68:	e7d2      	b.n	7d10 <uart3_status_isr+0x54>
    7d6a:	bf00      	nop
    7d6c:	4006d000 	.word	0x4006d000
    7d70:	1fff1618 	.word	0x1fff1618
    7d74:	1fff1619 	.word	0x1fff1619
    7d78:	1fff1644 	.word	0x1fff1644
    7d7c:	1fff1614 	.word	0x1fff1614
    7d80:	1fff1685 	.word	0x1fff1685
    7d84:	1fff1688 	.word	0x1fff1688
    7d88:	1fff1684 	.word	0x1fff1684
    7d8c:	1fff168c 	.word	0x1fff168c
    7d90:	1fff161c 	.word	0x1fff161c

00007d94 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7d94:	4a05      	ldr	r2, [pc, #20]	; (7dac <serial5_available+0x18>)
	tail = rx_buffer_tail;
    7d96:	4b06      	ldr	r3, [pc, #24]	; (7db0 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7d98:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    7d9a:	781b      	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7d9c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    7d9e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    7da0:	4298      	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    7da2:	bf38      	it	cc
    7da4:	3040      	addcc	r0, #64	; 0x40
    7da6:	1ac0      	subs	r0, r0, r3
}
    7da8:	4770      	bx	lr
    7daa:	bf00      	nop
    7dac:	1fff1694 	.word	0x1fff1694
    7db0:	1fff1695 	.word	0x1fff1695

00007db4 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    7db4:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    7db6:	4b2b      	ldr	r3, [pc, #172]	; (7e64 <uart4_status_isr+0xb0>)
    7db8:	791a      	ldrb	r2, [r3, #4]
    7dba:	0694      	lsls	r4, r2, #26
    7dbc:	d51f      	bpl.n	7dfe <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    7dbe:	482a      	ldr	r0, [pc, #168]	; (7e68 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    7dc0:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    7dc2:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7dc4:	4929      	ldr	r1, [pc, #164]	; (7e6c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    7dc6:	3301      	adds	r3, #1
    7dc8:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7dca:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    7dcc:	bfc8      	it	gt
    7dce:	2300      	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7dd0:	428b      	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    7dd2:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7dd4:	d003      	beq.n	7dde <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    7dd6:	4c26      	ldr	r4, [pc, #152]	; (7e70 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    7dd8:	b2d9      	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    7dda:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    7ddc:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    7dde:	4a25      	ldr	r2, [pc, #148]	; (7e74 <uart4_status_isr+0xc0>)
    7de0:	6811      	ldr	r1, [r2, #0]
    7de2:	b161      	cbz	r1, 7dfe <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    7de4:	4a24      	ldr	r2, [pc, #144]	; (7e78 <uart4_status_isr+0xc4>)
    7de6:	7812      	ldrb	r2, [r2, #0]
    7de8:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    7dea:	4293      	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    7dec:	bf36      	itet	cc
    7dee:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    7df2:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    7df4:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    7df6:	2b27      	cmp	r3, #39	; 0x27
    7df8:	bfc4      	itt	gt
    7dfa:	2301      	movgt	r3, #1
    7dfc:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    7dfe:	4a19      	ldr	r2, [pc, #100]	; (7e64 <uart4_status_isr+0xb0>)
    7e00:	78d3      	ldrb	r3, [r2, #3]
    7e02:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    7e04:	0618      	lsls	r0, r3, #24
    7e06:	d411      	bmi.n	7e2c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    7e08:	065a      	lsls	r2, r3, #25
    7e0a:	d50d      	bpl.n	7e28 <uart4_status_isr+0x74>
    7e0c:	4b15      	ldr	r3, [pc, #84]	; (7e64 <uart4_status_isr+0xb0>)
    7e0e:	791b      	ldrb	r3, [r3, #4]
    7e10:	065b      	lsls	r3, r3, #25
    7e12:	d509      	bpl.n	7e28 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    7e14:	4b19      	ldr	r3, [pc, #100]	; (7e7c <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    7e16:	491a      	ldr	r1, [pc, #104]	; (7e80 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    7e18:	681b      	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    7e1a:	2200      	movs	r2, #0
    7e1c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    7e1e:	b103      	cbz	r3, 7e22 <uart4_status_isr+0x6e>
    7e20:	701a      	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    7e22:	4b10      	ldr	r3, [pc, #64]	; (7e64 <uart4_status_isr+0xb0>)
    7e24:	222c      	movs	r2, #44	; 0x2c
    7e26:	70da      	strb	r2, [r3, #3]
	}
}
    7e28:	bc30      	pop	{r4, r5}
    7e2a:	4770      	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    7e2c:	7911      	ldrb	r1, [r2, #4]
    7e2e:	0609      	lsls	r1, r1, #24
    7e30:	d5ea      	bpl.n	7e08 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    7e32:	4914      	ldr	r1, [pc, #80]	; (7e84 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    7e34:	4810      	ldr	r0, [pc, #64]	; (7e78 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    7e36:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    7e38:	7801      	ldrb	r1, [r0, #0]
    7e3a:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    7e3c:	428c      	cmp	r4, r1
    7e3e:	d00d      	beq.n	7e5c <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    7e40:	1c4a      	adds	r2, r1, #1
    7e42:	2a27      	cmp	r2, #39	; 0x27
    7e44:	bf84      	itt	hi
    7e46:	2100      	movhi	r1, #0
    7e48:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    7e4a:	4d0f      	ldr	r5, [pc, #60]	; (7e88 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    7e4c:	4c05      	ldr	r4, [pc, #20]	; (7e64 <uart4_status_isr+0xb0>)
    7e4e:	bf98      	it	ls
    7e50:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    7e52:	5caa      	ldrb	r2, [r5, r2]
    7e54:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    7e56:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    7e58:	7001      	strb	r1, [r0, #0]
    7e5a:	e7d5      	b.n	7e08 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    7e5c:	216c      	movs	r1, #108	; 0x6c
    7e5e:	70d1      	strb	r1, [r2, #3]
    7e60:	e7d2      	b.n	7e08 <uart4_status_isr+0x54>
    7e62:	bf00      	nop
    7e64:	400ea000 	.word	0x400ea000
    7e68:	1fff1694 	.word	0x1fff1694
    7e6c:	1fff1695 	.word	0x1fff1695
    7e70:	1fff16c0 	.word	0x1fff16c0
    7e74:	1fff1690 	.word	0x1fff1690
    7e78:	1fff1701 	.word	0x1fff1701
    7e7c:	1fff1704 	.word	0x1fff1704
    7e80:	1fff1700 	.word	0x1fff1700
    7e84:	1fff1708 	.word	0x1fff1708
    7e88:	1fff1698 	.word	0x1fff1698

00007e8c <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7e8c:	4a05      	ldr	r2, [pc, #20]	; (7ea4 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    7e8e:	4b06      	ldr	r3, [pc, #24]	; (7ea8 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7e90:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    7e92:	781b      	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7e94:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    7e96:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    7e98:	4298      	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    7e9a:	bf38      	it	cc
    7e9c:	3040      	addcc	r0, #64	; 0x40
    7e9e:	1ac0      	subs	r0, r0, r3
}
    7ea0:	4770      	bx	lr
    7ea2:	bf00      	nop
    7ea4:	1fff1710 	.word	0x1fff1710
    7ea8:	1fff1711 	.word	0x1fff1711

00007eac <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    7eac:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    7eae:	4b2c      	ldr	r3, [pc, #176]	; (7f60 <lpuart0_status_isr+0xb4>)
    7eb0:	685a      	ldr	r2, [r3, #4]
    7eb2:	0294      	lsls	r4, r2, #10
    7eb4:	d51f      	bpl.n	7ef6 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    7eb6:	482b      	ldr	r0, [pc, #172]	; (7f64 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    7eb8:	68da      	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    7eba:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7ebc:	492a      	ldr	r1, [pc, #168]	; (7f68 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    7ebe:	3301      	adds	r3, #1
    7ec0:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7ec2:	7809      	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    7ec4:	bfc8      	it	gt
    7ec6:	2300      	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7ec8:	428b      	cmp	r3, r1
    7eca:	d004      	beq.n	7ed6 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    7ecc:	4c27      	ldr	r4, [pc, #156]	; (7f6c <lpuart0_status_isr+0xc0>)
    7ece:	b2d2      	uxtb	r2, r2
			rx_buffer_head = head;
    7ed0:	b2d9      	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    7ed2:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    7ed4:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    7ed6:	4a26      	ldr	r2, [pc, #152]	; (7f70 <lpuart0_status_isr+0xc4>)
    7ed8:	6811      	ldr	r1, [r2, #0]
    7eda:	b161      	cbz	r1, 7ef6 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    7edc:	4a25      	ldr	r2, [pc, #148]	; (7f74 <lpuart0_status_isr+0xc8>)
    7ede:	7812      	ldrb	r2, [r2, #0]
    7ee0:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    7ee2:	4293      	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    7ee4:	bf36      	itet	cc
    7ee6:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    7eea:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    7eec:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    7eee:	2b27      	cmp	r3, #39	; 0x27
    7ef0:	bfc4      	itt	gt
    7ef2:	2301      	movgt	r3, #1
    7ef4:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    7ef6:	4a1a      	ldr	r2, [pc, #104]	; (7f60 <lpuart0_status_isr+0xb4>)
    7ef8:	6893      	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    7efa:	0218      	lsls	r0, r3, #8
    7efc:	d502      	bpl.n	7f04 <lpuart0_status_isr+0x58>
    7efe:	6852      	ldr	r2, [r2, #4]
    7f00:	0211      	lsls	r1, r2, #8
    7f02:	d411      	bmi.n	7f28 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    7f04:	025a      	lsls	r2, r3, #9
    7f06:	d50d      	bpl.n	7f24 <lpuart0_status_isr+0x78>
    7f08:	4b15      	ldr	r3, [pc, #84]	; (7f60 <lpuart0_status_isr+0xb4>)
    7f0a:	685b      	ldr	r3, [r3, #4]
    7f0c:	025b      	lsls	r3, r3, #9
    7f0e:	d509      	bpl.n	7f24 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    7f10:	4b19      	ldr	r3, [pc, #100]	; (7f78 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    7f12:	491a      	ldr	r1, [pc, #104]	; (7f7c <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    7f14:	681b      	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    7f16:	2200      	movs	r2, #0
    7f18:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    7f1a:	b103      	cbz	r3, 7f1e <lpuart0_status_isr+0x72>
    7f1c:	701a      	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    7f1e:	4b18      	ldr	r3, [pc, #96]	; (7f80 <lpuart0_status_isr+0xd4>)
    7f20:	2200      	movs	r2, #0
    7f22:	601a      	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    7f24:	bc30      	pop	{r4, r5}
    7f26:	4770      	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    7f28:	4a16      	ldr	r2, [pc, #88]	; (7f84 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    7f2a:	4912      	ldr	r1, [pc, #72]	; (7f74 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    7f2c:	7810      	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    7f2e:	780a      	ldrb	r2, [r1, #0]
    7f30:	b2d2      	uxtb	r2, r2
		if (head == tail) {
    7f32:	4290      	cmp	r0, r2
    7f34:	d00d      	beq.n	7f52 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    7f36:	3201      	adds	r2, #1
    7f38:	2a27      	cmp	r2, #39	; 0x27
    7f3a:	bf84      	itt	hi
    7f3c:	2000      	movhi	r0, #0
    7f3e:	4602      	movhi	r2, r0
			n = tx_buffer[tail];
    7f40:	4d11      	ldr	r5, [pc, #68]	; (7f88 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    7f42:	4c07      	ldr	r4, [pc, #28]	; (7f60 <lpuart0_status_isr+0xb4>)
    7f44:	bf98      	it	ls
    7f46:	b2d0      	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    7f48:	5caa      	ldrb	r2, [r5, r2]
    7f4a:	b2d2      	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    7f4c:	60e2      	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    7f4e:	7008      	strb	r0, [r1, #0]
    7f50:	e7d8      	b.n	7f04 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    7f52:	480e      	ldr	r0, [pc, #56]	; (7f8c <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    7f54:	4a0a      	ldr	r2, [pc, #40]	; (7f80 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    7f56:	2400      	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    7f58:	2101      	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    7f5a:	6004      	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    7f5c:	6011      	str	r1, [r2, #0]
    7f5e:	e7d1      	b.n	7f04 <lpuart0_status_isr+0x58>
    7f60:	400c4000 	.word	0x400c4000
    7f64:	1fff1710 	.word	0x1fff1710
    7f68:	1fff1711 	.word	0x1fff1711
    7f6c:	1fff173c 	.word	0x1fff173c
    7f70:	1fff170c 	.word	0x1fff170c
    7f74:	1fff177d 	.word	0x1fff177d
    7f78:	1fff1780 	.word	0x1fff1780
    7f7c:	1fff177c 	.word	0x1fff177c
    7f80:	43880158 	.word	0x43880158
    7f84:	1fff1784 	.word	0x1fff1784
    7f88:	1fff1714 	.word	0x1fff1714
    7f8c:	4388015c 	.word	0x4388015c

00007f90 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    7f90:	b510      	push	{r4, lr}
    7f92:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    7f94:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    7f96:	f7fe f8c3 	bl	6120 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    7f9a:	4a18      	ldr	r2, [pc, #96]	; (7ffc <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    7f9c:	4b18      	ldr	r3, [pc, #96]	; (8000 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    7f9e:	4919      	ldr	r1, [pc, #100]	; (8004 <usb_init_serialnumber+0x74>)
    7fa0:	6011      	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    7fa2:	2270      	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    7fa4:	2180      	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    7fa6:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    7fa8:	461a      	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    7faa:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    7fac:	7813      	ldrb	r3, [r2, #0]
    7fae:	061b      	lsls	r3, r3, #24
    7fb0:	d5fc      	bpl.n	7fac <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    7fb2:	4b15      	ldr	r3, [pc, #84]	; (8008 <usb_init_serialnumber+0x78>)
    7fb4:	681c      	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    7fb6:	f7fe f8cd 	bl	6154 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    7fba:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    7fbc:	4b13      	ldr	r3, [pc, #76]	; (800c <usb_init_serialnumber+0x7c>)
    7fbe:	429c      	cmp	r4, r3
    7fc0:	bf9c      	itt	ls
    7fc2:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
    7fc6:	0064      	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    7fc8:	4620      	mov	r0, r4
    7fca:	4c11      	ldr	r4, [pc, #68]	; (8010 <usb_init_serialnumber+0x80>)
    7fcc:	a901      	add	r1, sp, #4
    7fce:	220a      	movs	r2, #10
    7fd0:	f7ff fc96 	bl	7900 <ultoa>
    7fd4:	a901      	add	r1, sp, #4
    7fd6:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    7fd8:	2300      	movs	r3, #0
		char c = buf[i];
    7fda:	f811 2b01 	ldrb.w	r2, [r1], #1
    7fde:	3301      	adds	r3, #1
		if (!c) break;
    7fe0:	b13a      	cbz	r2, 7ff2 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    7fe2:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    7fe4:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    7fe8:	d1f7      	bne.n	7fda <usb_init_serialnumber+0x4a>
    7fea:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    7fec:	7023      	strb	r3, [r4, #0]
}
    7fee:	b004      	add	sp, #16
    7ff0:	bd10      	pop	{r4, pc}
    7ff2:	005b      	lsls	r3, r3, #1
    7ff4:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    7ff6:	7023      	strb	r3, [r4, #0]
}
    7ff8:	b004      	add	sp, #16
    7ffa:	bd10      	pop	{r4, pc}
    7ffc:	40020004 	.word	0x40020004
    8000:	40020000 	.word	0x40020000
    8004:	41070000 	.word	0x41070000
    8008:	4002000c 	.word	0x4002000c
    800c:	0098967f 	.word	0x0098967f
    8010:	1fff0838 	.word	0x1fff0838

00008014 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    8014:	4770      	bx	lr
    8016:	bf00      	nop

00008018 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    8018:	4770      	bx	lr
    801a:	bf00      	nop

0000801c <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    801c:	4770      	bx	lr
    801e:	bf00      	nop

00008020 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    8020:	4770      	bx	lr
    8022:	bf00      	nop

00008024 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    8024:	4770      	bx	lr
    8026:	bf00      	nop

00008028 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    8028:	4770      	bx	lr
    802a:	bf00      	nop

0000802c <__libc_init_array>:
    802c:	b570      	push	{r4, r5, r6, lr}
    802e:	4e0f      	ldr	r6, [pc, #60]	; (806c <__libc_init_array+0x40>)
    8030:	4d0f      	ldr	r5, [pc, #60]	; (8070 <__libc_init_array+0x44>)
    8032:	1b76      	subs	r6, r6, r5
    8034:	10b6      	asrs	r6, r6, #2
    8036:	bf18      	it	ne
    8038:	2400      	movne	r4, #0
    803a:	d005      	beq.n	8048 <__libc_init_array+0x1c>
    803c:	3401      	adds	r4, #1
    803e:	f855 3b04 	ldr.w	r3, [r5], #4
    8042:	4798      	blx	r3
    8044:	42a6      	cmp	r6, r4
    8046:	d1f9      	bne.n	803c <__libc_init_array+0x10>
    8048:	4e0a      	ldr	r6, [pc, #40]	; (8074 <__libc_init_array+0x48>)
    804a:	4d0b      	ldr	r5, [pc, #44]	; (8078 <__libc_init_array+0x4c>)
    804c:	1b76      	subs	r6, r6, r5
    804e:	f001 ffd5 	bl	9ffc <_init>
    8052:	10b6      	asrs	r6, r6, #2
    8054:	bf18      	it	ne
    8056:	2400      	movne	r4, #0
    8058:	d006      	beq.n	8068 <__libc_init_array+0x3c>
    805a:	3401      	adds	r4, #1
    805c:	f855 3b04 	ldr.w	r3, [r5], #4
    8060:	4798      	blx	r3
    8062:	42a6      	cmp	r6, r4
    8064:	d1f9      	bne.n	805a <__libc_init_array+0x2e>
    8066:	bd70      	pop	{r4, r5, r6, pc}
    8068:	bd70      	pop	{r4, r5, r6, pc}
    806a:	bf00      	nop
    806c:	0000a008 	.word	0x0000a008
    8070:	0000a008 	.word	0x0000a008
    8074:	0000a01c 	.word	0x0000a01c
    8078:	0000a008 	.word	0x0000a008

0000807c <random>:
    807c:	b410      	push	{r4}
    807e:	4b0c      	ldr	r3, [pc, #48]	; (80b0 <random+0x34>)
    8080:	4c0c      	ldr	r4, [pc, #48]	; (80b4 <random+0x38>)
    8082:	6819      	ldr	r1, [r3, #0]
    8084:	4a0c      	ldr	r2, [pc, #48]	; (80b8 <random+0x3c>)
    8086:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    808a:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
    808e:	fb04 f403 	mul.w	r4, r4, r3
    8092:	fb02 4000 	mla	r0, r2, r0, r4
    8096:	fba3 2302 	umull	r2, r3, r3, r2
    809a:	4403      	add	r3, r0
    809c:	3201      	adds	r2, #1
    809e:	f143 0300 	adc.w	r3, r3, #0
    80a2:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    80a6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    80aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    80ae:	4770      	bx	lr
    80b0:	1fff0c78 	.word	0x1fff0c78
    80b4:	5851f42d 	.word	0x5851f42d
    80b8:	4c957f2d 	.word	0x4c957f2d

000080bc <register_fini>:
    80bc:	4b02      	ldr	r3, [pc, #8]	; (80c8 <register_fini+0xc>)
    80be:	b113      	cbz	r3, 80c6 <register_fini+0xa>
    80c0:	4802      	ldr	r0, [pc, #8]	; (80cc <register_fini+0x10>)
    80c2:	f7fd bd0b 	b.w	5adc <atexit>
    80c6:	4770      	bx	lr
    80c8:	00000000 	.word	0x00000000
    80cc:	000080d1 	.word	0x000080d1

000080d0 <__libc_fini_array>:
    80d0:	b538      	push	{r3, r4, r5, lr}
    80d2:	4d07      	ldr	r5, [pc, #28]	; (80f0 <__libc_fini_array+0x20>)
    80d4:	4c07      	ldr	r4, [pc, #28]	; (80f4 <__libc_fini_array+0x24>)
    80d6:	1b2c      	subs	r4, r5, r4
    80d8:	10a4      	asrs	r4, r4, #2
    80da:	d005      	beq.n	80e8 <__libc_fini_array+0x18>
    80dc:	3c01      	subs	r4, #1
    80de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    80e2:	4798      	blx	r3
    80e4:	2c00      	cmp	r4, #0
    80e6:	d1f9      	bne.n	80dc <__libc_fini_array+0xc>
    80e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    80ec:	f001 bf96 	b.w	a01c <__init_array_end>
	...

000080f8 <vtable for WS2812<(unsigned char)7, (EOrder)66>>:
	...
    8100:	2825 0000 2e65 0000 0e1d 0000 21a9 0000     %(..e........!..
    8110:	046d 0000 0475 0000 34a5 0000               m...u....4..

0000811c <Fire_1_gp>:
    811c:	ff00 0000 ff7f 0037 ffff 00ff               ......7.....

00008128 <b_gp>:
    8128:	0000 0000 003f ff00 ff7f 0000 ffbf 00ff     ....?...........
    8138:	ffff ffff                                   ....

0000813c <es_pinksplash_08_gp>:
    813c:	7e00 ff0b c57f 1601 d2af ac9d 9ddd 7003     .~.............p
    814c:	9dff 7003                                   ...p

00008150 <hallows_gp>:
    8150:	0100 0101 f714 011c ea19 0388 0123 0101     ............#...
    8160:	f730 011c ea33 0388 013d 0101 f74c 011c     0...3...=...L...
    8170:	f45b 01b0 ea6b 0388 017a 0101 ea8c 0388     [...k...z.......
    8180:	f499 01b0 f7a8 011c 01ba 0101 f7c4 011c     ................
    8190:	eacc 0388 01d8 0101 eae5 0388 f7ef 011c     ................
    81a0:	01f9 0101 01ff 0101                         ........

000081a8 <scoutie_gp>:
    81a8:	ff00 009c 007f 12c3 01d8 2700 01ff 2700     ...........'...'

000081b8 <Cyan_Magenta_Blue_gp>:
    81b8:	0000 ffff 2a3f ff37 ff7f ff00 2abf ff00     ....?*7......*..
    81c8:	00ff ff00                                   ....

000081cc <purple_flower_gp>:
    81cc:	0000 0000 1442 2d04 7984 ff14 b3b4 ff49     ....B..-.y....I.
    81dc:	ffe4 ffa4 fff1 ffcf ffff ffff               ............

000081e8 <sea_treasure_gp>:
    81e8:	0100 050d 0319 1939 122d acbf 023d 0c1d     ......9.-...=...
    81f8:	034c 1939 1265 acbf 0a7c 1436 0199 0c1e     L.9.e...|.6.....
    8208:	0ab2 160e 09d1 2f5d 08e8 1637 01ff 050d     ......]/..7.....

00008218 <bhw3_61_gp>:
    8218:	0e00 1b01 1130 5801 0168 9c58 01a0 2a36     ....0..Xh.X...6*
    8228:	09db 34eb 8bff e9eb                         ...4....

00008230 <Magenta_Evening_gp>:
    8230:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
    8240:	fc4c 4501 7b6c 3302 2eff 2309               L..El{.3...#

0000824c <vibrant_gp>:
    824c:	ff00 ffff 011e 1d90 e547 0cf6 ff77 0801     ........G...w...
    825c:	b8a5 cb01 03d6 fa1c 00ff 0000               ............

00008268 <a_gp>:
    8268:	0000 0000 001f 0037 003f 2dff ff7f ff00     ......7.?..-....
    8278:	ffa3 2d00 ffc4 0000 ffff 00ff               ...-........

00008284 <RedsandCyans_gp>:
    8284:	0f00 8760 284e 4a57 5366 2250 7172 1d47     ..`.N(WJfSP"rqG.
    8294:	967f 193f 3c8f 424f 0fb6 8760 0fdf 8760     ..?..<OB..`...`.
    82a4:	0fff 8760                                   ..`.

000082a8 <Ribbon_Colors_gp>:
    82a8:	e300 0902 c21f 0933 a73f 08af 1b5f 4ed1     ......3.?..._..N
    82b8:	017f f7f8 019f a64e 01bf 6605 2adf 124f     ......N....f.*O.
    82c8:	ffff 00ff                                   ....

000082cc <es_pinksplash_07_gp>:
    82cc:	e500 0101 f23d 3f04 ff65 ff0c f97f fc51     ....=..?e.....Q.
    82dc:	ff99 eb0b f4c1 4405 e8ff 0501               .......D....

000082e8 <rainbow2_gp>:
    82e8:	7e00 8e01 ab19 1a01 e030 0109 ed47 018a     .~......0...G...
    82f8:	345e 01ad 0175 01c9 018c 36d3 01a3 a87c     ^4..u......6..|.
    8308:	01ba 9508 0cd1 9701 0ce8 9701 abff be01     ................
    8318:	4e4f 5f45 4953 004e 5754 5f4f 4953 004e     ONE_SIN.TWO_SIN.
    8328:	6170 6963 6966 6163 6c5f 6f6f 0070 0000     pacifica_loop...
    8338:	4d56 5044 5f56 7c31 5f31 4d56 5044 0a56     VMDPV_1|1_VMDPV.
    8348:	0000 0000 4d56 5044 5f52 ff00               ....VMDPR_..

00008354 <ultraviolet_mold_gp>:
    8354:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    8364:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    8374:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    8384:	011e 0101 0120 0102 0123 0102 0125 0202     .... ...#...%...
    8394:	0228 0203 022a 0203 022d 0303 032f 0304     (...*...-.../...
    83a4:	0332 0404 0335 0504 0437 0505 043a 0605     2...5...7...:...
    83b4:	043c 0705 053f 0706 0541 0806 0544 0907     <...?...A...D...
    83c4:	0546 0a07 0649 0b08 064b 0c08 064e 0d08     F...I...K...N...
    83d4:	0650 0e09 0653 0f09 0655 1009 0783 3034     P...S...U.....40
    83e4:	0785 3339 0788 343f 078a 3443 078d 3245     ..93..?4..C4..E2
    83f4:	078f 3048 0792 2e4a 0794 2b4e 0697 2950     ..H0..J...N+..P)
    8404:	069a 2554 069c 2257 069f 1f5a 06a1 1c5d     ..T%..W"..Z...].
    8414:	05a4 1960 05a6 1664 05a9 1267 05ab 0f6b     ..`...d...g...k.
    8424:	05ae 0d6d 05b0 0a72 04b3 0775 04b5 0579     ..m...r...u...y.
    8434:	05b8 057c 07ba 0480 09bd 0483 0cbf 0488     ..|.............
    8444:	10c2 048b 14c4 0390 19c7 0393 1ec9 0398     ................
    8454:	26cc 039d 2ecf 02a1 37d1 02a6 43d4 02a9     .&.......7...C..
    8464:	50d6 02af 5fd9 01b2 71db 01b8 85de 01bb     .P..._...q......
    8474:	9de0 01c1 b8e3 01c5 c2e5 01b8 c7e8 01a8     ................
    8484:	ceea 0198 d2ed 0187 d9ef 0177 def2 0167     ..........w...g.
    8494:	e5f4 0158 eaf7 0149 f2f9 013b f7fc 012f     ..X...I...;.../.
    84a4:	ffff 0124                                   ..$.

000084a8 <faint_rainbow_gp>:
    84a8:	4300 4700 4502 4101 4805 3b01 4a07 3501     .C.G.E.A.H.;.J.5
    84b8:	4d0a 3001 4e0c 2b01 500f 2601 5311 2201     .M.0.N.+.P.&.S."
    84c8:	5614 1d01 5816 1901 5b19 1601 5e1b 1201     .V...X...[...^..
    84d8:	611e 0f01 6220 0c01 6523 0a01 6825 0701     .a.. b..#e..%h..
    84e8:	6b28 0501 6e2a 0401 712d 0201 752f 0101     (k..*n..-q../u..
    84f8:	7832 0101 7935 0101 7d37 0101 803a 0101     2x..5y..7}..:...
    8508:	843c 0103 873f 0105 8b41 0108 8e44 010c     <...?...A...D...
    8518:	9046 010e 9049 0110 924b 0111 944e 0113     F...I...K...N...
    8528:	9450 0116 9653 0117 9855 011a af83 0158     P...S...U.....X.
    8538:	b185 015d b388 0163 b38a 0168 b68d 016c     ..]...c...h...l.
    8548:	b88f 0172 b892 0177 ba94 017d bc97 0183     ..r...w...}.....
    8558:	bc9a 018a be9c 0190 c09f 0197 c0a1 019d     ................
    8568:	c2a4 01a4 c5a6 01ab c7a9 01b2 c7ab 01ba     ................
    8578:	c9ae 01c1 cbb0 02c9 cbb3 02d1 c9b5 02d5     ................
    8588:	c5b8 02d7 beba 02d7 b8bd 02d9 b3bf 02db     ................
    8598:	adc2 02db a7c4 02dd a1c7 02df 9dc9 02df     ................
    85a8:	98cc 02e1 92cf 02e3 8ed1 02e5 89d4 02e5     ................
    85b8:	84d6 03e7 7ed9 03e9 79db 03e9 76de 03eb     .....~...y...v..
    85c8:	71e0 03ed 6de3 03ed 68e5 03ef 65e8 03f1     .q...m...h...e..
    85d8:	61ea 03f1 5ced 03f4 58ef 03f6 54f2 04f8     .a...\...X...T..
    85e8:	50f4 04f8 4ef7 04fa 4af9 04fc 47fc 04fc     .P...N...J...G..
    85f8:	43ff 04ff                                   .C..

000085fc <bhw2_10_gp>:
    85fc:	0000 000c 993d 70ef 007f 000c 6aa5 02ef     ....=..p.....j..
    860c:	a7c4 47e5 6ae5 02ef 00ff 000c               ...G.j......

00008618 <es_ocean_breeze_068_gp>:
    8618:	6400 999c 0133 8963 0165 5444 2368 a88e     .d..3.c.e.DTh#..
    8628:	00b2 753f 01ff 0a0a                         ..?u....

00008630 <bhw3_21_gp>:
    8630:	0100 6228 0130 4441 024c 60a1 0068 1951     ..(b0.ADL..`h.Q.
    8640:	4182 52b6 0099 aa56 11b5 b6cf 11cc b6cf     .A.R..V.........
    8650:	01ff 2e17                                   ....

00008654 <otis_gp>:
    8654:	1a00 5901 117f 00c1 00d8 6222 00ff 6222     ...Y......"b.."b

00008664 <fire_gp>:
    8664:	0100 0001 204c 0005 c092 0018 dcc5 0569     ....L ........i.
    8674:	fcf0 1fff fcfa 6fff ffff ffff               .......o....

00008680 <blueice_gp>:
    8680:	0000 0000 011f 0f02 013f 590a 0142 5d0c     ........?..YB..]
    8690:	0144 600d 0147 640f 0149 6910 014c 6c12     D..`G..dI..iL..l
    86a0:	014e 7014 0151 7316 0153 7817 0156 7b1a     N..pQ..sS..xV..{
    86b0:	0158 801d 015b 841f 015d 8921 0160 8c24     X...[...].!.`.$.
    86c0:	0162 9128 0165 972b 0167 9b2e 016a a032     b.(.e.+.g...j.2.
    86d0:	016c a436 016f a638 0171 aa3c 0174 ac41     l.6.o.8.q.<.t.A.
    86e0:	0176 ae45 0179 b248 017b b44d 017e b651     v.E.y.H.{.M.~.Q.
    86f0:	0180 b856 0183 bc5b 0186 be60 0188 c065     ..V...[...`...e.
    8700:	018b c56b 018d c770 0190 c976 0192 cb7c     ..k...p...v...|.
    8710:	0195 cf82 0197 d28a 019a d490 019c d697     ................
    8720:	019f db9f 01a1 dda6 01a4 dfad 01a6 e4b6     ................
    8730:	01a9 e6bd 01ab e9c7 01ae ebcf 01b0 f0d9     ................
    8740:	01b3 f2e1 01b5 f5eb 02b8 f7f6 02ba f7fc     ................
    8750:	02bd f2ff 3dde f7ff ffff ffff               .....=......

0000875c <BlacK_Blue_Magenta_White_gp>:
    875c:	0000 0000 002a 2d00 0054 ff00 2a7f ff00     ....*..-T....*..
    876c:	ffaa ff00 ffd4 ff37 ffff ffff               ......7.....

00008778 <es_landscape_33_gp>:
    8778:	0100 0005 2013 0117 a126 0137 e53f 0190     ..... ..&.7.?...
    8788:	2742 4a8e 01ff 0104                         B'.J....

00008790 <froth316_gp>:
    8790:	f700 0000 f711 0000 9d11 0000 9d21 0000     ............!...
    87a0:	5621 0000 5633 0000 2733 0000 2744 0000     !V..3V..3'..D'..
    87b0:	0c44 0000 0c54 0000 0054 00f8 0066 00f8     D...T...T...f...
    87c0:	0066 00a9 0077 00a9 0077 0065 0087 0065     f...w...w.e...e.
    87d0:	0087 0034 0099 0034 0099 0013 00aa 0013     ..4...4.........
    87e0:	00aa f700 00ba f700 00ba a000 00cc a000     ................
    87f0:	00cc 5900 00dd 5900 00dd 2a00 00ed 2a00     ...Y...Y...*...*
    8800:	00ed 0e00 00ff 0e00                         ........

00008808 <fierce_ice_gp>:
    8808:	0000 0000 003b 2d07 0077 ff21 0395 ff52     ....;..-w.!...R.
    8818:	17b4 ff9c 64d9 ffcb ffff ffff               .....d......

00008824 <Sunset_Real_gp>:
    8824:	7800 0000 b316 0016 ff33 0068 a755 1216     .x......3.h.U...
    8834:	6487 6700 10c6 8200 00ff a000               .d.g........

00008840 <Fuschia_7_gp>:
    8840:	2b00 9903 643f 6704 bc7f 4205 a1bf 730b     .+..?d.g...B...s
    8850:	87ff b614                                   ....

00008854 <Split_03_gp>:
    8854:	0000 7b12 003f 1d4b 007f 01b2 1bbf 0130     ...{?.K.......0.
    8864:	a7ff 0201                                   ....

00008868 <GMT_drywet_gp>:
    8868:	2f00 021e d52a 1893 6754 34db 037f cfdb     ./..*...Tg.4....
    8878:	01aa d630 01d4 6f01 01ff 2107               ..0....o...!

00008884 <cloudcolors_gp>:
    8884:	0000 ff00 000f 8b00 006f 8b00 007f ff00     ........o.......
    8894:	008f 8b00 879f face 87af face adbf e6d8     ................
    88a4:	c8cf c8c8 addf e6d8 87ef ebce 00ff ffbf     ................

000088b4 <cw1_029_gp>:
    88b4:	0c00 d250 ff7f 13eb e0ff 0f42               ..P.......B.

000088c0 <BlacK_Red_Magenta_Yellow_gp>:
    88c0:	0000 0000 2a2a 0000 ff54 0000 ff7f 2d00     ....**..T......-
    88d0:	ffaa ff00 ffd4 2d37 ffff 00ff               ......7-....

000088dc <sunlitwave_gp>:
    88dc:	0500 5409 252d 6f18 1051 3b05 1870 1401     ...T-%.oQ..;p...
    88ec:	2296 0201 afc6 0724 d0ed 1068 efff 9ed3     ."....$...h.....

000088fc <bhw4_009_gp>:
    88fc:	4200 c0ba 012b 4716 024f 8e68 4275 c0ba     .B..+..GO.h.uB..
    890c:	0293 8e68 01ba 4716 02e0 8e68 04ff 1c1b     ..h....G..h.....

0000891c <bhw3_13_gp>:
    891c:	0300 4806 0c26 bc32 d96d 0123 f287 0caf     ...H&.2.m.#.....
    892c:	a1b2 5720 18ff 6c06                         .. W...l

00008934 <Analogous_1_gp>:
    8934:	0300 ff00 173f ff00 437f ff00 8ebf 2d00     ....?....C.....-
    8944:	ffff 0000                                   ....

00008948 <GMT_cool_gp>:
    8948:	0000 ffff ffff ff00                         ........

00008950 <b_m16_interleave>:
    8950:	3100 2931 1b5a 0a75                         .11)Z.u.

00008958 <es_landscape_64_gp>:
    8958:	0000 0000 0225 0119 0f4c 0573 4f7f 01d5     ....%...L.s..O..
    8968:	7e80 2fd3 bc82 f7d1 9099 cdb6 3bcc fa75     .~./.........;u.
    8978:	01ff c025                                   ..%.

0000897c <es_emerald_dragon_01_gp>:
    897c:	0100 0101 014f 0713 0182 193b 1ce5 ffff     ....O.....;.....
    898c:	1cff ffff                                   ....

00008990 <es_autumn_19_gp>:
    8990:	1a00 0101 4333 0104 7654 010e 8968 3498     ....3C..Tv..h..4
    89a0:	7170 0141 857a 3b95 897c 3498 7187 0141     pqA.z..;|..4.qA.
    89b0:	8b8e 2e9a 71a3 010d 37cc 0103 11f9 0101     .....q...7......
    89c0:	11ff 0101                                   ....

000089c4 <alarm_p4_0_2_gp>:
    89c4:	e300 dfff ff0c 0424 ff19 0102 ff26 1001     ......$.....&...
    89d4:	ff33 6201 ff3f e601 8c4c ff01 3f59 ff01     3..b?...L...Y?..
    89e4:	1866 ff01 0572 ff01 017f ff01 018c ff04     f...r...........
    89f4:	0199 ff10 01a5 ff24 01b2 ff3e 01bf ff5f     ......$...>..._.
    8a04:	01cc ff83 01d8 ffad 01e5 ffdd 01f2 ebff     ................
    8a14:	01ff baff                                   ....

00008a18 <water1_gp>:
    8a18:	0100 2e01 4f1c be88 1035 b851 4f49 be88     .....O..5.Q.IO..
    8a28:	4b63 e9c9 067c 670c 4b9e e9c9 54ba 6c6d     cK..|..g.K...Tml
    8a38:	10c6 b851 4fe8 be88 01ff 2e01               ..Q..O......

00008a44 <bhw1_28_gp>:
    8a44:	4b00 dd01 fc1e ff49 a930 f200 0077 f295     .K....I.0...w...
    8a54:	2baa f200 fcce ff49 4ee8 d60c 00ff f295     .+....I..N......

00008a64 <Skydye11_gp>:
    8a64:	0800 0400 0801 0400 0c02 0800 1003 0c00     ................
    8a74:	1404 0c00 1405 1000 1806 1000 1c07 1400     ................
    8a84:	1c09 1400 200a 1800 240b 1800 240c 1c00     ..... ...$...$..
    8a94:	280d 1c00 2c0e 2000 300f 2400 3410 2400     .(...,. .0.$.4.$
    8aa4:	3811 2800 3c12 2c00 3c14 2c00 4015 3000     .8.(.<.,.<.,.@.0
    8ab4:	4416 3400 4817 3400 4c18 3800 4c19 3804     .D.4.H.4.L.8.L.8
    8ac4:	501a 3c04 541b 3c04 581c 4004 5c1d 4404     .P.<.T.<.X.@.\.D
    8ad4:	601e 4808 601f 4c08 5c20 5008 5821 5408     .`.H.`.L \.P!X.T
    8ae4:	5422 5c08 5423 6008 5024 6808 4c25 6c08     "T.\#T.`$P.h%L.l
    8af4:	4826 7008 4827 7808 4428 7c08 4029 8408     &H.p'H.x(D.|)@..
    8b04:	3c2a 8808 3c2b 9008 382c 9408 342d 9808     *<..+<..,8..-4..
    8b14:	302e a008 302f a404 2c30 ac04 2831 b004     .0../0..0,..1(..
    8b24:	2432 b404 2433 bc04 2034 c004 1c35 c804     2$..3$..4 ..5...
    8b34:	1836 cc04 1837 d404 1438 d804 1039 dc04     6...7...8...9...
    8b44:	0c3a e404 0c3b e804 083c f004 043d f404     :...;...<...=...
    8b54:	003e fc00 003f f804 0040 f40c 0041 f014     >...?...@...A...
    8b64:	0042 ec1c 0043 e824 0044 e42c 0045 e034     B...C.$.D.,.E.4.
    8b74:	0046 dc3c 0047 d844 0048 d44c 0049 d054     F.<.G.D.H.L.I.T.
    8b84:	004a cc5c 004b c864 004c c46c 004d c074     J.\.K.d.L.l.M.t.
    8b94:	004e bc7c 004f b884 0050 b48c 0051 b094     N.|.O...P...Q...
    8ba4:	0052 ac9c 0053 a8a4 0054 a4ac 0055 a0b4     R...S...T...U...
    8bb4:	0056 9cbc 0057 98c4 0058 94cc 0059 90d4     V...W...X...Y...
    8bc4:	005a 8cdc 005b 88e4 005c 84ec 005d 7ce8     Z...[...\...]..|
    8bd4:	005e 78e0 005f 70dc 0060 68d8 0061 60d0     ^..x_..p`..ha..`
    8be4:	0062 5cc8 0063 58c0 0064 50b8 0065 4cac     b..\c..Xd..Pe..L
    8bf4:	0066 44a4 0067 409c 0068 3894 0069 348c     f..Dg..@h..8i..4
    8c04:	006a 2c80 006b 2878 006c 2070 006d 1c68     j..,k.x(l.p m.h.
    8c14:	006e 145c 006f 1054 0070 084c 0071 0040     n.\.o.T.p.L.q.@.
    8c24:	0072 003c 0073 0038 0074 0034 0075 0030     r.<.s.8.t.4.u.0.
    8c34:	0076 002c 0077 0028 0078 0024 0479 0020     v.,.w.(.x.$.y. .
    8c44:	047a 001c 047b 0018 047c 0014 047d 0010     z...{...|...}...
    8c54:	047e 000c 047f 0008 0480 0004 0881 0400     ~...............
    8c64:	0c82 0800 1083 0c00 1484 0c00 1485 1000     ................
    8c74:	1886 1000 1c87 1400 2088 1400 2089 1800     ......... ... ..
    8c84:	248a 1800 288b 1c00 2c8c 2000 308d 2400     .$...(...,. .0.$
    8c94:	348e 2404 388f 2804 3891 2804 3c92 2c04     .4.$.8.(.8.(.<.,
    8ca4:	4093 3004 4494 3004 4495 3404 4896 3404     .@.0.D.0.D.4.H.4
    8cb4:	4c97 3804 5098 3804 5099 3c04 549a 3c04     .L.8.P.8.P.<.T.<
    8cc4:	589b 4004 5c9c 4404 609d 4808 609e 4c08     .X.@.\.D.`.H.`.L
    8cd4:	689f 4808 70a0 4408 7ca1 4008 84a2 3c08     .h.H.p.D.|.@...<
    8ce4:	90a3 3408 98a4 3008 a4a5 2c08 aca6 2808     ...4...0...,...(
    8cf4:	b4a7 2404 c0a8 2004 c8a9 1c04 d4aa 1404     ...$... ........
    8d04:	dcab 1004 e8ac 0c04 f0ad 0804 fcae 0000     ................
    8d14:	fcaf 0008 fcb0 0014 fcb1 001c fcb2 0028     ..............(.
    8d24:	fcb3 0030 fcb4 003c fcb5 0044 fcb6 0050     ..0...<...D...P.
    8d34:	fcb7 0058 fcb8 0064 fcb9 006c fcba 0078     ..X...d...l...x.
    8d44:	fcbb 0084 fcbc 008c fcbd 0098 fcbe 00a0     ................
    8d54:	fcbf 00ac fcc0 00b4 fcc1 00c0 fcc2 00c8     ................
    8d64:	fcc3 00d4 fcc4 00dc fcc5 00e8 fcc6 00f0     ................
    8d74:	fcc7 00fc fcc8 00f0 fcc9 00e8 fcca 00dc     ................
    8d84:	fccb 00d0 fccc 00c4 fccd 00bc fcce 00b0     ................
    8d94:	fccf 00a4 fcd0 0098 fcd1 0090 fcd2 0084     ................
    8da4:	fcd3 0078 fcd4 0070 fcd5 0064 fcd6 0058     ..x...p...d...X.
    8db4:	fcd7 004c fcd8 0044 fcd9 0038 fcda 002c     ..L...D...8...,.
    8dc4:	fcdb 0020 fcdc 0018 fcdd 000c fcde 0000     .. .............
    8dd4:	f4df 0400 ece0 0800 e0e1 0c00 d8e2 1000     ................
    8de4:	cce3 1800 c4e4 1c00 b8e5 2000 b0e6 2404     ........... ...$
    8df4:	a8e7 2804 9ce8 2c04 94e9 3004 88ea 3804     ...(...,...0...8
    8e04:	80eb 3c04 74ec 4004 6ced 4404 60ee 4c08     ...<.t.@.l.D.`.L
    8e14:	5cef 4808 54f0 4408 50f1 4008 48f2 3808     .\.H.T.D.P.@.H.8
    8e24:	44f3 3404 3cf4 3004 38f5 2c04 30f6 2804     .D.4.<.0.8.,.0.(
    8e34:	2cf7 2004 24f8 1c04 20f9 1804 18fa 1404     .,. .$... ......
    8e44:	14fb 1000 0cfc 0800 00fd 0000 04fe 0400     ................
    8e54:	04ff 0400                                   ....

00008e58 <rainbow_gp>:
    8e58:	ff00 0000 ab20 0055 ab40 00ab 0060 00ff     .... .U.@...`...
    8e68:	0080 55ab 00a0 ff00 55c0 ab00 abe0 5500     ...U.....U.....U
    8e78:	ffff 0000                                   ....

00008e7c <Coral_reef_gp>:
    8e7c:	2800 c5c7 0a32 9b98 0160 786f 2b60 a27f     .(..2...`.ox`+..
    8e8c:	0a8b 6f49 01ff 4722                         ..Io.."G

00008e94 <sin16_C(unsigned short)::slope>:
    8e94:	3031 262c 171f 040e                         10,&....

00008e9c <bhw2_23_gp>:
    8e9c:	0000 0000 3942 e9e3 ff60 08ff ff7c ffff     ....B9..`...|...
    8eac:	ff99 08ff 39bc e9e3 00ff 0000               .....9......

00008eb8 <bhw1_05_gp>:
    8eb8:	0100 35dd 49ff b203                         ...5.I..

00008ec0 <g_gradient_palettes>:
    8ec0:	9b6c 0000 95ec 0000 8934 0000 813c 0000     l.......4...<...
    8ed0:	82cc 0000 8e7c 0000 8618 0000 9830 0000     ....|.......0...
    8ee0:	8958 0000 8778 0000 9c08 0000 9bdc 0000     X...x...........
    8ef0:	9b04 0000 8868 0000 9994 0000 8840 0000     ....h.......@...
    8f00:	971c 0000 9840 0000 8664 0000 96f0 0000     ....@...d.......
    8f10:	8230 0000 8824 0000 8990 0000 875c 0000     0...$.......\...
    8f20:	9c90 0000 88c0 0000 9bf4 0000 9c7c 0000     ............|...
    8f30:	9b38 0000 8a44 0000 8e9c 0000 96dc 0000     8...D...........
    8f40:	9630 0000 85fc 0000 9920 0000 8630 0000     0....... ...0...
    8f50:	9c48 0000 824c 0000 88b4 0000 89c4 0000     H...L...........
    8f60:	82a8 0000 9034 0000 811c 0000 972c 0000     ....4.......,...
    8f70:	8268 0000 8128 0000 897c 0000 8790 0000     h...(...|.......
    8f80:	8a64 0000 91c4 0000 964c 0000 9610 0000     d.......L.......
    8f90:	98a4 0000 8150 0000 81e8 0000 9b88 0000     ....P...........
    8fa0:	8854 0000 993c 0000 8e58 0000 8884 0000     T...<...X.......
    8fb0:	9c24 0000 81cc 0000 8808 0000 8680 0000     $...............
    8fc0:	99ac 0000 9bc0 0000 8354 0000 906c 0000     ........T...l...
    8fd0:	84a8 0000 8654 0000 9bac 0000 81a8 0000     ....T...........
    8fe0:	88dc 0000 8948 0000 9884 0000 8eb8 0000     ....H...........
    8ff0:	96c0 0000 891c 0000 8218 0000 88fc 0000     ................
    9000:	9050 0000 9040 0000 9ca4 0000 8a18 0000     P...@...........
    9010:	9744 0000 8284 0000 81b8 0000 9b7c 0000     D...........|...
    9020:	9b24 0000 9894 0000 9b9c 0000 82e8 0000     $...............
    9030:	95c4 0000                                   ....

00009034 <Orange_to_Purple_gp>:
    9034:	d000 0132 927f 2d1b 61ff b20c               ..2....-.a..

00009040 <es_emerald_dragon_09_gp>:
    9040:	0100 0101 014c 0102 0a99 012f 61ff 01ff     ....L...../..a..

00009050 <bhw3_34_gp>:
    9050:	1d00 cd70 5c30 faff 345b 0cdf 047c 150d     ..p.0\..[4..|...
    9060:	09b7 0f67 0ad8 0250 26ff 34ff               ..g...P..&.4

0000906c <apple_green_gp>:
    906c:	0000 0000 0102 0101 0104 0101 0107 0101     ................
    907c:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    908c:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    909c:	011e 0102 0120 0102 0123 0103 0125 0103     .... ...#...%...
    90ac:	0128 0104 012a 0105 012d 0105 012f 0106     (...*...-.../...
    90bc:	0132 0107 0134 0108 0137 0108 0139 0209     2...4...7...9...
    90cc:	013c 020a 013e 030b 0141 040c 0143 050d     <...>...A...C...
    90dc:	0146 070e 0148 0710 014b 0811 014d 0812     F...H...K...M...
    90ec:	0150 0813 0152 0915 0155 0916 0157 0918     P...R...U...W...
    90fc:	0182 083a 0185 073c 0187 073f 018a 0642     ..:...<...?...B.
    910c:	018d 0645 018f 0547 0192 054a 0194 044e     ..E...G...J...N.
    911c:	0197 0450 0199 0354 019c 0356 019e 025a     ..P...T...V...Z.
    912c:	01a1 025c 01a3 0160 01a6 0163 01a8 0167     ..\...`...c...g.
    913c:	01ab 0169 02ad 016d 02b0 0170 03b3 0175     ..i...m...p...u.
    914c:	03b5 0177 04b8 017c 05ba 0180 05bd 0183     ..w...|.........
    915c:	06bf 0188 07c2 018b 09c4 0190 0ac7 0193     ................
    916c:	0bc9 0198 0dcc 019c 0fce 01a1 11d1 01a4     ................
    917c:	13d3 01a9 16d6 01ad 18d9 01b2 1bdb 01b8     ................
    918c:	1fde 01bb 23e0 01c1 27e3 01c5 2ce5 01cb     .....#...'...,..
    919c:	31e8 01cf 36ea 01d5 3ced 01d9 43ef 01df     .1...6...<...C..
    91ac:	4af2 01e3 52f4 01e9 5bf7 01ed 64f9 01f4     .J...R...[...d..
    91bc:	6efc 01f8 79ff 00ff                         .n...y..

000091c4 <Wizzl019_gp>:
    91c4:	8c00 ac14 8c01 ac14 9402 b814 a003 c810     ................
    91d4:	9c04 c410 9805 bc10 9406 b410 8c07 ac0c     ................
    91e4:	8808 a40c 8409 9c0c 800a 940c 780b 8c08     .............x..
    91f4:	740c 8808 700d 8008 6c0e 7808 640f 7004     .t...p...l.x.d.p
    9204:	6010 6804 5c11 6004 5812 5804 5013 5000     .`.h.\.`.X.X.P.P
    9214:	5414 4c04 5c15 480c 6416 4414 6c17 3c1c     .T.L.\.H.d.D.l.<
    9224:	7418 3824 7c19 342c 841a 3034 8c1b 283c     .t$8.|,4..40..<(
    9234:	901c 2440 981d 2048 a01e 1c50 a81f 1458     ..@$..H ..P...X.
    9244:	b020 1060 b821 0c68 c022 0870 c823 0078      .`.!.h.".p.#.x.
    9254:	c424 0074 bc25 0070 b426 006c ac27 0064     $.t.%.p.&.l.'.d.
    9264:	a428 0060 9c29 005c 942a 0058 8c2b 0050     (.`.).\.*.X.+.P.
    9274:	882c 004c 802d 0048 782e 0044 702f 003c     ,.L.-.H..xD./p<.
    9284:	6830 0038 6031 0034 5832 0030 5033 0028     0h8.1`4.2X0.3P(.
    9294:	4c34 0430 4835 083c 4436 0c44 3c37 1450     4L0.5H<.6DD.7<P.
    92a4:	3838 1858 3439 1c64 303a 206c 283b 2878     88X.94d.:0l ;(x(
    92b4:	243c 2c80 203d 308c 1c3e 3494 143f 3ca0     <$.,= .0>..4?..<
    92c4:	1040 40a8 0c41 44b4 0842 48bc 0043 50c8     @..@A..DB..HC..P
    92d4:	0044 4cc0 0045 48b4 0046 44ac 0047 3ca0     D..LE..HF..DG..<
    92e4:	0048 3898 0049 348c 004a 3084 004b 2878     H..8I..4J..0K.x(
    92f4:	004c 2470 004d 2064 004e 1c5c 004f 1450     L.p$M.d N.\.O.P.
    9304:	0050 1048 0051 0c3c 0052 0834 0053 0028     P.H.Q.<.R.4.S.(.
    9314:	0054 0c28 0455 1c24 0456 2c24 0857 3c20     T.(.U.$.V.$,W. <
    9324:	0c58 481c 0c59 581c 105a 6818 145b 7814     X..HY..XZ..h[..x
    9334:	145c 8414 185d 9410 185e a410 1c5f b40c     \...]...^..._...
    9344:	2060 c008 2061 d008 2462 e004 2863 f000     ` ..a ..b$..c(..
    9354:	2864 e800 2465 dc00 2466 d400 2067 c800     d(..e$..f$..g ..
    9364:	1c68 c000 1c69 b400 186a ac00 146b a000     h...i...j...k...
    9374:	146c 9800 106d 8c00 106e 8400 0c6f 7800     l...m...n...o..x
    9384:	0870 7000 0871 6400 0472 5c00 0073 5000     p..pq..dr..\s..P
    9394:	0c74 5400 1875 5c00 2476 6400 3077 6c00     t..Tu..\v$.dw0.l
    93a4:	3c78 7400 4879 7c00 547a 8400 647b 8c00     x<.tyH.|zT..{d..
    93b4:	707c 9000 7c7d 9800 887e a000 947f a800     |p..}|..~.......
    93c4:	a080 b000 ac81 b800 b882 c000 c883 c800     ................
    93d4:	c084 c000 b485 b400 ac86 ac00 a087 a000     ................
    93e4:	9888 9800 8c89 8c00 848a 8400 788b 7800     .............x.x
    93f4:	708c 7000 648d 6400 5c8e 5c00 508f 5000     .p.p.d.d.\.\.P.P
    9404:	4890 4800 3c91 3c00 3492 3400 2893 2800     .H.H.<.<.4.4.(.(
    9414:	3494 2800 4095 2800 4c96 2800 5897 2800     .4.(.@.(.L.(.X.(
    9424:	6498 2800 7099 2800 7c9a 2800 8c9b 2400     .d.(.p.(.|.(...$
    9434:	989c 2400 a49d 2400 b09e 2400 bc9f 2400     ...$...$...$...$
    9444:	c8a0 2400 d4a1 2400 e0a2 2400 f0a3 2000     ...$...$...$... 
    9454:	e8a4 2000 dca5 1c00 d4a6 1c00 c8a7 1800     ... ............
    9464:	c0a8 1800 b4a9 1400 acaa 1400 a0ab 1000     ................
    9474:	98ac 1000 8cad 0c00 84ae 0c00 78af 0800     .............x..
    9484:	70b0 0800 64b1 0400 5cb2 0400 50b3 0000     .p...d...\...P..
    9494:	58b4 0008 60b5 0010 68b6 0018 74b7 0020     .X...`...h...t .
    94a4:	7cb8 0028 84b9 0030 8cba 0038 98bb 0040     .|(...0...8...@.
    94b4:	a0bc 0048 a8bd 0050 b0be 0058 bcbf 0060     ..H...P...X...`.
    94c4:	c4c0 0068 ccc1 0070 d4c2 0078 e0c3 0080     ..h...p...x.....
    94d4:	d8c4 007c ccc5 0074 c0c6 0070 b4c7 0068     ..|...t...p...h.
    94e4:	a8c8 0064 a0c9 005c 94ca 0058 88cb 0050     ..d...\...X...P.
    94f4:	7ccc 0048 70cd 0044 68ce 003c 5ccf 0038     .|H..pD..h<..\8.
    9504:	50d0 0030 44d1 002c 38d2 0024 40d3 0824     .P0..D,..8$..@$.
    9514:	4cd4 1424 58d5 1c24 64d6 2820 70d7 3020     .L$..X$..d (.p 0
    9524:	7cd8 3c20 88d9 4420 94da 501c 9cdb 581c     .| <.. D...P...X
    9534:	a8dc 641c b4dd 6c1c c0de 7818 ccdf 8018     ...d...l...x....
    9544:	d8e0 8c18 e4e1 9418 f0e2 a014 e4e3 9814     ................
    9554:	d4e4 8c14 c4e5 8418 b4e6 7818 a8e7 7018     ...........x...p
    9564:	98e8 641c 88e9 5c1c 78ea 5020 6ceb 4820     ...d...\.x P.l H
    9574:	5cec 3c20 4ced 3424 3cee 2824 30ef 2024     .\ <.L$4.<$(.0$ 
    9584:	20f0 1428 10f1 0c28 00f2 002c 08f3 0c2c     . (...(...,...,.
    9594:	14f4 182c 1cf5 2428 28f6 3028 30f7 3c24     ..,...($.((0.0$<
    95a4:	3cf8 4824 44f9 5420 50fa 6420 58fb 7020     .<$H.D T.P d.X p
    95b4:	64fc 7c1c 6cfd 881c 78fe 9418 80ff a018     .d.|.l...x......

000095c4 <blade_runner_2049_gp>:
    95c4:	c900 ad50 ab19 9b39 6832 7323 5e4b 6e21     ..P...9.2h#sK^!n
    95d4:	7f64 ac78 4d7d a98d 74a0 b255 14aa 731b     d.x.}M...tU....s
    95e4:	4bc8 4915 2cff 2a09                         .K.I.,.*

000095ec <rgi_15_gp>:
    95ec:	0400 1f01 371f 1001 c53f 0703 3b5f 1102     .....7..?..._;..
    95fc:	067f 2202 279f 2106 70bf 200d 38df 2309     ...".'.!.p. .8.#
    960c:	16ff 2606                                   ...&

00009610 <slope_gp>:
    9610:	ff00 ffff ff05 00ff 000e 00ff 001c ffff     ................
    9620:	002a ff00 ff54 ff00 ff8d 0000 00ff 0000     *...T...........

00009630 <bhw2_49_gp>:
    9630:	0900 0f0f 0028 2d37 0956 0f0f 1d82 3e29     ....(.7-V.....)>
    9640:	09aa 0f0f 40d3 c708 06ff 1601               .....@......

0000964c <Tropical_Colors_gp>:
    964c:	0100 0104 010e 010a 0115 0013 0123 012a     ............#.*.
    965c:	0331 014b 383b 0167 d046 0487 d954 0236     1.K.;8g.F...T.6.
    966c:	e062 010a 7582 030f 308d 0614 2a9b 4d12     b....u...0...*.M
    967c:	24aa ff11 37c5 f261 50d2 e4ff 2fdc 4ddb     .$...7a..P.../.M
    968c:	18e1 0abb 18e4 09b4 18e6 08ab 17e8 06a1     ................
    969c:	17eb 0595 16ed 0488 16f0 027c 15f2 0170     ..........|...p.
    96ac:	15f5 0164 14f7 0158 13fa 014d 13fc 0142     ..d...X...M...B.
    96bc:	12ff 0037                                   ..7.

000096c0 <bhw2_turq_gp>:
    96c0:	0100 5f21 0126 256b 2a4c 2dff ff7f 2dff     ..!_&.k%L*.-...-
    96d0:	2ab2 2dff 01d8 256b 01ff 5f21               .*.-..k%..!_

000096dc <bhw2_22_gp>:
    96dc:	0000 0000 e363 0101 f982 5fc7 e39b 0101     ....c......_....
    96ec:	00ff 0000                                   ....

000096f0 <Colorfull_gp>:
    96f0:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
    9700:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
    9710:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

0000971c <es_emerald_dragon_08_gp>:
    971c:	6100 01ff 2f65 0185 0db2 012b 02ff 010a     .a..e/....+.....

0000972c <standard_gp>:
    972c:	0000 0000 0a54 ff11 0054 0011 0aa9 0cff     ....T...T.......
    973c:	0aa9 0000 ffff 0c11                         ........

00009744 <stratosphere_sunset_gp>:
    9744:	0100 0902 0104 0902 0108 0a02 010d 0b02     ................
    9754:	0111 0b02 0115 0d03 011a 0f03 011e 1003     ................
    9764:	0123 1204 0127 1304 012b 1504 0130 1705     #...'...+...0...
    9774:	0134 1b05 0139 2006 013d 2607 0141 3109     4...9.. =..&A..1
    9784:	0146 3d0b 014a 5011 014f 6717 0153 871f     F..=J..PO..gS...
    9794:	0257 ac2a 045c be30 0960 d236 0b65 d637     W.*.\.0.`.6.e.7.
    97a4:	0d69 dd3a 106d db3c 1372 d83e 1876 d242     i.:.m.<.r.>.v.B.
    97b4:	1e7b c945 237f b446 2783 a246 4088 9054     {.E..#F..'F..@T.
    97c4:	618c 8061 9491 7b79 d295 7792 b899 5c7a     .aa...y{...w..z\
    97d4:	9f9e 4564 85a2 2144 6ea7 0b2a 98ab 0635     ..dE..D!.n*...5.
    97e4:	cbaf 0341 deb4 0563 f2b8 078e debd 057a     ..A...c.......z.
    97f4:	cbc1 0369 d0c5 0149 d2ca 0130 dece 012d     ..i...I...0...-.
    9804:	ead3 012a 96d7 0117 56db 010a 23e0 0103     ..*......V...#..
    9814:	09e4 0101 04e9 0101 01ed 0101 01f1 0101     ................
    9824:	01f6 0101 01fa 0101 01ff 0101               ............

00009830 <es_ocean_breeze_036_gp>:
    9830:	0100 0706 0159 6f63 9099 ffd1 00ff 5249     ....Y.co......IR

00009840 <lava_gp>:
    9840:	0000 0000 122e 0000 7160 0000 8e6c 0103     ........`q..l...
    9850:	af77 0111 d592 022c ffae 0452 ffbc 0473     w.....,...R...s.
    9860:	ffca 049c ffda 04cb ffea 04ff fff4 47ff     ...............G
    9870:	ffff ffff                                   ....

00009874 <sin16_C(unsigned short)::base>:
    9874:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

00009884 <bhw1_sunconure_gp>:
    9884:	1400 0ddf e8a0 0141 e8fc 0105 e8ff 0105     ......A.........

00009894 <blue_fire_gp>:
    9894:	0000 0000 0040 ff00 00c8 ffff ffff ffff     ....@...........

000098a4 <ofaurora_gp>:
    98a4:	ff00 f2f1 ed0a 0901 2a0f 0201 0116 0101     .........*......
    98b4:	ed23 0901 ff30 f2f1 ef3a 0139 0142 0101     #...0...:.9.B...
    98c4:	ef4c 0139 ff54 f2f1 f25e 01d9 0165 0101     L.9.T...^...e...
    98d4:	f26d 01d9 ff77 f2f1 097f 2490 0184 0101     m...w......$....
    98e4:	098c 2490 ff93 f2f1 019e ba9c 01a8 0101     ...$............
    98f4:	01b2 ba9c ffba f2f1 10c6 ff0d 01ce 0101     ................
    9904:	10d8 ff0d ffe0 f2f1 4eea 9c01 0eed 1e01     .........N......
    9914:	01ef 0101 4ef4 9c01 ffff f2f1               .....N......

00009920 <bhw2_14_gp>:
    9920:	0000 0800 002d 2d00 074f ff0c 2a77 ff37     ....-..-O...w*7.
    9930:	079e ff0c 00d1 2d00 00ff 0800               .......-....

0000993c <GMT_seafloor_gp>:
    993c:	1900 6d00 1c0a 7700 2015 7f00 231f 8c00     ...m...w. ...#..
    994c:	1b2a 9101 1435 9701 0e4a 9c04 0954 a409     *...5...J...T...
    995c:	055f aa0f 026a b018 0174 b623 018a bc31     _...j...t.#...1.
    996c:	0094 c542 019f cb4f 03aa d25d 0ab4 d86d     ..B...O...]...m.
    997c:	18bf df80 2bd4 e695 48df f0ad 70e9 f7c5     .....+...H...p..
    998c:	a3f4 ffe1 dcff fff8                         ........

00009994 <ib15_gp>:
    9994:	7100 935b 9d48 4e58 d059 2155 ff6b 0b1d     .q[.H.XNY.U!k...
    99a4:	898d 271f 3bff 5921                         ...'.;!Y

000099ac <twilight_gp>:
    99ac:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    99bc:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    99cc:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    99dc:	011e 0101 0120 0102 0123 0102 0125 0102     .... ...#...%...
    99ec:	0228 0203 022a 0203 022d 0203 032f 0304     (...*...-.../...
    99fc:	0332 0304 0435 0405 0437 0405 053a 0505     2...5...7...:...
    9a0c:	063c 0606 063f 0606 0741 0707 0844 0807     <...?...A...D...
    9a1c:	0946 0908 0949 0a08 0a4b 0b08 0b4e 0d09     F...I...K...N...
    9a2c:	0c50 0e09 0d53 0f09 0e55 100a 0e58 110a     P...S...U...X...
    9a3c:	1185 330e 1088 340e 0f8a 370e 0e8d 390e     ...3...4...7...9
    9a4c:	0d8f 3d0e 0c92 3f0e 0c95 420e 0a97 450d     ...=...?...B...E
    9a5c:	0a9a 480d 099c 4b0d 089f 4e0d 07a1 520e     ...H...K...N...R
    9a6c:	07a4 5410 07a6 5811 07a9 5b13 07ab 5f15     ...T...X...[..._
    9a7c:	07ae 6216 07b0 6619 06b3 691b 06b5 6d1d     ...b...f...i...m
    9a8c:	06b8 7020 07ba 7525 08bd 782a 09bf 7d2f     .. p..%u..*x../}
    9a9c:	0ac2 8036 0bc4 843b 0cc7 8942 0ec9 8c49     ..6...;...B...I.
    9aac:	10cc 9150 12ce 9557 14d0 995f 16d3 9e67     ..P...W..._...g.
    9abc:	18d5 a26f 1bd8 a877 1eda ac80 20dd b08a     ..o...w...... ..
    9acc:	23df b693 27e2 ba9c 2ae4 c0a6 2ee7 c5b0     .#...'...*......
    9adc:	34e9 c9b6 3aeb cfbb 41ee d4c1 49f0 dbc7     .4...:...A...I..
    9aec:	50f2 dfcd 5af5 e6d5 64f7 ebdb 6dfa f2e1     .P...Z...d...m..
    9afc:	78fc f7e7 84ff ffed                         .x......

00009b04 <gr64_hult_gp>:
    9b04:	0100 6d7c 0142 4f5d 3468 0141 7382 017f     ..|mB.]Oh4A..s..
    9b14:	3496 0141 01c9 4856 00ef 2d37 00ff 2d37     .4A...VH..7-..7-

00009b24 <cyberpunk_neon_gp>:
    9b24:	7100 911c ea3f d900 0a7f c6bd 13bf 7c3e     .q..?.........>|
    9b34:	09ff 3318                                   ...3

00009b38 <bhw1_26_gp>:
    9b38:	6b00 cd01 ff23 ffff 6b49 cd01 0a6b d295     .k..#...Ik..k...
    9b48:	ff82 ffff 0a99 d295 1baa 77af 35c6 38cb     ...........w.5.8
    9b58:	84cf 87e5 ffdb ffff 84e7 87e5 35fc 38cb     .............5.8
    9b68:	35ff 38cb                                   .5.8

00009b6c <ib_jul01_gp>:
    9b6c:	c200 0101 015e 121d 3984 1c83 71ff 0101     ....^....9...q..

00009b7c <Complementary_01a_gp>:
    9b7c:	0000 ff21 2a7f 2d21 ffff 0021               ..!..*!-..!.

00009b88 <Secondary_01a_gp>:
    9b88:	0300 ff00 433f 2d07 ff7f 0021 2abf 0173     ....?C.-..!..*s.
    9b98:	00ff 01ff                                   ....

00009b9c <purplefly_gp>:
    9b9c:	0000 0000 ef3f 7a00 fcbf 4eff 00ff 0000     ....?..z...N....

00009bac <parrot_gp>:
    9bac:	7e00 0100 c572 10a8 c58c 10a8 00d8 2002     .~..r.......... 
    9bbc:	00ff 2002                                   ... 

00009bc0 <green_gp>:
    9bc0:	0000 0000 003f 0011 007e 0052 009b 0080     ....?...~.R.....
    9bd0:	00b8 00ba 2adb 2ddb ffff ffff               .....*.-....

00009bdc <gr65_hult_gp>:
    9bdc:	f700 f7b0 ff30 ff88 dc59 e21d 07a0 b252     ....0...Y.....R.
    9bec:	01d8 6d7c 01ff 6d7c                         ..|m..|m

00009bf4 <Blue_Cyan_Yellow_gp>:
    9bf4:	0000 ff00 003f ff37 007f ffff 2abf 2dff     ....?.7......*.-
    9c04:	ffff 00ff                                   ....

00009c08 <rainbowsherbet_gp>:
    9c08:	ff00 0421 ff2b 1944 ff56 1907 ff7f 6752     ..!.+.D.V.....Rg
    9c18:	ffaa f2ff 2ad1 16ff 57ff 41ff               .....*...W.A

00009c24 <cequal_gp>:
    9c24:	0100 0101 0124 0103 014c 7b29 3b70 fc01     ....$...L.){p;..
    9c34:	757f b401 efac 0151 fcc3 01b4 fcde 93fa     .u....Q.........
    9c44:	fcff fcfc                                   ....

00009c48 <bhw3_30_gp>:
    9c48:	0100 0104 010c 021c 101c 0b44 123a 1c0b     ..........D.:...
    9c58:	1f4f 301b 0260 220d 1e75 7b56 0287 3e2a     O..0`.."u.V{..*>
    9c68:	4a99 9b80 3cb5 291f a7d6 dfd3 b3ed 4e46     .J...<.)......FN
    9c78:	39ff 0702                                   .9..

00009c7c <bhw1_greeny_gp>:
    9c7c:	0000 0000 0727 0837 2a63 2dff 0799 0837     ....'.7.c*.-..7.
    9c8c:	00ff 0000                                   ....

00009c90 <BlacK_Magenta_Red_gp>:
    9c90:	0000 0000 2a3f 2d00 ff7f ff00 ffbf 2d00     ....?*.-.......-
    9ca0:	ffff 0000                                   ....

00009ca4 <xanidu_2_gp>:
    9ca4:	7600 e2a1 4f35 a201 435e 0701 0184 9c37     .v..5O..^C....7.
    9cb4:	01ad 3d7f 27d3 482d 76ff e2a1 4d56 5044     ...=.'-H.v..VMDP
    9cc4:	5f45 0000 323a 003a 003a 0000 565f 444d     E_..:2:.:..._VMD
    9cd4:	4550 0000 4d56 5044 5f43 0000 565f 444d     PE..VMDPC_.._VMD
    9ce4:	4350 0000 7245 6f72 3a72 4120 7474 6d65     PC..Error: Attem
    9cf4:	7470 7420 206f 6573 2074 2061 6572 6461     pt to set a read
    9d04:	6f2d 6c6e 2079 6176 6972 6261 656c 6f20     -only variable o
    9d14:	2072 6164 6174 7420 7079 2065 6f6e 2074     r data type not 
    9d24:	7573 7070 726f 6574 0d64 000a               supported...

00009d30 <pin2sc1a>:
    9d30:	0e05 0908 0c0d 0706 040f 9303 8f8e 0e05     ................
    9d40:	0908 0c0d 0706 040f ffff ffff ffff 8eff     ................
    9d50:	118f 8412 8685 9187 ffff ffff ffff ffff     ................
    9d60:	8aff ff8b ffff ffff ffff ffff ffff ffff     ................
    9d70:	9303 9717 8101 921a                         ........

00009d78 <digital_pin_to_info_PGM>:
    9d78:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    9d88:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    9d98:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    9da8:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    9db8:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    9dc8:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    9dd8:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    9de8:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    9df8:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    9e08:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    9e18:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    9e28:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    9e38:	2068 43fe d068 4004 0014 43fe 9014 4004     h .Ch..@...C...@
    9e48:	0038 43fe 9038 4004 003c 43fe 903c 4004     8..C8..@<..C<..@
    9e58:	0040 43fe 9040 4004 0848 43fe a048 4004     @..C@..@H..CH..@
    9e68:	084c 43fe a04c 4004 0828 43fe a028 4004     L..CL..@(..C(..@
    9e78:	082c 43fe a02c 4004 2060 43fe d060 4004     ,..C,..@` .C`..@
    9e88:	2064 43fe d064 4004 1020 43fe b020 4004     d .Cd..@ ..C ..@
    9e98:	1024 43fe b024 4004 1028 43fe b028 4004     $..C$..@(..C(..@
    9ea8:	102c 43fe b02c 4004 0044 43fe 9044 4004     ,..C,..@D..CD..@
    9eb8:	0070 43fe 9070 4004 0074 43fe 9074 4004     p..Cp..@t..Ct..@
    9ec8:	0068 43fe 9068 4004 0850 43fe a050 4004     h..Ch..@P..CP..@
    9ed8:	0858 43fe a058 4004 085c 43fe a05c 4004     X..CX..@\..C\..@
    9ee8:	0854 43fe a054 4004 1820 43fe c020 4004     T..CT..@ ..C ..@
    9ef8:	1824 43fe c024 4004 0810 43fe a010 4004     $..C$..@...C...@
    9f08:	0814 43fe a014 4004 1838 43fe c038 4004     ...C...@8..C8..@
    9f18:	1834 43fe c034 4004 1830 43fe c030 4004     4..C4..@0..C0..@
    9f28:	183c 43fe c03c 4004 182c 43fe c02c 4004     <..C<..@,..C,..@
    9f38:	2028 43fe d028 4004 202c 43fe d02c 4004     ( .C(..@, .C,..@
    9f48:	2000 43fe d000 4004 2004 43fe d004 4004     . .C...@. .C...@
    9f58:	2008 43fe d008 4004 200c 43fe d00c 4004     . .C...@. .C...@
    9f68:	2010 43fe d010 4004 2014 43fe d014 4004     . .C...@. .C...@
    9f78:	0a0d ffff                                   ....

00009f7c <vtable for usb_serial_class>:
	...
    9f84:	7831 0000 7829 0000 7825 0000 7821 0000     1x..)x..%x..!x..
    9f94:	781d 0000 7819 0000 7815 0000 7811 0000     .x...x...x...x..

00009fa4 <usb_endpoint_config_table>:
    9fa4:	1500 1519                                   ....

00009fa8 <usb_descriptor_list>:
    9fa8:	0100 0000 07ac 1fff 0012 0000 0200 0000     ................
    9fb8:	07d8 1fff 0043 0000 0300 0000 0834 1fff     ....C.......4...
    9fc8:	0000 0000 0301 0409 07c0 1fff 0000 0000     ................
    9fd8:	0302 0409 081c 1fff 0000 0000 0303 0409     ................
    9fe8:	0838 1fff 0000 0000 0000 0000 0000 0000     8...............
    9ff8:	0000 0000                                   ....

00009ffc <_init>:
    9ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ffe:	bf00      	nop
    a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a002:	bc08      	pop	{r3}
    a004:	469e      	mov	lr, r3
    a006:	4770      	bx	lr

0000a008 <__init_array_start>:
    a008:	000080bd 	.word	0x000080bd

0000a00c <__frame_dummy_init_array_entry>:
    a00c:	00000435 00004fe1 00005629 00005ae1     5....O..)V...Z..

Disassembly of section .fini:

0000a01c <_fini>:
    a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a01e:	bf00      	nop
