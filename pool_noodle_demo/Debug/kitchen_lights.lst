
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\kitchen_lights\teensy31\Debug/kitchen_lights.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 a5 39 00 00 5d 39 00 00     ... .....9..]9..
      10:	5d 39 00 00 5d 39 00 00 5d 39 00 00 5d 39 00 00     ]9..]9..]9..]9..
      20:	5d 39 00 00 5d 39 00 00 5d 39 00 00 a5 39 00 00     ]9..]9..]9...9..
      30:	a5 39 00 00 5d 39 00 00 d1 4d 00 00 d5 4e 00 00     .9..]9...M...N..
      40:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      50:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      60:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      70:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      80:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      90:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      a0:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      b0:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      c0:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      d0:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      e0:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
      f0:	a5 39 00 00 c9 50 00 00 a5 39 00 00 f5 51 00 00     .9...P...9...Q..
     100:	a5 39 00 00 21 53 00 00 a5 39 00 00 a5 39 00 00     .9..!S...9...9..
     110:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
     120:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
     130:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
     140:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
     150:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
     160:	a5 39 00 00 ed 3d 00 00 a5 39 00 00 a5 39 00 00     .9...=...9...9..
     170:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
     180:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
     190:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
     1a0:	a5 39 00 00 a5 39 00 00 a5 39 00 00 a5 39 00 00     .9...9...9...9..
     1b0:	a5 39 00 00 a5 39 00 00 a5 39 00 00                 .9...9...9..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f003 fbec 	bl	39ac <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f003 fc40 	bl	3b58 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f003 fbb1 	bl	3a48 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f003 fba2 	bl	3a48 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f005 fbd8 	bl	5abc <__libc_init_array>

	startup_late_hook();
     30c:	f003 fb54 	bl	39b8 <startup_late_hook>
	main();
     310:	f004 fde8 	bl	4ee4 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c54 	.word	0x1fff8c54
     33c:	00007970 	.word	0x00007970
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c54 	.word	0x1fff8c54
     348:	1fff97a8 	.word	0x1fff97a8
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e18b65d 	.word	0x5e18b65d
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c54 	.word	0x1fff8c54
     42c:	00000000 	.word	0x00000000
     430:	00007974 	.word	0x00007974

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c58 	.word	0x1fff8c58
     460:	00007974 	.word	0x00007974
     464:	1fff8c54 	.word	0x1fff8c54
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <fire_mirror_pal()>:
}



// fire mirrored from ends or center using palette
void fire_mirror_pal() {
     490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mode_change) {
     494:	4c99      	ldr	r4, [pc, #612]	; (6fc <fire_mirror_pal()+0x26c>)
     496:	7823      	ldrb	r3, [r4, #0]
}



// fire mirrored from ends or center using palette
void fire_mirror_pal() {
     498:	b084      	sub	sp, #16
	if (mode_change) {
     49a:	2b00      	cmp	r3, #0
     49c:	f040 80e3 	bne.w	666 <fire_mirror_pal()+0x1d6>
     4a0:	4b97      	ldr	r3, [pc, #604]	; (700 <fire_mirror_pal()+0x270>)
     4a2:	4a98      	ldr	r2, [pc, #608]	; (704 <fire_mirror_pal()+0x274>)
     4a4:	4898      	ldr	r0, [pc, #608]	; (708 <fire_mirror_pal()+0x278>)
     4a6:	7819      	ldrb	r1, [r3, #0]
     4a8:	7812      	ldrb	r2, [r2, #0]
     4aa:	8803      	ldrh	r3, [r0, #0]
     4ac:	f8df 9278 	ldr.w	r9, [pc, #632]	; 728 <fire_mirror_pal()+0x298>
     4b0:	4e96      	ldr	r6, [pc, #600]	; (70c <fire_mirror_pal()+0x27c>)
     4b2:	4f97      	ldr	r7, [pc, #604]	; (710 <fire_mirror_pal()+0x280>)
     4b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     4b8:	0052      	lsls	r2, r2, #1
     4ba:	fb86 4602 	smull	r4, r6, r6, r2
     4be:	17d2      	asrs	r2, r2, #31
     4c0:	ebc2 06e6 	rsb	r6, r2, r6, asr #3
     4c4:	3602      	adds	r6, #2
     4c6:	b2f6      	uxtb	r6, r6
     4c8:	f107 0e4b 	add.w	lr, r7, #75	; 0x4b
     4cc:	463d      	mov	r5, r7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     4ce:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     4d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     4d6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     4da:	3319      	adds	r3, #25
     4dc:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4de:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     4e2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
     4e6:	b2d2      	uxtb	r2, r2
     4e8:	fb12 f206 	smulbb	r2, r2, r6
     4ec:	eba4 2212 	sub.w	r2, r4, r2, lsr #8
		this_dir = random8(2);
		this_delay = 15;
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     4f0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
     4f4:	45ae      	cmp	lr, r5
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     4f6:	702a      	strb	r2, [r5, #0]
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
     4f8:	d1e9      	bne.n	4ce <fire_mirror_pal()+0x3e>
     4fa:	4d86      	ldr	r5, [pc, #536]	; (714 <fire_mirror_pal()+0x284>)
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
	}
	for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     4fc:	f8df 822c 	ldr.w	r8, [pc, #556]	; 72c <fire_mirror_pal()+0x29c>
     500:	f1a5 0249 	sub.w	r2, r5, #73	; 0x49
     504:	4694      	mov	ip, r2
     506:	f105 0e02 	add.w	lr, r5, #2
     50a:	782c      	ldrb	r4, [r5, #0]
     50c:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
     510:	eb04 0446 	add.w	r4, r4, r6, lsl #1
     514:	fb88 a604 	smull	sl, r6, r8, r4
     518:	eba6 74e4 	sub.w	r4, r6, r4, asr #31
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
	}
	for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     51c:	4565      	cmp	r5, ip
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     51e:	f80e 4d01 	strb.w	r4, [lr, #-1]!
	}
	static byte heat[NUM_LEDS / 2];
	for (int i = 0; i < NUM_LEDS / 2; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
	}
	for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     522:	d1f2      	bne.n	50a <fire_mirror_pal()+0x7a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     524:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     528:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     52c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     530:	3319      	adds	r3, #25
     532:	b29b      	uxth	r3, r3
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
	}
	if (random8() < sparking) {
     534:	eb03 2413 	add.w	r4, r3, r3, lsr #8
     538:	b2e4      	uxtb	r4, r4
     53a:	428c      	cmp	r4, r1
     53c:	8003      	strh	r3, [r0, #0]
     53e:	4872      	ldr	r0, [pc, #456]	; (708 <fire_mirror_pal()+0x278>)
     540:	d224      	bcs.n	58c <fire_mirror_pal()+0xfc>
     542:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     546:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     54a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     54e:	3319      	adds	r3, #25
     550:	b29b      	uxth	r3, r3
     552:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     556:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     55a:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
     55e:	3419      	adds	r4, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     560:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     564:	b2a4      	uxth	r4, r4
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     566:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     568:	eb04 2114 	add.w	r1, r4, r4, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     56c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     570:	b2c9      	uxtb	r1, r1
     572:	121b      	asrs	r3, r3, #8
     574:	eb01 0541 	add.w	r5, r1, r1, lsl #1
     578:	ebc1 1145 	rsb	r1, r1, r5, lsl #5
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
     57c:	5cd5      	ldrb	r5, [r2, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     57e:	8004      	strh	r4, [r0, #0]
     580:	1209      	asrs	r1, r1, #8
     582:	3960      	subs	r1, #96	; 0x60
     584:	4628      	mov	r0, r5
     586:	fa80 f051 	uqadd8	r0, r0, r1
     58a:	54d0      	strb	r0, [r2, r3]
     58c:	4e62      	ldr	r6, [pc, #392]	; (718 <fire_mirror_pal()+0x288>)
		if (this_dir) {
			leds[j]					= ColorFromPalette(current_palette, colorindex);
			leds[NUM_LEDS - 1 - j]  = ColorFromPalette(current_palette, colorindex);
		}
		else {
			leds[(NUM_LEDS / 2) - 1 - j] = ColorFromPalette(current_palette, colorindex);
     58e:	f04f 0801 	mov.w	r8, #1
     592:	f106 0ae1 	add.w	sl, r6, #225	; 0xe1
     596:	4635      	mov	r5, r6
     598:	e024      	b.n	5e4 <fire_mirror_pal()+0x154>
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
		byte colorindex = scale8(heat[j], 240);
		if (this_dir) {
			leds[j]					= ColorFromPalette(current_palette, colorindex);
     59a:	f002 fca5 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
			leds[NUM_LEDS - 1 - j]  = ColorFromPalette(current_palette, colorindex);
     59e:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
     5a4:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
     5a8:	f89d 400e 	ldrb.w	r4, [sp, #14]
     5ac:	f8cd 8000 	str.w	r8, [sp]
     5b0:	495a      	ldr	r1, [pc, #360]	; (71c <fire_mirror_pal()+0x28c>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5b2:	702b      	strb	r3, [r5, #0]
        g = rhs.g;
     5b4:	f885 e001 	strb.w	lr, [r5, #1]
        b = rhs.b;
     5b8:	70ac      	strb	r4, [r5, #2]
     5ba:	23ff      	movs	r3, #255	; 0xff
     5bc:	a803      	add	r0, sp, #12
     5be:	3503      	adds	r5, #3
     5c0:	f002 fc92 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5c4:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     5c8:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     5cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5d0:	f886 11bf 	strb.w	r1, [r6, #447]	; 0x1bf
	}
	if (random8() < sparking) {
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
     5d4:	45aa      	cmp	sl, r5
        g = rhs.g;
     5d6:	f886 21c0 	strb.w	r2, [r6, #448]	; 0x1c0
        b = rhs.b;
     5da:	f886 31c1 	strb.w	r3, [r6, #449]	; 0x1c1
     5de:	f1a6 0603 	sub.w	r6, r6, #3
     5e2:	d03d      	beq.n	660 <fire_mirror_pal()+0x1d0>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5e4:	f817 2f01 	ldrb.w	r2, [r7, #1]!
		byte colorindex = scale8(heat[j], 240);
		if (this_dir) {
     5e8:	f899 e000 	ldrb.w	lr, [r9]
			leds[j]					= ColorFromPalette(current_palette, colorindex);
     5ec:	494b      	ldr	r1, [pc, #300]	; (71c <fire_mirror_pal()+0x28c>)
     5ee:	f8cd 8000 	str.w	r8, [sp]
     5f2:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
     5f6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
     5fa:	f3c2 2407 	ubfx	r4, r2, #8, #8
     5fe:	23ff      	movs	r3, #255	; 0xff
     600:	a803      	add	r0, sp, #12
     602:	4622      	mov	r2, r4
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
		byte colorindex = scale8(heat[j], 240);
		if (this_dir) {
     604:	f1be 0f00 	cmp.w	lr, #0
     608:	d1c7      	bne.n	59a <fire_mirror_pal()+0x10a>
			leds[j]					= ColorFromPalette(current_palette, colorindex);
			leds[NUM_LEDS - 1 - j]  = ColorFromPalette(current_palette, colorindex);
		}
		else {
			leds[(NUM_LEDS / 2) - 1 - j] = ColorFromPalette(current_palette, colorindex);
     60a:	4622      	mov	r2, r4
     60c:	23ff      	movs	r3, #255	; 0xff
     60e:	4943      	ldr	r1, [pc, #268]	; (71c <fire_mirror_pal()+0x28c>)
     610:	a803      	add	r0, sp, #12
     612:	f002 fc69 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
			leds[(NUM_LEDS / 2) + j]	 = ColorFromPalette(current_palette, colorindex);
     616:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     618:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
     61c:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
     620:	f89d 400e 	ldrb.w	r4, [sp, #14]
     624:	f8cd 8000 	str.w	r8, [sp]
     628:	493c      	ldr	r1, [pc, #240]	; (71c <fire_mirror_pal()+0x28c>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     62a:	f886 30de 	strb.w	r3, [r6, #222]	; 0xde
        g = rhs.g;
     62e:	f886 e0df 	strb.w	lr, [r6, #223]	; 0xdf
     632:	23ff      	movs	r3, #255	; 0xff
        b = rhs.b;
     634:	f886 40e0 	strb.w	r4, [r6, #224]	; 0xe0
     638:	a803      	add	r0, sp, #12
     63a:	f002 fc55 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     63e:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     642:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     646:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     64a:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
     64e:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
     652:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
     656:	3503      	adds	r5, #3
	}
	if (random8() < sparking) {
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}
	for (int j = 0; j < NUM_LEDS / 2; j++) {
     658:	45aa      	cmp	sl, r5
     65a:	f1a6 0603 	sub.w	r6, r6, #3
     65e:	d1c1      	bne.n	5e4 <fire_mirror_pal()+0x154>
		else {
			leds[(NUM_LEDS / 2) - 1 - j] = ColorFromPalette(current_palette, colorindex);
			leds[(NUM_LEDS / 2) + j]	 = ColorFromPalette(current_palette, colorindex);
		}
	}
}
     660:	b004      	add	sp, #16
     662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     666:	4828      	ldr	r0, [pc, #160]	; (708 <fire_mirror_pal()+0x278>)
// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     668:	4f26      	ldr	r7, [pc, #152]	; (704 <fire_mirror_pal()+0x274>)
     66a:	8803      	ldrh	r3, [r0, #0]
		use_palette = 1;
		this_dir = random8(2);
     66c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 728 <fire_mirror_pal()+0x298>
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
     670:	4e2b      	ldr	r6, [pc, #172]	; (720 <fire_mirror_pal()+0x290>)

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     672:	4923      	ldr	r1, [pc, #140]	; (700 <fire_mirror_pal()+0x270>)
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
     674:	4d2b      	ldr	r5, [pc, #172]	; (724 <fire_mirror_pal()+0x294>)
     676:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     67a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     67e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     682:	3319      	adds	r3, #25
     684:	b29b      	uxth	r3, r3
     686:	eb03 2c43 	add.w	ip, r3, r3, lsl #9
     68a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
     68e:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
     692:	f10c 0c19 	add.w	ip, ip, #25
     696:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     69a:	eb0c 221c 	add.w	r2, ip, ip, lsr #8
     69e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6a2:	b2d2      	uxtb	r2, r2
     6a4:	fa5f fe83 	uxtb.w	lr, r3
     6a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6ac:	eb0c 234c 	add.w	r3, ip, ip, lsl #9
     6b0:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6b4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6b8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6bc:	11d2      	asrs	r2, r2, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6be:	3319      	adds	r3, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6c0:	3232      	adds	r2, #50	; 0x32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6c2:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6c4:	b2d2      	uxtb	r2, r2
     6c6:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     6ca:	703a      	strb	r2, [r7, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     6cc:	eb03 2713 	add.w	r7, r3, r3, lsr #8
		use_palette = 1;
		this_dir = random8(2);
     6d0:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     6d4:	ea4f 1eae 	mov.w	lr, lr, asr #6
     6d8:	f10e 0e32 	add.w	lr, lr, #50	; 0x32
     6dc:	f889 7000 	strb.w	r7, [r9]
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
     6e0:	2701      	movs	r7, #1
     6e2:	fa5f fe8e 	uxtb.w	lr, lr
     6e6:	7037      	strb	r7, [r6, #0]
		this_dir = random8(2);
		this_delay = 15;
     6e8:	270f      	movs	r7, #15


// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
     6ea:	2600      	movs	r6, #0
		sparking = random8(50, 110);
     6ec:	f881 e000 	strb.w	lr, [r1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     6f0:	8003      	strh	r3, [r0, #0]
     6f2:	4671      	mov	r1, lr
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
     6f4:	602f      	str	r7, [r5, #0]


// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
     6f6:	7026      	strb	r6, [r4, #0]
     6f8:	e6da      	b.n	4b0 <fire_mirror_pal()+0x20>
     6fa:	bf00      	nop
     6fc:	1fff8760 	.word	0x1fff8760
     700:	1fff875e 	.word	0x1fff875e
     704:	1fff875c 	.word	0x1fff875c
     708:	1fff876a 	.word	0x1fff876a
     70c:	1b4e81b5 	.word	0x1b4e81b5
     710:	1fff9083 	.word	0x1fff9083
     714:	1fff90cd 	.word	0x1fff90cd
     718:	1fff8db0 	.word	0x1fff8db0
     71c:	1fff90d0 	.word	0x1fff90d0
     720:	1fff8756 	.word	0x1fff8756
     724:	1fff8758 	.word	0x1fff8758
     728:	1fff920e 	.word	0x1fff920e
     72c:	55555556 	.word	0x55555556

00000730 <confetti()>:
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     730:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (mode_change) {
     732:	4835      	ldr	r0, [pc, #212]	; (808 <confetti()+0xd8>)
     734:	7803      	ldrb	r3, [r0, #0]
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     736:	b085      	sub	sp, #20
	if (mode_change) {
     738:	2b00      	cmp	r3, #0
     73a:	d061      	beq.n	800 <confetti()+0xd0>
     73c:	4d33      	ldr	r5, [pc, #204]	; (80c <confetti()+0xdc>)
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
     73e:	4f34      	ldr	r7, [pc, #208]	; (810 <confetti()+0xe0>)
     740:	882b      	ldrh	r3, [r5, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     742:	4e34      	ldr	r6, [pc, #208]	; (814 <confetti()+0xe4>)
		this_fade = random8(10, 48);
		this_delay = 20;
     744:	4c34      	ldr	r4, [pc, #208]	; (818 <confetti()+0xe8>)
     746:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     74a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     74e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     752:	3119      	adds	r1, #25
     754:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     756:	eb01 2311 	add.w	r3, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     75a:	b2db      	uxtb	r3, r3
     75c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
     760:	eb03 0242 	add.w	r2, r3, r2, lsl #1
     764:	11d2      	asrs	r2, r2, #7
     766:	320a      	adds	r2, #10
     768:	b2d2      	uxtb	r2, r2

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     76a:	f04f 0e01 	mov.w	lr, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     76e:	8029      	strh	r1, [r5, #0]
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
     770:	2300      	movs	r3, #0
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
     772:	2114      	movs	r1, #20
void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
     774:	703a      	strb	r2, [r7, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     776:	f886 e000 	strb.w	lr, [r6]
		this_fade = random8(10, 48);
		this_delay = 20;
     77a:	6021      	str	r1, [r4, #0]
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
     77c:	7003      	strb	r3, [r0, #0]
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     77e:	4c27      	ldr	r4, [pc, #156]	; (81c <confetti()+0xec>)
	int pos = random16(NUM_LEDS);
	this_index = random8();
     780:	4e27      	ldr	r6, [pc, #156]	; (820 <confetti()+0xf0>)
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     782:	4620      	mov	r0, r4
     784:	2196      	movs	r1, #150	; 0x96
     786:	f002 fb5d 	bl	2e44 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     78a:	882b      	ldrh	r3, [r5, #0]
	int pos = random16(NUM_LEDS);
	this_index = random8();
	leds[pos] += ColorFromPalette(current_palette, this_index);
     78c:	4925      	ldr	r1, [pc, #148]	; (824 <confetti()+0xf4>)
     78e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     792:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     796:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     79a:	3319      	adds	r3, #25
     79c:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     79e:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     7a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     7a6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     7aa:	3019      	adds	r0, #25
     7ac:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     7ae:	eb00 2e10 	add.w	lr, r0, r0, lsr #8
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = random16(NUM_LEDS);
     7b2:	2796      	movs	r7, #150	; 0x96
     7b4:	fa5f fe8e 	uxtb.w	lr, lr
     7b8:	fb07 f303 	mul.w	r3, r7, r3
	this_index = random8();
	leds[pos] += ColorFromPalette(current_palette, this_index);
     7bc:	2201      	movs	r2, #1
     7be:	9200      	str	r2, [sp, #0]
		this_fade = random8(10, 48);
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = random16(NUM_LEDS);
     7c0:	0c1f      	lsrs	r7, r3, #16
	this_index = random8();
	leds[pos] += ColorFromPalette(current_palette, this_index);
     7c2:	4672      	mov	r2, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     7c4:	8028      	strh	r0, [r5, #0]
     7c6:	23ff      	movs	r3, #255	; 0xff
     7c8:	a803      	add	r0, sp, #12
		this_delay = 20;
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = random16(NUM_LEDS);
	this_index = random8();
     7ca:	f886 e000 	strb.w	lr, [r6]
	leds[pos] += ColorFromPalette(current_palette, this_index);
     7ce:	f002 fb8b 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     7d2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
     7d6:	18e1      	adds	r1, r4, r3
     7d8:	5ce2      	ldrb	r2, [r4, r3]
     7da:	f89d 000c 	ldrb.w	r0, [sp, #12]
     7de:	fa82 f250 	uqadd8	r2, r2, r0
     7e2:	54e2      	strb	r2, [r4, r3]
     7e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
     7e8:	784a      	ldrb	r2, [r1, #1]
     7ea:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     7ee:	704a      	strb	r2, [r1, #1]
     7f0:	788b      	ldrb	r3, [r1, #2]
     7f2:	f89d 200e 	ldrb.w	r2, [sp, #14]
     7f6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
     7fa:	708b      	strb	r3, [r1, #2]
}
     7fc:	b005      	add	sp, #20
     7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     800:	4b03      	ldr	r3, [pc, #12]	; (810 <confetti()+0xe0>)
     802:	4d02      	ldr	r5, [pc, #8]	; (80c <confetti()+0xdc>)
     804:	781a      	ldrb	r2, [r3, #0]
     806:	e7ba      	b.n	77e <confetti()+0x4e>
     808:	1fff8760 	.word	0x1fff8760
     80c:	1fff876a 	.word	0x1fff876a
     810:	1fff8754 	.word	0x1fff8754
     814:	1fff8756 	.word	0x1fff8756
     818:	1fff8758 	.word	0x1fff8758
     81c:	1fff8db0 	.word	0x1fff8db0
     820:	1fff9209 	.word	0x1fff9209
     824:	1fff90d0 	.word	0x1fff90d0

00000828 <fire()>:
#ifndef FIRE_H
#define FIRE_H



void fire() {
     828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (mode_change) {
     82c:	4961      	ldr	r1, [pc, #388]	; (9b4 <fire()+0x18c>)
     82e:	780b      	ldrb	r3, [r1, #0]
#ifndef FIRE_H
#define FIRE_H



void fire() {
     830:	b083      	sub	sp, #12
	if (mode_change) {
     832:	2b00      	cmp	r3, #0
     834:	f040 8087 	bne.w	946 <fire()+0x11e>
     838:	4b5f      	ldr	r3, [pc, #380]	; (9b8 <fire()+0x190>)
     83a:	4a60      	ldr	r2, [pc, #384]	; (9bc <fire()+0x194>)
     83c:	4d60      	ldr	r5, [pc, #384]	; (9c0 <fire()+0x198>)
     83e:	7818      	ldrb	r0, [r3, #0]
     840:	7812      	ldrb	r2, [r2, #0]
     842:	882b      	ldrh	r3, [r5, #0]
     844:	4f5f      	ldr	r7, [pc, #380]	; (9c4 <fire()+0x19c>)
     846:	4c60      	ldr	r4, [pc, #384]	; (9c8 <fire()+0x1a0>)
     848:	fb87 1702 	smull	r1, r7, r7, r2
     84c:	4417      	add	r7, r2
     84e:	10ff      	asrs	r7, r7, #3
     850:	3702      	adds	r7, #2
     852:	b2ff      	uxtb	r7, r7
     854:	f104 0e96 	add.w	lr, r4, #150	; 0x96
     858:	4626      	mov	r6, r4
     85a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     85e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     862:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     866:	3319      	adds	r3, #25
     868:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     86a:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     86e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     872:	b2d2      	uxtb	r2, r2
     874:	fb12 f207 	smulbb	r2, r2, r7
     878:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
	// Array of temperature readings at each simulation cell
	static byte heat[NUM_LEDS];

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
     87c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	}
	// Array of temperature readings at each simulation cell
	static byte heat[NUM_LEDS];

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
     880:	45b6      	cmp	lr, r6
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
     882:	7032      	strb	r2, [r6, #0]
	}
	// Array of temperature readings at each simulation cell
	static byte heat[NUM_LEDS];

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
     884:	d1e9      	bne.n	85a <fire()+0x32>
     886:	4e51      	ldr	r6, [pc, #324]	; (9cc <fire()+0x1a4>)
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     888:	f8df 8150 	ldr.w	r8, [pc, #336]	; 9dc <fire()+0x1b4>
     88c:	f1a6 0292 	sub.w	r2, r6, #146	; 0x92
     890:	4694      	mov	ip, r2
     892:	f106 0e02 	add.w	lr, r6, #2
     896:	7831      	ldrb	r1, [r6, #0]
     898:	f816 7d01 	ldrb.w	r7, [r6, #-1]!
     89c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
     8a0:	fb88 9701 	smull	r9, r7, r8, r1
     8a4:	eba7 71e1 	sub.w	r1, r7, r1, asr #31
	for (int i = 0; i < NUM_LEDS; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
     8a8:	4566      	cmp	r6, ip
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     8aa:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	for (int i = 0; i < NUM_LEDS; i++) {
		heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
     8ae:	d1f2      	bne.n	896 <fire()+0x6e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     8b0:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     8b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     8b8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     8bc:	3319      	adds	r3, #25
     8be:	b29b      	uxth	r3, r3
		heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < sparking) {
     8c0:	eb03 2113 	add.w	r1, r3, r3, lsr #8
     8c4:	b2c9      	uxtb	r1, r1
     8c6:	4281      	cmp	r1, r0
     8c8:	802b      	strh	r3, [r5, #0]
     8ca:	4d3d      	ldr	r5, [pc, #244]	; (9c0 <fire()+0x198>)
     8cc:	d224      	bcs.n	918 <fire()+0xf0>
     8ce:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     8d2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     8d6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     8da:	3319      	adds	r3, #25
     8dc:	b29b      	uxth	r3, r3
     8de:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     8e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     8e6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     8ea:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     8ec:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     8f0:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     8f2:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     8f4:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     8f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     8fc:	b2c9      	uxtb	r1, r1
     8fe:	121b      	asrs	r3, r3, #8
     900:	eb01 0641 	add.w	r6, r1, r1, lsl #1
     904:	ebc1 1146 	rsb	r1, r1, r6, lsl #5
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
     908:	5cd6      	ldrb	r6, [r2, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     90a:	8028      	strh	r0, [r5, #0]
     90c:	1209      	asrs	r1, r1, #8
     90e:	3960      	subs	r1, #96	; 0x60
     910:	4630      	mov	r0, r6
     912:	fa80 f051 	uqadd8	r0, r0, r1
     916:	54d0      	strb	r0, [r2, r3]
     918:	4d2d      	ldr	r5, [pc, #180]	; (9d0 <fire()+0x1a8>)
     91a:	f505 76e1 	add.w	r6, r5, #450	; 0x1c2
	}

	// Step 4.  Map from heat cells to LED colors
	for (int j = 0; j < NUM_LEDS; j++) {
		leds[j] = HeatColor(heat[j]);
     91e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     922:	a801      	add	r0, sp, #4
     924:	f002 fabe 	bl	2ea4 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     928:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
     92c:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     930:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     934:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
     936:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
     938:	70ab      	strb	r3, [r5, #2]
     93a:	3503      	adds	r5, #3
		int y = random8(7);
		heat[y] = qadd8(heat[y], random8(160, 255));
	}

	// Step 4.  Map from heat cells to LED colors
	for (int j = 0; j < NUM_LEDS; j++) {
     93c:	42ae      	cmp	r6, r5
     93e:	d1ee      	bne.n	91e <fire()+0xf6>
		leds[j] = HeatColor(heat[j]);
	}
}
     940:	b003      	add	sp, #12
     942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     946:	4d1e      	ldr	r5, [pc, #120]	; (9c0 <fire()+0x198>)

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     948:	4f1c      	ldr	r7, [pc, #112]	; (9bc <fire()+0x194>)
     94a:	882b      	ldrh	r3, [r5, #0]
		use_palette = 0;
     94c:	4e21      	ldr	r6, [pc, #132]	; (9d4 <fire()+0x1ac>)


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     94e:	481a      	ldr	r0, [pc, #104]	; (9b8 <fire()+0x190>)
		cooling = random8(50, 120);
		use_palette = 0;
		this_delay = 15;
     950:	4c21      	ldr	r4, [pc, #132]	; (9d8 <fire()+0x1b0>)
     952:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     956:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     95a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     95e:	3219      	adds	r2, #25
     960:	b292      	uxth	r2, r2
     962:	eb02 2342 	add.w	r3, r2, r2, lsl #9
     966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     96a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     96e:	3319      	adds	r3, #25
     970:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     972:	eb02 2e12 	add.w	lr, r2, r2, lsr #8
     976:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     97a:	b2d2      	uxtb	r2, r2
     97c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     980:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
     984:	fa5f fe8e 	uxtb.w	lr, lr
     988:	11d2      	asrs	r2, r2, #7
     98a:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
     98e:	3232      	adds	r2, #50	; 0x32
     990:	ea4f 1eae 	mov.w	lr, lr, asr #6
     994:	b2d2      	uxtb	r2, r2
     996:	f10e 0e32 	add.w	lr, lr, #50	; 0x32

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     99a:	703a      	strb	r2, [r7, #0]



void fire() {
	if (mode_change) {
		mode_change = 0;
     99c:	2700      	movs	r7, #0
     99e:	fa5f fe8e 	uxtb.w	lr, lr
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
     9a2:	7037      	strb	r7, [r6, #0]
		this_delay = 15;
     9a4:	260f      	movs	r6, #15


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     9a6:	f880 e000 	strb.w	lr, [r0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     9aa:	802b      	strh	r3, [r5, #0]
     9ac:	4670      	mov	r0, lr



void fire() {
	if (mode_change) {
		mode_change = 0;
     9ae:	700f      	strb	r7, [r1, #0]
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_delay = 15;
     9b0:	6026      	str	r6, [r4, #0]
     9b2:	e747      	b.n	844 <fire()+0x1c>
     9b4:	1fff8760 	.word	0x1fff8760
     9b8:	1fff875e 	.word	0x1fff875e
     9bc:	1fff875c 	.word	0x1fff875c
     9c0:	1fff876a 	.word	0x1fff876a
     9c4:	88888889 	.word	0x88888889
     9c8:	1fff92af 	.word	0x1fff92af
     9cc:	1fff9342 	.word	0x1fff9342
     9d0:	1fff8db0 	.word	0x1fff8db0
     9d4:	1fff8756 	.word	0x1fff8756
     9d8:	1fff8758 	.word	0x1fff8758
     9dc:	55555556 	.word	0x55555556

000009e0 <fire_mirror()>:
}



// fire mirrored from ends or center
void fire_mirror() {
     9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mode_change) {
     9e4:	4c92      	ldr	r4, [pc, #584]	; (c30 <fire_mirror()+0x250>)
     9e6:	7823      	ldrb	r3, [r4, #0]
}



// fire mirrored from ends or center
void fire_mirror() {
     9e8:	b082      	sub	sp, #8
	if (mode_change) {
     9ea:	2b00      	cmp	r3, #0
     9ec:	f040 80d2 	bne.w	b94 <fire_mirror()+0x1b4>
     9f0:	4990      	ldr	r1, [pc, #576]	; (c34 <fire_mirror()+0x254>)
     9f2:	4b91      	ldr	r3, [pc, #580]	; (c38 <fire_mirror()+0x258>)
     9f4:	4a91      	ldr	r2, [pc, #580]	; (c3c <fire_mirror()+0x25c>)
     9f6:	4d92      	ldr	r5, [pc, #584]	; (c40 <fire_mirror()+0x260>)
     9f8:	7808      	ldrb	r0, [r1, #0]
     9fa:	7812      	ldrb	r2, [r2, #0]
     9fc:	7819      	ldrb	r1, [r3, #0]
     9fe:	882b      	ldrh	r3, [r5, #0]
     a00:	4e90      	ldr	r6, [pc, #576]	; (c44 <fire_mirror()+0x264>)
     a02:	4c91      	ldr	r4, [pc, #580]	; (c48 <fire_mirror()+0x268>)
     a04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     a08:	0052      	lsls	r2, r2, #1
     a0a:	fb86 6e02 	smull	r6, lr, r6, r2
     a0e:	17d2      	asrs	r2, r2, #31
     a10:	ebc2 0eee 	rsb	lr, r2, lr, asr #3
     a14:	f10e 0e02 	add.w	lr, lr, #2
     a18:	fa5f fe8e 	uxtb.w	lr, lr
     a1c:	f104 0c4b 	add.w	ip, r4, #75	; 0x4b
     a20:	4627      	mov	r7, r4
     a22:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     a26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     a2a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     a2e:	3319      	adds	r3, #25
     a30:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     a32:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     a36:	f817 6f01 	ldrb.w	r6, [r7, #1]!
     a3a:	b2d2      	uxtb	r2, r2
     a3c:	fb12 f20e 	smulbb	r2, r2, lr
     a40:	eba6 2212 	sub.w	r2, r6, r2, lsr #8
		this_dir = random8(2);
		this_delay = 15;
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     a44:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
     a48:	45bc      	cmp	ip, r7
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
     a4a:	703a      	strb	r2, [r7, #0]
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
     a4c:	d1e9      	bne.n	a22 <fire_mirror()+0x42>
     a4e:	4f7f      	ldr	r7, [pc, #508]	; (c4c <fire_mirror()+0x26c>)
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     a50:	f8df 9208 	ldr.w	r9, [pc, #520]	; c5c <fire_mirror()+0x27c>
     a54:	f1a7 0249 	sub.w	r2, r7, #73	; 0x49
     a58:	4690      	mov	r8, r2
     a5a:	f107 0c02 	add.w	ip, r7, #2
     a5e:	783e      	ldrb	r6, [r7, #0]
     a60:	f817 ed01 	ldrb.w	lr, [r7, #-1]!
     a64:	eb06 064e 	add.w	r6, r6, lr, lsl #1
     a68:	fb89 ae06 	smull	sl, lr, r9, r6
     a6c:	ebae 76e6 	sub.w	r6, lr, r6, asr #31
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     a70:	45b8      	cmp	r8, r7
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     a72:	f80c 6d01 	strb.w	r6, [ip, #-1]!
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
     a76:	d1f2      	bne.n	a5e <fire_mirror()+0x7e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a78:	eb03 2643 	add.w	r6, r3, r3, lsl #9
     a7c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     a80:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     a84:	3319      	adds	r3, #25
     a86:	b29b      	uxth	r3, r3
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
		}
		if (random8() < sparking) {
     a88:	eb03 2613 	add.w	r6, r3, r3, lsr #8
     a8c:	b2f6      	uxtb	r6, r6
     a8e:	4286      	cmp	r6, r0
     a90:	802b      	strh	r3, [r5, #0]
     a92:	4d6b      	ldr	r5, [pc, #428]	; (c40 <fire_mirror()+0x260>)
     a94:	d224      	bcs.n	ae0 <fire_mirror()+0x100>
     a96:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     a9a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     a9e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     aa2:	3319      	adds	r3, #25
     aa4:	b29b      	uxth	r3, r3
     aa6:	eb03 2643 	add.w	r6, r3, r3, lsl #9
     aaa:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     aae:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
     ab2:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     ab4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ab8:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     aba:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     abc:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     ac0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     ac4:	b2c0      	uxtb	r0, r0
     ac6:	121b      	asrs	r3, r3, #8
     ac8:	eb00 0740 	add.w	r7, r0, r0, lsl #1
     acc:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
     ad0:	5cd7      	ldrb	r7, [r2, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ad2:	802e      	strh	r6, [r5, #0]
     ad4:	1200      	asrs	r0, r0, #8
     ad6:	3860      	subs	r0, #96	; 0x60
     ad8:	463d      	mov	r5, r7
     ada:	fa85 f550 	uqadd8	r5, r5, r0
     ade:	54d5      	strb	r5, [r2, r3]
		}
		if (this_dir) {
     ae0:	b351      	cbz	r1, b38 <fire_mirror()+0x158>
     ae2:	4e5b      	ldr	r6, [pc, #364]	; (c50 <fire_mirror()+0x270>)
     ae4:	af01      	add	r7, sp, #4
     ae6:	f106 08e1 	add.w	r8, r6, #225	; 0xe1
     aea:	4635      	mov	r5, r6
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				leds[j] = HeatColor(heat[j]);
     aec:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     af0:	4638      	mov	r0, r7
     af2:	f002 f9d7 	bl	2ea4 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     af6:	f89d 0004 	ldrb.w	r0, [sp, #4]
        g = rhs.g;
     afa:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     afe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b02:	7028      	strb	r0, [r5, #0]
        g = rhs.g;
     b04:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
     b06:	70ab      	strb	r3, [r5, #2]
				leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
     b08:	7821      	ldrb	r1, [r4, #0]
     b0a:	4638      	mov	r0, r7
     b0c:	3503      	adds	r5, #3
     b0e:	f002 f9c9 	bl	2ea4 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b12:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
     b16:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b1e:	f886 11bf 	strb.w	r1, [r6, #447]	; 0x1bf
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
     b22:	45a8      	cmp	r8, r5
        g = rhs.g;
     b24:	f886 21c0 	strb.w	r2, [r6, #448]	; 0x1c0
        b = rhs.b;
     b28:	f886 31c1 	strb.w	r3, [r6, #449]	; 0x1c1
     b2c:	f1a6 0603 	sub.w	r6, r6, #3
     b30:	d1dc      	bne.n	aec <fire_mirror()+0x10c>
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
				leds[(NUM_LEDS / 2) + j]	 = HeatColor(heat[j]);
			}
		}
}
     b32:	b002      	add	sp, #8
     b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b38:	4d45      	ldr	r5, [pc, #276]	; (c50 <fire_mirror()+0x270>)
     b3a:	af01      	add	r7, sp, #4
     b3c:	f1a5 08e1 	sub.w	r8, r5, #225	; 0xe1
		}
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
     b40:	462e      	mov	r6, r5
				leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
     b42:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     b46:	4638      	mov	r0, r7
     b48:	f002 f9ac 	bl	2ea4 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b4c:	f89d 0004 	ldrb.w	r0, [sp, #4]
        g = rhs.g;
     b50:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b54:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b58:	f885 00de 	strb.w	r0, [r5, #222]	; 0xde
        g = rhs.g;
     b5c:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
     b60:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
				leds[(NUM_LEDS / 2) + j]	 = HeatColor(heat[j]);
     b64:	7821      	ldrb	r1, [r4, #0]
     b66:	4638      	mov	r0, r7
     b68:	3d03      	subs	r5, #3
     b6a:	f002 f99b 	bl	2ea4 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b6e:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
     b72:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
     b76:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b7a:	f886 10e1 	strb.w	r1, [r6, #225]	; 0xe1
				leds[j] = HeatColor(heat[j]);
				leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
     b7e:	45a8      	cmp	r8, r5
        g = rhs.g;
     b80:	f886 20e2 	strb.w	r2, [r6, #226]	; 0xe2
        b = rhs.b;
     b84:	f886 30e3 	strb.w	r3, [r6, #227]	; 0xe3
     b88:	f106 0603 	add.w	r6, r6, #3
     b8c:	d1d9      	bne.n	b42 <fire_mirror()+0x162>
				leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
				leds[(NUM_LEDS / 2) + j]	 = HeatColor(heat[j]);
			}
		}
}
     b8e:	b002      	add	sp, #8
     b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b94:	4d2a      	ldr	r5, [pc, #168]	; (c40 <fire_mirror()+0x260>)

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     b96:	4827      	ldr	r0, [pc, #156]	; (c34 <fire_mirror()+0x254>)
     b98:	882b      	ldrh	r3, [r5, #0]
		cooling = random8(50, 120);
     b9a:	f8df e0a0 	ldr.w	lr, [pc, #160]	; c3c <fire_mirror()+0x25c>
		use_palette = 0;
     b9e:	4f2d      	ldr	r7, [pc, #180]	; (c54 <fire_mirror()+0x274>)
		this_dir = random8(2);
     ba0:	4925      	ldr	r1, [pc, #148]	; (c38 <fire_mirror()+0x258>)
		this_delay = 15;
     ba2:	4e2d      	ldr	r6, [pc, #180]	; (c58 <fire_mirror()+0x278>)
     ba4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     ba8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     bac:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     bb0:	3319      	adds	r3, #25
     bb2:	b29b      	uxth	r3, r3
     bb4:	eb03 2843 	add.w	r8, r3, r3, lsl #9
     bb8:	eb03 0888 	add.w	r8, r3, r8, lsl #2
     bbc:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
     bc0:	f108 0819 	add.w	r8, r8, #25
     bc4:	fa1f f888 	uxth.w	r8, r8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     bc8:	eb08 2218 	add.w	r2, r8, r8, lsr #8
     bcc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bd0:	b2d2      	uxtb	r2, r2
     bd2:	fa5f fc83 	uxtb.w	ip, r3
     bd6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     bda:	eb08 2348 	add.w	r3, r8, r8, lsl #9
     bde:	eb08 0383 	add.w	r3, r8, r3, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     be2:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
     be6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     bea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bee:	ea4f 1cac 	mov.w	ip, ip, asr #6
     bf2:	11d2      	asrs	r2, r2, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     bf4:	3319      	adds	r3, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     bf6:	f10c 0c32 	add.w	ip, ip, #50	; 0x32
     bfa:	3232      	adds	r2, #50	; 0x32
     bfc:	fa5f fc8c 	uxtb.w	ip, ip
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c00:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     c02:	b2d2      	uxtb	r2, r2

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     c04:	f880 c000 	strb.w	ip, [r0]
		cooling = random8(50, 120);
     c08:	f88e 2000 	strb.w	r2, [lr]
     c0c:	4660      	mov	r0, ip
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     c0e:	eb03 2e13 	add.w	lr, r3, r3, lsr #8


// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
     c12:	f04f 0c00 	mov.w	ip, #0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     c16:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
     c1a:	f887 c000 	strb.w	ip, [r7]
		this_dir = random8(2);
		this_delay = 15;
     c1e:	270f      	movs	r7, #15
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
     c20:	f881 e000 	strb.w	lr, [r1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c24:	802b      	strh	r3, [r5, #0]
     c26:	4671      	mov	r1, lr


// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
     c28:	f884 c000 	strb.w	ip, [r4]
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
     c2c:	6037      	str	r7, [r6, #0]
     c2e:	e6e7      	b.n	a00 <fire_mirror()+0x20>
     c30:	1fff8760 	.word	0x1fff8760
     c34:	1fff875e 	.word	0x1fff875e
     c38:	1fff920e 	.word	0x1fff920e
     c3c:	1fff875c 	.word	0x1fff875c
     c40:	1fff876a 	.word	0x1fff876a
     c44:	1b4e81b5 	.word	0x1b4e81b5
     c48:	1fff9217 	.word	0x1fff9217
     c4c:	1fff9261 	.word	0x1fff9261
     c50:	1fff8db0 	.word	0x1fff8db0
     c54:	1fff8756 	.word	0x1fff8756
     c58:	1fff8758 	.word	0x1fff8758
     c5c:	55555556 	.word	0x55555556

00000c60 <rainbow_march()>:
 * this_dir
 */


void rainbow_march() {
	if (mode_change) {
     c60:	482e      	ldr	r0, [pc, #184]	; (d1c <rainbow_march()+0xbc>)
     c62:	7803      	ldrb	r3, [r0, #0]
 * this_rot
 * this_dir
 */


void rainbow_march() {
     c64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (mode_change) {
     c66:	b993      	cbnz	r3, c8e <rainbow_march()+0x2e>
     c68:	492d      	ldr	r1, [pc, #180]	; (d20 <rainbow_march()+0xc0>)
     c6a:	4a2e      	ldr	r2, [pc, #184]	; (d24 <rainbow_march()+0xc4>)
     c6c:	4b2e      	ldr	r3, [pc, #184]	; (d28 <rainbow_march()+0xc8>)
     c6e:	7809      	ldrb	r1, [r1, #0]
     c70:	7812      	ldrb	r2, [r2, #0]
     c72:	781b      	ldrb	r3, [r3, #0]
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
     c74:	482d      	ldr	r0, [pc, #180]	; (d2c <rainbow_march()+0xcc>)
     c76:	2900      	cmp	r1, #0
     c78:	d046      	beq.n	d08 <rainbow_march()+0xa8>
     c7a:	7801      	ldrb	r1, [r0, #0]
     c7c:	1a8a      	subs	r2, r1, r2
     c7e:	b2d2      	uxtb	r2, r2
     c80:	7002      	strb	r2, [r0, #0]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
     c82:	2196      	movs	r1, #150	; 0x96
     c84:	482a      	ldr	r0, [pc, #168]	; (d30 <rainbow_march()+0xd0>)
}
     c86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
     c8a:	f002 b829 	b.w	2ce0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
     c8e:	4c29      	ldr	r4, [pc, #164]	; (d34 <rainbow_march()+0xd4>)
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
     c90:	4f25      	ldr	r7, [pc, #148]	; (d28 <rainbow_march()+0xc8>)
     c92:	8823      	ldrh	r3, [r4, #0]

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
     c94:	4d22      	ldr	r5, [pc, #136]	; (d20 <rainbow_march()+0xc0>)
		this_rot = random8(1, 5);
     c96:	4e23      	ldr	r6, [pc, #140]	; (d24 <rainbow_march()+0xc4>)
     c98:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     c9c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     ca0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     ca4:	3119      	adds	r1, #25
     ca6:	b289      	uxth	r1, r1
     ca8:	eb01 2341 	add.w	r3, r1, r1, lsl #9
     cac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     cb0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     cb4:	3319      	adds	r3, #25
     cb6:	b29b      	uxth	r3, r3
     cb8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     cbc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     cc0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     cc4:	3219      	adds	r2, #25
     cc6:	fa1f fe82 	uxth.w	lr, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     cca:	eb03 2213 	add.w	r2, r3, r3, lsr #8
     cce:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cd2:	f3c3 1342 	ubfx	r3, r3, #5, #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     cd6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cda:	3301      	adds	r3, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     cdc:	f8a4 e000 	strh.w	lr, [r4]
		this_diff = random8(1, 9);
     ce0:	703b      	strb	r3, [r7, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     ce2:	f3c2 1281 	ubfx	r2, r2, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     ce6:	f3c1 11c0 	ubfx	r1, r1, #7, #1


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
     cea:	f8df e050 	ldr.w	lr, [pc, #80]	; d3c <rainbow_march()+0xdc>
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
     cee:	4f12      	ldr	r7, [pc, #72]	; (d38 <rainbow_march()+0xd8>)

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
     cf0:	7029      	strb	r1, [r5, #0]
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
     cf2:	2400      	movs	r4, #0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cf4:	3201      	adds	r2, #1
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
     cf6:	250a      	movs	r5, #10
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
     cf8:	7004      	strb	r4, [r0, #0]
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
     cfa:	7032      	strb	r2, [r6, #0]


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
     cfc:	f88e 4000 	strb.w	r4, [lr]
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
     d00:	603d      	str	r5, [r7, #0]
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
     d02:	480a      	ldr	r0, [pc, #40]	; (d2c <rainbow_march()+0xcc>)
     d04:	2900      	cmp	r1, #0
     d06:	d1b8      	bne.n	c7a <rainbow_march()+0x1a>
     d08:	7801      	ldrb	r1, [r0, #0]
     d0a:	440a      	add	r2, r1
     d0c:	b2d2      	uxtb	r2, r2
     d0e:	7002      	strb	r2, [r0, #0]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
     d10:	2196      	movs	r1, #150	; 0x96
     d12:	4807      	ldr	r0, [pc, #28]	; (d30 <rainbow_march()+0xd0>)
}
     d14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
     d18:	f001 bfe2 	b.w	2ce0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
     d1c:	1fff8760 	.word	0x1fff8760
     d20:	1fff920e 	.word	0x1fff920e
     d24:	1fff8761 	.word	0x1fff8761
     d28:	1fff8755 	.word	0x1fff8755
     d2c:	1fff9209 	.word	0x1fff9209
     d30:	1fff8db0 	.word	0x1fff8db0
     d34:	1fff876a 	.word	0x1fff876a
     d38:	1fff8758 	.word	0x1fff8758
     d3c:	1fff8756 	.word	0x1fff8756

00000d40 <rainbow_split()>:
}

void rainbow_split(){
  if (mode_change){
     d40:	4933      	ldr	r1, [pc, #204]	; (e10 <rainbow_split()+0xd0>)
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;  // I could use signed math, but 'this_dir' works with other routines.
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
}

void rainbow_split(){
     d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (mode_change){
     d44:	780b      	ldrb	r3, [r1, #0]
     d46:	bb43      	cbnz	r3, d9a <rainbow_split()+0x5a>
     d48:	4932      	ldr	r1, [pc, #200]	; (e14 <rainbow_split()+0xd4>)
     d4a:	4a33      	ldr	r2, [pc, #204]	; (e18 <rainbow_split()+0xd8>)
     d4c:	4b33      	ldr	r3, [pc, #204]	; (e1c <rainbow_split()+0xdc>)
     d4e:	7808      	ldrb	r0, [r1, #0]
     d50:	7812      	ldrb	r2, [r2, #0]
     d52:	781b      	ldrb	r3, [r3, #0]
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
    this_delay = 15;
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     d54:	b9d8      	cbnz	r0, d8e <rainbow_split()+0x4e>
     d56:	4832      	ldr	r0, [pc, #200]	; (e20 <rainbow_split()+0xe0>)
     d58:	7801      	ldrb	r1, [r0, #0]
     d5a:	440a      	add	r2, r1
     d5c:	b2d2      	uxtb	r2, r2
     d5e:	7002      	strb	r2, [r0, #0]
  fill_rainbow(leds, NUM_LEDS/2, this_index, this_diff); // 0 - 71
     d60:	4830      	ldr	r0, [pc, #192]	; (e24 <rainbow_split()+0xe4>)
     d62:	214b      	movs	r1, #75	; 0x4b
     d64:	f001 ffbc 	bl	2ce0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
     d68:	4b2e      	ldr	r3, [pc, #184]	; (e24 <rainbow_split()+0xe4>)
     d6a:	f103 00e1 	add.w	r0, r3, #225	; 0xe1
     d6e:	461a      	mov	r2, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d70:	7819      	ldrb	r1, [r3, #0]
     d72:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
     d76:	7859      	ldrb	r1, [r3, #1]
     d78:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
     d7c:	7899      	ldrb	r1, [r3, #2]
     d7e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
     d82:	3303      	adds	r3, #3
  for (int i = 0; i < NUM_LEDS/2; i++){
     d84:	4283      	cmp	r3, r0
     d86:	f1a2 0203 	sub.w	r2, r2, #3
     d8a:	d1f1      	bne.n	d70 <rainbow_split()+0x30>
    leds[NUM_LEDS - 1 - i] = leds[i];
  }
    
}
     d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
    this_delay = 15;
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     d8e:	4824      	ldr	r0, [pc, #144]	; (e20 <rainbow_split()+0xe0>)
     d90:	7801      	ldrb	r1, [r0, #0]
     d92:	1a8a      	subs	r2, r1, r2
     d94:	b2d2      	uxtb	r2, r2
     d96:	7002      	strb	r2, [r0, #0]
     d98:	e7e2      	b.n	d60 <rainbow_split()+0x20>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     d9a:	4823      	ldr	r0, [pc, #140]	; (e28 <rainbow_split()+0xe8>)
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
     d9c:	4e1f      	ldr	r6, [pc, #124]	; (e1c <rainbow_split()+0xdc>)
     d9e:	8803      	ldrh	r3, [r0, #0]
void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
     da0:	4d1d      	ldr	r5, [pc, #116]	; (e18 <rainbow_split()+0xd8>)

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
     da2:	4c1c      	ldr	r4, [pc, #112]	; (e14 <rainbow_split()+0xd4>)
     da4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     da8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     dac:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     db0:	3319      	adds	r3, #25
     db2:	b29b      	uxth	r3, r3
     db4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     db8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     dbc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     dc0:	3219      	adds	r2, #25
     dc2:	b292      	uxth	r2, r2
     dc4:	eb02 2742 	add.w	r7, r2, r2, lsl #9
     dc8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
     dcc:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
     dd0:	3719      	adds	r7, #25
     dd2:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     dd4:	eb07 2c17 	add.w	ip, r7, r7, lsr #8
     dd8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
     ddc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     de0:	f3cc 1c42 	ubfx	ip, ip, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     de4:	f3c3 1ec0 	ubfx	lr, r3, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     de8:	f3c2 1281 	ubfx	r2, r2, #6, #2
     dec:	f10c 0301 	add.w	r3, ip, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     df0:	8007      	strh	r7, [r0, #0]
    this_rot = random8(1,5);
    this_diff = random8(1,9);
     df2:	7033      	strb	r3, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     df4:	3201      	adds	r2, #1
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
     df6:	4f0d      	ldr	r7, [pc, #52]	; (e2c <rainbow_split()+0xec>)
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
    this_delay = 15;
     df8:	4e0d      	ldr	r6, [pc, #52]	; (e30 <rainbow_split()+0xf0>)
void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
     dfa:	702a      	strb	r2, [r5, #0]

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
     dfc:	f884 e000 	strb.w	lr, [r4]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
     e00:	2500      	movs	r5, #0
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
    this_delay = 15;
     e02:	240f      	movs	r4, #15
     e04:	4670      	mov	r0, lr
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
     e06:	703d      	strb	r5, [r7, #0]
	fill_rainbow(leds, NUM_LEDS, this_index, this_diff);               // I don't change deltahue on the fly as it's too fast near the end of the strip.
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
     e08:	700d      	strb	r5, [r1, #0]
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
    this_delay = 15;
     e0a:	6034      	str	r4, [r6, #0]
     e0c:	e7a2      	b.n	d54 <rainbow_split()+0x14>
     e0e:	bf00      	nop
     e10:	1fff8760 	.word	0x1fff8760
     e14:	1fff920e 	.word	0x1fff920e
     e18:	1fff8761 	.word	0x1fff8761
     e1c:	1fff8755 	.word	0x1fff8755
     e20:	1fff9209 	.word	0x1fff9209
     e24:	1fff8db0 	.word	0x1fff8db0
     e28:	1fff876a 	.word	0x1fff876a
     e2c:	1fff8756 	.word	0x1fff8756
     e30:	1fff8758 	.word	0x1fff8758

00000e34 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     e34:	b508      	push	{r3, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     e36:	2101      	movs	r1, #1
     e38:	2007      	movs	r0, #7
     e3a:	f002 fe17 	bl	3a6c <pinMode>
     e3e:	2101      	movs	r1, #1
     e40:	200e      	movs	r0, #14
     e42:	f002 fe13 	bl	3a6c <pinMode>
		// set the pins to output
		FastPin<_DATA_PIN>::setOutput();
		FastPin<_CLOCK_PIN>::setOutput();

		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
     e46:	4a0b      	ldr	r2, [pc, #44]	; (e74 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x40>)
     e48:	6813      	ldr	r3, [r2, #0]
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
     e4a:	04d9      	lsls	r1, r3, #19
     e4c:	d405      	bmi.n	e5a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x26>
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
     e4e:	490a      	ldr	r1, [pc, #40]	; (e78 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
     e50:	480a      	ldr	r0, [pc, #40]	; (e7c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x48>)
		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
     e52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     e56:	6013      	str	r3, [r2, #0]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
     e58:	60c8      	str	r0, [r1, #12]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
			}
		}

		// Configure SPI as the master and enable
		SPIX.MCR |= SPI_MCR_MSTR; // | SPI_MCR_CONT_SCKE);
     e5a:	4a07      	ldr	r2, [pc, #28]	; (e78 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
     e5c:	6813      	ldr	r3, [r2, #0]
     e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     e62:	6013      	str	r3, [r2, #0]
		SPIX.MCR &= ~(SPI_MCR_MDIS | SPI_MCR_HALT);
     e64:	6813      	ldr	r3, [r2, #0]
     e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     e6a:	f023 0301 	bic.w	r3, r3, #1
     e6e:	6013      	str	r3, [r2, #0]
     e70:	bd08      	pop	{r3, pc}
     e72:	bf00      	nop
     e74:	4004803c 	.word	0x4004803c
     e78:	4002c000 	.word	0x4002c000
     e7c:	38010001 	.word	0x38010001

00000e80 <juggle_pal_onedir()>:
	}
} // juggle_pal()



void juggle_pal_onedir() {
     e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     e84:	4998      	ldr	r1, [pc, #608]	; (10e8 <juggle_pal_onedir()+0x268>)
     e86:	780b      	ldrb	r3, [r1, #0]
	}
} // juggle_pal()



void juggle_pal_onedir() {
     e88:	b087      	sub	sp, #28
	if (mode_change) {
     e8a:	2b00      	cmp	r3, #0
     e8c:	f000 811c 	beq.w	10c8 <juggle_pal_onedir()+0x248>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e90:	4c96      	ldr	r4, [pc, #600]	; (10ec <juggle_pal_onedir()+0x26c>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
     e92:	f8df a28c 	ldr.w	sl, [pc, #652]	; 1120 <juggle_pal_onedir()+0x2a0>
     e96:	8823      	ldrh	r3, [r4, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
     e98:	f8df b288 	ldr.w	fp, [pc, #648]	; 1124 <juggle_pal_onedir()+0x2a4>


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
     e9c:	f8df 8288 	ldr.w	r8, [pc, #648]	; 1128 <juggle_pal_onedir()+0x2a8>
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
     ea0:	f8df 9288 	ldr.w	r9, [pc, #648]	; 112c <juggle_pal_onedir()+0x2ac>
     ea4:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     ea8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     eac:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     eb0:	3019      	adds	r0, #25
     eb2:	b280      	uxth	r0, r0
     eb4:	eb00 2340 	add.w	r3, r0, r0, lsl #9
     eb8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     ebc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     ec0:	3319      	adds	r3, #25
     ec2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     ec6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     eca:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     ece:	3319      	adds	r3, #25
     ed0:	b29b      	uxth	r3, r3
     ed2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     ed6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     eda:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     ede:	3219      	adds	r2, #25
     ee0:	b292      	uxth	r2, r2
     ee2:	eb02 2642 	add.w	r6, r2, r2, lsl #9
     ee6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
     eea:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
     eee:	3619      	adds	r6, #25
     ef0:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     ef2:	eb00 2010 	add.w	r0, r0, r0, lsr #8
     ef6:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     efa:	f3c0 1081 	ubfx	r0, r0, #6, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     efe:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     f02:	3002      	adds	r0, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f04:	fa5f fe85 	uxtb.w	lr, r5
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     f08:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f0a:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
/// Generate an 8-bit random number in the given range
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
     f0e:	25ff      	movs	r5, #255	; 0xff
     f10:	fb95 f5f0 	sdiv	r5, r5, r0
     f14:	3d01      	subs	r5, #1
    uint8_t r = random8(delta) + min;
     f16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f1a:	eb06 068c 	add.w	r6, r6, ip, lsl #2
/// Generate an 8-bit random number in the given range
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
     f1e:	b2ed      	uxtb	r5, r5
    uint8_t r = random8(delta) + min;
     f20:	111b      	asrs	r3, r3, #4
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
     f22:	fb1e f505 	smulbb	r5, lr, r5
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f26:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f2a:	eb02 2712 	add.w	r7, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f2e:	3619      	adds	r6, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     f30:	f103 0210 	add.w	r2, r3, #16
     f34:	122b      	asrs	r3, r5, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f36:	8026      	strh	r6, [r4, #0]
     f38:	3301      	adds	r3, #1
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
     f3a:	4c6d      	ldr	r4, [pc, #436]	; (10f0 <juggle_pal_onedir()+0x270>)
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
     f3c:	f88a 3000 	strb.w	r3, [sl]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
     f40:	f3c7 1703 	ubfx	r7, r7, #4, #4
     f44:	1d3d      	adds	r5, r7, #4

void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
     f46:	4b6b      	ldr	r3, [pc, #428]	; (10f4 <juggle_pal_onedir()+0x274>)
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
     f48:	f88b 5000 	strb.w	r5, [fp]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     f4c:	b2d2      	uxtb	r2, r2
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
     f4e:	7022      	strb	r2, [r4, #0]
void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
     f50:	4d69      	ldr	r5, [pc, #420]	; (10f8 <juggle_pal_onedir()+0x278>)
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    this_delay =10; 
     f52:	4c6a      	ldr	r4, [pc, #424]	; (10fc <juggle_pal_onedir()+0x27c>)


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
     f54:	f888 0000 	strb.w	r0, [r8]
		use_palette = 1;
     f58:	2001      	movs	r0, #1
     f5a:	7018      	strb	r0, [r3, #0]



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
     f5c:	2300      	movs	r3, #0
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    this_delay =10; 
     f5e:	200a      	movs	r0, #10
void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
     f60:	702b      	strb	r3, [r5, #0]



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
     f62:	700b      	strb	r3, [r1, #0]
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
     f64:	f889 3000 	strb.w	r3, [r9]
    this_delay =10; 
     f68:	6020      	str	r0, [r4, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     f6a:	2196      	movs	r1, #150	; 0x96
     f6c:	4864      	ldr	r0, [pc, #400]	; (1100 <juggle_pal_onedir()+0x280>)
     f6e:	f001 ff69 	bl	2e44 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	for (int i = 0; i < numdots; i++) {
     f72:	f898 3000 	ldrb.w	r3, [r8]
     f76:	2b00      	cmp	r3, #0
     f78:	f000 80a3 	beq.w	10c2 <juggle_pal_onedir()+0x242>
     f7c:	4f61      	ldr	r7, [pc, #388]	; (1104 <juggle_pal_onedir()+0x284>)
     f7e:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 1124 <juggle_pal_onedir()+0x2a4>
     f82:	783a      	ldrb	r2, [r7, #0]
     f84:	f8df a198 	ldr.w	sl, [pc, #408]	; 1120 <juggle_pal_onedir()+0x2a0>
     f88:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 112c <juggle_pal_onedir()+0x2ac>
     f8c:	4e5c      	ldr	r6, [pc, #368]	; (1100 <juggle_pal_onedir()+0x280>)
     f8e:	2500      	movs	r5, #0
     f90:	e060      	b.n	1054 <juggle_pal_onedir()+0x1d4>
		if (!this_dir) {
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
     f92:	f89b 1000 	ldrb.w	r1, [fp]
     f96:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f98:	495b      	ldr	r1, [pc, #364]	; (1108 <juggle_pal_onedir()+0x288>)
     f9a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
     f9e:	6809      	ldr	r1, [r1, #0]
     fa0:	9104      	str	r1, [sp, #16]
     fa2:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     fa4:	2bff      	cmp	r3, #255	; 0xff
	return ret;
     fa6:	9804      	ldr	r0, [sp, #16]
     fa8:	bf98      	it	ls
     faa:	021b      	lslls	r3, r3, #8
uint8_t ball_hue = 0;

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     fac:	f44f 718c 	mov.w	r1, #280	; 0x118
     fb0:	bf98      	it	ls
     fb2:	b29b      	uxthls	r3, r3
     fb4:	fb01 f000 	mul.w	r0, r1, r0
     fb8:	fb03 f000 	mul.w	r0, r3, r0
     fbc:	f3c0 400e 	ubfx	r0, r0, #16, #15
     fc0:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     fc4:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     fc6:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     fca:	d503      	bpl.n	fd4 <juggle_pal_onedir()+0x154>
     fcc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     fd0:	3307      	adds	r3, #7
     fd2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     fd4:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     fd8:	f3c3 0146 	ubfx	r1, r3, #1, #7
     fdc:	4b4b      	ldr	r3, [pc, #300]	; (110c <juggle_pal_onedir()+0x28c>)
     fde:	f813 400e 	ldrb.w	r4, [r3, lr]
     fe2:	4b4b      	ldr	r3, [pc, #300]	; (1110 <juggle_pal_onedir()+0x290>)
     fe4:	f833 301e 	ldrh.w	r3, [r3, lr, lsl #1]
     fe8:	fb04 3301 	mla	r3, r4, r1, r3
     fec:	b29c      	uxth	r4, r3

    if( theta & 0x8000 ) y = -y;
     fee:	0403      	lsls	r3, r0, #16
     ff0:	d465      	bmi.n	10be <juggle_pal_onedir()+0x23e>
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
     ff2:	4948      	ldr	r1, [pc, #288]	; (1114 <juggle_pal_onedir()+0x294>)
     ff4:	4b48      	ldr	r3, [pc, #288]	; (1118 <juggle_pal_onedir()+0x298>)
     ff6:	7809      	ldrb	r1, [r1, #0]
     ff8:	781b      	ldrb	r3, [r3, #0]
     ffa:	9100      	str	r1, [sp, #0]
     ffc:	b224      	sxth	r4, r4
     ffe:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
    1002:	2196      	movs	r1, #150	; 0x96
    1004:	b2a4      	uxth	r4, r4
    1006:	fb01 f404 	mul.w	r4, r1, r4
    100a:	0c24      	lsrs	r4, r4, #16


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    100c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1010:	4942      	ldr	r1, [pc, #264]	; (111c <juggle_pal_onedir()+0x29c>)
    1012:	a803      	add	r0, sp, #12
    1014:	f001 ff68 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1018:	1931      	adds	r1, r6, r4
    101a:	5d33      	ldrb	r3, [r6, r4]
    101c:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1020:	fa83 f352 	uqadd8	r3, r3, r2
    1024:	5533      	strb	r3, [r6, r4]
    1026:	784a      	ldrb	r2, [r1, #1]
    1028:	f89d 300d 	ldrb.w	r3, [sp, #13]
    102c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1030:	704a      	strb	r2, [r1, #1]
    1032:	788b      	ldrb	r3, [r1, #2]
    1034:	f89d 200e 	ldrb.w	r2, [sp, #14]
    1038:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    103c:	708b      	strb	r3, [r1, #2]
		}
		this_index += this_diff;
    103e:	7839      	ldrb	r1, [r7, #0]
    1040:	f89a 2000 	ldrb.w	r2, [sl]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1044:	f898 3000 	ldrb.w	r3, [r8]
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		this_index += this_diff;
    1048:	440a      	add	r2, r1
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    104a:	3501      	adds	r5, #1
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		this_index += this_diff;
    104c:	b2d2      	uxtb	r2, r2
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    104e:	42ab      	cmp	r3, r5
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		this_index += this_diff;
    1050:	703a      	strb	r2, [r7, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1052:	dd36      	ble.n	10c2 <juggle_pal_onedir()+0x242>
		if (!this_dir) {
    1054:	f899 1000 	ldrb.w	r1, [r9]
    1058:	2900      	cmp	r1, #0
    105a:	d09a      	beq.n	f92 <juggle_pal_onedir()+0x112>
			leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
		}
		else {
			leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    105c:	f89b 1000 	ldrb.w	r1, [fp]
    1060:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1062:	4929      	ldr	r1, [pc, #164]	; (1108 <juggle_pal_onedir()+0x288>)
    1064:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    1068:	6809      	ldr	r1, [r1, #0]
    106a:	9105      	str	r1, [sp, #20]
    106c:	b29b      	uxth	r3, r3
    106e:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1070:	9905      	ldr	r1, [sp, #20]
    1072:	bf98      	it	ls
    1074:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1076:	f44f 708c 	mov.w	r0, #280	; 0x118
    107a:	fb00 f101 	mul.w	r1, r0, r1
    107e:	bf98      	it	ls
    1080:	b29b      	uxthls	r3, r3
    1082:	fb03 f301 	mul.w	r3, r3, r1
    1086:	f3c3 430e 	ubfx	r3, r3, #16, #15
    108a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    108e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1090:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1092:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1096:	d503      	bpl.n	10a0 <juggle_pal_onedir()+0x220>
    1098:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    109c:	3107      	adds	r1, #7
    109e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    10a0:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    10a4:	f3c1 0046 	ubfx	r0, r1, #1, #7
    10a8:	4918      	ldr	r1, [pc, #96]	; (110c <juggle_pal_onedir()+0x28c>)
    10aa:	f811 400e 	ldrb.w	r4, [r1, lr]
    10ae:	4918      	ldr	r1, [pc, #96]	; (1110 <juggle_pal_onedir()+0x290>)
    10b0:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]

    if( theta & 0x8000 ) y = -y;
    10b4:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    10b6:	fb04 1100 	mla	r1, r4, r0, r1
    10ba:	b28c      	uxth	r4, r1

    if( theta & 0x8000 ) y = -y;
    10bc:	d599      	bpl.n	ff2 <juggle_pal_onedir()+0x172>
    10be:	4264      	negs	r4, r4
    10c0:	e797      	b.n	ff2 <juggle_pal_onedir()+0x172>
		}
		this_index += this_diff;
	}
} // 
    10c2:	b007      	add	sp, #28
    10c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		this_beat = random8(4, 20);
		this_diff = random8(1, 255 / numdots);
		this_dir = random8(1);
    this_delay =10; 
	}
	if (reset_juggle_index) {
    10c8:	4a0b      	ldr	r2, [pc, #44]	; (10f8 <juggle_pal_onedir()+0x278>)
    10ca:	7812      	ldrb	r2, [r2, #0]
    10cc:	b132      	cbz	r2, 10dc <juggle_pal_onedir()+0x25c>
    10ce:	4a08      	ldr	r2, [pc, #32]	; (10f0 <juggle_pal_onedir()+0x270>)
		this_index = 0;
    10d0:	490c      	ldr	r1, [pc, #48]	; (1104 <juggle_pal_onedir()+0x284>)
    10d2:	7812      	ldrb	r2, [r2, #0]
    10d4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1128 <juggle_pal_onedir()+0x2a8>
    10d8:	700b      	strb	r3, [r1, #0]
    10da:	e746      	b.n	f6a <juggle_pal_onedir()+0xea>
    10dc:	4b04      	ldr	r3, [pc, #16]	; (10f0 <juggle_pal_onedir()+0x270>)
    10de:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1128 <juggle_pal_onedir()+0x2a8>
    10e2:	781a      	ldrb	r2, [r3, #0]
    10e4:	e741      	b.n	f6a <juggle_pal_onedir()+0xea>
    10e6:	bf00      	nop
    10e8:	1fff8760 	.word	0x1fff8760
    10ec:	1fff876a 	.word	0x1fff876a
    10f0:	1fff8754 	.word	0x1fff8754
    10f4:	1fff8756 	.word	0x1fff8756
    10f8:	1fff9212 	.word	0x1fff9212
    10fc:	1fff8758 	.word	0x1fff8758
    1100:	1fff8db0 	.word	0x1fff8db0
    1104:	1fff9209 	.word	0x1fff9209
    1108:	1fff94e8 	.word	0x1fff94e8
    110c:	000068e4 	.word	0x000068e4
    1110:	000072c8 	.word	0x000072c8
    1114:	1fff920b 	.word	0x1fff920b
    1118:	1fff875d 	.word	0x1fff875d
    111c:	1fff90d0 	.word	0x1fff90d0
    1120:	1fff8755 	.word	0x1fff8755
    1124:	1fff8767 	.word	0x1fff8767
    1128:	1fff8766 	.word	0x1fff8766
    112c:	1fff920e 	.word	0x1fff920e

00001130 <sinelon()>:
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;
void sinelon()
{
    1130:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (mode_change) {
    1132:	4958      	ldr	r1, [pc, #352]	; (1294 <sinelon()+0x164>)
    1134:	780b      	ldrb	r3, [r1, #0]
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;
void sinelon()
{
    1136:	b085      	sub	sp, #20
	if (mode_change) {
    1138:	2b00      	cmp	r3, #0
    113a:	d156      	bne.n	11ea <sinelon()+0xba>
    113c:	4b56      	ldr	r3, [pc, #344]	; (1298 <sinelon()+0x168>)
    113e:	4d57      	ldr	r5, [pc, #348]	; (129c <sinelon()+0x16c>)
    1140:	781a      	ldrb	r2, [r3, #0]
    1142:	4c57      	ldr	r4, [pc, #348]	; (12a0 <sinelon()+0x170>)
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    this_delay = 10;
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    1144:	4857      	ldr	r0, [pc, #348]	; (12a4 <sinelon()+0x174>)
    1146:	2196      	movs	r1, #150	; 0x96
    1148:	f001 fe7c 	bl	2e44 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    114c:	4a56      	ldr	r2, [pc, #344]	; (12a8 <sinelon()+0x178>)
	int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    114e:	782b      	ldrb	r3, [r5, #0]
    1150:	6812      	ldr	r2, [r2, #0]
    1152:	9203      	str	r2, [sp, #12]
	return ret;
    1154:	9903      	ldr	r1, [sp, #12]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1156:	f44f 728c 	mov.w	r2, #280	; 0x118
    115a:	021b      	lsls	r3, r3, #8
    115c:	fb02 f101 	mul.w	r1, r2, r1
    1160:	fb03 f101 	mul.w	r1, r3, r1
    1164:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1166:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1168:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    116c:	d503      	bpl.n	1176 <sinelon()+0x46>
    116e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1172:	3307      	adds	r3, #7
    1174:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1176:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    1178:	4d4c      	ldr	r5, [pc, #304]	; (12ac <sinelon()+0x17c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    117a:	484d      	ldr	r0, [pc, #308]	; (12b0 <sinelon()+0x180>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    117c:	5cad      	ldrb	r5, [r5, r2]
    117e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    1182:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1186:	fb05 0302 	mla	r3, r5, r2, r0
    118a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    118c:	040a      	lsls	r2, r1, #16
    118e:	bf48      	it	mi
    1190:	425b      	negmi	r3, r3
    1192:	b21b      	sxth	r3, r3
    1194:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1198:	b29b      	uxth	r3, r3
	if (sinelon_color_change) {
    119a:	7822      	ldrb	r2, [r4, #0]
		sinelon_color_change = random8(1);
    this_delay = 10;
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    119c:	2496      	movs	r4, #150	; 0x96
    119e:	fb04 f303 	mul.w	r3, r4, r3
    11a2:	0c1c      	lsrs	r4, r3, #16
	if (sinelon_color_change) {
    11a4:	2a00      	cmp	r2, #0
    11a6:	d15e      	bne.n	1266 <sinelon()+0x136>
		leds[pos] += ColorFromPalette(current_palette, this_index++);
	}
	else {
		leds[pos] += ColorFromPalette(current_palette, this_index);
    11a8:	4b42      	ldr	r3, [pc, #264]	; (12b4 <sinelon()+0x184>)
    11aa:	4943      	ldr	r1, [pc, #268]	; (12b8 <sinelon()+0x188>)
    11ac:	781a      	ldrb	r2, [r3, #0]
    11ae:	2301      	movs	r3, #1
    11b0:	9300      	str	r3, [sp, #0]
    11b2:	a802      	add	r0, sp, #8
    11b4:	23ff      	movs	r3, #255	; 0xff
    11b6:	f001 fe97 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    11ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    11be:	4a39      	ldr	r2, [pc, #228]	; (12a4 <sinelon()+0x174>)
    11c0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    11c4:	5d13      	ldrb	r3, [r2, r4]
    11c6:	1911      	adds	r1, r2, r4
    11c8:	fa83 f350 	uqadd8	r3, r3, r0
    11cc:	5513      	strb	r3, [r2, r4]
    11ce:	784a      	ldrb	r2, [r1, #1]
    11d0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    11d4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    11d8:	704a      	strb	r2, [r1, #1]
    11da:	788b      	ldrb	r3, [r1, #2]
    11dc:	f89d 200a 	ldrb.w	r2, [sp, #10]
    11e0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    11e4:	708b      	strb	r3, [r1, #2]
	}
	//leds[pos] += CHSV(this_hue++, 255, 192);
}
    11e6:	b005      	add	sp, #20
    11e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    11ea:	4c34      	ldr	r4, [pc, #208]	; (12bc <sinelon()+0x18c>)
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
    11ec:	4d2b      	ldr	r5, [pc, #172]	; (129c <sinelon()+0x16c>)
    11ee:	8823      	ldrh	r3, [r4, #0]
bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    11f0:	4833      	ldr	r0, [pc, #204]	; (12c0 <sinelon()+0x190>)
		this_fade = random8(16, 128);
    11f2:	4e29      	ldr	r6, [pc, #164]	; (1298 <sinelon()+0x168>)
    11f4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    11f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11fc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1200:	3319      	adds	r3, #25
    1202:	b29b      	uxth	r3, r3
    1204:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    1208:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    120c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    1210:	3719      	adds	r7, #25
    1212:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1214:	eb07 2e17 	add.w	lr, r7, r7, lsr #8
    1218:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    121c:	eb07 2c47 	add.w	ip, r7, r7, lsl #9
		this_beat = random8(8, 18);
    1220:	fa5f fe8e 	uxtb.w	lr, lr
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1224:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1226:	eb07 078c 	add.w	r7, r7, ip, lsl #2
    122a:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    122e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1232:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    1236:	ea4f 1eee 	mov.w	lr, lr, asr #7
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    123a:	111a      	asrs	r2, r3, #4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    123c:	3719      	adds	r7, #25
    123e:	f10e 0e08 	add.w	lr, lr, #8
    1242:	8027      	strh	r7, [r4, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1244:	3210      	adds	r2, #16
		sinelon_color_change = random8(1);
    1246:	4c16      	ldr	r4, [pc, #88]	; (12a0 <sinelon()+0x170>)
    this_delay = 10;
    1248:	4f1e      	ldr	r7, [pc, #120]	; (12c4 <sinelon()+0x194>)
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
    124a:	f885 e000 	strb.w	lr, [r5]
bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    124e:	f04f 0e01 	mov.w	lr, #1

bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
    1252:	2300      	movs	r3, #0
    1254:	b2d2      	uxtb	r2, r2
		use_palette = 1;
    1256:	f880 e000 	strb.w	lr, [r0]
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    this_delay = 10;
    125a:	200a      	movs	r0, #10
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    125c:	7032      	strb	r2, [r6, #0]
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    125e:	7023      	strb	r3, [r4, #0]

bool sinelon_color_change = 0;
void sinelon()
{
	if (mode_change) {
		mode_change = 0;
    1260:	700b      	strb	r3, [r1, #0]
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(8, 18);
		sinelon_color_change = random8(1);
    this_delay = 10;
    1262:	6038      	str	r0, [r7, #0]
    1264:	e76e      	b.n	1144 <sinelon()+0x14>
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
	if (sinelon_color_change) {
		leds[pos] += ColorFromPalette(current_palette, this_index++);
    1266:	4d13      	ldr	r5, [pc, #76]	; (12b4 <sinelon()+0x184>)
    1268:	4913      	ldr	r1, [pc, #76]	; (12b8 <sinelon()+0x188>)
    126a:	782a      	ldrb	r2, [r5, #0]
    126c:	2301      	movs	r3, #1
    126e:	18d6      	adds	r6, r2, r3
    1270:	9300      	str	r3, [sp, #0]
    1272:	a802      	add	r0, sp, #8
    1274:	23ff      	movs	r3, #255	; 0xff
    1276:	702e      	strb	r6, [r5, #0]
    1278:	f001 fe36 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    127c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1280:	4b08      	ldr	r3, [pc, #32]	; (12a4 <sinelon()+0x174>)
    1282:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1286:	5d1a      	ldrb	r2, [r3, r4]
    1288:	1919      	adds	r1, r3, r4
    128a:	fa82 f250 	uqadd8	r2, r2, r0
    128e:	551a      	strb	r2, [r3, r4]
    1290:	e79d      	b.n	11ce <sinelon()+0x9e>
    1292:	bf00      	nop
    1294:	1fff8760 	.word	0x1fff8760
    1298:	1fff8754 	.word	0x1fff8754
    129c:	1fff8767 	.word	0x1fff8767
    12a0:	1fff9070 	.word	0x1fff9070
    12a4:	1fff8db0 	.word	0x1fff8db0
    12a8:	1fff94e8 	.word	0x1fff94e8
    12ac:	000068e4 	.word	0x000068e4
    12b0:	000072c8 	.word	0x000072c8
    12b4:	1fff9209 	.word	0x1fff9209
    12b8:	1fff90d0 	.word	0x1fff90d0
    12bc:	1fff876a 	.word	0x1fff876a
    12c0:	1fff8756 	.word	0x1fff8756
    12c4:	1fff8758 	.word	0x1fff8758

000012c8 <juggle_pal()>:
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    12c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    12cc:	4976      	ldr	r1, [pc, #472]	; (14a8 <juggle_pal()+0x1e0>)
    12ce:	780b      	ldrb	r3, [r1, #0]
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    12d0:	b085      	sub	sp, #20
	if (mode_change) {
    12d2:	2b00      	cmp	r3, #0
    12d4:	f000 80d8 	beq.w	1488 <juggle_pal()+0x1c0>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    12d8:	4874      	ldr	r0, [pc, #464]	; (14ac <juggle_pal()+0x1e4>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    12da:	f8df 9200 	ldr.w	r9, [pc, #512]	; 14dc <juggle_pal()+0x214>
    12de:	8803      	ldrh	r3, [r0, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    12e0:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 14e0 <juggle_pal()+0x218>
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    12e4:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 14e4 <juggle_pal()+0x21c>
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    12e8:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 14d8 <juggle_pal()+0x210>
    12ec:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    12f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    12f4:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    12f8:	3419      	adds	r4, #25
    12fa:	b2a4      	uxth	r4, r4
    12fc:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    1300:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1304:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1308:	3319      	adds	r3, #25
    130a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    130e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1312:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1316:	3319      	adds	r3, #25
    1318:	b29b      	uxth	r3, r3
    131a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    131e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    1322:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    1326:	3619      	adds	r6, #25
    1328:	b2b6      	uxth	r6, r6
    132a:	eb06 2546 	add.w	r5, r6, r6, lsl #9
    132e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1332:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    1336:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1338:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    133c:	b2ad      	uxth	r5, r5
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    133e:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1340:	eb04 2414 	add.w	r4, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1344:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1348:	f3c4 1481 	ubfx	r4, r4, #6, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    134c:	eb05 2315 	add.w	r3, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1350:	3402      	adds	r4, #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1352:	b2df      	uxtb	r7, r3
/// Generate an 8-bit random number in the given range
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    1354:	23ff      	movs	r3, #255	; 0xff
    1356:	fb93 f3f4 	sdiv	r3, r3, r4
    135a:	3b01      	subs	r3, #1
    135c:	b2db      	uxtb	r3, r3
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    135e:	fb17 f303 	smulbb	r3, r7, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1362:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1366:	1112      	asrs	r2, r2, #4
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1368:	f3c6 1603 	ubfx	r6, r6, #4, #4
		this_diff = random8(1, 255/numdots);
    136c:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    136e:	8005      	strh	r5, [r0, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1370:	3604      	adds	r6, #4
		this_diff = random8(1, 255/numdots);
    1372:	3301      	adds	r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1374:	3210      	adds	r2, #16

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1376:	4f4e      	ldr	r7, [pc, #312]	; (14b0 <juggle_pal()+0x1e8>)
		reset_juggle_index = random8(1);
    1378:	4d4e      	ldr	r5, [pc, #312]	; (14b4 <juggle_pal()+0x1ec>)
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
    137a:	484f      	ldr	r0, [pc, #316]	; (14b8 <juggle_pal()+0x1f0>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    137c:	f889 3000 	strb.w	r3, [r9]
    1380:	b2d2      	uxtb	r2, r2

bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
    1382:	2300      	movs	r3, #0
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1384:	f88a 6000 	strb.w	r6, [sl]
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1388:	f888 4000 	strb.w	r4, [r8]
		use_palette = 1;
    138c:	2601      	movs	r6, #1
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
    138e:	240a      	movs	r4, #10
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1390:	f88e 2000 	strb.w	r2, [lr]

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1394:	703e      	strb	r6, [r7, #0]
		reset_juggle_index = random8(1);
    1396:	702b      	strb	r3, [r5, #0]

bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
    1398:	700b      	strb	r3, [r1, #0]
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
    139a:	6004      	str	r4, [r0, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    139c:	2196      	movs	r1, #150	; 0x96
    139e:	4847      	ldr	r0, [pc, #284]	; (14bc <juggle_pal()+0x1f4>)
    13a0:	f001 fd50 	bl	2e44 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	for (int i = 0; i < numdots; i++) {
    13a4:	f898 3000 	ldrb.w	r3, [r8]
    13a8:	2b00      	cmp	r3, #0
    13aa:	d06a      	beq.n	1482 <juggle_pal()+0x1ba>
    13ac:	4f44      	ldr	r7, [pc, #272]	; (14c0 <juggle_pal()+0x1f8>)
    13ae:	f8df a130 	ldr.w	sl, [pc, #304]	; 14e0 <juggle_pal()+0x218>
    13b2:	783a      	ldrb	r2, [r7, #0]
    13b4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 14dc <juggle_pal()+0x214>
    13b8:	4e40      	ldr	r6, [pc, #256]	; (14bc <juggle_pal()+0x1f4>)
    13ba:	2500      	movs	r5, #0
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
    13bc:	f04f 0b97 	mov.w	fp, #151	; 0x97
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13c0:	4940      	ldr	r1, [pc, #256]	; (14c4 <juggle_pal()+0x1fc>)
    13c2:	680c      	ldr	r4, [r1, #0]
    13c4:	f89a 1000 	ldrb.w	r1, [sl]
    13c8:	9403      	str	r4, [sp, #12]
    13ca:	440b      	add	r3, r1
    13cc:	442b      	add	r3, r5
    13ce:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    13d0:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    13d2:	9803      	ldr	r0, [sp, #12]
    13d4:	bf98      	it	ls
    13d6:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    13d8:	f44f 718c 	mov.w	r1, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    13dc:	bf98      	it	ls
    13de:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    13e0:	fb01 f000 	mul.w	r0, r1, r0
    13e4:	fb03 f000 	mul.w	r0, r3, r0
    13e8:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    13ea:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    13ec:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    13f0:	d503      	bpl.n	13fa <juggle_pal()+0x132>
    13f2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    13f6:	3307      	adds	r3, #7
    13f8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    13fa:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    13fe:	f3c3 0146 	ubfx	r1, r3, #1, #7
    1402:	4b31      	ldr	r3, [pc, #196]	; (14c8 <juggle_pal()+0x200>)
    1404:	f813 400e 	ldrb.w	r4, [r3, lr]
    1408:	4b30      	ldr	r3, [pc, #192]	; (14cc <juggle_pal()+0x204>)
    140a:	f833 301e 	ldrh.w	r3, [r3, lr, lsl #1]
    140e:	fb04 3301 	mla	r3, r4, r1, r3
    1412:	b29c      	uxth	r4, r3

    if( theta & 0x8000 ) y = -y;
    1414:	0403      	lsls	r3, r0, #16
    1416:	bf48      	it	mi
    1418:	4264      	negmi	r4, r4
    141a:	b224      	sxth	r4, r4
    141c:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
    1420:	b2a4      	uxth	r4, r4
    1422:	fb0b f404 	mul.w	r4, fp, r4
    1426:	482a      	ldr	r0, [pc, #168]	; (14d0 <juggle_pal()+0x208>)
    1428:	492a      	ldr	r1, [pc, #168]	; (14d4 <juggle_pal()+0x20c>)
    142a:	7800      	ldrb	r0, [r0, #0]
    142c:	9000      	str	r0, [sp, #0]
    142e:	0c24      	lsrs	r4, r4, #16
    1430:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1434:	23ff      	movs	r3, #255	; 0xff
    1436:	a802      	add	r0, sp, #8
    1438:	f001 fd56 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    143c:	eb06 0e04 	add.w	lr, r6, r4
    1440:	5d33      	ldrb	r3, [r6, r4]
    1442:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1446:	fa83 f352 	uqadd8	r3, r3, r2
    144a:	5533      	strb	r3, [r6, r4]
    144c:	f89d 2009 	ldrb.w	r2, [sp, #9]
    1450:	f89e 3001 	ldrb.w	r3, [lr, #1]
    1454:	fa83 f352 	uqadd8	r3, r3, r2
        g = qadd8( g, rhs.g);
    1458:	f88e 3001 	strb.w	r3, [lr, #1]
    145c:	f89e 1002 	ldrb.w	r1, [lr, #2]
    1460:	f89d 300a 	ldrb.w	r3, [sp, #10]
    1464:	fa81 f153 	uqadd8	r1, r1, r3
		this_index += this_diff;
    1468:	7838      	ldrb	r0, [r7, #0]
    146a:	f899 2000 	ldrb.w	r2, [r9]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    146e:	f898 3000 	ldrb.w	r3, [r8]
        b = qadd8( b, rhs.b);
    1472:	f88e 1002 	strb.w	r1, [lr, #2]
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
    1476:	4402      	add	r2, r0
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1478:	3501      	adds	r5, #1
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
    147a:	b2d2      	uxtb	r2, r2
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    147c:	42ab      	cmp	r3, r5
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
    147e:	703a      	strb	r2, [r7, #0]
	}
	if (reset_juggle_index) {
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	for (int i = 0; i < numdots; i++) {
    1480:	dc9e      	bgt.n	13c0 <juggle_pal()+0xf8>
		leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);    // Munge the values and pick a colour from the palette
		this_index += this_diff;
	}
} // juggle_pal()
    1482:	b005      	add	sp, #20
    1484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(1, 255/numdots);
    this_delay = 10;
	}
	if (reset_juggle_index) {
    1488:	4a0a      	ldr	r2, [pc, #40]	; (14b4 <juggle_pal()+0x1ec>)
    148a:	7812      	ldrb	r2, [r2, #0]
    148c:	b132      	cbz	r2, 149c <juggle_pal()+0x1d4>
    148e:	4a12      	ldr	r2, [pc, #72]	; (14d8 <juggle_pal()+0x210>)
		this_index = 0;
    1490:	490b      	ldr	r1, [pc, #44]	; (14c0 <juggle_pal()+0x1f8>)
    1492:	7812      	ldrb	r2, [r2, #0]
    1494:	f8df 804c 	ldr.w	r8, [pc, #76]	; 14e4 <juggle_pal()+0x21c>
    1498:	700b      	strb	r3, [r1, #0]
    149a:	e77f      	b.n	139c <juggle_pal()+0xd4>
    149c:	4b0e      	ldr	r3, [pc, #56]	; (14d8 <juggle_pal()+0x210>)
    149e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 14e4 <juggle_pal()+0x21c>
    14a2:	781a      	ldrb	r2, [r3, #0]
    14a4:	e77a      	b.n	139c <juggle_pal()+0xd4>
    14a6:	bf00      	nop
    14a8:	1fff8760 	.word	0x1fff8760
    14ac:	1fff876a 	.word	0x1fff876a
    14b0:	1fff8756 	.word	0x1fff8756
    14b4:	1fff9212 	.word	0x1fff9212
    14b8:	1fff8758 	.word	0x1fff8758
    14bc:	1fff8db0 	.word	0x1fff8db0
    14c0:	1fff9209 	.word	0x1fff9209
    14c4:	1fff94e8 	.word	0x1fff94e8
    14c8:	000068e4 	.word	0x000068e4
    14cc:	000072c8 	.word	0x000072c8
    14d0:	1fff920b 	.word	0x1fff920b
    14d4:	1fff90d0 	.word	0x1fff90d0
    14d8:	1fff8754 	.word	0x1fff8754
    14dc:	1fff8755 	.word	0x1fff8755
    14e0:	1fff8767 	.word	0x1fff8767
    14e4:	1fff8766 	.word	0x1fff8766

000014e8 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    14e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ea:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14ec:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    14ee:	6805      	ldr	r5, [r0, #0]
    14f0:	f88d 3004 	strb.w	r3, [sp, #4]
    14f4:	f88d 3005 	strb.w	r3, [sp, #5]
    14f8:	f88d 3006 	strb.w	r3, [sp, #6]
    14fc:	682e      	ldr	r6, [r5, #0]
    14fe:	4a37      	ldr	r2, [pc, #220]	; (15dc <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1500:	f88d 3008 	strb.w	r3, [sp, #8]
    1504:	4296      	cmp	r6, r2
    1506:	f88d 3009 	strb.w	r3, [sp, #9]
    150a:	f88d 300a 	strb.w	r3, [sp, #10]
    150e:	d15f      	bne.n	15d0 <CLEDController::clearLeds(int)+0xe8>
    1510:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    1512:	9104      	str	r1, [sp, #16]
    1514:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1516:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    1518:	a801      	add	r0, sp, #4
    151a:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    151c:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
    1520:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
    1524:	f88d 3020 	strb.w	r3, [sp, #32]
    1528:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    152a:	d015      	beq.n	1558 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    152c:	f88d 301d 	strb.w	r3, [sp, #29]
    1530:	f88d 301c 	strb.w	r3, [sp, #28]
    1534:	f88d 301b 	strb.w	r3, [sp, #27]
    1538:	f88d 301a 	strb.w	r3, [sp, #26]
    153c:	f88d 3019 	strb.w	r3, [sp, #25]
    1540:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1544:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1546:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1548:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    154c:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    154e:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1550:	a903      	add	r1, sp, #12
    1552:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    1554:	b00b      	add	sp, #44	; 0x2c
    1556:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    1558:	4a21      	ldr	r2, [pc, #132]	; (15e0 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    155a:	7813      	ldrb	r3, [r2, #0]
    155c:	3301      	adds	r3, #1
    155e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1562:	f013 0f01 	tst.w	r3, #1
    1566:	bf14      	ite	ne
    1568:	2180      	movne	r1, #128	; 0x80
    156a:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    156c:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    156e:	079a      	lsls	r2, r3, #30
    1570:	bf44      	itt	mi
    1572:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    1576:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
    1578:	075b      	lsls	r3, r3, #29
    157a:	bf48      	it	mi
    157c:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1580:	3110      	adds	r1, #16
    1582:	2200      	movs	r2, #0
    1584:	b2c9      	uxtb	r1, r1
    1586:	f10d 031b 	add.w	r3, sp, #27
    158a:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    158e:	f44f 7e80 	mov.w	lr, #256	; 0x100
    1592:	b1aa      	cbz	r2, 15c0 <CLEDController::clearLeds(int)+0xd8>
    1594:	fb9e f2f2 	sdiv	r2, lr, r2
    1598:	b2d2      	uxtb	r2, r2
    159a:	1c50      	adds	r0, r2, #1
    159c:	b2c0      	uxtb	r0, r0
    159e:	fb00 1501 	mla	r5, r0, r1, r1
    15a2:	122d      	asrs	r5, r5, #8
    15a4:	7018      	strb	r0, [r3, #0]
    15a6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    15a8:	b105      	cbz	r5, 15ac <CLEDController::clearLeds(int)+0xc4>
    15aa:	3e01      	subs	r6, #1
    15ac:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    15b0:	b100      	cbz	r0, 15b4 <CLEDController::clearLeds(int)+0xcc>
    15b2:	701a      	strb	r2, [r3, #0]
    15b4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    15b6:	429f      	cmp	r7, r3
    15b8:	d008      	beq.n	15cc <CLEDController::clearLeds(int)+0xe4>
    15ba:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    15bc:	2a00      	cmp	r2, #0
    15be:	d1e9      	bne.n	1594 <CLEDController::clearLeds(int)+0xac>
    15c0:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    15c2:	f803 2c03 	strb.w	r2, [r3, #-3]
    15c6:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    15c8:	429f      	cmp	r7, r3
    15ca:	d1f6      	bne.n	15ba <CLEDController::clearLeds(int)+0xd2>
    15cc:	6825      	ldr	r5, [r4, #0]
    15ce:	e7b9      	b.n	1544 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    15d0:	460a      	mov	r2, r1
    15d2:	ab02      	add	r3, sp, #8
    15d4:	a901      	add	r1, sp, #4
    15d6:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    15d8:	b00b      	add	sp, #44	; 0x2c
    15da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15dc:	000019b1 	.word	0x000019b1
    15e0:	1fff8c70 	.word	0x1fff8c70

000015e4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
    15e4:	4b7d      	ldr	r3, [pc, #500]	; (17dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
    15e6:	4a7e      	ldr	r2, [pc, #504]	; (17e0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    15e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
    15ec:	68df      	ldr	r7, [r3, #12]
    15ee:	61c7      	str	r7, [r0, #28]
		gState._ctar1 = SPIX.CTAR1;
    15f0:	691b      	ldr	r3, [r3, #16]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
    15f2:	4e7c      	ldr	r6, [pc, #496]	; (17e4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;
    15f4:	6203      	str	r3, [r0, #32]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
    15f6:	6833      	ldr	r3, [r6, #0]
		gState.pins[1] = CORE_PIN11_CONFIG;
    15f8:	4d7b      	ldr	r5, [pc, #492]	; (17e8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
    15fa:	6243      	str	r3, [r0, #36]	; 0x24
		gState.pins[1] = CORE_PIN11_CONFIG;
    15fc:	682b      	ldr	r3, [r5, #0]
		gState.pins[2] = CORE_PIN13_CONFIG;
    15fe:	4c7b      	ldr	r4, [pc, #492]	; (17ec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
    1600:	6283      	str	r3, [r0, #40]	; 0x28
		gState.pins[2] = CORE_PIN13_CONFIG;
    1602:	6823      	ldr	r3, [r4, #0]
    1604:	62c3      	str	r3, [r0, #44]	; 0x2c
    1606:	4680      	mov	r8, r0
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
    1608:	6980      	ldr	r0, [r0, #24]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
    160a:	6813      	ldr	r3, [r2, #0]
    160c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    1610:	b083      	sub	sp, #12
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
    1612:	b150      	cbz	r0, 162a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
    1614:	6803      	ldr	r3, [r0, #0]
    1616:	4a76      	ldr	r2, [pc, #472]	; (17f0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x20c>)
    1618:	681b      	ldr	r3, [r3, #0]
    161a:	4293      	cmp	r3, r2
    161c:	f040 8153 	bne.w	18c6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2e2>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    1620:	6842      	ldr	r2, [r0, #4]
    1622:	7b00      	ldrb	r0, [r0, #12]
    1624:	7813      	ldrb	r3, [r2, #0]
    1626:	4303      	orrs	r3, r0
    1628:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    162a:	4b6c      	ldr	r3, [pc, #432]	; (17dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    162c:	68da      	ldr	r2, [r3, #12]
    162e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
    1632:	f000 812b 	beq.w	188c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a8>
		uint32_t mcr = SPIX.MCR;
    1636:	4b69      	ldr	r3, [pc, #420]	; (17dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    1638:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    163a:	0455      	lsls	r5, r2, #17
    163c:	f100 8130 	bmi.w	18a0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2bc>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
    1640:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
    1644:	f040 0001 	orr.w	r0, r0, #1
			SPIX.CTAR0 = ctar0;
    1648:	f04f 5560 	mov.w	r5, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
    164c:	f04f 44f0 	mov.w	r4, #2013265920	; 0x78000000
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
    1650:	6018      	str	r0, [r3, #0]
			SPIX.CTAR0 = ctar0;
    1652:	60dd      	str	r5, [r3, #12]
			SPIX.CTAR1 = ctar1;
    1654:	611c      	str	r4, [r3, #16]
			SPIX.MCR = mcr;
    1656:	601a      	str	r2, [r3, #0]
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    1658:	4b62      	ldr	r3, [pc, #392]	; (17e4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    165a:	4d61      	ldr	r5, [pc, #388]	; (17e0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    165c:	4c63      	ldr	r4, [pc, #396]	; (17ec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    165e:	4e62      	ldr	r6, [pc, #392]	; (17e8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1660:	485e      	ldr	r0, [pc, #376]	; (17dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    1662:	f44f 7210 	mov.w	r2, #576	; 0x240
    1666:	601a      	str	r2, [r3, #0]
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1668:	f44f 73a2 	mov.w	r3, #324	; 0x144
    166c:	6033      	str	r3, [r6, #0]
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    166e:	602a      	str	r2, [r5, #0]
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1670:	6023      	str	r3, [r4, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    1672:	7d0c      	ldrb	r4, [r1, #20]
    1674:	7ccd      	ldrb	r5, [r1, #19]
    1676:	f891 b012 	ldrb.w	fp, [r1, #18]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    167a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    167c:	4b57      	ldr	r3, [pc, #348]	; (17dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    167e:	0457      	lsls	r7, r2, #17
    1680:	d4fb      	bmi.n	167a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x96>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1682:	b672      	cpsid	i
    1684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1688:	635a      	str	r2, [r3, #52]	; 0x34
    168a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    168c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1690:	62da      	str	r2, [r3, #44]	; 0x2c
    1692:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1696:	4851      	ldr	r0, [pc, #324]	; (17dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    1698:	0456      	lsls	r6, r2, #17
    169a:	d4fb      	bmi.n	1694 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb0>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    169c:	b672      	cpsid	i
    169e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    16a2:	6343      	str	r3, [r0, #52]	; 0x34
    16a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    16a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    16aa:	62c3      	str	r3, [r0, #44]	; 0x2c
    16ac:	b662      	cpsie	i
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    16ae:	688b      	ldr	r3, [r1, #8]
    16b0:	2b00      	cmp	r3, #0
    16b2:	dd5a      	ble.n	176a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x186>
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    16b4:	4603      	mov	r3, r0
    16b6:	1c68      	adds	r0, r5, #1
    16b8:	4607      	mov	r7, r0
    16ba:	1c60      	adds	r0, r4, #1
    16bc:	4604      	mov	r4, r0
    16be:	680a      	ldr	r2, [r1, #0]
    16c0:	f8cd 8004 	str.w	r8, [sp, #4]
    16c4:	f10b 0b01 	add.w	fp, fp, #1
    16c8:	4618      	mov	r0, r3
    16ca:	46a2      	mov	sl, r4
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    16cc:	698c      	ldr	r4, [r1, #24]
    16ce:	1915      	adds	r5, r2, r4
    16d0:	5d14      	ldrb	r4, [r2, r4]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    16d2:	78ae      	ldrb	r6, [r5, #2]
    16d4:	786a      	ldrb	r2, [r5, #1]
    16d6:	fb0a f606 	mul.w	r6, sl, r6
    16da:	fb0b f404 	mul.w	r4, fp, r4
    16de:	f3c6 2607 	ubfx	r6, r6, #8, #8
    16e2:	fb07 f202 	mul.w	r2, r7, r2
    16e6:	1224      	asrs	r4, r4, #8
    16e8:	f446 467f 	orr.w	r6, r6, #65280	; 0xff00
    16ec:	1215      	asrs	r5, r2, #8
    16ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16f0:	0452      	lsls	r2, r2, #17
    16f2:	d4fc      	bmi.n	16ee <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x10a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    16f4:	b672      	cpsid	i
    16f6:	f046 5280 	orr.w	r2, r6, #268435456	; 0x10000000
    16fa:	6342      	str	r2, [r0, #52]	; 0x34
    16fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    16fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1702:	62c2      	str	r2, [r0, #44]	; 0x2c
    1704:	b662      	cpsie	i
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    1706:	022a      	lsls	r2, r5, #8
    1708:	b292      	uxth	r2, r2
		w |= b2;
    170a:	4322      	orrs	r2, r4
    170c:	b294      	uxth	r4, r2
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    170e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1710:	0452      	lsls	r2, r2, #17
    1712:	d4fc      	bmi.n	170e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1714:	b672      	cpsid	i
    1716:	f044 5280 	orr.w	r2, r4, #268435456	; 0x10000000
    171a:	6342      	str	r2, [r0, #52]	; 0x34
    171c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    171e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1722:	62c2      	str	r2, [r0, #44]	; 0x2c
    1724:	b662      	cpsie	i

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1726:	688c      	ldr	r4, [r1, #8]
    1728:	9400      	str	r4, [sp, #0]
    172a:	f991 2015 	ldrsb.w	r2, [r1, #21]
    172e:	680c      	ldr	r4, [r1, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1730:	f891 900c 	ldrb.w	r9, [r1, #12]
                d[1] = e[1] - d[1];
    1734:	7b4e      	ldrb	r6, [r1, #13]
                d[2] = e[2] - d[2];
    1736:	7b8d      	ldrb	r5, [r1, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1738:	f891 e00f 	ldrb.w	lr, [r1, #15]
                d[1] = e[1] - d[1];
    173c:	f891 8010 	ldrb.w	r8, [r1, #16]
                d[2] = e[2] - d[2];
    1740:	f891 c011 	ldrb.w	ip, [r1, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1744:	4422      	add	r2, r4
    1746:	9c00      	ldr	r4, [sp, #0]
    1748:	600a      	str	r2, [r1, #0]
    174a:	3c01      	subs	r4, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    174c:	ebc9 0e0e 	rsb	lr, r9, lr
                d[1] = e[1] - d[1];
    1750:	ebc6 0608 	rsb	r6, r6, r8
                d[2] = e[2] - d[2];
    1754:	ebc5 050c 	rsb	r5, r5, ip
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    1758:	2c00      	cmp	r4, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    175a:	f881 e00c 	strb.w	lr, [r1, #12]
                d[1] = e[1] - d[1];
    175e:	734e      	strb	r6, [r1, #13]
                d[2] = e[2] - d[2];
    1760:	738d      	strb	r5, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1762:	608c      	str	r4, [r1, #8]
    1764:	dcb2      	bgt.n	16cc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe8>
    1766:	f8dd 8004 	ldr.w	r8, [sp, #4]
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    176a:	6848      	ldr	r0, [r1, #4]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    176c:	4a1b      	ldr	r2, [pc, #108]	; (17dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    176e:	2800      	cmp	r0, #0
    1770:	bfb8      	it	lt
    1772:	301f      	addlt	r0, #31
    1774:	1140      	asrs	r0, r0, #5
    1776:	4611      	mov	r1, r2
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1778:	24ff      	movs	r4, #255	; 0xff
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    177a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    177c:	045e      	lsls	r6, r3, #17
    177e:	d4fc      	bmi.n	177a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1780:	b672      	cpsid	i
    1782:	634c      	str	r4, [r1, #52]	; 0x34
    1784:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    178a:	62cb      	str	r3, [r1, #44]	; 0x2c
    178c:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    178e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1790:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    1794:	d1fb      	bne.n	178e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1aa>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1796:	b672      	cpsid	i
    1798:	634b      	str	r3, [r1, #52]	; 0x34
    179a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    179c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    17a0:	62cb      	str	r3, [r1, #44]	; 0x2c
    17a2:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    17a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    17a6:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    17aa:	d1fb      	bne.n	17a4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1c0>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    17ac:	b672      	cpsid	i
    17ae:	634b      	str	r3, [r1, #52]	; 0x34
    17b0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    17b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    17b6:	62cb      	str	r3, [r1, #44]	; 0x2c
    17b8:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    17ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    17bc:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    17c0:	d1fb      	bne.n	17ba <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1d6>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    17c2:	b672      	cpsid	i
    17c4:	634b      	str	r3, [r1, #52]	; 0x34
    17c6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    17c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    17cc:	62cb      	str	r3, [r1, #44]	; 0x2c
    17ce:	b662      	cpsie	i
    17d0:	f110 30ff 	adds.w	r0, r0, #4294967295
    17d4:	d2d1      	bcs.n	177a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
			cli();
			if ((SPIX.SR & 0xF000) > 0) {
    17d6:	4a01      	ldr	r2, [pc, #4]	; (17dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    17d8:	e013      	b.n	1802 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
    17da:	bf00      	nop
    17dc:	4002c000 	.word	0x4002c000
    17e0:	4004c004 	.word	0x4004c004
    17e4:	4004c008 	.word	0x4004c008
    17e8:	4004b018 	.word	0x4004b018
    17ec:	4004b014 	.word	0x4004b014
    17f0:	00000475 	.word	0x00000475
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
    17f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    17f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    17fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    17fc:	2300      	movs	r3, #0
			} else {
				empty = true;
			}
			sei();
    17fe:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
    1800:	b943      	cbnz	r3, 1814 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x230>
			cli();
    1802:	b672      	cpsid	i
			if ((SPIX.SR & 0xF000) > 0) {
    1804:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1806:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    180a:	d1f3      	bne.n	17f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x210>
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
			} else {
				empty = true;
    180c:	2301      	movs	r3, #1
			}
			sei();
    180e:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
    1810:	2b00      	cmp	r3, #0
    1812:	d0f6      	beq.n	1802 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
			}
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
    1814:	492f      	ldr	r1, [pc, #188]	; (18d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1816:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1818:	4a2e      	ldr	r2, [pc, #184]	; (18d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    181a:	2b00      	cmp	r3, #0
    181c:	dafb      	bge.n	1816 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x232>
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
    181e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
    1820:	4e2d      	ldr	r6, [pc, #180]	; (18d8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f4>)
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
    1822:	f8d8 0018 	ldr.w	r0, [r8, #24]
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
    1826:	4d2d      	ldr	r5, [pc, #180]	; (18dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f8>)
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
    1828:	4c2d      	ldr	r4, [pc, #180]	; (18e0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2fc>)
    182a:	492e      	ldr	r1, [pc, #184]	; (18e4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x300>)
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
    182c:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    1830:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
    1832:	f44f 73a2 	mov.w	r3, #324	; 0x144
    1836:	6033      	str	r3, [r6, #0]
    1838:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
    183c:	602a      	str	r2, [r5, #0]
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
    183e:	6023      	str	r3, [r4, #0]
    1840:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    1844:	600b      	str	r3, [r1, #0]
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
    1846:	b150      	cbz	r0, 185e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
    1848:	6803      	ldr	r3, [r0, #0]
    184a:	4a27      	ldr	r2, [pc, #156]	; (18e8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x304>)
    184c:	685b      	ldr	r3, [r3, #4]
    184e:	4293      	cmp	r3, r2
    1850:	d13d      	bne.n	18ce <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ea>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    1852:	6842      	ldr	r2, [r0, #4]
    1854:	7b01      	ldrb	r1, [r0, #12]
    1856:	7813      	ldrb	r3, [r2, #0]
    1858:	ea23 0301 	bic.w	r3, r3, r1
    185c:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    185e:	4b1d      	ldr	r3, [pc, #116]	; (18d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
    1860:	f8d8 201c 	ldr.w	r2, [r8, #28]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    1864:	68d9      	ldr	r1, [r3, #12]
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
    1866:	f8d8 0020 	ldr.w	r0, [r8, #32]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    186a:	428a      	cmp	r2, r1
    186c:	d01f      	beq.n	18ae <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ca>
		uint32_t mcr = SPIX.MCR;
    186e:	4b19      	ldr	r3, [pc, #100]	; (18d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1870:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    1872:	044c      	lsls	r4, r1, #17
    1874:	d422      	bmi.n	18bc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2d8>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
    1876:	f441 4480 	orr.w	r4, r1, #16384	; 0x4000
    187a:	f044 0401 	orr.w	r4, r4, #1
    187e:	601c      	str	r4, [r3, #0]
			SPIX.CTAR0 = ctar0;
    1880:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
    1882:	6118      	str	r0, [r3, #16]
			SPIX.MCR = mcr;
    1884:	6019      	str	r1, [r3, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    1886:	b003      	add	sp, #12
    1888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    188c:	691b      	ldr	r3, [r3, #16]
    188e:	f1b3 4ff0 	cmp.w	r3, #2013265920	; 0x78000000
    1892:	f43f aee1 	beq.w	1658 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
		uint32_t mcr = SPIX.MCR;
    1896:	4b0f      	ldr	r3, [pc, #60]	; (18d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1898:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    189a:	0455      	lsls	r5, r2, #17
    189c:	f57f aed0 	bpl.w	1640 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x5c>
			SPIX.CTAR0 = ctar0;
    18a0:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
    18a4:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
    18a8:	60d8      	str	r0, [r3, #12]
			SPIX.CTAR1 = ctar1;
    18aa:	611a      	str	r2, [r3, #16]
    18ac:	e6d4      	b.n	1658 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    18ae:	691b      	ldr	r3, [r3, #16]
    18b0:	4298      	cmp	r0, r3
    18b2:	d0e8      	beq.n	1886 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a2>
		uint32_t mcr = SPIX.MCR;
    18b4:	4b07      	ldr	r3, [pc, #28]	; (18d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    18b6:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    18b8:	044c      	lsls	r4, r1, #17
    18ba:	d5dc      	bpl.n	1876 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x292>
			SPIX.CTAR0 = ctar0;
    18bc:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
    18be:	6118      	str	r0, [r3, #16]
    18c0:	b003      	add	sp, #12
    18c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18c6:	9100      	str	r1, [sp, #0]
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
    18c8:	4798      	blx	r3
    18ca:	9900      	ldr	r1, [sp, #0]
    18cc:	e6ad      	b.n	162a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
    18ce:	4798      	blx	r3
    18d0:	e7c5      	b.n	185e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
    18d2:	bf00      	nop
    18d4:	4002c000 	.word	0x4002c000
    18d8:	4004c008 	.word	0x4004c008
    18dc:	4004b018 	.word	0x4004b018
    18e0:	4004c004 	.word	0x4004c004
    18e4:	4004b014 	.word	0x4004b014
    18e8:	00000481 	.word	0x00000481

000018ec <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    18ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ee:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18f0:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    18f2:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    18f4:	789b      	ldrb	r3, [r3, #2]
    18f6:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    18f8:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    18fa:	9101      	str	r1, [sp, #4]
    18fc:	9202      	str	r2, [sp, #8]
    18fe:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1900:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    1904:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    1908:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    190c:	d017      	beq.n	193e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    190e:	2300      	movs	r3, #0
    1910:	f88d 3015 	strb.w	r3, [sp, #21]
    1914:	f88d 3014 	strb.w	r3, [sp, #20]
    1918:	f88d 3013 	strb.w	r3, [sp, #19]
    191c:	f88d 3012 	strb.w	r3, [sp, #18]
    1920:	f88d 3011 	strb.w	r3, [sp, #17]
    1924:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1928:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    192a:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    192c:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    192e:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    1930:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1934:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1936:	a901      	add	r1, sp, #4
    1938:	4798      	blx	r3
  }
    193a:	b009      	add	sp, #36	; 0x24
    193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    193e:	4a1b      	ldr	r2, [pc, #108]	; (19ac <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1940:	7813      	ldrb	r3, [r2, #0]
    1942:	3301      	adds	r3, #1
    1944:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1948:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    194c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    194e:	bf14      	ite	ne
    1950:	2280      	movne	r2, #128	; 0x80
    1952:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1954:	0799      	lsls	r1, r3, #30
    1956:	bf44      	itt	mi
    1958:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    195c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    195e:	075b      	lsls	r3, r3, #29
    1960:	bf48      	it	mi
    1962:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1966:	3210      	adds	r2, #16
    1968:	b2d2      	uxtb	r2, r2
    196a:	f10d 0313 	add.w	r3, sp, #19
    196e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1972:	f44f 7e80 	mov.w	lr, #256	; 0x100
    1976:	b1ac      	cbz	r4, 19a4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
    1978:	fb9e f4f4 	sdiv	r4, lr, r4
    197c:	b2e4      	uxtb	r4, r4
    197e:	1c61      	adds	r1, r4, #1
    1980:	b2c9      	uxtb	r1, r1
    1982:	fb01 2502 	mla	r5, r1, r2, r2
    1986:	122d      	asrs	r5, r5, #8
    1988:	7019      	strb	r1, [r3, #0]
    198a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    198c:	b105      	cbz	r5, 1990 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
    198e:	3e01      	subs	r6, #1
    1990:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    1994:	b101      	cbz	r1, 1998 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
    1996:	701c      	strb	r4, [r3, #0]
    1998:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    199a:	42bb      	cmp	r3, r7
    199c:	d0c4      	beq.n	1928 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
    199e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    19a0:	2c00      	cmp	r4, #0
    19a2:	d1e9      	bne.n	1978 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
    19a4:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    19a6:	f803 4c03 	strb.w	r4, [r3, #-3]
    19aa:	e7f5      	b.n	1998 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
    19ac:	1fff8c70 	.word	0x1fff8c70

000019b0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    19b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19b2:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19b4:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    19b6:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    19b8:	789b      	ldrb	r3, [r3, #2]
    19ba:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    19bc:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    19be:	9101      	str	r1, [sp, #4]
    19c0:	9202      	str	r2, [sp, #8]
    19c2:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19c4:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    19c8:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    19cc:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    19d0:	d016      	beq.n	1a00 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    19d2:	2300      	movs	r3, #0
    19d4:	f88d 3015 	strb.w	r3, [sp, #21]
    19d8:	f88d 3014 	strb.w	r3, [sp, #20]
    19dc:	f88d 3013 	strb.w	r3, [sp, #19]
    19e0:	f88d 3012 	strb.w	r3, [sp, #18]
    19e4:	f88d 3011 	strb.w	r3, [sp, #17]
    19e8:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    19ec:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    19ee:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    19f0:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    19f2:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    19f6:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    19f8:	a901      	add	r1, sp, #4
    19fa:	4790      	blx	r2
  }
    19fc:	b009      	add	sp, #36	; 0x24
    19fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    1a00:	4a1b      	ldr	r2, [pc, #108]	; (1a70 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1a02:	7813      	ldrb	r3, [r2, #0]
    1a04:	3301      	adds	r3, #1
    1a06:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1a0a:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1a0e:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1a10:	bf14      	ite	ne
    1a12:	2280      	movne	r2, #128	; 0x80
    1a14:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1a16:	0799      	lsls	r1, r3, #30
    1a18:	bf44      	itt	mi
    1a1a:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    1a1e:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    1a20:	075b      	lsls	r3, r3, #29
    1a22:	bf48      	it	mi
    1a24:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1a28:	3210      	adds	r2, #16
    1a2a:	b2d2      	uxtb	r2, r2
    1a2c:	f10d 0313 	add.w	r3, sp, #19
    1a30:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1a34:	f44f 7e80 	mov.w	lr, #256	; 0x100
    1a38:	b1ac      	cbz	r4, 1a66 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
    1a3a:	fb9e f4f4 	sdiv	r4, lr, r4
    1a3e:	b2e4      	uxtb	r4, r4
    1a40:	1c61      	adds	r1, r4, #1
    1a42:	b2c9      	uxtb	r1, r1
    1a44:	fb01 2502 	mla	r5, r1, r2, r2
    1a48:	122d      	asrs	r5, r5, #8
    1a4a:	7019      	strb	r1, [r3, #0]
    1a4c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    1a4e:	b105      	cbz	r5, 1a52 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
    1a50:	3e01      	subs	r6, #1
    1a52:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    1a56:	b101      	cbz	r1, 1a5a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
    1a58:	701c      	strb	r4, [r3, #0]
    1a5a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    1a5c:	42bb      	cmp	r3, r7
    1a5e:	d0c5      	beq.n	19ec <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
    1a60:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1a62:	2c00      	cmp	r4, #0
    1a64:	d1e9      	bne.n	1a3a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
    1a66:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    1a68:	f803 4c03 	strb.w	r4, [r3, #-3]
    1a6c:	e7f5      	b.n	1a5a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
    1a6e:	bf00      	nop
    1a70:	1fff8c70 	.word	0x1fff8c70

00001a74 <pride()>:
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    1a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1a78:	4bb1      	ldr	r3, [pc, #708]	; (1d40 <pride()+0x2cc>)
    1a7a:	781a      	ldrb	r2, [r3, #0]
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    1a7c:	b08d      	sub	sp, #52	; 0x34
	if (mode_change) {
    1a7e:	b132      	cbz	r2, 1a8e <pride()+0x1a>
		mode_change = 0;
		use_palette = 0;
    1a80:	4cb0      	ldr	r4, [pc, #704]	; (1d44 <pride()+0x2d0>)
    this_delay = 10;
    1a82:	49b1      	ldr	r1, [pc, #708]	; (1d48 <pride()+0x2d4>)

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    1a84:	2200      	movs	r2, #0
		use_palette = 0;
    this_delay = 10;
    1a86:	200a      	movs	r0, #10
// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    1a88:	7022      	strb	r2, [r4, #0]

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    1a8a:	701a      	strb	r2, [r3, #0]
		use_palette = 0;
    this_delay = 10;
    1a8c:	6008      	str	r0, [r1, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a8e:	48af      	ldr	r0, [pc, #700]	; (1d4c <pride()+0x2d8>)
    1a90:	6803      	ldr	r3, [r0, #0]
    1a92:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    1a94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1a96:	f645 7328 	movw	r3, #24360	; 0x5f28
    1a9a:	fb03 f202 	mul.w	r2, r3, r2
    1a9e:	0c12      	lsrs	r2, r2, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1aa0:	0455      	lsls	r5, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1aa2:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1aa6:	d503      	bpl.n	1ab0 <pride()+0x3c>
    1aa8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1aac:	3307      	adds	r3, #7
    1aae:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1ab0:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    1ab2:	4fa7      	ldr	r7, [pc, #668]	; (1d50 <pride()+0x2dc>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1ab4:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 1d68 <pride()+0x2f4>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ab8:	5c7c      	ldrb	r4, [r7, r1]
    1aba:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    1abe:	f3c3 0346 	ubfx	r3, r3, #1, #7
    1ac2:	fb04 1303 	mla	r3, r4, r3, r1
    1ac6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1ac8:	0414      	lsls	r4, r2, #16
    1aca:	bf48      	it	mi
    1acc:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ace:	6802      	ldr	r2, [r0, #0]
    1ad0:	920a      	str	r2, [sp, #40]	; 0x28
    1ad2:	b21b      	sxth	r3, r3
	}
	static uint16_t sPseudotime = 0;
	static uint16_t sLastMillis = 0;
	static uint16_t sHue16 = 0;

	uint8_t sat8 = beatsin88(87, 220, 250);
    1ad4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    1ad8:	990a      	ldr	r1, [sp, #40]	; 0x28
    1ada:	4a9e      	ldr	r2, [pc, #632]	; (1d54 <pride()+0x2e0>)
    1adc:	b29b      	uxth	r3, r3
    1ade:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    1ae2:	fb02 f201 	mul.w	r2, r2, r1
    1ae6:	0c1b      	lsrs	r3, r3, #16
    1ae8:	0c12      	lsrs	r2, r2, #16
    1aea:	33dc      	adds	r3, #220	; 0xdc
    1aec:	b2db      	uxtb	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1aee:	0451      	lsls	r1, r2, #17
    1af0:	9300      	str	r3, [sp, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1af2:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1af6:	d503      	bpl.n	1b00 <pride()+0x8c>
    1af8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1afc:	3307      	adds	r3, #7
    1afe:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1b00:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1b02:	f3c3 0346 	ubfx	r3, r3, #1, #7
    1b06:	5c7c      	ldrb	r4, [r7, r1]
    1b08:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    1b0c:	fb04 1303 	mla	r3, r4, r3, r1

    if( theta & 0x8000 ) y = -y;
    1b10:	0416      	lsls	r6, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1b12:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1b14:	bf48      	it	mi
    1b16:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b18:	6802      	ldr	r2, [r0, #0]
    1b1a:	9209      	str	r2, [sp, #36]	; 0x24
    1b1c:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1b1e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1b22:	b29b      	uxth	r3, r3
	return ret;
    1b24:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b26:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1b2a:	f64d 6208 	movw	r2, #56840	; 0xde08
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1b2e:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1b30:	fb02 f201 	mul.w	r2, r2, r1
    1b34:	0c12      	lsrs	r2, r2, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1b36:	3360      	adds	r3, #96	; 0x60
    1b38:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b3a:	0455      	lsls	r5, r2, #17
    1b3c:	9301      	str	r3, [sp, #4]
	uint8_t brightdepth = beatsin88(341, 96, 224);
    1b3e:	fa5f f983 	uxtb.w	r9, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1b42:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b46:	d503      	bpl.n	1b50 <pride()+0xdc>
    1b48:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1b4c:	3307      	adds	r3, #7
    1b4e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1b50:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1b52:	f3c3 0346 	ubfx	r3, r3, #1, #7
    1b56:	5c7c      	ldrb	r4, [r7, r1]
    1b58:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    1b5c:	fb04 1303 	mla	r3, r4, r3, r1
    1b60:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1b62:	0414      	lsls	r4, r2, #16
    1b64:	bf48      	it	mi
    1b66:	425b      	negmi	r3, r3
    1b68:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b6a:	6802      	ldr	r2, [r0, #0]
    1b6c:	9208      	str	r2, [sp, #32]
    1b6e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1b72:	b29b      	uxth	r3, r3
    1b74:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
	return ret;
    1b78:	9908      	ldr	r1, [sp, #32]
    1b7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1b7e:	f24a 02c8 	movw	r2, #41160	; 0xa0c8
    1b82:	fb02 f201 	mul.w	r2, r2, r1
    1b86:	0c12      	lsrs	r2, r2, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1b88:	0c1b      	lsrs	r3, r3, #16
    1b8a:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b8e:	0451      	lsls	r1, r2, #17
    1b90:	fa1f fb83 	uxth.w	fp, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1b94:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b98:	d503      	bpl.n	1ba2 <pride()+0x12e>
    1b9a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1b9e:	3307      	adds	r3, #7
    1ba0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1ba2:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ba4:	f3c3 0346 	ubfx	r3, r3, #1, #7
    1ba8:	5c7c      	ldrb	r4, [r7, r1]
    1baa:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
	uint16_t brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
    1bae:	4d6a      	ldr	r5, [pc, #424]	; (1d58 <pride()+0x2e4>)
    1bb0:	fb04 1303 	mla	r3, r4, r3, r1

    if( theta & 0x8000 ) y = -y;
    1bb4:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1bb6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1bb8:	bf48      	it	mi
    1bba:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bbc:	6802      	ldr	r2, [r0, #0]
    1bbe:	9207      	str	r2, [sp, #28]
    1bc0:	b21b      	sxth	r3, r3
    1bc2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1bc6:	b29b      	uxth	r3, r3
    1bc8:	2126      	movs	r1, #38	; 0x26
	return ret;
    1bca:	9c07      	ldr	r4, [sp, #28]
    1bcc:	f8b5 a000 	ldrh.w	sl, [r5]
    1bd0:	fb01 f103 	mul.w	r1, r1, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1bd4:	f647 3398 	movw	r3, #31640	; 0x7b98
    1bd8:	fb03 f404 	mul.w	r4, r3, r4
    1bdc:	0c24      	lsrs	r4, r4, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1bde:	0c09      	lsrs	r1, r1, #16
    1be0:	3117      	adds	r1, #23
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1be2:	0466      	lsls	r6, r4, #17
    1be4:	b289      	uxth	r1, r1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1be6:	f3c4 02ca 	ubfx	r2, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1bea:	d503      	bpl.n	1bf4 <pride()+0x180>
    1bec:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1bf0:	3207      	adds	r2, #7
    1bf2:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1bf4:	0a16      	lsrs	r6, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1bf6:	f3c2 0246 	ubfx	r2, r2, #1, #7
    1bfa:	f817 e006 	ldrb.w	lr, [r7, r6]
    1bfe:	f838 6016 	ldrh.w	r6, [r8, r6, lsl #1]
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    1c02:	f8df c168 	ldr.w	ip, [pc, #360]	; 1d6c <pride()+0x2f8>
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1c06:	4b55      	ldr	r3, [pc, #340]	; (1d5c <pride()+0x2e8>)
    1c08:	fb0e 6202 	mla	r2, lr, r2, r6

    if( theta & 0x8000 ) y = -y;
    1c0c:	0424      	lsls	r4, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1c0e:	b292      	uxth	r2, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c10:	6804      	ldr	r4, [r0, #0]
    1c12:	9405      	str	r4, [sp, #20]

    if( theta & 0x8000 ) y = -y;
    1c14:	bf48      	it	mi
    1c16:	4252      	negmi	r2, r2
	return ret;
    1c18:	9e05      	ldr	r6, [sp, #20]

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    1c1a:	f8bc 4000 	ldrh.w	r4, [ip]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c1e:	6800      	ldr	r0, [r0, #0]
    1c20:	9006      	str	r0, [sp, #24]
    1c22:	b212      	sxth	r2, r2
    1c24:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
    1c28:	b2b6      	uxth	r6, r6
    1c2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1c2e:	b292      	uxth	r2, r2
	uint16_t deltams = ms - sLastMillis;
    1c30:	1b34      	subs	r4, r6, r4
    1c32:	fb00 f202 	mul.w	r2, r0, r2
	sLastMillis = ms;
    1c36:	f8ac 6000 	strh.w	r6, [ip]
	sPseudotime += deltams * msmultiplier;
    1c3a:	8818      	ldrh	r0, [r3, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1c3c:	4e48      	ldr	r6, [pc, #288]	; (1d60 <pride()+0x2ec>)
	return ret;
    1c3e:	f8dd c018 	ldr.w	ip, [sp, #24]

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    1c42:	b2a4      	uxth	r4, r4
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1c44:	fb14 0001 	smlabb	r0, r4, r1, r0
    1c48:	fb06 f10c 	mul.w	r1, r6, ip
    1c4c:	0c09      	lsrs	r1, r1, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1c4e:	0c12      	lsrs	r2, r2, #16
    1c50:	b280      	uxth	r0, r0
    1c52:	3201      	adds	r2, #1
    1c54:	8018      	strh	r0, [r3, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c56:	044b      	lsls	r3, r1, #17
    1c58:	b296      	uxth	r6, r2
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1c5a:	f3c1 02ca 	ubfx	r2, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c5e:	d503      	bpl.n	1c68 <pride()+0x1f4>
    1c60:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1c64:	3207      	adds	r2, #7
    1c66:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1c68:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1c6c:	f3c2 0246 	ubfx	r2, r2, #1, #7
    1c70:	f817 c00e 	ldrb.w	ip, [r7, lr]
    1c74:	f838 e01e 	ldrh.w	lr, [r8, lr, lsl #1]
    1c78:	fb0c e202 	mla	r2, ip, r2, lr
    1c7c:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    1c7e:	040b      	lsls	r3, r1, #16
    1c80:	bf48      	it	mi
    1c82:	4252      	negmi	r2, r2
    1c84:	b212      	sxth	r2, r2
	sHue16 += deltams * beatsin88(400, 5, 9);
    1c86:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    1c8a:	b292      	uxth	r2, r2
    1c8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1c90:	0c12      	lsrs	r2, r2, #16
    1c92:	3205      	adds	r2, #5
    1c94:	ea6f 0909 	mvn.w	r9, r9
    1c98:	fa5f f989 	uxtb.w	r9, r9
    1c9c:	b292      	uxth	r2, r2
    1c9e:	fb04 a202 	mla	r2, r4, r2, sl
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1ca2:	464b      	mov	r3, r9
    1ca4:	4458      	add	r0, fp

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    1ca6:	802a      	strh	r2, [r5, #0]
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1ca8:	46d1      	mov	r9, sl
    1caa:	b284      	uxth	r4, r0

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    1cac:	2595      	movs	r5, #149	; 0x95
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1cae:	469a      	mov	sl, r3
		hue16 += hueinc16;
    1cb0:	eb09 0306 	add.w	r3, r9, r6
    1cb4:	fa1f f983 	uxth.w	r9, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1cb8:	0461      	lsls	r1, r4, #17
		uint8_t hue8 = hue16 / 256;
    1cba:	ea4f 2e19 	mov.w	lr, r9, lsr #8
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1cbe:	f3c4 02ca 	ubfx	r2, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1cc2:	d503      	bpl.n	1ccc <pride()+0x258>
    1cc4:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1cc8:	3207      	adds	r2, #7
    1cca:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1ccc:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1cce:	f3c2 0146 	ubfx	r1, r2, #1, #7
    1cd2:	f817 c000 	ldrb.w	ip, [r7, r0]
    1cd6:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1cda:	f88d e010 	strb.w	lr, [sp, #16]
    1cde:	fb0c 2201 	mla	r2, ip, r1, r2

    if( theta & 0x8000 ) y = -y;
    1ce2:	0423      	lsls	r3, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ce4:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    1ce6:	bf48      	it	mi
    1ce8:	4252      	negmi	r2, r2
    1cea:	b212      	sxth	r2, r2

		brightnesstheta16 += brightnessthetainc16;
		uint16_t b16 = sin16(brightnesstheta16) + 32768;

		uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    1cec:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    1cf0:	b292      	uxth	r2, r2
		uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    1cf2:	9b01      	ldr	r3, [sp, #4]
    1cf4:	fb02 f202 	mul.w	r2, r2, r2
    1cf8:	0c12      	lsrs	r2, r2, #16
    1cfa:	fb03 f202 	mul.w	r2, r3, r2
    1cfe:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1d02:	4452      	add	r2, sl
    1d04:	f89d 3000 	ldrb.w	r3, [sp]
    1d08:	f88d 2012 	strb.w	r2, [sp, #18]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1d0c:	a903      	add	r1, sp, #12
    1d0e:	a804      	add	r0, sp, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1d10:	f88d 3011 	strb.w	r3, [sp, #17]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1d14:	f001 fa32 	bl	317c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(hue8, sat8, bri8);

		uint16_t pixelnumber = i;
		pixelnumber = (NUM_LEDS - 1) - pixelnumber;
		nblend( leds[pixelnumber], newcolor, 64);
    1d18:	4b12      	ldr	r3, [pc, #72]	; (1d64 <pride()+0x2f0>)
    1d1a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1d1e:	4418      	add	r0, r3
    1d20:	2240      	movs	r2, #64	; 0x40
    1d22:	a903      	add	r1, sp, #12
    1d24:	3d01      	subs	r5, #1
    1d26:	f001 f88f 	bl	2e48 <nblend(CRGB&, CRGB const&, unsigned char)>
    1d2a:	b2ad      	uxth	r5, r5
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	uint16_t brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1d30:	445c      	add	r4, fp
    1d32:	429d      	cmp	r5, r3
    1d34:	b2a4      	uxth	r4, r4
    1d36:	d1bb      	bne.n	1cb0 <pride()+0x23c>

		uint16_t pixelnumber = i;
		pixelnumber = (NUM_LEDS - 1) - pixelnumber;
		nblend( leds[pixelnumber], newcolor, 64);
	}
}
    1d38:	b00d      	add	sp, #52	; 0x34
    1d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d3e:	bf00      	nop
    1d40:	1fff8760 	.word	0x1fff8760
    1d44:	1fff8756 	.word	0x1fff8756
    1d48:	1fff8758 	.word	0x1fff8758
    1d4c:	1fff94e8 	.word	0x1fff94e8
    1d50:	000068e4 	.word	0x000068e4
    1d54:	000174f8 	.word	0x000174f8
    1d58:	1fff906e 	.word	0x1fff906e
    1d5c:	1fff91f4 	.word	0x1fff91f4
    1d60:	0001b580 	.word	0x0001b580
    1d64:	1fff8db0 	.word	0x1fff8db0
    1d68:	000072c8 	.word	0x000072c8
    1d6c:	1fff946c 	.word	0x1fff946c

00001d70 <colorwave()>:
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    1d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1d74:	4bbb      	ldr	r3, [pc, #748]	; (2064 <colorwave()+0x2f4>)
    1d76:	781a      	ldrb	r2, [r3, #0]
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    1d78:	b08d      	sub	sp, #52	; 0x34
	if (mode_change) {
    1d7a:	b13a      	cbz	r2, 1d8c <colorwave()+0x1c>
		use_palette = 1;
    1d7c:	4cba      	ldr	r4, [pc, #744]	; (2068 <colorwave()+0x2f8>)
		mode_change = 0;
		this_delay = 10;
    1d7e:	49bb      	ldr	r1, [pc, #748]	; (206c <colorwave()+0x2fc>)
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    1d80:	2501      	movs	r5, #1
		mode_change = 0;
		this_delay = 10;
    1d82:	200a      	movs	r0, #10
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    1d84:	2200      	movs	r2, #0
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    1d86:	7025      	strb	r5, [r4, #0]
		mode_change = 0;
		this_delay = 10;
    1d88:	6008      	str	r0, [r1, #0]
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    1d8a:	701a      	strb	r2, [r3, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d8c:	49b8      	ldr	r1, [pc, #736]	; (2070 <colorwave()+0x300>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1d8e:	4bb9      	ldr	r3, [pc, #740]	; (2074 <colorwave()+0x304>)
    1d90:	680a      	ldr	r2, [r1, #0]
    1d92:	920b      	str	r2, [sp, #44]	; 0x2c
	return ret;
    1d94:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1d96:	fb03 f000 	mul.w	r0, r3, r0
    1d9a:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1d9c:	0447      	lsls	r7, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1d9e:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1da2:	d503      	bpl.n	1dac <colorwave()+0x3c>
    1da4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1da8:	3307      	adds	r3, #7
    1daa:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1dac:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    1dae:	f8df a30c 	ldr.w	sl, [pc, #780]	; 20bc <colorwave()+0x34c>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1db2:	f8df b30c 	ldr.w	fp, [pc, #780]	; 20c0 <colorwave()+0x350>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1db6:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1dba:	f83b 4012 	ldrh.w	r4, [fp, r2, lsl #1]
    1dbe:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1dc2:	fb05 4302 	mla	r3, r5, r2, r4

    if( theta & 0x8000 ) y = -y;
    1dc6:	0406      	lsls	r6, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1dc8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1dca:	bf48      	it	mi
    1dcc:	425b      	negmi	r3, r3
    1dce:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dd0:	680a      	ldr	r2, [r1, #0]
    1dd2:	920a      	str	r2, [sp, #40]	; 0x28
		this_delay = 10;
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
    1dd4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1dd8:	b29b      	uxth	r3, r3
    1dda:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
	return ret;
    1dde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1de0:	0c18      	lsrs	r0, r3, #16
    1de2:	f64d 6308 	movw	r3, #56840	; 0xde08
    1de6:	fb03 f404 	mul.w	r4, r3, r4
    1dea:	0c24      	lsrs	r4, r4, #16
    1dec:	4ba2      	ldr	r3, [pc, #648]	; (2078 <colorwave()+0x308>)
    1dee:	3060      	adds	r0, #96	; 0x60
    1df0:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1df2:	0465      	lsls	r5, r4, #17
    1df4:	7018      	strb	r0, [r3, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1df6:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1dfa:	d503      	bpl.n	1e04 <colorwave()+0x94>
    1dfc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1e00:	3307      	adds	r3, #7
    1e02:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1e04:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1e06:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1e0a:	f81a 6005 	ldrb.w	r6, [sl, r5]
    1e0e:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
    1e12:	fb06 3302 	mla	r3, r6, r2, r3
    1e16:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1e18:	0422      	lsls	r2, r4, #16
    1e1a:	bf48      	it	mi
    1e1c:	425b      	negmi	r3, r3
    1e1e:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e20:	680a      	ldr	r2, [r1, #0]
    1e22:	9209      	str	r2, [sp, #36]	; 0x24
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1e24:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1e28:	b29b      	uxth	r3, r3
    1e2a:	ebc3 1903 	rsb	r9, r3, r3, lsl #4
	return ret;
    1e2e:	9c09      	ldr	r4, [sp, #36]	; 0x24
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    1e30:	4a92      	ldr	r2, [pc, #584]	; (207c <colorwave()+0x30c>)
    1e32:	eb03 2909 	add.w	r9, r3, r9, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1e36:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    1e3a:	fb03 f404 	mul.w	r4, r3, r4
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1e3e:	ea4f 4919 	mov.w	r9, r9, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1e42:	0c24      	lsrs	r4, r4, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1e44:	f509 59c8 	add.w	r9, r9, #6400	; 0x1900
    1e48:	fa1f f389 	uxth.w	r3, r9
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e4c:	0467      	lsls	r7, r4, #17
    1e4e:	9303      	str	r3, [sp, #12]
    1e50:	8013      	strh	r3, [r2, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1e52:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e56:	d503      	bpl.n	1e60 <colorwave()+0xf0>
    1e58:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1e5c:	3307      	adds	r3, #7
    1e5e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1e60:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1e62:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1e66:	f81a 6005 	ldrb.w	r6, [sl, r5]
    1e6a:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
    1e6e:	f8df 8254 	ldr.w	r8, [pc, #596]	; 20c4 <colorwave()+0x354>
    1e72:	fb06 3302 	mla	r3, r6, r2, r3
    1e76:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1e78:	0426      	lsls	r6, r4, #16
    1e7a:	bf48      	it	mi
    1e7c:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e7e:	680a      	ldr	r2, [r1, #0]
    1e80:	9208      	str	r2, [sp, #32]
    1e82:	b21b      	sxth	r3, r3
    1e84:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1e88:	b29b      	uxth	r3, r3
	return ret;
    1e8a:	9d08      	ldr	r5, [sp, #32]
    1e8c:	f8b8 e000 	ldrh.w	lr, [r8]
    1e90:	2226      	movs	r2, #38	; 0x26
    1e92:	fb02 f203 	mul.w	r2, r2, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1e96:	f647 3498 	movw	r4, #31640	; 0x7b98
    1e9a:	fb04 f405 	mul.w	r4, r4, r5
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1e9e:	0c12      	lsrs	r2, r2, #16
		this_delay = 10;
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);
    1ea0:	4b77      	ldr	r3, [pc, #476]	; (2080 <colorwave()+0x310>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1ea2:	0c24      	lsrs	r4, r4, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1ea4:	3217      	adds	r2, #23
    1ea6:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1ea8:	0465      	lsls	r5, r4, #17
    1eaa:	701a      	strb	r2, [r3, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1eac:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1eb0:	d503      	bpl.n	1eba <colorwave()+0x14a>
    1eb2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1eb6:	3307      	adds	r3, #7
    1eb8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1eba:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ebc:	f3c3 0546 	ubfx	r5, r3, #1, #7
    1ec0:	f81a 3006 	ldrb.w	r3, [sl, r6]
    1ec4:	f83b 6016 	ldrh.w	r6, [fp, r6, lsl #1]

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    1ec8:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 20c8 <colorwave()+0x358>
    1ecc:	fb03 6305 	mla	r3, r3, r5, r6

    if( theta & 0x8000 ) y = -y;
    1ed0:	0427      	lsls	r7, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ed2:	b29b      	uxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ed4:	680c      	ldr	r4, [r1, #0]
    1ed6:	9406      	str	r4, [sp, #24]

    if( theta & 0x8000 ) y = -y;
    1ed8:	bf48      	it	mi
    1eda:	425b      	negmi	r3, r3
    1edc:	b21b      	sxth	r3, r3
	return ret;
    1ede:	9f06      	ldr	r7, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ee0:	6809      	ldr	r1, [r1, #0]
    1ee2:	f8bc 4000 	ldrh.w	r4, [ip]
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1ee6:	4e67      	ldr	r6, [pc, #412]	; (2084 <colorwave()+0x314>)
    1ee8:	9107      	str	r1, [sp, #28]
    1eea:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1eee:	f240 41b1 	movw	r1, #1201	; 0x4b1
    1ef2:	b29b      	uxth	r3, r3
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    1ef4:	b2bf      	uxth	r7, r7
    1ef6:	fb01 f303 	mul.w	r3, r1, r3
    1efa:	4963      	ldr	r1, [pc, #396]	; (2088 <colorwave()+0x318>)
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1efc:	8835      	ldrh	r5, [r6, #0]
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    1efe:	800f      	strh	r7, [r1, #0]
	deltams = ms - sLastMillis;
    1f00:	1b3c      	subs	r4, r7, r4
    1f02:	b2a4      	uxth	r4, r4
    1f04:	4961      	ldr	r1, [pc, #388]	; (208c <colorwave()+0x31c>)
	sLastMillis = ms;
    1f06:	f8ac 7000 	strh.w	r7, [ip]
	sPseudotime += deltams * msmultiplier;
    1f0a:	fb14 5202 	smlabb	r2, r4, r2, r5
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1f0e:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 20cc <colorwave()+0x35c>
	return ret;
    1f12:	9d07      	ldr	r5, [sp, #28]

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    1f14:	800c      	strh	r4, [r1, #0]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1f16:	0c1b      	lsrs	r3, r3, #16
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1f18:	b291      	uxth	r1, r2
    1f1a:	8031      	strh	r1, [r6, #0]
    1f1c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);
    1f20:	4e5b      	ldr	r6, [pc, #364]	; (2090 <colorwave()+0x320>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1f22:	fb0c f505 	mul.w	r5, ip, r5
    1f26:	0c2d      	lsrs	r5, r5, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1f28:	b29b      	uxth	r3, r3
    1f2a:	8033      	strh	r3, [r6, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1f2c:	046e      	lsls	r6, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1f2e:	f3c5 02ca 	ubfx	r2, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1f32:	d503      	bpl.n	1f3c <colorwave()+0x1cc>
    1f34:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1f38:	3207      	adds	r2, #7
    1f3a:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1f3c:	0a16      	lsrs	r6, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f3e:	f3c2 0246 	ubfx	r2, r2, #1, #7
    1f42:	f81a 7006 	ldrb.w	r7, [sl, r6]
    1f46:	f83b 6016 	ldrh.w	r6, [fp, r6, lsl #1]
    1f4a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 20d0 <colorwave()+0x360>
    1f4e:	fb07 6202 	mla	r2, r7, r2, r6
    1f52:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    1f54:	042d      	lsls	r5, r5, #16
    1f56:	bf48      	it	mi
    1f58:	4252      	negmi	r2, r2
    1f5a:	b212      	sxth	r2, r2

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    1f5c:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    1f60:	b292      	uxth	r2, r2
    1f62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1f66:	0c12      	lsrs	r2, r2, #16
    1f68:	3205      	adds	r2, #5
    1f6a:	b292      	uxth	r2, r2
    1f6c:	fb04 e402 	mla	r4, r4, r2, lr
	brightnesstheta16 = sPseudotime;
    1f70:	4f48      	ldr	r7, [pc, #288]	; (2094 <colorwave()+0x324>)
    1f72:	4e49      	ldr	r6, [pc, #292]	; (2098 <colorwave()+0x328>)
    1f74:	9a03      	ldr	r2, [sp, #12]

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    1f76:	f8a8 4000 	strh.w	r4, [r8]
	brightnesstheta16 = sPseudotime;
    1f7a:	2595      	movs	r5, #149	; 0x95
    1f7c:	4c47      	ldr	r4, [pc, #284]	; (209c <colorwave()+0x32c>)
    1f7e:	9503      	str	r5, [sp, #12]
    1f80:	eb05 0845 	add.w	r8, r5, r5, lsl #1
    1f84:	44a0      	add	r8, r4
    1f86:	2404      	movs	r4, #4

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
    1f88:	4473      	add	r3, lr
    1f8a:	b29b      	uxth	r3, r3
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
    1f8c:	ea4f 1ed3 	mov.w	lr, r3, lsr #7
			if (h16_128 & 0x100) {
    1f90:	f41e 7f80 	tst.w	lr, #256	; 0x100
				hue8 = 255 - (h16_128 >> 1);
    1f94:	ea6f 2c13 	mvn.w	ip, r3, lsr #8
			}
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
    1f98:	440a      	add	r2, r1
    1f9a:	b292      	uxth	r2, r2
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
    1f9c:	fa5f fc8c 	uxtb.w	ip, ip
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
    1fa0:	8033      	strh	r3, [r6, #0]
			h16_128 = hue16 >> 7;
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
			}
			else {
				hue8 = h16_128 >> 1;
    1fa2:	bf08      	it	eq
    1fa4:	ea4f 2c13 	moveq.w	ip, r3, lsr #8

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
    1fa8:	4d3d      	ldr	r5, [pc, #244]	; (20a0 <colorwave()+0x330>)
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
			}
			else {
				hue8 = h16_128 >> 1;
    1faa:	4b3e      	ldr	r3, [pc, #248]	; (20a4 <colorwave()+0x334>)

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			hue16 += hueinc16;
			hue8 = hue16 / 256;
			h16_128 = hue16 >> 7;
    1fac:	f8a5 e000 	strh.w	lr, [r5]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fb0:	0451      	lsls	r1, r2, #17
			if (h16_128 & 0x100) {
				hue8 = 255 - (h16_128 >> 1);
			}
			else {
				hue8 = h16_128 >> 1;
    1fb2:	f883 c000 	strb.w	ip, [r3]
			}

			brightnesstheta16 += brightnessthetainc16;
    1fb6:	803a      	strh	r2, [r7, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1fb8:	f3c2 0eca 	ubfx	lr, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fbc:	d505      	bpl.n	1fca <colorwave()+0x25a>
    1fbe:	f5ce 6eff 	rsb	lr, lr, #2040	; 0x7f8
    1fc2:	f10e 0e07 	add.w	lr, lr, #7
    1fc6:	fa1f fe8e 	uxth.w	lr, lr

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1fca:	ea4f 211e 	mov.w	r1, lr, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1fce:	f3ce 0346 	ubfx	r3, lr, #1, #7
    1fd2:	f81a e001 	ldrb.w	lr, [sl, r1]
    1fd6:	f83b 1011 	ldrh.w	r1, [fp, r1, lsl #1]
			b16 = sin16(brightnesstheta16) + 32768;

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    1fda:	4d33      	ldr	r5, [pc, #204]	; (20a8 <colorwave()+0x338>)
    1fdc:	fb0e 1e03 	mla	lr, lr, r3, r1
    1fe0:	fa1f fe8e 	uxth.w	lr, lr

    if( theta & 0x8000 ) y = -y;
    1fe4:	0413      	lsls	r3, r2, #16
    1fe6:	bf48      	it	mi
    1fe8:	f1ce 0e00 	rsbmi	lr, lr, #0
    1fec:	fa0f fe8e 	sxth.w	lr, lr
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;
    1ff0:	f5ae 4e00 	sub.w	lr, lr, #32768	; 0x8000
    1ff4:	fa1f fe8e 	uxth.w	lr, lr

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    1ff8:	fb0e f20e 	mul.w	r2, lr, lr
    1ffc:	0c12      	lsrs	r2, r2, #16
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    1ffe:	fb02 f300 	mul.w	r3, r2, r0
    2002:	43c0      	mvns	r0, r0
    2004:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    2008:	ebcc 130c 	rsb	r3, ip, ip, lsl #4
    200c:	eb0c 1c03 	add.w	ip, ip, r3, lsl #4

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2010:	2301      	movs	r3, #1
    2012:	9300      	str	r3, [sp, #0]
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    2014:	802a      	strh	r2, [r5, #0]
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;
    2016:	4b25      	ldr	r3, [pc, #148]	; (20ac <colorwave()+0x33c>)

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    2018:	4d25      	ldr	r5, [pc, #148]	; (20b0 <colorwave()+0x340>)
			else {
				hue8 = h16_128 >> 1;
			}

			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;
    201a:	f8a3 e000 	strh.w	lr, [r3]
    201e:	f3cc 2c07 	ubfx	ip, ip, #8, #8

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    2022:	b2c0      	uxtb	r0, r0

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2024:	4603      	mov	r3, r0
    2026:	4662      	mov	r2, ip
			brightnesstheta16 += brightnessthetainc16;
			b16 = sin16(brightnesstheta16) + 32768;

			bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);
    2028:	7028      	strb	r0, [r5, #0]

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    202a:	4922      	ldr	r1, [pc, #136]	; (20b4 <colorwave()+0x344>)
			bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
			bri8 += (255 - brightdepth);

			cwave_index = hue8;
			//index = triwave8( index);
			cwave_index = scale8(cwave_index, 240);
    202c:	f889 c000 	strb.w	ip, [r9]

			CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2030:	a805      	add	r0, sp, #20
    2032:	f000 ff59 	bl	2ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			pixelnumber = i;
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;
    2036:	4b20      	ldr	r3, [pc, #128]	; (20b8 <colorwave()+0x348>)
    2038:	f8bd 500c 	ldrh.w	r5, [sp, #12]
    203c:	801d      	strh	r5, [r3, #0]

			nblend(leds[pixelnumber], newcolor, 128);
    203e:	2280      	movs	r2, #128	; 0x80
    2040:	a905      	add	r1, sp, #20
    2042:	4640      	mov	r0, r8
    2044:	3c01      	subs	r4, #1
    2046:	f000 feff 	bl	2e48 <nblend(CRGB&, CRGB const&, unsigned char)>
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
    204a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    204e:	d041      	beq.n	20d4 <colorwave()+0x364>
    2050:	4b0f      	ldr	r3, [pc, #60]	; (2090 <colorwave()+0x320>)
    2052:	4a0a      	ldr	r2, [pc, #40]	; (207c <colorwave()+0x30c>)
    2054:	4808      	ldr	r0, [pc, #32]	; (2078 <colorwave()+0x308>)
    2056:	f8b6 e000 	ldrh.w	lr, [r6]
    205a:	881b      	ldrh	r3, [r3, #0]
    205c:	8839      	ldrh	r1, [r7, #0]
    205e:	8812      	ldrh	r2, [r2, #0]
    2060:	7800      	ldrb	r0, [r0, #0]
    2062:	e791      	b.n	1f88 <colorwave()+0x218>
    2064:	1fff8760 	.word	0x1fff8760
    2068:	1fff8756 	.word	0x1fff8756
    206c:	1fff8758 	.word	0x1fff8758
    2070:	1fff94e8 	.word	0x1fff94e8
    2074:	000174f8 	.word	0x000174f8
    2078:	1fff91f6 	.word	0x1fff91f6
    207c:	1fff9072 	.word	0x1fff9072
    2080:	1fff8dac 	.word	0x1fff8dac
    2084:	1fff920c 	.word	0x1fff920c
    2088:	1fff9210 	.word	0x1fff9210
    208c:	1fff9346 	.word	0x1fff9346
    2090:	1fff92ac 	.word	0x1fff92ac
    2094:	1fff8cae 	.word	0x1fff8cae
    2098:	1fff91f8 	.word	0x1fff91f8
    209c:	1fff8db0 	.word	0x1fff8db0
    20a0:	1fff9214 	.word	0x1fff9214
    20a4:	1fff9216 	.word	0x1fff9216
    20a8:	1fff9078 	.word	0x1fff9078
    20ac:	1fff92a4 	.word	0x1fff92a4
    20b0:	1fff91f0 	.word	0x1fff91f0
    20b4:	1fff90d0 	.word	0x1fff90d0
    20b8:	1fff906c 	.word	0x1fff906c
    20bc:	000068e4 	.word	0x000068e4
    20c0:	000072c8 	.word	0x000072c8
    20c4:	1fff9264 	.word	0x1fff9264
    20c8:	1fff92a6 	.word	0x1fff92a6
    20cc:	0001b580 	.word	0x0001b580
    20d0:	1fff9438 	.word	0x1fff9438
    20d4:	9d03      	ldr	r5, [sp, #12]
    20d6:	3d01      	subs	r5, #1
    20d8:	b2ad      	uxth	r5, r5
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    20da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    20de:	429d      	cmp	r5, r3
    20e0:	d009      	beq.n	20f6 <colorwave()+0x386>
    20e2:	4b06      	ldr	r3, [pc, #24]	; (20fc <colorwave()+0x38c>)
    20e4:	4a06      	ldr	r2, [pc, #24]	; (2100 <colorwave()+0x390>)
    20e6:	4807      	ldr	r0, [pc, #28]	; (2104 <colorwave()+0x394>)
    20e8:	f8b6 e000 	ldrh.w	lr, [r6]
    20ec:	881b      	ldrh	r3, [r3, #0]
    20ee:	8839      	ldrh	r1, [r7, #0]
    20f0:	8812      	ldrh	r2, [r2, #0]
    20f2:	7800      	ldrb	r0, [r0, #0]
    20f4:	e742      	b.n	1f7c <colorwave()+0x20c>
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;

			nblend(leds[pixelnumber], newcolor, 128);
		}
	}
}
    20f6:	b00d      	add	sp, #52	; 0x34
    20f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20fc:	1fff92ac 	.word	0x1fff92ac
    2100:	1fff9072 	.word	0x1fff9072
    2104:	1fff91f6 	.word	0x1fff91f6

00002108 <updatePaletteIndex(CRGBPalette16)>:
// Count of how many cpt-city gradients are defined:
const uint8_t g_gradient_palette_count =
  sizeof( g_gradient_palettes) / sizeof( TProgmemRGBGradientPalettePtr );

// Find index of current (target) palette
void updatePaletteIndex(CRGBPalette16 pal){
    2108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    210c:	b09b      	sub	sp, #108	; 0x6c
    210e:	4b3f      	ldr	r3, [pc, #252]	; (220c <updatePaletteIndex(CRGBPalette16)+0x104>)
    2110:	9309      	str	r3, [sp, #36]	; 0x24
    2112:	1e43      	subs	r3, r0, #1
    2114:	930a      	str	r3, [sp, #40]	; 0x28
    2116:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    211a:	930b      	str	r3, [sp, #44]	; 0x2c
    211c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2214 <updatePaletteIndex(CRGBPalette16)+0x10c>
	for (int i = 0; i < g_gradient_palette_count; i++){
    2120:	2300      	movs	r3, #0
    2122:	9308      	str	r3, [sp, #32]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2124:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2126:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    212a:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    212c:	3701      	adds	r7, #1
        } while ( u.index != 255);
    212e:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2130:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    2132:	d1f8      	bne.n	2126 <updatePaletteIndex(CRGBPalette16)+0x1e>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2134:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2138:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    213a:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    213e:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2142:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2144:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    2146:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    214a:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    214e:	2400      	movs	r4, #0
    2150:	46c8      	mov	r8, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2152:	f858 5f04 	ldr.w	r5, [r8, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2156:	f3c5 2707 	ubfx	r7, r5, #8, #8
    215a:	f3c5 4607 	ubfx	r6, r5, #16, #8
    215e:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    2160:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2164:	9104      	str	r1, [sp, #16]
    2166:	b2f1      	uxtb	r1, r6
    2168:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    216a:	fa5f f18c 	uxtb.w	r1, ip
    216e:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    2170:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    2172:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2174:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2176:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    217a:	aa0d      	add	r2, sp, #52	; 0x34
    217c:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    217e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2182:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2186:	d80c      	bhi.n	21a2 <updatePaletteIndex(CRGBPalette16)+0x9a>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    2188:	9906      	ldr	r1, [sp, #24]
    218a:	458c      	cmp	ip, r1
    218c:	dc07      	bgt.n	219e <updatePaletteIndex(CRGBPalette16)+0x96>
    218e:	290f      	cmp	r1, #15
    2190:	d005      	beq.n	219e <updatePaletteIndex(CRGBPalette16)+0x96>
                    istart8 = lastSlotUsed + 1;
    2192:	3101      	adds	r1, #1
    2194:	b2c9      	uxtb	r1, r1
    2196:	428b      	cmp	r3, r1
    2198:	9103      	str	r1, [sp, #12]
    219a:	bf38      	it	cc
    219c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    219e:	b259      	sxtb	r1, r3
    21a0:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    21a2:	a90c      	add	r1, sp, #48	; 0x30
    21a4:	9100      	str	r1, [sp, #0]
    21a6:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    21a8:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
    21ac:	f88d a035 	strb.w	sl, [sp, #53]	; 0x35
        b = rhs.b;
    21b0:	f88d e036 	strb.w	lr, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    21b4:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
    21b8:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
    21bc:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
    21c0:	f000 fdae 	bl	2d20 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    21c4:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    21c6:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    21ca:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    21ce:	46ce      	mov	lr, r9
    21d0:	d1bf      	bne.n	2152 <updatePaletteIndex(CRGBPalette16)+0x4a>
    21d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    21d6:	aa0e      	add	r2, sp, #56	; 0x38
    21d8:	e001      	b.n	21de <updatePaletteIndex(CRGBPalette16)+0xd6>
    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
    21da:	42a3      	cmp	r3, r4
    21dc:	d00f      	beq.n	21fe <updatePaletteIndex(CRGBPalette16)+0xf6>
            if( *p != *q) return false;
    21de:	f812 1b01 	ldrb.w	r1, [r2], #1
    21e2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    21e6:	4288      	cmp	r0, r1
    21e8:	d0f7      	beq.n	21da <updatePaletteIndex(CRGBPalette16)+0xd2>
    21ea:	9b08      	ldr	r3, [sp, #32]
    21ec:	3301      	adds	r3, #1
    21ee:	2b5d      	cmp	r3, #93	; 0x5d
    21f0:	9308      	str	r3, [sp, #32]
    21f2:	d008      	beq.n	2206 <updatePaletteIndex(CRGBPalette16)+0xfe>
    21f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21f6:	f853 9f04 	ldr.w	r9, [r3, #4]!
    21fa:	9309      	str	r3, [sp, #36]	; 0x24
    21fc:	e792      	b.n	2124 <updatePaletteIndex(CRGBPalette16)+0x1c>
		if (pal == g_gradient_palettes[i]){
			palette_index = i;
    21fe:	4b04      	ldr	r3, [pc, #16]	; (2210 <updatePaletteIndex(CRGBPalette16)+0x108>)
    2200:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2204:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
    2206:	b01b      	add	sp, #108	; 0x6c
    2208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    220c:	00006910 	.word	0x00006910
    2210:	1fff9439 	.word	0x1fff9439
    2214:	000075dc 	.word	0x000075dc

00002218 <prepare_for_explosion()>:
float spark_fade[MAX_NUMBER_OF_SPARKS];
uint8_t firework_bg_fade = 128;
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
    2218:	b5f0      	push	{r4, r5, r6, r7, lr}
	random16_add_entropy(analogRead(2));
    221a:	2002      	movs	r0, #2
float spark_fade[MAX_NUMBER_OF_SPARKS];
uint8_t firework_bg_fade = 128;
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
    221c:	b083      	sub	sp, #12
	random16_add_entropy(analogRead(2));
    221e:	f001 fb1f 	bl	3860 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    2222:	491a      	ldr	r1, [pc, #104]	; (228c <prepare_for_explosion()+0x74>)
	firework_position = random8(20,NUM_LEDS - 10);
    2224:	4a1a      	ldr	r2, [pc, #104]	; (2290 <prepare_for_explosion()+0x78>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2226:	880b      	ldrh	r3, [r1, #0]
	current_stage = FADEUP;
	firework_hue = random8();
	firework_bri = 0;
	exploded = false;
    2228:	f8df e078 	ldr.w	lr, [pc, #120]	; 22a4 <prepare_for_explosion()+0x8c>

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
	firework_hue = random8();
    222c:	4e19      	ldr	r6, [pc, #100]	; (2294 <prepare_for_explosion()+0x7c>)
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
    222e:	4d1a      	ldr	r5, [pc, #104]	; (2298 <prepare_for_explosion()+0x80>)
	firework_hue = random8();
	firework_bri = 0;
    2230:	4c1a      	ldr	r4, [pc, #104]	; (229c <prepare_for_explosion()+0x84>)
    2232:	4418      	add	r0, r3
    2234:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    2238:	f243 6719 	movw	r7, #13849	; 0x3619
    223c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2240:	4438      	add	r0, r7
    2242:	b280      	uxth	r0, r0
    2244:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    2248:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    224c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
    2250:	b2c0      	uxtb	r0, r0
    2252:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2256:	443b      	add	r3, r7
    2258:	1140      	asrs	r0, r0, #5
    225a:	b29b      	uxth	r3, r3
    225c:	3014      	adds	r0, #20
	current_stage = FADEUP;
    225e:	2700      	movs	r7, #0
    2260:	800b      	strh	r3, [r1, #0]
float spark_bri[MAX_NUMBER_OF_SPARKS];
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
    2262:	7010      	strb	r0, [r2, #0]
	current_stage = FADEUP;
	firework_hue = random8();
    2264:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	firework_bri = 0;
	exploded = false;
	fill_solid(leds, NUM_LEDS, CRGB::Black);
    2268:	aa01      	add	r2, sp, #4
    226a:	2196      	movs	r1, #150	; 0x96
    226c:	480c      	ldr	r0, [pc, #48]	; (22a0 <prepare_for_explosion()+0x88>)

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
	firework_hue = random8();
    226e:	7033      	strb	r3, [r6, #0]
uint8_t brightest_spark;

void prepare_for_explosion() {
	random16_add_entropy(analogRead(2));
	firework_position = random8(20,NUM_LEDS - 10);
	current_stage = FADEUP;
    2270:	702f      	strb	r7, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2272:	f88d 7004 	strb.w	r7, [sp, #4]
    2276:	f88d 7005 	strb.w	r7, [sp, #5]
    227a:	f88d 7006 	strb.w	r7, [sp, #6]
	firework_hue = random8();
	firework_bri = 0;
    227e:	7027      	strb	r7, [r4, #0]
	exploded = false;
    2280:	f88e 7000 	strb.w	r7, [lr]
	fill_solid(leds, NUM_LEDS, CRGB::Black);
    2284:	f000 fd1c 	bl	2cc0 <fill_solid(CRGB*, int, CRGB const&)>
}
    2288:	b003      	add	sp, #12
    228a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    228c:	1fff876a 	.word	0x1fff876a
    2290:	1fff92ae 	.word	0x1fff92ae
    2294:	1fff9217 	.word	0x1fff9217
    2298:	1fff8dad 	.word	0x1fff8dad
    229c:	1fff91f2 	.word	0x1fff91f2
    22a0:	1fff8db0 	.word	0x1fff8db0
    22a4:	1fff91f1 	.word	0x1fff91f1

000022a8 <fadeup()>:

void fadeup() {
    22a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (exploded) {
    22ac:	4c55      	ldr	r4, [pc, #340]	; (2404 <fadeup()+0x15c>)
    22ae:	7823      	ldrb	r3, [r4, #0]
	firework_bri = 0;
	exploded = false;
	fill_solid(leds, NUM_LEDS, CRGB::Black);
}

void fadeup() {
    22b0:	b085      	sub	sp, #20
	if (exploded) {
    22b2:	2b00      	cmp	r3, #0
    22b4:	f000 8087 	beq.w	23c6 <fadeup()+0x11e>
    22b8:	4b53      	ldr	r3, [pc, #332]	; (2408 <fadeup()+0x160>)
    22ba:	4a54      	ldr	r2, [pc, #336]	; (240c <fadeup()+0x164>)
    22bc:	881b      	ldrh	r3, [r3, #0]
    22be:	7812      	ldrb	r2, [r2, #0]
    22c0:	9201      	str	r2, [sp, #4]
    22c2:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    22c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    22ca:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    22ce:	3119      	adds	r1, #25
    22d0:	fa1f fa81 	uxth.w	sl, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    22d4:	eb0a 231a 	add.w	r3, sl, sl, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    22d8:	b2db      	uxtb	r3, r3
    22da:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    22de:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    22e2:	ea4f 2929 	mov.w	r9, r9, asr #8
    22e6:	4610      	mov	r0, r2
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    22e8:	f8df e14c 	ldr.w	lr, [pc, #332]	; 2438 <fadeup()+0x190>
	fill_solid(leds, NUM_LEDS, CRGB::Black);
}

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
    22ec:	4a48      	ldr	r2, [pc, #288]	; (2410 <fadeup()+0x168>)
    22ee:	f8df 814c 	ldr.w	r8, [pc, #332]	; 243c <fadeup()+0x194>
    22f2:	4d48      	ldr	r5, [pc, #288]	; (2414 <fadeup()+0x16c>)
    22f4:	4f48      	ldr	r7, [pc, #288]	; (2418 <fadeup()+0x170>)
    22f6:	4e49      	ldr	r6, [pc, #292]	; (241c <fadeup()+0x174>)
    22f8:	4c49      	ldr	r4, [pc, #292]	; (2420 <fadeup()+0x178>)
    22fa:	f109 0914 	add.w	r9, r9, #20
    22fe:	2301      	movs	r3, #1
    2300:	fa5f f989 	uxtb.w	r9, r9
    2304:	7013      	strb	r3, [r2, #0]
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    2306:	f88e 9000 	strb.w	r9, [lr]
    230a:	f003 f973 	bl	55f4 <__aeabi_ui2f>
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    230e:	4643      	mov	r3, r8
}

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    2310:	f04f 0b00 	mov.w	fp, #0
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    2314:	46a8      	mov	r8, r5
    2316:	9000      	str	r0, [sp, #0]
    2318:	461d      	mov	r5, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    231a:	eb0a 234a 	add.w	r3, sl, sl, lsl #9
    231e:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
    2322:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    2326:	f10a 0a19 	add.w	sl, sl, #25
    232a:	fa1f fa8a 	uxth.w	sl, sl
    232e:	2373      	movs	r3, #115	; 0x73
    2330:	fb03 f00a 	mul.w	r0, r3, sl
    2334:	0c00      	lsrs	r0, r0, #16
void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
    2336:	9b00      	ldr	r3, [sp, #0]
    2338:	f845 3f04 	str.w	r3, [r5, #4]!
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    233c:	300a      	adds	r0, #10
    233e:	b280      	uxth	r0, r0
    2340:	f003 f958 	bl	55f4 <__aeabi_ui2f>
    2344:	4937      	ldr	r1, [pc, #220]	; (2424 <fadeup()+0x17c>)
    2346:	f003 fa61 	bl	580c <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    234a:	eb0a 234a 	add.w	r3, sl, sl, lsl #9
    234e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    2352:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2356:	3319      	adds	r3, #25
    2358:	b29b      	uxth	r3, r3
    235a:	eb03 2a43 	add.w	sl, r3, r3, lsl #9
    235e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    2362:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    2366:	f10a 0a19 	add.w	sl, sl, #25
    236a:	fa1f fa8a 	uxth.w	sl, sl
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    236e:	eb0a 211a 	add.w	r1, sl, sl, lsr #8
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
    2372:	b2c9      	uxtb	r1, r1
    2374:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2378:	11c9      	asrs	r1, r1, #7
    237a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
    237e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			spark_fade[i] = random8(5, 15);
    2382:	3105      	adds	r1, #5
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
    2384:	f847 0f04 	str.w	r0, [r7, #4]!
			spark_dir[i] = random8(0, 2);
    2388:	f806 3f01 	strb.w	r3, [r6, #1]!
			spark_fade[i] = random8(5, 15);
    238c:	b2c8      	uxtb	r0, r1
    238e:	f003 f931 	bl	55f4 <__aeabi_ui2f>
    2392:	f10b 0b01 	add.w	fp, fp, #1

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
    2396:	fa5f f38b 	uxtb.w	r3, fp
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
			spark_bri[i] = 255;
    239a:	4a23      	ldr	r2, [pc, #140]	; (2428 <fadeup()+0x180>)
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
    239c:	f848 0f04 	str.w	r0, [r8, #4]!

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
    23a0:	4599      	cmp	r9, r3
			spark_pos[i] = (float)firework_position;
			spark_vel[i] = (float)(random16(10, 125)) / 100;
			spark_dir[i] = random8(0, 2);
			spark_fade[i] = random8(5, 15);
			spark_bri[i] = 255;
    23a2:	f844 2f04 	str.w	r2, [r4, #4]!

void fadeup() {
	if (exploded) {
		current_stage = EXPLOSION;
		number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < number_of_sparks; i++) {
    23a6:	d8b8      	bhi.n	231a <fadeup()+0x72>
    23a8:	4b17      	ldr	r3, [pc, #92]	; (2408 <fadeup()+0x160>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    23aa:	4820      	ldr	r0, [pc, #128]	; (242c <fadeup()+0x184>)
    23ac:	f8a3 a000 	strh.w	sl, [r3]
    23b0:	9b01      	ldr	r3, [sp, #4]
    23b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    23b6:	18c1      	adds	r1, r0, r3
    23b8:	22ff      	movs	r2, #255	; 0xff
    23ba:	54c2      	strb	r2, [r0, r3]
        g = (colorcode >>  8) & 0xFF;
    23bc:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
    23be:	708a      	strb	r2, [r1, #2]
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
		if (firework_bri >= 255) {
			exploded = true;
		}
	}
}
    23c0:	b005      	add	sp, #20
    23c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			spark_bri[i] = 255;
		}
		leds[firework_position] = CRGB::White;
	}
	else {
		firework_bri += 5;
    23c6:	4d1a      	ldr	r5, [pc, #104]	; (2430 <fadeup()+0x188>)
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
    23c8:	4a10      	ldr	r2, [pc, #64]	; (240c <fadeup()+0x164>)
			spark_bri[i] = 255;
		}
		leds[firework_position] = CRGB::White;
	}
	else {
		firework_bri += 5;
    23ca:	782b      	ldrb	r3, [r5, #0]
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
    23cc:	7812      	ldrb	r2, [r2, #0]
    23ce:	4819      	ldr	r0, [pc, #100]	; (2434 <fadeup()+0x18c>)
    23d0:	4916      	ldr	r1, [pc, #88]	; (242c <fadeup()+0x184>)
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    23d2:	7806      	ldrb	r6, [r0, #0]
    23d4:	f88d 600c 	strb.w	r6, [sp, #12]
    23d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
			spark_bri[i] = 255;
		}
		leds[firework_position] = CRGB::White;
	}
	else {
		firework_bri += 5;
    23dc:	3305      	adds	r3, #5
    23de:	b2db      	uxtb	r3, r3
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    23e0:	4411      	add	r1, r2
    23e2:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    23e4:	22ff      	movs	r2, #255	; 0xff
    23e6:	702b      	strb	r3, [r5, #0]
    23e8:	f88d 300e 	strb.w	r3, [sp, #14]
    23ec:	f88d 200d 	strb.w	r2, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    23f0:	f000 fec4 	bl	317c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds[firework_position] = CHSV(firework_hue, 255, firework_bri);
		if (firework_bri >= 255) {
    23f4:	782b      	ldrb	r3, [r5, #0]
    23f6:	2bff      	cmp	r3, #255	; 0xff
			exploded = true;
    23f8:	bf04      	itt	eq
    23fa:	2301      	moveq	r3, #1
    23fc:	7023      	strbeq	r3, [r4, #0]
		}
	}
}
    23fe:	b005      	add	sp, #20
    2400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2404:	1fff91f1 	.word	0x1fff91f1
    2408:	1fff876a 	.word	0x1fff876a
    240c:	1fff92ae 	.word	0x1fff92ae
    2410:	1fff8dad 	.word	0x1fff8dad
    2414:	1fff9344 	.word	0x1fff9344
    2418:	1fff8cac 	.word	0x1fff8cac
    241c:	1fff9267 	.word	0x1fff9267
    2420:	1fff8f70 	.word	0x1fff8f70
    2424:	42c80000 	.word	0x42c80000
    2428:	437f0000 	.word	0x437f0000
    242c:	1fff8db0 	.word	0x1fff8db0
    2430:	1fff91f2 	.word	0x1fff91f2
    2434:	1fff9217 	.word	0x1fff9217
    2438:	1fff9208 	.word	0x1fff9208
    243c:	1fff90fc 	.word	0x1fff90fc

00002440 <explosion()>:

void explosion() {
    2440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
    2444:	4b64      	ldr	r3, [pc, #400]	; (25d8 <explosion()+0x198>)
    2446:	4865      	ldr	r0, [pc, #404]	; (25dc <explosion()+0x19c>)
    2448:	781a      	ldrb	r2, [r3, #0]
			exploded = true;
		}
	}
}

void explosion() {
    244a:	b085      	sub	sp, #20
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
    244c:	2196      	movs	r1, #150	; 0x96
    244e:	f000 fcf9 	bl	2e44 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    2452:	4b63      	ldr	r3, [pc, #396]	; (25e0 <explosion()+0x1a0>)
	}
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
    2454:	4a63      	ldr	r2, [pc, #396]	; (25e4 <explosion()+0x1a4>)
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    2456:	781b      	ldrb	r3, [r3, #0]
	}
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
    2458:	2400      	movs	r4, #0
    245a:	7014      	strb	r4, [r2, #0]
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    245c:	2b00      	cmp	r3, #0
    245e:	f000 808b 	beq.w	2578 <explosion()+0x138>
    2462:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 2618 <explosion()+0x1d8>
    2466:	4e60      	ldr	r6, [pc, #384]	; (25e8 <explosion()+0x1a8>)
    2468:	4d5c      	ldr	r5, [pc, #368]	; (25dc <explosion()+0x19c>)
    246a:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 261c <explosion()+0x1dc>
    246e:	ab03      	add	r3, sp, #12
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
    2470:	46c1      	mov	r9, r8
    2472:	9301      	str	r3, [sp, #4]
    2474:	e03d      	b.n	24f2 <explosion()+0xb2>
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
    2476:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
    247a:	4658      	mov	r0, fp
    247c:	f003 f80a 	bl	5494 <__addsf3>
    2480:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    2484:	4607      	mov	r7, r0
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    2486:	2100      	movs	r1, #0
    2488:	4638      	mov	r0, r7
    248a:	f003 faa9 	bl	59e0 <__aeabi_fcmplt>
    248e:	4957      	ldr	r1, [pc, #348]	; (25ec <explosion()+0x1ac>)
    2490:	2800      	cmp	r0, #0
    2492:	d168      	bne.n	2566 <explosion()+0x126>
    2494:	4638      	mov	r0, r7
    2496:	f003 fac1 	bl	5a1c <__aeabi_fcmpgt>
    249a:	b100      	cbz	r0, 249e <explosion()+0x5e>
    249c:	4f53      	ldr	r7, [pc, #332]	; (25ec <explosion()+0x1ac>)
		spark_vel[x] *= gravity;
    249e:	4b54      	ldr	r3, [pc, #336]	; (25f0 <explosion()+0x1b0>)
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    24a0:	f848 7024 	str.w	r7, [r8, r4, lsl #2]
		spark_vel[x] *= gravity;
    24a4:	6818      	ldr	r0, [r3, #0]
    24a6:	4659      	mov	r1, fp
    24a8:	f003 f8fc 	bl	56a4 <__aeabi_fmul>
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    24ac:	4b51      	ldr	r3, [pc, #324]	; (25f4 <explosion()+0x1b4>)
	for (uint8_t x = 0; x < number_of_sparks; x++) {
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
		else { spark_pos[x] -= spark_vel[x]; }
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		spark_vel[x] *= gravity;
    24ae:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
    24b2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    24b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    24ba:	f003 f8f3 	bl	56a4 <__aeabi_fmul>
    24be:	4601      	mov	r1, r0
    24c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    24c4:	f002 ffe4 	bl	5490 <__aeabi_fsub>
    24c8:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    24cc:	f003 f8ea 	bl	56a4 <__aeabi_fmul>
    24d0:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
    24d4:	f003 fad2 	bl	5a7c <__aeabi_f2uiz>
    24d8:	4b42      	ldr	r3, [pc, #264]	; (25e4 <explosion()+0x1a4>)
    24da:	781b      	ldrb	r3, [r3, #0]
    24dc:	b2c0      	uxtb	r0, r0
    24de:	4283      	cmp	r3, r0
    24e0:	bf3c      	itt	cc
    24e2:	4b40      	ldrcc	r3, [pc, #256]	; (25e4 <explosion()+0x1a4>)
    24e4:	7018      	strbcc	r0, [r3, #0]
}

void explosion() {
	fadeToBlackBy(leds, NUM_LEDS, firework_bg_fade);
	brightest_spark = 0;
	for (uint8_t x = 0; x < number_of_sparks; x++) {
    24e6:	4b3e      	ldr	r3, [pc, #248]	; (25e0 <explosion()+0x1a0>)
    24e8:	3401      	adds	r4, #1
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	b2e4      	uxtb	r4, r4
    24ee:	42a3      	cmp	r3, r4
    24f0:	d93b      	bls.n	256a <explosion()+0x12a>
		leds[(int)spark_pos[x]] += CHSV(firework_hue, 255, (uint8_t)spark_bri[x]);
    24f2:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
    24f6:	f003 fa9b 	bl	5a30 <__aeabi_f2iz>
    24fa:	4683      	mov	fp, r0
    24fc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2500:	f003 fabc 	bl	5a7c <__aeabi_f2uiz>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2504:	4b3c      	ldr	r3, [pc, #240]	; (25f8 <explosion()+0x1b8>)
    2506:	f88d 000a 	strb.w	r0, [sp, #10]
    250a:	781a      	ldrb	r2, [r3, #0]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    250c:	9901      	ldr	r1, [sp, #4]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    250e:	f88d 2008 	strb.w	r2, [sp, #8]
    2512:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2514:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2516:	f88d 3009 	strb.w	r3, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    251a:	f000 fe2f 	bl	317c <hsv2rgb_rainbow(CHSV const&, CRGB&)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    251e:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2522:	1829      	adds	r1, r5, r0
    2524:	5c2b      	ldrb	r3, [r5, r0]
    2526:	f89d 200c 	ldrb.w	r2, [sp, #12]
    252a:	fa83 f352 	uqadd8	r3, r3, r2
    252e:	542b      	strb	r3, [r5, r0]
    2530:	f89d 300d 	ldrb.w	r3, [sp, #13]
    2534:	784a      	ldrb	r2, [r1, #1]
    2536:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    253a:	704a      	strb	r2, [r1, #1]
    253c:	788b      	ldrb	r3, [r1, #2]
    253e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    2542:	fa83 f352 	uqadd8	r3, r3, r2
		if (spark_dir[x]) { spark_pos[x] += spark_vel[x]; }
    2546:	4a2d      	ldr	r2, [pc, #180]	; (25fc <explosion()+0x1bc>)
        b = qadd8( b, rhs.b);
    2548:	708b      	strb	r3, [r1, #2]
    254a:	5d12      	ldrb	r2, [r2, r4]
    254c:	f85a b024 	ldr.w	fp, [sl, r4, lsl #2]
    2550:	2a00      	cmp	r2, #0
    2552:	d190      	bne.n	2476 <explosion()+0x36>
		else { spark_pos[x] -= spark_vel[x]; }
    2554:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
    2558:	4659      	mov	r1, fp
    255a:	f002 ff99 	bl	5490 <__aeabi_fsub>
    255e:	4607      	mov	r7, r0
    2560:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    2564:	e78f      	b.n	2486 <explosion()+0x46>
		spark_pos[x] = constrain(spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    2566:	2700      	movs	r7, #0
    2568:	e799      	b.n	249e <explosion()+0x5e>
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
    256a:	4b1e      	ldr	r3, [pc, #120]	; (25e4 <explosion()+0x1a4>)
    256c:	781b      	ldrb	r3, [r3, #0]
    256e:	2b05      	cmp	r3, #5
    2570:	d904      	bls.n	257c <explosion()+0x13c>
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
		next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    2572:	b005      	add	sp, #20
    2574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2578:	ab03      	add	r3, sp, #12
    257a:	9301      	str	r3, [sp, #4]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    257c:	2300      	movs	r3, #0
		spark_vel[x] *= gravity;
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
    257e:	9a01      	ldr	r2, [sp, #4]
    2580:	4816      	ldr	r0, [pc, #88]	; (25dc <explosion()+0x19c>)
    2582:	f88d 300c 	strb.w	r3, [sp, #12]
    2586:	2196      	movs	r1, #150	; 0x96
    2588:	f88d 300d 	strb.w	r3, [sp, #13]
    258c:	f88d 300e 	strb.w	r3, [sp, #14]
    2590:	f000 fb96 	bl	2cc0 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2594:	481a      	ldr	r0, [pc, #104]	; (2600 <explosion()+0x1c0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2596:	4c1b      	ldr	r4, [pc, #108]	; (2604 <explosion()+0x1c4>)
    2598:	8803      	ldrh	r3, [r0, #0]
    259a:	6824      	ldr	r4, [r4, #0]
		current_stage = WAITING;
		next_explosion_time = millis() + random16(min_wait + max_wait);
    259c:	491a      	ldr	r1, [pc, #104]	; (2608 <explosion()+0x1c8>)
    259e:	4a1b      	ldr	r2, [pc, #108]	; (260c <explosion()+0x1cc>)
    25a0:	9403      	str	r4, [sp, #12]
    25a2:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    25a6:	8809      	ldrh	r1, [r1, #0]
    25a8:	8812      	ldrh	r2, [r2, #0]
    25aa:	4d19      	ldr	r5, [pc, #100]	; (2610 <explosion()+0x1d0>)
    25ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    25b0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    25b4:	440a      	add	r2, r1
    25b6:	3319      	adds	r3, #25
    25b8:	b29b      	uxth	r3, r3
    25ba:	b292      	uxth	r2, r2
	return ret;
    25bc:	9903      	ldr	r1, [sp, #12]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
    25be:	4c15      	ldr	r4, [pc, #84]	; (2614 <explosion()+0x1d4>)
    25c0:	8003      	strh	r3, [r0, #0]
		next_explosion_time = millis() + random16(min_wait + max_wait);
    25c2:	fb03 f302 	mul.w	r3, r3, r2
    25c6:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
    25ca:	2202      	movs	r2, #2
		next_explosion_time = millis() + random16(min_wait + max_wait);
    25cc:	602b      	str	r3, [r5, #0]
		spark_bri[x] *= (1 - (spark_fade[x] / 256));
		if ((uint8_t)spark_bri[x] > brightest_spark) { brightest_spark = (uint8_t)spark_bri[x]; }
	}
	if (brightest_spark <= 5) {
		fill_solid(leds, NUM_LEDS, CRGB::Black);
		current_stage = WAITING;
    25ce:	7022      	strb	r2, [r4, #0]
		next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    25d0:	b005      	add	sp, #20
    25d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25d6:	bf00      	nop
    25d8:	1fff8768 	.word	0x1fff8768
    25dc:	1fff8db0 	.word	0x1fff8db0
    25e0:	1fff9208 	.word	0x1fff9208
    25e4:	1fff920a 	.word	0x1fff920a
    25e8:	1fff8f74 	.word	0x1fff8f74
    25ec:	43150000 	.word	0x43150000
    25f0:	1fff8750 	.word	0x1fff8750
    25f4:	1fff9348 	.word	0x1fff9348
    25f8:	1fff9217 	.word	0x1fff9217
    25fc:	1fff9268 	.word	0x1fff9268
    2600:	1fff876a 	.word	0x1fff876a
    2604:	1fff94e8 	.word	0x1fff94e8
    2608:	1fff8762 	.word	0x1fff8762
    260c:	1fff8764 	.word	0x1fff8764
    2610:	1fff9068 	.word	0x1fff9068
    2614:	1fff8dad 	.word	0x1fff8dad
    2618:	1fff9100 	.word	0x1fff9100
    261c:	1fff8cb0 	.word	0x1fff8cb0

00002620 <render_firework()>:


void render_firework() {
    2620:	b500      	push	{lr}
	if (current_stage == WAITING) {
    2622:	4b10      	ldr	r3, [pc, #64]	; (2664 <render_firework()+0x44>)
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	2b02      	cmp	r3, #2
		next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void render_firework() {
    2628:	b083      	sub	sp, #12
	if (current_stage == WAITING) {
    262a:	d005      	beq.n	2638 <render_firework()+0x18>
		if (millis() >= next_explosion_time) {
			prepare_for_explosion();
		}
	}
	else if (current_stage == FADEUP) {
    262c:	b1a3      	cbz	r3, 2658 <render_firework()+0x38>
		fadeup();
	}
	else if (current_stage == EXPLOSION) {
    262e:	2b01      	cmp	r3, #1
    2630:	d00d      	beq.n	264e <render_firework()+0x2e>
		explosion();
	}
}
    2632:	b003      	add	sp, #12
    2634:	f85d fb04 	ldr.w	pc, [sp], #4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2638:	4a0b      	ldr	r2, [pc, #44]	; (2668 <render_firework()+0x48>)
}


void render_firework() {
	if (current_stage == WAITING) {
		if (millis() >= next_explosion_time) {
    263a:	4b0c      	ldr	r3, [pc, #48]	; (266c <render_firework()+0x4c>)
    263c:	6812      	ldr	r2, [r2, #0]
    263e:	9201      	str	r2, [sp, #4]
	return ret;
    2640:	9a01      	ldr	r2, [sp, #4]
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	429a      	cmp	r2, r3
    2646:	d3f4      	bcc.n	2632 <render_firework()+0x12>
			prepare_for_explosion();
    2648:	f7ff fde6 	bl	2218 <prepare_for_explosion()>
    264c:	e7f1      	b.n	2632 <render_firework()+0x12>
	}
	else if (current_stage == FADEUP) {
		fadeup();
	}
	else if (current_stage == EXPLOSION) {
		explosion();
    264e:	f7ff fef7 	bl	2440 <explosion()>
	}
}
    2652:	b003      	add	sp, #12
    2654:	f85d fb04 	ldr.w	pc, [sp], #4
		if (millis() >= next_explosion_time) {
			prepare_for_explosion();
		}
	}
	else if (current_stage == FADEUP) {
		fadeup();
    2658:	f7ff fe26 	bl	22a8 <fadeup()>
	}
	else if (current_stage == EXPLOSION) {
		explosion();
	}
}
    265c:	b003      	add	sp, #12
    265e:	f85d fb04 	ldr.w	pc, [sp], #4
    2662:	bf00      	nop
    2664:	1fff8dad 	.word	0x1fff8dad
    2668:	1fff94e8 	.word	0x1fff94e8
    266c:	1fff9068 	.word	0x1fff9068

00002670 <fireworks()>:

void fireworks() {
	if (mode_change) {
    2670:	4a19      	ldr	r2, [pc, #100]	; (26d8 <fireworks()+0x68>)
    2672:	7813      	ldrb	r3, [r2, #0]
    2674:	b36b      	cbz	r3, 26d2 <fireworks()+0x62>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2676:	4919      	ldr	r1, [pc, #100]	; (26dc <fireworks()+0x6c>)
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
    2678:	4819      	ldr	r0, [pc, #100]	; (26e0 <fireworks()+0x70>)
    267a:	880b      	ldrh	r3, [r1, #0]
	else if (current_stage == EXPLOSION) {
		explosion();
	}
}

void fireworks() {
    267c:	b4f0      	push	{r4, r5, r6, r7}
    267e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    2682:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    2686:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    268a:	3319      	adds	r3, #25
    268c:	b29b      	uxth	r3, r3
    268e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    2692:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2696:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    269a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
    269e:	b2db      	uxtb	r3, r3
    26a0:	3719      	adds	r7, #25
    26a2:	eb03 1383 	add.w	r3, r3, r3, lsl #6
		firework_hue = random8();
    26a6:	4d0f      	ldr	r5, [pc, #60]	; (26e4 <fireworks()+0x74>)
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
    26a8:	4e0f      	ldr	r6, [pc, #60]	; (26e8 <fireworks()+0x78>)
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    26aa:	4c10      	ldr	r4, [pc, #64]	; (26ec <fireworks()+0x7c>)
    26ac:	b2bf      	uxth	r7, r7
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
    26ae:	11db      	asrs	r3, r3, #7
    26b0:	800f      	strh	r7, [r1, #0]
    26b2:	330a      	adds	r3, #10
		firework_hue = random8();
    26b4:	eb07 2717 	add.w	r7, r7, r7, lsr #8
void fireworks() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
		current_stage = WAITING;
    26b8:	490d      	ldr	r1, [pc, #52]	; (26f0 <fireworks()+0x80>)
		firework_position = random8(10, NUM_LEDS - 10);
    26ba:	7033      	strb	r3, [r6, #0]
		firework_hue = random8();
    26bc:	702f      	strb	r7, [r5, #0]
	}
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
    26be:	2300      	movs	r3, #0
		use_palette = 0;
		this_delay = 10;
    26c0:	260a      	movs	r6, #10
		current_stage = WAITING;
    26c2:	2502      	movs	r5, #2
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    26c4:	7023      	strb	r3, [r4, #0]
		this_delay = 10;
    26c6:	6006      	str	r6, [r0, #0]
		current_stage = WAITING;
    26c8:	700d      	strb	r5, [r1, #0]
		firework_position = random8(10, NUM_LEDS - 10);
		firework_hue = random8();
	}
	render_firework();
}
    26ca:	bcf0      	pop	{r4, r5, r6, r7}
	}
}

void fireworks() {
	if (mode_change) {
		mode_change = 0;
    26cc:	7013      	strb	r3, [r2, #0]
		this_delay = 10;
		current_stage = WAITING;
		firework_position = random8(10, NUM_LEDS - 10);
		firework_hue = random8();
	}
	render_firework();
    26ce:	f7ff bfa7 	b.w	2620 <render_firework()>
    26d2:	f7ff bfa5 	b.w	2620 <render_firework()>
    26d6:	bf00      	nop
    26d8:	1fff8760 	.word	0x1fff8760
    26dc:	1fff876a 	.word	0x1fff876a
    26e0:	1fff8758 	.word	0x1fff8758
    26e4:	1fff9217 	.word	0x1fff9217
    26e8:	1fff92ae 	.word	0x1fff92ae
    26ec:	1fff8756 	.word	0x1fff8756
    26f0:	1fff8dad 	.word	0x1fff8dad

000026f4 <setup>:
uint8_t current_mode_number = 0;

#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))


void setup() {
    26f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26f8:	f640 31b8 	movw	r1, #3000	; 0xbb8
    26fc:	b097      	sub	sp, #92	; 0x5c
    26fe:	4878      	ldr	r0, [pc, #480]	; (28e0 <setup+0x1ec>)
    2700:	f000 fec2 	bl	3488 <VisualMicroDebug::init(unsigned long)>
    2704:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    2708:	4875      	ldr	r0, [pc, #468]	; (28e0 <setup+0x1ec>)
    270a:	f000 feb9 	bl	3480 <VisualMicroDebug::begin(unsigned long)>
    270e:	2101      	movs	r1, #1
    2710:	4873      	ldr	r0, [pc, #460]	; (28e0 <setup+0x1ec>)
    2712:	f000 fe8f 	bl	3434 <VisualMicroDebug::outPacketStart(bool)>
    2716:	b150      	cbz	r0, 272e <setup+0x3a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2718:	2110      	movs	r1, #16
    271a:	4872      	ldr	r0, [pc, #456]	; (28e4 <setup+0x1f0>)
    271c:	f002 f9e6 	bl	4aec <usb_serial_write>
    2720:	486f      	ldr	r0, [pc, #444]	; (28e0 <setup+0x1ec>)
    2722:	210a      	movs	r1, #10
    2724:	f000 fe74 	bl	3410 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    2728:	486d      	ldr	r0, [pc, #436]	; (28e0 <setup+0x1ec>)
    272a:	f000 fea7 	bl	347c <VisualMicroDebug::outPacketEnd()>
    272e:	2201      	movs	r2, #1
    2730:	2100      	movs	r1, #0
    2732:	486b      	ldr	r0, [pc, #428]	; (28e0 <setup+0x1ec>)
    2734:	f000 ff54 	bl	35e0 <VisualMicroDebug::start(bool, bool)>
	delay(2000);
    2738:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    273c:	f001 f9be 	bl	3abc <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    2740:	4869      	ldr	r0, [pc, #420]	; (28e8 <setup+0x1f4>)
	//Serial.begin(57600);

	LEDS.setBrightness(max_bright);
    2742:	496a      	ldr	r1, [pc, #424]	; (28ec <setup+0x1f8>)
    2744:	6803      	ldr	r3, [r0, #0]
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    2746:	4a6a      	ldr	r2, [pc, #424]	; (28f0 <setup+0x1fc>)
    2748:	7809      	ldrb	r1, [r1, #0]
    274a:	7011      	strb	r1, [r2, #0]
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    274c:	f013 0401 	ands.w	r4, r3, #1
    2750:	f000 80a1 	beq.w	2896 <setup+0x1a2>
    2754:	2296      	movs	r2, #150	; 0x96
    2756:	2300      	movs	r3, #0
    2758:	4966      	ldr	r1, [pc, #408]	; (28f4 <setup+0x200>)
    275a:	4867      	ldr	r0, [pc, #412]	; (28f8 <setup+0x204>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    275c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 2918 <setup+0x224>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    2760:	4c66      	ldr	r4, [pc, #408]	; (28fc <setup+0x208>)
    2762:	f000 fc49 	bl	2ff8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>

	LEDS.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(leds, NUM_LEDS);

	set_max_power_in_volts_and_milliamps(5, 3000);
    2766:	f640 31b8 	movw	r1, #3000	; 0xbb8
    276a:	2005      	movs	r0, #5
    276c:	f000 fe44 	bl	33f8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    2770:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    2774:	2002      	movs	r0, #2
    2776:	f8a8 3000 	strh.w	r3, [r8]
    277a:	f001 f871 	bl	3860 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    277e:	f8b8 3000 	ldrh.w	r3, [r8]
    2782:	2700      	movs	r7, #0
    2784:	4403      	add	r3, r0
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    2786:	aa09      	add	r2, sp, #36	; 0x24
    2788:	a80a      	add	r0, sp, #40	; 0x28
    278a:	2110      	movs	r1, #16
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    278c:	ad0a      	add	r5, sp, #40	; 0x28
    278e:	f8a8 3000 	strh.w	r3, [r8]
    2792:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    2796:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    279a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    279e:	f000 fa8f 	bl	2cc0 <fill_solid(CRGB*, int, CRGB const&)>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    27a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    27a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    27a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    27a8:	f8b8 6000 	ldrh.w	r6, [r8]
    27ac:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    27b0:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    27b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    27b6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    27ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    27be:	3619      	adds	r6, #25
    27c0:	b2b5      	uxth	r5, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    27c2:	eb05 2615 	add.w	r6, r5, r5, lsr #8

	//led_mode = EEPROM.read(STARTMODE);

	current_palette  = CRGBPalette16(CRGB::Black);
	target_palette   = g_gradient_palettes[random8(g_gradient_palette_count + 1)];
    27c6:	b2f6      	uxtb	r6, r6
    27c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    27cc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    27d0:	ebc6 1603 	rsb	r6, r6, r3, lsl #4
    27d4:	11f6      	asrs	r6, r6, #7
    27d6:	4b4a      	ldr	r3, [pc, #296]	; (2900 <setup+0x20c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    27d8:	f8a8 5000 	strh.w	r5, [r8]
    27dc:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    27e0:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    27e4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    27e6:	3701      	adds	r7, #1
        } while ( u.index != 255);
    27e8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    27ea:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    27ec:	d1f8      	bne.n	27e0 <setup+0xec>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    27ee:	f8d8 3000 	ldr.w	r3, [r8]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    27f2:	9707      	str	r7, [sp, #28]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    27f4:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    27f8:	ea4f 6913 	mov.w	r9, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    27fc:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    27fe:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    2802:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    2806:	2400      	movs	r4, #0
    2808:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    280a:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    280e:	483d      	ldr	r0, [pc, #244]	; (2904 <setup+0x210>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2810:	f3c5 2707 	ubfx	r7, r5, #8, #8
    2814:	f3c5 4607 	ubfx	r6, r5, #16, #8
    2818:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    281a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    281e:	9104      	str	r1, [sp, #16]
    2820:	b2f1      	uxtb	r1, r6
    2822:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    2824:	fa5f f18c 	uxtb.w	r1, ip
    2828:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    282a:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    282c:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    282e:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2830:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2834:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    2836:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    283a:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    283e:	d80c      	bhi.n	285a <setup+0x166>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    2840:	9906      	ldr	r1, [sp, #24]
    2842:	458c      	cmp	ip, r1
    2844:	dc07      	bgt.n	2856 <setup+0x162>
    2846:	290f      	cmp	r1, #15
    2848:	d005      	beq.n	2856 <setup+0x162>
                    istart8 = lastSlotUsed + 1;
    284a:	3101      	adds	r1, #1
    284c:	b2c9      	uxtb	r1, r1
    284e:	428b      	cmp	r3, r1
    2850:	9103      	str	r1, [sp, #12]
    2852:	bf38      	it	cc
    2854:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    2856:	b259      	sxtb	r1, r3
    2858:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    285a:	a909      	add	r1, sp, #36	; 0x24
    285c:	9100      	str	r1, [sp, #0]
    285e:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2860:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    2864:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    2868:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    286c:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
    2870:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
    2874:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
    2878:	f000 fa52 	bl	2d20 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    287c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    287e:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    2882:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    2886:	46ce      	mov	lr, r9
    2888:	d1bf      	bne.n	280a <setup+0x116>
	current_blending = LINEARBLEND;
    288a:	4b1f      	ldr	r3, [pc, #124]	; (2908 <setup+0x214>)
    288c:	2201      	movs	r2, #1
    288e:	701a      	strb	r2, [r3, #0]

}
    2890:	b017      	add	sp, #92	; 0x5c
    2892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2896:	f001 f891 	bl	39bc <__cxa_guard_acquire>
    289a:	2800      	cmp	r0, #0
    289c:	f43f af5a 	beq.w	2754 <setup+0x60>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    28a0:	491a      	ldr	r1, [pc, #104]	; (290c <setup+0x218>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    28a2:	4b15      	ldr	r3, [pc, #84]	; (28f8 <setup+0x204>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    28a4:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    28a6:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    28a8:	22ff      	movs	r2, #255	; 0xff
    28aa:	2501      	movs	r5, #1
    28ac:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    28ae:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    28b0:	749d      	strb	r5, [r3, #18]
    28b2:	731a      	strb	r2, [r3, #12]
    28b4:	735a      	strb	r2, [r3, #13]
    28b6:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    28b8:	73da      	strb	r2, [r3, #15]
    28ba:	741a      	strb	r2, [r3, #16]
    28bc:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    28be:	b160      	cbz	r0, 28da <setup+0x1e6>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    28c0:	4a13      	ldr	r2, [pc, #76]	; (2910 <setup+0x21c>)
    28c2:	6811      	ldr	r1, [r2, #0]
    28c4:	b101      	cbz	r1, 28c8 <setup+0x1d4>
    28c6:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    28c8:	6013      	str	r3, [r2, #0]
		// CORE_PIN14_CONFIG = gState.pins[3];
	}


public:
	ARMHardwareSPIOutput() { m_pSelect = NULL; }
    28ca:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    28cc:	4911      	ldr	r1, [pc, #68]	; (2914 <setup+0x220>)
    28ce:	4806      	ldr	r0, [pc, #24]	; (28e8 <setup+0x1f4>)
    28d0:	619a      	str	r2, [r3, #24]
    28d2:	6019      	str	r1, [r3, #0]
    28d4:	f001 f878 	bl	39c8 <__cxa_guard_release>
    28d8:	e73c      	b.n	2754 <setup+0x60>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    28da:	600b      	str	r3, [r1, #0]
    28dc:	e7f0      	b.n	28c0 <setup+0x1cc>
    28de:	bf00      	nop
    28e0:	1fff9498 	.word	0x1fff9498
    28e4:	00005d80 	.word	0x00005d80
    28e8:	1fff8c74 	.word	0x1fff8c74
    28ec:	1fff875f 	.word	0x1fff875f
    28f0:	1fff9470 	.word	0x1fff9470
    28f4:	1fff8db0 	.word	0x1fff8db0
    28f8:	1fff8c78 	.word	0x1fff8c78
    28fc:	1fff90d0 	.word	0x1fff90d0
    2900:	00006910 	.word	0x00006910
    2904:	1fff943c 	.word	0x1fff943c
    2908:	1fff920b 	.word	0x1fff920b
    290c:	1fff9480 	.word	0x1fff9480
    2910:	1fff9490 	.word	0x1fff9490
    2914:	00005b90 	.word	0x00005b90
    2918:	1fff876a 	.word	0x1fff876a

0000291c <loop>:


void loop() {
    291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    2920:	f8df 9324 	ldr.w	r9, [pc, #804]	; 2c48 <loop+0x32c>
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    2924:	4db5      	ldr	r5, [pc, #724]	; (2bfc <loop+0x2e0>)
	current_blending = LINEARBLEND;

}


void loop() {
    2926:	b0a3      	sub	sp, #140	; 0x8c
	random16_add_entropy(random());
    2928:	f003 f8f0 	bl	5b0c <random>
    292c:	f8b9 3000 	ldrh.w	r3, [r9]

	EVERY_N_MILLISECONDS(50) {
    2930:	682a      	ldr	r2, [r5, #0]
    2932:	4418      	add	r0, r3
    2934:	f8a9 0000 	strh.w	r0, [r9]
    2938:	07d0      	lsls	r0, r2, #31
    293a:	f140 8086 	bpl.w	2a4a <loop+0x12e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    293e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 2c4c <loop+0x330>
    2942:	4caf      	ldr	r4, [pc, #700]	; (2c00 <loop+0x2e4>)
    2944:	f8d8 3000 	ldr.w	r3, [r8]
    2948:	930d      	str	r3, [sp, #52]	; 0x34
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    294a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    294e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2950:	1a5b      	subs	r3, r3, r1
    2952:	429a      	cmp	r2, r3
    2954:	f240 808c 	bls.w	2a70 <loop+0x154>
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
    2958:	4daa      	ldr	r5, [pc, #680]	; (2c04 <loop+0x2e8>)
    295a:	682b      	ldr	r3, [r5, #0]
    295c:	07d9      	lsls	r1, r3, #31
    295e:	f140 8096 	bpl.w	2a8e <loop+0x172>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2962:	f8d8 3000 	ldr.w	r3, [r8]
    2966:	4ca8      	ldr	r4, [pc, #672]	; (2c08 <loop+0x2ec>)
    2968:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    296a:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    296c:	48a7      	ldr	r0, [pc, #668]	; (2c0c <loop+0x2f0>)
    296e:	8822      	ldrh	r2, [r4, #0]
    2970:	8861      	ldrh	r1, [r4, #2]
    2972:	fba0 0303 	umull	r0, r3, r0, r3
    2976:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    297a:	b29b      	uxth	r3, r3
    297c:	4299      	cmp	r1, r3
    297e:	d80d      	bhi.n	299c <loop+0x80>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2980:	f8d8 3000 	ldr.w	r3, [r8]
    2984:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    2986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2988:	49a0      	ldr	r1, [pc, #640]	; (2c0c <loop+0x2f0>)
		if(use_palette){
    298a:	4aa1      	ldr	r2, [pc, #644]	; (2c10 <loop+0x2f4>)
    298c:	fba1 1303 	umull	r1, r3, r1, r3
    2990:	7812      	ldrb	r2, [r2, #0]
    2992:	099b      	lsrs	r3, r3, #6
    2994:	8023      	strh	r3, [r4, #0]
    2996:	2a00      	cmp	r2, #0
    2998:	f040 8099 	bne.w	2ace <loop+0x1b2>
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
    299c:	4d9d      	ldr	r5, [pc, #628]	; (2c14 <loop+0x2f8>)
    299e:	682b      	ldr	r3, [r5, #0]
    29a0:	07da      	lsls	r2, r3, #31
    29a2:	f140 8089 	bpl.w	2ab8 <loop+0x19c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    29a6:	f8d8 3000 	ldr.w	r3, [r8]
    29aa:	4c9b      	ldr	r4, [pc, #620]	; (2c18 <loop+0x2fc>)
    29ac:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    29ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    29b0:	4896      	ldr	r0, [pc, #600]	; (2c0c <loop+0x2f0>)
    29b2:	8822      	ldrh	r2, [r4, #0]
    29b4:	8861      	ldrh	r1, [r4, #2]
    29b6:	fba0 0303 	umull	r0, r3, r0, r3
    29ba:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    29be:	b29b      	uxth	r3, r3
    29c0:	4299      	cmp	r1, r3
    29c2:	d81f      	bhi.n	2a04 <loop+0xe8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    29c4:	f8b9 3000 	ldrh.w	r3, [r9]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    29c8:	f8d8 2000 	ldr.w	r2, [r8]
    29cc:	9212      	str	r2, [sp, #72]	; 0x48
    29ce:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    29d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    29d6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    29da:	3319      	adds	r3, #25
    29dc:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    29de:	eb03 2213 	add.w	r2, r3, r3, lsr #8
	return ret;
    29e2:	9912      	ldr	r1, [sp, #72]	; 0x48
    29e4:	4e89      	ldr	r6, [pc, #548]	; (2c0c <loop+0x2f0>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    29e6:	f8a9 3000 	strh.w	r3, [r9]
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
    29ea:	b2d3      	uxtb	r3, r2
    29ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    29f0:	fba6 1201 	umull	r1, r2, r6, r1
    29f4:	4d89      	ldr	r5, [pc, #548]	; (2c1c <loop+0x300>)
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
		mode_change = 1;
    29f6:	488a      	ldr	r0, [pc, #552]	; (2c20 <loop+0x304>)
		current_mode_number = random8(ARRAY_SIZE(modes));
    29f8:	119b      	asrs	r3, r3, #6
    29fa:	0992      	lsrs	r2, r2, #6
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
		mode_change = 1;
    29fc:	2101      	movs	r1, #1
		current_mode_number = random8(ARRAY_SIZE(modes));
    29fe:	702b      	strb	r3, [r5, #0]
    2a00:	8022      	strh	r2, [r4, #0]
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
		mode_change = 1;
    2a02:	7001      	strb	r1, [r0, #0]
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

	EVERY_N_MILLIS_I(this_timer, this_delay) {
    2a04:	4d87      	ldr	r5, [pc, #540]	; (2c24 <loop+0x308>)
    2a06:	682b      	ldr	r3, [r5, #0]
    2a08:	07db      	lsls	r3, r3, #31
    2a0a:	d54b      	bpl.n	2aa4 <loop+0x188>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a0c:	f8d8 3000 	ldr.w	r3, [r8]
    2a10:	4c85      	ldr	r4, [pc, #532]	; (2c28 <loop+0x30c>)
    2a12:	9316      	str	r3, [sp, #88]	; 0x58
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    2a14:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    2a18:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2a1a:	1a5b      	subs	r3, r3, r1
    2a1c:	4293      	cmp	r3, r2
    2a1e:	d30d      	bcc.n	2a3c <loop+0x120>
		this_timer.setPeriod(this_delay);
		modes[current_mode_number]();
    2a20:	4b7e      	ldr	r3, [pc, #504]	; (2c1c <loop+0x300>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a22:	f8d8 1000 	ldr.w	r1, [r8]
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

	EVERY_N_MILLIS_I(this_timer, this_delay) {
		this_timer.setPeriod(this_delay);
    2a26:	4a81      	ldr	r2, [pc, #516]	; (2c2c <loop+0x310>)
		modes[current_mode_number]();
    2a28:	7818      	ldrb	r0, [r3, #0]
    2a2a:	9115      	str	r1, [sp, #84]	; 0x54
    2a2c:	4b80      	ldr	r3, [pc, #512]	; (2c30 <loop+0x314>)
	return ret;
    2a2e:	9915      	ldr	r1, [sp, #84]	; 0x54
    2a30:	6812      	ldr	r2, [r2, #0]
    2a32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2a36:	e884 0006 	stmia.w	r4, {r1, r2}
    2a3a:	4798      	blx	r3
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    2a3c:	487d      	ldr	r0, [pc, #500]	; (2c34 <loop+0x318>)
    2a3e:	7801      	ldrb	r1, [r0, #0]
    2a40:	f000 fb2c 	bl	309c <CFastLED::show(unsigned char)>
	}


	FastLED.show();

}
    2a44:	b023      	add	sp, #140	; 0x8c
    2a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    2a4a:	4628      	mov	r0, r5
    2a4c:	f000 ffb6 	bl	39bc <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a50:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 2c4c <loop+0x330>
    2a54:	4c6a      	ldr	r4, [pc, #424]	; (2c00 <loop+0x2e4>)
    2a56:	2800      	cmp	r0, #0
    2a58:	f040 8107 	bne.w	2c6a <loop+0x34e>
    2a5c:	f8d8 3000 	ldr.w	r3, [r8]
    2a60:	930d      	str	r3, [sp, #52]	; 0x34
    2a62:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    2a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a68:	1a5b      	subs	r3, r3, r1
    2a6a:	4293      	cmp	r3, r2
    2a6c:	f4ff af74 	bcc.w	2958 <loop+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a70:	f8d8 3000 	ldr.w	r3, [r8]
    2a74:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    2a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
    2a78:	4d62      	ldr	r5, [pc, #392]	; (2c04 <loop+0x2e8>)

void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
    2a7a:	496f      	ldr	r1, [pc, #444]	; (2c38 <loop+0x31c>)
    2a7c:	6023      	str	r3, [r4, #0]
    2a7e:	486f      	ldr	r0, [pc, #444]	; (2c3c <loop+0x320>)
    2a80:	2218      	movs	r2, #24
    2a82:	f000 fa91 	bl	2fa8 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
	}

	EVERY_N_SECONDS(25){
    2a86:	682b      	ldr	r3, [r5, #0]
    2a88:	07d9      	lsls	r1, r3, #31
    2a8a:	f53f af6a 	bmi.w	2962 <loop+0x46>
    2a8e:	4628      	mov	r0, r5
    2a90:	f000 ff94 	bl	39bc <__cxa_guard_acquire>
    2a94:	2800      	cmp	r0, #0
    2a96:	f040 80f3 	bne.w	2c80 <loop+0x364>
    2a9a:	4c5b      	ldr	r4, [pc, #364]	; (2c08 <loop+0x2ec>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a9c:	f8d8 3000 	ldr.w	r3, [r8]
    2aa0:	9310      	str	r3, [sp, #64]	; 0x40
    2aa2:	e762      	b.n	296a <loop+0x4e>
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

	EVERY_N_MILLIS_I(this_timer, this_delay) {
    2aa4:	4628      	mov	r0, r5
    2aa6:	f000 ff89 	bl	39bc <__cxa_guard_acquire>
    2aaa:	2800      	cmp	r0, #0
    2aac:	f040 80d0 	bne.w	2c50 <loop+0x334>
    2ab0:	4c5d      	ldr	r4, [pc, #372]	; (2c28 <loop+0x30c>)
    2ab2:	f8d8 3000 	ldr.w	r3, [r8]
    2ab6:	e7ac      	b.n	2a12 <loop+0xf6>
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
    2ab8:	4628      	mov	r0, r5
    2aba:	f000 ff7f 	bl	39bc <__cxa_guard_acquire>
    2abe:	2800      	cmp	r0, #0
    2ac0:	f040 808c 	bne.w	2bdc <loop+0x2c0>
    2ac4:	4c54      	ldr	r4, [pc, #336]	; (2c18 <loop+0x2fc>)
    2ac6:	f8d8 3000 	ldr.w	r3, [r8]
    2aca:	9313      	str	r3, [sp, #76]	; 0x4c
    2acc:	e76f      	b.n	29ae <loop+0x92>
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };

    CRGBPalette16( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    2ace:	4d5a      	ldr	r5, [pc, #360]	; (2c38 <loop+0x31c>)
    2ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ad2:	ac16      	add	r4, sp, #88	; 0x58
    2ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2ada:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2ade:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
		if(use_palette){
			updatePaletteIndex(target_palette);
    2ae2:	a816      	add	r0, sp, #88	; 0x58
    2ae4:	f7ff fb10 	bl	2108 <updatePaletteIndex(CRGBPalette16)>
    2ae8:	f8b9 3000 	ldrh.w	r3, [r9]
			palette_index = random8(g_gradient_palette_count);
			target_palette = g_gradient_palettes[palette_index]	;
    2aec:	4854      	ldr	r0, [pc, #336]	; (2c40 <loop+0x324>)
	}

	EVERY_N_SECONDS(25){
		if(use_palette){
			updatePaletteIndex(target_palette);
			palette_index = random8(g_gradient_palette_count);
    2aee:	4955      	ldr	r1, [pc, #340]	; (2c44 <loop+0x328>)
    2af0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2af4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2af8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2afc:	3319      	adds	r3, #25
    2afe:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2b00:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2b04:	b2d2      	uxtb	r2, r2
    2b06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2b0a:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
    2b0e:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2b10:	f8a9 3000 	strh.w	r3, [r9]
			target_palette = g_gradient_palettes[palette_index]	;
    2b14:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
	}

	EVERY_N_SECONDS(25){
		if(use_palette){
			updatePaletteIndex(target_palette);
			palette_index = random8(g_gradient_palette_count);
    2b18:	700a      	strb	r2, [r1, #0]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2b1a:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2b1c:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    2b20:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2b22:	3701      	adds	r7, #1
        } while ( u.index != 255);
    2b24:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2b26:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    2b28:	d1f8      	bne.n	2b1c <loop+0x200>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2b2a:	f8da 3000 	ldr.w	r3, [sl]
    2b2e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2b32:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    2b36:	f3c3 4b07 	ubfx	fp, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2b3a:	9207      	str	r2, [sp, #28]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    2b3c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    2b40:	0e1b      	lsrs	r3, r3, #24
    2b42:	9205      	str	r2, [sp, #20]
    2b44:	9304      	str	r3, [sp, #16]

        int indexstart = 0;
    2b46:	2400      	movs	r4, #0
    2b48:	9708      	str	r7, [sp, #32]
    2b4a:	46de      	mov	lr, fp
    2b4c:	46d0      	mov	r8, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2b4e:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2b52:	4839      	ldr	r0, [pc, #228]	; (2c38 <loop+0x31c>)
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
    2b54:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2b58:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    2b5c:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    2b5e:	f3c5 4607 	ubfx	r6, r5, #16, #8
    2b62:	f3c5 6507 	ubfx	r5, r5, #24, #8
    2b66:	b2e9      	uxtb	r1, r5
    2b68:	9106      	str	r1, [sp, #24]
            istart8 = indexstart / 16;
    2b6a:	fa5f f18c 	uxtb.w	r1, ip
    2b6e:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    2b70:	9908      	ldr	r1, [sp, #32]
    2b72:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2b74:	aa16      	add	r2, sp, #88	; 0x58
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    2b76:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2b7a:	fa5f fb87 	uxtb.w	fp, r7
    2b7e:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2b82:	d80c      	bhi.n	2b9e <loop+0x282>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    2b84:	9907      	ldr	r1, [sp, #28]
    2b86:	458c      	cmp	ip, r1
    2b88:	dc07      	bgt.n	2b9a <loop+0x27e>
    2b8a:	290f      	cmp	r1, #15
    2b8c:	d005      	beq.n	2b9a <loop+0x27e>
                    istart8 = lastSlotUsed + 1;
    2b8e:	3101      	adds	r1, #1
    2b90:	b2c9      	uxtb	r1, r1
    2b92:	428b      	cmp	r3, r1
    2b94:	9103      	str	r1, [sp, #12]
    2b96:	bf38      	it	cc
    2b98:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    2b9a:	b259      	sxtb	r1, r3
    2b9c:	9107      	str	r1, [sp, #28]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2b9e:	a915      	add	r1, sp, #84	; 0x54
    2ba0:	9100      	str	r1, [sp, #0]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ba2:	f89d c014 	ldrb.w	ip, [sp, #20]
        g = rhs.g;
    2ba6:	f88d e059 	strb.w	lr, [sp, #89]	; 0x59
    2baa:	9903      	ldr	r1, [sp, #12]
        b = rhs.b;
    2bac:	f89d e010 	ldrb.w	lr, [sp, #16]
    2bb0:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2bb4:	f88d c058 	strb.w	ip, [sp, #88]	; 0x58
    2bb8:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
        g = rhs.g;
    2bbc:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
        b = rhs.b;
    2bc0:	f88d 5056 	strb.w	r5, [sp, #86]	; 0x56
    2bc4:	f000 f8ac 	bl	2d20 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    2bc8:	9b06      	ldr	r3, [sp, #24]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2bca:	f8cd b014 	str.w	fp, [sp, #20]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    2bce:	2cff      	cmp	r4, #255	; 0xff
        g = rhs.g;
    2bd0:	46d6      	mov	lr, sl
        b = rhs.b;
    2bd2:	9304      	str	r3, [sp, #16]
    2bd4:	d1bb      	bne.n	2b4e <loop+0x232>
    2bd6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    2bda:	e6df      	b.n	299c <loop+0x80>
    2bdc:	f8d8 3000 	ldr.w	r3, [r8]
    2be0:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    2be2:	9b11      	ldr	r3, [sp, #68]	; 0x44
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    2be4:	4a09      	ldr	r2, [pc, #36]	; (2c0c <loop+0x2f0>)
    2be6:	4c0c      	ldr	r4, [pc, #48]	; (2c18 <loop+0x2fc>)
    2be8:	fba2 2303 	umull	r2, r3, r2, r3
    2bec:	099b      	lsrs	r3, r3, #6
    2bee:	2278      	movs	r2, #120	; 0x78
			target_palette = g_gradient_palettes[palette_index]	;
		}
	}

	EVERY_N_SECONDS(120) {
    2bf0:	4628      	mov	r0, r5
    2bf2:	8023      	strh	r3, [r4, #0]
    2bf4:	8062      	strh	r2, [r4, #2]
    2bf6:	f000 fee7 	bl	39c8 <__cxa_guard_release>
    2bfa:	e764      	b.n	2ac6 <loop+0x1aa>
    2bfc:	1fff91fc 	.word	0x1fff91fc
    2c00:	1fff8da0 	.word	0x1fff8da0
    2c04:	1fff9200 	.word	0x1fff9200
    2c08:	1fff9074 	.word	0x1fff9074
    2c0c:	10624dd3 	.word	0x10624dd3
    2c10:	1fff8756 	.word	0x1fff8756
    2c14:	1fff9204 	.word	0x1fff9204
    2c18:	1fff8da8 	.word	0x1fff8da8
    2c1c:	1fff8cac 	.word	0x1fff8cac
    2c20:	1fff8760 	.word	0x1fff8760
    2c24:	1fff9064 	.word	0x1fff9064
    2c28:	1fff907c 	.word	0x1fff907c
    2c2c:	1fff8758 	.word	0x1fff8758
    2c30:	1fff8720 	.word	0x1fff8720
    2c34:	1fff9470 	.word	0x1fff9470
    2c38:	1fff943c 	.word	0x1fff943c
    2c3c:	1fff90d0 	.word	0x1fff90d0
    2c40:	00006910 	.word	0x00006910
    2c44:	1fff9439 	.word	0x1fff9439
    2c48:	1fff876a 	.word	0x1fff876a
    2c4c:	1fff94e8 	.word	0x1fff94e8
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c50:	f8d8 2000 	ldr.w	r2, [r8]
		mode_change = 1;
		current_mode_number = random8(ARRAY_SIZE(modes));
	  //current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
	}

	EVERY_N_MILLIS_I(this_timer, this_delay) {
    2c54:	4b12      	ldr	r3, [pc, #72]	; (2ca0 <loop+0x384>)
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    2c56:	4c13      	ldr	r4, [pc, #76]	; (2ca4 <loop+0x388>)
    2c58:	9214      	str	r2, [sp, #80]	; 0x50
	return ret;
    2c5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2c5c:	681b      	ldr	r3, [r3, #0]
    2c5e:	6022      	str	r2, [r4, #0]
    2c60:	4628      	mov	r0, r5
    2c62:	6063      	str	r3, [r4, #4]
    2c64:	f000 feb0 	bl	39c8 <__cxa_guard_release>
    2c68:	e723      	b.n	2ab2 <loop+0x196>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c6a:	f8d8 3000 	ldr.w	r3, [r8]
    2c6e:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    2c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2c72:	6023      	str	r3, [r4, #0]
    2c74:	2332      	movs	r3, #50	; 0x32


void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    2c76:	4628      	mov	r0, r5
    2c78:	6063      	str	r3, [r4, #4]
    2c7a:	f000 fea5 	bl	39c8 <__cxa_guard_release>
    2c7e:	e6ed      	b.n	2a5c <loop+0x140>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c80:	f8d8 3000 	ldr.w	r3, [r8]
    2c84:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    2c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    2c88:	4a07      	ldr	r2, [pc, #28]	; (2ca8 <loop+0x38c>)
    2c8a:	4c08      	ldr	r4, [pc, #32]	; (2cac <loop+0x390>)
    2c8c:	fba2 2303 	umull	r2, r3, r2, r3
    2c90:	099b      	lsrs	r3, r3, #6
    2c92:	2219      	movs	r2, #25
		nblendPaletteTowardPalette(current_palette, target_palette, 24); // maxChanges = 24
	}

	EVERY_N_SECONDS(25){
    2c94:	4628      	mov	r0, r5
    2c96:	8023      	strh	r3, [r4, #0]
    2c98:	8062      	strh	r2, [r4, #2]
    2c9a:	f000 fe95 	bl	39c8 <__cxa_guard_release>
    2c9e:	e6fd      	b.n	2a9c <loop+0x180>
    2ca0:	1fff8758 	.word	0x1fff8758
    2ca4:	1fff907c 	.word	0x1fff907c
    2ca8:	10624dd3 	.word	0x10624dd3
    2cac:	1fff9074 	.word	0x1fff9074

00002cb0 <_GLOBAL__sub_I_leds>:
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2cb0:	4b02      	ldr	r3, [pc, #8]	; (2cbc <_GLOBAL__sub_I_leds+0xc>)
    2cb2:	2200      	movs	r2, #0
    2cb4:	701a      	strb	r2, [r3, #0]
    2cb6:	705a      	strb	r2, [r3, #1]
    2cb8:	709a      	strb	r2, [r3, #2]
    2cba:	4770      	bx	lr
    2cbc:	1fff92a8 	.word	0x1fff92a8

00002cc0 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    2cc0:	2900      	cmp	r1, #0
    2cc2:	dd0b      	ble.n	2cdc <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    2cc4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2cc8:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2cca:	7813      	ldrb	r3, [r2, #0]
    2ccc:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    2cce:	7853      	ldrb	r3, [r2, #1]
    2cd0:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    2cd2:	7893      	ldrb	r3, [r2, #2]
    2cd4:	7083      	strb	r3, [r0, #2]
    2cd6:	3003      	adds	r0, #3
    2cd8:	4288      	cmp	r0, r1
    2cda:	d1f6      	bne.n	2cca <fill_solid(CRGB*, int, CRGB const&)+0xa>
    2cdc:	4770      	bx	lr
    2cde:	bf00      	nop

00002ce0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    2ce0:	b570      	push	{r4, r5, r6, lr}
    2ce2:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    2ce4:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    2ce6:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    2ce8:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    2cea:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    2cee:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    2cf2:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    2cf6:	dd10      	ble.n	2d1a <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    2cf8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2cfc:	461e      	mov	r6, r3
    2cfe:	4604      	mov	r4, r0
    2d00:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2d02:	4621      	mov	r1, r4
    2d04:	a801      	add	r0, sp, #4
    2d06:	f000 fa39 	bl	317c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    2d0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2d0e:	3403      	adds	r4, #3
    2d10:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    2d12:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    2d14:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    2d18:	d1f3      	bne.n	2d02 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    2d1a:	b002      	add	sp, #8
    2d1c:	bd70      	pop	{r4, r5, r6, pc}
    2d1e:	bf00      	nop

00002d20 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    2d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    2d24:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    2d26:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    2d28:	d352      	bcc.n	2dd0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    2d2a:	f896 e000 	ldrb.w	lr, [r6]
    2d2e:	7815      	ldrb	r5, [r2, #0]
    2d30:	7877      	ldrb	r7, [r6, #1]
    2d32:	f896 8002 	ldrb.w	r8, [r6, #2]
    2d36:	7854      	ldrb	r4, [r2, #1]
    2d38:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    2d3c:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    2d40:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    2d44:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    2d48:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    2d4c:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    2d50:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    2d54:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    2d58:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    2d5a:	b3b2      	cbz	r2, 2dca <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    2d5c:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    2d60:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    2d64:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    2d68:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    2d6c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    2d70:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    2d74:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    2d76:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    2d7a:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    2d7e:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    2d82:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    2d86:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    2d8a:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    2d8e:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    2d92:	d818      	bhi.n	2dc6 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    2d94:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    2d98:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    2d9a:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    2d9c:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2d9e:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    2da2:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    2da6:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    2daa:	4475      	add	r5, lr
        g88 += gdelta87;
    2dac:	4454      	add	r4, sl
        b88 += bdelta87;
    2dae:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    2db0:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2db2:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    2db6:	b2ad      	uxth	r5, r5
        g = rhs.g;
    2db8:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    2dbc:	b2a4      	uxth	r4, r4
        b = rhs.b;
    2dbe:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    2dc2:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    2dc4:	d2e6      	bcs.n	2d94 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    2dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dca:	f04f 0b01 	mov.w	fp, #1
    2dce:	e7c7      	b.n	2d60 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    2dd0:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2dd2:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2dd4:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2dd8:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2dda:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    2ddc:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    2de0:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2de4:	7015      	strb	r5, [r2, #0]
    2de6:	4619      	mov	r1, r3
    2de8:	f886 e000 	strb.w	lr, [r6]
    2dec:	464b      	mov	r3, r9
        g = rhs.g;
    2dee:	7054      	strb	r4, [r2, #1]
    2df0:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    2df2:	f882 c002 	strb.w	ip, [r2, #2]
    2df6:	f886 8002 	strb.w	r8, [r6, #2]
    2dfa:	e79f      	b.n	2d3c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00002dfc <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    2dfc:	b309      	cbz	r1, 2e42 <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    2dfe:	b430      	push	{r4, r5}
    2e00:	1e4d      	subs	r5, r1, #1
    2e02:	b2ad      	uxth	r5, r5
    2e04:	43d2      	mvns	r2, r2
    2e06:	3501      	adds	r5, #1
    2e08:	b2d2      	uxtb	r2, r2
    2e0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2e0e:	4405      	add	r5, r0
    2e10:	3201      	adds	r2, #1
    2e12:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2e14:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    2e18:	fb02 f303 	mul.w	r3, r2, r3
    2e1c:	121b      	asrs	r3, r3, #8
    2e1e:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2e22:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2e24:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2e26:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2e2a:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2e2e:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2e30:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2e32:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2e34:	7083      	strb	r3, [r0, #2]
    2e36:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    2e38:	4285      	cmp	r5, r0
    2e3a:	f104 0403 	add.w	r4, r4, #3
    2e3e:	d1e9      	bne.n	2e14 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    2e40:	bc30      	pop	{r4, r5}
    2e42:	4770      	bx	lr

00002e44 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    2e44:	f7ff bfda 	b.w	2dfc <fade_raw(CRGB*, unsigned short, unsigned char)>

00002e48 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    2e48:	b322      	cbz	r2, 2e94 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    2e4a:	2aff      	cmp	r2, #255	; 0xff
    2e4c:	d023      	beq.n	2e96 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    2e4e:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    2e50:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    2e52:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    2e54:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    2e56:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    2e58:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    2e5a:	43d2      	mvns	r2, r2
    2e5c:	fb06 7605 	mla	r6, r6, r5, r7
    2e60:	b2d2      	uxtb	r2, r2
    2e62:	fb04 6402 	mla	r4, r4, r2, r6
    2e66:	f3c4 2407 	ubfx	r4, r4, #8, #8
    2e6a:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    2e6c:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    2e6e:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    2e70:	191f      	adds	r7, r3, r4
    2e72:	fb04 7405 	mla	r4, r4, r5, r7
    2e76:	fb03 4302 	mla	r3, r3, r2, r4
    2e7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2e7e:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    2e80:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    2e82:	18f1      	adds	r1, r6, r3
    2e84:	fb03 1505 	mla	r5, r3, r5, r1
    2e88:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    2e8c:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    2e8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2e92:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    2e94:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2e96:	780b      	ldrb	r3, [r1, #0]
    2e98:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    2e9a:	784b      	ldrb	r3, [r1, #1]
    2e9c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    2e9e:	788b      	ldrb	r3, [r1, #2]
    2ea0:	7083      	strb	r3, [r0, #2]
    2ea2:	4770      	bx	lr

00002ea4 <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    2ea4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    2ea8:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    2eac:	3100      	adds	r1, #0
    2eae:	bf18      	it	ne
    2eb0:	2101      	movne	r1, #1
    2eb2:	eb01 2123 	add.w	r1, r1, r3, asr #8
    2eb6:	b2c9      	uxtb	r1, r1
    2eb8:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    2eba:	060a      	lsls	r2, r1, #24
    2ebc:	b2db      	uxtb	r3, r3
    2ebe:	d40e      	bmi.n	2ede <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    2ec0:	f001 0140 	and.w	r1, r1, #64	; 0x40
    2ec4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    2ec8:	b919      	cbnz	r1, 2ed2 <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    2eca:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    2ecc:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    2ece:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    2ed0:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    2ed2:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    2ed4:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    2ed6:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    2ed8:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    2eda:	7082      	strb	r2, [r0, #2]
    2edc:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    2ede:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    2ee0:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    2ee2:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    2ee4:	7042      	strb	r2, [r0, #1]
    2ee6:	4770      	bx	lr

00002ee8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    2ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    2eec:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    2eee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    2ef2:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    2ef6:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    2ef8:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    2efc:	d000      	beq.n	2f00 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    2efe:	b9e6      	cbnz	r6, 2f3a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    2f00:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    2f02:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    2f04:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    2f06:	2bff      	cmp	r3, #255	; 0xff
    2f08:	d012      	beq.n	2f30 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d043      	beq.n	2f96 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    2f0e:	3301      	adds	r3, #1
    2f10:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    2f12:	b11c      	cbz	r4, 2f1c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    2f14:	fb03 4404 	mla	r4, r3, r4, r4
    2f18:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    2f1c:	b119      	cbz	r1, 2f26 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    2f1e:	fb03 1101 	mla	r1, r3, r1, r1
    2f22:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    2f26:	b11a      	cbz	r2, 2f30 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    2f28:	fb03 2202 	mla	r2, r3, r2, r2
    2f2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    2f30:	7004      	strb	r4, [r0, #0]
    2f32:	7041      	strb	r1, [r0, #1]
    2f34:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    2f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    2f3a:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    2f3c:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    2f3e:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    2f42:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    2f44:	d000      	beq.n	2f48 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    2f46:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    2f48:	0112      	lsls	r2, r2, #4
    2f4a:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    2f4e:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    2f50:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    2f54:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    2f58:	f891 8002 	ldrb.w	r8, [r1, #2]
    2f5c:	fb04 f606 	mul.w	r6, r4, r6
    2f60:	1c51      	adds	r1, r2, #1
    2f62:	fb04 f509 	mul.w	r5, r4, r9
    2f66:	fb04 f407 	mul.w	r4, r4, r7
    2f6a:	f3c4 2407 	ubfx	r4, r4, #8, #8
    2f6e:	f3c6 2707 	ubfx	r7, r6, #8, #8
    2f72:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    2f76:	fb01 f60c 	mul.w	r6, r1, ip
    2f7a:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    2f7e:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    2f82:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    2f86:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    2f8a:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    2f8e:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    2f90:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    2f92:	b2d2      	uxtb	r2, r2
    2f94:	e7b7      	b.n	2f06 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    2f96:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    2f98:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    2f9a:	461c      	mov	r4, r3
    2f9c:	7004      	strb	r4, [r0, #0]
    2f9e:	7041      	strb	r1, [r0, #1]
    2fa0:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    2fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2fa6:	bf00      	nop

00002fa8 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    2fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2faa:	3901      	subs	r1, #1
    2fac:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    2fae:	2500      	movs	r5, #0
    2fb0:	302f      	adds	r0, #47	; 0x2f
    2fb2:	e001      	b.n	2fb8 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    2fb4:	4284      	cmp	r4, r0
    2fb6:	d01e      	beq.n	2ff6 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    2fb8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    2fbc:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    2fc0:	42b3      	cmp	r3, r6
    2fc2:	d0f7      	beq.n	2fb4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    2fc4:	f103 0701 	add.w	r7, r3, #1
    2fc8:	d204      	bcs.n	2fd4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    2fca:	b2fb      	uxtb	r3, r7
    2fcc:	7023      	strb	r3, [r4, #0]
    2fce:	3501      	adds	r5, #1
    2fd0:	780e      	ldrb	r6, [r1, #0]
    2fd2:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    2fd4:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    2fd6:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    2fd8:	b2ff      	uxtb	r7, r7
    2fda:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    2fde:	d208      	bcs.n	2ff2 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    2fe0:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    2fe2:	780e      	ldrb	r6, [r1, #0]
    2fe4:	42be      	cmp	r6, r7
    2fe6:	bf38      	it	cc
    2fe8:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    2fea:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    2fee:	bf38      	it	cc
    2ff0:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    2ff2:	4295      	cmp	r5, r2
    2ff4:	d3de      	bcc.n	2fb4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    2ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002ff8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    2ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    2ffa:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    2ffc:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    2ffe:	4604      	mov	r4, r0
    3000:	bfcc      	ite	gt
    3002:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    3006:	2500      	movle	r5, #0
    3008:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    300a:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    300c:	bfd8      	it	le
    300e:	4616      	movle	r6, r2

	pLed->init();
    3010:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    3012:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    3014:	6823      	ldr	r3, [r4, #0]
    3016:	6062      	str	r2, [r4, #4]
    3018:	695b      	ldr	r3, [r3, #20]
    301a:	4a0a      	ldr	r2, [pc, #40]	; (3044 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    301c:	6166      	str	r6, [r4, #20]
    301e:	4293      	cmp	r3, r2
    3020:	d101      	bne.n	3026 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    3022:	4620      	mov	r0, r4
    3024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    3026:	4620      	mov	r0, r4
    3028:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    302a:	2800      	cmp	r0, #0
    302c:	d0f9      	beq.n	3022 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    302e:	4a06      	ldr	r2, [pc, #24]	; (3048 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    3030:	4b06      	ldr	r3, [pc, #24]	; (304c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    3032:	6851      	ldr	r1, [r2, #4]
    3034:	fb93 f0f0 	sdiv	r0, r3, r0
    3038:	4288      	cmp	r0, r1
    303a:	bf38      	it	cc
    303c:	4608      	movcc	r0, r1
    303e:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    3040:	4620      	mov	r0, r4
    3042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3044:	00000471 	.word	0x00000471
    3048:	1fff9470 	.word	0x1fff9470
    304c:	000f4240 	.word	0x000f4240

00003050 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    3050:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    3052:	4c0f      	ldr	r4, [pc, #60]	; (3090 <CFastLED::countFPS(int)+0x40>)
    3054:	6822      	ldr	r2, [r4, #0]
    3056:	1c53      	adds	r3, r2, #1
    3058:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    305a:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    305c:	6023      	str	r3, [r4, #0]
    305e:	db13      	blt.n	3088 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3060:	4d0c      	ldr	r5, [pc, #48]	; (3094 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    3062:	4a0d      	ldr	r2, [pc, #52]	; (3098 <CFastLED::countFPS(int)+0x48>)
    3064:	6829      	ldr	r1, [r5, #0]
    3066:	9101      	str	r1, [sp, #4]
	return ret;
    3068:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    306a:	682d      	ldr	r5, [r5, #0]
    306c:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    306e:	6816      	ldr	r6, [r2, #0]
	return ret;
    3070:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    3072:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    3078:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    307a:	1b89      	subs	r1, r1, r6
    307c:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    3080:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3082:	fbb3 f3f1 	udiv	r3, r3, r1
    3086:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    3088:	b003      	add	sp, #12
    308a:	bc70      	pop	{r4, r5, r6}
    308c:	4770      	bx	lr
    308e:	bf00      	nop
    3090:	1fff9484 	.word	0x1fff9484
    3094:	1fff94e8 	.word	0x1fff94e8
    3098:	1fff948c 	.word	0x1fff948c

0000309c <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30a0:	6843      	ldr	r3, [r0, #4]
    30a2:	4c2d      	ldr	r4, [pc, #180]	; (3158 <CFastLED::show(unsigned char)+0xbc>)
    30a4:	b083      	sub	sp, #12
    30a6:	4606      	mov	r6, r0
    30a8:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    30aa:	2b00      	cmp	r3, #0
    30ac:	d14b      	bne.n	3146 <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    30ae:	f000 fce3 	bl	3a78 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    30b2:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    30b4:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    30b6:	b11b      	cbz	r3, 30c0 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    30b8:	4648      	mov	r0, r9
    30ba:	68b1      	ldr	r1, [r6, #8]
    30bc:	4798      	blx	r3
    30be:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    30c0:	4b26      	ldr	r3, [pc, #152]	; (315c <CFastLED::show(unsigned char)+0xc0>)
    30c2:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    30c4:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    30c6:	2c00      	cmp	r4, #0
    30c8:	d036      	beq.n	3138 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    30ca:	8873      	ldrh	r3, [r6, #2]
    30cc:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    30ce:	6861      	ldr	r1, [r4, #4]
    30d0:	6962      	ldr	r2, [r4, #20]
    30d2:	2b63      	cmp	r3, #99	; 0x63
    30d4:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    30d6:	bf98      	it	ls
    30d8:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    30da:	f8d3 8004 	ldr.w	r8, [r3, #4]
    30de:	f88d 5004 	strb.w	r5, [sp, #4]
    30e2:	f88d 5005 	strb.w	r5, [sp, #5]
    30e6:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    30ea:	f1b9 0f00 	cmp.w	r9, #0
    30ee:	d01c      	beq.n	312a <CFastLED::show(unsigned char)+0x8e>
    30f0:	f104 030b 	add.w	r3, r4, #11
    30f4:	f10d 0e04 	add.w	lr, sp, #4
    30f8:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    30fc:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    3100:	f1bb 0f00 	cmp.w	fp, #0
    3104:	d00d      	beq.n	3122 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    3106:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    310a:	f10a 0001 	add.w	r0, sl, #1
    310e:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    3112:	f1ba 0f00 	cmp.w	sl, #0
    3116:	d004      	beq.n	3122 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3118:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    311c:	0c00      	lsrs	r0, r0, #16
    311e:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    3122:	4563      	cmp	r3, ip
    3124:	f10e 0e01 	add.w	lr, lr, #1
    3128:	d1e8      	bne.n	30fc <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    312a:	4620      	mov	r0, r4
    312c:	ab01      	add	r3, sp, #4
    312e:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3130:	74a7      	strb	r7, [r4, #18]
    3132:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3134:	2c00      	cmp	r4, #0
    3136:	d1c8      	bne.n	30ca <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    3138:	4630      	mov	r0, r6
    313a:	2119      	movs	r1, #25
    313c:	f7ff ff88 	bl	3050 <CFastLED::countFPS(int)>
}
    3140:	b003      	add	sp, #12
    3142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    3146:	f000 fc97 	bl	3a78 <micros>
    314a:	6822      	ldr	r2, [r4, #0]
    314c:	6873      	ldr	r3, [r6, #4]
    314e:	1a80      	subs	r0, r0, r2
    3150:	4298      	cmp	r0, r3
    3152:	d3aa      	bcc.n	30aa <CFastLED::show(unsigned char)+0xe>
    3154:	e7ab      	b.n	30ae <CFastLED::show(unsigned char)+0x12>
    3156:	bf00      	nop
    3158:	1fff9488 	.word	0x1fff9488
    315c:	1fff9480 	.word	0x1fff9480

00003160 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    3160:	2000      	movs	r0, #0
    3162:	4770      	bx	lr

00003164 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    3164:	4b04      	ldr	r3, [pc, #16]	; (3178 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    3166:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    3168:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    316a:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    316e:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    3170:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    3172:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    3174:	60da      	str	r2, [r3, #12]
    3176:	4770      	bx	lr
    3178:	1fff9470 	.word	0x1fff9470

0000317c <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    317c:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    317e:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    3180:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    3182:	7882      	ldrb	r2, [r0, #2]
    3184:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3186:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    318a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    318e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    3192:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    3194:	0625      	lsls	r5, r4, #24
    3196:	f3c3 2307 	ubfx	r3, r3, #8, #8
    319a:	d45f      	bmi.n	325c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    319c:	f004 0540 	and.w	r5, r4, #64	; 0x40
    31a0:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    31a4:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    31a8:	2d00      	cmp	r5, #0
    31aa:	d146      	bne.n	323a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    31ac:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    31b0:	2c00      	cmp	r4, #0
    31b2:	d06c      	beq.n	328e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    31b4:	3355      	adds	r3, #85	; 0x55
    31b6:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    31b8:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    31ba:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    31bc:	2eff      	cmp	r6, #255	; 0xff
    31be:	d01c      	beq.n	31fa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    31c0:	2e00      	cmp	r6, #0
    31c2:	d079      	beq.n	32b8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    31c4:	b11c      	cbz	r4, 31ce <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    31c6:	fb06 4404 	mla	r4, r6, r4, r4
    31ca:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    31ce:	b11d      	cbz	r5, 31d8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    31d0:	fb06 5505 	mla	r5, r6, r5, r5
    31d4:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    31d8:	b11b      	cbz	r3, 31e2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    31da:	fb06 3303 	mla	r3, r6, r3, r3
    31de:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    31e2:	43f0      	mvns	r0, r6
    31e4:	b2c0      	uxtb	r0, r0
    31e6:	fb00 0000 	mla	r0, r0, r0, r0
    31ea:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    31ee:	4404      	add	r4, r0
            g += brightness_floor;
    31f0:	4405      	add	r5, r0
            b += brightness_floor;
    31f2:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    31f4:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    31f6:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    31f8:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    31fa:	2aff      	cmp	r2, #255	; 0xff
    31fc:	d018      	beq.n	3230 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    31fe:	fb12 f002 	smulbb	r0, r2, r2
    3202:	3200      	adds	r2, #0
    3204:	bf18      	it	ne
    3206:	2201      	movne	r2, #1
    3208:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    320c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    3210:	d056      	beq.n	32c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    3212:	b11c      	cbz	r4, 321c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3214:	fb02 4404 	mla	r4, r2, r4, r4
    3218:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    321c:	b11d      	cbz	r5, 3226 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    321e:	fb02 5505 	mla	r5, r2, r5, r5
    3222:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    3226:	b11b      	cbz	r3, 3230 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    3228:	fb02 3303 	mla	r3, r2, r3, r3
    322c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    3230:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    3232:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    3234:	708b      	strb	r3, [r1, #2]
}
    3236:	bcf0      	pop	{r4, r5, r6, r7}
    3238:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    323a:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    323e:	bb5c      	cbnz	r4, 3298 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    3240:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    3244:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    3248:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    324c:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    324e:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    3250:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    3254:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    3256:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    3258:	463b      	mov	r3, r7
    325a:	e7af      	b.n	31bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    325c:	f004 0740 	and.w	r7, r4, #64	; 0x40
    3260:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    3264:	b9e7      	cbnz	r7, 32a0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    3266:	f004 0720 	and.w	r7, r4, #32
    326a:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    326e:	2f00      	cmp	r7, #0
    3270:	d136      	bne.n	32e0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3272:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    3276:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    327a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    327e:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    3282:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    3286:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    3288:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    328a:	b2c3      	uxtb	r3, r0
    328c:	e796      	b.n	31bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    328e:	43dc      	mvns	r4, r3
    3290:	b2e4      	uxtb	r4, r4
                g = third;
    3292:	461d      	mov	r5, r3
                b = 0;
    3294:	4603      	mov	r3, r0
    3296:	e791      	b.n	31bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    3298:	2400      	movs	r4, #0
                g = K255 - third;
    329a:	43dd      	mvns	r5, r3
    329c:	b2ed      	uxtb	r5, r5
    329e:	e78d      	b.n	31bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    32a0:	f004 0420 	and.w	r4, r4, #32
    32a4:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    32a8:	b994      	cbnz	r4, 32d0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    32aa:	f103 0455 	add.w	r4, r3, #85	; 0x55
    32ae:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    32b0:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    32b4:	b2db      	uxtb	r3, r3
    32b6:	e781      	b.n	31bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    32b8:	23ff      	movs	r3, #255	; 0xff
    32ba:	461d      	mov	r5, r3
    32bc:	461c      	mov	r4, r3
    32be:	e79c      	b.n	31fa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    32c0:	4615      	mov	r5, r2
    32c2:	4614      	mov	r4, r2
    32c4:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    32c6:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    32c8:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    32ca:	708b      	strb	r3, [r1, #2]
}
    32cc:	bcf0      	pop	{r4, r5, r6, r7}
    32ce:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    32d0:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    32d4:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    32d6:	2500      	movs	r5, #0
                b = K85 - third;
    32d8:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    32dc:	b2db      	uxtb	r3, r3
    32de:	e76d      	b.n	31bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    32e0:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    32e2:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    32e4:	b2c3      	uxtb	r3, r0
    32e6:	e769      	b.n	31bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

000032e8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    32e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    32ea:	b361      	cbz	r1, 3346 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    32ec:	f101 3eff 	add.w	lr, r1, #4294967295
    32f0:	fa1f fe8e 	uxth.w	lr, lr
    32f4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    32f8:	2200      	movs	r2, #0
    32fa:	f10e 0e06 	add.w	lr, lr, #6
    32fe:	4486      	add	lr, r0
    3300:	1cc3      	adds	r3, r0, #3
    3302:	4615      	mov	r5, r2
    3304:	4614      	mov	r4, r2
        red32   += *p++;
    3306:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    330a:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    330e:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    3312:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3314:	4573      	cmp	r3, lr
        red32   += *p++;
    3316:	443c      	add	r4, r7
        green32 += *p++;
    3318:	4405      	add	r5, r0
        blue32  += *p++;
    331a:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    331c:	d1f3      	bne.n	3306 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    331e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3322:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3326:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    332a:	f3c4 1317 	ubfx	r3, r4, #4, #24
    332e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    3332:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    3336:	0a12      	lsrs	r2, r2, #8
    3338:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    333c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3340:	1910      	adds	r0, r2, r4
}
    3342:	4408      	add	r0, r1
    3344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3346:	460c      	mov	r4, r1
    3348:	460a      	mov	r2, r1
    334a:	e7f7      	b.n	333c <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

0000334c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    334c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    3350:	4b25      	ldr	r3, [pc, #148]	; (33e8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    3352:	681c      	ldr	r4, [r3, #0]
    3354:	b085      	sub	sp, #20
    3356:	4607      	mov	r7, r0
    3358:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    335a:	b19c      	cbz	r4, 3384 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    335c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 33f4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    3360:	257d      	movs	r5, #125	; 0x7d
    3362:	e007      	b.n	3374 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    3364:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    3366:	b281      	uxth	r1, r0
    3368:	4630      	mov	r0, r6
    336a:	f7ff ffbd 	bl	32e8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    336e:	68a4      	ldr	r4, [r4, #8]
    3370:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3372:	b144      	cbz	r4, 3386 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    3374:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    3378:	691b      	ldr	r3, [r3, #16]
    337a:	454b      	cmp	r3, r9
    337c:	d0f2      	beq.n	3364 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    337e:	4620      	mov	r0, r4
    3380:	4798      	blx	r3
    3382:	e7f0      	b.n	3366 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    3384:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    3386:	fb05 f507 	mul.w	r5, r5, r7
    338a:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    338c:	4b17      	ldr	r3, [pc, #92]	; (33ec <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    338e:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    3390:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    3392:	d210      	bcs.n	33b6 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    3394:	b323      	cbz	r3, 33e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    3396:	4a16      	ldr	r2, [pc, #88]	; (33f0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    3398:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    339a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    339e:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    33a2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    33a6:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    33a8:	4638      	mov	r0, r7
    33aa:	ea23 0301 	bic.w	r3, r3, r1
    33ae:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    33b0:	b005      	add	sp, #20
    33b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    33b6:	fb08 f707 	mul.w	r7, r8, r7
    33ba:	fbb7 f0f5 	udiv	r0, r7, r5
    33be:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    33c0:	b173      	cbz	r3, 33e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    33c2:	4a0b      	ldr	r2, [pc, #44]	; (33f0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    33c4:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    33c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    33ca:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    33ce:	f89d 100c 	ldrb.w	r1, [sp, #12]
    33d2:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    33d4:	4638      	mov	r0, r7
    33d6:	430b      	orrs	r3, r1
    33d8:	7013      	strb	r3, [r2, #0]
}
    33da:	b005      	add	sp, #20
    33dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    33e0:	4638      	mov	r0, r7
}
    33e2:	b005      	add	sp, #20
    33e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    33e8:	1fff9480 	.word	0x1fff9480
    33ec:	1fff9494 	.word	0x1fff9494
    33f0:	000077bc 	.word	0x000077bc
    33f4:	0000046d 	.word	0x0000046d

000033f8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    33f8:	4b03      	ldr	r3, [pc, #12]	; (3408 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    33fa:	4a04      	ldr	r2, [pc, #16]	; (340c <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    33fc:	60da      	str	r2, [r3, #12]
    33fe:	fb01 f100 	mul.w	r1, r1, r0
    3402:	6099      	str	r1, [r3, #8]
    3404:	4770      	bx	lr
    3406:	bf00      	nop
    3408:	1fff9470 	.word	0x1fff9470
    340c:	0000334d 	.word	0x0000334d

00003410 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3410:	4807      	ldr	r0, [pc, #28]	; (3430 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    3412:	b082      	sub	sp, #8
    3414:	6803      	ldr	r3, [r0, #0]
    3416:	9301      	str	r3, [sp, #4]
	return ret;
    3418:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    341a:	4411      	add	r1, r2
    341c:	e001      	b.n	3422 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    341e:	4299      	cmp	r1, r3
    3420:	d304      	bcc.n	342c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3422:	6803      	ldr	r3, [r0, #0]
    3424:	9300      	str	r3, [sp, #0]
	return ret;
    3426:	9b00      	ldr	r3, [sp, #0]
    3428:	429a      	cmp	r2, r3
    342a:	d9f8      	bls.n	341e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    342c:	b002      	add	sp, #8
    342e:	4770      	bx	lr
    3430:	1fff94e8 	.word	0x1fff94e8

00003434 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    3434:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3436:	4a10      	ldr	r2, [pc, #64]	; (3478 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    3438:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    343a:	b9a1      	cbnz	r1, 3466 <VisualMicroDebug::outPacketStart(bool)+0x32>
    343c:	6813      	ldr	r3, [r2, #0]
    343e:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    3440:	6841      	ldr	r1, [r0, #4]
	return ret;
    3442:	9b00      	ldr	r3, [sp, #0]
    3444:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    3446:	2931      	cmp	r1, #49	; 0x31
    3448:	d80d      	bhi.n	3466 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    344a:	6813      	ldr	r3, [r2, #0]
    344c:	9302      	str	r3, [sp, #8]
	return ret;
    344e:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    3450:	f104 0332 	add.w	r3, r4, #50	; 0x32
    3454:	1a59      	subs	r1, r3, r1
    3456:	e001      	b.n	345c <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    3458:	4299      	cmp	r1, r3
    345a:	d304      	bcc.n	3466 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    345c:	6813      	ldr	r3, [r2, #0]
    345e:	9301      	str	r3, [sp, #4]
	return ret;
    3460:	9b01      	ldr	r3, [sp, #4]
    3462:	429c      	cmp	r4, r3
    3464:	d9f8      	bls.n	3458 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3466:	6813      	ldr	r3, [r2, #0]
    3468:	9303      	str	r3, [sp, #12]
	return ret;
    346a:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    346c:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    346e:	2001      	movs	r0, #1
    3470:	b005      	add	sp, #20
    3472:	bc10      	pop	{r4}
    3474:	4770      	bx	lr
    3476:	bf00      	nop
    3478:	1fff94e8 	.word	0x1fff94e8

0000347c <VisualMicroDebug::outPacketEnd()>:
    347c:	4770      	bx	lr
    347e:	bf00      	nop

00003480 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    3480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3484:	f000 bb1a 	b.w	3abc <delay>

00003488 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    3488:	2300      	movs	r3, #0
    348a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    348c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    348e:	b171      	cbz	r1, 34ae <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3490:	4807      	ldr	r0, [pc, #28]	; (34b0 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    3492:	b082      	sub	sp, #8
    3494:	6803      	ldr	r3, [r0, #0]
    3496:	9301      	str	r3, [sp, #4]
	return ret;
    3498:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    349a:	4411      	add	r1, r2
    349c:	e001      	b.n	34a2 <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    349e:	4299      	cmp	r1, r3
    34a0:	d304      	bcc.n	34ac <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34a2:	6803      	ldr	r3, [r0, #0]
    34a4:	9300      	str	r3, [sp, #0]
	return ret;
    34a6:	9b00      	ldr	r3, [sp, #0]
    34a8:	429a      	cmp	r2, r3
    34aa:	d9f8      	bls.n	349e <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    34ac:	b002      	add	sp, #8
    34ae:	4770      	bx	lr
    34b0:	1fff94e8 	.word	0x1fff94e8

000034b4 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    34b4:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34b6:	4c13      	ldr	r4, [pc, #76]	; (3504 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    34b8:	b085      	sub	sp, #20
    34ba:	6823      	ldr	r3, [r4, #0]
    34bc:	9303      	str	r3, [sp, #12]
	return ret;
    34be:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    34c0:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    34c2:	460d      	mov	r5, r1
    34c4:	4810      	ldr	r0, [pc, #64]	; (3508 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    34c6:	2106      	movs	r1, #6
    34c8:	f001 fb10 	bl	4aec <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    34cc:	2300      	movs	r3, #0
    34ce:	220a      	movs	r2, #10
    34d0:	4629      	mov	r1, r5
    34d2:	480e      	ldr	r0, [pc, #56]	; (350c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    34d4:	f001 fd1e 	bl	4f14 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    34d8:	2106      	movs	r1, #6
    34da:	480d      	ldr	r0, [pc, #52]	; (3510 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    34dc:	f001 fb06 	bl	4aec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    34e0:	480a      	ldr	r0, [pc, #40]	; (350c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    34e2:	f001 fd07 	bl	4ef4 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34e6:	6823      	ldr	r3, [r4, #0]
    34e8:	9302      	str	r3, [sp, #8]
	return ret;
    34ea:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    34ec:	f102 0132 	add.w	r1, r2, #50	; 0x32
    34f0:	e001      	b.n	34f6 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    34f2:	4299      	cmp	r1, r3
    34f4:	d304      	bcc.n	3500 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34f6:	6823      	ldr	r3, [r4, #0]
    34f8:	9301      	str	r3, [sp, #4]
	return ret;
    34fa:	9b01      	ldr	r3, [sp, #4]
    34fc:	429a      	cmp	r2, r3
    34fe:	d9f8      	bls.n	34f2 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    3500:	b005      	add	sp, #20
    3502:	bd30      	pop	{r4, r5, pc}
    3504:	1fff94e8 	.word	0x1fff94e8
    3508:	00007738 	.word	0x00007738
    350c:	1fff8774 	.word	0x1fff8774
    3510:	00007740 	.word	0x00007740

00003514 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    3514:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    3516:	7e03      	ldrb	r3, [r0, #24]
    3518:	b90b      	cbnz	r3, 351e <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    351a:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    351c:	bd38      	pop	{r3, r4, r5, pc}
    351e:	460d      	mov	r5, r1
    3520:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3522:	f001 fab9 	bl	4a98 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    3526:	f010 0fff 	tst.w	r0, #255	; 0xff
    352a:	d101      	bne.n	3530 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    352c:	2065      	movs	r0, #101	; 0x65
    352e:	bd38      	pop	{r3, r4, r5, pc}
    3530:	f001 fab2 	bl	4a98 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    3534:	f010 0fff 	tst.w	r0, #255	; 0xff
    3538:	d0f8      	beq.n	352c <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    353a:	f001 fa71 	bl	4a20 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    353e:	b2c0      	uxtb	r0, r0
    3540:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    3544:	2b1e      	cmp	r3, #30
    3546:	d8f3      	bhi.n	3530 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    3548:	a201      	add	r2, pc, #4	; (adr r2, 3550 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    354e:	bf00      	nop
    3550:	000035d9 	.word	0x000035d9
    3554:	00003531 	.word	0x00003531
    3558:	00003531 	.word	0x00003531
    355c:	00003531 	.word	0x00003531
    3560:	00003531 	.word	0x00003531
    3564:	00003531 	.word	0x00003531
    3568:	00003531 	.word	0x00003531
    356c:	00003531 	.word	0x00003531
    3570:	00003531 	.word	0x00003531
    3574:	00003531 	.word	0x00003531
    3578:	00003531 	.word	0x00003531
    357c:	000035cd 	.word	0x000035cd
    3580:	00003531 	.word	0x00003531
    3584:	00003531 	.word	0x00003531
    3588:	00003531 	.word	0x00003531
    358c:	00003531 	.word	0x00003531
    3590:	0000351b 	.word	0x0000351b
    3594:	00003531 	.word	0x00003531
    3598:	00003531 	.word	0x00003531
    359c:	00003531 	.word	0x00003531
    35a0:	00003531 	.word	0x00003531
    35a4:	00003531 	.word	0x00003531
    35a8:	00003531 	.word	0x00003531
    35ac:	00003531 	.word	0x00003531
    35b0:	00003531 	.word	0x00003531
    35b4:	0000351b 	.word	0x0000351b
    35b8:	00003531 	.word	0x00003531
    35bc:	00003531 	.word	0x00003531
    35c0:	00003531 	.word	0x00003531
    35c4:	00003531 	.word	0x00003531
    35c8:	0000351d 	.word	0x0000351d
		{

		case 'c':
			sendContinuedACK(breakPointId);
    35cc:	4620      	mov	r0, r4
    35ce:	4629      	mov	r1, r5
    35d0:	f7ff ff70 	bl	34b4 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    35d4:	2063      	movs	r0, #99	; 0x63
    35d6:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    35d8:	2300      	movs	r3, #0
    35da:	7623      	strb	r3, [r4, #24]
			return 'c';
    35dc:	2063      	movs	r0, #99	; 0x63
    35de:	bd38      	pop	{r3, r4, r5, pc}

000035e0 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    35e0:	b570      	push	{r4, r5, r6, lr}
    35e2:	4605      	mov	r5, r0
    35e4:	b082      	sub	sp, #8
    35e6:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    35e8:	b1c9      	cbz	r1, 361e <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    35ea:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35ec:	4c0d      	ldr	r4, [pc, #52]	; (3624 <VisualMicroDebug::start(bool, bool)+0x44>)
    35ee:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    35f0:	2100      	movs	r1, #0
    35f2:	4628      	mov	r0, r5
    35f4:	f7ff ff8e 	bl	3514 <VisualMicroDebug::breakWait(unsigned char)>
    35f8:	2863      	cmp	r0, #99	; 0x63
    35fa:	d010      	beq.n	361e <VisualMicroDebug::start(bool, bool)+0x3e>
    35fc:	6823      	ldr	r3, [r4, #0]
    35fe:	9301      	str	r3, [sp, #4]
	return ret;
    3600:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    3602:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3604:	6823      	ldr	r3, [r4, #0]
    3606:	9300      	str	r3, [sp, #0]
	return ret;
    3608:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    360a:	429a      	cmp	r2, r3
    360c:	d8f0      	bhi.n	35f0 <VisualMicroDebug::start(bool, bool)+0x10>
    360e:	4299      	cmp	r1, r3
    3610:	d2f8      	bcs.n	3604 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    3612:	2100      	movs	r1, #0
    3614:	4628      	mov	r0, r5
    3616:	f7ff ff7d 	bl	3514 <VisualMicroDebug::breakWait(unsigned char)>
    361a:	2863      	cmp	r0, #99	; 0x63
    361c:	d1ee      	bne.n	35fc <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    361e:	762e      	strb	r6, [r5, #24]
#endif

}
    3620:	b002      	add	sp, #8
    3622:	bd70      	pop	{r4, r5, r6, pc}
    3624:	1fff94e8 	.word	0x1fff94e8

00003628 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    3628:	4b03      	ldr	r3, [pc, #12]	; (3638 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    362a:	2200      	movs	r2, #0
    362c:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    362e:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    3630:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    3632:	615a      	str	r2, [r3, #20]
    3634:	4770      	bx	lr
    3636:	bf00      	nop
    3638:	1fff9498 	.word	0x1fff9498

0000363c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    363c:	4a37      	ldr	r2, [pc, #220]	; (371c <wait_for_cal+0xe0>)
    363e:	4938      	ldr	r1, [pc, #224]	; (3720 <wait_for_cal+0xe4>)
    3640:	6813      	ldr	r3, [r2, #0]
    3642:	061b      	lsls	r3, r3, #24
    3644:	d4fc      	bmi.n	3640 <wait_for_cal+0x4>
    3646:	680b      	ldr	r3, [r1, #0]
    3648:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    364c:	d1f8      	bne.n	3640 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    364e:	b672      	cpsid	i
	if (calibrating) {
    3650:	4934      	ldr	r1, [pc, #208]	; (3724 <wait_for_cal+0xe8>)
    3652:	780a      	ldrb	r2, [r1, #0]
    3654:	2a00      	cmp	r2, #0
    3656:	d05f      	beq.n	3718 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    3658:	4a33      	ldr	r2, [pc, #204]	; (3728 <wait_for_cal+0xec>)
    365a:	4834      	ldr	r0, [pc, #208]	; (372c <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    365c:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    365e:	4c34      	ldr	r4, [pc, #208]	; (3730 <wait_for_cal+0xf4>)
    3660:	6817      	ldr	r7, [r2, #0]
    3662:	6806      	ldr	r6, [r0, #0]
    3664:	6825      	ldr	r5, [r4, #0]
    3666:	68d4      	ldr	r4, [r2, #12]
    3668:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    366a:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    366c:	3214      	adds	r2, #20
    366e:	6800      	ldr	r0, [r0, #0]
    3670:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    3672:	4f30      	ldr	r7, [pc, #192]	; (3734 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    3674:	4435      	add	r5, r6
    3676:	442c      	add	r4, r5
    3678:	4420      	add	r0, r4
    367a:	4402      	add	r2, r0
    367c:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    3680:	4e2d      	ldr	r6, [pc, #180]	; (3738 <wait_for_cal+0xfc>)
    3682:	482e      	ldr	r0, [pc, #184]	; (373c <wait_for_cal+0x100>)
    3684:	4d2e      	ldr	r5, [pc, #184]	; (3740 <wait_for_cal+0x104>)
    3686:	4c2f      	ldr	r4, [pc, #188]	; (3744 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    3688:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    368c:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    368e:	6837      	ldr	r7, [r6, #0]
    3690:	6806      	ldr	r6, [r0, #0]
    3692:	682d      	ldr	r5, [r5, #0]
    3694:	4a2c      	ldr	r2, [pc, #176]	; (3748 <wait_for_cal+0x10c>)
    3696:	6824      	ldr	r4, [r4, #0]
    3698:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    369a:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    369c:	6800      	ldr	r0, [r0, #0]
    369e:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    36a0:	4f2a      	ldr	r7, [pc, #168]	; (374c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    36a2:	4435      	add	r5, r6
    36a4:	442c      	add	r4, r5
    36a6:	4420      	add	r0, r4
    36a8:	4402      	add	r2, r0
    36aa:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    36ae:	4e28      	ldr	r6, [pc, #160]	; (3750 <wait_for_cal+0x114>)
    36b0:	4828      	ldr	r0, [pc, #160]	; (3754 <wait_for_cal+0x118>)
    36b2:	4d29      	ldr	r5, [pc, #164]	; (3758 <wait_for_cal+0x11c>)
    36b4:	4c29      	ldr	r4, [pc, #164]	; (375c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    36b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    36ba:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    36bc:	6837      	ldr	r7, [r6, #0]
    36be:	6806      	ldr	r6, [r0, #0]
    36c0:	682d      	ldr	r5, [r5, #0]
    36c2:	4a27      	ldr	r2, [pc, #156]	; (3760 <wait_for_cal+0x124>)
    36c4:	6824      	ldr	r4, [r4, #0]
    36c6:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    36c8:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    36ca:	6800      	ldr	r0, [r0, #0]
    36cc:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    36ce:	4f25      	ldr	r7, [pc, #148]	; (3764 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    36d0:	4435      	add	r5, r6
    36d2:	442c      	add	r4, r5
    36d4:	4420      	add	r0, r4
    36d6:	4402      	add	r2, r0
    36d8:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    36dc:	4e22      	ldr	r6, [pc, #136]	; (3768 <wait_for_cal+0x12c>)
    36de:	4823      	ldr	r0, [pc, #140]	; (376c <wait_for_cal+0x130>)
    36e0:	4d23      	ldr	r5, [pc, #140]	; (3770 <wait_for_cal+0x134>)
    36e2:	4c24      	ldr	r4, [pc, #144]	; (3774 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    36e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    36e8:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    36ea:	6837      	ldr	r7, [r6, #0]
    36ec:	6806      	ldr	r6, [r0, #0]
    36ee:	682d      	ldr	r5, [r5, #0]
    36f0:	4a21      	ldr	r2, [pc, #132]	; (3778 <wait_for_cal+0x13c>)
    36f2:	6824      	ldr	r4, [r4, #0]
    36f4:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    36f6:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    36f8:	6800      	ldr	r0, [r0, #0]
    36fa:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    36fc:	4435      	add	r5, r6
    36fe:	442c      	add	r4, r5
    3700:	4420      	add	r0, r4
    3702:	4402      	add	r2, r0
    3704:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    3708:	481c      	ldr	r0, [pc, #112]	; (377c <wait_for_cal+0x140>)
    370a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    370e:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    3710:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    3712:	b662      	cpsie	i
}
    3714:	bcf0      	pop	{r4, r5, r6, r7}
    3716:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    3718:	b662      	cpsie	i
    371a:	4770      	bx	lr
    371c:	4003b024 	.word	0x4003b024
    3720:	400bb024 	.word	0x400bb024
    3724:	1fff94e1 	.word	0x1fff94e1
    3728:	4003b038 	.word	0x4003b038
    372c:	4003b03c 	.word	0x4003b03c
    3730:	4003b040 	.word	0x4003b040
    3734:	4003b02c 	.word	0x4003b02c
    3738:	4003b058 	.word	0x4003b058
    373c:	4003b05c 	.word	0x4003b05c
    3740:	4003b060 	.word	0x4003b060
    3744:	4003b064 	.word	0x4003b064
    3748:	4003b06c 	.word	0x4003b06c
    374c:	4003b030 	.word	0x4003b030
    3750:	400bb038 	.word	0x400bb038
    3754:	400bb03c 	.word	0x400bb03c
    3758:	400bb040 	.word	0x400bb040
    375c:	400bb044 	.word	0x400bb044
    3760:	400bb04c 	.word	0x400bb04c
    3764:	400bb02c 	.word	0x400bb02c
    3768:	400bb058 	.word	0x400bb058
    376c:	400bb05c 	.word	0x400bb05c
    3770:	400bb060 	.word	0x400bb060
    3774:	400bb064 	.word	0x400bb064
    3778:	400bb06c 	.word	0x400bb06c
    377c:	400bb030 	.word	0x400bb030

00003780 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    3780:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    3782:	4829      	ldr	r0, [pc, #164]	; (3828 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    3784:	4a29      	ldr	r2, [pc, #164]	; (382c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    3786:	4b2a      	ldr	r3, [pc, #168]	; (3830 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    3788:	4d2a      	ldr	r5, [pc, #168]	; (3834 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    378a:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    378c:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    378e:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    3790:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    3792:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3794:	4c28      	ldr	r4, [pc, #160]	; (3838 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    3796:	2b08      	cmp	r3, #8
    3798:	d030      	beq.n	37fc <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    379a:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    379c:	4827      	ldr	r0, [pc, #156]	; (383c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    379e:	4928      	ldr	r1, [pc, #160]	; (3840 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    37a0:	d037      	beq.n	3812 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    37a2:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    37a4:	bf0c      	ite	eq
    37a6:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    37a8:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    37aa:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    37ac:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    37ae:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    37b0:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    37b2:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    37b4:	4b23      	ldr	r3, [pc, #140]	; (3844 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    37b6:	4924      	ldr	r1, [pc, #144]	; (3848 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    37b8:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    37ba:	4a24      	ldr	r2, [pc, #144]	; (384c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    37bc:	b1bb      	cbz	r3, 37ee <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    37be:	2301      	movs	r3, #1
    37c0:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    37c2:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    37c4:	4b22      	ldr	r3, [pc, #136]	; (3850 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    37c6:	4923      	ldr	r1, [pc, #140]	; (3854 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    37c8:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    37ca:	4a23      	ldr	r2, [pc, #140]	; (3858 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    37cc:	2b01      	cmp	r3, #1
    37ce:	d926      	bls.n	381e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    37d0:	2b04      	cmp	r3, #4
    37d2:	d90f      	bls.n	37f4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    37d4:	2b08      	cmp	r3, #8
    37d6:	d91e      	bls.n	3816 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    37d8:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    37da:	bf94      	ite	ls
    37dc:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    37de:	2387      	movhi	r3, #135	; 0x87
    37e0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    37e2:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    37e4:	4b1d      	ldr	r3, [pc, #116]	; (385c <analog_init+0xdc>)
    37e6:	2201      	movs	r2, #1
    37e8:	701a      	strb	r2, [r3, #0]
}
    37ea:	bc30      	pop	{r4, r5}
    37ec:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    37ee:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    37f0:	6013      	str	r3, [r2, #0]
    37f2:	e7e7      	b.n	37c4 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    37f4:	2384      	movs	r3, #132	; 0x84
    37f6:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    37f8:	6013      	str	r3, [r2, #0]
    37fa:	e7f3      	b.n	37e4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    37fc:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3800:	490f      	ldr	r1, [pc, #60]	; (3840 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    3802:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    3804:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3806:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    3808:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    380a:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    380c:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    380e:	600b      	str	r3, [r1, #0]
    3810:	e7d0      	b.n	37b4 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    3812:	2239      	movs	r2, #57	; 0x39
    3814:	e7f7      	b.n	3806 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    3816:	2385      	movs	r3, #133	; 0x85
    3818:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    381a:	6013      	str	r3, [r2, #0]
    381c:	e7e2      	b.n	37e4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    381e:	2380      	movs	r3, #128	; 0x80
    3820:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    3822:	6013      	str	r3, [r2, #0]
    3824:	e7de      	b.n	37e4 <analog_init+0x64>
    3826:	bf00      	nop
    3828:	40074000 	.word	0x40074000
    382c:	40074001 	.word	0x40074001
    3830:	1fff876c 	.word	0x1fff876c
    3834:	4003b008 	.word	0x4003b008
    3838:	4003b00c 	.word	0x4003b00c
    383c:	400bb008 	.word	0x400bb008
    3840:	400bb00c 	.word	0x400bb00c
    3844:	1fff94e4 	.word	0x1fff94e4
    3848:	4003b020 	.word	0x4003b020
    384c:	400bb020 	.word	0x400bb020
    3850:	1fff876d 	.word	0x1fff876d
    3854:	4003b024 	.word	0x4003b024
    3858:	400bb024 	.word	0x400bb024
    385c:	1fff94e1 	.word	0x1fff94e1

00003860 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    3860:	2828      	cmp	r0, #40	; 0x28
    3862:	d82f      	bhi.n	38c4 <analogRead+0x64>
	channel = pin2sc1a[pin];
    3864:	4b33      	ldr	r3, [pc, #204]	; (3934 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    3866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    386a:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    386c:	2eff      	cmp	r6, #255	; 0xff
    386e:	d02b      	beq.n	38c8 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    3870:	4b31      	ldr	r3, [pc, #196]	; (3938 <analogRead+0xd8>)
    3872:	781b      	ldrb	r3, [r3, #0]
    3874:	2b00      	cmp	r3, #0
    3876:	d12a      	bne.n	38ce <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    3878:	0632      	lsls	r2, r6, #24
    387a:	d42c      	bmi.n	38d6 <analogRead+0x76>
#endif

	__disable_irq();
    387c:	b672      	cpsid	i
    387e:	4d2f      	ldr	r5, [pc, #188]	; (393c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    3880:	4c2f      	ldr	r4, [pc, #188]	; (3940 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    3882:	462f      	mov	r7, r5
    3884:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    3886:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    3888:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    388a:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    388c:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    388e:	6823      	ldr	r3, [r4, #0]
    3890:	061b      	lsls	r3, r3, #24
    3892:	d40c      	bmi.n	38ae <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    3894:	783b      	ldrb	r3, [r7, #0]
    3896:	b91b      	cbnz	r3, 38a0 <analogRead+0x40>
    3898:	e7f4      	b.n	3884 <analogRead+0x24>
    389a:	782b      	ldrb	r3, [r5, #0]
    389c:	2b00      	cmp	r3, #0
    389e:	d0f1      	beq.n	3884 <analogRead+0x24>
		__enable_irq();
    38a0:	b662      	cpsie	i
		yield();
    38a2:	f001 fb8d 	bl	4fc0 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    38a6:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    38a8:	6823      	ldr	r3, [r4, #0]
    38aa:	0618      	lsls	r0, r3, #24
    38ac:	d5f5      	bpl.n	389a <analogRead+0x3a>
			result = ADC0_RA;
    38ae:	4b25      	ldr	r3, [pc, #148]	; (3944 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    38b0:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    38b2:	2200      	movs	r2, #0
    38b4:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    38b6:	b662      	cpsie	i
			result >>= analog_right_shift;
    38b8:	4a23      	ldr	r2, [pc, #140]	; (3948 <analogRead+0xe8>)
    38ba:	7810      	ldrb	r0, [r2, #0]
    38bc:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    38c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    38c4:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    38c6:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    38c8:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    38ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    38ce:	f7ff feb5 	bl	363c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    38d2:	0632      	lsls	r2, r6, #24
    38d4:	d5d2      	bpl.n	387c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    38d6:	b672      	cpsid	i
    38d8:	4d1c      	ldr	r5, [pc, #112]	; (394c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    38da:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3958 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    38de:	4c1c      	ldr	r4, [pc, #112]	; (3950 <analogRead+0xf0>)
    38e0:	f006 0740 	and.w	r7, r6, #64	; 0x40
    38e4:	b2ff      	uxtb	r7, r7
    38e6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    38ea:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    38ee:	b1df      	cbz	r7, 3928 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    38f0:	f023 0310 	bic.w	r3, r3, #16
    38f4:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    38f8:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    38fa:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    38fc:	4a13      	ldr	r2, [pc, #76]	; (394c <analogRead+0xec>)
    38fe:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    3900:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    3902:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    3904:	6823      	ldr	r3, [r4, #0]
    3906:	0619      	lsls	r1, r3, #24
    3908:	d40c      	bmi.n	3924 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    390a:	7813      	ldrb	r3, [r2, #0]
    390c:	b91b      	cbnz	r3, 3916 <analogRead+0xb6>
    390e:	e7ec      	b.n	38ea <analogRead+0x8a>
    3910:	782b      	ldrb	r3, [r5, #0]
    3912:	2b00      	cmp	r3, #0
    3914:	d0e9      	beq.n	38ea <analogRead+0x8a>
		__enable_irq();
    3916:	b662      	cpsie	i
		yield();
    3918:	f001 fb52 	bl	4fc0 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    391c:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    391e:	6823      	ldr	r3, [r4, #0]
    3920:	061b      	lsls	r3, r3, #24
    3922:	d5f5      	bpl.n	3910 <analogRead+0xb0>
			result = ADC1_RA;
    3924:	4b0b      	ldr	r3, [pc, #44]	; (3954 <analogRead+0xf4>)
    3926:	e7c3      	b.n	38b0 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    3928:	f043 0310 	orr.w	r3, r3, #16
    392c:	f8c8 3000 	str.w	r3, [r8]
    3930:	e7e2      	b.n	38f8 <analogRead+0x98>
    3932:	bf00      	nop
    3934:	00007790 	.word	0x00007790
    3938:	1fff94e1 	.word	0x1fff94e1
    393c:	1fff94e3 	.word	0x1fff94e3
    3940:	4003b000 	.word	0x4003b000
    3944:	4003b010 	.word	0x4003b010
    3948:	1fff94e0 	.word	0x1fff94e0
    394c:	1fff94e2 	.word	0x1fff94e2
    3950:	400bb000 	.word	0x400bb000
    3954:	400bb010 	.word	0x400bb010
    3958:	400bb00c 	.word	0x400bb00c

0000395c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    395c:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    395e:	4c10      	ldr	r4, [pc, #64]	; (39a0 <fault_isr+0x44>)
    3960:	e008      	b.n	3974 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3962:	6823      	ldr	r3, [r4, #0]
    3964:	0559      	lsls	r1, r3, #21
    3966:	d40d      	bmi.n	3984 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3968:	6823      	ldr	r3, [r4, #0]
    396a:	051a      	lsls	r2, r3, #20
    396c:	d40f      	bmi.n	398e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    396e:	6823      	ldr	r3, [r4, #0]
    3970:	04db      	lsls	r3, r3, #19
    3972:	d411      	bmi.n	3998 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3974:	6823      	ldr	r3, [r4, #0]
    3976:	0358      	lsls	r0, r3, #13
    3978:	d5f3      	bpl.n	3962 <fault_isr+0x6>
    397a:	f000 fa37 	bl	3dec <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    397e:	6823      	ldr	r3, [r4, #0]
    3980:	0559      	lsls	r1, r3, #21
    3982:	d5f1      	bpl.n	3968 <fault_isr+0xc>
    3984:	f001 fba0 	bl	50c8 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3988:	6823      	ldr	r3, [r4, #0]
    398a:	051a      	lsls	r2, r3, #20
    398c:	d5ef      	bpl.n	396e <fault_isr+0x12>
    398e:	f001 fc31 	bl	51f4 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3992:	6823      	ldr	r3, [r4, #0]
    3994:	04db      	lsls	r3, r3, #19
    3996:	d5ed      	bpl.n	3974 <fault_isr+0x18>
    3998:	f001 fcc2 	bl	5320 <uart2_status_isr>
    399c:	e7ea      	b.n	3974 <fault_isr+0x18>
    399e:	bf00      	nop
    39a0:	40048034 	.word	0x40048034

000039a4 <unused_isr>:
	}
}

void unused_isr(void)
{
    39a4:	b508      	push	{r3, lr}
	fault_isr();
    39a6:	f7ff ffd9 	bl	395c <fault_isr>
    39aa:	bf00      	nop

000039ac <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    39ac:	4b01      	ldr	r3, [pc, #4]	; (39b4 <startup_early_hook+0x8>)
    39ae:	2210      	movs	r2, #16
    39b0:	801a      	strh	r2, [r3, #0]
    39b2:	4770      	bx	lr
    39b4:	40052000 	.word	0x40052000

000039b8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    39b8:	4770      	bx	lr
    39ba:	bf00      	nop

000039bc <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    39bc:	7800      	ldrb	r0, [r0, #0]
}
    39be:	fab0 f080 	clz	r0, r0
    39c2:	0940      	lsrs	r0, r0, #5
    39c4:	4770      	bx	lr
    39c6:	bf00      	nop

000039c8 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    39c8:	2301      	movs	r3, #1
    39ca:	7003      	strb	r3, [r0, #0]
    39cc:	4770      	bx	lr
    39ce:	bf00      	nop

000039d0 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    39d0:	4a1c      	ldr	r2, [pc, #112]	; (3a44 <pinMode.part.2+0x74>)
    39d2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    39d6:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    39d8:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    39da:	d011      	beq.n	3a00 <pinMode.part.2+0x30>
    39dc:	2904      	cmp	r1, #4
    39de:	d01b      	beq.n	3a18 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    39e0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    39e4:	2200      	movs	r2, #0
    39e6:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    39ea:	b129      	cbz	r1, 39f8 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    39ec:	2902      	cmp	r1, #2
    39ee:	d020      	beq.n	3a32 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    39f0:	2903      	cmp	r1, #3
    39f2:	d022      	beq.n	3a3a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    39f4:	601a      	str	r2, [r3, #0]
    39f6:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    39f8:	f44f 7280 	mov.w	r2, #256	; 0x100
    39fc:	601a      	str	r2, [r3, #0]
    39fe:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3a00:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3a04:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3a08:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3a0c:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    3a0e:	681a      	ldr	r2, [r3, #0]
    3a10:	f022 0220 	bic.w	r2, r2, #32
    3a14:	601a      	str	r2, [r3, #0]
    3a16:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3a18:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3a1c:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3a20:	2001      	movs	r0, #1
    3a22:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3a26:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    3a28:	681a      	ldr	r2, [r3, #0]
    3a2a:	f042 0220 	orr.w	r2, r2, #32
    3a2e:	601a      	str	r2, [r3, #0]
    3a30:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    3a32:	f240 1203 	movw	r2, #259	; 0x103
    3a36:	601a      	str	r2, [r3, #0]
    3a38:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    3a3a:	f44f 7281 	mov.w	r2, #258	; 0x102
    3a3e:	601a      	str	r2, [r3, #0]
    3a40:	4770      	bx	lr
    3a42:	bf00      	nop
    3a44:	000077bc 	.word	0x000077bc

00003a48 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    3a48:	b430      	push	{r4, r5}
	RTC_SR = 0;
    3a4a:	4b05      	ldr	r3, [pc, #20]	; (3a60 <rtc_set+0x18>)
	RTC_TPR = 0;
    3a4c:	4d05      	ldr	r5, [pc, #20]	; (3a64 <rtc_set+0x1c>)
	RTC_TSR = t;
    3a4e:	4c06      	ldr	r4, [pc, #24]	; (3a68 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    3a50:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    3a52:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    3a54:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    3a56:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    3a58:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    3a5a:	6019      	str	r1, [r3, #0]
}
    3a5c:	bc30      	pop	{r4, r5}
    3a5e:	4770      	bx	lr
    3a60:	4003d014 	.word	0x4003d014
    3a64:	4003d004 	.word	0x4003d004
    3a68:	4003d000 	.word	0x4003d000

00003a6c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    3a6c:	2821      	cmp	r0, #33	; 0x21
    3a6e:	d801      	bhi.n	3a74 <pinMode+0x8>
    3a70:	f7ff bfae 	b.w	39d0 <pinMode.part.2>
    3a74:	4770      	bx	lr
    3a76:	bf00      	nop

00003a78 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3a78:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    3a7a:	490c      	ldr	r1, [pc, #48]	; (3aac <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3a7c:	4b0c      	ldr	r3, [pc, #48]	; (3ab0 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3a7e:	4a0d      	ldr	r2, [pc, #52]	; (3ab4 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3a80:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    3a82:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3a84:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    3a86:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3a88:	0152      	lsls	r2, r2, #5
    3a8a:	d502      	bpl.n	3a92 <micros+0x1a>
    3a8c:	2b32      	cmp	r3, #50	; 0x32
    3a8e:	bf88      	it	hi
    3a90:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    3a92:	4909      	ldr	r1, [pc, #36]	; (3ab8 <micros+0x40>)
    3a94:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    3a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3a9c:	33ff      	adds	r3, #255	; 0xff
    3a9e:	fba1 1303 	umull	r1, r3, r1, r3
    3aa2:	fb02 f000 	mul.w	r0, r2, r0
}
    3aa6:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    3aaa:	4770      	bx	lr
    3aac:	1fff94e8 	.word	0x1fff94e8
    3ab0:	e000e018 	.word	0xe000e018
    3ab4:	e000ed04 	.word	0xe000ed04
    3ab8:	aaaaaaab 	.word	0xaaaaaaab

00003abc <delay>:

void delay(uint32_t ms)
{
    3abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ac0:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3ac2:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    3ac4:	4f20      	ldr	r7, [pc, #128]	; (3b48 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3ac6:	4b21      	ldr	r3, [pc, #132]	; (3b4c <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3ac8:	4a21      	ldr	r2, [pc, #132]	; (3b50 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3aca:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    3acc:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3ace:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    3ad0:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3ad2:	0152      	lsls	r2, r2, #5
    3ad4:	d502      	bpl.n	3adc <delay+0x20>
    3ad6:	2b32      	cmp	r3, #50	; 0x32
    3ad8:	bf88      	it	hi
    3ada:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    3adc:	b395      	cbz	r5, 3b44 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    3ade:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    3ae2:	4e1c      	ldr	r6, [pc, #112]	; (3b54 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3ae4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 3b4c <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3ae8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 3b50 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    3aec:	33ff      	adds	r3, #255	; 0xff
    3aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3af2:	fba6 1303 	umull	r1, r3, r6, r3
    3af6:	fb02 f404 	mul.w	r4, r2, r4
    3afa:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3afe:	b672      	cpsid	i
	current = SYST_CVR;
    3b00:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    3b04:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3b06:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    3b0a:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3b0c:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    3b10:	33ff      	adds	r3, #255	; 0xff
    3b12:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3b16:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3b1a:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    3b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3b22:	d002      	beq.n	3b2a <delay+0x6e>
    3b24:	2932      	cmp	r1, #50	; 0x32
    3b26:	bf88      	it	hi
    3b28:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3b2a:	fb00 3302 	mla	r3, r0, r2, r3
    3b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    3b32:	d304      	bcc.n	3b3e <delay+0x82>
				ms--;
				if (ms == 0) return;
    3b34:	3d01      	subs	r5, #1
    3b36:	d005      	beq.n	3b44 <delay+0x88>
				start += 1000;
    3b38:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    3b3c:	e7df      	b.n	3afe <delay+0x42>
			}
			yield();
    3b3e:	f001 fa3f 	bl	4fc0 <yield>
		}
    3b42:	e7dc      	b.n	3afe <delay+0x42>
    3b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b48:	1fff94e8 	.word	0x1fff94e8
    3b4c:	e000e018 	.word	0xe000e018
    3b50:	e000ed04 	.word	0xe000ed04
    3b54:	aaaaaaab 	.word	0xaaaaaaab

00003b58 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    3b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3b5a:	4b2d      	ldr	r3, [pc, #180]	; (3c10 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3b5c:	492d      	ldr	r1, [pc, #180]	; (3c14 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3b5e:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 3c30 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    3b62:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 3c34 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    3b66:	4e2c      	ldr	r6, [pc, #176]	; (3c18 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    3b68:	4d2c      	ldr	r5, [pc, #176]	; (3c1c <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    3b6a:	4c2d      	ldr	r4, [pc, #180]	; (3c20 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    3b6c:	4a2d      	ldr	r2, [pc, #180]	; (3c24 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    3b6e:	4f2e      	ldr	r7, [pc, #184]	; (3c28 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3b70:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3b74:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    3b76:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3b7a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    3b7c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    3b80:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    3b82:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    3b86:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    3b88:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    3b8c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3b8e:	2000      	movs	r0, #0
    3b90:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3b92:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    3b94:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    3b98:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3b9c:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    3ba0:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    3ba2:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    3ba4:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    3ba6:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    3ba8:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    3baa:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    3bac:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3bae:	2209      	movs	r2, #9
    3bb0:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    3bb4:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    3bb8:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    3bbc:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    3bc0:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    3bc4:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    3bc8:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    3bcc:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    3bce:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3bd2:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    3bd6:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    3bda:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    3bde:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    3be0:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3be4:	4811      	ldr	r0, [pc, #68]	; (3c2c <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    3be6:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    3be8:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    3bec:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    3bf0:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    3bf2:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3bf4:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    3bf6:	f7ff fdc3 	bl	3780 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    3bfa:	2019      	movs	r0, #25
    3bfc:	f7ff ff5e 	bl	3abc <delay>
	usb_init();
    3c00:	f000 fe5c 	bl	48bc <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    3c04:	f240 1013 	movw	r0, #275	; 0x113
}
    3c08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    3c0c:	f7ff bf56 	b.w	3abc <delay>
    3c10:	e000e108 	.word	0xe000e108
    3c14:	40038004 	.word	0x40038004
    3c18:	40038014 	.word	0x40038014
    3c1c:	40038024 	.word	0x40038024
    3c20:	4003802c 	.word	0x4003802c
    3c24:	4003801c 	.word	0x4003801c
    3c28:	40038034 	.word	0x40038034
    3c2c:	400b8000 	.word	0x400b8000
    3c30:	4003800c 	.word	0x4003800c
    3c34:	40038008 	.word	0x40038008

00003c38 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    3c38:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3c3a:	2b03      	cmp	r3, #3
    3c3c:	d814      	bhi.n	3c68 <usb_rx+0x30>
	__disable_irq();
    3c3e:	b672      	cpsid	i
	ret = rx_first[endpoint];
    3c40:	490a      	ldr	r1, [pc, #40]	; (3c6c <usb_rx+0x34>)
    3c42:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    3c46:	b168      	cbz	r0, 3c64 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    3c48:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3c4a:	4c09      	ldr	r4, [pc, #36]	; (3c70 <usb_rx+0x38>)
    3c4c:	8805      	ldrh	r5, [r0, #0]
    3c4e:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    3c52:	6846      	ldr	r6, [r0, #4]
    3c54:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3c58:	1b52      	subs	r2, r2, r5
    3c5a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    3c5e:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3c60:	bc70      	pop	{r4, r5, r6}
    3c62:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    3c64:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3c66:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3c68:	2000      	movs	r0, #0
    3c6a:	4770      	bx	lr
    3c6c:	1fff9544 	.word	0x1fff9544
    3c70:	1fff9794 	.word	0x1fff9794

00003c74 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    3c74:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3c76:	2803      	cmp	r0, #3
    3c78:	d80b      	bhi.n	3c92 <usb_tx_packet_count+0x1e>
	__disable_irq();
    3c7a:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3c7c:	4b07      	ldr	r3, [pc, #28]	; (3c9c <usb_tx_packet_count+0x28>)
    3c7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    3c82:	b143      	cbz	r3, 3c96 <usb_tx_packet_count+0x22>
    3c84:	2000      	movs	r0, #0
    3c86:	685b      	ldr	r3, [r3, #4]
    3c88:	3001      	adds	r0, #1
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d1fb      	bne.n	3c86 <usb_tx_packet_count+0x12>
	__enable_irq();
    3c8e:	b662      	cpsie	i
	return count;
    3c90:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3c92:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    3c94:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    3c96:	4618      	mov	r0, r3
    3c98:	e7f9      	b.n	3c8e <usb_tx_packet_count+0x1a>
    3c9a:	bf00      	nop
    3c9c:	1fff9598 	.word	0x1fff9598

00003ca0 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    3ca0:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    3ca2:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3ca4:	4a2b      	ldr	r2, [pc, #172]	; (3d54 <usb_rx_memory+0xb4>)
    3ca6:	7813      	ldrb	r3, [r2, #0]
    3ca8:	071d      	lsls	r5, r3, #28
    3caa:	d506      	bpl.n	3cba <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3cac:	4b2a      	ldr	r3, [pc, #168]	; (3d58 <usb_rx_memory+0xb8>)
    3cae:	6a19      	ldr	r1, [r3, #32]
    3cb0:	2900      	cmp	r1, #0
    3cb2:	d036      	beq.n	3d22 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3cb4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3cb6:	2900      	cmp	r1, #0
    3cb8:	d041      	beq.n	3d3e <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3cba:	7853      	ldrb	r3, [r2, #1]
    3cbc:	071c      	lsls	r4, r3, #28
    3cbe:	d506      	bpl.n	3cce <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3cc0:	4b25      	ldr	r3, [pc, #148]	; (3d58 <usb_rx_memory+0xb8>)
    3cc2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    3cc4:	2900      	cmp	r1, #0
    3cc6:	d03e      	beq.n	3d46 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3cc8:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3cca:	2900      	cmp	r1, #0
    3ccc:	d039      	beq.n	3d42 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3cce:	7893      	ldrb	r3, [r2, #2]
    3cd0:	0719      	lsls	r1, r3, #28
    3cd2:	d505      	bpl.n	3ce0 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3cd4:	4b20      	ldr	r3, [pc, #128]	; (3d58 <usb_rx_memory+0xb8>)
    3cd6:	6e19      	ldr	r1, [r3, #96]	; 0x60
    3cd8:	2900      	cmp	r1, #0
    3cda:	d036      	beq.n	3d4a <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3cdc:	6e99      	ldr	r1, [r3, #104]	; 0x68
    3cde:	b189      	cbz	r1, 3d04 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3ce0:	78d3      	ldrb	r3, [r2, #3]
    3ce2:	071b      	lsls	r3, r3, #28
    3ce4:	d507      	bpl.n	3cf6 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3ce6:	4b1c      	ldr	r3, [pc, #112]	; (3d58 <usb_rx_memory+0xb8>)
    3ce8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    3cec:	b37a      	cbz	r2, 3d4e <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3cee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3cf2:	2111      	movs	r1, #17
    3cf4:	b13a      	cbz	r2, 3d06 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    3cf6:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    3cf8:	4b18      	ldr	r3, [pc, #96]	; (3d5c <usb_rx_memory+0xbc>)
    3cfa:	2200      	movs	r2, #0
    3cfc:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    3cfe:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    3d00:	f000 be68 	b.w	49d4 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3d04:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3d06:	4c15      	ldr	r4, [pc, #84]	; (3d5c <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d08:	4d15      	ldr	r5, [pc, #84]	; (3d60 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    3d0a:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d0c:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3d10:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3d14:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3d16:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3d18:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3d1a:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    3d1c:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    3d1e:	bc30      	pop	{r4, r5}
    3d20:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3d22:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3d24:	4c0d      	ldr	r4, [pc, #52]	; (3d5c <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d26:	4d0f      	ldr	r5, [pc, #60]	; (3d64 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    3d28:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d2a:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3d2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3d32:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3d34:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3d36:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3d38:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    3d3a:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    3d3c:	e7ef      	b.n	3d1e <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3d3e:	2105      	movs	r1, #5
    3d40:	e7e1      	b.n	3d06 <usb_rx_memory+0x66>
    3d42:	2109      	movs	r1, #9
    3d44:	e7df      	b.n	3d06 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3d46:	2208      	movs	r2, #8
    3d48:	e7ec      	b.n	3d24 <usb_rx_memory+0x84>
    3d4a:	220c      	movs	r2, #12
    3d4c:	e7ea      	b.n	3d24 <usb_rx_memory+0x84>
    3d4e:	2210      	movs	r2, #16
    3d50:	e7e8      	b.n	3d24 <usb_rx_memory+0x84>
    3d52:	bf00      	nop
    3d54:	000078f8 	.word	0x000078f8
    3d58:	1fff8000 	.word	0x1fff8000
    3d5c:	1fff95c1 	.word	0x1fff95c1
    3d60:	004000c8 	.word	0x004000c8
    3d64:	00400088 	.word	0x00400088

00003d68 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3d68:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    3d6a:	2b03      	cmp	r3, #3
    3d6c:	d81d      	bhi.n	3daa <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3d6e:	4a1b      	ldr	r2, [pc, #108]	; (3ddc <usb_tx+0x74>)
    3d70:	0140      	lsls	r0, r0, #5
    3d72:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    3d76:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3d78:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    3d7a:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3d7c:	4c18      	ldr	r4, [pc, #96]	; (3de0 <usb_tx+0x78>)
    3d7e:	5ce2      	ldrb	r2, [r4, r3]
    3d80:	2a03      	cmp	r2, #3
    3d82:	d81b      	bhi.n	3dbc <usb_tx+0x54>
    3d84:	e8df f002 	tbb	[pc, r2]
    3d88:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3d8c:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3d8e:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3d90:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3d92:	f010 0f08 	tst.w	r0, #8
    3d96:	bf14      	ite	ne
    3d98:	23c8      	movne	r3, #200	; 0xc8
    3d9a:	2388      	moveq	r3, #136	; 0x88
    3d9c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3da0:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3da2:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3da4:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    3da6:	b662      	cpsie	i
}
    3da8:	bc30      	pop	{r4, r5}
    3daa:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3dac:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    3dae:	2202      	movs	r2, #2
		break;
    3db0:	e7ed      	b.n	3d8e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    3db2:	2205      	movs	r2, #5
    3db4:	e7eb      	b.n	3d8e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    3db6:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3db8:	2204      	movs	r2, #4
		break;
    3dba:	e7e8      	b.n	3d8e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3dbc:	4a09      	ldr	r2, [pc, #36]	; (3de4 <usb_tx+0x7c>)
    3dbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    3dc2:	b138      	cbz	r0, 3dd4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3dc4:	4a08      	ldr	r2, [pc, #32]	; (3de8 <usb_tx+0x80>)
    3dc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    3dca:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3dcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    3dd0:	b662      	cpsie	i
		return;
    3dd2:	e7e9      	b.n	3da8 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3dd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    3dd8:	4a03      	ldr	r2, [pc, #12]	; (3de8 <usb_tx+0x80>)
    3dda:	e7f7      	b.n	3dcc <usb_tx+0x64>
    3ddc:	1fff8000 	.word	0x1fff8000
    3de0:	1fff95d0 	.word	0x1fff95d0
    3de4:	1fff9598 	.word	0x1fff9598
    3de8:	1fff95a8 	.word	0x1fff95a8

00003dec <usb_isr>:
}



void usb_isr(void)
{
    3dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3df0:	f8df b30c 	ldr.w	fp, [pc, #780]	; 4100 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    3df4:	f8df a30c 	ldr.w	sl, [pc, #780]	; 4104 <usb_isr+0x318>
}



void usb_isr(void)
{
    3df8:	b087      	sub	sp, #28
    3dfa:	e044      	b.n	3e86 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3dfc:	4fab      	ldr	r7, [pc, #684]	; (40ac <usb_isr+0x2c0>)
    3dfe:	ea4f 0893 	mov.w	r8, r3, lsr #2
    3e02:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3e06:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3e08:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3e0c:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3e10:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3e12:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3e16:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	f040 8102 	bne.w	4024 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    3e20:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    3e24:	0c1b      	lsrs	r3, r3, #16
    3e26:	b299      	uxth	r1, r3
    3e28:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	f000 80f0 	beq.w	4012 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3e32:	4b9f      	ldr	r3, [pc, #636]	; (40b0 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3e34:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    3e38:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    3e3c:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    3e40:	2a00      	cmp	r2, #0
    3e42:	f000 82c5 	beq.w	43d0 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3e46:	4d9b      	ldr	r5, [pc, #620]	; (40b4 <usb_isr+0x2c8>)
    3e48:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    3e4c:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    3e4e:	4c9a      	ldr	r4, [pc, #616]	; (40b8 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3e50:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3e54:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    3e58:	4419      	add	r1, r3
    3e5a:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    3e5e:	f000 fd99 	bl	4994 <usb_malloc>
					if (packet) {
    3e62:	2800      	cmp	r0, #0
    3e64:	f000 82ad 	beq.w	43c2 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3e68:	4a94      	ldr	r2, [pc, #592]	; (40bc <usb_isr+0x2d0>)
    3e6a:	4b95      	ldr	r3, [pc, #596]	; (40c0 <usb_isr+0x2d4>)
    3e6c:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3e70:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3e74:	bf18      	it	ne
    3e76:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3e78:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3e7c:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3e80:	2308      	movs	r3, #8
    3e82:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3e86:	f89b 4000 	ldrb.w	r4, [fp]
    3e8a:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3e8c:	0761      	lsls	r1, r4, #29
    3e8e:	d51a      	bpl.n	3ec6 <usb_isr+0xda>
		if (usb_configuration) {
    3e90:	4b8c      	ldr	r3, [pc, #560]	; (40c4 <usb_isr+0x2d8>)
    3e92:	781b      	ldrb	r3, [r3, #0]
    3e94:	b1a3      	cbz	r3, 3ec0 <usb_isr+0xd4>
			t = usb_reboot_timer;
    3e96:	498c      	ldr	r1, [pc, #560]	; (40c8 <usb_isr+0x2dc>)
    3e98:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    3e9a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    3e9e:	b122      	cbz	r2, 3eaa <usb_isr+0xbe>
				usb_reboot_timer = --t;
    3ea0:	3b01      	subs	r3, #1
    3ea2:	b2db      	uxtb	r3, r3
    3ea4:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    3ea6:	b903      	cbnz	r3, 3eaa <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3ea8:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3eaa:	4988      	ldr	r1, [pc, #544]	; (40cc <usb_isr+0x2e0>)
    3eac:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    3eae:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    3eb2:	b12a      	cbz	r2, 3ec0 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    3eb4:	3b01      	subs	r3, #1
    3eb6:	b2db      	uxtb	r3, r3
    3eb8:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    3eba:	2b00      	cmp	r3, #0
    3ebc:	f000 8257 	beq.w	436e <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    3ec0:	2304      	movs	r3, #4
    3ec2:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    3ec6:	f004 0308 	and.w	r3, r4, #8
    3eca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3ece:	2b00      	cmp	r3, #0
    3ed0:	f000 80cc 	beq.w	406c <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    3ed4:	f89a 3000 	ldrb.w	r3, [sl]
    3ed8:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    3eda:	091e      	lsrs	r6, r3, #4
    3edc:	d18e      	bne.n	3dfc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3ede:	089c      	lsrs	r4, r3, #2
    3ee0:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 40ac <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3ee4:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3ee8:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3eec:	f3c2 0283 	ubfx	r2, r2, #2, #4
    3ef0:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    3ef2:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3ef4:	2a0c      	cmp	r2, #12
    3ef6:	f200 8088 	bhi.w	400a <usb_isr+0x21e>
    3efa:	e8df f002 	tbb	[pc, r2]
    3efe:	7c7c      	.short	0x7c7c
    3f00:	86868686 	.word	0x86868686
    3f04:	86478686 	.word	0x86478686
    3f08:	8686      	.short	0x8686
    3f0a:	07          	.byte	0x07
    3f0b:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3f0c:	6808      	ldr	r0, [r1, #0]
    3f0e:	4d70      	ldr	r5, [pc, #448]	; (40d0 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    3f10:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3f12:	4f70      	ldr	r7, [pc, #448]	; (40d4 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3f14:	4e70      	ldr	r6, [pc, #448]	; (40d8 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3f16:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3f18:	b281      	uxth	r1, r0
    3f1a:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3f1e:	4b67      	ldr	r3, [pc, #412]	; (40bc <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    3f20:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3f22:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3f26:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3f28:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3f2a:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3f2e:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3f30:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    3f34:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3f38:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3f3c:	4c5b      	ldr	r4, [pc, #364]	; (40ac <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3f3e:	f200 80e3 	bhi.w	4108 <usb_isr+0x31c>
    3f42:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    3f46:	f080 8346 	bcs.w	45d6 <usb_isr+0x7ea>
    3f4a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    3f4e:	f000 82fc 	beq.w	454a <usb_isr+0x75e>
    3f52:	f200 828d 	bhi.w	4470 <usb_isr+0x684>
    3f56:	2980      	cmp	r1, #128	; 0x80
    3f58:	f000 8377 	beq.w	464a <usb_isr+0x85e>
    3f5c:	2982      	cmp	r1, #130	; 0x82
    3f5e:	f040 82fa 	bne.w	4556 <usb_isr+0x76a>
    3f62:	88a9      	ldrh	r1, [r5, #4]
    3f64:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3f68:	2904      	cmp	r1, #4
    3f6a:	f200 82f4 	bhi.w	4556 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3f6e:	485b      	ldr	r0, [pc, #364]	; (40dc <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3f70:	4c5b      	ldr	r4, [pc, #364]	; (40e0 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3f72:	0089      	lsls	r1, r1, #2
    3f74:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3f76:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3f78:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3f7a:	7802      	ldrb	r2, [r0, #0]
    3f7c:	0793      	lsls	r3, r2, #30
    3f7e:	f140 8458 	bpl.w	4832 <usb_isr+0xa46>
    3f82:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    3f86:	f04f 0e02 	mov.w	lr, #2
    3f8a:	e342      	b.n	4612 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3f8c:	4f51      	ldr	r7, [pc, #324]	; (40d4 <usb_isr+0x2e8>)
    3f8e:	683a      	ldr	r2, [r7, #0]
		if (data) {
    3f90:	b332      	cbz	r2, 3fe0 <usb_isr+0x1f4>
			size = ep0_tx_len;
    3f92:	4b54      	ldr	r3, [pc, #336]	; (40e4 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3f94:	4e50      	ldr	r6, [pc, #320]	; (40d8 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3f96:	4954      	ldr	r1, [pc, #336]	; (40e8 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3f98:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3f9a:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3f9c:	780d      	ldrb	r5, [r1, #0]
    3f9e:	2840      	cmp	r0, #64	; 0x40
    3fa0:	4686      	mov	lr, r0
    3fa2:	f045 0802 	orr.w	r8, r5, #2
    3fa6:	bf28      	it	cs
    3fa8:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3fac:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    3fae:	f084 0401 	eor.w	r4, r4, #1
    3fb2:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3fb4:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3fb8:	bf0c      	ite	eq
    3fba:	2488      	moveq	r4, #136	; 0x88
    3fbc:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3fbe:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3fc2:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3fc4:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3fc8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3fcc:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3fce:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3fd0:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3fd4:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3fd6:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3fd8:	2800      	cmp	r0, #0
    3fda:	f000 8145 	beq.w	4268 <usb_isr+0x47c>
    3fde:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3fe0:	4b3b      	ldr	r3, [pc, #236]	; (40d0 <usb_isr+0x2e4>)
    3fe2:	881a      	ldrh	r2, [r3, #0]
    3fe4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3fe8:	d10f      	bne.n	400a <usb_isr+0x21e>
			setup.bRequest = 0;
    3fea:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3fec:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    3fee:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3ff0:	4b3e      	ldr	r3, [pc, #248]	; (40ec <usb_isr+0x300>)
    3ff2:	701a      	strb	r2, [r3, #0]
    3ff4:	e009      	b.n	400a <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3ff6:	4a36      	ldr	r2, [pc, #216]	; (40d0 <usb_isr+0x2e4>)
    3ff8:	8810      	ldrh	r0, [r2, #0]
    3ffa:	f242 0221 	movw	r2, #8225	; 0x2021
    3ffe:	4290      	cmp	r0, r2
    4000:	f000 8137 	beq.w	4272 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4004:	4a2d      	ldr	r2, [pc, #180]	; (40bc <usb_isr+0x2d0>)
    4006:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    400a:	4a39      	ldr	r2, [pc, #228]	; (40f0 <usb_isr+0x304>)
    400c:	2301      	movs	r3, #1
    400e:	7013      	strb	r3, [r2, #0]
    4010:	e736      	b.n	3e80 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4012:	4a2a      	ldr	r2, [pc, #168]	; (40bc <usb_isr+0x2d0>)
    4014:	4b2a      	ldr	r3, [pc, #168]	; (40c0 <usb_isr+0x2d4>)
    4016:	f019 0f08 	tst.w	r9, #8
    401a:	bf18      	it	ne
    401c:	4613      	movne	r3, r2
    401e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    4022:	e72d      	b.n	3e80 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    4024:	f000 fcd6 	bl	49d4 <usb_free>
				packet = tx_first[endpoint];
    4028:	4a32      	ldr	r2, [pc, #200]	; (40f4 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    402a:	4933      	ldr	r1, [pc, #204]	; (40f8 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    402c:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    4030:	2b00      	cmp	r3, #0
    4032:	f000 81d1 	beq.w	43d8 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    4036:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    4038:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    403a:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    403e:	f103 0208 	add.w	r2, r3, #8
    4042:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    4046:	2c03      	cmp	r4, #3
    4048:	d805      	bhi.n	4056 <usb_isr+0x26a>
    404a:	e8df f004 	tbb	[pc, r4]
    404e:	022c      	.short	0x022c
    4050:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    4052:	2202      	movs	r2, #2
    4054:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    4056:	881a      	ldrh	r2, [r3, #0]
    4058:	f019 0f08 	tst.w	r9, #8
    405c:	bf0c      	ite	eq
    405e:	2388      	moveq	r3, #136	; 0x88
    4060:	23c8      	movne	r3, #200	; 0xc8
    4062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    4066:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    406a:	e709      	b.n	3e80 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    406c:	07e0      	lsls	r0, r4, #31
    406e:	f100 8181 	bmi.w	4374 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    4072:	0621      	lsls	r1, r4, #24
    4074:	f100 81f2 	bmi.w	445c <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    4078:	07a2      	lsls	r2, r4, #30
    407a:	d506      	bpl.n	408a <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    407c:	4a1f      	ldr	r2, [pc, #124]	; (40fc <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    407e:	4920      	ldr	r1, [pc, #128]	; (4100 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4080:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4082:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4084:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    4086:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4088:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    408a:	06e3      	lsls	r3, r4, #27
    408c:	d502      	bpl.n	4094 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    408e:	4b1c      	ldr	r3, [pc, #112]	; (4100 <usb_isr+0x314>)
    4090:	2210      	movs	r2, #16
    4092:	701a      	strb	r2, [r3, #0]
	}

}
    4094:	b007      	add	sp, #28
    4096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    409a:	2204      	movs	r2, #4
    409c:	558a      	strb	r2, [r1, r6]
						break;
    409e:	e7da      	b.n	4056 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    40a0:	2205      	movs	r2, #5
    40a2:	558a      	strb	r2, [r1, r6]
						break;
    40a4:	e7d7      	b.n	4056 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    40a6:	2203      	movs	r2, #3
    40a8:	558a      	strb	r2, [r1, r6]
						break;
    40aa:	e7d4      	b.n	4056 <usb_isr+0x26a>
    40ac:	1fff8000 	.word	0x1fff8000
    40b0:	1fff9544 	.word	0x1fff9544
    40b4:	1fff94f0 	.word	0x1fff94f0
    40b8:	1fff9794 	.word	0x1fff9794
    40bc:	004000c8 	.word	0x004000c8
    40c0:	00400088 	.word	0x00400088
    40c4:	1fff95cc 	.word	0x1fff95cc
    40c8:	1fff9555 	.word	0x1fff9555
    40cc:	1fff95d4 	.word	0x1fff95d4
    40d0:	1fff95b8 	.word	0x1fff95b8
    40d4:	1fff94ec 	.word	0x1fff94ec
    40d8:	1fff9554 	.word	0x1fff9554
    40dc:	400720c0 	.word	0x400720c0
    40e0:	1fff95c4 	.word	0x1fff95c4
    40e4:	1fff9500 	.word	0x1fff9500
    40e8:	1fff95c0 	.word	0x1fff95c0
    40ec:	40072098 	.word	0x40072098
    40f0:	40072094 	.word	0x40072094
    40f4:	1fff9598 	.word	0x1fff9598
    40f8:	1fff95d0 	.word	0x1fff95d0
    40fc:	40072088 	.word	0x40072088
    4100:	40072080 	.word	0x40072080
    4104:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4108:	f242 0021 	movw	r0, #8225	; 0x2021
    410c:	4281      	cmp	r1, r0
    410e:	f000 812a 	beq.w	4366 <usb_isr+0x57a>
    4112:	f200 80d8 	bhi.w	42c6 <usb_isr+0x4da>
    4116:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    411a:	f000 8276 	beq.w	460a <usb_isr+0x81e>
    411e:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    4122:	f040 8218 	bne.w	4556 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    4126:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    4128:	49b3      	ldr	r1, [pc, #716]	; (43f8 <usb_isr+0x60c>)
    412a:	78a8      	ldrb	r0, [r5, #2]
    412c:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    412e:	0612      	lsls	r2, r2, #24
    4130:	f100 833a 	bmi.w	47a8 <usb_isr+0x9bc>
    4134:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    4138:	49b0      	ldr	r1, [pc, #704]	; (43fc <usb_isr+0x610>)
    413a:	0613      	lsls	r3, r2, #24
    413c:	f100 830c 	bmi.w	4758 <usb_isr+0x96c>
    4140:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    4144:	49ad      	ldr	r1, [pc, #692]	; (43fc <usb_isr+0x610>)
    4146:	0615      	lsls	r5, r2, #24
    4148:	f100 8301 	bmi.w	474e <usb_isr+0x962>
    414c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    4150:	49aa      	ldr	r1, [pc, #680]	; (43fc <usb_isr+0x610>)
    4152:	0614      	lsls	r4, r2, #24
    4154:	f100 82f6 	bmi.w	4744 <usb_isr+0x958>
    4158:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    415c:	49a7      	ldr	r1, [pc, #668]	; (43fc <usb_isr+0x610>)
    415e:	0610      	lsls	r0, r2, #24
    4160:	f100 834a 	bmi.w	47f8 <usb_isr+0xa0c>
    4164:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    4168:	49a4      	ldr	r1, [pc, #656]	; (43fc <usb_isr+0x610>)
    416a:	0612      	lsls	r2, r2, #24
    416c:	f100 833f 	bmi.w	47ee <usb_isr+0xa02>
    4170:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    4174:	49a1      	ldr	r1, [pc, #644]	; (43fc <usb_isr+0x610>)
    4176:	0613      	lsls	r3, r2, #24
    4178:	f100 8334 	bmi.w	47e4 <usb_isr+0x9f8>
    417c:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    4180:	499e      	ldr	r1, [pc, #632]	; (43fc <usb_isr+0x610>)
    4182:	0615      	lsls	r5, r2, #24
    4184:	f100 8329 	bmi.w	47da <usb_isr+0x9ee>
    4188:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    418c:	499b      	ldr	r1, [pc, #620]	; (43fc <usb_isr+0x610>)
    418e:	0614      	lsls	r4, r2, #24
    4190:	f100 831e 	bmi.w	47d0 <usb_isr+0x9e4>
    4194:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    4198:	4998      	ldr	r1, [pc, #608]	; (43fc <usb_isr+0x610>)
    419a:	0610      	lsls	r0, r2, #24
    419c:	f100 8313 	bmi.w	47c6 <usb_isr+0x9da>
    41a0:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    41a4:	4995      	ldr	r1, [pc, #596]	; (43fc <usb_isr+0x610>)
    41a6:	0612      	lsls	r2, r2, #24
    41a8:	f100 8308 	bmi.w	47bc <usb_isr+0x9d0>
    41ac:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    41b0:	4992      	ldr	r1, [pc, #584]	; (43fc <usb_isr+0x610>)
    41b2:	0613      	lsls	r3, r2, #24
    41b4:	f100 82fd 	bmi.w	47b2 <usb_isr+0x9c6>
    41b8:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    41bc:	498f      	ldr	r1, [pc, #572]	; (43fc <usb_isr+0x610>)
    41be:	0615      	lsls	r5, r2, #24
    41c0:	f100 8331 	bmi.w	4826 <usb_isr+0xa3a>
    41c4:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    41c8:	498c      	ldr	r1, [pc, #560]	; (43fc <usb_isr+0x610>)
    41ca:	0614      	lsls	r4, r2, #24
    41cc:	f100 8325 	bmi.w	481a <usb_isr+0xa2e>
    41d0:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    41d4:	4989      	ldr	r1, [pc, #548]	; (43fc <usb_isr+0x610>)
    41d6:	0610      	lsls	r0, r2, #24
    41d8:	f100 8319 	bmi.w	480e <usb_isr+0xa22>
    41dc:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    41e0:	4986      	ldr	r1, [pc, #536]	; (43fc <usb_isr+0x610>)
    41e2:	0612      	lsls	r2, r2, #24
    41e4:	f100 830d 	bmi.w	4802 <usb_isr+0xa16>
    41e8:	4885      	ldr	r0, [pc, #532]	; (4400 <usb_isr+0x614>)
    41ea:	4a86      	ldr	r2, [pc, #536]	; (4404 <usb_isr+0x618>)
    41ec:	4986      	ldr	r1, [pc, #536]	; (4408 <usb_isr+0x61c>)
    41ee:	9001      	str	r0, [sp, #4]
    41f0:	4886      	ldr	r0, [pc, #536]	; (440c <usb_isr+0x620>)
    41f2:	4d87      	ldr	r5, [pc, #540]	; (4410 <usb_isr+0x624>)
    41f4:	4c87      	ldr	r4, [pc, #540]	; (4414 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    41f6:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    41f8:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    41fa:	9605      	str	r6, [sp, #20]
    41fc:	9502      	str	r5, [sp, #8]
    41fe:	4680      	mov	r8, r0
    4200:	460f      	mov	r7, r1
    4202:	4616      	mov	r6, r2
    4204:	461d      	mov	r5, r3
    4206:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    4208:	6830      	ldr	r0, [r6, #0]
			while (p) {
    420a:	b128      	cbz	r0, 4218 <usb_isr+0x42c>
				n = p->next;
    420c:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    420e:	f000 fbe1 	bl	49d4 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    4212:	4620      	mov	r0, r4
    4214:	2c00      	cmp	r4, #0
    4216:	d1f9      	bne.n	420c <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    4218:	2300      	movs	r3, #0
    421a:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    421c:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    421e:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    4220:	461a      	mov	r2, r3
    4222:	2300      	movs	r3, #0
    4224:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    4228:	b128      	cbz	r0, 4236 <usb_isr+0x44a>
				n = p->next;
    422a:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    422c:	f000 fbd2 	bl	49d4 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    4230:	4620      	mov	r0, r4
    4232:	2c00      	cmp	r4, #0
    4234:	d1f9      	bne.n	422a <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    4236:	2200      	movs	r2, #0
    4238:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    423a:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    423c:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    4240:	4611      	mov	r1, r2
    4242:	2200      	movs	r2, #0
    4244:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    4248:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    424a:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    424c:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    424e:	f04f 0100 	mov.w	r1, #0
    4252:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    4256:	2b03      	cmp	r3, #3
    4258:	f200 812b 	bhi.w	44b2 <usb_isr+0x6c6>
    425c:	e8df f013 	tbh	[pc, r3, lsl #1]
    4260:	01250170 	.word	0x01250170
    4264:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4268:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    426c:	bf18      	it	ne
    426e:	2200      	movne	r2, #0
    4270:	e6b5      	b.n	3fde <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4272:	4a69      	ldr	r2, [pc, #420]	; (4418 <usb_isr+0x62c>)
    4274:	780d      	ldrb	r5, [r1, #0]
    4276:	7848      	ldrb	r0, [r1, #1]
    4278:	7015      	strb	r5, [r2, #0]
    427a:	7050      	strb	r0, [r2, #1]
    427c:	788d      	ldrb	r5, [r1, #2]
    427e:	78c8      	ldrb	r0, [r1, #3]
    4280:	7095      	strb	r5, [r2, #2]
    4282:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4284:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4286:	790d      	ldrb	r5, [r1, #4]
    4288:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    428a:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    428c:	794d      	ldrb	r5, [r1, #5]
    428e:	7989      	ldrb	r1, [r1, #6]
    4290:	7155      	strb	r5, [r2, #5]
    4292:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4294:	f000 819b 	beq.w	45ce <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4298:	4960      	ldr	r1, [pc, #384]	; (441c <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    429a:	4e61      	ldr	r6, [pc, #388]	; (4420 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    429c:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    429e:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    42a0:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    42a4:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    42a6:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    42aa:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    42ac:	bf0c      	ite	eq
    42ae:	2188      	moveq	r1, #136	; 0x88
    42b0:	21c8      	movne	r1, #200	; 0xc8
    42b2:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    42b6:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    42ba:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    42be:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    42c0:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    42c2:	6051      	str	r1, [r2, #4]
    42c4:	e69e      	b.n	4004 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    42c6:	f242 2021 	movw	r0, #8737	; 0x2221
    42ca:	4281      	cmp	r1, r0
    42cc:	f040 81cb 	bne.w	4666 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    42d0:	4b54      	ldr	r3, [pc, #336]	; (4424 <usb_isr+0x638>)
    42d2:	4c55      	ldr	r4, [pc, #340]	; (4428 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    42d4:	4955      	ldr	r1, [pc, #340]	; (442c <usb_isr+0x640>)
    42d6:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    42d8:	681d      	ldr	r5, [r3, #0]
    42da:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    42dc:	f8cd e004 	str.w	lr, [sp, #4]
    42e0:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    42e2:	2000      	movs	r0, #0
    42e4:	9002      	str	r0, [sp, #8]
    42e6:	4680      	mov	r8, r0
    42e8:	4684      	mov	ip, r0
    42ea:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    42ec:	494b      	ldr	r1, [pc, #300]	; (441c <usb_isr+0x630>)
    42ee:	780d      	ldrb	r5, [r1, #0]
    42f0:	f045 0e02 	orr.w	lr, r5, #2
    42f4:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    42f8:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    42fa:	9b01      	ldr	r3, [sp, #4]
    42fc:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    42fe:	9b03      	ldr	r3, [sp, #12]
    4300:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4302:	bf0c      	ite	eq
    4304:	2488      	moveq	r4, #136	; 0x88
    4306:	24c8      	movne	r4, #200	; 0xc8
    4308:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    430c:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4310:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    4314:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    4316:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4318:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 43fc <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    431c:	4b40      	ldr	r3, [pc, #256]	; (4420 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    431e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 441c <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4322:	2800      	cmp	r0, #0
    4324:	f040 811e 	bne.w	4564 <usb_isr+0x778>
    4328:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    432c:	d11b      	bne.n	4366 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    432e:	f044 0c02 	orr.w	ip, r4, #2
    4332:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    4336:	9c02      	ldr	r4, [sp, #8]
    4338:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 43fc <usb_isr+0x610>
    433c:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    433e:	2a00      	cmp	r2, #0
    4340:	f040 8126 	bne.w	4590 <usb_isr+0x7a4>
    4344:	0402      	lsls	r2, r0, #16
    4346:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    434a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    434e:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4352:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4354:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    4356:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4358:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    435a:	2840      	cmp	r0, #64	; 0x40
    435c:	d103      	bne.n	4366 <usb_isr+0x57a>
    435e:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    4360:	4a33      	ldr	r2, [pc, #204]	; (4430 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    4362:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    4364:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4366:	4a33      	ldr	r2, [pc, #204]	; (4434 <usb_isr+0x648>)
    4368:	2301      	movs	r3, #1
    436a:	7013      	strb	r3, [r2, #0]
    436c:	e64d      	b.n	400a <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    436e:	f000 fc9d 	bl	4cac <usb_serial_flush_callback>
    4372:	e5a5      	b.n	3ec0 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4374:	4b21      	ldr	r3, [pc, #132]	; (43fc <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    4376:	482f      	ldr	r0, [pc, #188]	; (4434 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    4378:	4928      	ldr	r1, [pc, #160]	; (441c <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    437a:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    437c:	f04f 0e02 	mov.w	lr, #2
    4380:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4384:	4f2c      	ldr	r7, [pc, #176]	; (4438 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    4386:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4388:	492c      	ldr	r1, [pc, #176]	; (443c <usb_isr+0x650>)
    438a:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    438c:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    438e:	4e2c      	ldr	r6, [pc, #176]	; (4440 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    4390:	4d2c      	ldr	r5, [pc, #176]	; (4444 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    4392:	4c2d      	ldr	r4, [pc, #180]	; (4448 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    4394:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4396:	210d      	movs	r1, #13
    4398:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    439a:	21ff      	movs	r1, #255	; 0xff
    439c:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    439e:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 4458 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    43a2:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    43a4:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    43a6:	4d29      	ldr	r5, [pc, #164]	; (444c <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    43a8:	4a29      	ldr	r2, [pc, #164]	; (4450 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    43aa:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    43ae:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    43b0:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    43b2:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    43b6:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    43b8:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    43ba:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    43bc:	b007      	add	sp, #28
    43be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    43c2:	4a24      	ldr	r2, [pc, #144]	; (4454 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    43c4:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    43c8:	7813      	ldrb	r3, [r2, #0]
    43ca:	3301      	adds	r3, #1
    43cc:	7013      	strb	r3, [r2, #0]
    43ce:	e557      	b.n	3e80 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    43d0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    43d4:	4d0e      	ldr	r5, [pc, #56]	; (4410 <usb_isr+0x624>)
    43d6:	e53a      	b.n	3e4e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    43d8:	5d8b      	ldrb	r3, [r1, r6]
    43da:	2b03      	cmp	r3, #3
    43dc:	f200 80f0 	bhi.w	45c0 <usb_isr+0x7d4>
    43e0:	a201      	add	r2, pc, #4	; (adr r2, 43e8 <usb_isr+0x5fc>)
    43e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    43e6:	bf00      	nop
    43e8:	00003e81 	.word	0x00003e81
    43ec:	00003e81 	.word	0x00003e81
    43f0:	000044a5 	.word	0x000044a5
    43f4:	0000449f 	.word	0x0000449f
    43f8:	1fff95cc 	.word	0x1fff95cc
    43fc:	1fff8000 	.word	0x1fff8000
    4400:	1fff95a8 	.word	0x1fff95a8
    4404:	1fff9544 	.word	0x1fff9544
    4408:	1fff9598 	.word	0x1fff9598
    440c:	1fff95d0 	.word	0x1fff95d0
    4410:	1fff94f0 	.word	0x1fff94f0
    4414:	1fff9794 	.word	0x1fff9794
    4418:	1fff979c 	.word	0x1fff979c
    441c:	1fff95c0 	.word	0x1fff95c0
    4420:	1fff9554 	.word	0x1fff9554
    4424:	1fff94e8 	.word	0x1fff94e8
    4428:	1fff97a4 	.word	0x1fff97a4
    442c:	1fff95e4 	.word	0x1fff95e4
    4430:	1fff9500 	.word	0x1fff9500
    4434:	40072094 	.word	0x40072094
    4438:	400720c0 	.word	0x400720c0
    443c:	00400088 	.word	0x00400088
    4440:	40072088 	.word	0x40072088
    4444:	40072080 	.word	0x40072080
    4448:	40072098 	.word	0x40072098
    444c:	1fff9504 	.word	0x1fff9504
    4450:	1fff9558 	.word	0x1fff9558
    4454:	1fff95c1 	.word	0x1fff95c1
    4458:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    445c:	49c1      	ldr	r1, [pc, #772]	; (4764 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    445e:	4bc2      	ldr	r3, [pc, #776]	; (4768 <usb_isr+0x97c>)
    4460:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4462:	200d      	movs	r0, #13
    4464:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    4466:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    4468:	07a2      	lsls	r2, r4, #30
    446a:	f57f ae0e 	bpl.w	408a <usb_isr+0x29e>
    446e:	e605      	b.n	407c <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4470:	f240 3202 	movw	r2, #770	; 0x302
    4474:	4291      	cmp	r1, r2
    4476:	f040 80ee 	bne.w	4656 <usb_isr+0x86a>
    447a:	88a9      	ldrh	r1, [r5, #4]
    447c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4480:	2904      	cmp	r1, #4
    4482:	d868      	bhi.n	4556 <usb_isr+0x76a>
    4484:	886a      	ldrh	r2, [r5, #2]
    4486:	2a00      	cmp	r2, #0
    4488:	d165      	bne.n	4556 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    448a:	48b6      	ldr	r0, [pc, #728]	; (4764 <usb_isr+0x978>)
    448c:	f8cd e004 	str.w	lr, [sp, #4]
    4490:	0089      	lsls	r1, r1, #2
    4492:	4408      	add	r0, r1
    4494:	7801      	ldrb	r1, [r0, #0]
    4496:	f041 0102 	orr.w	r1, r1, #2
    449a:	7001      	strb	r1, [r0, #0]
    449c:	e721      	b.n	42e2 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    449e:	2301      	movs	r3, #1
    44a0:	558b      	strb	r3, [r1, r6]
						break;
    44a2:	e4ed      	b.n	3e80 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    44a4:	2300      	movs	r3, #0
    44a6:	558b      	strb	r3, [r1, r6]
						break;
    44a8:	e4ea      	b.n	3e80 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    44aa:	f04f 0301 	mov.w	r3, #1
    44ae:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    44b2:	3501      	adds	r5, #1
    44b4:	2d04      	cmp	r5, #4
    44b6:	f106 0604 	add.w	r6, r6, #4
    44ba:	f107 0704 	add.w	r7, r7, #4
    44be:	f108 0801 	add.w	r8, r8, #1
    44c2:	f47f aea1 	bne.w	4208 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    44c6:	4ca9      	ldr	r4, [pc, #676]	; (476c <usb_isr+0x980>)
			*reg = epconf;
    44c8:	4ba9      	ldr	r3, [pc, #676]	; (4770 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    44ca:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    44cc:	4da9      	ldr	r5, [pc, #676]	; (4774 <usb_isr+0x988>)
    44ce:	9f04      	ldr	r7, [sp, #16]
    44d0:	9e05      	ldr	r6, [sp, #20]
    44d2:	2100      	movs	r1, #0
    44d4:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    44d6:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    44d8:	0713      	lsls	r3, r2, #28
    44da:	f100 8105 	bmi.w	46e8 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    44de:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    44e0:	49a5      	ldr	r1, [pc, #660]	; (4778 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    44e2:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 4784 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    44e6:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    44e8:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    44ea:	f04f 0100 	mov.w	r1, #0
    44ee:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    44f2:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    44f6:	f100 80e0 	bmi.w	46ba <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    44fa:	49a0      	ldr	r1, [pc, #640]	; (477c <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    44fc:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    44fe:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4500:	2100      	movs	r1, #0
    4502:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    4506:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    450a:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    450c:	f8df 8274 	ldr.w	r8, [pc, #628]	; 4784 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4510:	f100 8101 	bmi.w	4716 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4514:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    4516:	499a      	ldr	r1, [pc, #616]	; (4780 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4518:	4c9a      	ldr	r4, [pc, #616]	; (4784 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    451a:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    451c:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    451e:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4520:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    4524:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4528:	f100 80b0 	bmi.w	468c <usb_isr+0x8a0>
    452c:	7833      	ldrb	r3, [r6, #0]
    452e:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4530:	2100      	movs	r1, #0
    4532:	f083 0201 	eor.w	r2, r3, #1
    4536:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    453a:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    453e:	e6d0      	b.n	42e2 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    4540:	f04f 0300 	mov.w	r3, #0
    4544:	f888 3000 	strb.w	r3, [r8]
    4548:	e7b3      	b.n	44b2 <usb_isr+0x6c6>
    454a:	88a9      	ldrh	r1, [r5, #4]
    454c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4550:	2904      	cmp	r1, #4
    4552:	f240 808d 	bls.w	4670 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4556:	4a83      	ldr	r2, [pc, #524]	; (4764 <usb_isr+0x978>)
    4558:	230f      	movs	r3, #15
    455a:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    455c:	4a8a      	ldr	r2, [pc, #552]	; (4788 <usb_isr+0x99c>)
    455e:	2301      	movs	r3, #1
    4560:	7013      	strb	r3, [r2, #0]
    4562:	e552      	b.n	400a <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    4564:	2840      	cmp	r0, #64	; 0x40
    4566:	f67f aee2 	bls.w	432e <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    456a:	f044 0402 	orr.w	r4, r4, #2
    456e:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    4572:	9e02      	ldr	r6, [sp, #8]
    4574:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4576:	b1ba      	cbz	r2, 45a8 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    4578:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    457c:	4a83      	ldr	r2, [pc, #524]	; (478c <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    457e:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4580:	4633      	mov	r3, r6
    4582:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4584:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4588:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    458a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    458e:	e6e7      	b.n	4360 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    4590:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4594:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4596:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4598:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    459a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    459c:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    45a0:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    45a2:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    45a6:	e6d8      	b.n	435a <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    45a8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    45ac:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    45ae:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    45b0:	4a77      	ldr	r2, [pc, #476]	; (4790 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    45b2:	f888 5000 	strb.w	r5, [r8]
    45b6:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    45b8:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    45ba:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    45be:	e6cf      	b.n	4360 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    45c0:	f019 0f08 	tst.w	r9, #8
    45c4:	bf0c      	ite	eq
    45c6:	2302      	moveq	r3, #2
    45c8:	2303      	movne	r3, #3
    45ca:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    45cc:	e458      	b.n	3e80 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    45ce:	4a71      	ldr	r2, [pc, #452]	; (4794 <usb_isr+0x9a8>)
    45d0:	210f      	movs	r1, #15
    45d2:	7011      	strb	r1, [r2, #0]
    45d4:	e660      	b.n	4298 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    45d6:	4a70      	ldr	r2, [pc, #448]	; (4798 <usb_isr+0x9ac>)
    45d8:	6854      	ldr	r4, [r2, #4]
    45da:	2c00      	cmp	r4, #0
    45dc:	d0bb      	beq.n	4556 <usb_isr+0x76a>
    45de:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    45e0:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    45e4:	e003      	b.n	45ee <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    45e6:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    45e8:	6854      	ldr	r4, [r2, #4]
    45ea:	2c00      	cmp	r4, #0
    45ec:	d0b3      	beq.n	4556 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    45ee:	8813      	ldrh	r3, [r2, #0]
    45f0:	4283      	cmp	r3, r0
    45f2:	d1f8      	bne.n	45e6 <usb_isr+0x7fa>
    45f4:	8853      	ldrh	r3, [r2, #2]
    45f6:	4573      	cmp	r3, lr
    45f8:	d1f5      	bne.n	45e6 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    45fa:	0a00      	lsrs	r0, r0, #8
    45fc:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    45fe:	bf0c      	ite	eq
    4600:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    4604:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    4608:	e003      	b.n	4612 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    460a:	4a64      	ldr	r2, [pc, #400]	; (479c <usb_isr+0x9b0>)
    460c:	4c64      	ldr	r4, [pc, #400]	; (47a0 <usb_isr+0x9b4>)
    460e:	7812      	ldrb	r2, [r2, #0]
    4610:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4612:	88e8      	ldrh	r0, [r5, #6]
    4614:	4570      	cmp	r0, lr
    4616:	f080 813f 	bcs.w	4898 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    461a:	4962      	ldr	r1, [pc, #392]	; (47a4 <usb_isr+0x9b8>)
    461c:	780d      	ldrb	r5, [r1, #0]
    461e:	2840      	cmp	r0, #64	; 0x40
    4620:	4684      	mov	ip, r0
    4622:	f045 0e02 	orr.w	lr, r5, #2
    4626:	bf28      	it	cs
    4628:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    462c:	eb04 030c 	add.w	r3, r4, ip
    4630:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    4634:	9302      	str	r3, [sp, #8]
    4636:	2301      	movs	r3, #1
    4638:	6054      	str	r4, [r2, #4]
    463a:	ebcc 0000 	rsb	r0, ip, r0
    463e:	ea4f 480c 	mov.w	r8, ip, lsl #16
    4642:	2200      	movs	r2, #0
    4644:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4646:	24c8      	movs	r4, #200	; 0xc8
    4648:	e65e      	b.n	4308 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    464a:	4c55      	ldr	r4, [pc, #340]	; (47a0 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    464c:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    4650:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    4652:	7062      	strb	r2, [r4, #1]
    4654:	e7dd      	b.n	4612 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4656:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    465a:	f47f af7c 	bne.w	4556 <usb_isr+0x76a>
    465e:	2301      	movs	r3, #1
    4660:	2200      	movs	r2, #0
    4662:	9301      	str	r3, [sp, #4]
    4664:	e63d      	b.n	42e2 <usb_isr+0x4f6>
    4666:	f242 3221 	movw	r2, #8993	; 0x2321
    466a:	4291      	cmp	r1, r2
    466c:	d0f7      	beq.n	465e <usb_isr+0x872>
    466e:	e772      	b.n	4556 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4670:	886a      	ldrh	r2, [r5, #2]
    4672:	2a00      	cmp	r2, #0
    4674:	f47f af6f 	bne.w	4556 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    4678:	483a      	ldr	r0, [pc, #232]	; (4764 <usb_isr+0x978>)
    467a:	f8cd e004 	str.w	lr, [sp, #4]
    467e:	0089      	lsls	r1, r1, #2
    4680:	4408      	add	r0, r1
    4682:	7801      	ldrb	r1, [r0, #0]
    4684:	f021 0102 	bic.w	r1, r1, #2
    4688:	7001      	strb	r1, [r0, #0]
    468a:	e62a      	b.n	42e2 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    468c:	f000 f982 	bl	4994 <usb_malloc>
				if (p) {
    4690:	2800      	cmp	r0, #0
    4692:	f000 80ef 	beq.w	4874 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    4696:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4698:	4a3d      	ldr	r2, [pc, #244]	; (4790 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    469a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    469e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    46a2:	f000 f977 	bl	4994 <usb_malloc>
				if (p) {
    46a6:	2800      	cmp	r0, #0
    46a8:	f000 80de 	beq.w	4868 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    46ac:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    46ae:	4a37      	ldr	r2, [pc, #220]	; (478c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    46b0:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    46b4:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    46b8:	e738      	b.n	452c <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    46ba:	f000 f96b 	bl	4994 <usb_malloc>
				if (p) {
    46be:	2800      	cmp	r0, #0
    46c0:	f000 80c0 	beq.w	4844 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    46c4:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    46c6:	4a32      	ldr	r2, [pc, #200]	; (4790 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    46c8:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    46cc:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    46d0:	f000 f960 	bl	4994 <usb_malloc>
				if (p) {
    46d4:	2800      	cmp	r0, #0
    46d6:	f000 80af 	beq.w	4838 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    46da:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    46dc:	4a2b      	ldr	r2, [pc, #172]	; (478c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    46de:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    46e2:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    46e6:	e708      	b.n	44fa <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    46e8:	f000 f954 	bl	4994 <usb_malloc>
				if (p) {
    46ec:	2800      	cmp	r0, #0
    46ee:	f000 80cd 	beq.w	488c <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    46f2:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    46f4:	4a26      	ldr	r2, [pc, #152]	; (4790 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    46f6:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    46fa:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    46fe:	f000 f949 	bl	4994 <usb_malloc>
				if (p) {
    4702:	2800      	cmp	r0, #0
    4704:	f000 80bc 	beq.w	4880 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    4708:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    470a:	4a20      	ldr	r2, [pc, #128]	; (478c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    470c:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4710:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    4714:	e6e3      	b.n	44de <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    4716:	f000 f93d 	bl	4994 <usb_malloc>
				if (p) {
    471a:	2800      	cmp	r0, #0
    471c:	f000 809e 	beq.w	485c <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    4720:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4722:	4a1b      	ldr	r2, [pc, #108]	; (4790 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    4724:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4728:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    472c:	f000 f932 	bl	4994 <usb_malloc>
				if (p) {
    4730:	2800      	cmp	r0, #0
    4732:	f000 808d 	beq.w	4850 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    4736:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4738:	4a14      	ldr	r2, [pc, #80]	; (478c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    473a:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    473e:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    4742:	e6e7      	b.n	4514 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    4744:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    4746:	3808      	subs	r0, #8
    4748:	f000 f944 	bl	49d4 <usb_free>
    474c:	e504      	b.n	4158 <usb_isr+0x36c>
    474e:	6b48      	ldr	r0, [r1, #52]	; 0x34
    4750:	3808      	subs	r0, #8
    4752:	f000 f93f 	bl	49d4 <usb_free>
    4756:	e4f9      	b.n	414c <usb_isr+0x360>
    4758:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    475a:	3808      	subs	r0, #8
    475c:	f000 f93a 	bl	49d4 <usb_free>
    4760:	e4ee      	b.n	4140 <usb_isr+0x354>
    4762:	bf00      	nop
    4764:	400720c0 	.word	0x400720c0
    4768:	40072080 	.word	0x40072080
    476c:	000078f8 	.word	0x000078f8
    4770:	400720c4 	.word	0x400720c4
    4774:	1fff95c1 	.word	0x1fff95c1
    4778:	400720c8 	.word	0x400720c8
    477c:	400720cc 	.word	0x400720cc
    4780:	400720d0 	.word	0x400720d0
    4784:	1fff8000 	.word	0x1fff8000
    4788:	40072094 	.word	0x40072094
    478c:	004000c8 	.word	0x004000c8
    4790:	00400088 	.word	0x00400088
    4794:	1fff9555 	.word	0x1fff9555
    4798:	000078fc 	.word	0x000078fc
    479c:	1fff95cc 	.word	0x1fff95cc
    47a0:	1fff95c4 	.word	0x1fff95c4
    47a4:	1fff95c0 	.word	0x1fff95c0
    47a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    47aa:	3808      	subs	r0, #8
    47ac:	f000 f912 	bl	49d4 <usb_free>
    47b0:	e4c0      	b.n	4134 <usb_isr+0x348>
    47b2:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    47b4:	3808      	subs	r0, #8
    47b6:	f000 f90d 	bl	49d4 <usb_free>
    47ba:	e4fd      	b.n	41b8 <usb_isr+0x3cc>
    47bc:	6f48      	ldr	r0, [r1, #116]	; 0x74
    47be:	3808      	subs	r0, #8
    47c0:	f000 f908 	bl	49d4 <usb_free>
    47c4:	e4f2      	b.n	41ac <usb_isr+0x3c0>
    47c6:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    47c8:	3808      	subs	r0, #8
    47ca:	f000 f903 	bl	49d4 <usb_free>
    47ce:	e4e7      	b.n	41a0 <usb_isr+0x3b4>
    47d0:	6e48      	ldr	r0, [r1, #100]	; 0x64
    47d2:	3808      	subs	r0, #8
    47d4:	f000 f8fe 	bl	49d4 <usb_free>
    47d8:	e4dc      	b.n	4194 <usb_isr+0x3a8>
    47da:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    47dc:	3808      	subs	r0, #8
    47de:	f000 f8f9 	bl	49d4 <usb_free>
    47e2:	e4d1      	b.n	4188 <usb_isr+0x39c>
    47e4:	6d48      	ldr	r0, [r1, #84]	; 0x54
    47e6:	3808      	subs	r0, #8
    47e8:	f000 f8f4 	bl	49d4 <usb_free>
    47ec:	e4c6      	b.n	417c <usb_isr+0x390>
    47ee:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    47f0:	3808      	subs	r0, #8
    47f2:	f000 f8ef 	bl	49d4 <usb_free>
    47f6:	e4bb      	b.n	4170 <usb_isr+0x384>
    47f8:	6c48      	ldr	r0, [r1, #68]	; 0x44
    47fa:	3808      	subs	r0, #8
    47fc:	f000 f8ea 	bl	49d4 <usb_free>
    4800:	e4b0      	b.n	4164 <usb_isr+0x378>
    4802:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    4806:	3808      	subs	r0, #8
    4808:	f000 f8e4 	bl	49d4 <usb_free>
    480c:	e4ec      	b.n	41e8 <usb_isr+0x3fc>
    480e:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    4812:	3808      	subs	r0, #8
    4814:	f000 f8de 	bl	49d4 <usb_free>
    4818:	e4e0      	b.n	41dc <usb_isr+0x3f0>
    481a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    481e:	3808      	subs	r0, #8
    4820:	f000 f8d8 	bl	49d4 <usb_free>
    4824:	e4d4      	b.n	41d0 <usb_isr+0x3e4>
    4826:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    482a:	3808      	subs	r0, #8
    482c:	f000 f8d2 	bl	49d4 <usb_free>
    4830:	e4c8      	b.n	41c4 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    4832:	f04f 0e02 	mov.w	lr, #2
    4836:	e6ec      	b.n	4612 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4838:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    483a:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    483e:	3201      	adds	r2, #1
    4840:	702a      	strb	r2, [r5, #0]
    4842:	e65a      	b.n	44fa <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4844:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4846:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    484a:	3201      	adds	r2, #1
    484c:	702a      	strb	r2, [r5, #0]
    484e:	e73f      	b.n	46d0 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4850:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4852:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    4856:	3201      	adds	r2, #1
    4858:	702a      	strb	r2, [r5, #0]
    485a:	e65b      	b.n	4514 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    485c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    485e:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    4862:	3201      	adds	r2, #1
    4864:	702a      	strb	r2, [r5, #0]
    4866:	e761      	b.n	472c <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4868:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    486a:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    486e:	3201      	adds	r2, #1
    4870:	702a      	strb	r2, [r5, #0]
    4872:	e65b      	b.n	452c <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4874:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4876:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    487a:	3201      	adds	r2, #1
    487c:	702a      	strb	r2, [r5, #0]
    487e:	e710      	b.n	46a2 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4880:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4882:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    4886:	3201      	adds	r2, #1
    4888:	702a      	strb	r2, [r5, #0]
    488a:	e628      	b.n	44de <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    488c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    488e:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    4892:	3201      	adds	r2, #1
    4894:	702a      	strb	r2, [r5, #0]
    4896:	e732      	b.n	46fe <usb_isr+0x912>
    4898:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    489c:	46f4      	mov	ip, lr
    489e:	bf28      	it	cs
    48a0:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    48a4:	eb04 030c 	add.w	r3, r4, ip
    48a8:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    48aa:	2301      	movs	r3, #1
    48ac:	ebcc 000e 	rsb	r0, ip, lr
    48b0:	ea4f 480c 	mov.w	r8, ip, lsl #16
    48b4:	2200      	movs	r2, #0
    48b6:	9301      	str	r3, [sp, #4]
    48b8:	e518      	b.n	42ec <usb_isr+0x500>
    48ba:	bf00      	nop

000048bc <usb_init>:
}



void usb_init(void)
{
    48bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    48be:	f000 fd9b 	bl	53f8 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48c2:	4b29      	ldr	r3, [pc, #164]	; (4968 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    48c4:	4829      	ldr	r0, [pc, #164]	; (496c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    48c6:	4c2a      	ldr	r4, [pc, #168]	; (4970 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    48c8:	4f2a      	ldr	r7, [pc, #168]	; (4974 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    48ca:	4d2b      	ldr	r5, [pc, #172]	; (4978 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    48cc:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 498c <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    48d0:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 4990 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    48d4:	4e29      	ldr	r6, [pc, #164]	; (497c <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48d6:	2200      	movs	r2, #0
    48d8:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    48da:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48dc:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    48de:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48e0:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    48e2:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48e4:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    48e6:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48e8:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    48ea:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48ec:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    48ee:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48f0:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    48f2:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48f4:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    48f6:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48f8:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    48fa:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    48fc:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    48fe:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4900:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    4902:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4904:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    4906:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4908:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    490a:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    490c:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    490e:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4910:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    4912:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4914:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    4916:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    491c:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    491e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4922:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    4926:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4928:	f3c3 2107 	ubfx	r1, r3, #8, #8
    492c:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    492e:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    4932:	4913      	ldr	r1, [pc, #76]	; (4980 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4934:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4936:	0e1b      	lsrs	r3, r3, #24
    4938:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    493a:	23ff      	movs	r3, #255	; 0xff
    493c:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4940:	4d10      	ldr	r5, [pc, #64]	; (4984 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    4942:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4946:	4810      	ldr	r0, [pc, #64]	; (4988 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    4948:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    494a:	2301      	movs	r3, #1
    494c:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    494e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4952:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4954:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4958:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    495a:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    495e:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4960:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4962:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    4966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4968:	1fff8000 	.word	0x1fff8000
    496c:	40048034 	.word	0x40048034
    4970:	4007209c 	.word	0x4007209c
    4974:	400720b0 	.word	0x400720b0
    4978:	400720b4 	.word	0x400720b4
    497c:	40072094 	.word	0x40072094
    4980:	40072010 	.word	0x40072010
    4984:	e000e449 	.word	0xe000e449
    4988:	e000e108 	.word	0xe000e108
    498c:	40072080 	.word	0x40072080
    4990:	40072088 	.word	0x40072088

00004994 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    4994:	b672      	cpsid	i
	avail = usb_buffer_available;
    4996:	480d      	ldr	r0, [pc, #52]	; (49cc <usb_malloc+0x38>)
    4998:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    499a:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    499e:	2b0b      	cmp	r3, #11
    49a0:	dc10      	bgt.n	49c4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    49a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    49a6:	40d9      	lsrs	r1, r3
    49a8:	ea22 0201 	bic.w	r2, r2, r1
    49ac:	6002      	str	r2, [r0, #0]
	__enable_irq();
    49ae:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    49b0:	4807      	ldr	r0, [pc, #28]	; (49d0 <usb_malloc+0x3c>)
    49b2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    49b6:	00db      	lsls	r3, r3, #3
    49b8:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    49ba:	2100      	movs	r1, #0
    49bc:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    49be:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    49c0:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    49c2:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    49c4:	b662      	cpsie	i
		return NULL;
    49c6:	2000      	movs	r0, #0
    49c8:	4770      	bx	lr
    49ca:	bf00      	nop
    49cc:	1fff8770 	.word	0x1fff8770
    49d0:	1fff83bc 	.word	0x1fff83bc

000049d4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    49d4:	4b0d      	ldr	r3, [pc, #52]	; (4a0c <usb_free+0x38>)
    49d6:	4a0e      	ldr	r2, [pc, #56]	; (4a10 <usb_free+0x3c>)
    49d8:	1ac3      	subs	r3, r0, r3
    49da:	fba2 2303 	umull	r2, r3, r2, r3
    49de:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    49e0:	2b0b      	cmp	r3, #11
    49e2:	d80c      	bhi.n	49fe <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    49e4:	4a0b      	ldr	r2, [pc, #44]	; (4a14 <usb_free+0x40>)
    49e6:	7812      	ldrb	r2, [r2, #0]
    49e8:	b952      	cbnz	r2, 4a00 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    49ea:	b672      	cpsid	i
	usb_buffer_available |= mask;
    49ec:	480a      	ldr	r0, [pc, #40]	; (4a18 <usb_free+0x44>)
    49ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    49f2:	6802      	ldr	r2, [r0, #0]
    49f4:	fa21 f303 	lsr.w	r3, r1, r3
    49f8:	431a      	orrs	r2, r3
    49fa:	6002      	str	r2, [r0, #0]
	__enable_irq();
    49fc:	b662      	cpsie	i
    49fe:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    4a00:	4a06      	ldr	r2, [pc, #24]	; (4a1c <usb_free+0x48>)
    4a02:	7812      	ldrb	r2, [r2, #0]
    4a04:	2a00      	cmp	r2, #0
    4a06:	d0f0      	beq.n	49ea <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    4a08:	f7ff b94a 	b.w	3ca0 <usb_rx_memory>
    4a0c:	1fff83bc 	.word	0x1fff83bc
    4a10:	38e38e39 	.word	0x38e38e39
    4a14:	1fff95c1 	.word	0x1fff95c1
    4a18:	1fff8770 	.word	0x1fff8770
    4a1c:	1fff95cc 	.word	0x1fff95cc

00004a20 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    4a20:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    4a22:	4d0f      	ldr	r5, [pc, #60]	; (4a60 <usb_serial_getchar+0x40>)
    4a24:	6828      	ldr	r0, [r5, #0]
    4a26:	b178      	cbz	r0, 4a48 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    4a28:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    4a2a:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    4a2c:	18c1      	adds	r1, r0, r3
    4a2e:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    4a30:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    4a32:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    4a34:	d202      	bcs.n	4a3c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    4a36:	8043      	strh	r3, [r0, #2]
	}
	return c;
    4a38:	4620      	mov	r0, r4
}
    4a3a:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    4a3c:	f7ff ffca 	bl	49d4 <usb_free>
		rx_packet = NULL;
    4a40:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    4a42:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    4a44:	602b      	str	r3, [r5, #0]
    4a46:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    4a48:	4b06      	ldr	r3, [pc, #24]	; (4a64 <usb_serial_getchar+0x44>)
    4a4a:	781b      	ldrb	r3, [r3, #0]
    4a4c:	b12b      	cbz	r3, 4a5a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    4a4e:	2003      	movs	r0, #3
    4a50:	f7ff f8f2 	bl	3c38 <usb_rx>
    4a54:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    4a56:	2800      	cmp	r0, #0
    4a58:	d1e6      	bne.n	4a28 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    4a5a:	f04f 30ff 	mov.w	r0, #4294967295
    4a5e:	bd38      	pop	{r3, r4, r5, pc}
    4a60:	1fff95e0 	.word	0x1fff95e0
    4a64:	1fff95cc 	.word	0x1fff95cc

00004a68 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    4a68:	b510      	push	{r4, lr}
	if (!rx_packet) {
    4a6a:	4c09      	ldr	r4, [pc, #36]	; (4a90 <usb_serial_peekchar+0x28>)
    4a6c:	6820      	ldr	r0, [r4, #0]
    4a6e:	b118      	cbz	r0, 4a78 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    4a70:	8843      	ldrh	r3, [r0, #2]
    4a72:	4418      	add	r0, r3
    4a74:	7a00      	ldrb	r0, [r0, #8]
}
    4a76:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    4a78:	4b06      	ldr	r3, [pc, #24]	; (4a94 <usb_serial_peekchar+0x2c>)
    4a7a:	781b      	ldrb	r3, [r3, #0]
    4a7c:	b12b      	cbz	r3, 4a8a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    4a7e:	2003      	movs	r0, #3
    4a80:	f7ff f8da 	bl	3c38 <usb_rx>
    4a84:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    4a86:	2800      	cmp	r0, #0
    4a88:	d1f2      	bne.n	4a70 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    4a8a:	f04f 30ff 	mov.w	r0, #4294967295
    4a8e:	bd10      	pop	{r4, pc}
    4a90:	1fff95e0 	.word	0x1fff95e0
    4a94:	1fff95cc 	.word	0x1fff95cc

00004a98 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    4a98:	4b04      	ldr	r3, [pc, #16]	; (4aac <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    4a9a:	4a05      	ldr	r2, [pc, #20]	; (4ab0 <usb_serial_available+0x18>)
    4a9c:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    4a9e:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    4aa0:	b11b      	cbz	r3, 4aaa <usb_serial_available+0x12>
    4aa2:	881a      	ldrh	r2, [r3, #0]
    4aa4:	885b      	ldrh	r3, [r3, #2]
    4aa6:	1ad3      	subs	r3, r2, r3
    4aa8:	4418      	add	r0, r3
	return count;
}
    4aaa:	4770      	bx	lr
    4aac:	1fff95e0 	.word	0x1fff95e0
    4ab0:	1fff9794 	.word	0x1fff9794

00004ab4 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    4ab4:	4b0b      	ldr	r3, [pc, #44]	; (4ae4 <usb_serial_flush_input+0x30>)
    4ab6:	781b      	ldrb	r3, [r3, #0]
    4ab8:	b19b      	cbz	r3, 4ae2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    4aba:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    4abc:	4c0a      	ldr	r4, [pc, #40]	; (4ae8 <usb_serial_flush_input+0x34>)
    4abe:	6820      	ldr	r0, [r4, #0]
    4ac0:	b148      	cbz	r0, 4ad6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    4ac2:	f7ff ff87 	bl	49d4 <usb_free>
		rx_packet = NULL;
    4ac6:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    4ac8:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    4aca:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    4acc:	f7ff f8b4 	bl	3c38 <usb_rx>
		if (!rx) break;
    4ad0:	b130      	cbz	r0, 4ae0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    4ad2:	f7ff ff7f 	bl	49d4 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    4ad6:	2003      	movs	r0, #3
    4ad8:	f7ff f8ae 	bl	3c38 <usb_rx>
		if (!rx) break;
    4adc:	2800      	cmp	r0, #0
    4ade:	d1f8      	bne.n	4ad2 <usb_serial_flush_input+0x1e>
    4ae0:	bd10      	pop	{r4, pc}
    4ae2:	4770      	bx	lr
    4ae4:	1fff95cc 	.word	0x1fff95cc
    4ae8:	1fff95e0 	.word	0x1fff95e0

00004aec <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    4aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    4af0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 4bec <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    4af4:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    4af6:	2201      	movs	r2, #1
    4af8:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    4afc:	9101      	str	r1, [sp, #4]
    4afe:	b369      	cbz	r1, 4b5c <usb_serial_write+0x70>
    4b00:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4bf0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    4b04:	4f36      	ldr	r7, [pc, #216]	; (4be0 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    4b06:	9e01      	ldr	r6, [sp, #4]
    4b08:	4683      	mov	fp, r0
		if (!tx_packet) {
    4b0a:	f8d8 0000 	ldr.w	r0, [r8]
    4b0e:	b3b0      	cbz	r0, 4b7e <usb_serial_write+0x92>
    4b10:	4d34      	ldr	r5, [pc, #208]	; (4be4 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    4b12:	8844      	ldrh	r4, [r0, #2]
    4b14:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    4b18:	42b1      	cmp	r1, r6
    4b1a:	bf28      	it	cs
    4b1c:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    4b1e:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    4b22:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    4b24:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    4b28:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    4b2a:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    4b2c:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    4b30:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    4b34:	b151      	cbz	r1, 4b4c <usb_serial_write+0x60>
    4b36:	3c01      	subs	r4, #1
    4b38:	4422      	add	r2, r4
    4b3a:	4459      	add	r1, fp
    4b3c:	f81b 4b01 	ldrb.w	r4, [fp], #1
    4b40:	f802 4f01 	strb.w	r4, [r2, #1]!
    4b44:	458b      	cmp	fp, r1
    4b46:	d1f9      	bne.n	4b3c <usb_serial_write+0x50>
    4b48:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    4b4c:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    4b50:	d80b      	bhi.n	4b6a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    4b52:	4a25      	ldr	r2, [pc, #148]	; (4be8 <usb_serial_write+0xfc>)
    4b54:	2105      	movs	r1, #5
    4b56:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    4b58:	2e00      	cmp	r6, #0
    4b5a:	d1d6      	bne.n	4b0a <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    4b5c:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    4b5e:	2300      	movs	r3, #0
    4b60:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    4b64:	b003      	add	sp, #12
    4b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    4b6a:	2240      	movs	r2, #64	; 0x40
    4b6c:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4b6e:	4601      	mov	r1, r0
    4b70:	2004      	movs	r0, #4
    4b72:	f7ff f8f9 	bl	3d68 <usb_tx>
			tx_packet = NULL;
    4b76:	2200      	movs	r2, #0
    4b78:	f8c8 2000 	str.w	r2, [r8]
    4b7c:	e7e9      	b.n	4b52 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    4b7e:	783a      	ldrb	r2, [r7, #0]
    4b80:	b32a      	cbz	r2, 4bce <usb_serial_write+0xe2>
    4b82:	4d18      	ldr	r5, [pc, #96]	; (4be4 <usb_serial_write+0xf8>)
    4b84:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    4b88:	f04f 0a01 	mov.w	sl, #1
    4b8c:	e007      	b.n	4b9e <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    4b8e:	3c01      	subs	r4, #1
    4b90:	d016      	beq.n	4bc0 <usb_serial_write+0xd4>
    4b92:	782a      	ldrb	r2, [r5, #0]
    4b94:	b9a2      	cbnz	r2, 4bc0 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    4b96:	f000 fa13 	bl	4fc0 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    4b9a:	783a      	ldrb	r2, [r7, #0]
    4b9c:	b1ba      	cbz	r2, 4bce <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    4b9e:	2004      	movs	r0, #4
    4ba0:	f7ff f868 	bl	3c74 <usb_tx_packet_count>
    4ba4:	2807      	cmp	r0, #7
    4ba6:	d8f2      	bhi.n	4b8e <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    4ba8:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    4bac:	f7ff fef2 	bl	4994 <usb_malloc>
    4bb0:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    4bb4:	2800      	cmp	r0, #0
    4bb6:	d1ac      	bne.n	4b12 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    4bb8:	4b0c      	ldr	r3, [pc, #48]	; (4bec <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    4bba:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    4bbc:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    4bbe:	d1e8      	bne.n	4b92 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    4bc0:	2301      	movs	r3, #1
					return -1;
    4bc2:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    4bc6:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    4bc8:	b003      	add	sp, #12
    4bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    4bce:	2300      	movs	r3, #0
					return -1;
    4bd0:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    4bd4:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    4bd8:	b003      	add	sp, #12
    4bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bde:	bf00      	nop
    4be0:	1fff95cc 	.word	0x1fff95cc
    4be4:	1fff95dc 	.word	0x1fff95dc
    4be8:	1fff95d4 	.word	0x1fff95d4
    4bec:	1fff95d5 	.word	0x1fff95d5
    4bf0:	1fff95d8 	.word	0x1fff95d8

00004bf4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4bf4:	b500      	push	{lr}
    4bf6:	b083      	sub	sp, #12
    4bf8:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    4bfa:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4bfc:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    4c00:	4618      	mov	r0, r3
    4c02:	f7ff ff73 	bl	4aec <usb_serial_write>
}
    4c06:	b003      	add	sp, #12
    4c08:	f85d fb04 	ldr.w	pc, [sp], #4

00004c0c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    4c0c:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    4c0e:	4d0e      	ldr	r5, [pc, #56]	; (4c48 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    4c10:	4c0e      	ldr	r4, [pc, #56]	; (4c4c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    4c12:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    4c14:	2301      	movs	r3, #1
    4c16:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    4c18:	b128      	cbz	r0, 4c26 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    4c1a:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    4c1c:	2300      	movs	r3, #0
    4c1e:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    4c20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    4c24:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    4c26:	4b0a      	ldr	r3, [pc, #40]	; (4c50 <usb_serial_write_buffer_free+0x44>)
    4c28:	781b      	ldrb	r3, [r3, #0]
    4c2a:	b913      	cbnz	r3, 4c32 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    4c2c:	2000      	movs	r0, #0
    4c2e:	7020      	strb	r0, [r4, #0]
			return 0;
    4c30:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    4c32:	2004      	movs	r0, #4
    4c34:	f7ff f81e 	bl	3c74 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    4c38:	2807      	cmp	r0, #7
    4c3a:	d8f7      	bhi.n	4c2c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    4c3c:	f7ff feaa 	bl	4994 <usb_malloc>
    4c40:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    4c42:	2800      	cmp	r0, #0
    4c44:	d1e9      	bne.n	4c1a <usb_serial_write_buffer_free+0xe>
    4c46:	e7f1      	b.n	4c2c <usb_serial_write_buffer_free+0x20>
    4c48:	1fff95d8 	.word	0x1fff95d8
    4c4c:	1fff95d5 	.word	0x1fff95d5
    4c50:	1fff95cc 	.word	0x1fff95cc

00004c54 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    4c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    4c56:	4b11      	ldr	r3, [pc, #68]	; (4c9c <usb_serial_flush_output+0x48>)
    4c58:	781b      	ldrb	r3, [r3, #0]
    4c5a:	b18b      	cbz	r3, 4c80 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    4c5c:	4e10      	ldr	r6, [pc, #64]	; (4ca0 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    4c5e:	4d11      	ldr	r5, [pc, #68]	; (4ca4 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    4c60:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    4c62:	2701      	movs	r7, #1
    4c64:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    4c66:	b164      	cbz	r4, 4c82 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    4c68:	4a0f      	ldr	r2, [pc, #60]	; (4ca8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    4c6a:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    4c6c:	2700      	movs	r7, #0
    4c6e:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4c70:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    4c72:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4c74:	2004      	movs	r0, #4
    4c76:	f7ff f877 	bl	3d68 <usb_tx>
		tx_packet = NULL;
    4c7a:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    4c7c:	2300      	movs	r3, #0
    4c7e:	702b      	strb	r3, [r5, #0]
    4c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    4c82:	f7ff fe87 	bl	4994 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    4c86:	4b08      	ldr	r3, [pc, #32]	; (4ca8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    4c88:	b128      	cbz	r0, 4c96 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    4c8a:	4601      	mov	r1, r0
    4c8c:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    4c8e:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    4c90:	f7ff f86a 	bl	3d68 <usb_tx>
    4c94:	e7f2      	b.n	4c7c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    4c96:	701f      	strb	r7, [r3, #0]
    4c98:	e7f0      	b.n	4c7c <usb_serial_flush_output+0x28>
    4c9a:	bf00      	nop
    4c9c:	1fff95cc 	.word	0x1fff95cc
    4ca0:	1fff95d8 	.word	0x1fff95d8
    4ca4:	1fff95d5 	.word	0x1fff95d5
    4ca8:	1fff95d4 	.word	0x1fff95d4

00004cac <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    4cac:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    4cae:	4b0e      	ldr	r3, [pc, #56]	; (4ce8 <usb_serial_flush_callback+0x3c>)
    4cb0:	781b      	ldrb	r3, [r3, #0]
    4cb2:	b973      	cbnz	r3, 4cd2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    4cb4:	4c0d      	ldr	r4, [pc, #52]	; (4cec <usb_serial_flush_callback+0x40>)
    4cb6:	6821      	ldr	r1, [r4, #0]
    4cb8:	b161      	cbz	r1, 4cd4 <usb_serial_flush_callback+0x28>
    4cba:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    4cbe:	884b      	ldrh	r3, [r1, #2]
    4cc0:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    4cc2:	2004      	movs	r0, #4
    4cc4:	f7ff f850 	bl	3d68 <usb_tx>
		tx_packet = NULL;
    4cc8:	6025      	str	r5, [r4, #0]
    4cca:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    4ccc:	4b08      	ldr	r3, [pc, #32]	; (4cf0 <usb_serial_flush_callback+0x44>)
    4cce:	2201      	movs	r2, #1
    4cd0:	701a      	strb	r2, [r3, #0]
    4cd2:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    4cd4:	f7ff fe5e 	bl	4994 <usb_malloc>
		if (tx) {
    4cd8:	2800      	cmp	r0, #0
    4cda:	d0f7      	beq.n	4ccc <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    4cdc:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    4cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    4ce2:	2004      	movs	r0, #4
    4ce4:	f7ff b840 	b.w	3d68 <usb_tx>
    4ce8:	1fff95d5 	.word	0x1fff95d5
    4cec:	1fff95d8 	.word	0x1fff95d8
    4cf0:	1fff95d4 	.word	0x1fff95d4

00004cf4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4cf4:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4cf6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4cfa:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4cfc:	7f43      	ldrb	r3, [r0, #29]
    4cfe:	b933      	cbnz	r3, 4d0e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4d00:	7f01      	ldrb	r1, [r0, #28]
    4d02:	2901      	cmp	r1, #1
    4d04:	d007      	beq.n	4d16 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4d06:	2903      	cmp	r1, #3
    4d08:	d00f      	beq.n	4d2a <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4d0a:	2301      	movs	r3, #1
    4d0c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4d0e:	b902      	cbnz	r2, 4d12 <EventResponder::triggerEventNotImmediate()+0x1e>
    4d10:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    4d12:	bc10      	pop	{r4}
    4d14:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4d16:	4c12      	ldr	r4, [pc, #72]	; (4d60 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4d18:	6821      	ldr	r1, [r4, #0]
    4d1a:	b1a1      	cbz	r1, 4d46 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4d1c:	4911      	ldr	r1, [pc, #68]	; (4d64 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4d1e:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    4d20:	680b      	ldr	r3, [r1, #0]
    4d22:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4d24:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4d26:	6158      	str	r0, [r3, #20]
    4d28:	e7ef      	b.n	4d0a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4d2a:	4c0f      	ldr	r4, [pc, #60]	; (4d68 <EventResponder::triggerEventNotImmediate()+0x74>)
    4d2c:	6821      	ldr	r1, [r4, #0]
    4d2e:	b181      	cbz	r1, 4d52 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4d30:	490e      	ldr	r1, [pc, #56]	; (4d6c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4d32:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4d34:	680b      	ldr	r3, [r1, #0]
    4d36:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4d38:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4d3a:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4d3c:	4b0c      	ldr	r3, [pc, #48]	; (4d70 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4d3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4d42:	6019      	str	r1, [r3, #0]
    4d44:	e7e1      	b.n	4d0a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4d46:	4b07      	ldr	r3, [pc, #28]	; (4d64 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4d48:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    4d4a:	6181      	str	r1, [r0, #24]
				firstYield = this;
    4d4c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    4d4e:	6018      	str	r0, [r3, #0]
    4d50:	e7db      	b.n	4d0a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4d52:	4b06      	ldr	r3, [pc, #24]	; (4d6c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4d54:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    4d56:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    4d58:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    4d5a:	6018      	str	r0, [r3, #0]
    4d5c:	e7ee      	b.n	4d3c <EventResponder::triggerEventNotImmediate()+0x48>
    4d5e:	bf00      	nop
    4d60:	1fff95f8 	.word	0x1fff95f8
    4d64:	1fff95f4 	.word	0x1fff95f4
    4d68:	1fff95e8 	.word	0x1fff95e8
    4d6c:	1fff95ec 	.word	0x1fff95ec
    4d70:	e000ed04 	.word	0xe000ed04

00004d74 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4d74:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4d76:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4d78:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4d7a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4d7c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4d7e:	d002      	beq.n	4d86 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4d80:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4d82:	f7ff bfb7 	b.w	4cf4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4d86:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4d88:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4d8a:	4718      	bx	r3

00004d8c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4d8c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4d8e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4d92:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4d94:	4c0c      	ldr	r4, [pc, #48]	; (4dc8 <EventResponder::runFromInterrupt()+0x3c>)
    4d96:	6820      	ldr	r0, [r4, #0]
		if (first) {
    4d98:	b180      	cbz	r0, 4dbc <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4d9a:	4e0c      	ldr	r6, [pc, #48]	; (4dcc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4d9c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4d9e:	6943      	ldr	r3, [r0, #20]
    4da0:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    4da2:	b173      	cbz	r3, 4dc2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4da4:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4da6:	b902      	cbnz	r2, 4daa <EventResponder::runFromInterrupt()+0x1e>
    4da8:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4daa:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4dac:	6883      	ldr	r3, [r0, #8]
    4dae:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4db0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4db4:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4db6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    4db8:	2800      	cmp	r0, #0
    4dba:	d1f0      	bne.n	4d9e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4dbc:	b902      	cbnz	r2, 4dc0 <EventResponder::runFromInterrupt()+0x34>
    4dbe:	b662      	cpsie	i
    4dc0:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4dc2:	6033      	str	r3, [r6, #0]
    4dc4:	e7ef      	b.n	4da6 <EventResponder::runFromInterrupt()+0x1a>
    4dc6:	bf00      	nop
    4dc8:	1fff95e8 	.word	0x1fff95e8
    4dcc:	1fff95ec 	.word	0x1fff95ec

00004dd0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4dd0:	f7ff bfdc 	b.w	4d8c <EventResponder::runFromInterrupt()>

00004dd4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4dd4:	4a18      	ldr	r2, [pc, #96]	; (4e38 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4dd6:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    4dd8:	6814      	ldr	r4, [r2, #0]
    4dda:	2c00      	cmp	r4, #0
    4ddc:	d027      	beq.n	4e2e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4dde:	6803      	ldr	r3, [r0, #0]
    4de0:	6821      	ldr	r1, [r4, #0]
    4de2:	428b      	cmp	r3, r1
    4de4:	d20e      	bcs.n	4e04 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4de6:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4de8:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4dea:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    4dec:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4dee:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4df0:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4df2:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4df4:	2302      	movs	r3, #2
    4df6:	7503      	strb	r3, [r0, #20]
}
    4df8:	bc30      	pop	{r4, r5}
    4dfa:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4dfc:	6811      	ldr	r1, [r2, #0]
    4dfe:	428b      	cmp	r3, r1
    4e00:	4614      	mov	r4, r2
    4e02:	d308      	bcc.n	4e16 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4e04:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4e06:	1a5b      	subs	r3, r3, r1
    4e08:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4e0a:	2a00      	cmp	r2, #0
    4e0c:	d1f6      	bne.n	4dfc <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4e0e:	6082      	str	r2, [r0, #8]
		_prev = timer;
    4e10:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    4e12:	60a0      	str	r0, [r4, #8]
    4e14:	e7ee      	b.n	4df4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4e16:	68d2      	ldr	r2, [r2, #12]
    4e18:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4e1a:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4e1c:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    4e1e:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4e20:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    4e22:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4e24:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4e26:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    4e28:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4e2a:	bc30      	pop	{r4, r5}
    4e2c:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4e2e:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    4e30:	60c4      	str	r4, [r0, #12]
		listActive = this;
    4e32:	6010      	str	r0, [r2, #0]
    4e34:	e7de      	b.n	4df4 <MillisTimer::addToActiveList()+0x20>
    4e36:	bf00      	nop
    4e38:	1fff95f0 	.word	0x1fff95f0

00004e3c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4e3e:	4e22      	ldr	r6, [pc, #136]	; (4ec8 <MillisTimer::runFromTimer()+0x8c>)
    4e40:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    4e42:	b32c      	cbz	r4, 4e90 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4e44:	6823      	ldr	r3, [r4, #0]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d13a      	bne.n	4ec0 <MillisTimer::runFromTimer()+0x84>
    4e4a:	4f20      	ldr	r7, [pc, #128]	; (4ecc <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4e4c:	461d      	mov	r5, r3
    4e4e:	e004      	b.n	4e5a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4e50:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4e52:	b1ec      	cbz	r4, 4e90 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4e54:	6823      	ldr	r3, [r4, #0]
    4e56:	2b00      	cmp	r3, #0
    4e58:	d132      	bne.n	4ec0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4e5a:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4e5c:	b103      	cbz	r3, 4e60 <MillisTimer::runFromTimer()+0x24>
    4e5e:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4e60:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4e62:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4e64:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4e66:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4e68:	681b      	ldr	r3, [r3, #0]
    4e6a:	42bb      	cmp	r3, r7
    4e6c:	d121      	bne.n	4eb2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4e6e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4e70:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4e72:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4e74:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4e76:	d020      	beq.n	4eba <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4e78:	f7ff ff3c 	bl	4cf4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4e7c:	6863      	ldr	r3, [r4, #4]
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d0e6      	beq.n	4e50 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4e82:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    4e84:	4620      	mov	r0, r4
    4e86:	f7ff ffa5 	bl	4dd4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4e8a:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4e8c:	2c00      	cmp	r4, #0
    4e8e:	d1e1      	bne.n	4e54 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4e90:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    4e94:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4e96:	4a0e      	ldr	r2, [pc, #56]	; (4ed0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4e98:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4e9a:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4e9c:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4e9e:	b903      	cbnz	r3, 4ea2 <MillisTimer::runFromTimer()+0x66>
    4ea0:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4ea2:	b128      	cbz	r0, 4eb0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4ea4:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4ea6:	f7ff ff95 	bl	4dd4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4eaa:	4620      	mov	r0, r4
    4eac:	2800      	cmp	r0, #0
    4eae:	d1f9      	bne.n	4ea4 <MillisTimer::runFromTimer()+0x68>
    4eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4eb2:	4622      	mov	r2, r4
    4eb4:	2100      	movs	r1, #0
    4eb6:	4798      	blx	r3
    4eb8:	e7e0      	b.n	4e7c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4eba:	6883      	ldr	r3, [r0, #8]
    4ebc:	4798      	blx	r3
    4ebe:	e7dd      	b.n	4e7c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4ec0:	3b01      	subs	r3, #1
    4ec2:	6023      	str	r3, [r4, #0]
			break;
    4ec4:	e7e4      	b.n	4e90 <MillisTimer::runFromTimer()+0x54>
    4ec6:	bf00      	nop
    4ec8:	1fff95f0 	.word	0x1fff95f0
    4ecc:	00004d75 	.word	0x00004d75
    4ed0:	1fff9600 	.word	0x1fff9600

00004ed4 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4ed4:	4a02      	ldr	r2, [pc, #8]	; (4ee0 <systick_isr+0xc>)
    4ed6:	6813      	ldr	r3, [r2, #0]
    4ed8:	3301      	adds	r3, #1
    4eda:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4edc:	f7ff bfae 	b.w	4e3c <MillisTimer::runFromTimer()>
    4ee0:	1fff94e8 	.word	0x1fff94e8

00004ee4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4ee4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    4ee6:	f7fd fc05 	bl	26f4 <setup>
	while (1) {
		loop();
    4eea:	f7fd fd17 	bl	291c <loop>
		yield();
    4eee:	f000 f867 	bl	4fc0 <yield>
    4ef2:	e7fa      	b.n	4eea <main+0x6>

00004ef4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4ef4:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    4ef6:	4a06      	ldr	r2, [pc, #24]	; (4f10 <Print::println()+0x1c>)
	return write(buf, 2);
    4ef8:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4efa:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    4efc:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4efe:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4f00:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4f02:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    4f06:	2202      	movs	r2, #2
    4f08:	4798      	blx	r3
}
    4f0a:	b003      	add	sp, #12
    4f0c:	f85d fb04 	ldr.w	pc, [sp], #4
    4f10:	000078cc 	.word	0x000078cc

00004f14 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    4f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f16:	4607      	mov	r7, r0
    4f18:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    4f1a:	2a00      	cmp	r2, #0
    4f1c:	d033      	beq.n	4f86 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    4f1e:	2a01      	cmp	r2, #1
    4f20:	bf08      	it	eq
    4f22:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    4f24:	b351      	cbz	r1, 4f7c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    4f26:	2421      	movs	r4, #33	; 0x21
    4f28:	e000      	b.n	4f2c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    4f2a:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    4f2c:	fbb1 f5f2 	udiv	r5, r1, r2
    4f30:	fb02 1115 	mls	r1, r2, r5, r1
    4f34:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4f36:	2909      	cmp	r1, #9
    4f38:	f100 0130 	add.w	r1, r0, #48	; 0x30
    4f3c:	bf98      	it	ls
    4f3e:	b2c8      	uxtbls	r0, r1
    4f40:	a90a      	add	r1, sp, #40	; 0x28
    4f42:	bf88      	it	hi
    4f44:	3037      	addhi	r0, #55	; 0x37
    4f46:	4421      	add	r1, r4
    4f48:	bf88      	it	hi
    4f4a:	b2c0      	uxtbhi	r0, r0
    4f4c:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    4f50:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    4f52:	4629      	mov	r1, r5
    4f54:	2d00      	cmp	r5, #0
    4f56:	d1e8      	bne.n	4f2a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    4f58:	b133      	cbz	r3, 4f68 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    4f5a:	3c01      	subs	r4, #1
    4f5c:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    4f5e:	ab0a      	add	r3, sp, #40	; 0x28
    4f60:	4423      	add	r3, r4
    4f62:	222d      	movs	r2, #45	; 0x2d
    4f64:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    4f68:	683b      	ldr	r3, [r7, #0]
    4f6a:	aa01      	add	r2, sp, #4
    4f6c:	1911      	adds	r1, r2, r4
    4f6e:	685b      	ldr	r3, [r3, #4]
    4f70:	4638      	mov	r0, r7
    4f72:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    4f76:	4798      	blx	r3
}
    4f78:	b00b      	add	sp, #44	; 0x2c
    4f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    4f7c:	2230      	movs	r2, #48	; 0x30
    4f7e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    4f82:	2421      	movs	r4, #33	; 0x21
    4f84:	e7e8      	b.n	4f58 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    4f86:	6803      	ldr	r3, [r0, #0]
    4f88:	b2c9      	uxtb	r1, r1
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    4f8e:	b00b      	add	sp, #44	; 0x2c
    4f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f92:	bf00      	nop

00004f94 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    4f94:	f7ff bd8e 	b.w	4ab4 <usb_serial_flush_input>

00004f98 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    4f98:	f7ff bd66 	b.w	4a68 <usb_serial_peekchar>

00004f9c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    4f9c:	f7ff bd40 	b.w	4a20 <usb_serial_getchar>

00004fa0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4fa0:	f7ff bd7a 	b.w	4a98 <usb_serial_available>

00004fa4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4fa4:	f7ff be56 	b.w	4c54 <usb_serial_flush_output>

00004fa8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4fa8:	f7ff be30 	b.w	4c0c <usb_serial_write_buffer_free>

00004fac <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4fac:	4608      	mov	r0, r1
    4fae:	4611      	mov	r1, r2
    4fb0:	f7ff bd9c 	b.w	4aec <usb_serial_write>

00004fb4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4fb4:	4608      	mov	r0, r1
    4fb6:	f7ff be1d 	b.w	4bf4 <usb_serial_putchar>
    4fba:	bf00      	nop

00004fbc <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    4fbc:	4770      	bx	lr
    4fbe:	bf00      	nop

00004fc0 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4fc0:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    4fc2:	4c22      	ldr	r4, [pc, #136]	; (504c <yield+0x8c>)
    4fc4:	7823      	ldrb	r3, [r4, #0]
    4fc6:	b103      	cbz	r3, 4fca <yield+0xa>
    4fc8:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    4fca:	2301      	movs	r3, #1
    4fcc:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4fce:	f7ff fd63 	bl	4a98 <usb_serial_available>
	if (Serial.available()) serialEvent();
    4fd2:	bb70      	cbnz	r0, 5032 <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    4fd4:	f000 f868 	bl	50a8 <serial_available>
	if (Serial1.available()) serialEvent1();
    4fd8:	bb40      	cbnz	r0, 502c <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    4fda:	f000 f8fb 	bl	51d4 <serial2_available>
	if (Serial2.available()) serialEvent2();
    4fde:	bb10      	cbnz	r0, 5026 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    4fe0:	f000 f98e 	bl	5300 <serial3_available>
	if (Serial3.available()) serialEvent3();
    4fe4:	b9e0      	cbnz	r0, 5020 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    4fe6:	2300      	movs	r3, #0
    4fe8:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4fea:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    4fee:	2b00      	cmp	r3, #0
    4ff0:	d1ea      	bne.n	4fc8 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4ff2:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    4ff6:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4ff8:	4b15      	ldr	r3, [pc, #84]	; (5050 <yield+0x90>)
    4ffa:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4ffc:	b1e0      	cbz	r0, 5038 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4ffe:	4c15      	ldr	r4, [pc, #84]	; (5054 <yield+0x94>)
    5000:	7822      	ldrb	r2, [r4, #0]
    5002:	b9ca      	cbnz	r2, 5038 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    5004:	6945      	ldr	r5, [r0, #20]
    5006:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    5008:	2301      	movs	r3, #1
    500a:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    500c:	b1c5      	cbz	r5, 5040 <yield+0x80>
			firstYield->_prev = nullptr;
    500e:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5010:	b901      	cbnz	r1, 5014 <yield+0x54>
    5012:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    5014:	2500      	movs	r5, #0
    5016:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    5018:	6883      	ldr	r3, [r0, #8]
    501a:	4798      	blx	r3
		runningFromYield = false;
    501c:	7025      	strb	r5, [r4, #0]
    501e:	e7d3      	b.n	4fc8 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    5020:	f000 fa30 	bl	5484 <serialEvent3()>
    5024:	e7df      	b.n	4fe6 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    5026:	f000 fa2b 	bl	5480 <serialEvent2()>
    502a:	e7d9      	b.n	4fe0 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    502c:	f000 fa26 	bl	547c <serialEvent1()>
    5030:	e7d3      	b.n	4fda <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    5032:	f7ff ffc3 	bl	4fbc <serialEvent()>
    5036:	e7cd      	b.n	4fd4 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5038:	2900      	cmp	r1, #0
    503a:	d1c5      	bne.n	4fc8 <yield+0x8>
    503c:	b662      	cpsie	i
    503e:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    5040:	4b05      	ldr	r3, [pc, #20]	; (5058 <yield+0x98>)
    5042:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5044:	2900      	cmp	r1, #0
    5046:	d1e5      	bne.n	5014 <yield+0x54>
    5048:	e7e3      	b.n	5012 <yield+0x52>
    504a:	bf00      	nop
    504c:	1fff9604 	.word	0x1fff9604
    5050:	1fff95f8 	.word	0x1fff95f8
    5054:	1fff95fc 	.word	0x1fff95fc
    5058:	1fff95f4 	.word	0x1fff95f4

0000505c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    505c:	b4f0      	push	{r4, r5, r6, r7}
    505e:	1e4d      	subs	r5, r1, #1
    5060:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    5062:	2400      	movs	r4, #0
    5064:	e000      	b.n	5068 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    5066:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    5068:	fbb0 f3f2 	udiv	r3, r0, r2
    506c:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5070:	2809      	cmp	r0, #9
    5072:	f100 0730 	add.w	r7, r0, #48	; 0x30
    5076:	bf8a      	itet	hi
    5078:	3037      	addhi	r0, #55	; 0x37
    507a:	b2f8      	uxtbls	r0, r7
    507c:	b2c0      	uxtbhi	r0, r0
    507e:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    5082:	4618      	mov	r0, r3
    5084:	2b00      	cmp	r3, #0
    5086:	d1ee      	bne.n	5066 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    5088:	190a      	adds	r2, r1, r4
    508a:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    508c:	b14c      	cbz	r4, 50a2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    508e:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    5090:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    5094:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5096:	3301      	adds	r3, #1
    5098:	1ae0      	subs	r0, r4, r3
    509a:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    509c:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    50a0:	dbf5      	blt.n	508e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    50a2:	4608      	mov	r0, r1
    50a4:	bcf0      	pop	{r4, r5, r6, r7}
    50a6:	4770      	bx	lr

000050a8 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    50a8:	4a05      	ldr	r2, [pc, #20]	; (50c0 <serial_available+0x18>)
	tail = rx_buffer_tail;
    50aa:	4b06      	ldr	r3, [pc, #24]	; (50c4 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    50ac:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    50ae:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    50b0:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    50b2:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    50b4:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    50b6:	bf38      	it	cc
    50b8:	3040      	addcc	r0, #64	; 0x40
    50ba:	1ac0      	subs	r0, r0, r3
}
    50bc:	4770      	bx	lr
    50be:	bf00      	nop
    50c0:	1fff960c 	.word	0x1fff960c
    50c4:	1fff960d 	.word	0x1fff960d

000050c8 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    50c8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    50ca:	4b38      	ldr	r3, [pc, #224]	; (51ac <uart0_status_isr+0xe4>)
    50cc:	791a      	ldrb	r2, [r3, #4]
    50ce:	f012 0f30 	tst.w	r2, #48	; 0x30
    50d2:	d02c      	beq.n	512e <uart0_status_isr+0x66>
		__disable_irq();
    50d4:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    50d6:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    50d8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    50dc:	2900      	cmp	r1, #0
    50de:	d03d      	beq.n	515c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    50e0:	b662      	cpsie	i
			head = rx_buffer_head;
    50e2:	4f33      	ldr	r7, [pc, #204]	; (51b0 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    50e4:	4933      	ldr	r1, [pc, #204]	; (51b4 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    50e6:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    50e8:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    50ea:	4e33      	ldr	r6, [pc, #204]	; (51b8 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    50ec:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    50ee:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    50f0:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    50f2:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    50f4:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    50f6:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    50f8:	bf28      	it	cs
    50fa:	2300      	movcs	r3, #0
				if (newhead != tail) {
    50fc:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    50fe:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    5102:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5104:	bf1c      	itt	ne
    5106:	54f1      	strbne	r1, [r6, r3]
    5108:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    510a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    510e:	d1f0      	bne.n	50f2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    5110:	4b2a      	ldr	r3, [pc, #168]	; (51bc <uart0_status_isr+0xf4>)
    5112:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    5114:	b2c2      	uxtb	r2, r0
    5116:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    5118:	b14b      	cbz	r3, 512e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    511a:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    511c:	bf36      	itet	cc
    511e:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    5122:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    5124:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    5126:	2827      	cmp	r0, #39	; 0x27
    5128:	bfc4      	itt	gt
    512a:	2201      	movgt	r2, #1
    512c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    512e:	491f      	ldr	r1, [pc, #124]	; (51ac <uart0_status_isr+0xe4>)
    5130:	78ca      	ldrb	r2, [r1, #3]
    5132:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    5134:	0615      	lsls	r5, r2, #24
    5136:	d416      	bmi.n	5166 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    5138:	0652      	lsls	r2, r2, #25
    513a:	d50d      	bpl.n	5158 <uart0_status_isr+0x90>
    513c:	4b1b      	ldr	r3, [pc, #108]	; (51ac <uart0_status_isr+0xe4>)
    513e:	791b      	ldrb	r3, [r3, #4]
    5140:	065b      	lsls	r3, r3, #25
    5142:	d509      	bpl.n	5158 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5144:	4b1e      	ldr	r3, [pc, #120]	; (51c0 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    5146:	491f      	ldr	r1, [pc, #124]	; (51c4 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    5148:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    514a:	2200      	movs	r2, #0
    514c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    514e:	b103      	cbz	r3, 5152 <uart0_status_isr+0x8a>
    5150:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    5152:	4b16      	ldr	r3, [pc, #88]	; (51ac <uart0_status_isr+0xe4>)
    5154:	223c      	movs	r2, #60	; 0x3c
    5156:	70da      	strb	r2, [r3, #3]
	}
}
    5158:	bcf0      	pop	{r4, r5, r6, r7}
    515a:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    515c:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    515e:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    5160:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    5162:	b662      	cpsie	i
    5164:	e7e3      	b.n	512e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    5166:	790b      	ldrb	r3, [r1, #4]
    5168:	061c      	lsls	r4, r3, #24
    516a:	d5e5      	bpl.n	5138 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    516c:	4b16      	ldr	r3, [pc, #88]	; (51c8 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    516e:	4e17      	ldr	r6, [pc, #92]	; (51cc <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5170:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    5172:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5174:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    5176:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    5178:	429c      	cmp	r4, r3
    517a:	d00e      	beq.n	519a <uart0_status_isr+0xd2>
    517c:	4d14      	ldr	r5, [pc, #80]	; (51d0 <uart0_status_isr+0x108>)
    517e:	e001      	b.n	5184 <uart0_status_isr+0xbc>
    5180:	42a3      	cmp	r3, r4
    5182:	d00a      	beq.n	519a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    5184:	3301      	adds	r3, #1
    5186:	2b40      	cmp	r3, #64	; 0x40
    5188:	bf28      	it	cs
    518a:	2300      	movcs	r3, #0
			avail = UART0_S1;
    518c:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    518e:	5ce8      	ldrb	r0, [r5, r3]
    5190:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    5192:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    5194:	7d08      	ldrb	r0, [r1, #20]
    5196:	2807      	cmp	r0, #7
    5198:	d9f2      	bls.n	5180 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    519a:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    519c:	4903      	ldr	r1, [pc, #12]	; (51ac <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    519e:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    51a0:	790b      	ldrb	r3, [r1, #4]
    51a2:	0618      	lsls	r0, r3, #24
    51a4:	bf44      	itt	mi
    51a6:	237c      	movmi	r3, #124	; 0x7c
    51a8:	70cb      	strbmi	r3, [r1, #3]
    51aa:	e7c5      	b.n	5138 <uart0_status_isr+0x70>
    51ac:	4006a000 	.word	0x4006a000
    51b0:	1fff960c 	.word	0x1fff960c
    51b4:	1fff960d 	.word	0x1fff960d
    51b8:	1fff9650 	.word	0x1fff9650
    51bc:	1fff9608 	.word	0x1fff9608
    51c0:	1fff9694 	.word	0x1fff9694
    51c4:	1fff9690 	.word	0x1fff9690
    51c8:	1fff9698 	.word	0x1fff9698
    51cc:	1fff9691 	.word	0x1fff9691
    51d0:	1fff9610 	.word	0x1fff9610

000051d4 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    51d4:	4a05      	ldr	r2, [pc, #20]	; (51ec <serial2_available+0x18>)
	tail = rx_buffer_tail;
    51d6:	4b06      	ldr	r3, [pc, #24]	; (51f0 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    51d8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    51da:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    51dc:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    51de:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    51e0:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    51e2:	bf38      	it	cc
    51e4:	3040      	addcc	r0, #64	; 0x40
    51e6:	1ac0      	subs	r0, r0, r3
}
    51e8:	4770      	bx	lr
    51ea:	bf00      	nop
    51ec:	1fff970c 	.word	0x1fff970c
    51f0:	1fff96a1 	.word	0x1fff96a1

000051f4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    51f4:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    51f6:	4b38      	ldr	r3, [pc, #224]	; (52d8 <uart1_status_isr+0xe4>)
    51f8:	791a      	ldrb	r2, [r3, #4]
    51fa:	f012 0f30 	tst.w	r2, #48	; 0x30
    51fe:	d02c      	beq.n	525a <uart1_status_isr+0x66>
		__disable_irq();
    5200:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    5202:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    5204:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    5208:	2900      	cmp	r1, #0
    520a:	d03d      	beq.n	5288 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    520c:	b662      	cpsie	i
			head = rx_buffer_head;
    520e:	4f33      	ldr	r7, [pc, #204]	; (52dc <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    5210:	4933      	ldr	r1, [pc, #204]	; (52e0 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5212:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    5214:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5216:	4e33      	ldr	r6, [pc, #204]	; (52e4 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    5218:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    521a:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    521c:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    521e:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    5220:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    5222:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    5224:	bf28      	it	cs
    5226:	2300      	movcs	r3, #0
				if (newhead != tail) {
    5228:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    522a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    522e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5230:	bf1c      	itt	ne
    5232:	54f1      	strbne	r1, [r6, r3]
    5234:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    5236:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    523a:	d1f0      	bne.n	521e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    523c:	4b2a      	ldr	r3, [pc, #168]	; (52e8 <uart1_status_isr+0xf4>)
    523e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    5240:	b2c2      	uxtb	r2, r0
    5242:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    5244:	b14b      	cbz	r3, 525a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    5246:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    5248:	bf36      	itet	cc
    524a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    524e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    5250:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    5252:	2827      	cmp	r0, #39	; 0x27
    5254:	bfc4      	itt	gt
    5256:	2201      	movgt	r2, #1
    5258:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    525a:	491f      	ldr	r1, [pc, #124]	; (52d8 <uart1_status_isr+0xe4>)
    525c:	78ca      	ldrb	r2, [r1, #3]
    525e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    5260:	0615      	lsls	r5, r2, #24
    5262:	d416      	bmi.n	5292 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    5264:	0652      	lsls	r2, r2, #25
    5266:	d50d      	bpl.n	5284 <uart1_status_isr+0x90>
    5268:	4b1b      	ldr	r3, [pc, #108]	; (52d8 <uart1_status_isr+0xe4>)
    526a:	791b      	ldrb	r3, [r3, #4]
    526c:	065b      	lsls	r3, r3, #25
    526e:	d509      	bpl.n	5284 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5270:	4b1e      	ldr	r3, [pc, #120]	; (52ec <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    5272:	491f      	ldr	r1, [pc, #124]	; (52f0 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    5274:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    5276:	2200      	movs	r2, #0
    5278:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    527a:	b103      	cbz	r3, 527e <uart1_status_isr+0x8a>
    527c:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    527e:	4b16      	ldr	r3, [pc, #88]	; (52d8 <uart1_status_isr+0xe4>)
    5280:	223c      	movs	r2, #60	; 0x3c
    5282:	70da      	strb	r2, [r3, #3]
	}
}
    5284:	bcf0      	pop	{r4, r5, r6, r7}
    5286:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    5288:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    528a:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    528c:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    528e:	b662      	cpsie	i
    5290:	e7e3      	b.n	525a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    5292:	790b      	ldrb	r3, [r1, #4]
    5294:	061c      	lsls	r4, r3, #24
    5296:	d5e5      	bpl.n	5264 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    5298:	4b16      	ldr	r3, [pc, #88]	; (52f4 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    529a:	4e17      	ldr	r6, [pc, #92]	; (52f8 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    529c:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    529e:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    52a0:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    52a2:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    52a4:	429c      	cmp	r4, r3
    52a6:	d00e      	beq.n	52c6 <uart1_status_isr+0xd2>
    52a8:	4d14      	ldr	r5, [pc, #80]	; (52fc <uart1_status_isr+0x108>)
    52aa:	e001      	b.n	52b0 <uart1_status_isr+0xbc>
    52ac:	42a3      	cmp	r3, r4
    52ae:	d00a      	beq.n	52c6 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    52b0:	3301      	adds	r3, #1
    52b2:	2b28      	cmp	r3, #40	; 0x28
    52b4:	bf28      	it	cs
    52b6:	2300      	movcs	r3, #0
			avail = UART1_S1;
    52b8:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    52ba:	5ce8      	ldrb	r0, [r5, r3]
    52bc:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    52be:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    52c0:	7d08      	ldrb	r0, [r1, #20]
    52c2:	2807      	cmp	r0, #7
    52c4:	d9f2      	bls.n	52ac <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    52c6:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    52c8:	4903      	ldr	r1, [pc, #12]	; (52d8 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    52ca:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    52cc:	790b      	ldrb	r3, [r1, #4]
    52ce:	0618      	lsls	r0, r3, #24
    52d0:	bf44      	itt	mi
    52d2:	237c      	movmi	r3, #124	; 0x7c
    52d4:	70cb      	strbmi	r3, [r1, #3]
    52d6:	e7c5      	b.n	5264 <uart1_status_isr+0x70>
    52d8:	4006b000 	.word	0x4006b000
    52dc:	1fff970c 	.word	0x1fff970c
    52e0:	1fff96a1 	.word	0x1fff96a1
    52e4:	1fff96cc 	.word	0x1fff96cc
    52e8:	1fff969c 	.word	0x1fff969c
    52ec:	1fff9710 	.word	0x1fff9710
    52f0:	1fff96a0 	.word	0x1fff96a0
    52f4:	1fff9714 	.word	0x1fff9714
    52f8:	1fff970d 	.word	0x1fff970d
    52fc:	1fff96a4 	.word	0x1fff96a4

00005300 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5300:	4a05      	ldr	r2, [pc, #20]	; (5318 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    5302:	4b06      	ldr	r3, [pc, #24]	; (531c <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5304:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    5306:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5308:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    530a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    530c:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    530e:	bf38      	it	cc
    5310:	3040      	addcc	r0, #64	; 0x40
    5312:	1ac0      	subs	r0, r0, r3
}
    5314:	4770      	bx	lr
    5316:	bf00      	nop
    5318:	1fff971c 	.word	0x1fff971c
    531c:	1fff971d 	.word	0x1fff971d

00005320 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    5320:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    5322:	4b2b      	ldr	r3, [pc, #172]	; (53d0 <uart2_status_isr+0xb0>)
    5324:	791a      	ldrb	r2, [r3, #4]
    5326:	0694      	lsls	r4, r2, #26
    5328:	d51f      	bpl.n	536a <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    532a:	482a      	ldr	r0, [pc, #168]	; (53d4 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    532c:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    532e:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    5330:	4929      	ldr	r1, [pc, #164]	; (53d8 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    5332:	3301      	adds	r3, #1
    5334:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    5336:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    5338:	bfc8      	it	gt
    533a:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    533c:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    533e:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    5340:	d003      	beq.n	534a <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    5342:	4c26      	ldr	r4, [pc, #152]	; (53dc <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    5344:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    5346:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    5348:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    534a:	4a25      	ldr	r2, [pc, #148]	; (53e0 <uart2_status_isr+0xc0>)
    534c:	6811      	ldr	r1, [r2, #0]
    534e:	b161      	cbz	r1, 536a <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    5350:	4a24      	ldr	r2, [pc, #144]	; (53e4 <uart2_status_isr+0xc4>)
    5352:	7812      	ldrb	r2, [r2, #0]
    5354:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    5356:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    5358:	bf36      	itet	cc
    535a:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    535e:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    5360:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    5362:	2b27      	cmp	r3, #39	; 0x27
    5364:	bfc4      	itt	gt
    5366:	2301      	movgt	r3, #1
    5368:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    536a:	4a19      	ldr	r2, [pc, #100]	; (53d0 <uart2_status_isr+0xb0>)
    536c:	78d3      	ldrb	r3, [r2, #3]
    536e:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    5370:	0618      	lsls	r0, r3, #24
    5372:	d411      	bmi.n	5398 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    5374:	065a      	lsls	r2, r3, #25
    5376:	d50d      	bpl.n	5394 <uart2_status_isr+0x74>
    5378:	4b15      	ldr	r3, [pc, #84]	; (53d0 <uart2_status_isr+0xb0>)
    537a:	791b      	ldrb	r3, [r3, #4]
    537c:	065b      	lsls	r3, r3, #25
    537e:	d509      	bpl.n	5394 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5380:	4b19      	ldr	r3, [pc, #100]	; (53e8 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    5382:	491a      	ldr	r1, [pc, #104]	; (53ec <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    5384:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    5386:	2200      	movs	r2, #0
    5388:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    538a:	b103      	cbz	r3, 538e <uart2_status_isr+0x6e>
    538c:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    538e:	4b10      	ldr	r3, [pc, #64]	; (53d0 <uart2_status_isr+0xb0>)
    5390:	222c      	movs	r2, #44	; 0x2c
    5392:	70da      	strb	r2, [r3, #3]
	}
}
    5394:	bc30      	pop	{r4, r5}
    5396:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    5398:	7911      	ldrb	r1, [r2, #4]
    539a:	0609      	lsls	r1, r1, #24
    539c:	d5ea      	bpl.n	5374 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    539e:	4914      	ldr	r1, [pc, #80]	; (53f0 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    53a0:	4810      	ldr	r0, [pc, #64]	; (53e4 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    53a2:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    53a4:	7801      	ldrb	r1, [r0, #0]
    53a6:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    53a8:	428c      	cmp	r4, r1
    53aa:	d00d      	beq.n	53c8 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    53ac:	1c4a      	adds	r2, r1, #1
    53ae:	2a27      	cmp	r2, #39	; 0x27
    53b0:	bf84      	itt	hi
    53b2:	2100      	movhi	r1, #0
    53b4:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    53b6:	4d0f      	ldr	r5, [pc, #60]	; (53f4 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    53b8:	4c05      	ldr	r4, [pc, #20]	; (53d0 <uart2_status_isr+0xb0>)
    53ba:	bf98      	it	ls
    53bc:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    53be:	5caa      	ldrb	r2, [r5, r2]
    53c0:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    53c2:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    53c4:	7001      	strb	r1, [r0, #0]
    53c6:	e7d5      	b.n	5374 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    53c8:	216c      	movs	r1, #108	; 0x6c
    53ca:	70d1      	strb	r1, [r2, #3]
    53cc:	e7d2      	b.n	5374 <uart2_status_isr+0x54>
    53ce:	bf00      	nop
    53d0:	4006c000 	.word	0x4006c000
    53d4:	1fff971c 	.word	0x1fff971c
    53d8:	1fff971d 	.word	0x1fff971d
    53dc:	1fff9748 	.word	0x1fff9748
    53e0:	1fff9718 	.word	0x1fff9718
    53e4:	1fff9789 	.word	0x1fff9789
    53e8:	1fff978c 	.word	0x1fff978c
    53ec:	1fff9788 	.word	0x1fff9788
    53f0:	1fff9790 	.word	0x1fff9790
    53f4:	1fff9720 	.word	0x1fff9720

000053f8 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    53f8:	b570      	push	{r4, r5, r6, lr}
    53fa:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    53fc:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    53fe:	4b19      	ldr	r3, [pc, #100]	; (5464 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    5400:	4d19      	ldr	r5, [pc, #100]	; (5468 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    5402:	481a      	ldr	r0, [pc, #104]	; (546c <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    5404:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    5406:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    5408:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    540a:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    540c:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    540e:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    5410:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    5412:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    5414:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    5416:	7813      	ldrb	r3, [r2, #0]
    5418:	061b      	lsls	r3, r3, #24
    541a:	d5fc      	bpl.n	5416 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    541c:	4b14      	ldr	r3, [pc, #80]	; (5470 <usb_init_serialnumber+0x78>)
    541e:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    5420:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    5422:	4b14      	ldr	r3, [pc, #80]	; (5474 <usb_init_serialnumber+0x7c>)
    5424:	4c14      	ldr	r4, [pc, #80]	; (5478 <usb_init_serialnumber+0x80>)
    5426:	4298      	cmp	r0, r3
    5428:	bf98      	it	ls
    542a:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    542e:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    5430:	bf98      	it	ls
    5432:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    5434:	220a      	movs	r2, #10
    5436:	f7ff fe11 	bl	505c <ultoa>
    543a:	a901      	add	r1, sp, #4
    543c:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    543e:	2300      	movs	r3, #0
		char c = buf[i];
    5440:	f811 2b01 	ldrb.w	r2, [r1], #1
    5444:	3301      	adds	r3, #1
		if (!c) break;
    5446:	b13a      	cbz	r2, 5458 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    5448:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    544a:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    544e:	d1f7      	bne.n	5440 <usb_init_serialnumber+0x48>
    5450:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5452:	7023      	strb	r3, [r4, #0]
}
    5454:	b004      	add	sp, #16
    5456:	bd70      	pop	{r4, r5, r6, pc}
    5458:	005b      	lsls	r3, r3, #1
    545a:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    545c:	7023      	strb	r3, [r4, #0]
}
    545e:	b004      	add	sp, #16
    5460:	bd70      	pop	{r4, r5, r6, pc}
    5462:	bf00      	nop
    5464:	40020000 	.word	0x40020000
    5468:	40020007 	.word	0x40020007
    546c:	40020006 	.word	0x40020006
    5470:	40020008 	.word	0x40020008
    5474:	0098967f 	.word	0x0098967f
    5478:	1fff8810 	.word	0x1fff8810

0000547c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    547c:	4770      	bx	lr
    547e:	bf00      	nop

00005480 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    5480:	4770      	bx	lr
    5482:	bf00      	nop

00005484 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    5484:	4770      	bx	lr
    5486:	bf00      	nop

00005488 <__aeabi_frsub>:
    5488:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    548c:	e002      	b.n	5494 <__addsf3>
    548e:	bf00      	nop

00005490 <__aeabi_fsub>:
    5490:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00005494 <__addsf3>:
    5494:	0042      	lsls	r2, r0, #1
    5496:	bf1f      	itttt	ne
    5498:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    549c:	ea92 0f03 	teqne	r2, r3
    54a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    54a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    54a8:	d06a      	beq.n	5580 <__addsf3+0xec>
    54aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
    54ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    54b2:	bfc1      	itttt	gt
    54b4:	18d2      	addgt	r2, r2, r3
    54b6:	4041      	eorgt	r1, r0
    54b8:	4048      	eorgt	r0, r1
    54ba:	4041      	eorgt	r1, r0
    54bc:	bfb8      	it	lt
    54be:	425b      	neglt	r3, r3
    54c0:	2b19      	cmp	r3, #25
    54c2:	bf88      	it	hi
    54c4:	4770      	bxhi	lr
    54c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    54ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    54ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    54d2:	bf18      	it	ne
    54d4:	4240      	negne	r0, r0
    54d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    54da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    54de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    54e2:	bf18      	it	ne
    54e4:	4249      	negne	r1, r1
    54e6:	ea92 0f03 	teq	r2, r3
    54ea:	d03f      	beq.n	556c <__addsf3+0xd8>
    54ec:	f1a2 0201 	sub.w	r2, r2, #1
    54f0:	fa41 fc03 	asr.w	ip, r1, r3
    54f4:	eb10 000c 	adds.w	r0, r0, ip
    54f8:	f1c3 0320 	rsb	r3, r3, #32
    54fc:	fa01 f103 	lsl.w	r1, r1, r3
    5500:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    5504:	d502      	bpl.n	550c <__addsf3+0x78>
    5506:	4249      	negs	r1, r1
    5508:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    550c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5510:	d313      	bcc.n	553a <__addsf3+0xa6>
    5512:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    5516:	d306      	bcc.n	5526 <__addsf3+0x92>
    5518:	0840      	lsrs	r0, r0, #1
    551a:	ea4f 0131 	mov.w	r1, r1, rrx
    551e:	f102 0201 	add.w	r2, r2, #1
    5522:	2afe      	cmp	r2, #254	; 0xfe
    5524:	d251      	bcs.n	55ca <__addsf3+0x136>
    5526:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    552a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    552e:	bf08      	it	eq
    5530:	f020 0001 	biceq.w	r0, r0, #1
    5534:	ea40 0003 	orr.w	r0, r0, r3
    5538:	4770      	bx	lr
    553a:	0049      	lsls	r1, r1, #1
    553c:	eb40 0000 	adc.w	r0, r0, r0
    5540:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    5544:	f1a2 0201 	sub.w	r2, r2, #1
    5548:	d1ed      	bne.n	5526 <__addsf3+0x92>
    554a:	fab0 fc80 	clz	ip, r0
    554e:	f1ac 0c08 	sub.w	ip, ip, #8
    5552:	ebb2 020c 	subs.w	r2, r2, ip
    5556:	fa00 f00c 	lsl.w	r0, r0, ip
    555a:	bfaa      	itet	ge
    555c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    5560:	4252      	neglt	r2, r2
    5562:	4318      	orrge	r0, r3
    5564:	bfbc      	itt	lt
    5566:	40d0      	lsrlt	r0, r2
    5568:	4318      	orrlt	r0, r3
    556a:	4770      	bx	lr
    556c:	f092 0f00 	teq	r2, #0
    5570:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    5574:	bf06      	itte	eq
    5576:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    557a:	3201      	addeq	r2, #1
    557c:	3b01      	subne	r3, #1
    557e:	e7b5      	b.n	54ec <__addsf3+0x58>
    5580:	ea4f 0341 	mov.w	r3, r1, lsl #1
    5584:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    5588:	bf18      	it	ne
    558a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    558e:	d021      	beq.n	55d4 <__addsf3+0x140>
    5590:	ea92 0f03 	teq	r2, r3
    5594:	d004      	beq.n	55a0 <__addsf3+0x10c>
    5596:	f092 0f00 	teq	r2, #0
    559a:	bf08      	it	eq
    559c:	4608      	moveq	r0, r1
    559e:	4770      	bx	lr
    55a0:	ea90 0f01 	teq	r0, r1
    55a4:	bf1c      	itt	ne
    55a6:	2000      	movne	r0, #0
    55a8:	4770      	bxne	lr
    55aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    55ae:	d104      	bne.n	55ba <__addsf3+0x126>
    55b0:	0040      	lsls	r0, r0, #1
    55b2:	bf28      	it	cs
    55b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    55b8:	4770      	bx	lr
    55ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    55be:	bf3c      	itt	cc
    55c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    55c4:	4770      	bxcc	lr
    55c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    55ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    55ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    55d2:	4770      	bx	lr
    55d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    55d8:	bf16      	itet	ne
    55da:	4608      	movne	r0, r1
    55dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    55e0:	4601      	movne	r1, r0
    55e2:	0242      	lsls	r2, r0, #9
    55e4:	bf06      	itte	eq
    55e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    55ea:	ea90 0f01 	teqeq	r0, r1
    55ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    55f2:	4770      	bx	lr

000055f4 <__aeabi_ui2f>:
    55f4:	f04f 0300 	mov.w	r3, #0
    55f8:	e004      	b.n	5604 <__aeabi_i2f+0x8>
    55fa:	bf00      	nop

000055fc <__aeabi_i2f>:
    55fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    5600:	bf48      	it	mi
    5602:	4240      	negmi	r0, r0
    5604:	ea5f 0c00 	movs.w	ip, r0
    5608:	bf08      	it	eq
    560a:	4770      	bxeq	lr
    560c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    5610:	4601      	mov	r1, r0
    5612:	f04f 0000 	mov.w	r0, #0
    5616:	e01c      	b.n	5652 <__aeabi_l2f+0x2a>

00005618 <__aeabi_ul2f>:
    5618:	ea50 0201 	orrs.w	r2, r0, r1
    561c:	bf08      	it	eq
    561e:	4770      	bxeq	lr
    5620:	f04f 0300 	mov.w	r3, #0
    5624:	e00a      	b.n	563c <__aeabi_l2f+0x14>
    5626:	bf00      	nop

00005628 <__aeabi_l2f>:
    5628:	ea50 0201 	orrs.w	r2, r0, r1
    562c:	bf08      	it	eq
    562e:	4770      	bxeq	lr
    5630:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    5634:	d502      	bpl.n	563c <__aeabi_l2f+0x14>
    5636:	4240      	negs	r0, r0
    5638:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    563c:	ea5f 0c01 	movs.w	ip, r1
    5640:	bf02      	ittt	eq
    5642:	4684      	moveq	ip, r0
    5644:	4601      	moveq	r1, r0
    5646:	2000      	moveq	r0, #0
    5648:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    564c:	bf08      	it	eq
    564e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    5652:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    5656:	fabc f28c 	clz	r2, ip
    565a:	3a08      	subs	r2, #8
    565c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    5660:	db10      	blt.n	5684 <__aeabi_l2f+0x5c>
    5662:	fa01 fc02 	lsl.w	ip, r1, r2
    5666:	4463      	add	r3, ip
    5668:	fa00 fc02 	lsl.w	ip, r0, r2
    566c:	f1c2 0220 	rsb	r2, r2, #32
    5670:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    5674:	fa20 f202 	lsr.w	r2, r0, r2
    5678:	eb43 0002 	adc.w	r0, r3, r2
    567c:	bf08      	it	eq
    567e:	f020 0001 	biceq.w	r0, r0, #1
    5682:	4770      	bx	lr
    5684:	f102 0220 	add.w	r2, r2, #32
    5688:	fa01 fc02 	lsl.w	ip, r1, r2
    568c:	f1c2 0220 	rsb	r2, r2, #32
    5690:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    5694:	fa21 f202 	lsr.w	r2, r1, r2
    5698:	eb43 0002 	adc.w	r0, r3, r2
    569c:	bf08      	it	eq
    569e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    56a2:	4770      	bx	lr

000056a4 <__aeabi_fmul>:
    56a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    56a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    56ac:	bf1e      	ittt	ne
    56ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    56b2:	ea92 0f0c 	teqne	r2, ip
    56b6:	ea93 0f0c 	teqne	r3, ip
    56ba:	d06f      	beq.n	579c <__aeabi_fmul+0xf8>
    56bc:	441a      	add	r2, r3
    56be:	ea80 0c01 	eor.w	ip, r0, r1
    56c2:	0240      	lsls	r0, r0, #9
    56c4:	bf18      	it	ne
    56c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    56ca:	d01e      	beq.n	570a <__aeabi_fmul+0x66>
    56cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    56d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    56d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    56d8:	fba0 3101 	umull	r3, r1, r0, r1
    56dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    56e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    56e4:	bf3e      	ittt	cc
    56e6:	0049      	lslcc	r1, r1, #1
    56e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    56ec:	005b      	lslcc	r3, r3, #1
    56ee:	ea40 0001 	orr.w	r0, r0, r1
    56f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    56f6:	2afd      	cmp	r2, #253	; 0xfd
    56f8:	d81d      	bhi.n	5736 <__aeabi_fmul+0x92>
    56fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    56fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    5702:	bf08      	it	eq
    5704:	f020 0001 	biceq.w	r0, r0, #1
    5708:	4770      	bx	lr
    570a:	f090 0f00 	teq	r0, #0
    570e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    5712:	bf08      	it	eq
    5714:	0249      	lsleq	r1, r1, #9
    5716:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    571a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    571e:	3a7f      	subs	r2, #127	; 0x7f
    5720:	bfc2      	ittt	gt
    5722:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    5726:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    572a:	4770      	bxgt	lr
    572c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    5730:	f04f 0300 	mov.w	r3, #0
    5734:	3a01      	subs	r2, #1
    5736:	dc5d      	bgt.n	57f4 <__aeabi_fmul+0x150>
    5738:	f112 0f19 	cmn.w	r2, #25
    573c:	bfdc      	itt	le
    573e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    5742:	4770      	bxle	lr
    5744:	f1c2 0200 	rsb	r2, r2, #0
    5748:	0041      	lsls	r1, r0, #1
    574a:	fa21 f102 	lsr.w	r1, r1, r2
    574e:	f1c2 0220 	rsb	r2, r2, #32
    5752:	fa00 fc02 	lsl.w	ip, r0, r2
    5756:	ea5f 0031 	movs.w	r0, r1, rrx
    575a:	f140 0000 	adc.w	r0, r0, #0
    575e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    5762:	bf08      	it	eq
    5764:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    5768:	4770      	bx	lr
    576a:	f092 0f00 	teq	r2, #0
    576e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    5772:	bf02      	ittt	eq
    5774:	0040      	lsleq	r0, r0, #1
    5776:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    577a:	3a01      	subeq	r2, #1
    577c:	d0f9      	beq.n	5772 <__aeabi_fmul+0xce>
    577e:	ea40 000c 	orr.w	r0, r0, ip
    5782:	f093 0f00 	teq	r3, #0
    5786:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    578a:	bf02      	ittt	eq
    578c:	0049      	lsleq	r1, r1, #1
    578e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    5792:	3b01      	subeq	r3, #1
    5794:	d0f9      	beq.n	578a <__aeabi_fmul+0xe6>
    5796:	ea41 010c 	orr.w	r1, r1, ip
    579a:	e78f      	b.n	56bc <__aeabi_fmul+0x18>
    579c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    57a0:	ea92 0f0c 	teq	r2, ip
    57a4:	bf18      	it	ne
    57a6:	ea93 0f0c 	teqne	r3, ip
    57aa:	d00a      	beq.n	57c2 <__aeabi_fmul+0x11e>
    57ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    57b0:	bf18      	it	ne
    57b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    57b6:	d1d8      	bne.n	576a <__aeabi_fmul+0xc6>
    57b8:	ea80 0001 	eor.w	r0, r0, r1
    57bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    57c0:	4770      	bx	lr
    57c2:	f090 0f00 	teq	r0, #0
    57c6:	bf17      	itett	ne
    57c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    57cc:	4608      	moveq	r0, r1
    57ce:	f091 0f00 	teqne	r1, #0
    57d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    57d6:	d014      	beq.n	5802 <__aeabi_fmul+0x15e>
    57d8:	ea92 0f0c 	teq	r2, ip
    57dc:	d101      	bne.n	57e2 <__aeabi_fmul+0x13e>
    57de:	0242      	lsls	r2, r0, #9
    57e0:	d10f      	bne.n	5802 <__aeabi_fmul+0x15e>
    57e2:	ea93 0f0c 	teq	r3, ip
    57e6:	d103      	bne.n	57f0 <__aeabi_fmul+0x14c>
    57e8:	024b      	lsls	r3, r1, #9
    57ea:	bf18      	it	ne
    57ec:	4608      	movne	r0, r1
    57ee:	d108      	bne.n	5802 <__aeabi_fmul+0x15e>
    57f0:	ea80 0001 	eor.w	r0, r0, r1
    57f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    57f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    57fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    5800:	4770      	bx	lr
    5802:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    5806:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    580a:	4770      	bx	lr

0000580c <__aeabi_fdiv>:
    580c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5810:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    5814:	bf1e      	ittt	ne
    5816:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    581a:	ea92 0f0c 	teqne	r2, ip
    581e:	ea93 0f0c 	teqne	r3, ip
    5822:	d069      	beq.n	58f8 <__aeabi_fdiv+0xec>
    5824:	eba2 0203 	sub.w	r2, r2, r3
    5828:	ea80 0c01 	eor.w	ip, r0, r1
    582c:	0249      	lsls	r1, r1, #9
    582e:	ea4f 2040 	mov.w	r0, r0, lsl #9
    5832:	d037      	beq.n	58a4 <__aeabi_fdiv+0x98>
    5834:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5838:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    583c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    5840:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    5844:	428b      	cmp	r3, r1
    5846:	bf38      	it	cc
    5848:	005b      	lslcc	r3, r3, #1
    584a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    584e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    5852:	428b      	cmp	r3, r1
    5854:	bf24      	itt	cs
    5856:	1a5b      	subcs	r3, r3, r1
    5858:	ea40 000c 	orrcs.w	r0, r0, ip
    585c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    5860:	bf24      	itt	cs
    5862:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    5866:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    586a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    586e:	bf24      	itt	cs
    5870:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    5874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    5878:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    587c:	bf24      	itt	cs
    587e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    5882:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    5886:	011b      	lsls	r3, r3, #4
    5888:	bf18      	it	ne
    588a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    588e:	d1e0      	bne.n	5852 <__aeabi_fdiv+0x46>
    5890:	2afd      	cmp	r2, #253	; 0xfd
    5892:	f63f af50 	bhi.w	5736 <__aeabi_fmul+0x92>
    5896:	428b      	cmp	r3, r1
    5898:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    589c:	bf08      	it	eq
    589e:	f020 0001 	biceq.w	r0, r0, #1
    58a2:	4770      	bx	lr
    58a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    58a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    58ac:	327f      	adds	r2, #127	; 0x7f
    58ae:	bfc2      	ittt	gt
    58b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    58b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    58b8:	4770      	bxgt	lr
    58ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    58be:	f04f 0300 	mov.w	r3, #0
    58c2:	3a01      	subs	r2, #1
    58c4:	e737      	b.n	5736 <__aeabi_fmul+0x92>
    58c6:	f092 0f00 	teq	r2, #0
    58ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    58ce:	bf02      	ittt	eq
    58d0:	0040      	lsleq	r0, r0, #1
    58d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    58d6:	3a01      	subeq	r2, #1
    58d8:	d0f9      	beq.n	58ce <__aeabi_fdiv+0xc2>
    58da:	ea40 000c 	orr.w	r0, r0, ip
    58de:	f093 0f00 	teq	r3, #0
    58e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    58e6:	bf02      	ittt	eq
    58e8:	0049      	lsleq	r1, r1, #1
    58ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    58ee:	3b01      	subeq	r3, #1
    58f0:	d0f9      	beq.n	58e6 <__aeabi_fdiv+0xda>
    58f2:	ea41 010c 	orr.w	r1, r1, ip
    58f6:	e795      	b.n	5824 <__aeabi_fdiv+0x18>
    58f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    58fc:	ea92 0f0c 	teq	r2, ip
    5900:	d108      	bne.n	5914 <__aeabi_fdiv+0x108>
    5902:	0242      	lsls	r2, r0, #9
    5904:	f47f af7d 	bne.w	5802 <__aeabi_fmul+0x15e>
    5908:	ea93 0f0c 	teq	r3, ip
    590c:	f47f af70 	bne.w	57f0 <__aeabi_fmul+0x14c>
    5910:	4608      	mov	r0, r1
    5912:	e776      	b.n	5802 <__aeabi_fmul+0x15e>
    5914:	ea93 0f0c 	teq	r3, ip
    5918:	d104      	bne.n	5924 <__aeabi_fdiv+0x118>
    591a:	024b      	lsls	r3, r1, #9
    591c:	f43f af4c 	beq.w	57b8 <__aeabi_fmul+0x114>
    5920:	4608      	mov	r0, r1
    5922:	e76e      	b.n	5802 <__aeabi_fmul+0x15e>
    5924:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    5928:	bf18      	it	ne
    592a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    592e:	d1ca      	bne.n	58c6 <__aeabi_fdiv+0xba>
    5930:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    5934:	f47f af5c 	bne.w	57f0 <__aeabi_fmul+0x14c>
    5938:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    593c:	f47f af3c 	bne.w	57b8 <__aeabi_fmul+0x114>
    5940:	e75f      	b.n	5802 <__aeabi_fmul+0x15e>
    5942:	bf00      	nop

00005944 <__gesf2>:
    5944:	f04f 3cff 	mov.w	ip, #4294967295
    5948:	e006      	b.n	5958 <__cmpsf2+0x4>
    594a:	bf00      	nop

0000594c <__lesf2>:
    594c:	f04f 0c01 	mov.w	ip, #1
    5950:	e002      	b.n	5958 <__cmpsf2+0x4>
    5952:	bf00      	nop

00005954 <__cmpsf2>:
    5954:	f04f 0c01 	mov.w	ip, #1
    5958:	f84d cd04 	str.w	ip, [sp, #-4]!
    595c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    5960:	ea4f 0341 	mov.w	r3, r1, lsl #1
    5964:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    5968:	bf18      	it	ne
    596a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    596e:	d011      	beq.n	5994 <__cmpsf2+0x40>
    5970:	b001      	add	sp, #4
    5972:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    5976:	bf18      	it	ne
    5978:	ea90 0f01 	teqne	r0, r1
    597c:	bf58      	it	pl
    597e:	ebb2 0003 	subspl.w	r0, r2, r3
    5982:	bf88      	it	hi
    5984:	17c8      	asrhi	r0, r1, #31
    5986:	bf38      	it	cc
    5988:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    598c:	bf18      	it	ne
    598e:	f040 0001 	orrne.w	r0, r0, #1
    5992:	4770      	bx	lr
    5994:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    5998:	d102      	bne.n	59a0 <__cmpsf2+0x4c>
    599a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    599e:	d105      	bne.n	59ac <__cmpsf2+0x58>
    59a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    59a4:	d1e4      	bne.n	5970 <__cmpsf2+0x1c>
    59a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    59aa:	d0e1      	beq.n	5970 <__cmpsf2+0x1c>
    59ac:	f85d 0b04 	ldr.w	r0, [sp], #4
    59b0:	4770      	bx	lr
    59b2:	bf00      	nop

000059b4 <__aeabi_cfrcmple>:
    59b4:	4684      	mov	ip, r0
    59b6:	4608      	mov	r0, r1
    59b8:	4661      	mov	r1, ip
    59ba:	e7ff      	b.n	59bc <__aeabi_cfcmpeq>

000059bc <__aeabi_cfcmpeq>:
    59bc:	b50f      	push	{r0, r1, r2, r3, lr}
    59be:	f7ff ffc9 	bl	5954 <__cmpsf2>
    59c2:	2800      	cmp	r0, #0
    59c4:	bf48      	it	mi
    59c6:	f110 0f00 	cmnmi.w	r0, #0
    59ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

000059cc <__aeabi_fcmpeq>:
    59cc:	f84d ed08 	str.w	lr, [sp, #-8]!
    59d0:	f7ff fff4 	bl	59bc <__aeabi_cfcmpeq>
    59d4:	bf0c      	ite	eq
    59d6:	2001      	moveq	r0, #1
    59d8:	2000      	movne	r0, #0
    59da:	f85d fb08 	ldr.w	pc, [sp], #8
    59de:	bf00      	nop

000059e0 <__aeabi_fcmplt>:
    59e0:	f84d ed08 	str.w	lr, [sp, #-8]!
    59e4:	f7ff ffea 	bl	59bc <__aeabi_cfcmpeq>
    59e8:	bf34      	ite	cc
    59ea:	2001      	movcc	r0, #1
    59ec:	2000      	movcs	r0, #0
    59ee:	f85d fb08 	ldr.w	pc, [sp], #8
    59f2:	bf00      	nop

000059f4 <__aeabi_fcmple>:
    59f4:	f84d ed08 	str.w	lr, [sp, #-8]!
    59f8:	f7ff ffe0 	bl	59bc <__aeabi_cfcmpeq>
    59fc:	bf94      	ite	ls
    59fe:	2001      	movls	r0, #1
    5a00:	2000      	movhi	r0, #0
    5a02:	f85d fb08 	ldr.w	pc, [sp], #8
    5a06:	bf00      	nop

00005a08 <__aeabi_fcmpge>:
    5a08:	f84d ed08 	str.w	lr, [sp, #-8]!
    5a0c:	f7ff ffd2 	bl	59b4 <__aeabi_cfrcmple>
    5a10:	bf94      	ite	ls
    5a12:	2001      	movls	r0, #1
    5a14:	2000      	movhi	r0, #0
    5a16:	f85d fb08 	ldr.w	pc, [sp], #8
    5a1a:	bf00      	nop

00005a1c <__aeabi_fcmpgt>:
    5a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
    5a20:	f7ff ffc8 	bl	59b4 <__aeabi_cfrcmple>
    5a24:	bf34      	ite	cc
    5a26:	2001      	movcc	r0, #1
    5a28:	2000      	movcs	r0, #0
    5a2a:	f85d fb08 	ldr.w	pc, [sp], #8
    5a2e:	bf00      	nop

00005a30 <__aeabi_f2iz>:
    5a30:	ea4f 0240 	mov.w	r2, r0, lsl #1
    5a34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    5a38:	d30f      	bcc.n	5a5a <__aeabi_f2iz+0x2a>
    5a3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    5a3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    5a42:	d90d      	bls.n	5a60 <__aeabi_f2iz+0x30>
    5a44:	ea4f 2300 	mov.w	r3, r0, lsl #8
    5a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5a4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    5a50:	fa23 f002 	lsr.w	r0, r3, r2
    5a54:	bf18      	it	ne
    5a56:	4240      	negne	r0, r0
    5a58:	4770      	bx	lr
    5a5a:	f04f 0000 	mov.w	r0, #0
    5a5e:	4770      	bx	lr
    5a60:	f112 0f61 	cmn.w	r2, #97	; 0x61
    5a64:	d101      	bne.n	5a6a <__aeabi_f2iz+0x3a>
    5a66:	0242      	lsls	r2, r0, #9
    5a68:	d105      	bne.n	5a76 <__aeabi_f2iz+0x46>
    5a6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    5a6e:	bf08      	it	eq
    5a70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    5a74:	4770      	bx	lr
    5a76:	f04f 0000 	mov.w	r0, #0
    5a7a:	4770      	bx	lr

00005a7c <__aeabi_f2uiz>:
    5a7c:	0042      	lsls	r2, r0, #1
    5a7e:	d20e      	bcs.n	5a9e <__aeabi_f2uiz+0x22>
    5a80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    5a84:	d30b      	bcc.n	5a9e <__aeabi_f2uiz+0x22>
    5a86:	f04f 039e 	mov.w	r3, #158	; 0x9e
    5a8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    5a8e:	d409      	bmi.n	5aa4 <__aeabi_f2uiz+0x28>
    5a90:	ea4f 2300 	mov.w	r3, r0, lsl #8
    5a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5a98:	fa23 f002 	lsr.w	r0, r3, r2
    5a9c:	4770      	bx	lr
    5a9e:	f04f 0000 	mov.w	r0, #0
    5aa2:	4770      	bx	lr
    5aa4:	f112 0f61 	cmn.w	r2, #97	; 0x61
    5aa8:	d101      	bne.n	5aae <__aeabi_f2uiz+0x32>
    5aaa:	0242      	lsls	r2, r0, #9
    5aac:	d102      	bne.n	5ab4 <__aeabi_f2uiz+0x38>
    5aae:	f04f 30ff 	mov.w	r0, #4294967295
    5ab2:	4770      	bx	lr
    5ab4:	f04f 0000 	mov.w	r0, #0
    5ab8:	4770      	bx	lr
    5aba:	bf00      	nop

00005abc <__libc_init_array>:
    5abc:	b570      	push	{r4, r5, r6, lr}
    5abe:	4e0f      	ldr	r6, [pc, #60]	; (5afc <__libc_init_array+0x40>)
    5ac0:	4d0f      	ldr	r5, [pc, #60]	; (5b00 <__libc_init_array+0x44>)
    5ac2:	1b76      	subs	r6, r6, r5
    5ac4:	10b6      	asrs	r6, r6, #2
    5ac6:	bf18      	it	ne
    5ac8:	2400      	movne	r4, #0
    5aca:	d005      	beq.n	5ad8 <__libc_init_array+0x1c>
    5acc:	3401      	adds	r4, #1
    5ace:	f855 3b04 	ldr.w	r3, [r5], #4
    5ad2:	4798      	blx	r3
    5ad4:	42a6      	cmp	r6, r4
    5ad6:	d1f9      	bne.n	5acc <__libc_init_array+0x10>
    5ad8:	4e0a      	ldr	r6, [pc, #40]	; (5b04 <__libc_init_array+0x48>)
    5ada:	4d0b      	ldr	r5, [pc, #44]	; (5b08 <__libc_init_array+0x4c>)
    5adc:	1b76      	subs	r6, r6, r5
    5ade:	f001 ff37 	bl	7950 <_init>
    5ae2:	10b6      	asrs	r6, r6, #2
    5ae4:	bf18      	it	ne
    5ae6:	2400      	movne	r4, #0
    5ae8:	d006      	beq.n	5af8 <__libc_init_array+0x3c>
    5aea:	3401      	adds	r4, #1
    5aec:	f855 3b04 	ldr.w	r3, [r5], #4
    5af0:	4798      	blx	r3
    5af2:	42a6      	cmp	r6, r4
    5af4:	d1f9      	bne.n	5aea <__libc_init_array+0x2e>
    5af6:	bd70      	pop	{r4, r5, r6, pc}
    5af8:	bd70      	pop	{r4, r5, r6, pc}
    5afa:	bf00      	nop
    5afc:	0000795c 	.word	0x0000795c
    5b00:	0000795c 	.word	0x0000795c
    5b04:	00007970 	.word	0x00007970
    5b08:	0000795c 	.word	0x0000795c

00005b0c <random>:
    5b0c:	b410      	push	{r4}
    5b0e:	4b0c      	ldr	r3, [pc, #48]	; (5b40 <random+0x34>)
    5b10:	4c0c      	ldr	r4, [pc, #48]	; (5b44 <random+0x38>)
    5b12:	6819      	ldr	r1, [r3, #0]
    5b14:	4a0c      	ldr	r2, [pc, #48]	; (5b48 <random+0x3c>)
    5b16:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    5b1a:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
    5b1e:	fb04 f403 	mul.w	r4, r4, r3
    5b22:	fb02 4000 	mla	r0, r2, r0, r4
    5b26:	fba3 2302 	umull	r2, r3, r3, r2
    5b2a:	4403      	add	r3, r0
    5b2c:	3201      	adds	r2, #1
    5b2e:	f143 0300 	adc.w	r3, r3, #0
    5b32:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    5b36:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    5b3a:	bc10      	pop	{r4}
    5b3c:	4770      	bx	lr
    5b3e:	bf00      	nop
    5b40:	1fff8c50 	.word	0x1fff8c50
    5b44:	5851f42d 	.word	0x5851f42d
    5b48:	4c957f2d 	.word	0x4c957f2d

00005b4c <register_fini>:
    5b4c:	4b02      	ldr	r3, [pc, #8]	; (5b58 <register_fini+0xc>)
    5b4e:	b113      	cbz	r3, 5b56 <register_fini+0xa>
    5b50:	4802      	ldr	r0, [pc, #8]	; (5b5c <register_fini+0x10>)
    5b52:	f7fd bb05 	b.w	3160 <atexit>
    5b56:	4770      	bx	lr
    5b58:	00000000 	.word	0x00000000
    5b5c:	00005b61 	.word	0x00005b61

00005b60 <__libc_fini_array>:
    5b60:	b538      	push	{r3, r4, r5, lr}
    5b62:	4d07      	ldr	r5, [pc, #28]	; (5b80 <__libc_fini_array+0x20>)
    5b64:	4c07      	ldr	r4, [pc, #28]	; (5b84 <__libc_fini_array+0x24>)
    5b66:	1b2c      	subs	r4, r5, r4
    5b68:	10a4      	asrs	r4, r4, #2
    5b6a:	d005      	beq.n	5b78 <__libc_fini_array+0x18>
    5b6c:	3c01      	subs	r4, #1
    5b6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    5b72:	4798      	blx	r3
    5b74:	2c00      	cmp	r4, #0
    5b76:	d1f9      	bne.n	5b6c <__libc_fini_array+0xc>
    5b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b7c:	f001 bef8 	b.w	7970 <__init_array_end>
	...

00005b88 <vtable for APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>>:
	...
    5b90:	19b1 0000 18ed 0000 0e35 0000 14e9 0000     ........5.......
    5ba0:	046d 0000 0471 0000 15e5 0000               m...q.......

00005bac <BlacK_Blue_Magenta_White_gp>:
    5bac:	0000 0000 002a 2d00 0054 ff00 2a7f ff00     ....*..-T....*..
    5bbc:	ffaa ff00 ffd4 ff37 ffff ffff               ......7.....

00005bc8 <Fire_1_gp>:
    5bc8:	ff00 0000 ff7f 0037 ffff 00ff               ......7.....

00005bd4 <b_gp>:
    5bd4:	0000 0000 003f ff00 ff7f 0000 ffbf 00ff     ....?...........
    5be4:	ffff ffff                                   ....

00005be8 <hallows_gp>:
    5be8:	0100 0101 f714 011c ea19 0388 0123 0101     ............#...
    5bf8:	f730 011c ea33 0388 013d 0101 f74c 011c     0...3...=...L...
    5c08:	f45b 01b0 ea6b 0388 017a 0101 ea8c 0388     [...k...z.......
    5c18:	f499 01b0 f7a8 011c 01ba 0101 f7c4 011c     ................
    5c28:	eacc 0388 01d8 0101 eae5 0388 f7ef 011c     ................
    5c38:	01f9 0101 01ff 0101                         ........

00005c40 <es_landscape_64_gp>:
    5c40:	0000 0000 0225 0119 0f4c 0573 4f7f 01d5     ....%...L.s..O..
    5c50:	7e80 2fd3 bc82 f7d1 9099 cdb6 3bcc fa75     .~./.........;u.
    5c60:	01ff c025                                   ..%.

00005c64 <scoutie_gp>:
    5c64:	ff00 009c 007f 12c3 01d8 2700 01ff 2700     ...........'...'

00005c74 <Cyan_Magenta_Blue_gp>:
    5c74:	0000 ffff 2a3f ff37 ff7f ff00 2abf ff00     ....?*7......*..
    5c84:	00ff ff00                                   ....

00005c88 <purple_flower_gp>:
    5c88:	0000 0000 1442 2d04 7984 ff14 b3b4 ff49     ....B..-.y....I.
    5c98:	ffe4 ffa4 fff1 ffcf ffff ffff               ............

00005ca4 <sea_treasure_gp>:
    5ca4:	0100 050d 0319 1939 122d acbf 023d 0c1d     ......9.-...=...
    5cb4:	034c 1939 1265 acbf 0a7c 1436 0199 0c1e     L.9.e...|.6.....
    5cc4:	0ab2 160e 09d1 2f5d 08e8 1637 01ff 050d     ......]/..7.....

00005cd4 <bhw3_61_gp>:
    5cd4:	0e00 1b01 1130 5801 0168 9c58 01a0 2a36     ....0..Xh.X...6*
    5ce4:	09db 34eb 8bff e9eb                         ...4....

00005cec <Magenta_Evening_gp>:
    5cec:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
    5cfc:	fc4c 4501 7b6c 3302 2eff 2309               L..El{.3...#

00005d08 <vibrant_gp>:
    5d08:	ff00 ffff 011e 1d90 e547 0cf6 ff77 0801     ........G...w...
    5d18:	b8a5 cb01 03d6 fa1c 00ff 0000               ............

00005d24 <a_gp>:
    5d24:	0000 0000 001f 0037 003f 2dff ff7f ff00     ......7.?..-....
    5d34:	ffa3 2d00 ffc4 0000 ffff 00ff               ...-........

00005d40 <RedsandCyans_gp>:
    5d40:	0f00 8760 284e 4a57 5366 2250 7172 1d47     ..`.N(WJfSP"rqG.
    5d50:	967f 193f 3c8f 424f 0fb6 8760 0fdf 8760     ..?..<OB..`...`.
    5d60:	0fff 8760                                   ..`.

00005d64 <es_pinksplash_07_gp>:
    5d64:	e500 0101 f23d 3f04 ff65 ff0c f97f fc51     ....=..?e.....Q.
    5d74:	ff99 eb0b f4c1 4405 e8ff 0501 4d56 5044     .......D....VMDP
    5d84:	5f56 7c31 5f31 4d56 5044 0a56 ff00 ffff     V_1|1_VMDPV.....

00005d94 <ultraviolet_mold_gp>:
    5d94:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    5da4:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    5db4:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    5dc4:	011e 0101 0120 0102 0123 0102 0125 0202     .... ...#...%...
    5dd4:	0228 0203 022a 0203 022d 0303 032f 0304     (...*...-.../...
    5de4:	0332 0404 0335 0504 0437 0505 043a 0605     2...5...7...:...
    5df4:	043c 0705 053f 0706 0541 0806 0544 0907     <...?...A...D...
    5e04:	0546 0a07 0649 0b08 064b 0c08 064e 0d08     F...I...K...N...
    5e14:	0650 0e09 0653 0f09 0655 1009 0783 3034     P...S...U.....40
    5e24:	0785 3339 0788 343f 078a 3443 078d 3245     ..93..?4..C4..E2
    5e34:	078f 3048 0792 2e4a 0794 2b4e 0697 2950     ..H0..J...N+..P)
    5e44:	069a 2554 069c 2257 069f 1f5a 06a1 1c5d     ..T%..W"..Z...].
    5e54:	05a4 1960 05a6 1664 05a9 1267 05ab 0f6b     ..`...d...g...k.
    5e64:	05ae 0d6d 05b0 0a72 04b3 0775 04b5 0579     ..m...r...u...y.
    5e74:	05b8 057c 07ba 0480 09bd 0483 0cbf 0488     ..|.............
    5e84:	10c2 048b 14c4 0390 19c7 0393 1ec9 0398     ................
    5e94:	26cc 039d 2ecf 02a1 37d1 02a6 43d4 02a9     .&.......7...C..
    5ea4:	50d6 02af 5fd9 01b2 71db 01b8 85de 01bb     .P..._...q......
    5eb4:	9de0 01c1 b8e3 01c5 c2e5 01b8 c7e8 01a8     ................
    5ec4:	ceea 0198 d2ed 0187 d9ef 0177 def2 0167     ..........w...g.
    5ed4:	e5f4 0158 eaf7 0149 f2f9 013b f7fc 012f     ..X...I...;.../.
    5ee4:	ffff 0124                                   ..$.

00005ee8 <faint_rainbow_gp>:
    5ee8:	4300 4700 4502 4101 4805 3b01 4a07 3501     .C.G.E.A.H.;.J.5
    5ef8:	4d0a 3001 4e0c 2b01 500f 2601 5311 2201     .M.0.N.+.P.&.S."
    5f08:	5614 1d01 5816 1901 5b19 1601 5e1b 1201     .V...X...[...^..
    5f18:	611e 0f01 6220 0c01 6523 0a01 6825 0701     .a.. b..#e..%h..
    5f28:	6b28 0501 6e2a 0401 712d 0201 752f 0101     (k..*n..-q../u..
    5f38:	7832 0101 7935 0101 7d37 0101 803a 0101     2x..5y..7}..:...
    5f48:	843c 0103 873f 0105 8b41 0108 8e44 010c     <...?...A...D...
    5f58:	9046 010e 9049 0110 924b 0111 944e 0113     F...I...K...N...
    5f68:	9450 0116 9653 0117 9855 011a af83 0158     P...S...U.....X.
    5f78:	b185 015d b388 0163 b38a 0168 b68d 016c     ..]...c...h...l.
    5f88:	b88f 0172 b892 0177 ba94 017d bc97 0183     ..r...w...}.....
    5f98:	bc9a 018a be9c 0190 c09f 0197 c0a1 019d     ................
    5fa8:	c2a4 01a4 c5a6 01ab c7a9 01b2 c7ab 01ba     ................
    5fb8:	c9ae 01c1 cbb0 02c9 cbb3 02d1 c9b5 02d5     ................
    5fc8:	c5b8 02d7 beba 02d7 b8bd 02d9 b3bf 02db     ................
    5fd8:	adc2 02db a7c4 02dd a1c7 02df 9dc9 02df     ................
    5fe8:	98cc 02e1 92cf 02e3 8ed1 02e5 89d4 02e5     ................
    5ff8:	84d6 03e7 7ed9 03e9 79db 03e9 76de 03eb     .....~...y...v..
    6008:	71e0 03ed 6de3 03ed 68e5 03ef 65e8 03f1     .q...m...h...e..
    6018:	61ea 03f1 5ced 03f4 58ef 03f6 54f2 04f8     .a...\...X...T..
    6028:	50f4 04f8 4ef7 04fa 4af9 04fc 47fc 04fc     .P...N...J...G..
    6038:	43ff 04ff                                   .C..

0000603c <bhw2_10_gp>:
    603c:	0000 000c 993d 70ef 007f 000c 6aa5 02ef     ....=..p.....j..
    604c:	a7c4 47e5 6ae5 02ef 00ff 000c               ...G.j......

00006058 <Tropical_Colors_gp>:
    6058:	0100 0104 010e 010a 0115 0013 0123 012a     ............#.*.
    6068:	0331 014b 383b 0167 d046 0487 d954 0236     1.K.;8g.F...T.6.
    6078:	e062 010a 7582 030f 308d 0614 2a9b 4d12     b....u...0...*.M
    6088:	24aa ff11 37c5 f261 50d2 e4ff 2fdc 4ddb     .$...7a..P.../.M
    6098:	18e1 0abb 18e4 09b4 18e6 08ab 17e8 06a1     ................
    60a8:	17eb 0595 16ed 0488 16f0 027c 15f2 0170     ..........|...p.
    60b8:	15f5 0164 14f7 0158 13fa 014d 13fc 0142     ..d...X...M...B.
    60c8:	12ff 0037                                   ..7.

000060cc <es_ocean_breeze_068_gp>:
    60cc:	6400 999c 0133 8963 0165 5444 2368 a88e     .d..3.c.e.DTh#..
    60dc:	00b2 753f 01ff 0a0a                         ..?u....

000060e4 <bhw3_21_gp>:
    60e4:	0100 6228 0130 4441 024c 60a1 0068 1951     ..(b0.ADL..`h.Q.
    60f4:	4182 52b6 0099 aa56 11b5 b6cf 11cc b6cf     .A.R..V.........
    6104:	01ff 2e17                                   ....

00006108 <otis_gp>:
    6108:	1a00 5901 117f 00c1 00d8 6222 00ff 6222     ...Y......"b.."b

00006118 <es_pinksplash_08_gp>:
    6118:	7e00 ff0b c57f 1601 d2af ac9d 9ddd 7003     .~.............p
    6128:	9dff 7003                                   ...p

0000612c <blueice_gp>:
    612c:	0000 0000 011f 0f02 013f 590a 0142 5d0c     ........?..YB..]
    613c:	0144 600d 0147 640f 0149 6910 014c 6c12     D..`G..dI..iL..l
    614c:	014e 7014 0151 7316 0153 7817 0156 7b1a     N..pQ..sS..xV..{
    615c:	0158 801d 015b 841f 015d 8921 0160 8c24     X...[...].!.`.$.
    616c:	0162 9128 0165 972b 0167 9b2e 016a a032     b.(.e.+.g...j.2.
    617c:	016c a436 016f a638 0171 aa3c 0174 ac41     l.6.o.8.q.<.t.A.
    618c:	0176 ae45 0179 b248 017b b44d 017e b651     v.E.y.H.{.M.~.Q.
    619c:	0180 b856 0183 bc5b 0186 be60 0188 c065     ..V...[...`...e.
    61ac:	018b c56b 018d c770 0190 c976 0192 cb7c     ..k...p...v...|.
    61bc:	0195 cf82 0197 d28a 019a d490 019c d697     ................
    61cc:	019f db9f 01a1 dda6 01a4 dfad 01a6 e4b6     ................
    61dc:	01a9 e6bd 01ab e9c7 01ae ebcf 01b0 f0d9     ................
    61ec:	01b3 f2e1 01b5 f5eb 02b8 f7f6 02ba f7fc     ................
    61fc:	02bd f2ff 3dde f7ff ffff ffff               .....=......

00006208 <es_landscape_33_gp>:
    6208:	0100 0005 2013 0117 a126 0137 e53f 0190     ..... ..&.7.?...
    6218:	2742 4a8e 01ff 0104                         B'.J....

00006220 <froth316_gp>:
    6220:	f700 0000 f711 0000 9d11 0000 9d21 0000     ............!...
    6230:	5621 0000 5633 0000 2733 0000 2744 0000     !V..3V..3'..D'..
    6240:	0c44 0000 0c54 0000 0054 00f8 0066 00f8     D...T...T...f...
    6250:	0066 00a9 0077 00a9 0077 0065 0087 0065     f...w...w.e...e.
    6260:	0087 0034 0099 0034 0099 0013 00aa 0013     ..4...4.........
    6270:	00aa f700 00ba f700 00ba a000 00cc a000     ................
    6280:	00cc 5900 00dd 5900 00dd 2a00 00ed 2a00     ...Y...Y...*...*
    6290:	00ed 0e00 00ff 0e00                         ........

00006298 <fierce_ice_gp>:
    6298:	0000 0000 003b 2d07 0077 ff21 0395 ff52     ....;..-w.!...R.
    62a8:	17b4 ff9c 64d9 ffcb ffff ffff               .....d......

000062b4 <Sunset_Real_gp>:
    62b4:	7800 0000 b316 0016 ff33 0068 a755 1216     .x......3.h.U...
    62c4:	6487 6700 10c6 8200 00ff a000               .d.g........

000062d0 <Fuschia_7_gp>:
    62d0:	2b00 9903 643f 6704 bc7f 4205 a1bf 730b     .+..?d.g...B...s
    62e0:	87ff b614                                   ....

000062e4 <rainbow2_gp>:
    62e4:	7e00 8e01 ab19 1a01 e030 0109 ed47 018a     .~......0...G...
    62f4:	345e 01ad 0175 01c9 018c 36d3 01a3 a87c     ^4..u......6..|.
    6304:	01ba 9508 0cd1 9701 0ce8 9701 abff be01     ................

00006314 <Split_03_gp>:
    6314:	0000 7b12 003f 1d4b 007f 01b2 1bbf 0130     ...{?.K.......0.
    6324:	a7ff 0201                                   ....

00006328 <GMT_drywet_gp>:
    6328:	2f00 021e d52a 1893 6754 34db 037f cfdb     ./..*...Tg.4....
    6338:	01aa d630 01d4 6f01 01ff 2107               ..0....o...!

00006344 <cloudcolors_gp>:
    6344:	0000 ff00 000f 8b00 006f 8b00 007f ff00     ........o.......
    6354:	008f 8b00 879f face 87af face adbf e6d8     ................
    6364:	c8cf c8c8 addf e6d8 87ef ebce 00ff ffbf     ................

00006374 <cw1_029_gp>:
    6374:	0c00 d250 ff7f 13eb e0ff 0f42               ..P.......B.

00006380 <BlacK_Red_Magenta_Yellow_gp>:
    6380:	0000 0000 2a2a 0000 ff54 0000 ff7f 2d00     ....**..T......-
    6390:	ffaa ff00 ffd4 2d37 ffff 00ff               ......7-....

0000639c <bhw4_009_gp>:
    639c:	4200 c0ba 012b 4716 024f 8e68 4275 c0ba     .B..+..GO.h.uB..
    63ac:	0293 8e68 01ba 4716 02e0 8e68 04ff 1c1b     ..h....G..h.....

000063bc <bhw3_13_gp>:
    63bc:	0300 4806 0c26 bc32 d96d 0123 f287 0caf     ...H&.2.m.#.....
    63cc:	a1b2 5720 18ff 6c06                         .. W...l

000063d4 <Analogous_1_gp>:
    63d4:	0300 ff00 173f ff00 437f ff00 8ebf 2d00     ....?....C.....-
    63e4:	ffff 0000                                   ....

000063e8 <GMT_cool_gp>:
    63e8:	0000 ffff ffff ff00                         ........

000063f0 <es_emerald_dragon_01_gp>:
    63f0:	0100 0101 014f 0713 0182 193b 1ce5 ffff     ....O.....;.....
    6400:	1cff ffff                                   ....

00006404 <alarm_p4_0_2_gp>:
    6404:	e300 dfff ff0c 0424 ff19 0102 ff26 1001     ......$.....&...
    6414:	ff33 6201 ff3f e601 8c4c ff01 3f59 ff01     3..b?...L...Y?..
    6424:	1866 ff01 0572 ff01 017f ff01 018c ff04     f...r...........
    6434:	0199 ff10 01a5 ff24 01b2 ff3e 01bf ff5f     ......$...>..._.
    6444:	01cc ff83 01d8 ffad 01e5 ffdd 01f2 ebff     ................
    6454:	01ff baff                                   ....

00006458 <water1_gp>:
    6458:	0100 2e01 4f1c be88 1035 b851 4f49 be88     .....O..5.Q.IO..
    6468:	4b63 e9c9 067c 670c 4b9e e9c9 54ba 6c6d     cK..|..g.K...Tml
    6478:	10c6 b851 4fe8 be88 01ff 2e01               ..Q..O......

00006484 <bhw1_28_gp>:
    6484:	4b00 dd01 fc1e ff49 a930 f200 0077 f295     .K....I.0...w...
    6494:	2baa f200 fcce ff49 4ee8 d60c 00ff f295     .+....I..N......

000064a4 <purplefly_gp>:
    64a4:	0000 0000 ef3f 7a00 fcbf 4eff 00ff 0000     ....?..z...N....

000064b4 <Skydye11_gp>:
    64b4:	0800 0400 0801 0400 0c02 0800 1003 0c00     ................
    64c4:	1404 0c00 1405 1000 1806 1000 1c07 1400     ................
    64d4:	1c09 1400 200a 1800 240b 1800 240c 1c00     ..... ...$...$..
    64e4:	280d 1c00 2c0e 2000 300f 2400 3410 2400     .(...,. .0.$.4.$
    64f4:	3811 2800 3c12 2c00 3c14 2c00 4015 3000     .8.(.<.,.<.,.@.0
    6504:	4416 3400 4817 3400 4c18 3800 4c19 3804     .D.4.H.4.L.8.L.8
    6514:	501a 3c04 541b 3c04 581c 4004 5c1d 4404     .P.<.T.<.X.@.\.D
    6524:	601e 4808 601f 4c08 5c20 5008 5821 5408     .`.H.`.L \.P!X.T
    6534:	5422 5c08 5423 6008 5024 6808 4c25 6c08     "T.\#T.`$P.h%L.l
    6544:	4826 7008 4827 7808 4428 7c08 4029 8408     &H.p'H.x(D.|)@..
    6554:	3c2a 8808 3c2b 9008 382c 9408 342d 9808     *<..+<..,8..-4..
    6564:	302e a008 302f a404 2c30 ac04 2831 b004     .0../0..0,..1(..
    6574:	2432 b404 2433 bc04 2034 c004 1c35 c804     2$..3$..4 ..5...
    6584:	1836 cc04 1837 d404 1438 d804 1039 dc04     6...7...8...9...
    6594:	0c3a e404 0c3b e804 083c f004 043d f404     :...;...<...=...
    65a4:	003e fc00 003f f804 0040 f40c 0041 f014     >...?...@...A...
    65b4:	0042 ec1c 0043 e824 0044 e42c 0045 e034     B...C.$.D.,.E.4.
    65c4:	0046 dc3c 0047 d844 0048 d44c 0049 d054     F.<.G.D.H.L.I.T.
    65d4:	004a cc5c 004b c864 004c c46c 004d c074     J.\.K.d.L.l.M.t.
    65e4:	004e bc7c 004f b884 0050 b48c 0051 b094     N.|.O...P...Q...
    65f4:	0052 ac9c 0053 a8a4 0054 a4ac 0055 a0b4     R...S...T...U...
    6604:	0056 9cbc 0057 98c4 0058 94cc 0059 90d4     V...W...X...Y...
    6614:	005a 8cdc 005b 88e4 005c 84ec 005d 7ce8     Z...[...\...]..|
    6624:	005e 78e0 005f 70dc 0060 68d8 0061 60d0     ^..x_..p`..ha..`
    6634:	0062 5cc8 0063 58c0 0064 50b8 0065 4cac     b..\c..Xd..Pe..L
    6644:	0066 44a4 0067 409c 0068 3894 0069 348c     f..Dg..@h..8i..4
    6654:	006a 2c80 006b 2878 006c 2070 006d 1c68     j..,k.x(l.p m.h.
    6664:	006e 145c 006f 1054 0070 084c 0071 0040     n.\.o.T.p.L.q.@.
    6674:	0072 003c 0073 0038 0074 0034 0075 0030     r.<.s.8.t.4.u.0.
    6684:	0076 002c 0077 0028 0078 0024 0479 0020     v.,.w.(.x.$.y. .
    6694:	047a 001c 047b 0018 047c 0014 047d 0010     z...{...|...}...
    66a4:	047e 000c 047f 0008 0480 0004 0881 0400     ~...............
    66b4:	0c82 0800 1083 0c00 1484 0c00 1485 1000     ................
    66c4:	1886 1000 1c87 1400 2088 1400 2089 1800     ......... ... ..
    66d4:	248a 1800 288b 1c00 2c8c 2000 308d 2400     .$...(...,. .0.$
    66e4:	348e 2404 388f 2804 3891 2804 3c92 2c04     .4.$.8.(.8.(.<.,
    66f4:	4093 3004 4494 3004 4495 3404 4896 3404     .@.0.D.0.D.4.H.4
    6704:	4c97 3804 5098 3804 5099 3c04 549a 3c04     .L.8.P.8.P.<.T.<
    6714:	589b 4004 5c9c 4404 609d 4808 609e 4c08     .X.@.\.D.`.H.`.L
    6724:	689f 4808 70a0 4408 7ca1 4008 84a2 3c08     .h.H.p.D.|.@...<
    6734:	90a3 3408 98a4 3008 a4a5 2c08 aca6 2808     ...4...0...,...(
    6744:	b4a7 2404 c0a8 2004 c8a9 1c04 d4aa 1404     ...$... ........
    6754:	dcab 1004 e8ac 0c04 f0ad 0804 fcae 0000     ................
    6764:	fcaf 0008 fcb0 0014 fcb1 001c fcb2 0028     ..............(.
    6774:	fcb3 0030 fcb4 003c fcb5 0044 fcb6 0050     ..0...<...D...P.
    6784:	fcb7 0058 fcb8 0064 fcb9 006c fcba 0078     ..X...d...l...x.
    6794:	fcbb 0084 fcbc 008c fcbd 0098 fcbe 00a0     ................
    67a4:	fcbf 00ac fcc0 00b4 fcc1 00c0 fcc2 00c8     ................
    67b4:	fcc3 00d4 fcc4 00dc fcc5 00e8 fcc6 00f0     ................
    67c4:	fcc7 00fc fcc8 00f0 fcc9 00e8 fcca 00dc     ................
    67d4:	fccb 00d0 fccc 00c4 fccd 00bc fcce 00b0     ................
    67e4:	fccf 00a4 fcd0 0098 fcd1 0090 fcd2 0084     ................
    67f4:	fcd3 0078 fcd4 0070 fcd5 0064 fcd6 0058     ..x...p...d...X.
    6804:	fcd7 004c fcd8 0044 fcd9 0038 fcda 002c     ..L...D...8...,.
    6814:	fcdb 0020 fcdc 0018 fcdd 000c fcde 0000     .. .............
    6824:	f4df 0400 ece0 0800 e0e1 0c00 d8e2 1000     ................
    6834:	cce3 1800 c4e4 1c00 b8e5 2000 b0e6 2404     ........... ...$
    6844:	a8e7 2804 9ce8 2c04 94e9 3004 88ea 3804     ...(...,...0...8
    6854:	80eb 3c04 74ec 4004 6ced 4404 60ee 4c08     ...<.t.@.l.D.`.L
    6864:	5cef 4808 54f0 4408 50f1 4008 48f2 3808     .\.H.T.D.P.@.H.8
    6874:	44f3 3404 3cf4 3004 38f5 2c04 30f6 2804     .D.4.<.0.8.,.0.(
    6884:	2cf7 2004 24f8 1c04 20f9 1804 18fa 1404     .,. .$... ......
    6894:	14fb 1000 0cfc 0800 00fd 0000 04fe 0400     ................
    68a4:	04ff 0400                                   ....

000068a8 <rainbow_gp>:
    68a8:	ff00 0000 ab20 0055 ab40 00ab 0060 00ff     .... .U.@...`...
    68b8:	0080 55ab 00a0 ff00 55c0 ab00 abe0 5500     ...U.....U.....U
    68c8:	ffff 0000                                   ....

000068cc <Coral_reef_gp>:
    68cc:	2800 c5c7 0a32 9b98 0160 786f 2b60 a27f     .(..2...`.ox`+..
    68dc:	0a8b 6f49 01ff 4722                         ..Io.."G

000068e4 <sin16_C(unsigned short)::slope>:
    68e4:	3031 262c 171f 040e                         10,&....

000068ec <bhw2_23_gp>:
    68ec:	0000 0000 3942 e9e3 ff60 08ff ff7c ffff     ....B9..`...|...
    68fc:	ff99 08ff 39bc e9e3 00ff 0000               .....9......

00006908 <bhw1_05_gp>:
    6908:	0100 35dd 49ff b203                         ...5.I..

00006910 <g_gradient_palettes>:
    6910:	75dc 0000 703c 0000 63d4 0000 6118 0000     .u..<p...c...a..
    6920:	5d64 0000 68cc 0000 60cc 0000 7264 0000     d]...h...`..dr..
    6930:	5c40 0000 6208 0000 760c 0000 7658 0000     @\...b...v..Xv..
    6940:	7558 0000 6328 0000 73e8 0000 62d0 0000     Xu..(c...s...b..
    6950:	7150 0000 7294 0000 75c0 0000 7124 0000     Pq...r...u..$q..
    6960:	5cec 0000 62b4 0000 709c 0000 5bac 0000     .\...b...p...[..
    6970:	76f0 0000 6380 0000 7670 0000 76dc 0000     .v...c..pv...v..
    6980:	758c 0000 6484 0000 68ec 0000 70ec 0000     .u...d...h...p..
    6990:	7080 0000 603c 0000 7374 0000 60e4 0000     .p..<`..ts...`..
    69a0:	76a8 0000 5d08 0000 6374 0000 6404 0000     .v...]..tc...d..
    69b0:	7100 0000 6a84 0000 5bc8 0000 7160 0000     .q...j...[..`q..
    69c0:	5d24 0000 5bd4 0000 63f0 0000 6220 0000     $]...[...c.. b..
    69d0:	64b4 0000 6c14 0000 6058 0000 7060 0000     .d...l..X`..`p..
    69e0:	72f8 0000 5be8 0000 5ca4 0000 75f8 0000     .r...[...\...u..
    69f0:	6314 0000 7390 0000 68a8 0000 6344 0000     .c...s...h..Dc..
    6a00:	7684 0000 5c88 0000 6298 0000 612c 0000     .v...\...b..,a..
    6a10:	7400 0000 763c 0000 5d94 0000 6abc 0000     .t..<v...]...j..
    6a20:	5ee8 0000 6108 0000 7628 0000 5c64 0000     .^...a..(v..d\..
    6a30:	7274 0000 63e8 0000 72d8 0000 6908 0000     tr...c...r...i..
    6a40:	70d0 0000 63bc 0000 5cd4 0000 639c 0000     .p...c...\...c..
    6a50:	6aa0 0000 6a90 0000 7704 0000 6458 0000     .j...j...w..Xd..
    6a60:	7178 0000 5d40 0000 5c74 0000 75ec 0000     xq..@]..t\...u..
    6a70:	7578 0000 72e8 0000 64a4 0000 62e4 0000     xu...r...d...b..
    6a80:	7014 0000                                   .p..

00006a84 <Orange_to_Purple_gp>:
    6a84:	d000 0132 927f 2d1b 61ff b20c               ..2....-.a..

00006a90 <es_emerald_dragon_09_gp>:
    6a90:	0100 0101 014c 0102 0a99 012f 61ff 01ff     ....L...../..a..

00006aa0 <bhw3_34_gp>:
    6aa0:	1d00 cd70 5c30 faff 345b 0cdf 047c 150d     ..p.0\..[4..|...
    6ab0:	09b7 0f67 0ad8 0250 26ff 34ff               ..g...P..&.4

00006abc <apple_green_gp>:
    6abc:	0000 0000 0102 0101 0104 0101 0107 0101     ................
    6acc:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    6adc:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    6aec:	011e 0102 0120 0102 0123 0103 0125 0103     .... ...#...%...
    6afc:	0128 0104 012a 0105 012d 0105 012f 0106     (...*...-.../...
    6b0c:	0132 0107 0134 0108 0137 0108 0139 0209     2...4...7...9...
    6b1c:	013c 020a 013e 030b 0141 040c 0143 050d     <...>...A...C...
    6b2c:	0146 070e 0148 0710 014b 0811 014d 0812     F...H...K...M...
    6b3c:	0150 0813 0152 0915 0155 0916 0157 0918     P...R...U...W...
    6b4c:	0182 083a 0185 073c 0187 073f 018a 0642     ..:...<...?...B.
    6b5c:	018d 0645 018f 0547 0192 054a 0194 044e     ..E...G...J...N.
    6b6c:	0197 0450 0199 0354 019c 0356 019e 025a     ..P...T...V...Z.
    6b7c:	01a1 025c 01a3 0160 01a6 0163 01a8 0167     ..\...`...c...g.
    6b8c:	01ab 0169 02ad 016d 02b0 0170 03b3 0175     ..i...m...p...u.
    6b9c:	03b5 0177 04b8 017c 05ba 0180 05bd 0183     ..w...|.........
    6bac:	06bf 0188 07c2 018b 09c4 0190 0ac7 0193     ................
    6bbc:	0bc9 0198 0dcc 019c 0fce 01a1 11d1 01a4     ................
    6bcc:	13d3 01a9 16d6 01ad 18d9 01b2 1bdb 01b8     ................
    6bdc:	1fde 01bb 23e0 01c1 27e3 01c5 2ce5 01cb     .....#...'...,..
    6bec:	31e8 01cf 36ea 01d5 3ced 01d9 43ef 01df     .1...6...<...C..
    6bfc:	4af2 01e3 52f4 01e9 5bf7 01ed 64f9 01f4     .J...R...[...d..
    6c0c:	6efc 01f8 79ff 00ff                         .n...y..

00006c14 <Wizzl019_gp>:
    6c14:	8c00 ac14 8c01 ac14 9402 b814 a003 c810     ................
    6c24:	9c04 c410 9805 bc10 9406 b410 8c07 ac0c     ................
    6c34:	8808 a40c 8409 9c0c 800a 940c 780b 8c08     .............x..
    6c44:	740c 8808 700d 8008 6c0e 7808 640f 7004     .t...p...l.x.d.p
    6c54:	6010 6804 5c11 6004 5812 5804 5013 5000     .`.h.\.`.X.X.P.P
    6c64:	5414 4c04 5c15 480c 6416 4414 6c17 3c1c     .T.L.\.H.d.D.l.<
    6c74:	7418 3824 7c19 342c 841a 3034 8c1b 283c     .t$8.|,4..40..<(
    6c84:	901c 2440 981d 2048 a01e 1c50 a81f 1458     ..@$..H ..P...X.
    6c94:	b020 1060 b821 0c68 c022 0870 c823 0078      .`.!.h.".p.#.x.
    6ca4:	c424 0074 bc25 0070 b426 006c ac27 0064     $.t.%.p.&.l.'.d.
    6cb4:	a428 0060 9c29 005c 942a 0058 8c2b 0050     (.`.).\.*.X.+.P.
    6cc4:	882c 004c 802d 0048 782e 0044 702f 003c     ,.L.-.H..xD./p<.
    6cd4:	6830 0038 6031 0034 5832 0030 5033 0028     0h8.1`4.2X0.3P(.
    6ce4:	4c34 0430 4835 083c 4436 0c44 3c37 1450     4L0.5H<.6DD.7<P.
    6cf4:	3838 1858 3439 1c64 303a 206c 283b 2878     88X.94d.:0l ;(x(
    6d04:	243c 2c80 203d 308c 1c3e 3494 143f 3ca0     <$.,= .0>..4?..<
    6d14:	1040 40a8 0c41 44b4 0842 48bc 0043 50c8     @..@A..DB..HC..P
    6d24:	0044 4cc0 0045 48b4 0046 44ac 0047 3ca0     D..LE..HF..DG..<
    6d34:	0048 3898 0049 348c 004a 3084 004b 2878     H..8I..4J..0K.x(
    6d44:	004c 2470 004d 2064 004e 1c5c 004f 1450     L.p$M.d N.\.O.P.
    6d54:	0050 1048 0051 0c3c 0052 0834 0053 0028     P.H.Q.<.R.4.S.(.
    6d64:	0054 0c28 0455 1c24 0456 2c24 0857 3c20     T.(.U.$.V.$,W. <
    6d74:	0c58 481c 0c59 581c 105a 6818 145b 7814     X..HY..XZ..h[..x
    6d84:	145c 8414 185d 9410 185e a410 1c5f b40c     \...]...^..._...
    6d94:	2060 c008 2061 d008 2462 e004 2863 f000     ` ..a ..b$..c(..
    6da4:	2864 e800 2465 dc00 2466 d400 2067 c800     d(..e$..f$..g ..
    6db4:	1c68 c000 1c69 b400 186a ac00 146b a000     h...i...j...k...
    6dc4:	146c 9800 106d 8c00 106e 8400 0c6f 7800     l...m...n...o..x
    6dd4:	0870 7000 0871 6400 0472 5c00 0073 5000     p..pq..dr..\s..P
    6de4:	0c74 5400 1875 5c00 2476 6400 3077 6c00     t..Tu..\v$.dw0.l
    6df4:	3c78 7400 4879 7c00 547a 8400 647b 8c00     x<.tyH.|zT..{d..
    6e04:	707c 9000 7c7d 9800 887e a000 947f a800     |p..}|..~.......
    6e14:	a080 b000 ac81 b800 b882 c000 c883 c800     ................
    6e24:	c084 c000 b485 b400 ac86 ac00 a087 a000     ................
    6e34:	9888 9800 8c89 8c00 848a 8400 788b 7800     .............x.x
    6e44:	708c 7000 648d 6400 5c8e 5c00 508f 5000     .p.p.d.d.\.\.P.P
    6e54:	4890 4800 3c91 3c00 3492 3400 2893 2800     .H.H.<.<.4.4.(.(
    6e64:	3494 2800 4095 2800 4c96 2800 5897 2800     .4.(.@.(.L.(.X.(
    6e74:	6498 2800 7099 2800 7c9a 2800 8c9b 2400     .d.(.p.(.|.(...$
    6e84:	989c 2400 a49d 2400 b09e 2400 bc9f 2400     ...$...$...$...$
    6e94:	c8a0 2400 d4a1 2400 e0a2 2400 f0a3 2000     ...$...$...$... 
    6ea4:	e8a4 2000 dca5 1c00 d4a6 1c00 c8a7 1800     ... ............
    6eb4:	c0a8 1800 b4a9 1400 acaa 1400 a0ab 1000     ................
    6ec4:	98ac 1000 8cad 0c00 84ae 0c00 78af 0800     .............x..
    6ed4:	70b0 0800 64b1 0400 5cb2 0400 50b3 0000     .p...d...\...P..
    6ee4:	58b4 0008 60b5 0010 68b6 0018 74b7 0020     .X...`...h...t .
    6ef4:	7cb8 0028 84b9 0030 8cba 0038 98bb 0040     .|(...0...8...@.
    6f04:	a0bc 0048 a8bd 0050 b0be 0058 bcbf 0060     ..H...P...X...`.
    6f14:	c4c0 0068 ccc1 0070 d4c2 0078 e0c3 0080     ..h...p...x.....
    6f24:	d8c4 007c ccc5 0074 c0c6 0070 b4c7 0068     ..|...t...p...h.
    6f34:	a8c8 0064 a0c9 005c 94ca 0058 88cb 0050     ..d...\...X...P.
    6f44:	7ccc 0048 70cd 0044 68ce 003c 5ccf 0038     .|H..pD..h<..\8.
    6f54:	50d0 0030 44d1 002c 38d2 0024 40d3 0824     .P0..D,..8$..@$.
    6f64:	4cd4 1424 58d5 1c24 64d6 2820 70d7 3020     .L$..X$..d (.p 0
    6f74:	7cd8 3c20 88d9 4420 94da 501c 9cdb 581c     .| <.. D...P...X
    6f84:	a8dc 641c b4dd 6c1c c0de 7818 ccdf 8018     ...d...l...x....
    6f94:	d8e0 8c18 e4e1 9418 f0e2 a014 e4e3 9814     ................
    6fa4:	d4e4 8c14 c4e5 8418 b4e6 7818 a8e7 7018     ...........x...p
    6fb4:	98e8 641c 88e9 5c1c 78ea 5020 6ceb 4820     ...d...\.x P.l H
    6fc4:	5cec 3c20 4ced 3424 3cee 2824 30ef 2024     .\ <.L$4.<$(.0$ 
    6fd4:	20f0 1428 10f1 0c28 00f2 002c 08f3 0c2c     . (...(...,...,.
    6fe4:	14f4 182c 1cf5 2428 28f6 3028 30f7 3c24     ..,...($.((0.0$<
    6ff4:	3cf8 4824 44f9 5420 50fa 6420 58fb 7020     .<$H.D T.P d.X p
    7004:	64fc 7c1c 6cfd 881c 78fe 9418 80ff a018     .d.|.l...x......

00007014 <blade_runner_2049_gp>:
    7014:	c900 ad50 ab19 9b39 6832 7323 5e4b 6e21     ..P...9.2h#sK^!n
    7024:	7f64 ac78 4d7d a98d 74a0 b255 14aa 731b     d.x.}M...tU....s
    7034:	4bc8 4915 2cff 2a09                         .K.I.,.*

0000703c <rgi_15_gp>:
    703c:	0400 1f01 371f 1001 c53f 0703 3b5f 1102     .....7..?..._;..
    704c:	067f 2202 279f 2106 70bf 200d 38df 2309     ...".'.!.p. .8.#
    705c:	16ff 2606                                   ...&

00007060 <slope_gp>:
    7060:	ff00 ffff ff05 00ff 000e 00ff 001c ffff     ................
    7070:	002a ff00 ff54 ff00 ff8d 0000 00ff 0000     *...T...........

00007080 <bhw2_49_gp>:
    7080:	0900 0f0f 0028 2d37 0956 0f0f 1d82 3e29     ....(.7-V.....)>
    7090:	09aa 0f0f 40d3 c708 06ff 1601               .....@......

0000709c <es_autumn_19_gp>:
    709c:	1a00 0101 4333 0104 7654 010e 8968 3498     ....3C..Tv..h..4
    70ac:	7170 0141 857a 3b95 897c 3498 7187 0141     pqA.z..;|..4.qA.
    70bc:	8b8e 2e9a 71a3 010d 37cc 0103 11f9 0101     .....q...7......
    70cc:	11ff 0101                                   ....

000070d0 <bhw2_turq_gp>:
    70d0:	0100 5f21 0126 256b 2a4c 2dff ff7f 2dff     ..!_&.k%L*.-...-
    70e0:	2ab2 2dff 01d8 256b 01ff 5f21               .*.-..k%..!_

000070ec <bhw2_22_gp>:
    70ec:	0000 0000 e363 0101 f982 5fc7 e39b 0101     ....c......_....
    70fc:	00ff 0000                                   ....

00007100 <Ribbon_Colors_gp>:
    7100:	e300 0902 c21f 0933 a73f 08af 1b5f 4ed1     ......3.?..._..N
    7110:	017f f7f8 019f a64e 01bf 6605 2adf 124f     ......N....f.*O.
    7120:	ffff 00ff                                   ....

00007124 <Colorfull_gp>:
    7124:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
    7134:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
    7144:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

00007150 <es_emerald_dragon_08_gp>:
    7150:	6100 01ff 2f65 0185 0db2 012b 02ff 010a     .a..e/....+.....

00007160 <standard_gp>:
    7160:	0000 0000 0a54 ff11 0054 0011 0aa9 0cff     ....T...T.......
    7170:	0aa9 0000 ffff 0c11                         ........

00007178 <stratosphere_sunset_gp>:
    7178:	0100 0902 0104 0902 0108 0a02 010d 0b02     ................
    7188:	0111 0b02 0115 0d03 011a 0f03 011e 1003     ................
    7198:	0123 1204 0127 1304 012b 1504 0130 1705     #...'...+...0...
    71a8:	0134 1b05 0139 2006 013d 2607 0141 3109     4...9.. =..&A..1
    71b8:	0146 3d0b 014a 5011 014f 6717 0153 871f     F..=J..PO..gS...
    71c8:	0257 ac2a 045c be30 0960 d236 0b65 d637     W.*.\.0.`.6.e.7.
    71d8:	0d69 dd3a 106d db3c 1372 d83e 1876 d242     i.:.m.<.r.>.v.B.
    71e8:	1e7b c945 237f b446 2783 a246 4088 9054     {.E..#F..'F..@T.
    71f8:	618c 8061 9491 7b79 d295 7792 b899 5c7a     .aa...y{...w..z\
    7208:	9f9e 4564 85a2 2144 6ea7 0b2a 98ab 0635     ..dE..D!.n*...5.
    7218:	cbaf 0341 deb4 0563 f2b8 078e debd 057a     ..A...c.......z.
    7228:	cbc1 0369 d0c5 0149 d2ca 0130 dece 012d     ..i...I...0...-.
    7238:	ead3 012a 96d7 0117 56db 010a 23e0 0103     ..*......V...#..
    7248:	09e4 0101 04e9 0101 01ed 0101 01f1 0101     ................
    7258:	01f6 0101 01fa 0101 01ff 0101               ............

00007264 <es_ocean_breeze_036_gp>:
    7264:	0100 0706 0159 6f63 9099 ffd1 00ff 5249     ....Y.co......IR

00007274 <sunlitwave_gp>:
    7274:	0500 5409 252d 6f18 1051 3b05 1870 1401     ...T-%.oQ..;p...
    7284:	2296 0201 afc6 0724 d0ed 1068 efff 9ed3     ."....$...h.....

00007294 <lava_gp>:
    7294:	0000 0000 122e 0000 7160 0000 8e6c 0103     ........`q..l...
    72a4:	af77 0111 d592 022c ffae 0452 ffbc 0473     w.....,...R...s.
    72b4:	ffca 049c ffda 04cb ffea 04ff fff4 47ff     ...............G
    72c4:	ffff ffff                                   ....

000072c8 <sin16_C(unsigned short)::base>:
    72c8:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

000072d8 <bhw1_sunconure_gp>:
    72d8:	1400 0ddf e8a0 0141 e8fc 0105 e8ff 0105     ......A.........

000072e8 <blue_fire_gp>:
    72e8:	0000 0000 0040 ff00 00c8 ffff ffff ffff     ....@...........

000072f8 <ofaurora_gp>:
    72f8:	ff00 f2f1 ed0a 0901 2a0f 0201 0116 0101     .........*......
    7308:	ed23 0901 ff30 f2f1 ef3a 0139 0142 0101     #...0...:.9.B...
    7318:	ef4c 0139 ff54 f2f1 f25e 01d9 0165 0101     L.9.T...^...e...
    7328:	f26d 01d9 ff77 f2f1 097f 2490 0184 0101     m...w......$....
    7338:	098c 2490 ff93 f2f1 019e ba9c 01a8 0101     ...$............
    7348:	01b2 ba9c ffba f2f1 10c6 ff0d 01ce 0101     ................
    7358:	10d8 ff0d ffe0 f2f1 4eea 9c01 0eed 1e01     .........N......
    7368:	01ef 0101 4ef4 9c01 ffff f2f1               .....N......

00007374 <bhw2_14_gp>:
    7374:	0000 0800 002d 2d00 074f ff0c 2a77 ff37     ....-..-O...w*7.
    7384:	079e ff0c 00d1 2d00 00ff 0800               .......-....

00007390 <GMT_seafloor_gp>:
    7390:	1900 6d00 1c0a 7700 2015 7f00 231f 8c00     ...m...w. ...#..
    73a0:	1b2a 9101 1435 9701 0e4a 9c04 0954 a409     *...5...J...T...
    73b0:	055f aa0f 026a b018 0174 b623 018a bc31     _...j...t.#...1.
    73c0:	0094 c542 019f cb4f 03aa d25d 0ab4 d86d     ..B...O...]...m.
    73d0:	18bf df80 2bd4 e695 48df f0ad 70e9 f7c5     .....+...H...p..
    73e0:	a3f4 ffe1 dcff fff8                         ........

000073e8 <ib15_gp>:
    73e8:	7100 935b 9d48 4e58 d059 2155 ff6b 0b1d     .q[.H.XNY.U!k...
    73f8:	898d 271f 3bff 5921                         ...'.;!Y

00007400 <twilight_gp>:
    7400:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    7410:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    7420:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    7430:	011e 0101 0120 0102 0123 0102 0125 0102     .... ...#...%...
    7440:	0228 0203 022a 0203 022d 0203 032f 0304     (...*...-.../...
    7450:	0332 0304 0435 0405 0437 0405 053a 0505     2...5...7...:...
    7460:	063c 0606 063f 0606 0741 0707 0844 0807     <...?...A...D...
    7470:	0946 0908 0949 0a08 0a4b 0b08 0b4e 0d09     F...I...K...N...
    7480:	0c50 0e09 0d53 0f09 0e55 100a 0e58 110a     P...S...U...X...
    7490:	1185 330e 1088 340e 0f8a 370e 0e8d 390e     ...3...4...7...9
    74a0:	0d8f 3d0e 0c92 3f0e 0c95 420e 0a97 450d     ...=...?...B...E
    74b0:	0a9a 480d 099c 4b0d 089f 4e0d 07a1 520e     ...H...K...N...R
    74c0:	07a4 5410 07a6 5811 07a9 5b13 07ab 5f15     ...T...X...[..._
    74d0:	07ae 6216 07b0 6619 06b3 691b 06b5 6d1d     ...b...f...i...m
    74e0:	06b8 7020 07ba 7525 08bd 782a 09bf 7d2f     .. p..%u..*x../}
    74f0:	0ac2 8036 0bc4 843b 0cc7 8942 0ec9 8c49     ..6...;...B...I.
    7500:	10cc 9150 12ce 9557 14d0 995f 16d3 9e67     ..P...W..._...g.
    7510:	18d5 a26f 1bd8 a877 1eda ac80 20dd b08a     ..o...w...... ..
    7520:	23df b693 27e2 ba9c 2ae4 c0a6 2ee7 c5b0     .#...'...*......
    7530:	34e9 c9b6 3aeb cfbb 41ee d4c1 49f0 dbc7     .4...:...A...I..
    7540:	50f2 dfcd 5af5 e6d5 64f7 ebdb 6dfa f2e1     .P...Z...d...m..
    7550:	78fc f7e7 84ff ffed                         .x......

00007558 <gr64_hult_gp>:
    7558:	0100 6d7c 0142 4f5d 3468 0141 7382 017f     ..|mB.]Oh4A..s..
    7568:	3496 0141 01c9 4856 00ef 2d37 00ff 2d37     .4A...VH..7-..7-

00007578 <cyberpunk_neon_gp>:
    7578:	7100 911c ea3f d900 0a7f c6bd 13bf 7c3e     .q..?.........>|
    7588:	09ff 3318                                   ...3

0000758c <bhw1_26_gp>:
    758c:	6b00 cd01 ff23 ffff 6b49 cd01 0a6b d295     .k..#...Ik..k...
    759c:	ff82 ffff 0a99 d295 1baa 77af 35c6 38cb     ...........w.5.8
    75ac:	84cf 87e5 ffdb ffff 84e7 87e5 35fc 38cb     .............5.8
    75bc:	35ff 38cb                                   .5.8

000075c0 <fire_gp>:
    75c0:	0100 0001 204c 0005 c092 0018 dcc5 0569     ....L ........i.
    75d0:	fcf0 1fff fcfa 6fff ffff ffff               .......o....

000075dc <ib_jul01_gp>:
    75dc:	c200 0101 015e 121d 3984 1c83 71ff 0101     ....^....9...q..

000075ec <Complementary_01a_gp>:
    75ec:	0000 ff21 2a7f 2d21 ffff 0021               ..!..*!-..!.

000075f8 <Secondary_01a_gp>:
    75f8:	0300 ff00 433f 2d07 ff7f 0021 2abf 0173     ....?C.-..!..*s.
    7608:	00ff 01ff                                   ....

0000760c <rainbowsherbet_gp>:
    760c:	ff00 0421 ff2b 1944 ff56 1907 ff7f 6752     ..!.+.D.V.....Rg
    761c:	ffaa f2ff 2ad1 16ff 57ff 41ff               .....*...W.A

00007628 <parrot_gp>:
    7628:	7e00 0100 c572 10a8 c58c 10a8 00d8 2002     .~..r.......... 
    7638:	00ff 2002                                   ... 

0000763c <green_gp>:
    763c:	0000 0000 003f 0011 007e 0052 009b 0080     ....?...~.R.....
    764c:	00b8 00ba 2adb 2ddb ffff ffff               .....*.-....

00007658 <gr65_hult_gp>:
    7658:	f700 f7b0 ff30 ff88 dc59 e21d 07a0 b252     ....0...Y.....R.
    7668:	01d8 6d7c 01ff 6d7c                         ..|m..|m

00007670 <Blue_Cyan_Yellow_gp>:
    7670:	0000 ff00 003f ff37 007f ffff 2abf 2dff     ....?.7......*.-
    7680:	ffff 00ff                                   ....

00007684 <cequal_gp>:
    7684:	0100 0101 0124 0103 014c 7b29 3b70 fc01     ....$...L.){p;..
    7694:	757f b401 efac 0151 fcc3 01b4 fcde 93fa     .u....Q.........
    76a4:	fcff fcfc                                   ....

000076a8 <bhw3_30_gp>:
    76a8:	0100 0104 010c 021c 101c 0b44 123a 1c0b     ..........D.:...
    76b8:	1f4f 301b 0260 220d 1e75 7b56 0287 3e2a     O..0`.."u.V{..*>
    76c8:	4a99 9b80 3cb5 291f a7d6 dfd3 b3ed 4e46     .J...<.)......FN
    76d8:	39ff 0702                                   .9..

000076dc <bhw1_greeny_gp>:
    76dc:	0000 0000 0727 0837 2a63 2dff 0799 0837     ....'.7.c*.-..7.
    76ec:	00ff 0000                                   ....

000076f0 <BlacK_Magenta_Red_gp>:
    76f0:	0000 0000 2a3f 2d00 ff7f ff00 ffbf 2d00     ....?*.-.......-
    7700:	ffff 0000                                   ....

00007704 <xanidu_2_gp>:
    7704:	7600 e2a1 4f35 a201 435e 0701 0184 9c37     .v..5O..^C....7.
    7714:	01ad 3d7f 27d3 482d 76ff e2a1 4d56 5044     ...=.'-H.v..VMDP
    7724:	5f45 0000 323a 003a 003a 0000 565f 444d     E_..:2:.:..._VMD
    7734:	4550 0000 4d56 5044 5f43 0000 565f 444d     PE..VMDPC_.._VMD
    7744:	4350 0000 7245 6f72 3a72 4120 7474 6d65     PC..Error: Attem
    7754:	7470 7420 206f 6573 2074 2061 6572 6461     pt to set a read
    7764:	6f2d 6c6e 2079 6176 6972 6261 656c 6f20     -only variable o
    7774:	2072 6164 6174 7420 7079 2065 6f6e 2074     r data type not 
    7784:	7573 7070 726f 6574 0d64 000a               supported...

00007790 <pin2sc1a>:
    7790:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
    77a0:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
    77b0:	ffff 1300 9303 921a ff17 ffff               ............

000077bc <digital_pin_to_info_PGM>:
    77bc:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    77cc:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    77dc:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    77ec:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    77fc:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    780c:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    781c:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    782c:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    783c:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    784c:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    785c:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    786c:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    787c:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
    788c:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
    789c:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
    78ac:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
    78bc:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
    78cc:	0a0d ffff                                   ....

000078d0 <vtable for usb_serial_class>:
	...
    78d8:	4fb5 0000 4fad 0000 4fa9 0000 4fa5 0000     .O...O...O...O..
    78e8:	4fa1 0000 4f9d 0000 4f99 0000 4f95 0000     .O...O...O...O..

000078f8 <usb_endpoint_config_table>:
    78f8:	1500 1519                                   ....

000078fc <usb_descriptor_list>:
    78fc:	0100 0000 8784 1fff 0012 0000 0200 0000     ................
    790c:	87b0 1fff 0043 0000 0300 0000 880c 1fff     ....C...........
    791c:	0000 0000 0301 0409 8798 1fff 0000 0000     ................
    792c:	0302 0409 87f4 1fff 0000 0000 0303 0409     ................
    793c:	8810 1fff 0000 0000 0000 0000 0000 0000     ................
    794c:	0000 0000                                   ....

00007950 <_init>:
    7950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7952:	bf00      	nop
    7954:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7956:	bc08      	pop	{r3}
    7958:	469e      	mov	lr, r3
    795a:	4770      	bx	lr

0000795c <__init_array_start>:
    795c:	00005b4d 	.word	0x00005b4d

00007960 <__frame_dummy_init_array_entry>:
    7960:	00000435 00002cb1 00003165 00003629     5....,..e1..)6..

Disassembly of section .fini:

00007970 <_fini>:
    7970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7972:	bf00      	nop
