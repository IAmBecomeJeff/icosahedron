
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\sound_testing\teensy40\Debug/sound_testing.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 80 f2 00 00 00 00 00 00                 ...`........

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b3 	bl	600012a4 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f90e 	bl	6000139c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fb15 	bl	600017c0 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 faf2 	bl	600017c8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f997 	bl	6000151c <usb_init>
	analog_init();
600011ee:	f000 fa43 	bl	60001678 <analog_init>
	pwm_init();
600011f2:	f000 faf5 	bl	600017e0 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f903 	bl	60001400 <tempmon_init>

	startup_late_hook();
600011fa:	f000 fb01 	bl	60001800 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 fae7 	bl	600017d8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 fae1 	bl	600017d0 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaaf 	.word	0xaaaaaaaf
60001218:	00200007 	.word	0x00200007
6000121c:	20070000 	.word	0x20070000
60001220:	00000000 	.word	0x00000000
60001224:	60001880 	.word	0x60001880
60001228:	000087b0 	.word	0x000087b0
6000122c:	20000000 	.word	0x20000000
60001230:	6000a03c 	.word	0x6000a03c
60001234:	20005250 	.word	0x20005250
60001238:	20005250 	.word	0x20005250
6000123c:	200092c0 	.word	0x200092c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	200077fc 	.word	0x200077fc
60001248:	00002559 	.word	0x00002559
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	00003ab9 	.word	0x00003ab9
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	00003bbd 	.word	0x00003bbd
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	200074c0 	.word	0x200074c0
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	200074c8 	.word	0x200074c8
60001298:	20007800 	.word	0x20007800
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012a6:	4a28      	ldr	r2, [pc, #160]	; (60001348 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012aa:	4b28      	ldr	r3, [pc, #160]	; (6000134c <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012ac:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b0:	4c27      	ldr	r4, [pc, #156]	; (60001350 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b2:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b4:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 60001390 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012b8:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ba:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012bc:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012be:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c2:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012c6:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012c8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 60001394 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012cc:	4f21      	ldr	r7, [pc, #132]	; (60001354 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ce:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d2:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d4:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012d6:	4e20      	ldr	r6, [pc, #128]	; (60001358 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012d8:	4f20      	ldr	r7, [pc, #128]	; (6000135c <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012dc:	4920      	ldr	r1, [pc, #128]	; (60001360 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012de:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e0:	4e20      	ldr	r6, [pc, #128]	; (60001364 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e2:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012e6:	4f20      	ldr	r7, [pc, #128]	; (60001368 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e8:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ec:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f0:	4e1e      	ldr	r6, [pc, #120]	; (6000136c <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f2:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f4:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f6:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012f8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 60001398 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600012fc:	4e1c      	ldr	r6, [pc, #112]	; (60001370 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012fe:	491d      	ldr	r1, [pc, #116]	; (60001374 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001300:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001304:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001306:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001308:	4f1b      	ldr	r7, [pc, #108]	; (60001378 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130a:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000130c:	4e1b      	ldr	r6, [pc, #108]	; (6000137c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000130e:	491c      	ldr	r1, [pc, #112]	; (60001380 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001310:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001312:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001314:	4f1b      	ldr	r7, [pc, #108]	; (60001384 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001316:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001318:	4e1b      	ldr	r6, [pc, #108]	; (60001388 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131a:	491c      	ldr	r1, [pc, #112]	; (6000138c <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000131c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001320:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001322:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001324:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001328:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000132c:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001330:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001334:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001338:	f852 3c88 	ldr.w	r3, [r2, #-136]
6000133c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001340:	f842 3c88 	str.w	r3, [r2, #-136]
60001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001346:	bf00      	nop
60001348:	e000ed9c 	.word	0xe000ed9c
6000134c:	e000eda0 	.word	0xe000eda0
60001350:	e000ed94 	.word	0xe000ed94
60001354:	00100009 	.word	0x00100009
60001358:	00200013 	.word	0x00200013
6000135c:	07020021 	.word	0x07020021
60001360:	200092c0 	.word	0x200092c0
60001364:	20000014 	.word	0x20000014
60001368:	13080025 	.word	0x13080025
6000136c:	10000009 	.word	0x10000009
60001370:	40000017 	.word	0x40000017
60001374:	13100033 	.word	0x13100033
60001378:	60000018 	.word	0x60000018
6000137c:	070b002f 	.word	0x070b002f
60001380:	70000019 	.word	0x70000019
60001384:	170b0037 	.word	0x170b0037
60001388:	7000001a 	.word	0x7000001a
6000138c:	130b002f 	.word	0x130b002f
60001390:	1000003f 	.word	0x1000003f
60001394:	03080025 	.word	0x03080025
60001398:	20200016 	.word	0x20200016

6000139c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000139c:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000139e:	4a17      	ldr	r2, [pc, #92]	; (600013fc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013a0:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013aa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013ae:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013b2:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013b6:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013b8:	f013 0f02 	tst.w	r3, #2
600013bc:	d006      	beq.n	600013cc <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013be:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600013c0:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013c2:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013c4:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013c6:	f013 0f02 	tst.w	r3, #2
600013ca:	d1f8      	bne.n	600013be <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600013cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600013d0:	d101      	bne.n	600013d6 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013d2:	6155      	str	r5, [r2, #20]
			continue;
600013d4:	e7ef      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600013d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600013da:	d101      	bne.n	600013e0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013dc:	6156      	str	r6, [r2, #20]
			continue;
600013de:	e7ea      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013e0:	2b00      	cmp	r3, #0
600013e2:	dae8      	bge.n	600013b6 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600013e8:	d001      	beq.n	600013ee <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013ea:	6191      	str	r1, [r2, #24]
			continue;
600013ec:	e7e3      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ee:	065b      	lsls	r3, r3, #25
600013f0:	d401      	bmi.n	600013f6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f2:	6157      	str	r7, [r2, #20]
			continue;
600013f4:	e7df      	b.n	600013b6 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013f6:	bcf0      	pop	{r4, r5, r6, r7}
600013f8:	4770      	bx	lr
600013fa:	bf00      	nop
600013fc:	400d8000 	.word	0x400d8000

60001400 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001400:	4a3b      	ldr	r2, [pc, #236]	; (600014f0 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001402:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001406:	493b      	ldr	r1, [pc, #236]	; (600014f4 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001408:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140a:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
6000140c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140e:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001412:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001414:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001518 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001418:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000141a:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000141e:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001422:	4f35      	ldr	r7, [pc, #212]	; (600014f8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001424:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001426:	f3c3 240b 	ubfx	r4, r3, #8, #12
6000142a:	4e34      	ldr	r6, [pc, #208]	; (600014fc <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000142c:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001430:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001434:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001438:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000143c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001440:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001444:	ee07 4a90 	vmov	s15, r4
60001448:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000144c:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000144e:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001452:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001456:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000145a:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145c:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001464:	4d26      	ldr	r5, [pc, #152]	; (60001500 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001466:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000146a:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000146c:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001474:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001476:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000147a:	4e22      	ldr	r6, [pc, #136]	; (60001504 <tempmon_init+0x104>)
6000147c:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000147e:	4922      	ldr	r1, [pc, #136]	; (60001508 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001480:	4c22      	ldr	r4, [pc, #136]	; (6000150c <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001482:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001486:	ee07 3a90 	vmov	s15, r3
6000148a:	4b21      	ldr	r3, [pc, #132]	; (60001510 <tempmon_init+0x110>)
6000148c:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001490:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001494:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001498:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000149c:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a8:	ee15 3a90 	vmov	r3, s11
600014ac:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014b0:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014b4:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014ba:	ea01 4105 	and.w	r1, r1, r5, lsl #16
600014be:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c6:	430b      	orrs	r3, r1
600014c8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014cc:	ee17 3a90 	vmov	r3, s15
600014d0:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
600014d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
600014d8:	430b      	orrs	r3, r1
600014da:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600014de:	6813      	ldr	r3, [r2, #0]
600014e0:	f043 0302 	orr.w	r3, r3, #2
600014e4:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014e6:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600014e8:	4b0a      	ldr	r3, [pc, #40]	; (60001514 <tempmon_init+0x114>)
600014ea:	2201      	movs	r2, #1
600014ec:	601a      	str	r2, [r3, #0]
600014ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
600014f0:	400d8180 	.word	0x400d8180
600014f4:	401f4400 	.word	0x401f4400
600014f8:	200074d4 	.word	0x200074d4
600014fc:	200074d8 	.word	0x200074d8
60001500:	200074d0 	.word	0x200074d0
60001504:	20007800 	.word	0x20007800
60001508:	0fff0000 	.word	0x0fff0000
6000150c:	e000e440 	.word	0xe000e440
60001510:	00002639 	.word	0x00002639
60001514:	e000e108 	.word	0xe000e108
60001518:	200074cc 	.word	0x200074cc

6000151c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000151c:	4b30      	ldr	r3, [pc, #192]	; (600015e0 <usb_init+0xc4>)
6000151e:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001522:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001524:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001528:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000152c:	f000 f960 	bl	600017f0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001530:	492c      	ldr	r1, [pc, #176]	; (600015e4 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001532:	482d      	ldr	r0, [pc, #180]	; (600015e8 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001534:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001538:	4c2c      	ldr	r4, [pc, #176]	; (600015ec <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000153a:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000153e:	4b2c      	ldr	r3, [pc, #176]	; (600015f0 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001540:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001544:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001548:	6822      	ldr	r2, [r4, #0]
6000154a:	4013      	ands	r3, r2
6000154c:	b91b      	cbnz	r3, 60001556 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000154e:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001552:	079a      	lsls	r2, r3, #30
60001554:	d01a      	beq.n	6000158c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001556:	4b24      	ldr	r3, [pc, #144]	; (600015e8 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001558:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000155c:	4a23      	ldr	r2, [pc, #140]	; (600015ec <usb_init+0xd0>)
6000155e:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001560:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001562:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
60001566:	f041 0102 	orr.w	r1, r1, #2
6000156a:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000156e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001572:	079b      	lsls	r3, r3, #30
60001574:	d4fb      	bmi.n	6000156e <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001576:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000157a:	491e      	ldr	r1, [pc, #120]	; (600015f4 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000157c:	4b1b      	ldr	r3, [pc, #108]	; (600015ec <usb_init+0xd0>)
6000157e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001582:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001584:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001586:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001588:	f000 f936 	bl	600017f8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000158c:	4d1a      	ldr	r5, [pc, #104]	; (600015f8 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000158e:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001590:	4b16      	ldr	r3, [pc, #88]	; (600015ec <usb_init+0xd0>)
60001592:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001596:	4c14      	ldr	r4, [pc, #80]	; (600015e8 <usb_init+0xcc>)
60001598:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000159a:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000159c:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000159e:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a0:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015a2:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a6:	f44f 7220 	mov.w	r2, #640	; 0x280
600015aa:	f000 f91d 	bl	600017e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015ae:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600015b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015b6:	f240 1343 	movw	r3, #323	; 0x143
600015ba:	4a10      	ldr	r2, [pc, #64]	; (600015fc <usb_init+0xe0>)
600015bc:	4910      	ldr	r1, [pc, #64]	; (60001600 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015be:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600015c0:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600015c2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
600015c6:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015ce:	4a0d      	ldr	r2, [pc, #52]	; (60001604 <usb_init+0xe8>)
600015d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d4:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015d6:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015d8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
600015dc:	bd70      	pop	{r4, r5, r6, pc}
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	400fc000 	.word	0x400fc000
600015e8:	402e0000 	.word	0x402e0000
600015ec:	400d9000 	.word	0x400d9000
600015f0:	001e1c00 	.word	0x001e1c00
600015f4:	e000e28c 	.word	0xe000e28c
600015f8:	20009000 	.word	0x20009000
600015fc:	20007800 	.word	0x20007800
60001600:	000027a5 	.word	0x000027a5
60001604:	e000e10c 	.word	0xe000e10c

60001608 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
FLASHMEM void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
60001608:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
6000160c:	b4f0      	push	{r4, r5, r6, r7}
6000160e:	bf28      	it	cs
60001610:	f44f 7160 	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
60001614:	b672      	cpsid	i
	memory_pool = data;
	memory_pool_first_mask = 0;
60001616:	2500      	movs	r5, #0
60001618:	4b13      	ldr	r3, [pc, #76]	; (60001668 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
6000161a:	4f14      	ldr	r7, [pc, #80]	; (6000166c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)
	memory_pool_first_mask = 0;
6000161c:	4e14      	ldr	r6, [pc, #80]	; (60001670 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000161e:	462c      	mov	r4, r5
60001620:	f103 0270 	add.w	r2, r3, #112	; 0x70

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
60001624:	6038      	str	r0, [r7, #0]
	memory_pool_first_mask = 0;
60001626:	8035      	strh	r5, [r6, #0]
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001628:	f843 4f04 	str.w	r4, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
6000162c:	4293      	cmp	r3, r2
6000162e:	d1fb      	bne.n	60001628 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x20>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
60001630:	b1b9      	cbz	r1, 60001662 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5a>
60001632:	2300      	movs	r3, #0
60001634:	4e0f      	ldr	r6, [pc, #60]	; (60001674 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001636:	2701      	movs	r7, #1
60001638:	095d      	lsrs	r5, r3, #5
6000163a:	f003 041f 	and.w	r4, r3, #31
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
6000163e:	3301      	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001640:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
60001644:	fa07 f404 	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
60001648:	428b      	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000164a:	ea42 0204 	orr.w	r2, r2, r4
6000164e:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
60001652:	d1f1      	bne.n	60001638 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x30>
60001654:	2300      	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60001656:	8043      	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
60001658:	3301      	adds	r3, #1
6000165a:	f500 7082 	add.w	r0, r0, #260	; 0x104
6000165e:	428b      	cmp	r3, r1
60001660:	d1f9      	bne.n	60001656 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4e>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
60001662:	b662      	cpsie	i

}
60001664:	bcf0      	pop	{r4, r5, r6, r7}
60001666:	4770      	bx	lr
60001668:	20007704 	.word	0x20007704
6000166c:	20007778 	.word	0x20007778
60001670:	2000777c 	.word	0x2000777c
60001674:	20007708 	.word	0x20007708

60001678 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001678:	4b11      	ldr	r3, [pc, #68]	; (600016c0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000167a:	4912      	ldr	r1, [pc, #72]	; (600016c4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000167c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000167e:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001680:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001684:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001686:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001688:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000168c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000168e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001690:	f440 7040 	orr.w	r0, r0, #768	; 0x300
60001694:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001696:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001698:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000169a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000169c:	061b      	lsls	r3, r3, #24
6000169e:	d4fc      	bmi.n	6000169a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016a0:	4b09      	ldr	r3, [pc, #36]	; (600016c8 <analog_init+0x50>)
600016a2:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a6:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600016a8:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016aa:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016ac:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600016ae:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016b0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600016b4:	d1fb      	bne.n	600016ae <analog_init+0x36>
	calibrating = 0;
600016b6:	4a05      	ldr	r2, [pc, #20]	; (600016cc <analog_init+0x54>)
600016b8:	7013      	strb	r3, [r2, #0]
}
600016ba:	bc30      	pop	{r4, r5}
600016bc:	4770      	bx	lr
600016be:	bf00      	nop
600016c0:	400fc000 	.word	0x400fc000
600016c4:	400c4000 	.word	0x400c4000
600016c8:	400c8000 	.word	0x400c8000
600016cc:	200077a1 	.word	0x200077a1

600016d0 <adc2_pin_to_channel>:
600016d0:	0b0c0807 000f0506 ffff0e0d 08070403     ................
600016e0:	05060b0c 0e0d000f 0403ffff              ............

600016ec <usb_string_product_name_default>:
600016ec:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
600016fc:	00610069 0000006c                       i.a.l...

60001704 <usb_string_manufacturer_name_default>:
60001704:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001714:	00690075 006f006e                       u.i.n.o.

6000171c <string0>:
6000171c:	04090304                                ....

60001720 <usb_config_descriptor_12>:
60001720:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001730:	24050001 05011000 01010124 06022404     ...$....$....$..
60001740:	00062405 82050701 10001003 00010409     .$..............
60001750:	00000a02 03050700 00004002 02840507     .........@......
60001760:	00000040                                @...

60001764 <usb_config_descriptor_480>:
60001764:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001774:	24050001 05011000 01010124 06022404     ...$....$....$..
60001784:	00062405 82050701 05001003 00010409     .$..............
60001794:	00000a02 03050700 00020002 02840507     ................
600017a4:	00000200                                ....

600017a8 <qualifier_descriptor>:
600017a8:	0200060a 40000002 ffff0001              .......@....

600017b4 <_init>:
600017b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600017b6:	bf00      	nop
600017b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
600017ba:	bc08      	pop	{r3}
600017bc:	469e      	mov	lr, r3
600017be:	4770      	bx	lr

600017c0 <__set_arm_clock_veneer>:
600017c0:	f85f f000 	ldr.w	pc, [pc]	; 600017c4 <__set_arm_clock_veneer+0x4>
600017c4:	00001e01 	.word	0x00001e01

600017c8 <__startup_early_hook_veneer>:
600017c8:	f85f f000 	ldr.w	pc, [pc]	; 600017cc <__startup_early_hook_veneer+0x4>
600017cc:	00002571 	.word	0x00002571

600017d0 <__main_veneer>:
600017d0:	f85f f000 	ldr.w	pc, [pc]	; 600017d4 <__main_veneer+0x4>
600017d4:	00003bdd 	.word	0x00003bdd

600017d8 <____libc_init_array_veneer>:
600017d8:	f85f f000 	ldr.w	pc, [pc]	; 600017dc <____libc_init_array_veneer+0x4>
600017dc:	00004b91 	.word	0x00004b91

600017e0 <__pwm_init_veneer>:
600017e0:	f85f f000 	ldr.w	pc, [pc]	; 600017e4 <__pwm_init_veneer+0x4>
600017e4:	00002269 	.word	0x00002269

600017e8 <__memset_veneer>:
600017e8:	f85f f000 	ldr.w	pc, [pc]	; 600017ec <__memset_veneer+0x4>
600017ec:	00005255 	.word	0x00005255

600017f0 <__usb_init_serialnumber_veneer>:
600017f0:	f85f f000 	ldr.w	pc, [pc]	; 600017f4 <__usb_init_serialnumber_veneer+0x4>
600017f4:	00002f5d 	.word	0x00002f5d

600017f8 <__delay_veneer>:
600017f8:	f85f f000 	ldr.w	pc, [pc]	; 600017fc <__delay_veneer+0x4>
600017fc:	000020c5 	.word	0x000020c5

60001800 <__startup_late_hook_veneer>:
60001800:	f85f f000 	ldr.w	pc, [pc]	; 60001804 <__startup_late_hook_veneer+0x4>
60001804:	00002575 	.word	0x00002575

60001808 <__init_array_start>:
60001808:	00000045 	.word	0x00000045
6000180c:	00000375 	.word	0x00000375
60001810:	00000701 	.word	0x00000701
60001814:	00000a45 	.word	0x00000a45
60001818:	00000cc9 	.word	0x00000cc9
6000181c:	00000ce1 	.word	0x00000ce1
60001820:	00000cf9 	.word	0x00000cf9
60001824:	00000d11 	.word	0x00000d11
60001828:	00000d29 	.word	0x00000d29
6000182c:	00000d41 	.word	0x00000d41
60001830:	00000d59 	.word	0x00000d59
60001834:	00000d71 	.word	0x00000d71
60001838:	00000d89 	.word	0x00000d89
6000183c:	00000da1 	.word	0x00000da1
60001840:	00000db9 	.word	0x00000db9
60001844:	00000dd1 	.word	0x00000dd1
60001848:	00000de9 	.word	0x00000de9
6000184c:	00000e01 	.word	0x00000e01
60001850:	00000e19 	.word	0x00000e19
60001854:	00000e31 	.word	0x00000e31
60001858:	00000e49 	.word	0x00000e49
6000185c:	00000e61 	.word	0x00000e61
60001860:	00000e79 	.word	0x00000e79
60001864:	00000e91 	.word	0x00000e91
60001868:	00000ea9 	.word	0x00000ea9
6000186c:	00000ec1 	.word	0x00000ec1
60001870:	00001031 	.word	0x00001031
60001874:	000016f1 	.word	0x000016f1

60001878 <__init_array_end>:
60001878:	ffffffff 	.word	0xffffffff
6000187c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xe>
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	.short	0xbd10
      38:	5250      	strh	r0, [r2, r1]
      3a:	2000      	.short	0x2000
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	87b4      	strh	r4, [r6, #60]	; 0x3c
	...

00000044 <frame_dummy>:
      44:	b5104b08 	.word	0xb5104b08
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	5254      	strh	r4, [r2, r1]
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	87b4      	strh	r4, [r6, #60]	; 0x3c
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	5250      	strh	r0, [r2, r1]
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
      7c:	b510      	push	{r4, lr}
      7e:	4604      	mov	r4, r0
		disconnect();
      80:	f003 fc10 	bl	38a4 <AudioConnection::disconnect()>
	}
      84:	4620      	mov	r0, r4
      86:	bd10      	.short	0xbd10

00000088 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
      88:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
      8a:	2300      	.short	0x2300
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
      8c:	4604      	mov	r4, r0
		num_inputs(ninput), inputQueue(iqueue) {
      8e:	4812      	.short	0x4812
      90:	7261      	strb	r1, [r4, #9]
      92:	6122      	.short	0x6122
      94:	6020      	str	r0, [r4, #0]
			active = false;
      96:	7223      	.short	0x7223
			destination_list = NULL;
      98:	60e3      	str	r3, [r4, #12]
			for (int i=0; i < num_inputs; i++) {
      9a:	b141      	cbz	r1, ae <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x26>
				inputQueue[i] = NULL;
      9c:	e0004619 	.word	0xe0004619
      a0:	6922      	ldr	r2, [r4, #16]
      a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
      a6:	3301      	adds	r3, #1
      a8:	429a7a62 	.word	0x429a7a62
      ac:	dcf8      	bgt.n	a0 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
      ae:	4b0b      	ldr	r3, [pc, #44]	; (dc <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x54>)
      b0:	b90a681a 	.word	0xb90a681a
      b4:	e00d      	b.n	d2 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4a>
      b6:	461a      	mov	r2, r3
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
      b8:	6953      	ldr	r3, [r2, #20]
      ba:	2b00      	cmp	r3, #0
      bc:	d1fb      	bne.n	b6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
				p->next_update = this;
      be:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
      c0:	46202300 	.word	0x46202300
			cpu_cycles = 0;
			cpu_cycles_max = 0;
			numConnections = 0;
      c4:	72a3      	strb	r3, [r4, #10]
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
      c6:	6163      	.short	0x6163
			cpu_cycles = 0;
      c8:	80a3      	strh	r3, [r4, #4]
			cpu_cycles_max = 0;
      ca:	80e3      	.short	0x80e3
			numConnections = 0;
		}
      cc:	f85d 4b04 	ldr.w	r4, [sp], #4
      d0:	601c4770 	.word	0x601c4770
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
      d4:	e7f4      	b.n	c0 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x38>
      d6:	bf00      	.short	0xbf00
      d8:	0008      	movs	r0, r1
      da:	2000      	movs	r0, #0
      dc:	7704      	strb	r4, [r0, #28]
      de:	2000      	movs	r0, #0

000000e0 <setup>:
// GUItool: end automatically generated code

int ledPin = 13;
int timer = 0;


      e0:	b508      	push	{r3, lr}
      e2:	f640 31b8 	movw	r1, #3000	; 0xbb8
      e6:	4820      	ldr	r0, [pc, #128]	; (168 <setup+0x88>)
      e8:	f000 fa4e 	bl	588 <VisualMicroDebug::init(unsigned long)>
      ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
      f0:	f000481d 	.word	0xf000481d
      f4:	fa45 2101 			; <UNDEFINED> instruction: 0xfa452101
      f8:	481b      	ldr	r0, [pc, #108]	; (168 <setup+0x88>)
      fa:	f000      	.short	0xf000
      fc:	fa23 bb30 			; <UNDEFINED> instruction: 0xfa23bb30
     100:	2100      	movs	r1, #0
     102:	4819      	.short	0x4819
     104:	2201      	movs	r2, #1
     106:	f000      	.short	0xf000
     108:	fadd 2101 			; <UNDEFINED> instruction: 0xfadd2101
     10c:	f0004816 	.word	0xf0004816
     110:	fa19 b130 			; <UNDEFINED> instruction: 0xfa19b130
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     114:	2106      	movs	r1, #6
     116:	4815      	.short	0x4815
     118:	f003 fa6a 	bl	35f0 <usb_serial_write>
     11c:	f0004812 	.word	0xf0004812
     120:	fa2d f44f 			; <UNDEFINED> instruction: 0xfa2df44f
void setup() {
      Serial.begin(9600);
     124:	707a      	strb	r2, [r7, #1]
     126:	f001 ffcd 	bl	20c4 <delay>
     12a:	211a      	movs	r1, #26
     12c:	4810      	ldr	r0, [pc, #64]	; (170 <setup+0x90>)
     12e:	f003 fa5f 	bl	35f0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     132:	4810      	ldr	r0, [pc, #64]	; (174 <setup+0x94>)
     134:	f003 fd70 	bl	3c18 <Print::println()>
      delay(1000);
      Serial.println("Teensy Audio AudioMemory()");
     138:	210a      	movs	r1, #10
     13a:	480f      	ldr	r0, [pc, #60]	; (178 <setup+0x98>)
     13c:	f008 fb30 	bl	87a0 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
      AudioMemory(10);
     140:	4b0e      	ldr	r3, [pc, #56]	; (17c <setup+0x9c>)
     142:	2101      	.short	0x2101
     144:	7818      	ldrb	r0, [r3, #0]
      pinMode(ledPin, OUTPUT);
     146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup() {
      Serial.begin(9600);
      delay(1000);
      Serial.println("Teensy Audio AudioMemory()");
      AudioMemory(10);
     14a:	f002 b84d 	b.w	21e8 <pinMode>
     14e:	2110      	.short	0x2110
     150:	480b      	ldr	r0, [pc, #44]	; (180 <setup+0xa0>)
     152:	f003      	.short	0xf003
     154:	fa4d 210a 			; <UNDEFINED> instruction: 0xfa4d210a
// GUItool: end automatically generated code

int ledPin = 13;
int timer = 0;


     158:	f0004803 	.word	0xf0004803
     15c:	f9e7 4802 	vld1.32	{d20[0]}, [r7], r2
     160:	f000 fa0c 	bl	57c <VisualMicroDebug::outPacketEnd()>
     164:	bf00e7cc 	.word	0xbf00e7cc
     168:	6774      	str	r4, [r6, #116]	; 0x74
     16a:	2000      	.short	0x2000
     16c:	0020      	movs	r0, r4
     16e:	2000      	.short	0x2000
     170:	0028      	movs	r0, r5
     172:	2000      	.short	0x2000
     174:	488c      	ldr	r0, [pc, #560]	; (3a8 <_GLOBAL__sub_I_adc1+0x34>)
     176:	2000      	movs	r0, #0
     178:	0000      	movs	r0, r0
     17a:	2020      	movs	r0, #32
     17c:	47f0      	blx	lr
     17e:	2000      	.short	0x2000
     180:	000c      	movs	r4, r1
     182:	2000      	.short	0x2000

00000184 <loop>:

int pk = 1, rm = 1, ff = 1;
int delayValue = 100;
unsigned long loopCount = 0;


     184:	b570      	push	{r4, r5, r6, lr}
void loop() {
     186:	4d62      	.short	0x4d62
     188:	4962      	ldr	r1, [pc, #392]	; (314 <loop+0x190>)
     18a:	682a      	.short	0x682a
     18c:	4862      	ldr	r0, [pc, #392]	; (318 <loop+0x194>)
     18e:	f003      	.short	0xf003
     190:	fd5b b672 	ldc2l	6, cr11, [fp, #-456]	; 0xfffffe38
		__enable_irq();
		return flag;
	}
	float read(void) {
		__disable_irq();
		int min = min_sample;
     194:	f6474b61 	.word	0xf6474b61
		int max = max_sample;
		min_sample = 32767;
     198:	74ff      	strb	r7, [r7, #19]
		max_sample = -32768;
     19a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		__enable_irq();
		return flag;
	}
	float read(void) {
		__disable_irq();
		int min = min_sample;
     19e:	f9b3      	.short	0xf9b3
     1a0:	101e      	asrs	r6, r3, #32
		int max = max_sample;
     1a2:	f9b3      	.short	0xf9b3
     1a4:	2020      	movs	r0, #32
		min_sample = 32767;
     1a6:	83dc      	.short	0x83dc
		max_sample = -32768;
     1a8:	8418      	strh	r0, [r3, #32]
		__enable_irq();
     1aa:	b662      	.short	0xb662
		min = abs(min);
     1ac:	2900      	cmp	r1, #0
		max = abs(max);
     1ae:	ea82      	.short	0xea82
     1b0:	73e2      	strb	r2, [r4, #15]
      Serial.printf("----%lu----\n", loopCount);
      //if (peak1.available()) {
     1b2:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 320 <loop+0x19c>
     1b6:	eba3      	.short	0xeba3
     1b8:	73e2      	strb	r2, [r4, #15]
		int min = min_sample;
		int max = max_sample;
		min_sample = 32767;
		max_sample = -32768;
		__enable_irq();
		min = abs(min);
     1ba:	bfb8      	.short	0xbfb8
     1bc:	4249      	neglt	r1, r1
     1be:	eddf      	.short	0xeddf
     1c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
     1c2:	428b      	.short	0x428b
     1c4:	4e58      	ldr	r6, [pc, #352]	; (328 <loop+0x1a4>)
     1c6:	bfb8      	.short	0xbfb8
     1c8:	460b      	movlt	r3, r1
     1ca:	ee07 3a90 	vmov	s15, r3
     1ce:	eeb8      	.short	0xeeb8
     1d0:	7ae7      	ldrb	r7, [r4, #11]
     1d2:	eec7      	.short	0xeec7
     1d4:	7a06      	ldrb	r6, [r0, #8]
     1d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
     1da:	eefd      	.short	0xeefd
     1dc:	7ae7      	ldrb	r7, [r4, #11]
     1de:	ee17      	.short	0xee17
     1e0:	2a90      	cmp	r2, #144	; 0x90
     1e2:	edc6      	.short	0xedc6
     1e4:	7a00      	ldrb	r0, [r0, #8]
            pk = (int)(peak1.read() * 100);
     1e6:	2a00      	.short	0x2a00
     1e8:	dd08      	ble.n	1fc <loop+0x78>
     1ea:	2400      	.short	0x2400
     1ec:	2101      	movs	r1, #1
     1ee:	484f      	.short	0x484f
     1f0:	440c      	add	r4, r1
     1f2:	f003 f9fd 	bl	35f0 <usb_serial_write>
     1f6:	6832      	.short	0x6832
     1f8:	42a2      	cmp	r2, r4
     1fa:	dcf7      	.short	0xdcf7
            for (int i = 0; i < pk; i++) {
                Serial.print("p"); 
            }
     1fc:	494c      	ldr	r1, [pc, #304]	; (330 <loop+0x1ac>)
     1fe:	4846      	ldr	r0, [pc, #280]	; (318 <loop+0x194>)
     200:	fd22f003 	.word	0xfd22f003
     204:	484b      	ldr	r0, [pc, #300]	; (334 <loop+0x1b0>)
            Serial.printf("\tPeak: %d\n", pk);
     // } else {
       //     Serial.println("peak1 not available");
    //  }
     206:	6a83      	.short	0x6a83
     208:	2b00      	cmp	r3, #0
     20a:	d073      	beq.n	2f4 <loop+0x170>
      if (rms1.available()) {
     20c:	f000 fbe2 	bl	9d4 <AudioAnalyzeRMS::read()>
     210:	eddf 7a44 	vldr	s15, [pc, #272]	; 324 <loop+0x1a0>
     214:	ee204e48 	.word	0xee204e48
     218:	0a27      	lsrs	r7, r4, #8
     21a:	eefd      	.short	0xeefd
     21c:	7ac0      	ldrb	r0, [r0, #11]
     21e:	ee17      	.short	0xee17
     220:	2a90      	cmp	r2, #144	; 0x90
     222:	edc6 7a00 	vstr	s15, [r6]
            rm = (int)(rms1.read() * 100);
     226:	2a00      	.short	0x2a00
     228:	dd08      	ble.n	23c <loop+0xb8>
     22a:	2400      	.short	0x2400
     22c:	2101      	movs	r1, #1
     22e:	4843      	.short	0x4843
     230:	440c      	add	r4, r1
     232:	f003 f9dd 	bl	35f0 <usb_serial_write>
     236:	6832      	ldr	r2, [r6, #0]
     238:	dcf742a2 	.word	0xdcf742a2
            for (int i = 0; i < rm; i++) {
                Serial.print("r"); 
            }
     23c:	4940      	ldr	r1, [pc, #256]	; (340 <loop+0x1bc>)
     23e:	4836      	.short	0x4836
     240:	f003 fd02 	bl	3c48 <Print::printf(char const*, ...)>
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
	}
	bool available() {
		if (outputflag == true) {
     244:	f241493f 	.word	0xf241493f
     248:	403d      	ands	r5, r7
     24a:	5c0b      	.short	0x5c0b
     24c:	bb1b      	cbnz	r3, 296 <loop+0x112>
     24e:	2117      	movs	r1, #23
     250:	f003483d 	.word	0xf003483d
     254:	f9cd 4830 	vst1.32	{d20[0]}, [sp :32], r0
     258:	f003 fcde 	bl	3c18 <Print::println()>
            }
            Serial.printf("\tFFT: %d\n", ff);
      } else {
           Serial.println("fft1024_1 not available");
      }
      
     25c:	682b      	ldr	r3, [r5, #0]
      loopCount++;
      
     25e:	4a3b      	.short	0x4a3b
            }
            Serial.printf("\tFFT: %d\n", ff);
      } else {
           Serial.println("fft1024_1 not available");
      }
      
     260:	3301      	adds	r3, #1
      loopCount++;
      
     262:	6810      	.short	0x6810
            }
            Serial.printf("\tFFT: %d\n", ff);
      } else {
           Serial.println("fft1024_1 not available");
      }
      
     264:	602b      	str	r3, [r5, #0]
      loopCount++;
      
     266:	f001      	.short	0xf001
     268:	ff2d 4839 	vceq.i32	d4, d13, d25
      delay(delayValue); // Delay for a period of time (in milliseconds).

      timer++;
     26c:	68034a39 	.word	0x68034a39
      }
      
      loopCount++;
      
      delay(delayValue); // Delay for a period of time (in milliseconds).

     270:	3301      	adds	r3, #1
      timer++;
     272:	fb82      	.short	0xfb82
     274:	2103      	movs	r1, #3
     276:	17da      	.short	0x17da
      }
      
      loopCount++;
      
      delay(delayValue); // Delay for a period of time (in milliseconds).

     278:	6003      	str	r3, [r0, #0]
      timer++;
     27a:	ebc2      	.short	0xebc2
     27c:	02a1      	lsls	r1, r4, #10
     27e:	eb02      	.short	0xeb02
     280:	0282      	lsls	r2, r0, #10
     282:	ebb3      	.short	0xebb3
     284:	0f42      	lsrs	r2, r0, #29
      if (timer % 10 == 0) {
     286:	4b34      	.short	0x4b34
      
      loopCount++;
      
      delay(delayValue); // Delay for a period of time (in milliseconds).

      timer++;
     288:	d03c      	beq.n	304 <loop+0x180>
      if (timer % 10 == 0) {
          digitalWrite(ledPin, HIGH);
      }
      else {
     28a:	2100      	.short	0x2100
     28c:	7818      	ldrb	r0, [r3, #0]
          digitalWrite(ledPin, LOW);
      }
     28e:	e8bd      	.short	0xe8bd
     290:	4070      	eors	r0, r6

      timer++;
      if (timer % 10 == 0) {
          digitalWrite(ledPin, HIGH);
      }
      else {
     292:	f001      	.short	0xf001
     294:	bfa3      	ittte	ge
			outputflag = false;
     296:	2400      	.short	0x2400
     298:	f101 0316 	add.w	r3, r1, #22
     29c:	f201 4216 	addwge	r2, r1, #1046	; 0x416
     2a0:	ed9f 7a2e 	vldrge	s14, [pc, #184]	; 35c <loop+0x1d8>
      } else {
            Serial.println("rms1 not available"); 
      }
      if (fft1024_1.available()) {
            float fftAccumulator = 0;
            for (int i = 0; i < 512; i++) {
     2a4:	eddf 6a2e 	vldrge	s13, [pc, #184]	; 360 <loop+0x1dc>
     2a8:	f833540c 	.word	0xf833540c
     2ac:	1f02      	subs	r2, r0, #4
     2ae:	ee07 1a90 	vmovlt	s15, r1
            Serial.printf("\tRMS: %d\n", rm);
      } else {
            Serial.println("rms1 not available"); 
      }
      if (fft1024_1.available()) {
            float fftAccumulator = 0;
     2b2:	429a      	cmp	r2, r3
            for (int i = 0; i < 512; i++) {
     2b4:	7a67eef8 	.word	0x7a67eef8
     2b8:	eea7 7aa6 	vfma.f32	s14, s15, s13
            Serial.printf("\tRMS: %d\n", rm);
      } else {
            Serial.println("rms1 not available"); 
      }
      if (fft1024_1.available()) {
            float fftAccumulator = 0;
     2bc:	eddfd1f5 	.word	0xeddfd1f5
            for (int i = 0; i < 512; i++) {
                  fftAccumulator += fft1024_1.read(i);
            }
     2c0:	7a19      	ldrb	r1, [r3, #8]
     2c2:	4e28      	.short	0x4e28
     2c4:	ee27 7a27 	vmul.f32	s14, s14, s15
     2c8:	7ac7eefd 	.word	0x7ac7eefd
     2cc:	ee17 2a90 	vmov	r2, s15
     2d0:	7a00edc6 	.word	0x7a00edc6
            ff = (int)(fftAccumulator * 100);
     2d4:	2a00      	cmp	r2, #0
     2d6:	dd08      	.short	0xdd08
     2d8:	2400      	movs	r4, #0
     2da:	2101      	.short	0x2101
     2dc:	4822      	ldr	r0, [pc, #136]	; (368 <loop+0x1e4>)
     2de:	440c      	.short	0x440c
     2e0:	f003 f986 	bl	35f0 <usb_serial_write>
     2e4:	42a26832 	.word	0x42a26832
     2e8:	dcf7      	bgt.n	2da <loop+0x156>
            for (int i = 0; i < ff; i++) {
                  Serial.print("f"); 
            }
     2ea:	4920      	.short	0x4920
     2ec:	480a      	ldr	r0, [pc, #40]	; (318 <loop+0x194>)
     2ee:	f003      	.short	0xf003
     2f0:	fcab e7b3 	stc2	7, cr14, [fp], #716	; 0x2cc
     2f4:	481e2112 	.word	0x481e2112
     2f8:	f003 f97a 	bl	35f0 <usb_serial_write>
     2fc:	f0034806 	.word	0xf0034806
     300:	fc8b e79f 	stc2	7, cr14, [fp], {159}	; 0x9f
      loopCount++;
      
      delay(delayValue); // Delay for a period of time (in milliseconds).

      timer++;
      if (timer % 10 == 0) {
     304:	78182101 	.word	0x78182101
          digitalWrite(ledPin, HIGH);
      }
      else {
          digitalWrite(ledPin, LOW);
      }
     308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      loopCount++;
      
      delay(delayValue); // Delay for a period of time (in milliseconds).

      timer++;
      if (timer % 10 == 0) {
     30c:	bf66f001 	.word	0xbf66f001
     310:	52dc      	strh	r4, [r3, r3]
     312:	2000      	.short	0x2000
     314:	0044      	lsls	r4, r0, #1
     316:	2000      	.short	0x2000
     318:	488c      	ldr	r0, [pc, #560]	; (54c <VisualMicroDebug::outPacketStart(bool)+0x8>)
     31a:	2000      	.short	0x2000
     31c:	52a0      	strh	r0, [r4, r2]
     31e:	2000      	.short	0x2000
     320:	fe00 46ff 	mcr2	6, 0, r4, cr0, cr15, {7}
     324:	42c80000 	.word	0x42c80000
     328:	47fc      	blxns	pc
     32a:	2000      	.short	0x2000
     32c:	0054      	lsls	r4, r2, #1
     32e:	2000      	.short	0x2000
     330:	0058      	lsls	r0, r3, #1
     332:	2000      	.short	0x2000
     334:	5270      	strh	r0, [r6, r1]
     336:	2000      	.short	0x2000
     338:	47f4      	blxns	lr
     33a:	2000      	.short	0x2000
     33c:	0064      	lsls	r4, r4, #1
     33e:	2000      	movs	r0, #0
     340:	20000068 	.word	0x20000068
     344:	52e0      	strh	r0, [r4, r3]
     346:	2000      	movs	r0, #0
     348:	0094      	lsls	r4, r2, #2
     34a:	2000      	.short	0x2000
     34c:	47f8      	blx	pc
     34e:	2000      	.short	0x2000
     350:	6734      	str	r4, [r6, #112]	; 0x70
     352:	2000      	.short	0x2000
     354:	6667      	str	r7, [r4, #100]	; 0x64
     356:	6666      	.short	0x6666
     358:	47f0      	blx	lr
     35a:	2000      	movs	r0, #0
     35c:	00000000 	.word	0x00000000
     360:	0000      	movs	r0, r0
     362:	3880      	.short	0x3880
     364:	47ec      	blxns	sp
     366:	2000      	.short	0x2000
     368:	4558      	cmp	r0, fp
     36a:	2000      	movs	r0, #0
     36c:	0088      	lsls	r0, r1, #2
     36e:	2000      	.short	0x2000
     370:	0074      	lsls	r4, r6, #1
     372:	2000      	.short	0x2000

00000374 <_GLOBAL__sub_I_adc1>:
          digitalWrite(ledPin, HIGH);
      }
      else {
          digitalWrite(ledPin, LOW);
      }
     374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

class AudioInputAnalog : public AudioStream
{
public:
        AudioInputAnalog() : AudioStream(0, NULL) { init(A2); }
        AudioInputAnalog(uint8_t pin) : AudioStream(0, NULL) { init(pin); }
     378:	4f5b2200 	.word	0x4f5b2200
	audio_block_t *inputQueueArray[1];
	int64_t accum;
	uint32_t count;

public:
	AudioAnalyzeRMS(void) : AudioStream(1, inputQueueArray) {
     37c:	4d5b      	ldr	r5, [pc, #364]	; (4ec <_GLOBAL__sub_I_adc1+0x178>)
		accum = 0;
     37e:	f04f 0800 	mov.w	r8, #0
     382:	4611      	mov	r1, r2
     384:	4638      	mov	r0, r7
		count = 0;
     386:	4692      	mov	sl, r2
     388:	f7ff fe7e 	bl	88 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     38c:	4b58      	ldr	r3, [pc, #352]	; (4f0 <_GLOBAL__sub_I_adc1+0x17c>)
     38e:	2010      	movs	r0, #16
#include "AudioStream.h"

class AudioAnalyzePeak : public AudioStream
{
public:
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
     390:	4e58      	ldr	r6, [pc, #352]	; (4f4 <_GLOBAL__sub_I_adc1+0x180>)
	int64_t accum;
	uint32_t count;

public:
	AudioAnalyzeRMS(void) : AudioStream(1, inputQueueArray) {
		accum = 0;
     392:	f04f 0900 	mov.w	r9, #0
     396:	603b      	str	r3, [r7, #0]
     398:	f000 fbd4 	bl	b44 <AudioInputAnalog::init(unsigned char)>
	audio_block_t *inputQueueArray[1];
	int64_t accum;
	uint32_t count;

public:
	AudioAnalyzeRMS(void) : AudioStream(1, inputQueueArray) {
     39c:	f105 0218 	add.w	r2, r5, #24
     3a0:	2101      	movs	r1, #1
     3a2:	4628      	mov	r0, r5

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     3a4:	4c54      	ldr	r4, [pc, #336]	; (4f8 <_GLOBAL__sub_I_adc1+0x184>)
     3a6:	f7ff fe6f 	bl	88 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     3aa:	4b54      	ldr	r3, [pc, #336]	; (4fc <_GLOBAL__sub_I_adc1+0x188>)
     3ac:	f106 0218 	add.w	r2, r6, #24
     3b0:	2101      	movs	r1, #1
     3b2:	4630      	mov	r0, r6
     3b4:	602b      	str	r3, [r5, #0]
		accum = 0;
		count = 0;
     3b6:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
	int64_t accum;
	uint32_t count;

public:
	AudioAnalyzeRMS(void) : AudioStream(1, inputQueueArray) {
		accum = 0;
     3ba:	e9c5 8908 	strd	r8, r9, [r5, #32]
     3be:	f7ff fe63 	bl	88 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     3c2:	f04f 0801 	mov.w	r8, #1
     3c6:	f504 50a2 	add.w	r0, r4, #5184	; 0x1440
     3ca:	494d      	ldr	r1, [pc, #308]	; (500 <_GLOBAL__sub_I_adc1+0x18c>)
		min_sample = 32767;
     3cc:	f647 7eff 	movw	lr, #32767	; 0x7fff
		max_sample = -32768;
     3d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     3d4:	f8df c144 	ldr.w	ip, [pc, #324]	; 51c <_GLOBAL__sub_I_adc1+0x1a8>
			active = false;
			destination_list = NULL;
     3d8:	4653      	mov	r3, sl
#include "AudioStream.h"

class AudioAnalyzePeak : public AudioStream
{
public:
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
     3da:	6031      	str	r1, [r6, #0]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     3dc:	4651      	mov	r1, sl
		min_sample = 32767;
     3de:	f8a6 e01e 	strh.w	lr, [r6, #30]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     3e2:	46a6      	mov	lr, r4
		max_sample = -32768;
     3e4:	8432      	strh	r2, [r6, #32]
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     3e6:	4602      	mov	r2, r0
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     3e8:	f884 a008 	strb.w	sl, [r4, #8]
			destination_list = NULL;
     3ec:	f8c4 a00c 	str.w	sl, [r4, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     3f0:	f884 8009 	strb.w	r8, [r4, #9]
     3f4:	f8c4 c000 	str.w	ip, [r4]
     3f8:	6120      	str	r0, [r4, #16]
     3fa:	e001      	b.n	400 <_GLOBAL__sub_I_adc1+0x8c>
     3fc:	f8de 2010 	ldr.w	r2, [lr, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     400:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     404:	3301      	adds	r3, #1
     406:	7a62      	ldrb	r2, [r4, #9]
     408:	483b      	ldr	r0, [pc, #236]	; (4f8 <_GLOBAL__sub_I_adc1+0x184>)
     40a:	429a      	cmp	r2, r3
     40c:	dcf6      	bgt.n	3fc <_GLOBAL__sub_I_adc1+0x88>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     40e:	4b3d      	ldr	r3, [pc, #244]	; (504 <_GLOBAL__sub_I_adc1+0x190>)
     410:	681a      	ldr	r2, [r3, #0]
     412:	b90a      	cbnz	r2, 418 <_GLOBAL__sub_I_adc1+0xa4>
     414:	e065      	b.n	4e2 <_GLOBAL__sub_I_adc1+0x16e>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     416:	461a      	mov	r2, r3
     418:	6953      	ldr	r3, [r2, #20]
     41a:	2b00      	cmp	r3, #0
     41c:	d1fb      	bne.n	416 <_GLOBAL__sub_I_adc1+0xa2>
				p->next_update = this;
     41e:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
     420:	f04f 0800 	mov.w	r8, #0

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     424:	f241 413c 	movw	r1, #5180	; 0x143c
     428:	4837      	ldr	r0, [pc, #220]	; (508 <_GLOBAL__sub_I_adc1+0x194>)
     42a:	f241 4c3d 	movw	ip, #5181	; 0x143d
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     42e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 520 <_GLOBAL__sub_I_adc1+0x1ac>
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     432:	2301      	movs	r3, #1

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     434:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 524 <_GLOBAL__sub_I_adc1+0x1b0>
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     438:	4642      	mov	r2, r8

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     43a:	f804 8001 	strb.w	r8, [r4, r1]
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     43e:	f44f 6180 	mov.w	r1, #1024	; 0x400

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     442:	f8c4 0418 	str.w	r0, [r4, #1048]	; 0x418
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     446:	4831      	ldr	r0, [pc, #196]	; (50c <_GLOBAL__sub_I_adc1+0x198>)
     448:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 528 <_GLOBAL__sub_I_adc1+0x1b4>

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     44c:	f804 800c 	strb.w	r8, [r4, ip]
     450:	f8c4 e000 	str.w	lr, [r4]
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     454:	f8c4 8014 	str.w	r8, [r4, #20]
			cpu_cycles = 0;
     458:	f8a4 8004 	strh.w	r8, [r4, #4]
			cpu_cycles_max = 0;
     45c:	f8a4 8006 	strh.w	r8, [r4, #6]
			numConnections = 0;
     460:	f884 800a 	strb.w	r8, [r4, #10]
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     464:	f003 ff7c 	bl	4360 <arm_cfft_radix4_init_q15>
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
     468:	4650      	mov	r0, sl
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     46a:	f8ca 6004 	str.w	r6, [sl, #4]
     46e:	f88a 8008 	strb.w	r8, [sl, #8]
     472:	f8ca 7000 	str.w	r7, [sl]
     476:	f88a 8009 	strb.w	r8, [sl, #9]
     47a:	f8ca 800c 	str.w	r8, [sl, #12]
		{ isConnected = false;
     47e:	f88a 8010 	strb.w	r8, [sl, #16]
		  connect(); }
     482:	f003 f9db 	bl	383c <AudioConnection::connect()>
// GUItool: begin automatically generated code
AudioInputAnalog         adc1(A2);           //xy=181,127
AudioAnalyzeRMS          rms1;           //xy=431,168
AudioAnalyzePeak         peak1;          //xy=433,130
AudioAnalyzeFFT1024      fft1024_1;      //xy=439,211
AudioConnection          patchCord1(adc1, peak1);
     486:	4a22      	ldr	r2, [pc, #136]	; (510 <_GLOBAL__sub_I_adc1+0x19c>)
     488:	4650      	mov	r0, sl
     48a:	4922      	ldr	r1, [pc, #136]	; (514 <_GLOBAL__sub_I_adc1+0x1a0>)
     48c:	f004 f89c 	bl	45c8 <__aeabi_atexit>
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     490:	4e21      	ldr	r6, [pc, #132]	; (518 <_GLOBAL__sub_I_adc1+0x1a4>)
		{ isConnected = false;
		  connect(); }
     492:	4648      	mov	r0, r9
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     494:	f889 8008 	strb.w	r8, [r9, #8]
     498:	f8c9 7000 	str.w	r7, [r9]
     49c:	f8c9 5004 	str.w	r5, [r9, #4]
     4a0:	f889 8009 	strb.w	r8, [r9, #9]
     4a4:	f8c9 800c 	str.w	r8, [r9, #12]
		{ isConnected = false;
     4a8:	f889 8010 	strb.w	r8, [r9, #16]
		  connect(); }
     4ac:	f003 f9c6 	bl	383c <AudioConnection::connect()>
AudioConnection          patchCord2(adc1, rms1);
     4b0:	4a17      	ldr	r2, [pc, #92]	; (510 <_GLOBAL__sub_I_adc1+0x19c>)
     4b2:	4648      	mov	r0, r9
     4b4:	4917      	ldr	r1, [pc, #92]	; (514 <_GLOBAL__sub_I_adc1+0x1a0>)
     4b6:	f004 f887 	bl	45c8 <__aeabi_atexit>
     4ba:	4630      	mov	r0, r6
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     4bc:	f886 8008 	strb.w	r8, [r6, #8]
     4c0:	6037      	str	r7, [r6, #0]
     4c2:	6074      	str	r4, [r6, #4]
     4c4:	f886 8009 	strb.w	r8, [r6, #9]
     4c8:	f8c6 800c 	str.w	r8, [r6, #12]
		{ isConnected = false;
     4cc:	f886 8010 	strb.w	r8, [r6, #16]
		  connect(); }
     4d0:	f003 f9b4 	bl	383c <AudioConnection::connect()>
AudioConnection          patchCord3(adc1, fft1024_1);
     4d4:	4630      	mov	r0, r6
     4d6:	4a0e      	ldr	r2, [pc, #56]	; (510 <_GLOBAL__sub_I_adc1+0x19c>)
     4d8:	490e      	ldr	r1, [pc, #56]	; (514 <_GLOBAL__sub_I_adc1+0x1a0>)
      if (timer % 10 == 0) {
          digitalWrite(ledPin, HIGH);
      }
      else {
          digitalWrite(ledPin, LOW);
      }
     4da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
AudioAnalyzeRMS          rms1;           //xy=431,168
AudioAnalyzePeak         peak1;          //xy=433,130
AudioAnalyzeFFT1024      fft1024_1;      //xy=439,211
AudioConnection          patchCord1(adc1, peak1);
AudioConnection          patchCord2(adc1, rms1);
AudioConnection          patchCord3(adc1, fft1024_1);
     4de:	f004 b873 	b.w	45c8 <__aeabi_atexit>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     4e2:	6018      	str	r0, [r3, #0]
     4e4:	e79c      	b.n	420 <_GLOBAL__sub_I_adc1+0xac>
     4e6:	bf00      	nop
     4e8:	200052c4 	.word	0x200052c4
     4ec:	20005270 	.word	0x20005270
     4f0:	20000978 	.word	0x20000978
     4f4:	200052a0 	.word	0x200052a0
     4f8:	200052e0 	.word	0x200052e0
     4fc:	2000093c 	.word	0x2000093c
     500:	20000930 	.word	0x20000930
     504:	20007704 	.word	0x20007704
     508:	2000011c 	.word	0x2000011c
     50c:	20006724 	.word	0x20006724
     510:	200047e8 	.word	0x200047e8
     514:	0000007d 	.word	0x0000007d
     518:	2000674c 	.word	0x2000674c
     51c:	20000008 	.word	0x20000008
     520:	20006760 	.word	0x20006760
     524:	20000924 	.word	0x20000924
     528:	20006738 	.word	0x20006738

0000052c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
     52c:	4804      	ldr	r0, [pc, #16]	; (540 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
     52e:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     530:	4411      	add	r1, r2
     532:	e001      	b.n	538 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     534:	4299      	cmp	r1, r3
     536:	d302      	bcc.n	53e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
     538:	6803      	ldr	r3, [r0, #0]
     53a:	429a      	cmp	r2, r3
     53c:	d9fa      	bls.n	534 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
     53e:	4770      	bx	lr
     540:	200074c8 	.word	0x200074c8

00000544 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
     544:	b410      	push	{r4}
     546:	4a0c      	ldr	r2, [pc, #48]	; (578 <VisualMicroDebug::outPacketStart(bool)+0x34>)
     548:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DEBUGGER_TYPE != VM_DEBUGGER_TYPE_NET_UDP)
	if (!noWait)
     54a:	b971      	cbnz	r1, 56a <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
     54c:	6841      	ldr	r1, [r0, #4]
     54e:	6813      	ldr	r3, [r2, #0]
     550:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
     552:	2931      	cmp	r1, #49	; 0x31
     554:	d809      	bhi.n	56a <VisualMicroDebug::outPacketStart(bool)+0x26>
     556:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     558:	f100 0332 	add.w	r3, r0, #50	; 0x32
     55c:	1a59      	subs	r1, r3, r1
     55e:	e001      	b.n	564 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     560:	4299      	cmp	r1, r3
     562:	d302      	bcc.n	56a <VisualMicroDebug::outPacketStart(bool)+0x26>
     564:	6813      	ldr	r3, [r2, #0]
     566:	4298      	cmp	r0, r3
     568:	d9fa      	bls.n	560 <VisualMicroDebug::outPacketStart(bool)+0x1c>
     56a:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
     56c:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     56e:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
     570:	f85d 4b04 	ldr.w	r4, [sp], #4
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	200074c8 	.word	0x200074c8

0000057c <VisualMicroDebug::outPacketEnd()>:
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
		port().TDR = data;		// output 16 bit data.
     57c:	4770      	bx	lr
		//while (!(port().SR & SPI_SR_TCF)) ; // wait
		//return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		uint32_t tcr = port().TCR;
		port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ(15);  // turn on 16 bit mode 
     57e:	bf00      	nop

00000580 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
     580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     584:	f001 bd9e 	b.w	20c4 <delay>

00000588 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
     588:	2300      	movs	r3, #0
     58a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
     58c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
     58e:	b141      	cbz	r1, 5a2 <VisualMicroDebug::init(unsigned long)+0x1a>
     590:	4804      	ldr	r0, [pc, #16]	; (5a4 <VisualMicroDebug::init(unsigned long)+0x1c>)
     592:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     594:	4411      	add	r1, r2
     596:	e001      	b.n	59c <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     598:	4299      	cmp	r1, r3
     59a:	d302      	bcc.n	5a2 <VisualMicroDebug::init(unsigned long)+0x1a>
     59c:	6803      	ldr	r3, [r0, #0]
     59e:	429a      	cmp	r2, r3
     5a0:	d9fa      	bls.n	598 <VisualMicroDebug::init(unsigned long)+0x10>
     5a2:	4770      	bx	lr
     5a4:	200074c8 	.word	0x200074c8

000005a8 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
     5a8:	b538      	push	{r3, r4, r5, lr}
     5aa:	4c0f      	ldr	r4, [pc, #60]	; (5e8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
     5ac:	460d      	mov	r5, r1
     5ae:	2106      	movs	r1, #6
     5b0:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     5b2:	6043      	str	r3, [r0, #4]
     5b4:	480d      	ldr	r0, [pc, #52]	; (5ec <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
     5b6:	f003 f81b 	bl	35f0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     5ba:	220a      	movs	r2, #10
     5bc:	2300      	movs	r3, #0
     5be:	4629      	mov	r1, r5
     5c0:	480b      	ldr	r0, [pc, #44]	; (5f0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     5c2:	f003 fb51 	bl	3c68 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     5c6:	2106      	movs	r1, #6
     5c8:	480a      	ldr	r0, [pc, #40]	; (5f4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
     5ca:	f003 f811 	bl	35f0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     5ce:	4808      	ldr	r0, [pc, #32]	; (5f0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     5d0:	f003 fb22 	bl	3c18 <Print::println()>
     5d4:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     5d6:	f102 0132 	add.w	r1, r2, #50	; 0x32
     5da:	e001      	b.n	5e0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     5dc:	4299      	cmp	r1, r3
     5de:	d302      	bcc.n	5e6 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
     5e0:	6823      	ldr	r3, [r4, #0]
     5e2:	429a      	cmp	r2, r3
     5e4:	d9fa      	bls.n	5dc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
     5e6:	bd38      	pop	{r3, r4, r5, pc}
     5e8:	200074c8 	.word	0x200074c8
     5ec:	200000c4 	.word	0x200000c4
     5f0:	2000488c 	.word	0x2000488c
     5f4:	200000cc 	.word	0x200000cc

000005f8 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
     5f8:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
     5fa:	7e03      	ldrb	r3, [r0, #24]
     5fc:	b90b      	cbnz	r3, 602 <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
     5fe:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
     600:	bd38      	pop	{r3, r4, r5, pc}
     602:	460d      	mov	r5, r1
     604:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     606:	f002 ff8d 	bl	3524 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
     60a:	f010 0fff 	tst.w	r0, #255	; 0xff
     60e:	d101      	bne.n	614 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
     610:	2065      	movs	r0, #101	; 0x65
     612:	bd38      	pop	{r3, r4, r5, pc}
     614:	f002 ff86 	bl	3524 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
     618:	f010 0fff 	tst.w	r0, #255	; 0xff
     61c:	d0f8      	beq.n	610 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
     61e:	f002 ffc1 	bl	35a4 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
     622:	b2c0      	uxtb	r0, r0
     624:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
     628:	2b1e      	cmp	r3, #30
     62a:	d8f3      	bhi.n	614 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
     62c:	a201      	add	r2, pc, #4	; (adr r2, 634 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
     62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     632:	bf00      	nop
     634:	000006bd 	.word	0x000006bd
     638:	00000615 	.word	0x00000615
     63c:	00000615 	.word	0x00000615
     640:	00000615 	.word	0x00000615
     644:	00000615 	.word	0x00000615
     648:	00000615 	.word	0x00000615
     64c:	00000615 	.word	0x00000615
     650:	00000615 	.word	0x00000615
     654:	00000615 	.word	0x00000615
     658:	00000615 	.word	0x00000615
     65c:	00000615 	.word	0x00000615
     660:	000006b1 	.word	0x000006b1
     664:	00000615 	.word	0x00000615
     668:	00000615 	.word	0x00000615
     66c:	00000615 	.word	0x00000615
     670:	00000615 	.word	0x00000615
     674:	000005ff 	.word	0x000005ff
     678:	00000615 	.word	0x00000615
     67c:	00000615 	.word	0x00000615
     680:	00000615 	.word	0x00000615
     684:	00000615 	.word	0x00000615
     688:	00000615 	.word	0x00000615
     68c:	00000615 	.word	0x00000615
     690:	00000615 	.word	0x00000615
     694:	00000615 	.word	0x00000615
     698:	000005ff 	.word	0x000005ff
     69c:	00000615 	.word	0x00000615
     6a0:	00000615 	.word	0x00000615
     6a4:	00000615 	.word	0x00000615
     6a8:	00000615 	.word	0x00000615
     6ac:	00000601 	.word	0x00000601
		{

		case 'c':
			sendContinuedACK(breakPointId);
     6b0:	4620      	mov	r0, r4
     6b2:	4629      	mov	r1, r5
     6b4:	f7ff ff78 	bl	5a8 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
     6b8:	2063      	movs	r0, #99	; 0x63
     6ba:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     6bc:	2300      	movs	r3, #0
			return 'c';
     6be:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     6c0:	7623      	strb	r3, [r4, #24]
     6c2:	bd38      	pop	{r3, r4, r5, pc}

000006c4 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
     6c4:	b570      	push	{r4, r5, r6, lr}
     6c6:	4605      	mov	r5, r0
     6c8:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
     6ca:	b1a9      	cbz	r1, 6f8 <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
     6cc:	2301      	movs	r3, #1
     6ce:	4c0b      	ldr	r4, [pc, #44]	; (6fc <VisualMicroDebug::start(bool, bool)+0x38>)
     6d0:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     6d2:	2100      	movs	r1, #0
     6d4:	4628      	mov	r0, r5
     6d6:	f7ff ff8f 	bl	5f8 <VisualMicroDebug::breakWait(unsigned char)>
     6da:	2863      	cmp	r0, #99	; 0x63
     6dc:	d00c      	beq.n	6f8 <VisualMicroDebug::start(bool, bool)+0x34>
     6de:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     6e0:	1c51      	adds	r1, r2, #1
     6e2:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     6e4:	429a      	cmp	r2, r3
     6e6:	d8f4      	bhi.n	6d2 <VisualMicroDebug::start(bool, bool)+0xe>
     6e8:	4299      	cmp	r1, r3
     6ea:	d2fa      	bcs.n	6e2 <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     6ec:	2100      	movs	r1, #0
     6ee:	4628      	mov	r0, r5
     6f0:	f7ff ff82 	bl	5f8 <VisualMicroDebug::breakWait(unsigned char)>
     6f4:	2863      	cmp	r0, #99	; 0x63
     6f6:	d1f2      	bne.n	6de <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
     6f8:	762e      	strb	r6, [r5, #24]
     6fa:	bd70      	pop	{r4, r5, r6, pc}
     6fc:	200074c8 	.word	0x200074c8

00000700 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
     700:	4b03      	ldr	r3, [pc, #12]	; (710 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
     702:	2200      	movs	r2, #0
     704:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
     706:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
     708:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
     70a:	615a      	str	r2, [r3, #20]
     70c:	4770      	bx	lr
     70e:	bf00      	nop
     710:	20006774 	.word	0x20006774

00000714 <AudioAnalyzeFFT1024::update()>:
	}

}

void AudioAnalyzeFFT1024::update(void)
{
     714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	audio_block_t *block;

	block = receiveReadOnly();
     716:	2100      	movs	r1, #0
	}

}

void AudioAnalyzeFFT1024::update(void)
{
     718:	4605      	mov	r5, r0
	audio_block_t *block;

	block = receiveReadOnly();
     71a:	f003 f883 	bl	3824 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     71e:	2800      	cmp	r0, #0
     720:	f000 80d3 	beq.w	8ca <AudioAnalyzeFFT1024::update()+0x1b6>

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
     724:	f241 433c 	movw	r3, #5180	; 0x143c
     728:	5ceb      	ldrb	r3, [r5, r3]
     72a:	2b07      	cmp	r3, #7
     72c:	f200 80cd 	bhi.w	8ca <AudioAnalyzeFFT1024::update()+0x1b6>
     730:	e8df f003 	tbb	[pc, r3]
     734:	e1dad3cc 	.word	0xe1dad3cc
     738:	04f6efe8 	.word	0x04f6efe8
		break;
	case 7:
		blocklist[7] = block;
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
     73c:	f8d5 741c 	ldr.w	r7, [r5, #1052]	; 0x41c
     740:	f505 6487 	add.w	r4, r5, #1080	; 0x438
     744:	f205 413c 	addw	r1, r5, #1084	; 0x43c
	case 6:
		blocklist[6] = block;
		state = 7;
		break;
	case 7:
		blocklist[7] = block;
     748:	f8c5 0438 	str.w	r0, [r5, #1080]	; 0x438
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
     74c:	1d3b      	adds	r3, r7, #4
     74e:	4622      	mov	r2, r4
     750:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     754:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     758:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
     75a:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     75e:	d1f9      	bne.n	754 <AudioAnalyzeFFT1024::update()+0x40>
	case 7:
		blocklist[7] = block;
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
     760:	f8d5 7420 	ldr.w	r7, [r5, #1056]	; 0x420
     764:	f505 62c7 	add.w	r2, r5, #1592	; 0x638
     768:	1d3b      	adds	r3, r7, #4
     76a:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     76e:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     772:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
     774:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     778:	d1f9      	bne.n	76e <AudioAnalyzeFFT1024::update()+0x5a>
		blocklist[7] = block;
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
     77a:	f8d5 7424 	ldr.w	r7, [r5, #1060]	; 0x424
     77e:	f605 0238 	addw	r2, r5, #2104	; 0x838
     782:	1d3b      	adds	r3, r7, #4
     784:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     788:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     78c:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
     78e:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     792:	d1f9      	bne.n	788 <AudioAnalyzeFFT1024::update()+0x74>
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
     794:	f8d5 7428 	ldr.w	r7, [r5, #1064]	; 0x428
     798:	f605 2238 	addw	r2, r5, #2616	; 0xa38
     79c:	1d3b      	adds	r3, r7, #4
     79e:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     7a2:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     7a6:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
     7a8:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     7ac:	d1f9      	bne.n	7a2 <AudioAnalyzeFFT1024::update()+0x8e>
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
     7ae:	f8d5 742c 	ldr.w	r7, [r5, #1068]	; 0x42c
     7b2:	f605 4238 	addw	r2, r5, #3128	; 0xc38
     7b6:	1d3b      	adds	r3, r7, #4
     7b8:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     7bc:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     7c0:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
     7c2:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     7c6:	d1f9      	bne.n	7bc <AudioAnalyzeFFT1024::update()+0xa8>
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
     7c8:	f8d5 7430 	ldr.w	r7, [r5, #1072]	; 0x430
     7cc:	f605 6238 	addw	r2, r5, #3640	; 0xe38
     7d0:	1d3b      	adds	r3, r7, #4
     7d2:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     7d6:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     7da:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
     7dc:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     7e0:	d1f9      	bne.n	7d6 <AudioAnalyzeFFT1024::update()+0xc2>
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
     7e2:	f8d5 7434 	ldr.w	r7, [r5, #1076]	; 0x434
     7e6:	f241 0238 	movw	r2, #4152	; 0x1038
     7ea:	1d3b      	adds	r3, r7, #4
     7ec:	442a      	add	r2, r5
     7ee:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     7f2:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     7f6:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
     7f8:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     7fc:	d1f9      	bne.n	7f2 <AudioAnalyzeFFT1024::update()+0xde>
     7fe:	f241 2238 	movw	r2, #4664	; 0x1238
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
     802:	1d03      	adds	r3, r0, #4
     804:	f500 7082 	add.w	r0, r0, #260	; 0x104
     808:	442a      	add	r2, r5
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     80a:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     80e:	4283      	cmp	r3, r0
		*dst++ = *src++;  // real sample plus a zero for imaginary
     810:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     814:	d1f9      	bne.n	80a <AudioAnalyzeFFT1024::update()+0xf6>
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
		if (window) apply_window_to_fft_buffer(buffer, window);
     816:	f8d5 0418 	ldr.w	r0, [r5, #1048]	; 0x418
     81a:	b180      	cbz	r0, 83e <AudioAnalyzeFFT1024::update()+0x12a>
     81c:	f505 6288 	add.w	r2, r5, #1088	; 0x440
     820:	f500 6700 	add.w	r7, r0, #2048	; 0x800
{
	int16_t *buf = (int16_t *)buffer;
	const int16_t *win = (int16_t *)window;;

	for (int i=0; i < 1024; i++) {
		int32_t val = *buf * *win++;
     824:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
     828:	3204      	adds	r2, #4
     82a:	f930 6b02 	ldrsh.w	r6, [r0], #2
		//*buf = signed_saturate_rshift(val, 16, 15);
		*buf = val >> 15;
     82e:	fb03 f306 	mul.w	r3, r3, r6
static void apply_window_to_fft_buffer(void *buffer, const void *window)
{
	int16_t *buf = (int16_t *)buffer;
	const int16_t *win = (int16_t *)window;;

	for (int i=0; i < 1024; i++) {
     832:	4287      	cmp	r7, r0
		int32_t val = *buf * *win++;
		//*buf = signed_saturate_rshift(val, 16, 15);
		*buf = val >> 15;
     834:	ea4f 33e3 	mov.w	r3, r3, asr #15
     838:	f822 3c08 	strh.w	r3, [r2, #-8]
static void apply_window_to_fft_buffer(void *buffer, const void *window)
{
	int16_t *buf = (int16_t *)buffer;
	const int16_t *win = (int16_t *)window;;

	for (int i=0; i < 1024; i++) {
     83c:	d1f2      	bne.n	824 <AudioAnalyzeFFT1024::update()+0x110>
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
		if (window) apply_window_to_fft_buffer(buffer, window);
		arm_cfft_radix4_q15(&fft_inst, buffer);
     83e:	f241 4044 	movw	r0, #5188	; 0x1444
     842:	f205 4716 	addw	r7, r5, #1046	; 0x416
     846:	4e3a      	ldr	r6, [pc, #232]	; (930 <AudioAnalyzeFFT1024::update()+0x21c>)
     848:	4428      	add	r0, r5
     84a:	f003 fd6b 	bl	4324 <arm_cfft_radix4_q15>
     84e:	f105 0016 	add.w	r0, r5, #22
		// TODO: support averaging multiple copies
		for (int i=0; i < 512; i++) {
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
     852:	f854 1f04 	ldr.w	r1, [r4, #4]!
// computes ((a[15:0] * b[15:0]) + (a[31:16] * b[31:16]))
static inline int32_t multiply_16tx16t_add_16bx16b(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16tx16t_add_16bx16b(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smuad %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     856:	fb21 f101 	smuad	r1, r1, r1
}

inline uint32_t sqrt_uint32_approx(uint32_t in) __attribute__((always_inline,unused));
inline uint32_t sqrt_uint32_approx(uint32_t in)
{
	uint32_t n = sqrt_integer_guess_table[__builtin_clz(in)];
     85a:	fab1 f381 	clz	r3, r1
     85e:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
	n = ((in / n) + n) / 2;
     862:	fbb1 f3f2 	udiv	r3, r1, r2
     866:	441a      	add	r2, r3
     868:	0853      	lsrs	r3, r2, #1
	n = ((in / n) + n) / 2;
     86a:	fbb1 f1f3 	udiv	r1, r1, r3
     86e:	440b      	add	r3, r1
			uint32_t magsq = multiply_16tx16t_add_16bx16b(tmp, tmp);
			output[i] = sqrt_uint32_approx(magsq);
     870:	085b      	lsrs	r3, r3, #1
     872:	f820 3f02 	strh.w	r3, [r0, #2]!
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
		if (window) apply_window_to_fft_buffer(buffer, window);
		arm_cfft_radix4_q15(&fft_inst, buffer);
		// TODO: support averaging multiple copies
		for (int i=0; i < 512; i++) {
     876:	42b8      	cmp	r0, r7
     878:	d1eb      	bne.n	852 <AudioAnalyzeFFT1024::update()+0x13e>
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
			uint32_t magsq = multiply_16tx16t_add_16bx16b(tmp, tmp);
			output[i] = sqrt_uint32_approx(magsq);
		}
		outputflag = true;
     87a:	f241 433d 	movw	r3, #5181	; 0x143d
     87e:	2201      	movs	r2, #1
		release(blocklist[0]);
     880:	f8d5 041c 	ldr.w	r0, [r5, #1052]	; 0x41c
		for (int i=0; i < 512; i++) {
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
			uint32_t magsq = multiply_16tx16t_add_16bx16b(tmp, tmp);
			output[i] = sqrt_uint32_approx(magsq);
		}
		outputflag = true;
     884:	54ea      	strb	r2, [r5, r3]
		release(blocklist[0]);
     886:	f002 ff89 	bl	379c <AudioStream::release(audio_block_struct*)>
		release(blocklist[1]);
     88a:	f8d5 0420 	ldr.w	r0, [r5, #1056]	; 0x420
     88e:	f002 ff85 	bl	379c <AudioStream::release(audio_block_struct*)>
		release(blocklist[2]);
     892:	f8d5 0424 	ldr.w	r0, [r5, #1060]	; 0x424
     896:	f002 ff81 	bl	379c <AudioStream::release(audio_block_struct*)>
		release(blocklist[3]);
     89a:	f8d5 0428 	ldr.w	r0, [r5, #1064]	; 0x428
     89e:	f002 ff7d 	bl	379c <AudioStream::release(audio_block_struct*)>
		blocklist[0] = blocklist[4];
     8a2:	f8d5 642c 	ldr.w	r6, [r5, #1068]	; 0x42c
		blocklist[1] = blocklist[5];
     8a6:	f8d5 4430 	ldr.w	r4, [r5, #1072]	; 0x430
		blocklist[2] = blocklist[6];
		blocklist[3] = blocklist[7];
		state = 4;
     8aa:	f241 433c 	movw	r3, #5180	; 0x143c
		release(blocklist[1]);
		release(blocklist[2]);
		release(blocklist[3]);
		blocklist[0] = blocklist[4];
		blocklist[1] = blocklist[5];
		blocklist[2] = blocklist[6];
     8ae:	f8d5 0434 	ldr.w	r0, [r5, #1076]	; 0x434
		blocklist[3] = blocklist[7];
		state = 4;
     8b2:	2204      	movs	r2, #4
		release(blocklist[2]);
		release(blocklist[3]);
		blocklist[0] = blocklist[4];
		blocklist[1] = blocklist[5];
		blocklist[2] = blocklist[6];
		blocklist[3] = blocklist[7];
     8b4:	f8d5 1438 	ldr.w	r1, [r5, #1080]	; 0x438
		outputflag = true;
		release(blocklist[0]);
		release(blocklist[1]);
		release(blocklist[2]);
		release(blocklist[3]);
		blocklist[0] = blocklist[4];
     8b8:	f8c5 641c 	str.w	r6, [r5, #1052]	; 0x41c
		blocklist[1] = blocklist[5];
     8bc:	f8c5 4420 	str.w	r4, [r5, #1056]	; 0x420
		blocklist[2] = blocklist[6];
     8c0:	f8c5 0424 	str.w	r0, [r5, #1060]	; 0x424
		blocklist[3] = blocklist[7];
     8c4:	f8c5 1428 	str.w	r1, [r5, #1064]	; 0x428
		state = 4;
     8c8:	54ea      	strb	r2, [r5, r3]
     8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
	case 0:
		blocklist[0] = block;
		state = 1;
     8cc:	f241 433c 	movw	r3, #5180	; 0x143c
     8d0:	2201      	movs	r2, #1
	if (!block) return;

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
	case 0:
		blocklist[0] = block;
     8d2:	f8c5 041c 	str.w	r0, [r5, #1052]	; 0x41c
		state = 1;
     8d6:	54ea      	strb	r2, [r5, r3]
		break;
     8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 1:
		blocklist[1] = block;
		state = 2;
     8da:	f241 433c 	movw	r3, #5180	; 0x143c
     8de:	2202      	movs	r2, #2
	case 0:
		blocklist[0] = block;
		state = 1;
		break;
	case 1:
		blocklist[1] = block;
     8e0:	f8c5 0420 	str.w	r0, [r5, #1056]	; 0x420
		state = 2;
     8e4:	54ea      	strb	r2, [r5, r3]
		break;
     8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 2:
		blocklist[2] = block;
		state = 3;
     8e8:	f241 433c 	movw	r3, #5180	; 0x143c
     8ec:	2203      	movs	r2, #3
	case 1:
		blocklist[1] = block;
		state = 2;
		break;
	case 2:
		blocklist[2] = block;
     8ee:	f8c5 0424 	str.w	r0, [r5, #1060]	; 0x424
		state = 3;
     8f2:	54ea      	strb	r2, [r5, r3]
		break;
     8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 3:
		blocklist[3] = block;
		state = 4;
     8f6:	f241 433c 	movw	r3, #5180	; 0x143c
     8fa:	2204      	movs	r2, #4
	case 2:
		blocklist[2] = block;
		state = 3;
		break;
	case 3:
		blocklist[3] = block;
     8fc:	f8c5 0428 	str.w	r0, [r5, #1064]	; 0x428
		state = 4;
     900:	54ea      	strb	r2, [r5, r3]
		break;
     902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 4:
		blocklist[4] = block;
		state = 5;
     904:	f241 433c 	movw	r3, #5180	; 0x143c
     908:	2205      	movs	r2, #5
	case 3:
		blocklist[3] = block;
		state = 4;
		break;
	case 4:
		blocklist[4] = block;
     90a:	f8c5 042c 	str.w	r0, [r5, #1068]	; 0x42c
		state = 5;
     90e:	54ea      	strb	r2, [r5, r3]
		break;
     910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 5:
		blocklist[5] = block;
		state = 6;
     912:	f241 433c 	movw	r3, #5180	; 0x143c
     916:	2206      	movs	r2, #6
	case 4:
		blocklist[4] = block;
		state = 5;
		break;
	case 5:
		blocklist[5] = block;
     918:	f8c5 0430 	str.w	r0, [r5, #1072]	; 0x430
		state = 6;
     91c:	54ea      	strb	r2, [r5, r3]
		break;
     91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 6:
		blocklist[6] = block;
		state = 7;
     920:	f241 433c 	movw	r3, #5180	; 0x143c
     924:	2207      	movs	r2, #7
	case 5:
		blocklist[5] = block;
		state = 6;
		break;
	case 6:
		blocklist[6] = block;
     926:	f8c5 0434 	str.w	r0, [r5, #1076]	; 0x434
		state = 7;
     92a:	54ea      	strb	r2, [r5, r3]
		break;
     92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     92e:	bf00      	nop
     930:	20000990 	.word	0x20000990

00000934 <AudioAnalyzePeak::update()>:

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
     934:	b570      	push	{r4, r5, r6, lr}
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
     936:	2100      	movs	r1, #0

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
     938:	4606      	mov	r6, r0
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
     93a:	f002 ff73 	bl	3824 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) {
     93e:	b1c0      	cbz	r0, 972 <AudioAnalyzePeak::update()+0x3e>
		return;
	}
	p = block->data;
     940:	1d03      	adds	r3, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES;
     942:	f500 7582 	add.w	r5, r0, #260	; 0x104
	min = min_sample;
     946:	f9b6 401e 	ldrsh.w	r4, [r6, #30]
	max = max_sample;
     94a:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
	do {
		int16_t d=*p++;
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
     94e:	f933 2b02 	ldrsh.w	r2, [r3], #2
     952:	4294      	cmp	r4, r2
     954:	bfa8      	it	ge
     956:	4614      	movge	r4, r2
     958:	4291      	cmp	r1, r2
     95a:	bfb8      	it	lt
     95c:	4611      	movlt	r1, r2
		if (d>max) max=d;
	} while (p < end);
     95e:	429d      	cmp	r5, r3
     960:	d8f5      	bhi.n	94e <AudioAnalyzePeak::update()+0x1a>
	min_sample = min;
	max_sample = max;
	new_output = true;
     962:	2301      	movs	r3, #1
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
		if (d>max) max=d;
	} while (p < end);
	min_sample = min;
     964:	83f4      	strh	r4, [r6, #30]
	max_sample = max;
     966:	8431      	strh	r1, [r6, #32]
	new_output = true;
     968:	7733      	strb	r3, [r6, #28]
	release(block);
}
     96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (d>max) max=d;
	} while (p < end);
	min_sample = min;
	max_sample = max;
	new_output = true;
	release(block);
     96e:	f002 bf15 	b.w	379c <AudioStream::release(audio_block_struct*)>
     972:	bd70      	pop	{r4, r5, r6, pc}

00000974 <AudioAnalyzeRMS::update()>:
#include <Arduino.h>
#include "analyze_rms.h"
#include "utility/dspinst.h"

void AudioAnalyzeRMS::update(void)
{
     974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	audio_block_t *block = receiveReadOnly();
     978:	2100      	movs	r1, #0
#include <Arduino.h>
#include "analyze_rms.h"
#include "utility/dspinst.h"

void AudioAnalyzeRMS::update(void)
{
     97a:	4680      	mov	r8, r0
	audio_block_t *block = receiveReadOnly();
     97c:	f002 ff52 	bl	3824 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) {
     980:	b308      	cbz	r0, 9c6 <AudioAnalyzeRMS::update()+0x52>
		count++;
		return;
	}
#if defined(__ARM_ARCH_7EM__)
	uint32_t *p = (uint32_t *)(block->data);
     982:	1d01      	adds	r1, r0, #4
	uint32_t *end = p + AUDIO_BLOCK_SAMPLES/2;
     984:	f500 7e82 	add.w	lr, r0, #260	; 0x104
	int64_t sum = accum;
     988:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
	do {
		uint32_t n1 = *p++;
     98c:	680f      	ldr	r7, [r1, #0]
     98e:	3110      	adds	r1, #16
		uint32_t n2 = *p++;
     990:	f851 6c0c 	ldr.w	r6, [r1, #-12]
		uint32_t n3 = *p++;
     994:	f851 5c08 	ldr.w	r5, [r1, #-8]
		uint32_t n4 = *p++;
     998:	f851 4c04 	ldr.w	r4, [r1, #-4]
}

// // computes sum += ((a[15:0] * b[15:0]) + (a[31:16] * b[31:16]))
static inline int64_t multiply_accumulate_16tx16t_add_16bx16b(int64_t sum, uint32_t a, uint32_t b)
{
	asm volatile("smlald %Q0, %R0, %1, %2" : "+r" (sum) : "r" (a), "r" (b));
     99c:	fbc7 23c7 	smlald	r2, r3, r7, r7
     9a0:	fbc6 23c6 	smlald	r2, r3, r6, r6
     9a4:	fbc5 23c5 	smlald	r2, r3, r5, r5
     9a8:	fbc4 23c4 	smlald	r2, r3, r4, r4
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n1, n1);
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n2, n2);
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n3, n3);
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n4, n4);
	} while (p < end);
     9ac:	458e      	cmp	lr, r1
     9ae:	d8ed      	bhi.n	98c <AudioAnalyzeRMS::update()+0x18>
	accum = sum;
	count++;
     9b0:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
     9b4:	3101      	adds	r1, #1
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n1, n1);
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n2, n2);
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n3, n3);
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n4, n4);
	} while (p < end);
	accum = sum;
     9b6:	e9c8 2308 	strd	r2, r3, [r8, #32]
	count++;
     9ba:	f8c8 1028 	str.w	r1, [r8, #40]	; 0x28
	} while (p < end);
	accum = sum;
	count++;
#endif
	release(block);
}
     9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sum += n * n;
	} while (p < end);
	accum = sum;
	count++;
#endif
	release(block);
     9c2:	f002 beeb 	b.w	379c <AudioStream::release(audio_block_struct*)>

void AudioAnalyzeRMS::update(void)
{
	audio_block_t *block = receiveReadOnly();
	if (!block) {
		count++;
     9c6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
     9ca:	3301      	adds	r3, #1
     9cc:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
		return;
     9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000009d4 <AudioAnalyzeRMS::read()>:
#endif
	release(block);
}

float AudioAnalyzeRMS::read(void)
{
     9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__disable_irq();
     9d6:	b672      	cpsid	i
	int64_t sum = accum;
	accum = 0;
     9d8:	2200      	movs	r2, #0
     9da:	2300      	movs	r3, #0
	uint32_t num = count;
	count = 0;
     9dc:	2500      	movs	r5, #0
float AudioAnalyzeRMS::read(void)
{
	__disable_irq();
	int64_t sum = accum;
	accum = 0;
	uint32_t num = count;
     9de:	6a84      	ldr	r4, [r0, #40]	; 0x28
}

float AudioAnalyzeRMS::read(void)
{
	__disable_irq();
	int64_t sum = accum;
     9e0:	e9d0 6708 	ldrd	r6, r7, [r0, #32]
	accum = 0;
	uint32_t num = count;
	count = 0;
     9e4:	6285      	str	r5, [r0, #40]	; 0x28

float AudioAnalyzeRMS::read(void)
{
	__disable_irq();
	int64_t sum = accum;
	accum = 0;
     9e6:	e9c0 2308 	strd	r2, r3, [r0, #32]
	uint32_t num = count;
	count = 0;
	__enable_irq();
     9ea:	b662      	cpsie	i
	float meansq = sum / (num * AUDIO_BLOCK_SAMPLES);
	// TODO: shift down to 32 bits and use sqrt_uint32
	//       but is that really any more efficient?
	return sqrtf(meansq) / 32767.0;
     9ec:	01e4      	lsls	r4, r4, #7
     9ee:	462b      	mov	r3, r5
     9f0:	4630      	mov	r0, r6
     9f2:	4639      	mov	r1, r7
     9f4:	4622      	mov	r2, r4
     9f6:	f003 fefb 	bl	47f0 <__aeabi_ldivmod>
     9fa:	f003 febb 	bl	4774 <__aeabi_l2f>
     9fe:	ee07 0a90 	vmov	s15, r0
     a02:	eeb1 0ae7 	vsqrt.f32	s0, s15
     a06:	eeb4 0a40 	vcmp.f32	s0, s0
     a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a0e:	d104      	bne.n	a1a <AudioAnalyzeRMS::read()+0x46>
     a10:	eddf 7a08 	vldr	s15, [pc, #32]	; a34 <AudioAnalyzeRMS::read()+0x60>
}
     a14:	ee80 0a27 	vdiv.f32	s0, s0, s15
     a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	count = 0;
	__enable_irq();
	float meansq = sum / (num * AUDIO_BLOCK_SAMPLES);
	// TODO: shift down to 32 bits and use sqrt_uint32
	//       but is that really any more efficient?
	return sqrtf(meansq) / 32767.0;
     a1a:	4622      	mov	r2, r4
     a1c:	462b      	mov	r3, r5
     a1e:	4630      	mov	r0, r6
     a20:	4639      	mov	r1, r7
     a22:	f003 fee5 	bl	47f0 <__aeabi_ldivmod>
     a26:	f003 fea5 	bl	4774 <__aeabi_l2f>
     a2a:	ee00 0a10 	vmov	s0, r0
     a2e:	f003 fd1f 	bl	4470 <sqrtf>
     a32:	e7ed      	b.n	a10 <AudioAnalyzeRMS::read()+0x3c>
     a34:	46fffe00 	.word	0x46fffe00

00000a38 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     a38:	b510      	push	{r4, lr}
     a3a:	4604      	mov	r4, r0
		release();
     a3c:	f002 ffc0 	bl	39c0 <DMAChannel::release()>
	}
     a40:	4620      	mov	r0, r4
     a42:	bd10      	pop	{r4, pc}

00000a44 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE>:
volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

volatile bool AsyncAudioInputSPDIF3::lockChanged=false;
volatile bool AsyncAudioInputSPDIF3::locked=false;
DMAChannel AsyncAudioInputSPDIF3::dma(false);
     a44:	4a02      	ldr	r2, [pc, #8]	; (a50 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0xc>)
     a46:	4903      	ldr	r1, [pc, #12]	; (a54 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x10>)
     a48:	4803      	ldr	r0, [pc, #12]	; (a58 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x14>)
     a4a:	f003 bdbd 	b.w	45c8 <__aeabi_atexit>
     a4e:	bf00      	nop
     a50:	200047e8 	.word	0x200047e8
     a54:	00000a39 	.word	0x00000a39
     a58:	200067bc 	.word	0x200067bc

00000a5c <AudioInputAnalog::update()>:
	if (sum < -32768) return -32768;
	return sum;
}

void AudioInputAnalog::update(void)
{
     a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a60:	b083      	sub	sp, #12
     a62:	9001      	str	r0, [sp, #4]
	audio_block_t *output=NULL;
	output = allocate();
     a64:	f002 fe46 	bl	36f4 <AudioStream::allocate()>
	if (output == NULL) return;
     a68:	9000      	str	r0, [sp, #0]
     a6a:	2800      	cmp	r0, #0
     a6c:	d05b      	beq.n	b26 <AudioInputAnalog::update()+0xca>

	uint16_t *p = (uint16_t *)dma.TCD->DADDR;
     a6e:	4b2f      	ldr	r3, [pc, #188]	; (b2c <AudioInputAnalog::update()+0xd0>)

		int n = (int)*p - dc_offset;
		if (n > 4095) n = 4095;
		if (n < -4095) n = -4095;

		capture_buffer[i] = n;
     a70:	f640 7eff 	movw	lr, #4095	; 0xfff
     a74:	492e      	ldr	r1, [pc, #184]	; (b30 <AudioInputAnalog::update()+0xd4>)
{
	audio_block_t *output=NULL;
	output = allocate();
	if (output == NULL) return;

	uint16_t *p = (uint16_t *)dma.TCD->DADDR;
     a76:	681b      	ldr	r3, [r3, #0]
     a78:	482e      	ldr	r0, [pc, #184]	; (b34 <AudioInputAnalog::update()+0xd8>)
     a7a:	f201 471e 	addw	r7, r1, #1054	; 0x41e
     a7e:	691b      	ldr	r3, [r3, #16]
	// copy adc buffer to capture buffer
	//  FIXME: this should be done from the I2S interrupt, for precise capture timing
	const unsigned int capture_len = sizeof(capture_buffer) / 2;
	for (unsigned int i=0; i < capture_len; i++) {
		// TODO: linear interpolate to exactly 4X sample rate
		if (--p < adc_buffer) p = adc_buffer + (sizeof(adc_buffer) / 2 - 1);
     a80:	f200 568e 	addw	r6, r0, #1422	; 0x58e
     a84:	3b02      	subs	r3, #2
     a86:	4283      	cmp	r3, r0
     a88:	bf38      	it	cc
     a8a:	4633      	movcc	r3, r6

		// remove DC offset
		// TODO: very slow low pass filter for DC offset
		int dc_offset = 550; // FIXME: quick kludge for testing!!

		int n = (int)*p - dc_offset;
     a8c:	881a      	ldrh	r2, [r3, #0]
     a8e:	f2a2 2226 	subw	r2, r2, #550	; 0x226
		if (n > 4095) n = 4095;
		if (n < -4095) n = -4095;

		capture_buffer[i] = n;
     a92:	4572      	cmp	r2, lr
     a94:	bfa8      	it	ge
     a96:	4672      	movge	r2, lr
     a98:	f821 2f02 	strh.w	r2, [r1, #2]!
	//Serial.printf("offset = %4d, val = %4d\n", offset + 1, adc_buffer[offset]);

	// copy adc buffer to capture buffer
	//  FIXME: this should be done from the I2S interrupt, for precise capture timing
	const unsigned int capture_len = sizeof(capture_buffer) / 2;
	for (unsigned int i=0; i < capture_len; i++) {
     a9c:	42b9      	cmp	r1, r7
     a9e:	d1f1      	bne.n	a84 <AudioInputAnalog::update()+0x28>
     aa0:	f8df 9098 	ldr.w	r9, [pc, #152]	; b3c <AudioInputAnalog::update()+0xe0>
	while (len > 0) {
		sum += *data++ * *impulse++; // TODO: optimize with DSP inst and filter symmetry
		len --;
	}
	sum = sum >> 15; // TODO: adjust filter coefficients for proper gain, 12 to 16 bits
	if (sum > 32767) return 32767;
     aa4:	f647 76ff 	movw	r6, #32767	; 0x7fff
     aa8:	9b00      	ldr	r3, [sp, #0]
     aaa:	2700      	movs	r7, #0
     aac:	f509 6b80 	add.w	fp, r9, #1024	; 0x400
     ab0:	f503 7a82 	add.w	sl, r3, #260	; 0x104
	// low pass filter and subsample (this part belongs here)
	int16_t *dest = output->data + AUDIO_BLOCK_SAMPLES - 1;
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
#if 1
		// proper low-pass filter sounds pretty good
		*dest-- = fir(capture_buffer + i * 4, filter, sizeof(filter)/2);
     ab4:	464b      	mov	r3, r9
     ab6:	f8df c088 	ldr.w	ip, [pc, #136]	; b40 <AudioInputAnalog::update()+0xe4>
     aba:	f109 081e 	add.w	r8, r9, #30
     abe:	f240 52a9 	movw	r2, #1449	; 0x5a9
	// TODO: configure I2S1 to interrupt every 128 audio samples
}

static int16_t fir(const int16_t *data, const int16_t *impulse, int len)
{
	int64_t sum=0;
     ac2:	2000      	movs	r0, #0
     ac4:	2100      	movs	r1, #0
     ac6:	e001      	b.n	acc <AudioInputAnalog::update()+0x70>
     ac8:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

	while (len > 0) {
		sum += *data++ * *impulse++; // TODO: optimize with DSP inst and filter symmetry
     acc:	f933 eb02 	ldrsh.w	lr, [r3], #2
     ad0:	fbce 0182 	smlalbb	r0, r1, lr, r2

static int16_t fir(const int16_t *data, const int16_t *impulse, int len)
{
	int64_t sum=0;

	while (len > 0) {
     ad4:	4543      	cmp	r3, r8
     ad6:	d1f7      	bne.n	ac8 <AudioInputAnalog::update()+0x6c>
		sum += *data++ * *impulse++; // TODO: optimize with DSP inst and filter symmetry
		len --;
	}
	sum = sum >> 15; // TODO: adjust filter coefficients for proper gain, 12 to 16 bits
     ad8:	0bc4      	lsrs	r4, r0, #15
     ada:	13cd      	asrs	r5, r1, #15
     adc:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	if (sum > 32767) return 32767;
     ae0:	42a6      	cmp	r6, r4
     ae2:	eb77 0305 	sbcs.w	r3, r7, r5
     ae6:	db19      	blt.n	b1c <AudioInputAnalog::update()+0xc0>
	if (sum < -32768) return -32768;
     ae8:	4a13      	ldr	r2, [pc, #76]	; (b38 <AudioInputAnalog::update()+0xdc>)
     aea:	f04f 33ff 	mov.w	r3, #4294967295
     aee:	4294      	cmp	r4, r2
     af0:	eb75 0303 	sbcs.w	r3, r5, r3
     af4:	db15      	blt.n	b22 <AudioInputAnalog::update()+0xc6>
	return sum;
     af6:	b223      	sxth	r3, r4
     af8:	f109 0908 	add.w	r9, r9, #8
	// low pass filter and subsample (this part belongs here)
	int16_t *dest = output->data + AUDIO_BLOCK_SAMPLES - 1;
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
#if 1
		// proper low-pass filter sounds pretty good
		*dest-- = fir(capture_buffer + i * 4, filter, sizeof(filter)/2);
     afc:	f82a 3d02 	strh.w	r3, [sl, #-2]!
	}
	//printbuf(capture_buffer, 8);

	// low pass filter and subsample (this part belongs here)
	int16_t *dest = output->data + AUDIO_BLOCK_SAMPLES - 1;
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     b00:	45d9      	cmp	r9, fp
     b02:	d1d7      	bne.n	ab4 <AudioInputAnalog::update()+0x58>
		// just averge 4 samples together, lower quality but much faster
		*dest-- = capture_buffer[i * 4] + capture_buffer[i * 4 + 1]
			+ capture_buffer[i * 4 + 2] + capture_buffer[i * 4 + 3];
#endif
	}
	transmit(output);
     b04:	9c00      	ldr	r4, [sp, #0]
     b06:	2200      	movs	r2, #0
     b08:	9801      	ldr	r0, [sp, #4]
     b0a:	4621      	mov	r1, r4
     b0c:	f002 fe70 	bl	37f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(output);
     b10:	4620      	mov	r0, r4
}
     b12:	b003      	add	sp, #12
     b14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		*dest-- = capture_buffer[i * 4] + capture_buffer[i * 4 + 1]
			+ capture_buffer[i * 4 + 2] + capture_buffer[i * 4 + 3];
#endif
	}
	transmit(output);
	release(output);
     b18:	f002 be40 	b.w	379c <AudioStream::release(audio_block_struct*)>
	while (len > 0) {
		sum += *data++ * *impulse++; // TODO: optimize with DSP inst and filter symmetry
		len --;
	}
	sum = sum >> 15; // TODO: adjust filter coefficients for proper gain, 12 to 16 bits
	if (sum > 32767) return 32767;
     b1c:	f647 73ff 	movw	r3, #32767	; 0x7fff
     b20:	e7ea      	b.n	af8 <AudioInputAnalog::update()+0x9c>
	if (sum < -32768) return -32768;
     b22:	4b05      	ldr	r3, [pc, #20]	; (b38 <AudioInputAnalog::update()+0xdc>)
     b24:	e7e8      	b.n	af8 <AudioInputAnalog::update()+0x9c>
			+ capture_buffer[i * 4 + 2] + capture_buffer[i * 4 + 3];
#endif
	}
	transmit(output);
	release(output);
}
     b26:	b003      	add	sp, #12
     b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b2c:	20007190 	.word	0x20007190
     b30:	20006d6e 	.word	0x20006d6e
     b34:	200067e0 	.word	0x200067e0
     b38:	ffff8000 	.word	0xffff8000
     b3c:	20006d70 	.word	0x20006d70
     b40:	20000950 	.word	0x20000950

00000b44 <AudioInputAnalog::init(unsigned char)>:
};


void AudioInputAnalog::init(uint8_t pin)
{
	if (pin >= sizeof(adc2_pin_to_channel)) return;
     b44:	281b      	cmp	r0, #27
     b46:	f200 809d 	bhi.w	c84 <AudioInputAnalog::init(unsigned char)+0x140>
	const uint8_t adc_channel = adc2_pin_to_channel[pin];
     b4a:	4b4f      	ldr	r3, [pc, #316]	; (c88 <AudioInputAnalog::init(unsigned char)+0x144>)
	1449
};


void AudioInputAnalog::init(uint8_t pin)
{
     b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (pin >= sizeof(adc2_pin_to_channel)) return;
	const uint8_t adc_channel = adc2_pin_to_channel[pin];
     b4e:	5c1c      	ldrb	r4, [r3, r0]
	1449
};


void AudioInputAnalog::init(uint8_t pin)
{
     b50:	b083      	sub	sp, #12
	if (pin >= sizeof(adc2_pin_to_channel)) return;
	const uint8_t adc_channel = adc2_pin_to_channel[pin];
	if (adc_channel == 255) return;
     b52:	2cff      	cmp	r4, #255	; 0xff
     b54:	f000 8094 	beq.w	c80 <AudioInputAnalog::init(unsigned char)+0x13c>

	// configure a timer to trigger ADC
	// TODO: sample rate should be slightly lower than 4X AUDIO_SAMPLE_RATE_EXACT
	//       linear interpolation is supposed to resample it to exactly 4X
	//       the sample rate, so we avoid artifacts boundaries between captures
	const int comp1 = ((float)F_BUS_ACTUAL) / (AUDIO_SAMPLE_RATE_EXACT * 4.0f) / 2.0f + 0.5f;
     b58:	4b4c      	ldr	r3, [pc, #304]	; (c8c <AudioInputAnalog::init(unsigned char)+0x148>)
	TMR4_ENBL &= ~(1<<3);
	TMR4_SCTRL3 = TMR_SCTRL_OEN | TMR_SCTRL_FORCE;
	TMR4_CSCTRL3 = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_TCF1EN;
	TMR4_CNTR3 = 0;
	TMR4_LOAD3 = 0;
	TMR4_COMP13 = comp1;
     b5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     b5e:	ed9f 6a4c 	vldr	s12, [pc, #304]	; c90 <AudioInputAnalog::init(unsigned char)+0x14c>
	//       the sample rate, so we avoid artifacts boundaries between captures
	const int comp1 = ((float)F_BUS_ACTUAL) / (AUDIO_SAMPLE_RATE_EXACT * 4.0f) / 2.0f + 0.5f;
	TMR4_ENBL &= ~(1<<3);
	TMR4_SCTRL3 = TMR_SCTRL_OEN | TMR_SCTRL_FORCE;
	TMR4_CSCTRL3 = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_TCF1EN;
	TMR4_CNTR3 = 0;
     b62:	2500      	movs	r5, #0

	// configure a timer to trigger ADC
	// TODO: sample rate should be slightly lower than 4X AUDIO_SAMPLE_RATE_EXACT
	//       linear interpolation is supposed to resample it to exactly 4X
	//       the sample rate, so we avoid artifacts boundaries between captures
	const int comp1 = ((float)F_BUS_ACTUAL) / (AUDIO_SAMPLE_RATE_EXACT * 4.0f) / 2.0f + 0.5f;
     b64:	ed93 7a00 	vldr	s14, [r3]
	TMR4_ENBL &= ~(1<<3);
	TMR4_SCTRL3 = TMR_SCTRL_OEN | TMR_SCTRL_FORCE;
     b68:	2105      	movs	r1, #5
	// configure a timer to trigger ADC
	// TODO: sample rate should be slightly lower than 4X AUDIO_SAMPLE_RATE_EXACT
	//       linear interpolation is supposed to resample it to exactly 4X
	//       the sample rate, so we avoid artifacts boundaries between captures
	const int comp1 = ((float)F_BUS_ACTUAL) / (AUDIO_SAMPLE_RATE_EXACT * 4.0f) / 2.0f + 0.5f;
	TMR4_ENBL &= ~(1<<3);
     b6a:	4b4a      	ldr	r3, [pc, #296]	; (c94 <AudioInputAnalog::init(unsigned char)+0x150>)
	TMR4_SCTRL3 = TMR_SCTRL_OEN | TMR_SCTRL_FORCE;
	TMR4_CSCTRL3 = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_TCF1EN;
     b6c:	2041      	movs	r0, #65	; 0x41
	TMR4_CNTR3 = 0;
	TMR4_LOAD3 = 0;
	TMR4_COMP13 = comp1;
     b6e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	TMR4_CMPLD13 = comp1;
	TMR4_CTRL3 = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) | TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(3);
     b72:	f243 0e23 	movw	lr, #12323	; 0x3023
	// configure a timer to trigger ADC
	// TODO: sample rate should be slightly lower than 4X AUDIO_SAMPLE_RATE_EXACT
	//       linear interpolation is supposed to resample it to exactly 4X
	//       the sample rate, so we avoid artifacts boundaries between captures
	const int comp1 = ((float)F_BUS_ACTUAL) / (AUDIO_SAMPLE_RATE_EXACT * 4.0f) / 2.0f + 0.5f;
	TMR4_ENBL &= ~(1<<3);
     b76:	8bda      	ldrh	r2, [r3, #30]
	TMR4_CNTR3 = 0;
	TMR4_LOAD3 = 0;
	TMR4_COMP13 = comp1;
	TMR4_CMPLD13 = comp1;
	TMR4_CTRL3 = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) | TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(3);
	TMR4_DMA3 = TMR_DMA_CMPLD1DE;
     b78:	2702      	movs	r7, #2
	TMR4_CNTR3 = 0;
	TMR4_ENBL |= (1<<3);

	// connect the timer output the ADC_ETC input
	const int trigger = 4; // 0-3 for ADC1, 4-7 for ADC2
	CCM_CCGR2 |= CCM_CCGR2_XBAR1(CCM_CCGR_ON);
     b7a:	4e47      	ldr	r6, [pc, #284]	; (c98 <AudioInputAnalog::init(unsigned char)+0x154>)
	TMR4_ENBL &= ~(1<<3);
	TMR4_SCTRL3 = TMR_SCTRL_OEN | TMR_SCTRL_FORCE;
	TMR4_CSCTRL3 = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_TCF1EN;
	TMR4_CNTR3 = 0;
	TMR4_LOAD3 = 0;
	TMR4_COMP13 = comp1;
     b7c:	eec7 6a06 	vdiv.f32	s13, s14, s12
	// configure a timer to trigger ADC
	// TODO: sample rate should be slightly lower than 4X AUDIO_SAMPLE_RATE_EXACT
	//       linear interpolation is supposed to resample it to exactly 4X
	//       the sample rate, so we avoid artifacts boundaries between captures
	const int comp1 = ((float)F_BUS_ACTUAL) / (AUDIO_SAMPLE_RATE_EXACT * 4.0f) / 2.0f + 0.5f;
	TMR4_ENBL &= ~(1<<3);
     b80:	f022 0208 	bic.w	r2, r2, #8
     b84:	0412      	lsls	r2, r2, #16
     b86:	0c12      	lsrs	r2, r2, #16
     b88:	83da      	strh	r2, [r3, #30]
	TMR4_SCTRL3 = TMR_SCTRL_OEN | TMR_SCTRL_FORCE;
     b8a:	f8a3 106e 	strh.w	r1, [r3, #110]	; 0x6e
	TMR4_ENBL |= (1<<3);

	// connect the timer output the ADC_ETC input
	const int trigger = 4; // 0-3 for ADC1, 4-7 for ADC2
	CCM_CCGR2 |= CCM_CCGR2_XBAR1(CCM_CCGR_ON);
	xbar_connect(XBARA1_IN_QTIMER4_TIMER3, XBARA1_OUT_ADC_ETC_TRIG00 + trigger);
     b8e:	216b      	movs	r1, #107	; 0x6b
	//       linear interpolation is supposed to resample it to exactly 4X
	//       the sample rate, so we avoid artifacts boundaries between captures
	const int comp1 = ((float)F_BUS_ACTUAL) / (AUDIO_SAMPLE_RATE_EXACT * 4.0f) / 2.0f + 0.5f;
	TMR4_ENBL &= ~(1<<3);
	TMR4_SCTRL3 = TMR_SCTRL_OEN | TMR_SCTRL_FORCE;
	TMR4_CSCTRL3 = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_TCF1EN;
     b90:	f8a3 0074 	strh.w	r0, [r3, #116]	; 0x74
	TMR4_ENBL |= (1<<3);

	// connect the timer output the ADC_ETC input
	const int trigger = 4; // 0-3 for ADC1, 4-7 for ADC2
	CCM_CCGR2 |= CCM_CCGR2_XBAR1(CCM_CCGR_ON);
	xbar_connect(XBARA1_IN_QTIMER4_TIMER3, XBARA1_OUT_ADC_ETC_TRIG00 + trigger);
     b94:	2027      	movs	r0, #39	; 0x27
	//       the sample rate, so we avoid artifacts boundaries between captures
	const int comp1 = ((float)F_BUS_ACTUAL) / (AUDIO_SAMPLE_RATE_EXACT * 4.0f) / 2.0f + 0.5f;
	TMR4_ENBL &= ~(1<<3);
	TMR4_SCTRL3 = TMR_SCTRL_OEN | TMR_SCTRL_FORCE;
	TMR4_CSCTRL3 = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_TCF1EN;
	TMR4_CNTR3 = 0;
     b96:	f8a3 506a 	strh.w	r5, [r3, #106]	; 0x6a
	TMR4_LOAD3 = 0;
     b9a:	f8a3 5066 	strh.w	r5, [r3, #102]	; 0x66
	TMR4_COMP13 = comp1;
     b9e:	eee6 7aa7 	vfma.f32	s15, s13, s15
     ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     ba6:	edcd 7a01 	vstr	s15, [sp, #4]
     baa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     bae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	TMR4_CMPLD13 = comp1;
     bb2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	TMR4_CTRL3 = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) | TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(3);
     bb6:	f8a3 e06c 	strh.w	lr, [r3, #108]	; 0x6c
	TMR4_DMA3 = TMR_DMA_CMPLD1DE;
     bba:	f8a3 7078 	strh.w	r7, [r3, #120]	; 0x78
	TMR4_CNTR3 = 0;
     bbe:	f8a3 506a 	strh.w	r5, [r3, #106]	; 0x6a
	TMR4_ENBL |= (1<<3);
     bc2:	8bda      	ldrh	r2, [r3, #30]
     bc4:	b292      	uxth	r2, r2
     bc6:	f042 0208 	orr.w	r2, r2, #8
     bca:	83da      	strh	r2, [r3, #30]

	// connect the timer output the ADC_ETC input
	const int trigger = 4; // 0-3 for ADC1, 4-7 for ADC2
	CCM_CCGR2 |= CCM_CCGR2_XBAR1(CCM_CCGR_ON);
     bcc:	6f33      	ldr	r3, [r6, #112]	; 0x70
     bce:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
     bd2:	6733      	str	r3, [r6, #112]	; 0x70
	xbar_connect(XBARA1_IN_QTIMER4_TIMER3, XBARA1_OUT_ADC_ETC_TRIG00 + trigger);
     bd4:	f001 fca4 	bl	2520 <xbar_connect>

	// turn on ADC_ETC and configure to receive trigger
	if (ADC_ETC_CTRL & (ADC_ETC_CTRL_SOFTRST | ADC_ETC_CTRL_TSC_BYPASS)) {
     bd8:	4b30      	ldr	r3, [pc, #192]	; (c9c <AudioInputAnalog::init(unsigned char)+0x158>)
     bda:	681a      	ldr	r2, [r3, #0]
     bdc:	f012 4f40 	tst.w	r2, #3221225472	; 0xc0000000
     be0:	d001      	beq.n	be6 <AudioInputAnalog::init(unsigned char)+0xa2>
		ADC_ETC_CTRL = 0; // clears SOFTRST only
     be2:	601d      	str	r5, [r3, #0]
		ADC_ETC_CTRL = 0; // clears TSC_BYPASS
     be4:	601d      	str	r5, [r3, #0]
	}
	ADC_ETC_CTRL |= ADC_ETC_CTRL_TRIG_ENABLE(1 << trigger) | ADC_ETC_CTRL_DMA_MODE_SEL;
     be6:	4b2d      	ldr	r3, [pc, #180]	; (c9c <AudioInputAnalog::init(unsigned char)+0x158>)
	// configure ADC_ETC trigger4 to make one ADC2 measurement on pin A2
	const int len = 1;
	IMXRT_ADC_ETC.TRIG[trigger].CTRL = ADC_ETC_TRIG_CTRL_TRIG_CHAIN(len - 1) |
		ADC_ETC_TRIG_CTRL_TRIG_PRIORITY(7);
	IMXRT_ADC_ETC.TRIG[trigger].CHAIN_1_0 = ADC_ETC_TRIG_CHAIN_HWTS0(1) |
		ADC_ETC_TRIG_CHAIN_CSEL0(adc2_pin_to_channel[pin]) | ADC_ETC_TRIG_CHAIN_B2B0;
     be8:	f004 040f 	and.w	r4, r4, #15
	// turn on ADC_ETC and configure to receive trigger
	if (ADC_ETC_CTRL & (ADC_ETC_CTRL_SOFTRST | ADC_ETC_CTRL_TSC_BYPASS)) {
		ADC_ETC_CTRL = 0; // clears SOFTRST only
		ADC_ETC_CTRL = 0; // clears TSC_BYPASS
	}
	ADC_ETC_CTRL |= ADC_ETC_CTRL_TRIG_ENABLE(1 << trigger) | ADC_ETC_CTRL_DMA_MODE_SEL;
     bec:	4d2c      	ldr	r5, [pc, #176]	; (ca0 <AudioInputAnalog::init(unsigned char)+0x15c>)
	// configure ADC_ETC trigger4 to make one ADC2 measurement on pin A2
	const int len = 1;
	IMXRT_ADC_ETC.TRIG[trigger].CTRL = ADC_ETC_TRIG_CTRL_TRIG_CHAIN(len - 1) |
		ADC_ETC_TRIG_CTRL_TRIG_PRIORITY(7);
	IMXRT_ADC_ETC.TRIG[trigger].CHAIN_1_0 = ADC_ETC_TRIG_CHAIN_HWTS0(1) |
		ADC_ETC_TRIG_CHAIN_CSEL0(adc2_pin_to_channel[pin]) | ADC_ETC_TRIG_CHAIN_B2B0;
     bee:	f241 0210 	movw	r2, #4112	; 0x1010
	// turn on ADC_ETC and configure to receive trigger
	if (ADC_ETC_CTRL & (ADC_ETC_CTRL_SOFTRST | ADC_ETC_CTRL_TSC_BYPASS)) {
		ADC_ETC_CTRL = 0; // clears SOFTRST only
		ADC_ETC_CTRL = 0; // clears TSC_BYPASS
	}
	ADC_ETC_CTRL |= ADC_ETC_CTRL_TRIG_ENABLE(1 << trigger) | ADC_ETC_CTRL_DMA_MODE_SEL;
     bf2:	6819      	ldr	r1, [r3, #0]
	ADC_ETC_DMA_CTRL |= ADC_ETC_DMA_CTRL_TRIQ_ENABLE(trigger);

	// configure ADC_ETC trigger4 to make one ADC2 measurement on pin A2
	const int len = 1;
	IMXRT_ADC_ETC.TRIG[trigger].CTRL = ADC_ETC_TRIG_CTRL_TRIG_CHAIN(len - 1) |
		ADC_ETC_TRIG_CTRL_TRIG_PRIORITY(7);
     bf4:	f44f 47e0 	mov.w	r7, #28672	; 0x7000
	IMXRT_ADC_ETC.TRIG[trigger].CHAIN_1_0 = ADC_ETC_TRIG_CHAIN_HWTS0(1) |
		ADC_ETC_TRIG_CHAIN_CSEL0(adc2_pin_to_channel[pin]) | ADC_ETC_TRIG_CHAIN_B2B0;
     bf8:	4322      	orrs	r2, r4

	// set up ADC2 for 12 bit mode, hardware trigger
	Serial.printf("ADC2_CFG = %08X\n", ADC2_CFG);
     bfa:	4c2a      	ldr	r4, [pc, #168]	; (ca4 <AudioInputAnalog::init(unsigned char)+0x160>)
	// turn on ADC_ETC and configure to receive trigger
	if (ADC_ETC_CTRL & (ADC_ETC_CTRL_SOFTRST | ADC_ETC_CTRL_TSC_BYPASS)) {
		ADC_ETC_CTRL = 0; // clears SOFTRST only
		ADC_ETC_CTRL = 0; // clears TSC_BYPASS
	}
	ADC_ETC_CTRL |= ADC_ETC_CTRL_TRIG_ENABLE(1 << trigger) | ADC_ETC_CTRL_DMA_MODE_SEL;
     bfc:	430d      	orrs	r5, r1
		ADC_ETC_TRIG_CTRL_TRIG_PRIORITY(7);
	IMXRT_ADC_ETC.TRIG[trigger].CHAIN_1_0 = ADC_ETC_TRIG_CHAIN_HWTS0(1) |
		ADC_ETC_TRIG_CHAIN_CSEL0(adc2_pin_to_channel[pin]) | ADC_ETC_TRIG_CHAIN_B2B0;

	// set up ADC2 for 12 bit mode, hardware trigger
	Serial.printf("ADC2_CFG = %08X\n", ADC2_CFG);
     bfe:	482a      	ldr	r0, [pc, #168]	; (ca8 <AudioInputAnalog::init(unsigned char)+0x164>)
     c00:	492a      	ldr	r1, [pc, #168]	; (cac <AudioInputAnalog::init(unsigned char)+0x168>)
	// turn on ADC_ETC and configure to receive trigger
	if (ADC_ETC_CTRL & (ADC_ETC_CTRL_SOFTRST | ADC_ETC_CTRL_TSC_BYPASS)) {
		ADC_ETC_CTRL = 0; // clears SOFTRST only
		ADC_ETC_CTRL = 0; // clears TSC_BYPASS
	}
	ADC_ETC_CTRL |= ADC_ETC_CTRL_TRIG_ENABLE(1 << trigger) | ADC_ETC_CTRL_DMA_MODE_SEL;
     c02:	601d      	str	r5, [r3, #0]
	ADC_ETC_DMA_CTRL |= ADC_ETC_DMA_CTRL_TRIQ_ENABLE(trigger);
     c04:	68de      	ldr	r6, [r3, #12]
		ADC_CFG_ADICLK(1) | ADC_CFG_ADIV(0) /*| ADC_CFG_ADHSC*/;
	ADC2_GC &= ~ADC_GC_AVGE; // single sample, no averaging
	ADC2_HC0 = ADC_HC_ADCH(16); // 16 = controlled by ADC_ETC

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
     c06:	4d2a      	ldr	r5, [pc, #168]	; (cb0 <AudioInputAnalog::init(unsigned char)+0x16c>)
	if (ADC_ETC_CTRL & (ADC_ETC_CTRL_SOFTRST | ADC_ETC_CTRL_TSC_BYPASS)) {
		ADC_ETC_CTRL = 0; // clears SOFTRST only
		ADC_ETC_CTRL = 0; // clears TSC_BYPASS
	}
	ADC_ETC_CTRL |= ADC_ETC_CTRL_TRIG_ENABLE(1 << trigger) | ADC_ETC_CTRL_DMA_MODE_SEL;
	ADC_ETC_DMA_CTRL |= ADC_ETC_DMA_CTRL_TRIQ_ENABLE(trigger);
     c08:	f046 0610 	orr.w	r6, r6, #16
     c0c:	60de      	str	r6, [r3, #12]

	// set up ADC2 for 12 bit mode, hardware trigger
	Serial.printf("ADC2_CFG = %08X\n", ADC2_CFG);
	ADC2_CFG |= ADC_CFG_ADTRG;
	ADC2_CFG = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP | ADC_CFG_ADTRG |
		ADC_CFG_ADICLK(1) | ADC_CFG_ADIV(0) /*| ADC_CFG_ADHSC*/;
     c0e:	f242 3619 	movw	r6, #8985	; 0x2319
	ADC_ETC_DMA_CTRL |= ADC_ETC_DMA_CTRL_TRIQ_ENABLE(trigger);

	// configure ADC_ETC trigger4 to make one ADC2 measurement on pin A2
	const int len = 1;
	IMXRT_ADC_ETC.TRIG[trigger].CTRL = ADC_ETC_TRIG_CTRL_TRIG_CHAIN(len - 1) |
		ADC_ETC_TRIG_CTRL_TRIG_PRIORITY(7);
     c12:	f8c3 70b0 	str.w	r7, [r3, #176]	; 0xb0
	IMXRT_ADC_ETC.TRIG[trigger].CHAIN_1_0 = ADC_ETC_TRIG_CHAIN_HWTS0(1) |
		ADC_ETC_TRIG_CHAIN_CSEL0(adc2_pin_to_channel[pin]) | ADC_ETC_TRIG_CHAIN_B2B0;
     c16:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	// set up ADC2 for 12 bit mode, hardware trigger
	Serial.printf("ADC2_CFG = %08X\n", ADC2_CFG);
     c1a:	6c62      	ldr	r2, [r4, #68]	; 0x44
     c1c:	f003 f814 	bl	3c48 <Print::printf(char const*, ...)>
	ADC2_CFG |= ADC_CFG_ADTRG;
     c20:	6c63      	ldr	r3, [r4, #68]	; 0x44
	ADC2_CFG = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP | ADC_CFG_ADTRG |
		ADC_CFG_ADICLK(1) | ADC_CFG_ADIV(0) /*| ADC_CFG_ADHSC*/;
	ADC2_GC &= ~ADC_GC_AVGE; // single sample, no averaging
	ADC2_HC0 = ADC_HC_ADCH(16); // 16 = controlled by ADC_ETC
     c22:	2210      	movs	r2, #16

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
     c24:	4628      	mov	r0, r5
	IMXRT_ADC_ETC.TRIG[trigger].CHAIN_1_0 = ADC_ETC_TRIG_CHAIN_HWTS0(1) |
		ADC_ETC_TRIG_CHAIN_CSEL0(adc2_pin_to_channel[pin]) | ADC_ETC_TRIG_CHAIN_B2B0;

	// set up ADC2 for 12 bit mode, hardware trigger
	Serial.printf("ADC2_CFG = %08X\n", ADC2_CFG);
	ADC2_CFG |= ADC_CFG_ADTRG;
     c26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		ADC_CFG_ADICLK(1) | ADC_CFG_ADIV(0) /*| ADC_CFG_ADHSC*/;
	ADC2_GC &= ~ADC_GC_AVGE; // single sample, no averaging
	ADC2_HC0 = ADC_HC_ADCH(16); // 16 = controlled by ADC_ETC

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
     c2a:	2100      	movs	r1, #0
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = adc_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(adc_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(adc_buffer);
     c2c:	4f21      	ldr	r7, [pc, #132]	; (cb4 <AudioInputAnalog::init(unsigned char)+0x170>)
	IMXRT_ADC_ETC.TRIG[trigger].CHAIN_1_0 = ADC_ETC_TRIG_CHAIN_HWTS0(1) |
		ADC_ETC_TRIG_CHAIN_CSEL0(adc2_pin_to_channel[pin]) | ADC_ETC_TRIG_CHAIN_B2B0;

	// set up ADC2 for 12 bit mode, hardware trigger
	Serial.printf("ADC2_CFG = %08X\n", ADC2_CFG);
	ADC2_CFG |= ADC_CFG_ADTRG;
     c2e:	6463      	str	r3, [r4, #68]	; 0x44
	ADC2_CFG = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP | ADC_CFG_ADTRG |
		ADC_CFG_ADICLK(1) | ADC_CFG_ADIV(0) /*| ADC_CFG_ADHSC*/;
     c30:	6466      	str	r6, [r4, #68]	; 0x44
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = adc_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(adc_buffer) / 2;
     c32:	f44f 7632 	mov.w	r6, #712	; 0x2c8
	// set up ADC2 for 12 bit mode, hardware trigger
	Serial.printf("ADC2_CFG = %08X\n", ADC2_CFG);
	ADC2_CFG |= ADC_CFG_ADTRG;
	ADC2_CFG = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP | ADC_CFG_ADTRG |
		ADC_CFG_ADICLK(1) | ADC_CFG_ADIV(0) /*| ADC_CFG_ADHSC*/;
	ADC2_GC &= ~ADC_GC_AVGE; // single sample, no averaging
     c36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     c38:	f023 0320 	bic.w	r3, r3, #32
     c3c:	64a3      	str	r3, [r4, #72]	; 0x48
	ADC2_HC0 = ADC_HC_ADCH(16); // 16 = controlled by ADC_ETC
     c3e:	6022      	str	r2, [r4, #0]

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
	dma.TCD->SADDR = &(IMXRT_ADC_ETC.TRIG[4].RESULT_1_0);
     c40:	f504 143a 	add.w	r4, r4, #3047424	; 0x2e8000
		ADC_CFG_ADICLK(1) | ADC_CFG_ADIV(0) /*| ADC_CFG_ADHSC*/;
	ADC2_GC &= ~ADC_GC_AVGE; // single sample, no averaging
	ADC2_HC0 = ADC_HC_ADCH(16); // 16 = controlled by ADC_ETC

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
     c44:	f002 fe6c 	bl	3920 <DMAChannel::begin(bool)>
	dma.TCD->SADDR = &(IMXRT_ADC_ETC.TRIG[4].RESULT_1_0);
     c48:	682b      	ldr	r3, [r5, #0]
	dma.TCD->SOFF = 0;
     c4a:	2200      	movs	r2, #0
	ADC2_GC &= ~ADC_GC_AVGE; // single sample, no averaging
	ADC2_HC0 = ADC_HC_ADCH(16); // 16 = controlled by ADC_ETC

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
	dma.TCD->SADDR = &(IMXRT_ADC_ETC.TRIG[4].RESULT_1_0);
     c4c:	34c8      	adds	r4, #200	; 0xc8
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = adc_buffer;
     c4e:	481a      	ldr	r0, [pc, #104]	; (cb8 <AudioInputAnalog::init(unsigned char)+0x174>)

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
	dma.TCD->SADDR = &(IMXRT_ADC_ETC.TRIG[4].RESULT_1_0);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
     c50:	f240 1101 	movw	r1, #257	; 0x101
	ADC2_GC &= ~ADC_GC_AVGE; // single sample, no averaging
	ADC2_HC0 = ADC_HC_ADCH(16); // 16 = controlled by ADC_ETC

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
	dma.TCD->SADDR = &(IMXRT_ADC_ETC.TRIG[4].RESULT_1_0);
     c54:	601c      	str	r4, [r3, #0]
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
     c56:	2402      	movs	r4, #2
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = adc_buffer;
     c58:	6118      	str	r0, [r3, #16]
	ADC2_HC0 = ADC_HC_ADCH(16); // 16 = controlled by ADC_ETC

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
	dma.TCD->SADDR = &(IMXRT_ADC_ETC.TRIG[4].RESULT_1_0);
	dma.TCD->SOFF = 0;
     c5a:	809a      	strh	r2, [r3, #4]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = adc_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(adc_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(adc_buffer);
     c5c:	619f      	str	r7, [r3, #24]

	// use a DMA channel to capture ADC_ETC output
	dma.begin();
	dma.TCD->SADDR = &(IMXRT_ADC_ETC.TRIG[4].RESULT_1_0);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
     c5e:	80d9      	strh	r1, [r3, #6]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     c60:	7928      	ldrb	r0, [r5, #4]
     c62:	4916      	ldr	r1, [pc, #88]	; (cbc <AudioInputAnalog::init(unsigned char)+0x178>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     c64:	4f16      	ldr	r7, [pc, #88]	; (cc0 <AudioInputAnalog::init(unsigned char)+0x17c>)
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = adc_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(adc_buffer) / 2;
     c66:	82de      	strh	r6, [r3, #22]
	dma.begin();
	dma.TCD->SADDR = &(IMXRT_ADC_ETC.TRIG[4].RESULT_1_0);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
     c68:	60da      	str	r2, [r3, #12]
	dma.TCD->DADDR = adc_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(adc_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(adc_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(adc_buffer) / 2;
     c6a:	83de      	strh	r6, [r3, #30]
	// use a DMA channel to capture ADC_ETC output
	dma.begin();
	dma.TCD->SADDR = &(IMXRT_ADC_ETC.TRIG[4].RESULT_1_0);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
     c6c:	609c      	str	r4, [r3, #8]
	dma.TCD->DADDR = adc_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(adc_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(adc_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(adc_buffer) / 2;
	dma.TCD->CSR = 0;
     c6e:	839a      	strh	r2, [r3, #28]
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = adc_buffer;
	dma.TCD->DOFF = 2;
     c70:	829c      	strh	r4, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     c72:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     c76:	4b13      	ldr	r3, [pc, #76]	; (cc4 <AudioInputAnalog::init(unsigned char)+0x180>)
	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     c78:	f841 7020 	str.w	r7, [r1, r0, lsl #2]
     c7c:	792a      	ldrb	r2, [r5, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     c7e:	76da      	strb	r2, [r3, #27]
	dma.TCD->CSR = 0;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_ADC_ETC);
	dma.enable();

	// TODO: configure I2S1 to interrupt every 128 audio samples
}
     c80:	b003      	add	sp, #12
     c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c84:	4770      	bx	lr
     c86:	bf00      	nop
     c88:	600016d0 	.word	0x600016d0
     c8c:	20004854 	.word	0x20004854
     c90:	482c4400 	.word	0x482c4400
     c94:	401e8000 	.word	0x401e8000
     c98:	400fc000 	.word	0x400fc000
     c9c:	403b0000 	.word	0x403b0000
     ca0:	20000010 	.word	0x20000010
     ca4:	400c8000 	.word	0x400c8000
     ca8:	2000488c 	.word	0x2000488c
     cac:	2000097c 	.word	0x2000097c
     cb0:	20007190 	.word	0x20007190
     cb4:	fffffa70 	.word	0xfffffa70
     cb8:	200067e0 	.word	0x200067e0
     cbc:	400ec000 	.word	0x400ec000
     cc0:	80000017 	.word	0x80000017
     cc4:	400e8000 	.word	0x400e8000

00000cc8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:

extern "C" void xbar_connect(unsigned int input, unsigned int output);

#define FILTERLEN 15

DMAChannel AudioInputAnalog::dma(false);
     cc8:	4a02      	ldr	r2, [pc, #8]	; (cd4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
     cca:	4903      	ldr	r1, [pc, #12]	; (cd8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
     ccc:	4803      	ldr	r0, [pc, #12]	; (cdc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
     cce:	f003 bc7b 	b.w	45c8 <__aeabi_atexit>
     cd2:	bf00      	nop
     cd4:	200047e8 	.word	0x200047e8
     cd8:	00000a39 	.word	0x00000a39
     cdc:	20007190 	.word	0x20007190

00000ce0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
     ce0:	4a02      	ldr	r2, [pc, #8]	; (cec <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
     ce2:	4903      	ldr	r1, [pc, #12]	; (cf0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
     ce4:	4803      	ldr	r0, [pc, #12]	; (cf4 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
     ce6:	f003 bc6f 	b.w	45c8 <__aeabi_atexit>
     cea:	bf00      	nop
     cec:	200047e8 	.word	0x200047e8
     cf0:	00000a39 	.word	0x00000a39
     cf4:	20007198 	.word	0x20007198

00000cf8 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
     cf8:	4a02      	ldr	r2, [pc, #8]	; (d04 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
     cfa:	4903      	ldr	r1, [pc, #12]	; (d08 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
     cfc:	4803      	ldr	r0, [pc, #12]	; (d0c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
     cfe:	f003 bc63 	b.w	45c8 <__aeabi_atexit>
     d02:	bf00      	nop
     d04:	200047e8 	.word	0x200047e8
     d08:	00000a39 	.word	0x00000a39
     d0c:	200071a0 	.word	0x200071a0

00000d10 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
     d10:	4a02      	ldr	r2, [pc, #8]	; (d1c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
     d12:	4903      	ldr	r1, [pc, #12]	; (d20 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
     d14:	4803      	ldr	r0, [pc, #12]	; (d24 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
     d16:	f003 bc57 	b.w	45c8 <__aeabi_atexit>
     d1a:	bf00      	nop
     d1c:	200047e8 	.word	0x200047e8
     d20:	00000a39 	.word	0x00000a39
     d24:	200071a8 	.word	0x200071a8

00000d28 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
     d28:	4a02      	ldr	r2, [pc, #8]	; (d34 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
     d2a:	4903      	ldr	r1, [pc, #12]	; (d38 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
     d2c:	4803      	ldr	r0, [pc, #12]	; (d3c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
     d2e:	f003 bc4b 	b.w	45c8 <__aeabi_atexit>
     d32:	bf00      	nop
     d34:	200047e8 	.word	0x200047e8
     d38:	00000a39 	.word	0x00000a39
     d3c:	200071b0 	.word	0x200071b0

00000d40 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
     d40:	4a02      	ldr	r2, [pc, #8]	; (d4c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
     d42:	4903      	ldr	r1, [pc, #12]	; (d50 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
     d44:	4803      	ldr	r0, [pc, #12]	; (d54 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
     d46:	f003 bc3f 	b.w	45c8 <__aeabi_atexit>
     d4a:	bf00      	nop
     d4c:	200047e8 	.word	0x200047e8
     d50:	00000a39 	.word	0x00000a39
     d54:	200071b8 	.word	0x200071b8

00000d58 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
     d58:	4a02      	ldr	r2, [pc, #8]	; (d64 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
     d5a:	4903      	ldr	r1, [pc, #12]	; (d68 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
     d5c:	4803      	ldr	r0, [pc, #12]	; (d6c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
     d5e:	f003 bc33 	b.w	45c8 <__aeabi_atexit>
     d62:	bf00      	nop
     d64:	200047e8 	.word	0x200047e8
     d68:	00000a39 	.word	0x00000a39
     d6c:	200071c0 	.word	0x200071c0

00000d70 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
     d70:	4a02      	ldr	r2, [pc, #8]	; (d7c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
     d72:	4903      	ldr	r1, [pc, #12]	; (d80 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
     d74:	4803      	ldr	r0, [pc, #12]	; (d84 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
     d76:	f003 bc27 	b.w	45c8 <__aeabi_atexit>
     d7a:	bf00      	nop
     d7c:	200047e8 	.word	0x200047e8
     d80:	00000a39 	.word	0x00000a39
     d84:	200071c8 	.word	0x200071c8

00000d88 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
     d88:	4a02      	ldr	r2, [pc, #8]	; (d94 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
     d8a:	4903      	ldr	r1, [pc, #12]	; (d98 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
     d8c:	4803      	ldr	r0, [pc, #12]	; (d9c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
     d8e:	f003 bc1b 	b.w	45c8 <__aeabi_atexit>
     d92:	bf00      	nop
     d94:	200047e8 	.word	0x200047e8
     d98:	00000a39 	.word	0x00000a39
     d9c:	200071d0 	.word	0x200071d0

00000da0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
     da0:	4a02      	ldr	r2, [pc, #8]	; (dac <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
     da2:	4903      	ldr	r1, [pc, #12]	; (db0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
     da4:	4803      	ldr	r0, [pc, #12]	; (db4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
     da6:	f003 bc0f 	b.w	45c8 <__aeabi_atexit>
     daa:	bf00      	nop
     dac:	200047e8 	.word	0x200047e8
     db0:	00000a39 	.word	0x00000a39
     db4:	200071d8 	.word	0x200071d8

00000db8 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
     db8:	4a02      	ldr	r2, [pc, #8]	; (dc4 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
     dba:	4903      	ldr	r1, [pc, #12]	; (dc8 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
     dbc:	4803      	ldr	r0, [pc, #12]	; (dcc <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
     dbe:	f003 bc03 	b.w	45c8 <__aeabi_atexit>
     dc2:	bf00      	nop
     dc4:	200047e8 	.word	0x200047e8
     dc8:	00000a39 	.word	0x00000a39
     dcc:	200071e0 	.word	0x200071e0

00000dd0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
     dd0:	4a02      	ldr	r2, [pc, #8]	; (ddc <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
     dd2:	4903      	ldr	r1, [pc, #12]	; (de0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
     dd4:	4803      	ldr	r0, [pc, #12]	; (de4 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
     dd6:	f003 bbf7 	b.w	45c8 <__aeabi_atexit>
     dda:	bf00      	nop
     ddc:	200047e8 	.word	0x200047e8
     de0:	00000a39 	.word	0x00000a39
     de4:	200071e8 	.word	0x200071e8

00000de8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
     de8:	4a02      	ldr	r2, [pc, #8]	; (df4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
     dea:	4903      	ldr	r1, [pc, #12]	; (df8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
     dec:	4803      	ldr	r0, [pc, #12]	; (dfc <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
     dee:	f003 bbeb 	b.w	45c8 <__aeabi_atexit>
     df2:	bf00      	nop
     df4:	200047e8 	.word	0x200047e8
     df8:	00000a39 	.word	0x00000a39
     dfc:	200071f0 	.word	0x200071f0

00000e00 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
     e00:	4a02      	ldr	r2, [pc, #8]	; (e0c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
     e02:	4903      	ldr	r1, [pc, #12]	; (e10 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
     e04:	4803      	ldr	r0, [pc, #12]	; (e14 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
     e06:	f003 bbdf 	b.w	45c8 <__aeabi_atexit>
     e0a:	bf00      	nop
     e0c:	200047e8 	.word	0x200047e8
     e10:	00000a39 	.word	0x00000a39
     e14:	200071f8 	.word	0x200071f8

00000e18 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
     e18:	4a02      	ldr	r2, [pc, #8]	; (e24 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
     e1a:	4903      	ldr	r1, [pc, #12]	; (e28 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
     e1c:	4803      	ldr	r0, [pc, #12]	; (e2c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
     e1e:	f003 bbd3 	b.w	45c8 <__aeabi_atexit>
     e22:	bf00      	nop
     e24:	200047e8 	.word	0x200047e8
     e28:	00000a39 	.word	0x00000a39
     e2c:	20007200 	.word	0x20007200

00000e30 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
     e30:	4a02      	ldr	r2, [pc, #8]	; (e3c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
     e32:	4903      	ldr	r1, [pc, #12]	; (e40 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
     e34:	4803      	ldr	r0, [pc, #12]	; (e44 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
     e36:	f003 bbc7 	b.w	45c8 <__aeabi_atexit>
     e3a:	bf00      	nop
     e3c:	200047e8 	.word	0x200047e8
     e40:	00000a39 	.word	0x00000a39
     e44:	20007208 	.word	0x20007208

00000e48 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
     e48:	4a02      	ldr	r2, [pc, #8]	; (e54 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
     e4a:	4903      	ldr	r1, [pc, #12]	; (e58 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
     e4c:	4803      	ldr	r0, [pc, #12]	; (e5c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
     e4e:	f003 bbbb 	b.w	45c8 <__aeabi_atexit>
     e52:	bf00      	nop
     e54:	200047e8 	.word	0x200047e8
     e58:	00000a39 	.word	0x00000a39
     e5c:	20007210 	.word	0x20007210

00000e60 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
     e60:	4a02      	ldr	r2, [pc, #8]	; (e6c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
     e62:	4903      	ldr	r1, [pc, #12]	; (e70 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
     e64:	4803      	ldr	r0, [pc, #12]	; (e74 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
     e66:	f003 bbaf 	b.w	45c8 <__aeabi_atexit>
     e6a:	bf00      	nop
     e6c:	200047e8 	.word	0x200047e8
     e70:	00000a39 	.word	0x00000a39
     e74:	20007218 	.word	0x20007218

00000e78 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
     e78:	4a02      	ldr	r2, [pc, #8]	; (e84 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
     e7a:	4903      	ldr	r1, [pc, #12]	; (e88 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
     e7c:	4803      	ldr	r0, [pc, #12]	; (e8c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
     e7e:	f003 bba3 	b.w	45c8 <__aeabi_atexit>
     e82:	bf00      	nop
     e84:	200047e8 	.word	0x200047e8
     e88:	00000a39 	.word	0x00000a39
     e8c:	20007220 	.word	0x20007220

00000e90 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
     e90:	4a02      	ldr	r2, [pc, #8]	; (e9c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
     e92:	4903      	ldr	r1, [pc, #12]	; (ea0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
     e94:	4803      	ldr	r0, [pc, #12]	; (ea4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
     e96:	f003 bb97 	b.w	45c8 <__aeabi_atexit>
     e9a:	bf00      	nop
     e9c:	200047e8 	.word	0x200047e8
     ea0:	00000a39 	.word	0x00000a39
     ea4:	20007228 	.word	0x20007228

00000ea8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
     ea8:	4a02      	ldr	r2, [pc, #8]	; (eb4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
     eaa:	4903      	ldr	r1, [pc, #12]	; (eb8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
     eac:	4803      	ldr	r0, [pc, #12]	; (ebc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
     eae:	f003 bb8b 	b.w	45c8 <__aeabi_atexit>
     eb2:	bf00      	nop
     eb4:	200047e8 	.word	0x200047e8
     eb8:	00000a39 	.word	0x00000a39
     ebc:	20007230 	.word	0x20007230

00000ec0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
     ec0:	4a02      	ldr	r2, [pc, #8]	; (ecc <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
     ec2:	4903      	ldr	r1, [pc, #12]	; (ed0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
     ec4:	4803      	ldr	r0, [pc, #12]	; (ed4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
     ec6:	f003 bb7f 	b.w	45c8 <__aeabi_atexit>
     eca:	bf00      	nop
     ecc:	200047e8 	.word	0x200047e8
     ed0:	00000a39 	.word	0x00000a39
     ed4:	20007238 	.word	0x20007238

00000ed8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
     ed8:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     eda:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     edc:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     ede:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     ee0:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     ee2:	d003      	beq.n	eec <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
     ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     ee8:	f002 bd84 	b.w	39f4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     eec:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
     eee:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     ef2:	4718      	bx	r3

00000ef4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
     ef4:	b470      	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
     ef6:	f240 2501 	movw	r5, #513	; 0x201
     efa:	6804      	ldr	r4, [r0, #0]
     efc:	6125      	str	r5, [r4, #16]

	while (count > 0) {
     efe:	b31b      	cbz	r3, f48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
     f00:	461e      	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
     f02:	b1f1      	cbz	r1, f42 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
     f04:	780d      	ldrb	r5, [r1, #0]
     f06:	3101      	adds	r1, #1
		count--; // how many bytes left to output.
     f08:	3b01      	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
     f0a:	6665      	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
     f0c:	6f25      	ldr	r5, [r4, #112]	; 0x70
     f0e:	07ad      	lsls	r5, r5, #30
     f10:	d406      	bmi.n	f20 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
     f12:	6f65      	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
     f14:	3e01      	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
     f16:	b2ed      	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
     f18:	b112      	cbz	r2, f20 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
     f1a:	7015      	strb	r5, [r2, #0]
     f1c:	3201      	adds	r2, #1
     f1e:	6804      	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
     f20:	6965      	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
     f22:	07ed      	lsls	r5, r5, #31
     f24:	d5f2      	bpl.n	f0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
     f26:	2b00      	cmp	r3, #0
     f28:	d1eb      	bne.n	f02 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
     f2a:	b16e      	cbz	r6, f48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     f2c:	6801      	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
     f2e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
     f30:	079b      	lsls	r3, r3, #30
     f32:	d4fc      	bmi.n	f2e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
     f34:	6f4b      	ldr	r3, [r1, #116]	; 0x74
     f36:	b2db      	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
     f38:	b10a      	cbz	r2, f3e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
     f3a:	7013      	strb	r3, [r2, #0]
     f3c:	3201      	adds	r2, #1
			count_read--;
     f3e:	3e01      	subs	r6, #1
     f40:	e7f3      	b.n	f2a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
     f42:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
     f46:	e7df      	b.n	f08 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
     f48:	bc70      	pop	{r4, r5, r6}
     f4a:	4770      	bx	lr

00000f4c <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     f4c:	b5f0      	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
     f4e:	4c30      	ldr	r4, [pc, #192]	; (1010 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     f50:	4b30      	ldr	r3, [pc, #192]	; (1014 <_spi_dma_rxISR0()+0xc8>)
     f52:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
     f54:	6c65      	ldr	r5, [r4, #68]	; 0x44
     f56:	7901      	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
     f58:	6c22      	ldr	r2, [r4, #64]	; 0x40
     f5a:	77d9      	strb	r1, [r3, #31]
     f5c:	7929      	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
     f5e:	7719      	strb	r1, [r3, #28]
     f60:	7901      	ldrb	r1, [r0, #4]
     f62:	7719      	strb	r1, [r3, #28]
     f64:	b1fa      	cbz	r2, fa6 <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
     f66:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
     f6a:	d218      	bcs.n	f9e <_spi_dma_rxISR0()+0x52>
     f6c:	682b      	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
     f6e:	b292      	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     f70:	8bd9      	ldrh	r1, [r3, #30]
     f72:	040e      	lsls	r6, r1, #16
     f74:	d43b      	bmi.n	fee <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
     f76:	83da      	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
     f78:	8bd9      	ldrh	r1, [r3, #30]
     f7a:	b289      	uxth	r1, r1
     f7c:	82d9      	strh	r1, [r3, #22]
     f7e:	6803      	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     f80:	8bd9      	ldrh	r1, [r3, #30]
     f82:	0409      	lsls	r1, r1, #16
     f84:	d42c      	bmi.n	fe0 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
     f86:	83da      	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
     f88:	2100      	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
     f8a:	8bda      	ldrh	r2, [r3, #30]
     f8c:	b292      	uxth	r2, r2
     f8e:	82da      	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
     f90:	6421      	str	r1, [r4, #64]	; 0x40
     f92:	7902      	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     f94:	4b1f      	ldr	r3, [pc, #124]	; (1014 <_spi_dma_rxISR0()+0xc8>)
     f96:	76da      	strb	r2, [r3, #27]
     f98:	792a      	ldrb	r2, [r5, #4]
     f9a:	76da      	strb	r2, [r3, #27]
     f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
     f9e:	4b1e      	ldr	r3, [pc, #120]	; (1018 <_spi_dma_rxISR0()+0xcc>)
     fa0:	4413      	add	r3, r2
     fa2:	6423      	str	r3, [r4, #64]	; 0x40
     fa4:	e7f5      	b.n	f92 <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
     fa6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
     fa8:	250f      	movs	r5, #15
     faa:	6823      	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
     fac:	f240 3e01 	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
     fb0:	6801      	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
     fb2:	f44f 577c 	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
     fb6:	659d      	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
     fb8:	2603      	movs	r6, #3
		_dma_event_responder->triggerEvent();
     fba:	680d      	ldr	r5, [r1, #0]
     fbc:	4917      	ldr	r1, [pc, #92]	; (101c <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
     fbe:	61da      	str	r2, [r3, #28]
     fc0:	428d      	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
     fc2:	f8c3 e010 	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
     fc6:	615f      	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
     fc8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
     fcc:	d117      	bne.n	ffe <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     fce:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     fd0:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     fd2:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     fd4:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     fd6:	d017      	beq.n	1008 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     fd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     fdc:	f002 bd0a 	b.w	39f4 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
     fe0:	8bd9      	ldrh	r1, [r3, #30]
     fe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
     fe6:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
     fea:	430a      	orrs	r2, r1
     fec:	e7cb      	b.n	f86 <_spi_dma_rxISR0()+0x3a>
     fee:	8bd9      	ldrh	r1, [r3, #30]
     ff0:	f3c2 0608 	ubfx	r6, r2, #0, #9
     ff4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
     ff8:	4331      	orrs	r1, r6
     ffa:	83d9      	strh	r1, [r3, #30]
     ffc:	e7bc      	b.n	f78 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
     ffe:	462b      	mov	r3, r5
    1000:	4611      	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1002:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1006:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1008:	6883      	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    100a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    100e:	4718      	bx	r3
    1010:	20004800 	.word	0x20004800
    1014:	400e8000 	.word	0x400e8000
    1018:	ffff8001 	.word	0xffff8001
    101c:	00000ed9 	.word	0x00000ed9

00001020 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    1020:	b10b      	cbz	r3, 1026 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    1022:	f7ff bf67 	b.w	ef4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    1026:	4770      	bx	lr

00001028 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    1028:	2000      	movs	r0, #0
    102a:	4770      	bx	lr

0000102c <Print::flush()>:
	virtual void flush()				{ }
    102c:	4770      	bx	lr
    102e:	bf00      	nop

00001030 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    1030:	4b06      	ldr	r3, [pc, #24]	; (104c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
    1032:	2200      	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1034:	2002      	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1036:	4906      	ldr	r1, [pc, #24]	; (1050 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    1038:	709a      	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    103a:	6058      	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    103c:	62d9      	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    103e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1046:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    104a:	4770      	bx	lr
    104c:	20007240 	.word	0x20007240
    1050:	20000a2c 	.word	0x20000a2c

00001054 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1054:	4b20      	ldr	r3, [pc, #128]	; (10d8 <SDHC_CMD_Do(unsigned long)+0x84>)
    1056:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1058:	4619      	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    105a:	b410      	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    105c:	f042 0280 	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1060:	461c      	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1062:	631a      	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1064:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    1066:	4b1c      	ldr	r3, [pc, #112]	; (10d8 <SDHC_CMD_Do(unsigned long)+0x84>)
    1068:	07d2      	lsls	r2, r2, #31
    106a:	d4fb      	bmi.n	1064 <SDHC_CMD_Do(unsigned long)+0x10>
    106c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    106e:	0792      	lsls	r2, r2, #30
    1070:	d4f8      	bmi.n	1064 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    1072:	60d8      	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    1074:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    1078:	4618      	mov	r0, r3
    107a:	e000      	b.n	107e <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    107c:	b1aa      	cbz	r2, 10aa <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    107e:	6b01      	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    1080:	3a01      	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    1082:	4b16      	ldr	r3, [pc, #88]	; (10dc <SDHC_CMD_Do(unsigned long)+0x88>)
    1084:	4c14      	ldr	r4, [pc, #80]	; (10d8 <SDHC_CMD_Do(unsigned long)+0x84>)
    1086:	400b      	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    1088:	2b00      	cmp	r3, #0
    108a:	d0f7      	beq.n	107c <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    108c:	b16a      	cbz	r2, 10aa <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    108e:	2b01      	cmp	r3, #1
    1090:	d10b      	bne.n	10aa <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    1092:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1094:	f013 0f80 	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1098:	6b23      	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    109a:	d00f      	beq.n	10bc <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    109c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    10a0:	2003      	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10a2:	6323      	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    10a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    10a8:	4770      	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    10aa:	4a0b      	ldr	r2, [pc, #44]	; (10d8 <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    10ac:	2001      	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    10ae:	4b0c      	ldr	r3, [pc, #48]	; (10e0 <SDHC_CMD_Do(unsigned long)+0x8c>)
    10b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
    10b2:	430b      	orrs	r3, r1
    10b4:	6313      	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    10b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    10ba:	4770      	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    10bc:	f413 3080 	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    10c2:	d004      	beq.n	10ce <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    10c8:	2005      	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10ca:	6323      	str	r3, [r4, #48]	; 0x30
    10cc:	e7f3      	b.n	10b6 <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    10ce:	f043 0301 	orr.w	r3, r3, #1
    10d2:	6323      	str	r3, [r4, #48]	; 0x30
    10d4:	e7ef      	b.n	10b6 <SDHC_CMD_Do(unsigned long)+0x62>
    10d6:	bf00      	nop
    10d8:	402c0000 	.word	0x402c0000
    10dc:	000e0001 	.word	0x000e0001
    10e0:	000f0001 	.word	0x000f0001

000010e4 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    10e4:	b570      	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    10e6:	4d0d      	ldr	r5, [pc, #52]	; (111c <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    10e8:	2600      	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    10ea:	480d      	ldr	r0, [pc, #52]	; (1120 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    10ec:	f240 34e7 	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    10f0:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    10f2:	f7ff ffaf 	bl	1054 <SDHC_CMD_Do(unsigned long)>
    10f6:	4603      	mov	r3, r0
    10f8:	e006      	b.n	1108 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    10fa:	b94b      	cbnz	r3, 1110 <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    10fc:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    10fe:	f7ff ffa9 	bl	1054 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1102:	3c01      	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1104:	4603      	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1106:	d005      	beq.n	1114 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    1108:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    110a:	4805      	ldr	r0, [pc, #20]	; (1120 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    110c:	0752      	lsls	r2, r2, #29
    110e:	d4f4      	bmi.n	10fa <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    1110:	4618      	mov	r0, r3
    1112:	bd70      	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1114:	2800      	cmp	r0, #0
    1116:	bf08      	it	eq
    1118:	2005      	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    111a:	bd70      	pop	{r4, r5, r6, pc}
    111c:	402c0000 	.word	0x402c0000
    1120:	0cdb0000 	.word	0x0cdb0000

00001124 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    1124:	4b38      	ldr	r3, [pc, #224]	; (1208 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    1126:	781a      	ldrb	r2, [r3, #0]
    1128:	b10a      	cbz	r2, 112e <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    112a:	2003      	movs	r0, #3
    112c:	4770      	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    112e:	b570      	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    1130:	785b      	ldrb	r3, [r3, #1]
    1132:	4606      	mov	r6, r0
    1134:	b903      	cbnz	r3, 1138 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    1136:	0249      	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    1138:	4d34      	ldr	r5, [pc, #208]	; (120c <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    113a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    113e:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    1142:	4833      	ldr	r0, [pc, #204]	; (1210 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    1144:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    1146:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1148:	f043 0310 	orr.w	r3, r3, #16
    114c:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    114e:	60a9      	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    1150:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    1152:	f7ff ff7f 	bl	1054 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    1156:	2800      	cmp	r0, #0
    1158:	d14d      	bne.n	11f6 <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    115a:	462c      	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    115c:	692b      	ldr	r3, [r5, #16]
    115e:	f106 0240 	add.w	r2, r6, #64	; 0x40
    1162:	f506 7010 	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    1166:	4629      	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    1168:	6b23      	ldr	r3, [r4, #48]	; 0x30
    116a:	4e28      	ldr	r6, [pc, #160]	; (120c <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    116c:	f043 0520 	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    1170:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    1174:	6325      	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    1176:	d13f      	bne.n	11f8 <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    1178:	6a63      	ldr	r3, [r4, #36]	; 0x24
    117a:	051d      	lsls	r5, r3, #20
    117c:	d5fc      	bpl.n	1178 <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    117e:	6a0b      	ldr	r3, [r1, #32]
    1180:	3240      	adds	r2, #64	; 0x40
    1182:	f842 3c80 	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    1186:	6a0b      	ldr	r3, [r1, #32]
    1188:	f842 3c7c 	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    118c:	6a0b      	ldr	r3, [r1, #32]
    118e:	f842 3c78 	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    1192:	6a0b      	ldr	r3, [r1, #32]
    1194:	f842 3c74 	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    1198:	6a0b      	ldr	r3, [r1, #32]
    119a:	f842 3c70 	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    119e:	6a0b      	ldr	r3, [r1, #32]
    11a0:	f842 3c6c 	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    11a4:	6a0b      	ldr	r3, [r1, #32]
    11a6:	f842 3c68 	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    11aa:	6a0b      	ldr	r3, [r1, #32]
    11ac:	f842 3c64 	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    11b0:	6a0b      	ldr	r3, [r1, #32]
    11b2:	f842 3c60 	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    11b6:	6a0b      	ldr	r3, [r1, #32]
    11b8:	f842 3c5c 	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    11bc:	6a0b      	ldr	r3, [r1, #32]
    11be:	f842 3c58 	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    11c2:	6a0b      	ldr	r3, [r1, #32]
    11c4:	f842 3c54 	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    11c8:	6a0b      	ldr	r3, [r1, #32]
    11ca:	f842 3c50 	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    11ce:	6a0b      	ldr	r3, [r1, #32]
    11d0:	f842 3c4c 	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    11d4:	6a0b      	ldr	r3, [r1, #32]
    11d6:	f842 3c48 	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    11da:	6a0b      	ldr	r3, [r1, #32]
    11dc:	f842 3c44 	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    11e0:	4282      	cmp	r2, r0
    11e2:	d1c1      	bne.n	1168 <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    11e4:	2000      	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    11e6:	4909      	ldr	r1, [pc, #36]	; (120c <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    11e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    11ea:	4a08      	ldr	r2, [pc, #32]	; (120c <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    11ec:	079b      	lsls	r3, r3, #30
    11ee:	d5fb      	bpl.n	11e8 <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    11f0:	4b08      	ldr	r3, [pc, #32]	; (1214 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    11f2:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    11f4:	bd70      	pop	{r4, r5, r6, pc}
}
    11f6:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    11f8:	4a07      	ldr	r2, [pc, #28]	; (1218 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    11fa:	431a      	orrs	r2, r3
    11fc:	6332      	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    11fe:	f7ff ff71 	bl	10e4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    1202:	2001      	movs	r0, #1
    1204:	e7ef      	b.n	11e6 <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    1206:	bf00      	nop
    1208:	20007294 	.word	0x20007294
    120c:	402c0000 	.word	0x402c0000
    1210:	113a0010 	.word	0x113a0010
    1214:	01000022 	.word	0x01000022
    1218:	00700020 	.word	0x00700020

0000121c <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    121e:	4b28      	ldr	r3, [pc, #160]	; (12c0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    1220:	781a      	ldrb	r2, [r3, #0]
    1222:	b10a      	cbz	r2, 1228 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    1224:	2003      	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    1226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    1228:	785b      	ldrb	r3, [r3, #1]
    122a:	4604      	mov	r4, r0
    122c:	b903      	cbnz	r3, 1230 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    122e:	0249      	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    1230:	4d24      	ldr	r5, [pc, #144]	; (12c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    1232:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    1236:	4824      	ldr	r0, [pc, #144]	; (12c8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    1238:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    123a:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    123c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    123e:	f023 0310 	bic.w	r3, r3, #16
    1242:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    1244:	60a9      	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    1246:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    1248:	f7ff ff04 	bl	1054 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    124c:	2800      	cmp	r0, #0
    124e:	d1ea      	bne.n	1226 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    1250:	462a      	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    1252:	692b      	ldr	r3, [r5, #16]
    1254:	f504 7700 	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    1258:	462e      	mov	r6, r5
    125a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    125c:	4919      	ldr	r1, [pc, #100]	; (12c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    125e:	06d8      	lsls	r0, r3, #27
    1260:	d5fb      	bpl.n	125a <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    1262:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1264:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
    1268:	d119      	bne.n	129e <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    126a:	f104 0140 	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    126e:	f854 3b04 	ldr.w	r3, [r4], #4
    1272:	4d14      	ldr	r5, [pc, #80]	; (12c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    1274:	42a1      	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    1276:	6213      	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    1278:	d1f9      	bne.n	126e <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    127a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    127c:	f043 0310 	orr.w	r3, r3, #16
    1280:	6333      	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    1282:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1284:	f413 00e0 	ands.w	r0, r3, #7340032	; 0x700000
    1288:	d111      	bne.n	12ae <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    128a:	428f      	cmp	r7, r1
    128c:	d1e5      	bne.n	125a <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    128e:	490d      	ldr	r1, [pc, #52]	; (12c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    1290:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1292:	4a0c      	ldr	r2, [pc, #48]	; (12c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    1294:	079b      	lsls	r3, r3, #30
    1296:	d5fb      	bpl.n	1290 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    1298:	4b0c      	ldr	r3, [pc, #48]	; (12cc <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    129a:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    129c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    129e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    12a0:	4b0b      	ldr	r3, [pc, #44]	; (12d0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    12a2:	4313      	orrs	r3, r2
    12a4:	630b      	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    12a6:	f7ff ff1d 	bl	10e4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    12aa:	2001      	movs	r0, #1
    12ac:	e7ef      	b.n	128e <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    12ae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    12b0:	4b07      	ldr	r3, [pc, #28]	; (12d0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    12b2:	4313      	orrs	r3, r2
    12b4:	632b      	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    12b6:	f7ff ff15 	bl	10e4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    12ba:	2001      	movs	r0, #1
    12bc:	e7e7      	b.n	128e <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    12be:	bf00      	nop
    12c0:	20007294 	.word	0x20007294
    12c4:	402c0000 	.word	0x402c0000
    12c8:	183a0000 	.word	0x183a0000
    12cc:	01000012 	.word	0x01000012
    12d0:	00700010 	.word	0x00700010

000012d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    12d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12d6:	4e27      	ldr	r6, [pc, #156]	; (1374 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    12d8:	27ff      	movs	r7, #255	; 0xff
    12da:	4d27      	ldr	r5, [pc, #156]	; (1378 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    12dc:	f8d6 e000 	ldr.w	lr, [r6]
    12e0:	682b      	ldr	r3, [r5, #0]
    12e2:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    12e4:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    12e6:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    12ea:	d0fb      	beq.n	12e4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    12ec:	6f5c      	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    12ee:	b2e4      	uxtb	r4, r4
    12f0:	2cff      	cmp	r4, #255	; 0xff
    12f2:	d005      	beq.n	1300 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    12f4:	6834      	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    12f6:	ebce 0404 	rsb	r4, lr, r4
    12fa:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    12fe:	d3f0      	bcc.n	12e2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1300:	f041 0440 	orr.w	r4, r1, #64	; 0x40
    1304:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1306:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1308:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    130c:	d0fb      	beq.n	1306 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    130e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
    1310:	2618      	movs	r6, #24
    1312:	fa22 f406 	lsr.w	r4, r2, r6
    1316:	b2e4      	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1318:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    131a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    131c:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    1320:	d0fb      	beq.n	131a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    1322:	3e08      	subs	r6, #8
    1324:	6f5c      	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    1326:	f116 0f08 	cmn.w	r6, #8
    132a:	d1f2      	bne.n	1312 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    132c:	b1f9      	cbz	r1, 136e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    132e:	2908      	cmp	r1, #8
    1330:	bf0c      	ite	eq
    1332:	2287      	moveq	r2, #135	; 0x87
    1334:	22ff      	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1336:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1338:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    133a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    133e:	d0fb      	beq.n	1338 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    1340:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    1342:	2100      	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1344:	24ff      	movs	r4, #255	; 0xff
    1346:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    134a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    134e:	d0fb      	beq.n	1348 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    1350:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    1352:	b2cb      	uxtb	r3, r1
    1354:	3101      	adds	r1, #1
    1356:	3bff      	subs	r3, #255	; 0xff
    1358:	b2d2      	uxtb	r2, r2
    135a:	bf18      	it	ne
    135c:	2301      	movne	r3, #1
    135e:	7042      	strb	r2, [r0, #1]
    1360:	ea13 13d2 	ands.w	r3, r3, r2, lsr #7
    1364:	d001      	beq.n	136a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    1366:	682b      	ldr	r3, [r5, #0]
    1368:	e7ed      	b.n	1346 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    136a:	4610      	mov	r0, r2
    136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    136e:	2295      	movs	r2, #149	; 0x95
    1370:	e7e1      	b.n	1336 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    1372:	bf00      	nop
    1374:	200074c8 	.word	0x200074c8
    1378:	20004800 	.word	0x20004800

0000137c <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    137c:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    137e:	2101      	movs	r1, #1
    1380:	7800      	ldrb	r0, [r0, #0]
    1382:	f000 ff2b 	bl	21dc <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    1386:	4913      	ldr	r1, [pc, #76]	; (13d4 <Sd2Card::chipSelectHigh()+0x58>)
    1388:	780b      	ldrb	r3, [r1, #0]
    138a:	b1eb      	cbz	r3, 13c8 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    138c:	4a12      	ldr	r2, [pc, #72]	; (13d8 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    138e:	2000      	movs	r0, #0
    1390:	7cd3      	ldrb	r3, [r2, #19]
    1392:	7008      	strb	r0, [r1, #0]
    1394:	4619      	mov	r1, r3
    1396:	b1bb      	cbz	r3, 13c8 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1398:	07d8      	lsls	r0, r3, #31
    139a:	d502      	bpl.n	13a2 <Sd2Card::chipSelectHigh()+0x26>
    139c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    139e:	480f      	ldr	r0, [pc, #60]	; (13dc <Sd2Card::chipSelectHigh()+0x60>)
    13a0:	6004      	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    13a2:	079b      	lsls	r3, r3, #30
    13a4:	d503      	bpl.n	13ae <Sd2Card::chipSelectHigh()+0x32>
    13a6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    13a8:	4b0d      	ldr	r3, [pc, #52]	; (13e0 <Sd2Card::chipSelectHigh()+0x64>)
    13aa:	7cd1      	ldrb	r1, [r2, #19]
    13ac:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    13ae:	074c      	lsls	r4, r1, #29
    13b0:	d503      	bpl.n	13ba <Sd2Card::chipSelectHigh()+0x3e>
    13b2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    13b4:	4b0b      	ldr	r3, [pc, #44]	; (13e4 <Sd2Card::chipSelectHigh()+0x68>)
    13b6:	7cd1      	ldrb	r1, [r2, #19]
    13b8:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    13ba:	0708      	lsls	r0, r1, #28
    13bc:	d405      	bmi.n	13ca <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    13be:	06cb      	lsls	r3, r1, #27
    13c0:	d502      	bpl.n	13c8 <Sd2Card::chipSelectHigh()+0x4c>
    13c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    13c4:	4b08      	ldr	r3, [pc, #32]	; (13e8 <Sd2Card::chipSelectHigh()+0x6c>)
    13c6:	601a      	str	r2, [r3, #0]
    13c8:	bd10      	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    13ca:	6b50      	ldr	r0, [r2, #52]	; 0x34
    13cc:	4b07      	ldr	r3, [pc, #28]	; (13ec <Sd2Card::chipSelectHigh()+0x70>)
    13ce:	7cd1      	ldrb	r1, [r2, #19]
    13d0:	6018      	str	r0, [r3, #0]
    13d2:	e7f4      	b.n	13be <Sd2Card::chipSelectHigh()+0x42>
    13d4:	200072ac 	.word	0x200072ac
    13d8:	20004800 	.word	0x20004800
    13dc:	e000e100 	.word	0xe000e100
    13e0:	e000e104 	.word	0xe000e104
    13e4:	e000e108 	.word	0xe000e108
    13e8:	e000e110 	.word	0xe000e110
    13ec:	e000e10c 	.word	0xe000e10c

000013f0 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    13f0:	4a40      	ldr	r2, [pc, #256]	; (14f4 <Sd2Card::chipSelectLow()+0x104>)
    13f2:	7813      	ldrb	r3, [r2, #0]
    13f4:	b11b      	cbz	r3, 13fe <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    13f6:	7800      	ldrb	r0, [r0, #0]
    13f8:	2100      	movs	r1, #0
    13fa:	f000 beef 	b.w	21dc <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    13fe:	4b3e      	ldr	r3, [pc, #248]	; (14f8 <Sd2Card::chipSelectLow()+0x108>)
    1400:	493e      	ldr	r1, [pc, #248]	; (14fc <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    1402:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    1404:	2401      	movs	r4, #1
    1406:	7cde      	ldrb	r6, [r3, #19]
    1408:	680d      	ldr	r5, [r1, #0]
    140a:	7014      	strb	r4, [r2, #0]
    140c:	684c      	ldr	r4, [r1, #4]
    140e:	2e00      	cmp	r6, #0
    1410:	d031      	beq.n	1476 <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
    1412:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1414:	7cd9      	ldrb	r1, [r3, #19]
    1416:	07ce      	lsls	r6, r1, #31
    1418:	460a      	mov	r2, r1
    141a:	d508      	bpl.n	142e <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    141c:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 151c <Sd2Card::chipSelectLow()+0x12c>
    1420:	695f      	ldr	r7, [r3, #20]
    1422:	f8de 6000 	ldr.w	r6, [lr]
    1426:	403e      	ands	r6, r7
    1428:	629e      	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    142a:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    142e:	078f      	lsls	r7, r1, #30
    1430:	d506      	bpl.n	1440 <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1432:	4e33      	ldr	r6, [pc, #204]	; (1500 <Sd2Card::chipSelectLow()+0x110>)
    1434:	6999      	ldr	r1, [r3, #24]
    1436:	6837      	ldr	r7, [r6, #0]
    1438:	7cda      	ldrb	r2, [r3, #19]
    143a:	4039      	ands	r1, r7
    143c:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    143e:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    1440:	0756      	lsls	r6, r2, #29
    1442:	d506      	bpl.n	1452 <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1444:	4e2f      	ldr	r6, [pc, #188]	; (1504 <Sd2Card::chipSelectLow()+0x114>)
    1446:	69d9      	ldr	r1, [r3, #28]
    1448:	6837      	ldr	r7, [r6, #0]
    144a:	7cda      	ldrb	r2, [r3, #19]
    144c:	4039      	ands	r1, r7
    144e:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1450:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    1452:	0711      	lsls	r1, r2, #28
    1454:	d506      	bpl.n	1464 <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1456:	4e2c      	ldr	r6, [pc, #176]	; (1508 <Sd2Card::chipSelectLow()+0x118>)
    1458:	6a19      	ldr	r1, [r3, #32]
    145a:	6837      	ldr	r7, [r6, #0]
    145c:	7cda      	ldrb	r2, [r3, #19]
    145e:	4039      	ands	r1, r7
    1460:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1462:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    1464:	06d2      	lsls	r2, r2, #27
    1466:	d505      	bpl.n	1474 <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1468:	4928      	ldr	r1, [pc, #160]	; (150c <Sd2Card::chipSelectLow()+0x11c>)
    146a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    146c:	680e      	ldr	r6, [r1, #0]
    146e:	4032      	ands	r2, r6
    1470:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1472:	600a      	str	r2, [r1, #0]
			}
			__enable_irq();
    1474:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1476:	689a      	ldr	r2, [r3, #8]
    1478:	491f      	ldr	r1, [pc, #124]	; (14f8 <Sd2Card::chipSelectLow()+0x108>)
    147a:	42aa      	cmp	r2, r5
    147c:	d02b      	beq.n	14d6 <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    147e:	4a24      	ldr	r2, [pc, #144]	; (1510 <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1480:	4e24      	ldr	r6, [pc, #144]	; (1514 <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1482:	6992      	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    1484:	608d      	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1486:	f3c2 1101 	ubfx	r1, r2, #4, #2
    148a:	f3c2 6282 	ubfx	r2, r2, #26, #3
    148e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    1492:	3201      	adds	r2, #1
    1494:	fbb1 f1f2 	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1498:	b1dd      	cbz	r5, 14d2 <Sd2Card::chipSelectLow()+0xe2>
    149a:	fbb1 f2f5 	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
    149e:	b142      	cbz	r2, 14b2 <Sd2Card::chipSelectLow()+0xc2>
    14a0:	fbb1 f1f2 	udiv	r1, r1, r2
    14a4:	42a9      	cmp	r1, r5
    14a6:	bf88      	it	hi
    14a8:	3201      	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    14aa:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    14ae:	d314      	bcc.n	14da <Sd2Card::chipSelectLow()+0xea>
    14b0:	4a19      	ldr	r2, [pc, #100]	; (1518 <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    14b2:	60da      	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    14b4:	681b      	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    14b6:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    14b8:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    14ba:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    14bc:	611e      	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    14be:	625d      	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
    14c0:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    14c2:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    14c4:	6119      	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    14c6:	2100      	movs	r1, #0
    14c8:	7800      	ldrb	r0, [r0, #0]
}
    14ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    14ce:	f000 be85 	b.w	21dc <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    14d2:	460a      	mov	r2, r1
    14d4:	e7e3      	b.n	149e <Sd2Card::chipSelectLow()+0xae>
    14d6:	68ca      	ldr	r2, [r1, #12]
    14d8:	e7ec      	b.n	14b4 <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    14da:	2a02      	cmp	r2, #2
    14dc:	bf98      	it	ls
    14de:	2200      	movls	r2, #0
    14e0:	d9e7      	bls.n	14b2 <Sd2Card::chipSelectLow()+0xc2>
    14e2:	3a02      	subs	r2, #2
    14e4:	0855      	lsrs	r5, r2, #1
    14e6:	0429      	lsls	r1, r5, #16
    14e8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    14ec:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    14f0:	430a      	orrs	r2, r1
    14f2:	e7de      	b.n	14b2 <Sd2Card::chipSelectLow()+0xc2>
    14f4:	200072ac 	.word	0x200072ac
    14f8:	20004800 	.word	0x20004800
    14fc:	200072a4 	.word	0x200072a4
    1500:	e000e184 	.word	0xe000e184
    1504:	e000e188 	.word	0xe000e188
    1508:	e000e18c 	.word	0xe000e18c
    150c:	e000e190 	.word	0xe000e190
    1510:	400fc000 	.word	0x400fc000
    1514:	20000940 	.word	0x20000940
    1518:	007f7fff 	.word	0x007f7fff
    151c:	e000e180 	.word	0xe000e180

00001520 <Sd2Card::waitStartBlock()>:
    1520:	490f      	ldr	r1, [pc, #60]	; (1560 <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    1522:	b470      	push	{r4, r5, r6}
    1524:	4d0f      	ldr	r5, [pc, #60]	; (1564 <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1526:	24ff      	movs	r4, #255	; 0xff
    1528:	680e      	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    152a:	682a      	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    152c:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    152e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1530:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1534:	d0fb      	beq.n	152e <Sd2Card::waitStartBlock()+0xe>
    1536:	6f53      	ldr	r3, [r2, #116]	; 0x74
    1538:	b2db      	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    153a:	2bff      	cmp	r3, #255	; 0xff
    153c:	7043      	strb	r3, [r0, #1]
    153e:	d107      	bne.n	1550 <Sd2Card::waitStartBlock()+0x30>
    1540:	680b      	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    1542:	1b9b      	subs	r3, r3, r6
    1544:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1548:	d9ef      	bls.n	152a <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    154a:	2000      	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    154c:	bc70      	pop	{r4, r5, r6}
    154e:	4770      	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    1550:	f1a3 00fe 	sub.w	r0, r3, #254	; 0xfe
    1554:	fab0 f080 	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    1558:	bc70      	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    155a:	0940      	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    155c:	4770      	bx	lr
    155e:	bf00      	nop
    1560:	200074c8 	.word	0x200074c8
    1564:	20004800 	.word	0x20004800

00001568 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    1568:	b570      	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    156a:	7883      	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    156c:	460d      	mov	r5, r1
    156e:	4604      	mov	r4, r0
    1570:	4616      	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    1572:	2b03      	cmp	r3, #3
    1574:	bf18      	it	ne
    1576:	024d      	lslne	r5, r1, #9
  chipSelectLow();
    1578:	f7ff ff3a 	bl	13f0 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    157c:	2111      	movs	r1, #17
    157e:	462a      	mov	r2, r5
    1580:	4620      	mov	r0, r4
    1582:	f7ff fea7 	bl	12d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1586:	b918      	cbnz	r0, 1590 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    1588:	4620      	mov	r0, r4
    158a:	f7ff ffc9 	bl	1520 <Sd2Card::waitStartBlock()>
    158e:	b920      	cbnz	r0, 159a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    1590:	4620      	mov	r0, r4
    1592:	f7ff fef3 	bl	137c <Sd2Card::chipSelectHigh()>
  return false;
    1596:	2000      	movs	r0, #0
}
    1598:	bd70      	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    159a:	4d11      	ldr	r5, [pc, #68]	; (15e0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
    159c:	f44f 7200 	mov.w	r2, #512	; 0x200
    15a0:	21ff      	movs	r1, #255	; 0xff
    15a2:	4630      	mov	r0, r6
    15a4:	f003 fe56 	bl	5254 <memset>
    15a8:	f44f 7300 	mov.w	r3, #512	; 0x200
    15ac:	4632      	mov	r2, r6
    15ae:	4628      	mov	r0, r5
    15b0:	4631      	mov	r1, r6
    15b2:	f7ff fd35 	bl	1020 <SPIClass::transfer(void const*, void*, unsigned int)>
    15b6:	682b      	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    15b8:	22ff      	movs	r2, #255	; 0xff
    15ba:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    15bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    15be:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    15c2:	d0fb      	beq.n	15bc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    15c4:	22ff      	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    15c6:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    15c8:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    15ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    15cc:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    15d0:	d0fb      	beq.n	15ca <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    15d2:	4620      	mov	r0, r4
    15d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    15d6:	f7ff fed1 	bl	137c <Sd2Card::chipSelectHigh()>
  return true;
    15da:	2001      	movs	r0, #1
    15dc:	bd70      	pop	{r4, r5, r6, pc}
    15de:	bf00      	nop
    15e0:	20004800 	.word	0x20004800

000015e4 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    15e4:	4b1b      	ldr	r3, [pc, #108]	; (1654 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
    15e6:	b410      	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    15e8:	681c      	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    15ea:	6661      	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    15ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    15ee:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    15f2:	d0fb      	beq.n	15ec <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
    15f4:	1e51      	subs	r1, r2, #1
    15f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
    15f8:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    15fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    1600:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1602:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1604:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1608:	d0fb      	beq.n	1602 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    160a:	4291      	cmp	r1, r2
    160c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    160e:	d1f5      	bne.n	15fc <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1610:	23ff      	movs	r3, #255	; 0xff
    1612:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1614:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1616:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    161a:	d0fb      	beq.n	1614 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    161c:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    161e:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1620:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1622:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1624:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1628:	d0fb      	beq.n	1622 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    162a:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    162c:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    162e:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1630:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1632:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    1636:	d0fb      	beq.n	1630 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
    1638:	6f63      	ldr	r3, [r4, #116]	; 0x74
    163a:	b2db      	uxtb	r3, r3
    163c:	f003 021f 	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    1640:	7043      	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    1642:	f85d 4b04 	ldr.w	r4, [sp], #4
    1646:	f1a2 0005 	sub.w	r0, r2, #5
    164a:	fab0 f080 	clz	r0, r0
    164e:	0940      	lsrs	r0, r0, #5
    1650:	4770      	bx	lr
    1652:	bf00      	nop
    1654:	20004800 	.word	0x20004800

00001658 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    1658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    165a:	4605      	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    165c:	b169      	cbz	r1, 167a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    165e:	7883      	ldrb	r3, [r0, #2]
    1660:	460c      	mov	r4, r1
    1662:	4616      	mov	r6, r2
    1664:	2b03      	cmp	r3, #3
    1666:	bf18      	it	ne
    1668:	024c      	lslne	r4, r1, #9
  chipSelectLow();
    166a:	f7ff fec1 	bl	13f0 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    166e:	2118      	movs	r1, #24
    1670:	4622      	mov	r2, r4
    1672:	4628      	mov	r0, r5
    1674:	f7ff fe2e 	bl	12d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1678:	b120      	cbz	r0, 1684 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    167a:	4628      	mov	r0, r5
    167c:	f7ff fe7e 	bl	137c <Sd2Card::chipSelectHigh()>
  return false;
    1680:	2000      	movs	r0, #0
}
    1682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    1684:	4632      	mov	r2, r6
    1686:	21fe      	movs	r1, #254	; 0xfe
    1688:	4628      	mov	r0, r5
    168a:	f7ff ffab 	bl	15e4 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    168e:	2800      	cmp	r0, #0
    1690:	d0f3      	beq.n	167a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    1692:	4915      	ldr	r1, [pc, #84]	; (16e8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1694:	20ff      	movs	r0, #255	; 0xff
    1696:	4e15      	ldr	r6, [pc, #84]	; (16ec <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
    1698:	680f      	ldr	r7, [r1, #0]
    169a:	6832      	ldr	r2, [r6, #0]
    169c:	6650      	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    169e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    16a0:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    16a4:	d0fb      	beq.n	169e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
    16a6:	6f54      	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    16a8:	b2e4      	uxtb	r4, r4
    16aa:	2cff      	cmp	r4, #255	; 0xff
    16ac:	d005      	beq.n	16ba <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
    16ae:	680b      	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    16b0:	1bdb      	subs	r3, r3, r7
    16b2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    16b6:	d3f1      	bcc.n	169c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
    16b8:	e7df      	b.n	167a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    16ba:	2200      	movs	r2, #0
    16bc:	210d      	movs	r1, #13
    16be:	4628      	mov	r0, r5
    16c0:	f7ff fe08 	bl	12d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    16c4:	2800      	cmp	r0, #0
    16c6:	d1d8      	bne.n	167a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    16c8:	6832      	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    16ca:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    16cc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    16ce:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    16d2:	d0fb      	beq.n	16cc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
    16d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
    16d6:	f013 0fff 	tst.w	r3, #255	; 0xff
    16da:	d1ce      	bne.n	167a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    16dc:	4628      	mov	r0, r5
    16de:	f7ff fe4d 	bl	137c <Sd2Card::chipSelectHigh()>
  return true;
    16e2:	2001      	movs	r0, #1
    16e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16e6:	bf00      	nop
    16e8:	200074c8 	.word	0x200074c8
    16ec:	20004800 	.word	0x20004800

000016f0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    16f0:	4b02      	ldr	r3, [pc, #8]	; (16fc <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    16f2:	2207      	movs	r2, #7
    16f4:	4902      	ldr	r1, [pc, #8]	; (1700 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    16f6:	e883 0006 	stmia.w	r3, {r1, r2}
    16fa:	4770      	bx	lr
    16fc:	200072a4 	.word	0x200072a4
    1700:	003d0900 	.word	0x003d0900

00001704 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    1704:	b538      	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    1706:	f990 3005 	ldrsb.w	r3, [r0, #5]
    170a:	2b00      	cmp	r3, #0
    170c:	db03      	blt.n	1716 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    170e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    1712:	f000 b977 	b.w	1a04 <SdVolume::cacheFlush()>
    1716:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    1718:	2101      	movs	r1, #1
    171a:	6900      	ldr	r0, [r0, #16]
    171c:	f000 f9b2 	bl	1a84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    1720:	b300      	cbz	r0, 1764 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    1722:	7d25      	ldrb	r5, [r4, #20]
    1724:	4b10      	ldr	r3, [pc, #64]	; (1768 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    1726:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    172a:	d01b      	beq.n	1764 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    172c:	79a3      	ldrb	r3, [r4, #6]
    172e:	2b01      	cmp	r3, #1
    1730:	d915      	bls.n	175e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    1732:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    1734:	490d      	ldr	r1, [pc, #52]	; (176c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    1736:	0c1a      	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    1738:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    173a:	680b      	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    173c:	82aa      	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    173e:	b133      	cbz	r3, 174e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    1740:	f105 0116 	add.w	r1, r5, #22
    1744:	f105 0018 	add.w	r0, r5, #24
    1748:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    174a:	8b2b      	ldrh	r3, [r5, #24]
    174c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    174e:	7963      	ldrb	r3, [r4, #5]
    1750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1754:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    1756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    175a:	f000 b953 	b.w	1a04 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    175e:	69a3      	ldr	r3, [r4, #24]
    1760:	61eb      	str	r3, [r5, #28]
    1762:	e7e6      	b.n	1732 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    1764:	2000      	movs	r0, #0
    1766:	bd38      	pop	{r3, r4, r5, pc}
    1768:	200072bc 	.word	0x200072bc
    176c:	200072b0 	.word	0x200072b0

00001770 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    1770:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    1772:	f100 0208 	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    1776:	4604      	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    1778:	2101      	movs	r1, #1
    177a:	6a00      	ldr	r0, [r0, #32]
    177c:	f000 fa2c 	bl	1bd8 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    1780:	b150      	cbz	r0, 1798 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    1782:	69e3      	ldr	r3, [r4, #28]
    1784:	b93b      	cbnz	r3, 1796 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    1786:	7963      	ldrb	r3, [r4, #5]
    1788:	2001      	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    178a:	68a2      	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    178c:	f063 037f 	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    1790:	61e2      	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    1792:	7163      	strb	r3, [r4, #5]
    1794:	bd10      	pop	{r4, pc}
  }
  return true;
    1796:	2001      	movs	r0, #1
}
    1798:	bd10      	pop	{r4, pc}
    179a:	bf00      	nop

0000179c <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    179e:	7983      	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    17a0:	b113      	cbz	r3, 17a8 <SdFile::seekSet(unsigned long)+0xc>
    17a2:	6982      	ldr	r2, [r0, #24]
    17a4:	428a      	cmp	r2, r1
    17a6:	d201      	bcs.n	17ac <SdFile::seekSet(unsigned long)+0x10>
    17a8:	2000      	movs	r0, #0
    17aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    17ac:	2b02      	cmp	r3, #2
    17ae:	460f      	mov	r7, r1
    17b0:	4605      	mov	r5, r0
    17b2:	d01c      	beq.n	17ee <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    17b4:	b1f7      	cbz	r7, 17f4 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    17b6:	6a2b      	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    17b8:	1e7c      	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    17ba:	68e9      	ldr	r1, [r5, #12]
    17bc:	7c1b      	ldrb	r3, [r3, #16]
    17be:	1e4a      	subs	r2, r1, #1
    17c0:	3309      	adds	r3, #9
    17c2:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    17c4:	40dc      	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    17c6:	42a2      	cmp	r2, r4
    17c8:	d802      	bhi.n	17d0 <SdFile::seekSet(unsigned long)+0x34>
    17ca:	b109      	cbz	r1, 17d0 <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    17cc:	1aa4      	subs	r4, r4, r2
    17ce:	e001      	b.n	17d4 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    17d0:	69eb      	ldr	r3, [r5, #28]
    17d2:	60ab      	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    17d4:	f105 0608 	add.w	r6, r5, #8
    17d8:	e006      	b.n	17e8 <SdFile::seekSet(unsigned long)+0x4c>
    17da:	68a9      	ldr	r1, [r5, #8]
    17dc:	3c01      	subs	r4, #1
    17de:	6a28      	ldr	r0, [r5, #32]
    17e0:	f000 f9c0 	bl	1b64 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    17e4:	2800      	cmp	r0, #0
    17e6:	d0df      	beq.n	17a8 <SdFile::seekSet(unsigned long)+0xc>
    17e8:	4632      	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    17ea:	2c00      	cmp	r4, #0
    17ec:	d1f5      	bne.n	17da <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    17ee:	60ef      	str	r7, [r5, #12]
    return true;
    17f0:	2001      	movs	r0, #1
    17f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    17f4:	60af      	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    17f6:	2001      	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    17f8:	60ef      	str	r7, [r5, #12]
    return true;
    17fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000017fc <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    17fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1800:	b085      	sub	sp, #20
    1802:	4607      	mov	r7, r0
    1804:	9201      	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    1806:	7982      	ldrb	r2, [r0, #6]
    1808:	2a01      	cmp	r2, #1
    180a:	d005      	beq.n	1818 <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    180c:	2301      	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    180e:	2000      	movs	r0, #0
    1810:	713b      	strb	r3, [r7, #4]
}
    1812:	b005      	add	sp, #20
    1814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    1818:	7942      	ldrb	r2, [r0, #5]
    181a:	0794      	lsls	r4, r2, #30
    181c:	d5f6      	bpl.n	180c <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    181e:	0753      	lsls	r3, r2, #29
    1820:	468b      	mov	fp, r1
    1822:	d508      	bpl.n	1836 <SdFile::write(void const*, unsigned int)+0x3a>
    1824:	69b9      	ldr	r1, [r7, #24]
    1826:	68fb      	ldr	r3, [r7, #12]
    1828:	428b      	cmp	r3, r1
    182a:	f000 80c0 	beq.w	19ae <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    182e:	f7ff ffb5 	bl	179c <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    1832:	2800      	cmp	r0, #0
    1834:	d0ea      	beq.n	180c <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    1836:	9b01      	ldr	r3, [sp, #4]
    1838:	68f9      	ldr	r1, [r7, #12]
    183a:	2b00      	cmp	r3, #0
    183c:	f000 80c5 	beq.w	19ca <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    1840:	f8dd 8004 	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    1844:	f8df 919c 	ldr.w	r9, [pc, #412]	; 19e4 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    1848:	f8df a19c 	ldr.w	sl, [pc, #412]	; 19e8 <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    184c:	6a38      	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    184e:	f3c1 0608 	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    1852:	7902      	ldrb	r2, [r0, #4]
    1854:	3a01      	subs	r2, #1
    1856:	ea02 2551 	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    185a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    185e:	d153      	bne.n	1908 <SdFile::write(void const*, unsigned int)+0x10c>
    1860:	2e00      	cmp	r6, #0
    1862:	d151      	bne.n	1908 <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    1864:	68b9      	ldr	r1, [r7, #8]
    1866:	2900      	cmp	r1, #0
    1868:	d179      	bne.n	195e <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    186a:	69fa      	ldr	r2, [r7, #28]
    186c:	2a00      	cmp	r2, #0
    186e:	f000 8089 	beq.w	1984 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    1872:	60ba      	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1874:	f5c6 7400 	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1878:	3a02      	subs	r2, #2
    187a:	f890 e010 	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    187e:	b2a4      	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1880:	6941      	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    1882:	4544      	cmp	r4, r8
    1884:	d942      	bls.n	190c <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1886:	fa02 f20e 	lsl.w	r2, r2, lr
    188a:	440d      	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    188c:	fa1f f488 	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1890:	4415      	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    1892:	b91e      	cbnz	r6, 189c <SdFile::write(void const*, unsigned int)+0xa0>
    1894:	68f8      	ldr	r0, [r7, #12]
    1896:	69ba      	ldr	r2, [r7, #24]
    1898:	4290      	cmp	r0, r2
    189a:	d253      	bcs.n	1944 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    189c:	4628      	mov	r0, r5
    189e:	2101      	movs	r1, #1
    18a0:	f000 f8f0 	bl	1a84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    18a4:	2800      	cmp	r0, #0
    18a6:	d0b1      	beq.n	180c <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    18a8:	444e      	add	r6, r9
      uint8_t* end = dst + n;
    18aa:	eb06 0e04 	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    18ae:	4576      	cmp	r6, lr
    18b0:	d00d      	beq.n	18ce <SdFile::write(void const*, unsigned int)+0xd2>
    18b2:	f10b 31ff 	add.w	r1, fp, #4294967295
    18b6:	1e72      	subs	r2, r6, #1
    18b8:	f10e 35ff 	add.w	r5, lr, #4294967295
    18bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    18c0:	f802 0f01 	strb.w	r0, [r2, #1]!
    18c4:	4295      	cmp	r5, r2
    18c6:	d1f9      	bne.n	18bc <SdFile::write(void const*, unsigned int)+0xc0>
    18c8:	ebc6 060e 	rsb	r6, r6, lr
    18cc:	44b3      	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    18ce:	68fd      	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    18d0:	ebb8 0804 	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    18d4:	eb04 0105 	add.w	r1, r4, r5
    18d8:	60f9      	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    18da:	d1b7      	bne.n	184c <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    18dc:	69bb      	ldr	r3, [r7, #24]
    18de:	4299      	cmp	r1, r3
    18e0:	d96a      	bls.n	19b8 <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    18e2:	797a      	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    18e4:	61b9      	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    18e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    18ea:	717a      	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    18ec:	0712      	lsls	r2, r2, #28
    18ee:	d507      	bpl.n	1900 <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    18f0:	79bb      	ldrb	r3, [r7, #6]
    18f2:	2b00      	cmp	r3, #0
    18f4:	d08a      	beq.n	180c <SdFile::write(void const*, unsigned int)+0x10>
    18f6:	4638      	mov	r0, r7
    18f8:	f7ff ff04 	bl	1704 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    18fc:	2800      	cmp	r0, #0
    18fe:	d085      	beq.n	180c <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1900:	9801      	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    1902:	b005      	add	sp, #20
    1904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1908:	68ba      	ldr	r2, [r7, #8]
    190a:	e7b3      	b.n	1874 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    190c:	fa02 f20e 	lsl.w	r2, r2, lr
    1910:	440d      	add	r5, r1
    if (n == 512) {
    1912:	f5b4 7f00 	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1916:	4415      	add	r5, r2
    if (n == 512) {
    1918:	d1bb      	bne.n	1892 <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    191a:	f8da 2000 	ldr.w	r2, [sl]
    191e:	4295      	cmp	r5, r2
    1920:	d039      	beq.n	1996 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1922:	4a2c      	ldr	r2, [pc, #176]	; (19d4 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    1924:	4629      	mov	r1, r5
    1926:	6810      	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    1928:	7802      	ldrb	r2, [r0, #0]
    192a:	2afe      	cmp	r2, #254	; 0xfe
    192c:	d038      	beq.n	19a0 <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    192e:	465a      	mov	r2, fp
    1930:	f7ff fe92 	bl	1658 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1934:	2800      	cmp	r0, #0
    1936:	f43f af69 	beq.w	180c <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    193a:	f50b 7b00 	add.w	fp, fp, #512	; 0x200
    193e:	f44f 7400 	mov.w	r4, #512	; 0x200
    1942:	e7c4      	b.n	18ce <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    1944:	f000 f85e 	bl	1a04 <SdVolume::cacheFlush()>
    1948:	2800      	cmp	r0, #0
    194a:	f43f af5f 	beq.w	180c <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    194e:	4922      	ldr	r1, [pc, #136]	; (19d8 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    1950:	f8ca 5000 	str.w	r5, [sl]
    1954:	780a      	ldrb	r2, [r1, #0]
    1956:	f042 0201 	orr.w	r2, r2, #1
    195a:	700a      	strb	r2, [r1, #0]
    195c:	e7a4      	b.n	18a8 <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    195e:	aa03      	add	r2, sp, #12
    1960:	f000 f900 	bl	1b64 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    1964:	2800      	cmp	r0, #0
    1966:	f43f af54 	beq.w	1812 <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    196a:	6a38      	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    196c:	f64f 71f8 	movw	r1, #65528	; 0xfff8
    1970:	4b1a      	ldr	r3, [pc, #104]	; (19dc <SdFile::write(void const*, unsigned int)+0x1e0>)
    1972:	f890 4020 	ldrb.w	r4, [r0, #32]
    1976:	9a03      	ldr	r2, [sp, #12]
    1978:	2c10      	cmp	r4, #16
    197a:	bf18      	it	ne
    197c:	4619      	movne	r1, r3
    197e:	428a      	cmp	r2, r1
    1980:	f4ff af77 	bcc.w	1872 <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    1984:	4638      	mov	r0, r7
    1986:	f7ff fef3 	bl	1770 <SdFile::addCluster()>
    198a:	2800      	cmp	r0, #0
    198c:	f43f af3e 	beq.w	180c <SdFile::write(void const*, unsigned int)+0x10>
    1990:	6a38      	ldr	r0, [r7, #32]
    1992:	68ba      	ldr	r2, [r7, #8]
    1994:	e76e      	b.n	1874 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    1996:	f04f 32ff 	mov.w	r2, #4294967295
    199a:	f8ca 2000 	str.w	r2, [sl]
    199e:	e7c0      	b.n	1922 <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    19a0:	4658      	mov	r0, fp
    19a2:	f7ff fc3b 	bl	121c <SDHC_CardWriteBlock(void const*, unsigned long)>
    19a6:	fab0 f080 	clz	r0, r0
    19aa:	0940      	lsrs	r0, r0, #5
    19ac:	e7c2      	b.n	1934 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    19ae:	9b01      	ldr	r3, [sp, #4]
    19b0:	2b00      	cmp	r3, #0
    19b2:	f47f af45 	bne.w	1840 <SdFile::write(void const*, unsigned int)+0x44>
    19b6:	e799      	b.n	18ec <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    19b8:	4b09      	ldr	r3, [pc, #36]	; (19e0 <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    19ba:	797a      	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    19bc:	681b      	ldr	r3, [r3, #0]
    19be:	2b00      	cmp	r3, #0
    19c0:	d094      	beq.n	18ec <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    19c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    19c6:	717a      	strb	r2, [r7, #5]
    19c8:	e790      	b.n	18ec <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    19ca:	69bb      	ldr	r3, [r7, #24]
    19cc:	428b      	cmp	r3, r1
    19ce:	d388      	bcc.n	18e2 <SdFile::write(void const*, unsigned int)+0xe6>
    19d0:	797a      	ldrb	r2, [r7, #5]
    19d2:	e78b      	b.n	18ec <SdFile::write(void const*, unsigned int)+0xf0>
    19d4:	200072b8 	.word	0x200072b8
    19d8:	200074bc 	.word	0x200074bc
    19dc:	0ffffff8 	.word	0x0ffffff8
    19e0:	200072b0 	.word	0x200072b0
    19e4:	200072bc 	.word	0x200072bc
    19e8:	20004850 	.word	0x20004850

000019ec <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    19ec:	b500      	push	{lr}
    19ee:	b083      	sub	sp, #12
  return write(&b, 1);
    19f0:	2201      	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    19f2:	ab02      	add	r3, sp, #8
    19f4:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    19f8:	4619      	mov	r1, r3
    19fa:	f7ff feff 	bl	17fc <SdFile::write(void const*, unsigned int)>
}
    19fe:	b003      	add	sp, #12
    1a00:	f85d fb04 	ldr.w	pc, [sp], #4

00001a04 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    1a04:	b570      	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    1a06:	4c1a      	ldr	r4, [pc, #104]	; (1a70 <SdVolume::cacheFlush()+0x6c>)
    1a08:	7823      	ldrb	r3, [r4, #0]
    1a0a:	b90b      	cbnz	r3, 1a10 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    1a0c:	2001      	movs	r0, #1
}
    1a0e:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    1a10:	4d18      	ldr	r5, [pc, #96]	; (1a74 <SdVolume::cacheFlush()+0x70>)
    1a12:	4b19      	ldr	r3, [pc, #100]	; (1a78 <SdVolume::cacheFlush()+0x74>)
    1a14:	6828      	ldr	r0, [r5, #0]
    1a16:	6819      	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    1a18:	7803      	ldrb	r3, [r0, #0]
    1a1a:	2bfe      	cmp	r3, #254	; 0xfe
    1a1c:	d017      	beq.n	1a4e <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    1a1e:	4a17      	ldr	r2, [pc, #92]	; (1a7c <SdVolume::cacheFlush()+0x78>)
    1a20:	f7ff fe1a 	bl	1658 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    1a24:	b188      	cbz	r0, 1a4a <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    1a26:	4e16      	ldr	r6, [pc, #88]	; (1a80 <SdVolume::cacheFlush()+0x7c>)
    1a28:	6831      	ldr	r1, [r6, #0]
    1a2a:	b919      	cbnz	r1, 1a34 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    1a2c:	2300      	movs	r3, #0
  }
  return true;
    1a2e:	2001      	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    1a30:	7023      	strb	r3, [r4, #0]
    1a32:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    1a34:	6828      	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    1a36:	7803      	ldrb	r3, [r0, #0]
    1a38:	2bfe      	cmp	r3, #254	; 0xfe
    1a3a:	d00f      	beq.n	1a5c <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    1a3c:	4a0f      	ldr	r2, [pc, #60]	; (1a7c <SdVolume::cacheFlush()+0x78>)
    1a3e:	f7ff fe0b 	bl	1658 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    1a42:	b110      	cbz	r0, 1a4a <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    1a44:	2300      	movs	r3, #0
    1a46:	6033      	str	r3, [r6, #0]
    1a48:	e7f0      	b.n	1a2c <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    1a4a:	2000      	movs	r0, #0
    1a4c:	bd70      	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    1a4e:	480b      	ldr	r0, [pc, #44]	; (1a7c <SdVolume::cacheFlush()+0x78>)
    1a50:	f7ff fbe4 	bl	121c <SDHC_CardWriteBlock(void const*, unsigned long)>
    1a54:	fab0 f080 	clz	r0, r0
    1a58:	0940      	lsrs	r0, r0, #5
    1a5a:	e7e3      	b.n	1a24 <SdVolume::cacheFlush()+0x20>
    1a5c:	4807      	ldr	r0, [pc, #28]	; (1a7c <SdVolume::cacheFlush()+0x78>)
    1a5e:	f7ff fbdd 	bl	121c <SDHC_CardWriteBlock(void const*, unsigned long)>
    1a62:	fab0 f080 	clz	r0, r0
    1a66:	0940      	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    1a68:	2800      	cmp	r0, #0
    1a6a:	d1eb      	bne.n	1a44 <SdVolume::cacheFlush()+0x40>
    1a6c:	e7ed      	b.n	1a4a <SdVolume::cacheFlush()+0x46>
    1a6e:	bf00      	nop
    1a70:	200074bc 	.word	0x200074bc
    1a74:	200072b8 	.word	0x200072b8
    1a78:	20004850 	.word	0x20004850
    1a7c:	200072bc 	.word	0x200072bc
    1a80:	200072b4 	.word	0x200072b4

00001a84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    1a84:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    1a86:	4d12      	ldr	r5, [pc, #72]	; (1ad0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    1a88:	460e      	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    1a8a:	682b      	ldr	r3, [r5, #0]
    1a8c:	4283      	cmp	r3, r0
    1a8e:	d011      	beq.n	1ab4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    1a90:	4604      	mov	r4, r0
    if (!cacheFlush()) return false;
    1a92:	f7ff ffb7 	bl	1a04 <SdVolume::cacheFlush()>
    1a96:	b908      	cbnz	r0, 1a9c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    1a98:	2000      	movs	r0, #0
    1a9a:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    1a9c:	4b0d      	ldr	r3, [pc, #52]	; (1ad4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    1a9e:	6818      	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    1aa0:	7803      	ldrb	r3, [r0, #0]
    1aa2:	2bfe      	cmp	r3, #254	; 0xfe
    1aa4:	d00c      	beq.n	1ac0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    1aa6:	4a0c      	ldr	r2, [pc, #48]	; (1ad8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    1aa8:	4621      	mov	r1, r4
    1aaa:	f7ff fd5d 	bl	1568 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    1aae:	2800      	cmp	r0, #0
    1ab0:	d0f2      	beq.n	1a98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    1ab2:	602c      	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    1ab4:	4b09      	ldr	r3, [pc, #36]	; (1adc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
    1ab6:	2001      	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    1ab8:	7819      	ldrb	r1, [r3, #0]
    1aba:	4331      	orrs	r1, r6
    1abc:	7019      	strb	r1, [r3, #0]
  return true;
}
    1abe:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    1ac0:	4621      	mov	r1, r4
    1ac2:	4805      	ldr	r0, [pc, #20]	; (1ad8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    1ac4:	f7ff fb2e 	bl	1124 <SDHC_CardReadBlock(void*, unsigned long)>
    1ac8:	fab0 f080 	clz	r0, r0
    1acc:	0940      	lsrs	r0, r0, #5
    1ace:	e7ee      	b.n	1aae <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    1ad0:	20004850 	.word	0x20004850
    1ad4:	200072b8 	.word	0x200072b8
    1ad8:	200072bc 	.word	0x200072bc
    1adc:	200074bc 	.word	0x200074bc

00001ae0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    1ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1ae2:	f890 3020 	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    1ae6:	4605      	mov	r5, r0
    1ae8:	460e      	mov	r6, r1
    1aea:	4617      	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1aec:	2b10      	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    1aee:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    1af0:	4b18      	ldr	r3, [pc, #96]	; (1b54 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1af2:	d017      	beq.n	1b24 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    1af4:	eb04 14d1 	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	429c      	cmp	r4, r3
    1afc:	d117      	bne.n	1b2e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    1afe:	f006 017f 	and.w	r1, r6, #127	; 0x7f
    1b02:	4a15      	ldr	r2, [pc, #84]	; (1b58 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    1b04:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1b08:	4914      	ldr	r1, [pc, #80]	; (1b5c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    1b0a:	7e28      	ldrb	r0, [r5, #24]
    1b0c:	780a      	ldrb	r2, [r1, #0]
    1b0e:	2801      	cmp	r0, #1
    1b10:	f042 0201 	orr.w	r2, r2, #1
    1b14:	700a      	strb	r2, [r1, #0]
    1b16:	d919      	bls.n	1b4c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
    1b18:	68a9      	ldr	r1, [r5, #8]
  return true;
    1b1a:	2001      	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    1b1c:	4a10      	ldr	r2, [pc, #64]	; (1b60 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    1b1e:	440b      	add	r3, r1
    1b20:	6013      	str	r3, [r2, #0]
    1b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1b24:	eb04 2411 	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	429c      	cmp	r4, r3
    1b2c:	d008      	beq.n	1b40 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1b2e:	2100      	movs	r1, #0
    1b30:	4620      	mov	r0, r4
    1b32:	f7ff ffa7 	bl	1a84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    1b36:	b150      	cbz	r0, 1b4e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
    1b38:	f895 3020 	ldrb.w	r3, [r5, #32]
    1b3c:	2b10      	cmp	r3, #16
    1b3e:	d107      	bne.n	1b50 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    1b40:	b2f1      	uxtb	r1, r6
    1b42:	4a05      	ldr	r2, [pc, #20]	; (1b58 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    1b44:	4623      	mov	r3, r4
    1b46:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
    1b4a:	e7dd      	b.n	1b08 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    1b4c:	2001      	movs	r0, #1
}
    1b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    1b50:	4623      	mov	r3, r4
    1b52:	e7d4      	b.n	1afe <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    1b54:	20004850 	.word	0x20004850
    1b58:	200072bc 	.word	0x200072bc
    1b5c:	200074bc 	.word	0x200074bc
    1b60:	200072b4 	.word	0x200072b4

00001b64 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    1b64:	68c3      	ldr	r3, [r0, #12]
    1b66:	3301      	adds	r3, #1
    1b68:	428b      	cmp	r3, r1
    1b6a:	d318      	bcc.n	1b9e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    1b6c:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1b6e:	f890 3020 	ldrb.w	r3, [r0, #32]
    1b72:	4604      	mov	r4, r0
    1b74:	4616      	mov	r6, r2
    1b76:	460d      	mov	r5, r1
    1b78:	2b10      	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    1b7a:	69c0      	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    1b7c:	4b14      	ldr	r3, [pc, #80]	; (1bd0 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1b7e:	d010      	beq.n	1ba2 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    1b80:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	4298      	cmp	r0, r3
    1b88:	d110      	bne.n	1bac <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    1b8a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    1b8e:	4b11      	ldr	r3, [pc, #68]	; (1bd4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    1b90:	2001      	movs	r0, #1
    1b92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1b96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    1b9a:	6033      	str	r3, [r6, #0]
  }
  return true;
}
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    1b9e:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    1ba0:	4770      	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1ba2:	eb00 2011 	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    1ba6:	681b      	ldr	r3, [r3, #0]
    1ba8:	4298      	cmp	r0, r3
    1baa:	d007      	beq.n	1bbc <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1bac:	2100      	movs	r1, #0
    1bae:	f7ff ff69 	bl	1a84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    1bb2:	b150      	cbz	r0, 1bca <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
    1bb4:	f894 3020 	ldrb.w	r3, [r4, #32]
    1bb8:	2b10      	cmp	r3, #16
    1bba:	d1e6      	bne.n	1b8a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    1bbc:	b2e9      	uxtb	r1, r5
    1bbe:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    1bc0:	2001      	movs	r0, #1
    1bc2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    1bc6:	6033      	str	r3, [r6, #0]
    1bc8:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    1bca:	2000      	movs	r0, #0
    1bcc:	bd70      	pop	{r4, r5, r6, pc}
    1bce:	bf00      	nop
    1bd0:	20004850 	.word	0x20004850
    1bd4:	200072bc 	.word	0x200072bc

00001bd8 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    1bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    1bdc:	6817      	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    1bde:	b083      	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    1be0:	b367      	cbz	r7, 1c3c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    1be2:	3701      	adds	r7, #1

    // don't save new start location
    setStart = false;
    1be4:	f04f 0a00 	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    1be8:	68c3      	ldr	r3, [r0, #12]
    1bea:	f103 0801 	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1bee:	b30b      	cbz	r3, 1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    1bf0:	468b      	mov	fp, r1
    1bf2:	4606      	mov	r6, r0
    1bf4:	4691      	mov	r9, r2
    1bf6:	463c      	mov	r4, r7
    1bf8:	2500      	movs	r5, #0
    1bfa:	e005      	b.n	1c08 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    1bfc:	461c      	mov	r4, r3
    1bfe:	461f      	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    1c00:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1c02:	68f3      	ldr	r3, [r6, #12]
    1c04:	42ab      	cmp	r3, r5
    1c06:	d915      	bls.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    1c08:	45a0      	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    1c0a:	aa01      	add	r2, sp, #4
    1c0c:	4630      	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    1c0e:	d201      	bcs.n	1c14 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
    1c10:	2402      	movs	r4, #2
    1c12:	4627      	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    1c14:	4621      	mov	r1, r4
    1c16:	f7ff ffa5 	bl	1b64 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    1c1a:	1c63      	adds	r3, r4, #1
    1c1c:	b150      	cbz	r0, 1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
    1c1e:	9a01      	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    1c20:	1bd9      	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    1c22:	2a00      	cmp	r2, #0
    1c24:	d1ea      	bne.n	1bfc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    1c26:	458b      	cmp	fp, r1
    1c28:	d010      	beq.n	1c4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
    1c2a:	461c      	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    1c2c:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1c2e:	68f3      	ldr	r3, [r6, #12]
    1c30:	42ab      	cmp	r3, r5
    1c32:	d8e9      	bhi.n	1c08 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1c34:	2000      	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    1c36:	b003      	add	sp, #12
    1c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    1c3c:	f1a1 0a01 	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    1c40:	6807      	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    1c42:	faba fa8a 	clz	sl, sl
    1c46:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    1c4a:	e7cd      	b.n	1be8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    1c4c:	2c01      	cmp	r4, #1
    1c4e:	d9f1      	bls.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1c50:	68f3      	ldr	r3, [r6, #12]
    1c52:	3301      	adds	r3, #1
    1c54:	429c      	cmp	r4, r3
    1c56:	d8ed      	bhi.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    1c58:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    1c5c:	4621      	mov	r1, r4
    1c5e:	4630      	mov	r0, r6
    1c60:	f7ff ff3e 	bl	1ae0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1c64:	2800      	cmp	r0, #0
    1c66:	d0e5      	beq.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    1c68:	42a7      	cmp	r7, r4
    1c6a:	d214      	bcs.n	1c96 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1c6c:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    1c6e:	2c01      	cmp	r4, #1
    1c70:	d9e0      	bls.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1c72:	68f3      	ldr	r3, [r6, #12]
    1c74:	3301      	adds	r3, #1
    1c76:	429c      	cmp	r4, r3
    1c78:	d8dc      	bhi.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    1c7a:	1c62      	adds	r2, r4, #1
    1c7c:	4621      	mov	r1, r4
    1c7e:	4630      	mov	r0, r6
    1c80:	f7ff ff2e 	bl	1ae0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1c84:	2800      	cmp	r0, #0
    1c86:	d0d5      	beq.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    1c88:	42a7      	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1c8a:	f104 34ff 	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    1c8e:	d002      	beq.n	1c96 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    1c90:	2c01      	cmp	r4, #1
    1c92:	d1ee      	bne.n	1c72 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    1c94:	e7ce      	b.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    1c96:	f8d9 1000 	ldr.w	r1, [r9]
    1c9a:	b159      	cbz	r1, 1cb4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    1c9c:	2901      	cmp	r1, #1
    1c9e:	d9c9      	bls.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1ca0:	68f3      	ldr	r3, [r6, #12]
    1ca2:	3301      	adds	r3, #1
    1ca4:	4299      	cmp	r1, r3
    1ca6:	d8c5      	bhi.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    1ca8:	463a      	mov	r2, r7
    1caa:	4630      	mov	r0, r6
    1cac:	f7ff ff18 	bl	1ae0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    1cb0:	2800      	cmp	r0, #0
    1cb2:	d0bf      	beq.n	1c34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    1cb4:	f8c9 7000 	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    1cb8:	f1ba 0f00 	cmp.w	sl, #0
    1cbc:	d003      	beq.n	1cc6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    1cbe:	3701      	adds	r7, #1

  return true;
    1cc0:	2001      	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    1cc2:	6037      	str	r7, [r6, #0]
    1cc4:	e7b7      	b.n	1c36 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    1cc6:	2001      	movs	r0, #1
    1cc8:	e7b5      	b.n	1c36 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    1cca:	bf00      	nop

00001ccc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1ccc:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1cce:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1cd2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1cd6:	d16d      	bne.n	1db4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1cd8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1cda:	d341      	bcc.n	1d60 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1cdc:	f851 3b04 	ldr.w	r3, [r1], #4
    1ce0:	f840 3b04 	str.w	r3, [r0], #4
    1ce4:	f851 3b04 	ldr.w	r3, [r1], #4
    1ce8:	f840 3b04 	str.w	r3, [r0], #4
    1cec:	f851 3b04 	ldr.w	r3, [r1], #4
    1cf0:	f840 3b04 	str.w	r3, [r0], #4
    1cf4:	f851 3b04 	ldr.w	r3, [r1], #4
    1cf8:	f840 3b04 	str.w	r3, [r0], #4
    1cfc:	f851 3b04 	ldr.w	r3, [r1], #4
    1d00:	f840 3b04 	str.w	r3, [r0], #4
    1d04:	f851 3b04 	ldr.w	r3, [r1], #4
    1d08:	f840 3b04 	str.w	r3, [r0], #4
    1d0c:	f851 3b04 	ldr.w	r3, [r1], #4
    1d10:	f840 3b04 	str.w	r3, [r0], #4
    1d14:	f851 3b04 	ldr.w	r3, [r1], #4
    1d18:	f840 3b04 	str.w	r3, [r0], #4
    1d1c:	f851 3b04 	ldr.w	r3, [r1], #4
    1d20:	f840 3b04 	str.w	r3, [r0], #4
    1d24:	f851 3b04 	ldr.w	r3, [r1], #4
    1d28:	f840 3b04 	str.w	r3, [r0], #4
    1d2c:	f851 3b04 	ldr.w	r3, [r1], #4
    1d30:	f840 3b04 	str.w	r3, [r0], #4
    1d34:	f851 3b04 	ldr.w	r3, [r1], #4
    1d38:	f840 3b04 	str.w	r3, [r0], #4
    1d3c:	f851 3b04 	ldr.w	r3, [r1], #4
    1d40:	f840 3b04 	str.w	r3, [r0], #4
    1d44:	f851 3b04 	ldr.w	r3, [r1], #4
    1d48:	f840 3b04 	str.w	r3, [r0], #4
    1d4c:	f851 3b04 	ldr.w	r3, [r1], #4
    1d50:	f840 3b04 	str.w	r3, [r0], #4
    1d54:	f851 3b04 	ldr.w	r3, [r1], #4
    1d58:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1d5c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1d5e:	d2bd      	bcs.n	1cdc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1d60:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1d62:	d311      	bcc.n	1d88 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1d64:	f851 3b04 	ldr.w	r3, [r1], #4
    1d68:	f840 3b04 	str.w	r3, [r0], #4
    1d6c:	f851 3b04 	ldr.w	r3, [r1], #4
    1d70:	f840 3b04 	str.w	r3, [r0], #4
    1d74:	f851 3b04 	ldr.w	r3, [r1], #4
    1d78:	f840 3b04 	str.w	r3, [r0], #4
    1d7c:	f851 3b04 	ldr.w	r3, [r1], #4
    1d80:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1d84:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    1d86:	d2ed      	bcs.n	1d64 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1d88:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    1d8a:	d305      	bcc.n	1d98 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1d8c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1d90:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1d94:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1d96:	d2f9      	bcs.n	1d8c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1d98:	3204      	adds	r2, #4
	beq	.Ldone
    1d9a:	d008      	beq.n	1dae <memcpy+0xe2>

	lsls	r2, r2, #31
    1d9c:	07d2      	lsls	r2, r2, #31
	itt ne
    1d9e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1da0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1da4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1da8:	d301      	bcc.n	1dae <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1daa:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1dac:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1dae:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1db0:	4770      	bx	lr
    1db2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1db4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    1db6:	d313      	bcc.n	1de0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1db8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1dba:	d08d      	beq.n	1cd8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1dbc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1dc0:	d08a      	beq.n	1cd8 <memcpy+0xc>

	rsb	r3, #4
    1dc2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    1dc6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    1dc8:	07db      	lsls	r3, r3, #31
	itt ne
    1dca:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1dcc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1dd0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    1dd4:	d380      	bcc.n	1cd8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    1dd6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1dda:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1dde:	e77b      	b.n	1cd8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1de0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    1de2:	d3d9      	bcc.n	1d98 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    1de4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    1de6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1dea:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1dee:	d2f9      	bcs.n	1de4 <memcpy+0x118>

	ldrb	r3, [r1]
    1df0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    1df2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    1df4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    1df6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1df8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1dfa:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1dfc:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1dfe:	4770      	bx	lr

00001e00 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e00:	4a96      	ldr	r2, [pc, #600]	; (205c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1e02:	4b97      	ldr	r3, [pc, #604]	; (2060 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e04:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    1e06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    1e0a:	4c96      	ldr	r4, [pc, #600]	; (2064 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    1e0c:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    1e10:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    1e12:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    1e14:	d91c      	bls.n	1e50 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    1e16:	4b94      	ldr	r3, [pc, #592]	; (2068 <set_arm_clock+0x268>)
    1e18:	4298      	cmp	r0, r3
    1e1a:	f240 8115 	bls.w	2048 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    1e1e:	4b93      	ldr	r3, [pc, #588]	; (206c <set_arm_clock+0x26c>)
    1e20:	f240 6527 	movw	r5, #1575	; 0x627
    1e24:	4f92      	ldr	r7, [pc, #584]	; (2070 <set_arm_clock+0x270>)
    1e26:	4403      	add	r3, r0
    1e28:	4c92      	ldr	r4, [pc, #584]	; (2074 <set_arm_clock+0x274>)
    1e2a:	0a1a      	lsrs	r2, r3, #8
    1e2c:	fba7 3202 	umull	r3, r2, r7, r2
    1e30:	09d3      	lsrs	r3, r2, #7
    1e32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e36:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1e3a:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    1e3e:	42ab      	cmp	r3, r5
    1e40:	bf28      	it	cs
    1e42:	462b      	movcs	r3, r5
    1e44:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    1e48:	fba4 3503 	umull	r3, r5, r4, r3
    1e4c:	08ed      	lsrs	r5, r5, #3
    1e4e:	e004      	b.n	1e5a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    1e50:	4d89      	ldr	r5, [pc, #548]	; (2078 <set_arm_clock+0x278>)
    1e52:	42a8      	cmp	r0, r5
    1e54:	bf94      	ite	ls
    1e56:	2506      	movls	r5, #6
    1e58:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e5a:	4a81      	ldr	r2, [pc, #516]	; (2060 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e5c:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e60:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e64:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1e66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    1e6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1e6e:	d20a      	bcs.n	1e86 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    1e70:	4b7c      	ldr	r3, [pc, #496]	; (2064 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1e72:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1e76:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1e78:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1e7a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1e7c:	6813      	ldr	r3, [r2, #0]
    1e7e:	2b00      	cmp	r3, #0
    1e80:	dafc      	bge.n	1e7c <set_arm_clock+0x7c>
    1e82:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1e86:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    1e8a:	d131      	bne.n	1ef0 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1e8c:	4c7b      	ldr	r4, [pc, #492]	; (207c <set_arm_clock+0x27c>)
    1e8e:	4a7c      	ldr	r2, [pc, #496]	; (2080 <set_arm_clock+0x280>)
    1e90:	f8d4 c010 	ldr.w	ip, [r4, #16]
    1e94:	4614      	mov	r4, r2
    1e96:	ea0c 0202 	and.w	r2, ip, r2
    1e9a:	42a2      	cmp	r2, r4
    1e9c:	bf0a      	itet	eq
    1e9e:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    1ea2:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    1ea6:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1ea8:	ea8e 0403 	eor.w	r4, lr, r3
    1eac:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1eb0:	d008      	beq.n	1ec4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1eb2:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1eb6:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    1eba:	4c69      	ldr	r4, [pc, #420]	; (2060 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1ebc:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    1ec0:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1ec4:	ea81 0302 	eor.w	r3, r1, r2
    1ec8:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    1ecc:	d008      	beq.n	1ee0 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1ece:	4b64      	ldr	r3, [pc, #400]	; (2060 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1ed0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1ed4:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1ed6:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    1ed8:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    1eda:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1edc:	071c      	lsls	r4, r3, #28
    1ede:	d4fc      	bmi.n	1eda <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1ee0:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1ee4:	4a5e      	ldr	r2, [pc, #376]	; (2060 <set_arm_clock+0x260>)
    1ee6:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1eea:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1eec:	0699      	lsls	r1, r3, #26
    1eee:	d4fc      	bmi.n	1eea <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    1ef0:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    1ef2:	4c64      	ldr	r4, [pc, #400]	; (2084 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    1ef4:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1ef6:	fb01 f302 	mul.w	r3, r1, r2
    1efa:	fb00 f303 	mul.w	r3, r0, r3
    1efe:	42a3      	cmp	r3, r4
    1f00:	d809      	bhi.n	1f16 <set_arm_clock+0x116>
		if (div_arm < 8) {
    1f02:	2a07      	cmp	r2, #7
    1f04:	f200 8095 	bhi.w	2032 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    1f08:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    1f0a:	fb01 f302 	mul.w	r3, r1, r2
    1f0e:	fb00 f303 	mul.w	r3, r0, r3
    1f12:	42a3      	cmp	r3, r4
    1f14:	d9f5      	bls.n	1f02 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    1f16:	485c      	ldr	r0, [pc, #368]	; (2088 <set_arm_clock+0x288>)
    1f18:	4c5c      	ldr	r4, [pc, #368]	; (208c <set_arm_clock+0x28c>)
    1f1a:	4418      	add	r0, r3
    1f1c:	fba4 0300 	umull	r0, r3, r4, r0
    1f20:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    1f22:	2b6c      	cmp	r3, #108	; 0x6c
    1f24:	f200 808b 	bhi.w	203e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    1f28:	2b35      	cmp	r3, #53	; 0x35
    1f2a:	f200 808f 	bhi.w	204c <set_arm_clock+0x24c>
    1f2e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 20b8 <set_arm_clock+0x2b8>
    1f32:	2336      	movs	r3, #54	; 0x36
    1f34:	4856      	ldr	r0, [pc, #344]	; (2090 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f36:	f8df c144 	ldr.w	ip, [pc, #324]	; 207c <set_arm_clock+0x27c>
    1f3a:	4c56      	ldr	r4, [pc, #344]	; (2094 <set_arm_clock+0x294>)
    1f3c:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1f40:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f44:	ea09 0404 	and.w	r4, r9, r4
    1f48:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1f4a:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1f4e:	d00b      	beq.n	1f68 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    1f50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f54:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f58:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1f5a:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    1f5e:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1f62:	6823      	ldr	r3, [r4, #0]
    1f64:	2b00      	cmp	r3, #0
    1f66:	dafc      	bge.n	1f62 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1f68:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 2060 <set_arm_clock+0x260>
    1f6c:	3a01      	subs	r2, #1
    1f6e:	f8dc 3010 	ldr.w	r3, [ip, #16]
    1f72:	f003 0307 	and.w	r3, r3, #7
    1f76:	4293      	cmp	r3, r2
    1f78:	d007      	beq.n	1f8a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1f7a:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1f7e:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1f80:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1f84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1f86:	03db      	lsls	r3, r3, #15
    1f88:	d4fc      	bmi.n	1f84 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1f8a:	3901      	subs	r1, #1
    1f8c:	0289      	lsls	r1, r1, #10
    1f8e:	ea8e 0301 	eor.w	r3, lr, r1
    1f92:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    1f96:	d00c      	beq.n	1fb2 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    1f98:	4b31      	ldr	r3, [pc, #196]	; (2060 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1f9a:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1f9e:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1fa2:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1fa4:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    1fa8:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1fac:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1fae:	0799      	lsls	r1, r3, #30
    1fb0:	d4fc      	bmi.n	1fac <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1fb2:	4b39      	ldr	r3, [pc, #228]	; (2098 <set_arm_clock+0x298>)
    1fb4:	4939      	ldr	r1, [pc, #228]	; (209c <set_arm_clock+0x29c>)
    1fb6:	4403      	add	r3, r0
    1fb8:	09db      	lsrs	r3, r3, #7
    1fba:	fba1 3103 	umull	r3, r1, r1, r3
    1fbe:	0b09      	lsrs	r1, r1, #12
    1fc0:	2904      	cmp	r1, #4
    1fc2:	bf28      	it	cs
    1fc4:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1fc6:	1e4b      	subs	r3, r1, #1
    1fc8:	021b      	lsls	r3, r3, #8
    1fca:	ea8e 0203 	eor.w	r2, lr, r3
    1fce:	f412 7f40 	tst.w	r2, #768	; 0x300
    1fd2:	d007      	beq.n	1fe4 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    1fd4:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1fdc:	4a20      	ldr	r2, [pc, #128]	; (2060 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1fde:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    1fe2:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1fe4:	4b1e      	ldr	r3, [pc, #120]	; (2060 <set_arm_clock+0x260>)
    1fe6:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1fe8:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    1fea:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    1fee:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1ff0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1ff2:	069b      	lsls	r3, r3, #26
    1ff4:	d4fc      	bmi.n	1ff0 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    1ff6:	4b2a      	ldr	r3, [pc, #168]	; (20a0 <set_arm_clock+0x2a0>)
    1ff8:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    1ffc:	4c29      	ldr	r4, [pc, #164]	; (20a4 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    1ffe:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2000:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2004:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2006:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    200a:	4c27      	ldr	r4, [pc, #156]	; (20a8 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    200c:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2010:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2014:	4a25      	ldr	r2, [pc, #148]	; (20ac <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2016:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2018:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    201a:	d208      	bcs.n	202e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    201c:	4b11      	ldr	r3, [pc, #68]	; (2064 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    201e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2022:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2024:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2026:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2028:	6813      	ldr	r3, [r2, #0]
    202a:	2b00      	cmp	r3, #0
    202c:	dafc      	bge.n	2028 <set_arm_clock+0x228>
	}

	return frequency;
}
    202e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2032:	2904      	cmp	r1, #4
    2034:	f63f af6f 	bhi.w	1f16 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2038:	3101      	adds	r1, #1
				div_arm = 1;
    203a:	2201      	movs	r2, #1
    203c:	e75b      	b.n	1ef6 <set_arm_clock+0xf6>
    203e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 20bc <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2042:	236c      	movs	r3, #108	; 0x6c
    2044:	481a      	ldr	r0, [pc, #104]	; (20b0 <set_arm_clock+0x2b0>)
    2046:	e776      	b.n	1f36 <set_arm_clock+0x136>
    2048:	2512      	movs	r5, #18
    204a:	e706      	b.n	1e5a <set_arm_clock+0x5a>
    204c:	4819      	ldr	r0, [pc, #100]	; (20b4 <set_arm_clock+0x2b4>)
    204e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 20c0 <set_arm_clock+0x2c0>
    2052:	fb00 f003 	mul.w	r0, r0, r3
    2056:	ea43 0808 	orr.w	r8, r3, r8
    205a:	e76c      	b.n	1f36 <set_arm_clock+0x136>
    205c:	1f78a400 	.word	0x1f78a400
    2060:	400fc000 	.word	0x400fc000
    2064:	40080000 	.word	0x40080000
    2068:	23c34600 	.word	0x23c34600
    206c:	dc3cba00 	.word	0xdc3cba00
    2070:	004cb223 	.word	0x004cb223
    2074:	51eb851f 	.word	0x51eb851f
    2078:	016e3600 	.word	0x016e3600
    207c:	400d8000 	.word	0x400d8000
    2080:	80003040 	.word	0x80003040
    2084:	269fb1ff 	.word	0x269fb1ff
    2088:	005b8d80 	.word	0x005b8d80
    208c:	165e9f81 	.word	0x165e9f81
    2090:	269fb200 	.word	0x269fb200
    2094:	8001307f 	.word	0x8001307f
    2098:	08f0d17f 	.word	0x08f0d17f
    209c:	00e5109f 	.word	0x00e5109f
    20a0:	431bde83 	.word	0x431bde83
    20a4:	20004858 	.word	0x20004858
    20a8:	20004854 	.word	0x20004854
    20ac:	200074c4 	.word	0x200074c4
    20b0:	4d3f6400 	.word	0x4d3f6400
    20b4:	00b71b00 	.word	0x00b71b00
    20b8:	80002036 	.word	0x80002036
    20bc:	8000206c 	.word	0x8000206c
    20c0:	80002000 	.word	0x80002000

000020c4 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    20c4:	2800      	cmp	r0, #0
    20c6:	d057      	beq.n	2178 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    20c8:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    20ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20ce:	b085      	sub	sp, #20
    20d0:	4683      	mov	fp, r0
    20d2:	4c2a      	ldr	r4, [pc, #168]	; (217c <delay+0xb8>)
    20d4:	4d2a      	ldr	r5, [pc, #168]	; (2180 <delay+0xbc>)
    20d6:	4e2b      	ldr	r6, [pc, #172]	; (2184 <delay+0xc0>)
    20d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    20dc:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    20e0:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    20e2:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    20e4:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    20e8:	2900      	cmp	r1, #0
    20ea:	d1f7      	bne.n	20dc <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    20ec:	4f26      	ldr	r7, [pc, #152]	; (2188 <delay+0xc4>)
    20ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
    20f2:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    20f4:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    20f6:	4a25      	ldr	r2, [pc, #148]	; (218c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    20f8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    20fc:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    20fe:	6812      	ldr	r2, [r2, #0]
    2100:	2701      	movs	r7, #1
    2102:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    2106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    210a:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    210c:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    210e:	428b      	cmp	r3, r1
    2110:	bf08      	it	eq
    2112:	4542      	cmpeq	r2, r8
    2114:	bf2c      	ite	cs
    2116:	46c2      	movcs	sl, r8
    2118:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    211a:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    211e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2122:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2124:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2126:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    212a:	2b00      	cmp	r3, #0
    212c:	d1f7      	bne.n	211e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    212e:	9801      	ldr	r0, [sp, #4]
    2130:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2132:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2134:	4815      	ldr	r0, [pc, #84]	; (218c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2136:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    213a:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    213c:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2140:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    2144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2148:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    214c:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    214e:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2150:	4299      	cmp	r1, r3
    2152:	bf08      	it	eq
    2154:	4540      	cmpeq	r0, r8
    2156:	bf2c      	ite	cs
    2158:	4643      	movcs	r3, r8
    215a:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    215c:	441a      	add	r2, r3
    215e:	4572      	cmp	r2, lr
    2160:	d307      	bcc.n	2172 <delay+0xae>
			if (--msec == 0) return;
    2162:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    2166:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    216a:	d1d8      	bne.n	211e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    216c:	b005      	add	sp, #20
    216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    2172:	f001 fdd3 	bl	3d1c <yield>
	}
    2176:	e7d2      	b.n	211e <delay+0x5a>
    2178:	4770      	bx	lr
    217a:	bf00      	nop
    217c:	200077f8 	.word	0x200077f8
    2180:	200074c8 	.word	0x200074c8
    2184:	200074c0 	.word	0x200074c0
    2188:	e0001004 	.word	0xe0001004
    218c:	200074c4 	.word	0x200074c4

00002190 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    2190:	0100      	lsls	r0, r0, #4
    2192:	4b0f      	ldr	r3, [pc, #60]	; (21d0 <digitalWrite.part.0+0x40>)
    2194:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    2196:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    2198:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    219a:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    219c:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    219e:	4204      	tst	r4, r0
    21a0:	d005      	beq.n	21ae <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    21a2:	b159      	cbz	r1, 21bc <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    21a4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    21a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    21ac:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    21ae:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    21b0:	b949      	cbnz	r1, 21c6 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    21b2:	4a08      	ldr	r2, [pc, #32]	; (21d4 <digitalWrite.part.0+0x44>)
		}
	}
}
    21b4:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    21b8:	601a      	str	r2, [r3, #0]
		}
	}
}
    21ba:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    21bc:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    21c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    21c4:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    21c6:	4a04      	ldr	r2, [pc, #16]	; (21d8 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    21c8:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    21cc:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    21ce:	4770      	bx	lr
    21d0:	20000a3c 	.word	0x20000a3c
    21d4:	00013038 	.word	0x00013038
    21d8:	0001f038 	.word	0x0001f038

000021dc <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    21dc:	2827      	cmp	r0, #39	; 0x27
    21de:	d801      	bhi.n	21e4 <digitalWrite+0x8>
    21e0:	f7ff bfd6 	b.w	2190 <digitalWrite.part.0>
    21e4:	4770      	bx	lr
    21e6:	bf00      	nop

000021e8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    21e8:	2827      	cmp	r0, #39	; 0x27
    21ea:	d81c      	bhi.n	2226 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    21ec:	0100      	lsls	r0, r0, #4
    21ee:	4a1a      	ldr	r2, [pc, #104]	; (2258 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    21f0:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    21f2:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    21f6:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    21f8:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    21fa:	d015      	beq.n	2228 <pinMode+0x40>
    21fc:	2904      	cmp	r1, #4
    21fe:	d013      	beq.n	2228 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2200:	68dc      	ldr	r4, [r3, #12]
    2202:	6842      	ldr	r2, [r0, #4]
    2204:	ea22 0204 	bic.w	r2, r2, r4
    2208:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    220a:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    220c:	b1e9      	cbz	r1, 224a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    220e:	2902      	cmp	r1, #2
    2210:	d01e      	beq.n	2250 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    2212:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2214:	685b      	ldr	r3, [r3, #4]
}
    2216:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    221a:	bf0c      	ite	eq
    221c:	490f      	ldreq	r1, [pc, #60]	; (225c <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    221e:	4910      	ldrne	r1, [pc, #64]	; (2260 <pinMode+0x78>)
    2220:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    2222:	2215      	movs	r2, #21
    2224:	601a      	str	r2, [r3, #0]
}
    2226:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2228:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    222a:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    222c:	6844      	ldr	r4, [r0, #4]
    222e:	ea42 0204 	orr.w	r2, r2, r4
    2232:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2234:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    2236:	d008      	beq.n	224a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    2238:	f640 0138 	movw	r1, #2104	; 0x838
    223c:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    223e:	685b      	ldr	r3, [r3, #4]
    2240:	2215      	movs	r2, #21
}
    2242:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2246:	601a      	str	r2, [r3, #0]
}
    2248:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    224a:	2138      	movs	r1, #56	; 0x38
    224c:	6011      	str	r1, [r2, #0]
    224e:	e7f6      	b.n	223e <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2250:	4904      	ldr	r1, [pc, #16]	; (2264 <pinMode+0x7c>)
    2252:	6011      	str	r1, [r2, #0]
    2254:	e7f3      	b.n	223e <pinMode+0x56>
    2256:	bf00      	nop
    2258:	20000a3c 	.word	0x20000a3c
    225c:	00013038 	.word	0x00013038
    2260:	00010038 	.word	0x00010038
    2264:	0001f038 	.word	0x0001f038

00002268 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2268:	48a4      	ldr	r0, [pc, #656]	; (24fc <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    226a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    226e:	4ba4      	ldr	r3, [pc, #656]	; (2500 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2270:	6f82      	ldr	r2, [r0, #120]	; 0x78
    2272:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    2276:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2278:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    227a:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    227c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2280:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2284:	4c9f      	ldr	r4, [pc, #636]	; (2504 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2286:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    228a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    228c:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2290:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2292:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2294:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2298:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    229c:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    22a0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    22a4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    22a8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    22ac:	b280      	uxth	r0, r0
    22ae:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    22b2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    22b6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    22ba:	4b91      	ldr	r3, [pc, #580]	; (2500 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    22bc:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    22be:	2500      	movs	r5, #0
    22c0:	0140      	lsls	r0, r0, #5
    22c2:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    22c4:	2904      	cmp	r1, #4
    22c6:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    22c8:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    22cc:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    22ce:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    22d0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    22d2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    22d4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    22d6:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    22d8:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    22da:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    22dc:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    22de:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    22e0:	d1e9      	bne.n	22b6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22e2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    22e6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    22ea:	4b87      	ldr	r3, [pc, #540]	; (2508 <pwm_init+0x2a0>)
    22ec:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22f0:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    22f2:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    22f4:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    22f8:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    22fa:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    22fe:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2302:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2306:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    230a:	b280      	uxth	r0, r0
    230c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    2310:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2314:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2318:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    231c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2320:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2324:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2328:	b280      	uxth	r0, r0
    232a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    232e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2332:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2336:	4b74      	ldr	r3, [pc, #464]	; (2508 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    2338:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    233a:	2500      	movs	r5, #0
    233c:	0140      	lsls	r0, r0, #5
    233e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2340:	2904      	cmp	r1, #4
    2342:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2344:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2346:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    234a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    234c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    234e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2350:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2352:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2354:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2356:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2358:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    235a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    235c:	d1e9      	bne.n	2332 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    235e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2362:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2366:	4b69      	ldr	r3, [pc, #420]	; (250c <pwm_init+0x2a4>)
    2368:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    236c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    236e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2370:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2374:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2376:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    237a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    237e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2382:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    2386:	b280      	uxth	r0, r0
    2388:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    238c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2390:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2394:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2398:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    239c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    23a0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    23a4:	b280      	uxth	r0, r0
    23a6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    23aa:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    23ae:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    23b2:	4b56      	ldr	r3, [pc, #344]	; (250c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    23b4:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    23b6:	2500      	movs	r5, #0
    23b8:	0140      	lsls	r0, r0, #5
    23ba:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    23bc:	2904      	cmp	r1, #4
    23be:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    23c0:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    23c2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    23c6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    23c8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    23ca:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    23cc:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    23ce:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    23d0:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    23d2:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    23d4:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    23d6:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    23d8:	d1e9      	bne.n	23ae <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23da:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    23de:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    23e2:	4b4b      	ldr	r3, [pc, #300]	; (2510 <pwm_init+0x2a8>)
    23e4:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23e8:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    23ea:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    23ec:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    23f0:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23f2:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    23f6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    23fa:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    23fe:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    2402:	b280      	uxth	r0, r0
    2404:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    2408:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    240c:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2410:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2414:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2418:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    241c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2420:	b280      	uxth	r0, r0
    2422:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2426:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    242a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    242e:	4b38      	ldr	r3, [pc, #224]	; (2510 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    2430:	3101      	adds	r1, #1
    2432:	0140      	lsls	r0, r0, #5
    2434:	461c      	mov	r4, r3
    2436:	2904      	cmp	r1, #4
    2438:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    243a:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    243c:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2440:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2442:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2444:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2446:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2448:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    244a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    244c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    244e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2450:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2452:	d1ea      	bne.n	242a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2454:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2458:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    245a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    245c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2460:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2462:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2466:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2468:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    246c:	433b      	orrs	r3, r7
    246e:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2472:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    2476:	b29b      	uxth	r3, r3
    2478:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    247c:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2480:	0150      	lsls	r0, r2, #5
    2482:	4b24      	ldr	r3, [pc, #144]	; (2514 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2484:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2486:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2488:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    248a:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    248c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    248e:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2490:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2492:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    2496:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    2498:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    249a:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    249c:	d1f0      	bne.n	2480 <pwm_init+0x218>
    249e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    24a0:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24a2:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24a6:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24aa:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24ac:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24b0:	0150      	lsls	r0, r2, #5
    24b2:	4b19      	ldr	r3, [pc, #100]	; (2518 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24b4:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    24b6:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24b8:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    24ba:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    24bc:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    24be:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24c0:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24c2:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    24c4:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    24c6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24c8:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24ca:	d1f1      	bne.n	24b0 <pwm_init+0x248>
    24cc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    24ce:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24d0:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24d4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24d8:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24da:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    24de:	0150      	lsls	r0, r2, #5
    24e0:	4b0e      	ldr	r3, [pc, #56]	; (251c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24e2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    24e4:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24e6:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    24e8:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    24ea:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    24ec:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    24ee:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    24f0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    24f2:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    24f4:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    24f6:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    24f8:	d1f1      	bne.n	24de <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    24fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24fc:	400fc000 	.word	0x400fc000
    2500:	403dc000 	.word	0x403dc000
    2504:	fc030000 	.word	0xfc030000
    2508:	403e0000 	.word	0x403e0000
    250c:	403e4000 	.word	0x403e4000
    2510:	403e8000 	.word	0x403e8000
    2514:	401dc000 	.word	0x401dc000
    2518:	401e0000 	.word	0x401e0000
    251c:	401e4000 	.word	0x401e4000

00002520 <xbar_connect>:


void xbar_connect(unsigned int input, unsigned int output)
{
	if (input >= 88) return;
	if (output >= 132) return;
    2520:	2857      	cmp	r0, #87	; 0x57
    2522:	d811      	bhi.n	2548 <xbar_connect+0x28>
    2524:	2983      	cmp	r1, #131	; 0x83
    2526:	d80f      	bhi.n	2548 <xbar_connect+0x28>
#if 1
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
    2528:	4a0a      	ldr	r2, [pc, #40]	; (2554 <xbar_connect+0x34>)
}



void xbar_connect(unsigned int input, unsigned int output)
{
    252a:	b410      	push	{r4}
	if (input >= 88) return;
	if (output >= 132) return;
#if 1
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
    252c:	084c      	lsrs	r4, r1, #1
	uint16_t val = *xbar;
	if (!(output & 1)) {
    252e:	07c9      	lsls	r1, r1, #31
{
	if (input >= 88) return;
	if (output >= 132) return;
#if 1
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
	uint16_t val = *xbar;
    2530:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    2534:	b29b      	uxth	r3, r3
	if (!(output & 1)) {
    2536:	d508      	bpl.n	254a <xbar_connect+0x2a>
		val = (val & 0xFF00) | input;
	} else {
		val = (val & 0x00FF) | (input << 8);
    2538:	b2db      	uxtb	r3, r3
    253a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    253e:	b280      	uxth	r0, r0
	}
	*xbar = val;
    2540:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
#else
	// does not work, seems 8 bit access is not allowed
	volatile uint8_t *xbar = (volatile uint8_t *)XBARA1_SEL0;
	xbar[output] = input;
#endif
}
    2544:	f85d 4b04 	ldr.w	r4, [sp], #4
    2548:	4770      	bx	lr
	if (output >= 132) return;
#if 1
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
	uint16_t val = *xbar;
	if (!(output & 1)) {
		val = (val & 0xFF00) | input;
    254a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    254e:	4318      	orrs	r0, r3
    2550:	b280      	uxth	r0, r0
    2552:	e7f5      	b.n	2540 <xbar_connect+0x20>
    2554:	403bc000 	.word	0x403bc000

00002558 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    2558:	2004      	movs	r0, #4
    255a:	4671      	mov	r1, lr
    255c:	4208      	tst	r0, r1
    255e:	d003      	beq.n	2568 <_MSP>
    2560:	f3ef 8009 	mrs	r0, PSP
    2564:	f000 b808 	b.w	2578 <HardFault_HandlerC>

00002568 <_MSP>:
    2568:	f3ef 8008 	mrs	r0, MSP
    256c:	f000 b804 	b.w	2578 <HardFault_HandlerC>

00002570 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    2570:	4770      	bx	lr
    2572:	bf00      	nop

00002574 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    2574:	4770      	bx	lr
    2576:	bf00      	nop

00002578 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2578:	4b1b      	ldr	r3, [pc, #108]	; (25e8 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    257a:	2105      	movs	r1, #5
    257c:	4a1b      	ldr	r2, [pc, #108]	; (25ec <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    257e:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2580:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2582:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    2586:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2588:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    258c:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    258e:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2590:	4c17      	ldr	r4, [pc, #92]	; (25f0 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2592:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2594:	4817      	ldr	r0, [pc, #92]	; (25f4 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2596:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    2598:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    259c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    25a0:	6823      	ldr	r3, [r4, #0]
    25a2:	4283      	cmp	r3, r0
    25a4:	d902      	bls.n	25ac <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    25a6:	4814      	ldr	r0, [pc, #80]	; (25f8 <HardFault_HandlerC+0x80>)
    25a8:	f7ff fc2a 	bl	1e00 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    25ac:	4d0e      	ldr	r5, [pc, #56]	; (25e8 <HardFault_HandlerC+0x70>)
    25ae:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    25b0:	2000      	movs	r0, #0
    25b2:	4a12      	ldr	r2, [pc, #72]	; (25fc <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    25b4:	4912      	ldr	r1, [pc, #72]	; (2600 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    25b6:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    25ba:	9001      	str	r0, [sp, #4]
    25bc:	9b01      	ldr	r3, [sp, #4]
    25be:	4293      	cmp	r3, r2
    25c0:	d805      	bhi.n	25ce <HardFault_HandlerC+0x56>
    25c2:	9b01      	ldr	r3, [sp, #4]
    25c4:	3301      	adds	r3, #1
    25c6:	9301      	str	r3, [sp, #4]
    25c8:	9b01      	ldr	r3, [sp, #4]
    25ca:	4293      	cmp	r3, r2
    25cc:	d9f9      	bls.n	25c2 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    25ce:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    25d2:	9001      	str	r0, [sp, #4]
    25d4:	9b01      	ldr	r3, [sp, #4]
    25d6:	428b      	cmp	r3, r1
    25d8:	d8ed      	bhi.n	25b6 <HardFault_HandlerC+0x3e>
    25da:	9b01      	ldr	r3, [sp, #4]
    25dc:	3301      	adds	r3, #1
    25de:	9301      	str	r3, [sp, #4]
    25e0:	9b01      	ldr	r3, [sp, #4]
    25e2:	428b      	cmp	r3, r1
    25e4:	d9f9      	bls.n	25da <HardFault_HandlerC+0x62>
    25e6:	e7e6      	b.n	25b6 <HardFault_HandlerC+0x3e>
    25e8:	401bc000 	.word	0x401bc000
    25ec:	401f8000 	.word	0x401f8000
    25f0:	20004858 	.word	0x20004858
    25f4:	23c345ff 	.word	0x23c345ff
    25f8:	11e1a300 	.word	0x11e1a300
    25fc:	000f423f 	.word	0x000f423f
    2600:	0089543f 	.word	0x0089543f

00002604 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    2604:	4a09      	ldr	r2, [pc, #36]	; (262c <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    2606:	b508      	push	{r3, lr}
        char *prev = __brkval;
    2608:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    260a:	b120      	cbz	r0, 2616 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    260c:	4418      	add	r0, r3
    260e:	4908      	ldr	r1, [pc, #32]	; (2630 <_sbrk+0x2c>)
    2610:	4288      	cmp	r0, r1
    2612:	d802      	bhi.n	261a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    2614:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    2616:	4618      	mov	r0, r3
    2618:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    261a:	f002 fab3 	bl	4b84 <__errno>
    261e:	220c      	movs	r2, #12
                        return (void *)-1;
    2620:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2624:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    2626:	4618      	mov	r0, r3
    2628:	bd08      	pop	{r3, pc}
    262a:	bf00      	nop
    262c:	2000485c 	.word	0x2000485c
    2630:	20280000 	.word	0x20280000

00002634 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    2634:	bf30      	wfi
    2636:	e7fd      	b.n	2634 <__cxa_pure_virtual>

00002638 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    2638:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    263a:	4a06      	ldr	r2, [pc, #24]	; (2654 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    263c:	2107      	movs	r1, #7
    263e:	4b06      	ldr	r3, [pc, #24]	; (2658 <Panic_Temp_isr+0x20>)
    2640:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2642:	6b93      	ldr	r3, [r2, #56]	; 0x38
    2644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2648:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    264a:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    264e:	bf30      	wfi
    2650:	e7fd      	b.n	264e <Panic_Temp_isr+0x16>
    2652:	bf00      	nop
    2654:	400d4000 	.word	0x400d4000
    2658:	400ac000 	.word	0x400ac000

0000265c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    265c:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    265e:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2660:	b11b      	cbz	r3, 266a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2662:	6853      	ldr	r3, [r2, #4]
    2664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2668:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    266a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    266c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    266e:	b1dc      	cbz	r4, 26a8 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2670:	4b14      	ldr	r3, [pc, #80]	; (26c4 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    2672:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2674:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    2678:	420c      	tst	r4, r1
    267a:	d11f      	bne.n	26bc <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    267c:	4d12      	ldr	r5, [pc, #72]	; (26c8 <schedule_transfer+0x6c>)
    267e:	682f      	ldr	r7, [r5, #0]
    2680:	e004      	b.n	268c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2682:	682c      	ldr	r4, [r5, #0]
    2684:	1be4      	subs	r4, r4, r7
    2686:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    268a:	d20b      	bcs.n	26a4 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    268c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2690:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    2694:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    2698:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    269c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    26a0:	0464      	lsls	r4, r4, #17
    26a2:	d5ee      	bpl.n	2682 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    26a4:	4231      	tst	r1, r6
    26a6:	d109      	bne.n	26bc <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    26a8:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    26aa:	4c06      	ldr	r4, [pc, #24]	; (26c4 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    26ac:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    26ae:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    26b0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    26b4:	4319      	orrs	r1, r3
    26b6:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    26ba:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    26bc:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    26be:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    26c0:	bcf0      	pop	{r4, r5, r6, r7}
    26c2:	4770      	bx	lr
    26c4:	402e0000 	.word	0x402e0000
    26c8:	e0001004 	.word	0xe0001004

000026cc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    26cc:	b570      	push	{r4, r5, r6, lr}
    26ce:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    26d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    26d2:	b190      	cbz	r0, 26fa <run_callbacks+0x2e>
    26d4:	4602      	mov	r2, r0
    26d6:	2400      	movs	r4, #0
    26d8:	e003      	b.n	26e2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    26da:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    26dc:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    26de:	2a01      	cmp	r2, #1
    26e0:	d00c      	beq.n	26fc <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    26e2:	6853      	ldr	r3, [r2, #4]
    26e4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    26e8:	d0f7      	beq.n	26da <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    26ea:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    26ec:	b12c      	cbz	r4, 26fa <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    26ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    26f0:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    26f2:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    26f4:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    26f6:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    26f8:	d1f9      	bne.n	26ee <run_callbacks+0x22>
    26fa:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    26fc:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    26fe:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    2700:	e7f4      	b.n	26ec <run_callbacks+0x20>
    2702:	bf00      	nop

00002704 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2704:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    2706:	b9e1      	cbnz	r1, 2742 <endpoint0_transmit.constprop.1+0x3e>
    2708:	4c21      	ldr	r4, [pc, #132]	; (2790 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    270a:	4922      	ldr	r1, [pc, #136]	; (2794 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    270c:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    270e:	4b22      	ldr	r3, [pc, #136]	; (2798 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2710:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2712:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2716:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2718:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    271a:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    271c:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    271e:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    2720:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2722:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2726:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    272a:	4d1c      	ldr	r5, [pc, #112]	; (279c <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    272c:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2730:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    2732:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2736:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    2738:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    273c:	2b00      	cmp	r3, #0
    273e:	d1fb      	bne.n	2738 <endpoint0_transmit.constprop.1+0x34>
}
    2740:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2742:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2744:	4b16      	ldr	r3, [pc, #88]	; (27a0 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2746:	4d14      	ldr	r5, [pc, #80]	; (2798 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2748:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    274a:	4c11      	ldr	r4, [pc, #68]	; (2790 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    274c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2750:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2752:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2754:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2756:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    275a:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    275c:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2760:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2762:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2766:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    276a:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    276e:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2770:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2772:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2776:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    277a:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    277e:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2780:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2782:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    2786:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    278a:	2b00      	cmp	r3, #0
    278c:	d1fb      	bne.n	2786 <endpoint0_transmit.constprop.1+0x82>
    278e:	e7bc      	b.n	270a <endpoint0_transmit.constprop.1+0x6>
    2790:	20009000 	.word	0x20009000
    2794:	20008020 	.word	0x20008020
    2798:	402e0000 	.word	0x402e0000
    279c:	200074f0 	.word	0x200074f0
    27a0:	20008000 	.word	0x20008000

000027a4 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    27a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    27a8:	4cac      	ldr	r4, [pc, #688]	; (2a5c <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    27aa:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    27ac:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    27b0:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    27b4:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    27b8:	d05e      	beq.n	2878 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    27ba:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    27be:	2b00      	cmp	r3, #0
    27c0:	d055      	beq.n	286e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    27c2:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    27c6:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 2a84 <isr+0x2e0>
    27ca:	4ea5      	ldr	r6, [pc, #660]	; (2a60 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    27cc:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    27ce:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    27d0:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    27d4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    27d6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    27d8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    27dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    27e0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    27e4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    27e8:	049f      	lsls	r7, r3, #18
    27ea:	d5f5      	bpl.n	27d8 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    27ec:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    27f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    27f4:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    27f8:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    27fc:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2800:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    2804:	d1fa      	bne.n	27fc <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2806:	b281      	uxth	r1, r0
    2808:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    280c:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2810:	42b9      	cmp	r1, r7
    2812:	f200 80b4 	bhi.w	297e <isr+0x1da>
    2816:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    281a:	f080 81e9 	bcs.w	2bf0 <isr+0x44c>
    281e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    2822:	f000 816b 	beq.w	2afc <isr+0x358>
    2826:	f200 80f0 	bhi.w	2a0a <isr+0x266>
    282a:	2980      	cmp	r1, #128	; 0x80
    282c:	f000 8159 	beq.w	2ae2 <isr+0x33e>
    2830:	2982      	cmp	r1, #130	; 0x82
    2832:	f040 80e2 	bne.w	29fa <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2836:	b292      	uxth	r2, r2
    2838:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    283c:	2907      	cmp	r1, #7
    283e:	f200 80dc 	bhi.w	29fa <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2842:	0089      	lsls	r1, r1, #2
    2844:	4887      	ldr	r0, [pc, #540]	; (2a64 <isr+0x2c0>)
		reply_buffer[0] = 0;
    2846:	4f88      	ldr	r7, [pc, #544]	; (2a68 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2848:	4408      	add	r0, r1
    284a:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    284c:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    284e:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    2850:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2852:	f140 820c 	bpl.w	2c6e <isr+0x4ca>
    2856:	03ca      	lsls	r2, r1, #15
    2858:	d501      	bpl.n	285e <isr+0xba>
			reply_buffer[0] = 1;
    285a:	2301      	movs	r3, #1
    285c:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    285e:	2102      	movs	r1, #2
    2860:	4881      	ldr	r0, [pc, #516]	; (2a68 <isr+0x2c4>)
    2862:	f7ff ff4f 	bl	2704 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2866:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    286a:	2b00      	cmp	r3, #0
    286c:	d1b0      	bne.n	27d0 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    286e:	4a7b      	ldr	r2, [pc, #492]	; (2a5c <isr+0x2b8>)
    2870:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    2874:	2b00      	cmp	r3, #0
    2876:	d150      	bne.n	291a <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    2878:	f018 0f40 	tst.w	r8, #64	; 0x40
    287c:	d018      	beq.n	28b0 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    287e:	4b77      	ldr	r3, [pc, #476]	; (2a5c <isr+0x2b8>)
    2880:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2884:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2886:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    288a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    288e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2892:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    2896:	4b71      	ldr	r3, [pc, #452]	; (2a5c <isr+0x2b8>)
    2898:	2c00      	cmp	r4, #0
    289a:	d1fa      	bne.n	2892 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    289c:	f04f 32ff 	mov.w	r2, #4294967295
    28a0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    28a4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    28a8:	f000 fd1e 	bl	32e8 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    28ac:	4b6f      	ldr	r3, [pc, #444]	; (2a6c <isr+0x2c8>)
    28ae:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    28b0:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    28b4:	d003      	beq.n	28be <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    28b6:	4b6e      	ldr	r3, [pc, #440]	; (2a70 <isr+0x2cc>)
    28b8:	681b      	ldr	r3, [r3, #0]
    28ba:	b103      	cbz	r3, 28be <isr+0x11a>
    28bc:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    28be:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    28c2:	d003      	beq.n	28cc <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    28c4:	4b6b      	ldr	r3, [pc, #428]	; (2a74 <isr+0x2d0>)
    28c6:	681b      	ldr	r3, [r3, #0]
    28c8:	b103      	cbz	r3, 28cc <isr+0x128>
    28ca:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    28cc:	f018 0f04 	tst.w	r8, #4
    28d0:	d008      	beq.n	28e4 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    28d2:	4b62      	ldr	r3, [pc, #392]	; (2a5c <isr+0x2b8>)
    28d4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    28d8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    28dc:	d04c      	beq.n	2978 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    28de:	4b66      	ldr	r3, [pc, #408]	; (2a78 <isr+0x2d4>)
    28e0:	2201      	movs	r2, #1
    28e2:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    28e4:	4b5d      	ldr	r3, [pc, #372]	; (2a5c <isr+0x2b8>)
    28e6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    28ea:	0612      	lsls	r2, r2, #24
    28ec:	d512      	bpl.n	2914 <isr+0x170>
    28ee:	f018 0f80 	tst.w	r8, #128	; 0x80
    28f2:	d00f      	beq.n	2914 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    28f4:	4961      	ldr	r1, [pc, #388]	; (2a7c <isr+0x2d8>)
    28f6:	780a      	ldrb	r2, [r1, #0]
    28f8:	b162      	cbz	r2, 2914 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    28fa:	3a01      	subs	r2, #1
    28fc:	b2d2      	uxtb	r2, r2
    28fe:	700a      	strb	r2, [r1, #0]
    2900:	b942      	cbnz	r2, 2914 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    2902:	495f      	ldr	r1, [pc, #380]	; (2a80 <isr+0x2dc>)
    2904:	780a      	ldrb	r2, [r1, #0]
    2906:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    290a:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    290c:	2a00      	cmp	r2, #0
    290e:	f000 8232 	beq.w	2d76 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    2912:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    2914:	b003      	add	sp, #12
    2916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    291a:	495a      	ldr	r1, [pc, #360]	; (2a84 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    291c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2920:	6808      	ldr	r0, [r1, #0]
    2922:	4203      	tst	r3, r0
    2924:	f040 81e6 	bne.w	2cf4 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2928:	4a50      	ldr	r2, [pc, #320]	; (2a6c <isr+0x2c8>)
    292a:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    292c:	401d      	ands	r5, r3
    292e:	d0a3      	beq.n	2878 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    2930:	0c2f      	lsrs	r7, r5, #16
    2932:	d00f      	beq.n	2954 <isr+0x1b0>
    2934:	4e4a      	ldr	r6, [pc, #296]	; (2a60 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    2936:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    293a:	fa97 f4a7 	rbit	r4, r7
    293e:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2942:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    2946:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    294a:	3040      	adds	r0, #64	; 0x40
    294c:	f7ff febe 	bl	26cc <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    2950:	43a7      	bics	r7, r4
    2952:	d1f2      	bne.n	293a <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    2954:	b2ad      	uxth	r5, r5
				while(rx) {
    2956:	2d00      	cmp	r5, #0
    2958:	d08e      	beq.n	2878 <isr+0xd4>
    295a:	4e41      	ldr	r6, [pc, #260]	; (2a60 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    295c:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    295e:	fa95 f4a5 	rbit	r4, r5
    2962:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    2966:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    296a:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    296e:	f7ff fead 	bl	26cc <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    2972:	43a5      	bics	r5, r4
    2974:	d1f3      	bne.n	295e <isr+0x1ba>
    2976:	e77f      	b.n	2878 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    2978:	4a3f      	ldr	r2, [pc, #252]	; (2a78 <isr+0x2d4>)
    297a:	7013      	strb	r3, [r2, #0]
    297c:	e7b2      	b.n	28e4 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    297e:	f242 0721 	movw	r7, #8225	; 0x2021
    2982:	42b9      	cmp	r1, r7
    2984:	d035      	beq.n	29f2 <isr+0x24e>
    2986:	f200 8089 	bhi.w	2a9c <isr+0x2f8>
    298a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    298e:	f000 8121 	beq.w	2bd4 <isr+0x430>
    2992:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    2996:	d130      	bne.n	29fa <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2998:	f3c0 4007 	ubfx	r0, r0, #16, #8
    299c:	4a3a      	ldr	r2, [pc, #232]	; (2a88 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    299e:	493b      	ldr	r1, [pc, #236]	; (2a8c <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    29a0:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    29a2:	4f3b      	ldr	r7, [pc, #236]	; (2a90 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    29a4:	4a3b      	ldr	r2, [pc, #236]	; (2a94 <isr+0x2f0>)
    29a6:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    29a8:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    29ac:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    29b0:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    29b4:	f000 fc9a 	bl	32ec <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    29b8:	4a37      	ldr	r2, [pc, #220]	; (2a98 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    29ba:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    29bc:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    29be:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    29c0:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    29c2:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    29c4:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    29c6:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    29c8:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    29cc:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    29d0:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    29d2:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    29d6:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    29da:	4a2a      	ldr	r2, [pc, #168]	; (2a84 <isr+0x2e0>)
    29dc:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    29de:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    29e2:	2b00      	cmp	r3, #0
    29e4:	d1fb      	bne.n	29de <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    29e6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    29ea:	2b00      	cmp	r3, #0
    29ec:	f47f aef0 	bne.w	27d0 <isr+0x2c>
    29f0:	e73d      	b.n	286e <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    29f2:	0c11      	lsrs	r1, r2, #16
    29f4:	2907      	cmp	r1, #7
    29f6:	f000 813e 	beq.w	2c76 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    29fa:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    29fe:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2a02:	2b00      	cmp	r3, #0
    2a04:	f47f aee4 	bne.w	27d0 <isr+0x2c>
    2a08:	e731      	b.n	286e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2a0a:	f240 3702 	movw	r7, #770	; 0x302
    2a0e:	42b9      	cmp	r1, r7
    2a10:	f000 80b0 	beq.w	2b74 <isr+0x3d0>
    2a14:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    2a18:	d1ef      	bne.n	29fa <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a1a:	4a1f      	ldr	r2, [pc, #124]	; (2a98 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a1c:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a1e:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2a20:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2a22:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2a24:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2a26:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2a28:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2a2c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2a30:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2a32:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    2a36:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2a3a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d1fb      	bne.n	2a3a <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2a42:	0c03      	lsrs	r3, r0, #16
    2a44:	065b      	lsls	r3, r3, #25
    2a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2a4a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2a4e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2a52:	2b00      	cmp	r3, #0
    2a54:	f47f aebc 	bne.w	27d0 <isr+0x2c>
    2a58:	e709      	b.n	286e <isr+0xca>
    2a5a:	bf00      	nop
    2a5c:	402e0000 	.word	0x402e0000
    2a60:	20009000 	.word	0x20009000
    2a64:	402e01c0 	.word	0x402e01c0
    2a68:	20007500 	.word	0x20007500
    2a6c:	200074e0 	.word	0x200074e0
    2a70:	200074dc 	.word	0x200074dc
    2a74:	200074e8 	.word	0x200074e8
    2a78:	200074ec 	.word	0x200074ec
    2a7c:	200074f4 	.word	0x200074f4
    2a80:	200074e4 	.word	0x200074e4
    2a84:	200074f0 	.word	0x200074f0
    2a88:	20007510 	.word	0x20007510
    2a8c:	000200c8 	.word	0x000200c8
    2a90:	00cc0002 	.word	0x00cc0002
    2a94:	00c80002 	.word	0x00c80002
    2a98:	20008020 	.word	0x20008020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2a9c:	f242 2321 	movw	r3, #8737	; 0x2221
    2aa0:	4299      	cmp	r1, r3
    2aa2:	d05b      	beq.n	2b5c <isr+0x3b8>
    2aa4:	f242 3321 	movw	r3, #8993	; 0x2321
    2aa8:	4299      	cmp	r1, r3
    2aaa:	d1a6      	bne.n	29fa <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2aac:	4bb5      	ldr	r3, [pc, #724]	; (2d84 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2aae:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2ab0:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2ab2:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2ab4:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2ab6:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ab8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2aba:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2abc:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2ac0:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ac4:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2ac6:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2aca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2ace:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d1fb      	bne.n	2ace <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2ad6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2ada:	2b00      	cmp	r3, #0
    2adc:	f47f ae78 	bne.w	27d0 <isr+0x2c>
    2ae0:	e6c5      	b.n	286e <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2ae2:	4aa9      	ldr	r2, [pc, #676]	; (2d88 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    2ae4:	2102      	movs	r1, #2
    2ae6:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2ae8:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    2aea:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    2aec:	f7ff fe0a 	bl	2704 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2af0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2af4:	2b00      	cmp	r3, #0
    2af6:	f47f ae6b 	bne.w	27d0 <isr+0x2c>
    2afa:	e6b8      	b.n	286e <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2afc:	b292      	uxth	r2, r2
    2afe:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2b02:	2b07      	cmp	r3, #7
    2b04:	f63f af79 	bhi.w	29fa <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2b08:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2b0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b10:	4a9e      	ldr	r2, [pc, #632]	; (2d8c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2b12:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b16:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2b1a:	441a      	add	r2, r3
    2b1c:	6813      	ldr	r3, [r2, #0]
    2b1e:	bf14      	ite	ne
    2b20:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2b24:	f023 0301 	biceq.w	r3, r3, #1
    2b28:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b2a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b2c:	4b95      	ldr	r3, [pc, #596]	; (2d84 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2b2e:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2b30:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b32:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2b34:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2b36:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2b3a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2b3e:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2b40:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2b44:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2b48:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d1fb      	bne.n	2b48 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2b50:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2b54:	2b00      	cmp	r3, #0
    2b56:	f47f ae3b 	bne.w	27d0 <isr+0x2c>
    2b5a:	e688      	b.n	286e <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    2b5c:	b292      	uxth	r2, r2
    2b5e:	2a00      	cmp	r2, #0
    2b60:	d1a4      	bne.n	2aac <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2b62:	4b8b      	ldr	r3, [pc, #556]	; (2d90 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    2b64:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2b68:	4a8a      	ldr	r2, [pc, #552]	; (2d94 <isr+0x5f0>)
    2b6a:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2b6c:	4b8a      	ldr	r3, [pc, #552]	; (2d98 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2b6e:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    2b70:	7018      	strb	r0, [r3, #0]
    2b72:	e79b      	b.n	2aac <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2b74:	b292      	uxth	r2, r2
    2b76:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2b7a:	2b07      	cmp	r3, #7
    2b7c:	f63f af3d 	bhi.w	29fa <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2b80:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2b84:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b88:	4a80      	ldr	r2, [pc, #512]	; (2d8c <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2b8a:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2b8e:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    2b92:	441a      	add	r2, r3
    2b94:	6813      	ldr	r3, [r2, #0]
    2b96:	bf14      	ite	ne
    2b98:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    2b9c:	f043 0301 	orreq.w	r3, r3, #1
    2ba0:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ba2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2ba4:	4b77      	ldr	r3, [pc, #476]	; (2d84 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2ba6:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2ba8:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2baa:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2bac:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2bae:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2bb2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2bb6:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2bb8:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    2bbc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2bc0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d1fb      	bne.n	2bc0 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2bc8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2bcc:	2b00      	cmp	r3, #0
    2bce:	f47f adff 	bne.w	27d0 <isr+0x2c>
    2bd2:	e64c      	b.n	286e <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2bd4:	4a71      	ldr	r2, [pc, #452]	; (2d9c <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    2bd6:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2bd8:	4b6b      	ldr	r3, [pc, #428]	; (2d88 <isr+0x5e4>)
    2bda:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2bdc:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2bde:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    2be0:	f7ff fd90 	bl	2704 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2be4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2be8:	2b00      	cmp	r3, #0
    2bea:	f47f adf1 	bne.w	27d0 <isr+0x2c>
    2bee:	e63e      	b.n	286e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2bf0:	4b6b      	ldr	r3, [pc, #428]	; (2da0 <isr+0x5fc>)
    2bf2:	6859      	ldr	r1, [r3, #4]
    2bf4:	2900      	cmp	r1, #0
    2bf6:	f43f af00 	beq.w	29fa <isr+0x256>
    2bfa:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2bfc:	fa1f fe82 	uxth.w	lr, r2
    2c00:	e004      	b.n	2c0c <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    2c02:	330c      	adds	r3, #12
    2c04:	6859      	ldr	r1, [r3, #4]
    2c06:	2900      	cmp	r1, #0
    2c08:	f43f aef7 	beq.w	29fa <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2c0c:	881f      	ldrh	r7, [r3, #0]
    2c0e:	4287      	cmp	r7, r0
    2c10:	d1f7      	bne.n	2c02 <isr+0x45e>
    2c12:	885f      	ldrh	r7, [r3, #2]
    2c14:	4577      	cmp	r7, lr
    2c16:	d1f4      	bne.n	2c02 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    2c18:	0a07      	lsrs	r7, r0, #8
    2c1a:	2f03      	cmp	r7, #3
    2c1c:	f000 80e9 	beq.w	2df2 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    2c20:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2c22:	0c12      	lsrs	r2, r2, #16
    2c24:	4293      	cmp	r3, r2
    2c26:	bf28      	it	cs
    2c28:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    2c2a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    2c2e:	f000 80d1 	beq.w	2dd4 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    2c32:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    2c36:	f000 808b 	beq.w	2d50 <isr+0x5ac>
    2c3a:	4f5a      	ldr	r7, [pc, #360]	; (2da4 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    2c3c:	461a      	mov	r2, r3
    2c3e:	9301      	str	r3, [sp, #4]
    2c40:	4638      	mov	r0, r7
    2c42:	f7ff f843 	bl	1ccc <memcpy>
    2c46:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2c48:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2c4c:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    2c4e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2c52:	4955      	ldr	r1, [pc, #340]	; (2da8 <isr+0x604>)
    2c54:	600a      	str	r2, [r1, #0]
		location += 32;
    2c56:	3220      	adds	r2, #32
	} while (location < end_addr);
    2c58:	4297      	cmp	r7, r2
    2c5a:	d8fa      	bhi.n	2c52 <isr+0x4ae>
	asm("dsb");
    2c5c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2c60:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    2c64:	484f      	ldr	r0, [pc, #316]	; (2da4 <isr+0x600>)
    2c66:	4619      	mov	r1, r3
    2c68:	f7ff fd4c 	bl	2704 <endpoint0_transmit.constprop.1>
    2c6c:	e5fb      	b.n	2866 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2c6e:	07cb      	lsls	r3, r1, #31
    2c70:	f57f adf5 	bpl.w	285e <isr+0xba>
    2c74:	e5f1      	b.n	285a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2c76:	4f4d      	ldr	r7, [pc, #308]	; (2dac <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2c78:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    2c7c:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2c7e:	494c      	ldr	r1, [pc, #304]	; (2db0 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2c80:	4b4c      	ldr	r3, [pc, #304]	; (2db4 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2c82:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2c84:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2c88:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    2c8a:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    2c8c:	494a      	ldr	r1, [pc, #296]	; (2db8 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2c8e:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    2c92:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2c94:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2c98:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2c9c:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2c9e:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2ca2:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2ca6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    2caa:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2cae:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2cb0:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2cb4:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2cb6:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    2cb8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d1fb      	bne.n	2cb8 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    2cc0:	4a30      	ldr	r2, [pc, #192]	; (2d84 <isr+0x5e0>)
    2cc2:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2cc4:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2cc8:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2cca:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2ccc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2cd0:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2cd2:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2cd4:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2cd8:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2cdc:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2cde:	ea41 0300 	orr.w	r3, r1, r0
    2ce2:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2ce6:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    2cea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d1fb      	bne.n	2cea <isr+0x546>
    2cf2:	e5b8      	b.n	2866 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2cf4:	482d      	ldr	r0, [pc, #180]	; (2dac <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2cf6:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    2cfa:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2cfc:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    2cfe:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2d00:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    2d02:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    2d04:	f47f ae10 	bne.w	2928 <isr+0x184>
    2d08:	b281      	uxth	r1, r0
    2d0a:	2900      	cmp	r1, #0
    2d0c:	f47f ae0c 	bne.w	2928 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2d10:	4929      	ldr	r1, [pc, #164]	; (2db8 <isr+0x614>)
    2d12:	4c2a      	ldr	r4, [pc, #168]	; (2dbc <isr+0x618>)
    2d14:	c903      	ldmia	r1, {r0, r1}
    2d16:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2d18:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    2d1a:	6020      	str	r0, [r4, #0]
    2d1c:	80a1      	strh	r1, [r4, #4]
    2d1e:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    2d20:	f47f ae02 	bne.w	2928 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    2d24:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    2d26:	4826      	ldr	r0, [pc, #152]	; (2dc0 <isr+0x61c>)
    2d28:	7801      	ldrb	r1, [r0, #0]
    2d2a:	f041 0104 	orr.w	r1, r1, #4
    2d2e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    2d30:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    2d34:	0608      	lsls	r0, r1, #24
    2d36:	d406      	bmi.n	2d46 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2d38:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    2d3c:	2080      	movs	r0, #128	; 0x80
    2d3e:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    2d42:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    2d46:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    2d48:	4a1e      	ldr	r2, [pc, #120]	; (2dc4 <isr+0x620>)
    2d4a:	2150      	movs	r1, #80	; 0x50
    2d4c:	7011      	strb	r1, [r2, #0]
    2d4e:	e5eb      	b.n	2928 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    2d50:	481d      	ldr	r0, [pc, #116]	; (2dc8 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2d52:	461a      	mov	r2, r3
    2d54:	4f13      	ldr	r7, [pc, #76]	; (2da4 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    2d56:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    2d5a:	491c      	ldr	r1, [pc, #112]	; (2dcc <isr+0x628>)
    2d5c:	481c      	ldr	r0, [pc, #112]	; (2dd0 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    2d5e:	9301      	str	r3, [sp, #4]
    2d60:	f1be 0f00 	cmp.w	lr, #0
    2d64:	bf08      	it	eq
    2d66:	4601      	moveq	r1, r0
    2d68:	4638      	mov	r0, r7
    2d6a:	f7fe ffaf 	bl	1ccc <memcpy>
					usb_descriptor_buffer[1] = 7;
    2d6e:	2207      	movs	r2, #7
    2d70:	9b01      	ldr	r3, [sp, #4]
    2d72:	707a      	strb	r2, [r7, #1]
    2d74:	e768      	b.n	2c48 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    2d76:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2d7e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    2d82:	e5c6      	b.n	2912 <isr+0x16e>
    2d84:	20008020 	.word	0x20008020
    2d88:	20007500 	.word	0x20007500
    2d8c:	402e01c0 	.word	0x402e01c0
    2d90:	200074c8 	.word	0x200074c8
    2d94:	20009288 	.word	0x20009288
    2d98:	20007668 	.word	0x20007668
    2d9c:	20007510 	.word	0x20007510
    2da0:	20000cbc 	.word	0x20000cbc
    2da4:	20200a40 	.word	0x20200a40
    2da8:	e000ef70 	.word	0xe000ef70
    2dac:	200074f8 	.word	0x200074f8
    2db0:	00070080 	.word	0x00070080
    2db4:	20008000 	.word	0x20008000
    2db8:	20007508 	.word	0x20007508
    2dbc:	20009280 	.word	0x20009280
    2dc0:	200074e4 	.word	0x200074e4
    2dc4:	200074f4 	.word	0x200074f4
    2dc8:	200074ec 	.word	0x200074ec
    2dcc:	60001720 	.word	0x60001720
    2dd0:	60001764 	.word	0x60001764

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    2dd4:	480a      	ldr	r0, [pc, #40]	; (2e00 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    2dd6:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2dd8:	490a      	ldr	r1, [pc, #40]	; (2e04 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    2dda:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    2ddc:	480a      	ldr	r0, [pc, #40]	; (2e08 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    2dde:	9301      	str	r3, [sp, #4]
    2de0:	2f00      	cmp	r7, #0
    2de2:	bf08      	it	eq
    2de4:	4601      	moveq	r1, r0
    2de6:	4809      	ldr	r0, [pc, #36]	; (2e0c <isr+0x668>)
    2de8:	f7fe ff70 	bl	1ccc <memcpy>
    2dec:	4f07      	ldr	r7, [pc, #28]	; (2e0c <isr+0x668>)
    2dee:	9b01      	ldr	r3, [sp, #4]
    2df0:	e72a      	b.n	2c48 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    2df2:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    2df4:	780b      	ldrb	r3, [r1, #0]
    2df6:	4293      	cmp	r3, r2
    2df8:	bf28      	it	cs
    2dfa:	4613      	movcs	r3, r2
    2dfc:	e719      	b.n	2c32 <isr+0x48e>
    2dfe:	bf00      	nop
    2e00:	200074ec 	.word	0x200074ec
    2e04:	60001764 	.word	0x60001764
    2e08:	60001720 	.word	0x60001720
    2e0c:	20200a40 	.word	0x20200a40

00002e10 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2e10:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2e12:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    2e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2e1a:	bf14      	ite	ne
    2e1c:	2700      	movne	r7, #0
    2e1e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2e22:	2a02      	cmp	r2, #2
    2e24:	d901      	bls.n	2e2a <usb_config_rx+0x1a>
    2e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    2e2a:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    2e2e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2e70 <usb_config_rx+0x60>
    2e32:	460d      	mov	r5, r1
    2e34:	4604      	mov	r4, r0
    2e36:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2e3a:	2100      	movs	r1, #0
    2e3c:	2240      	movs	r2, #64	; 0x40
    2e3e:	4698      	mov	r8, r3
    2e40:	4630      	mov	r0, r6
    2e42:	f002 fa07 	bl	5254 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2e46:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    2e48:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    2e4c:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    2e50:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2e54:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    2e56:	f1b8 0f00 	cmp.w	r8, #0
    2e5a:	d0e4      	beq.n	2e26 <usb_config_rx+0x16>
    2e5c:	4b03      	ldr	r3, [pc, #12]	; (2e6c <usb_config_rx+0x5c>)
    2e5e:	40a0      	lsls	r0, r4
    2e60:	681c      	ldr	r4, [r3, #0]
    2e62:	4320      	orrs	r0, r4
    2e64:	6018      	str	r0, [r3, #0]
    2e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e6a:	bf00      	nop
    2e6c:	200074e0 	.word	0x200074e0
    2e70:	20009000 	.word	0x20009000

00002e74 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2e74:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2e76:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    2e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    2e7e:	bf14      	ite	ne
    2e80:	2700      	movne	r7, #0
    2e82:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    2e86:	2a02      	cmp	r2, #2
    2e88:	d901      	bls.n	2e8e <usb_config_tx+0x1a>
    2e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2e8e:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2e90:	01c5      	lsls	r5, r0, #7
    2e92:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2ed8 <usb_config_tx+0x64>
    2e96:	4688      	mov	r8, r1
    2e98:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2e9a:	2100      	movs	r1, #0
    2e9c:	4604      	mov	r4, r0
    2e9e:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    2ea0:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    2ea4:	4650      	mov	r0, sl
    2ea6:	f002 f9d5 	bl	5254 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2eaa:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    2eac:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    2eb0:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    2eb4:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    2eb8:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    2ebc:	2e00      	cmp	r6, #0
    2ebe:	d0e4      	beq.n	2e8a <usb_config_tx+0x16>
    2ec0:	f104 0010 	add.w	r0, r4, #16
    2ec4:	4b03      	ldr	r3, [pc, #12]	; (2ed4 <usb_config_tx+0x60>)
    2ec6:	4082      	lsls	r2, r0
    2ec8:	6818      	ldr	r0, [r3, #0]
    2eca:	4302      	orrs	r2, r0
    2ecc:	601a      	str	r2, [r3, #0]
    2ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ed2:	bf00      	nop
    2ed4:	200074e0 	.word	0x200074e0
    2ed8:	20009000 	.word	0x20009000

00002edc <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2edc:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    2ede:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    2ee0:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    2ee6:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    2ee8:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2eea:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2eec:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    2ef0:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    2ef4:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    2ef8:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    2efc:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    2efe:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    2f00:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    2f02:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    2f04:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    2f06:	bcf0      	pop	{r4, r5, r6, r7}
    2f08:	4770      	bx	lr
    2f0a:	bf00      	nop

00002f0c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2f0c:	1e83      	subs	r3, r0, #2
    2f0e:	2b02      	cmp	r3, #2
    2f10:	d900      	bls.n	2f14 <usb_transmit+0x8>
    2f12:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    2f14:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2f16:	4b06      	ldr	r3, [pc, #24]	; (2f30 <usb_transmit+0x24>)
    2f18:	f100 0410 	add.w	r4, r0, #16
    2f1c:	2501      	movs	r5, #1
    2f1e:	460a      	mov	r2, r1
    2f20:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    2f24:	fa05 f104 	lsl.w	r1, r5, r4
}
    2f28:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    2f2a:	f7ff bb97 	b.w	265c <schedule_transfer>
    2f2e:	bf00      	nop
    2f30:	20009040 	.word	0x20009040

00002f34 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    2f34:	1e83      	subs	r3, r0, #2
    2f36:	2b02      	cmp	r3, #2
    2f38:	d900      	bls.n	2f3c <usb_receive+0x8>
    2f3a:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    2f3c:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    2f3e:	4b05      	ldr	r3, [pc, #20]	; (2f54 <usb_receive+0x20>)
    2f40:	2401      	movs	r4, #1
    2f42:	460a      	mov	r2, r1
    2f44:	fa04 f100 	lsl.w	r1, r4, r0
    2f48:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    2f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    2f50:	f7ff bb84 	b.w	265c <schedule_transfer>
    2f54:	20009000 	.word	0x20009000

00002f58 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    2f58:	6840      	ldr	r0, [r0, #4]
#endif
}
    2f5a:	4770      	bx	lr

00002f5c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f5c:	4a12      	ldr	r2, [pc, #72]	; (2fa8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2f5e:	4b13      	ldr	r3, [pc, #76]	; (2fac <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f60:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    2f64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2f68:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    2f6a:	b510      	push	{r4, lr}
    2f6c:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2f6e:	d802      	bhi.n	2f76 <usb_init_serialnumber+0x1a>
    2f70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2f74:	0040      	lsls	r0, r0, #1
    2f76:	4c0e      	ldr	r4, [pc, #56]	; (2fb0 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    2f78:	a901      	add	r1, sp, #4
    2f7a:	220a      	movs	r2, #10
    2f7c:	f000 ff1e 	bl	3dbc <ultoa>
    2f80:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    2f82:	2300      	movs	r3, #0
    2f84:	4620      	mov	r0, r4
		char c = buf[i];
    2f86:	f811 2b01 	ldrb.w	r2, [r1], #1
    2f8a:	3301      	adds	r3, #1
		if (!c) break;
    2f8c:	b13a      	cbz	r2, 2f9e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2f8e:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    2f90:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2f94:	d1f7      	bne.n	2f86 <usb_init_serialnumber+0x2a>
    2f96:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2f98:	7023      	strb	r3, [r4, #0]
}
    2f9a:	b004      	add	sp, #16
    2f9c:	bd10      	pop	{r4, pc}
    2f9e:	005b      	lsls	r3, r3, #1
    2fa0:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2fa2:	7023      	strb	r3, [r4, #0]
}
    2fa4:	b004      	add	sp, #16
    2fa6:	bd10      	pop	{r4, pc}
    2fa8:	401f4400 	.word	0x401f4400
    2fac:	0098967f 	.word	0x0098967f
    2fb0:	20004874 	.word	0x20004874

00002fb4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2fb6:	4914      	ldr	r1, [pc, #80]	; (3008 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2fb8:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2fbc:	4d13      	ldr	r5, [pc, #76]	; (300c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    2fbe:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    2fc0:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2fc4:	4e12      	ldr	r6, [pc, #72]	; (3010 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2fc6:	4a13      	ldr	r2, [pc, #76]	; (3014 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2fc8:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    2fcc:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    2fce:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    2fd0:	4628      	mov	r0, r5
    2fd2:	8832      	ldrh	r2, [r6, #0]
    2fd4:	f7ff ff82 	bl	2edc <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2fd8:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2fda:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2fde:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    2fe0:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2fe4:	4a0c      	ldr	r2, [pc, #48]	; (3018 <rx_queue_transfer+0x64>)
    2fe6:	6013      	str	r3, [r2, #0]
		location += 32;
    2fe8:	3320      	adds	r3, #32
	} while (location < end_addr);
    2fea:	4299      	cmp	r1, r3
    2fec:	d8fb      	bhi.n	2fe6 <rx_queue_transfer+0x32>
	asm("dsb");
    2fee:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2ff2:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2ff6:	2003      	movs	r0, #3
    2ff8:	4629      	mov	r1, r5
    2ffa:	f7ff ff9b 	bl	2f34 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2ffe:	4b07      	ldr	r3, [pc, #28]	; (301c <rx_queue_transfer+0x68>)
    3000:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3004:	601a      	str	r2, [r3, #0]
    3006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3008:	20200aa0 	.word	0x20200aa0
    300c:	20007540 	.word	0x20007540
    3010:	2000764e 	.word	0x2000764e
    3014:	e000e18c 	.word	0xe000e18c
    3018:	e000ef5c 	.word	0xe000ef5c
    301c:	e000e10c 	.word	0xe000e10c

00003020 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3020:	4a24      	ldr	r2, [pc, #144]	; (30b4 <rx_event+0x94>)
    3022:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    3024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3028:	f3c3 430e 	ubfx	r3, r3, #16, #15
    302c:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    302e:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3030:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    3032:	2c00      	cmp	r4, #0
    3034:	dd38      	ble.n	30a8 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    3036:	4920      	ldr	r1, [pc, #128]	; (30b8 <rx_event+0x98>)
		if (head != rx_tail) {
    3038:	4a20      	ldr	r2, [pc, #128]	; (30bc <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    303a:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    303c:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    303e:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    3040:	481f      	ldr	r0, [pc, #124]	; (30c0 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    3042:	4e20      	ldr	r6, [pc, #128]	; (30c4 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    3044:	4293      	cmp	r3, r2
    3046:	d007      	beq.n	3058 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    3048:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    304c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    3050:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    3054:	4294      	cmp	r4, r2
    3056:	d912      	bls.n	307e <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    3058:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    305a:	2200      	movs	r2, #0
    305c:	4f1a      	ldr	r7, [pc, #104]	; (30c8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    305e:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    3060:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    3064:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    3068:	4e18      	ldr	r6, [pc, #96]	; (30cc <rx_event+0xac>)
    306a:	bf94      	ite	ls
    306c:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    306e:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    3070:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    3072:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    3074:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    3076:	4414      	add	r4, r2
    3078:	6034      	str	r4, [r6, #0]
    307a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    307e:	4b14      	ldr	r3, [pc, #80]	; (30d0 <rx_event+0xb0>)
    3080:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    3084:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    3086:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3088:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    308c:	4418      	add	r0, r3
    308e:	f7fe fe1d 	bl	1ccc <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    3092:	4a0e      	ldr	r2, [pc, #56]	; (30cc <rx_event+0xac>)
				rx_queue_transfer(i);
    3094:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    3096:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    309a:	6813      	ldr	r3, [r2, #0]
    309c:	441c      	add	r4, r3
    309e:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    30a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    30a4:	f7ff bf86 	b.w	2fb4 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    30a8:	4628      	mov	r0, r5
	}
}
    30aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    30ae:	f7ff bf81 	b.w	2fb4 <rx_queue_transfer>
    30b2:	bf00      	nop
    30b4:	2000764e 	.word	0x2000764e
    30b8:	20007664 	.word	0x20007664
    30bc:	20007640 	.word	0x20007640
    30c0:	20007644 	.word	0x20007644
    30c4:	20007650 	.word	0x20007650
    30c8:	20007514 	.word	0x20007514
    30cc:	20007660 	.word	0x20007660
    30d0:	20200aa0 	.word	0x20200aa0

000030d4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    30d4:	4b1e      	ldr	r3, [pc, #120]	; (3150 <usb_serial_flush_callback+0x7c>)
    30d6:	781a      	ldrb	r2, [r3, #0]
    30d8:	b95a      	cbnz	r2, 30f2 <usb_serial_flush_callback+0x1e>
    30da:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    30de:	4a1d      	ldr	r2, [pc, #116]	; (3154 <usb_serial_flush_callback+0x80>)
    30e0:	7812      	ldrb	r2, [r2, #0]
    30e2:	b132      	cbz	r2, 30f2 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    30e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    30e8:	4d1b      	ldr	r5, [pc, #108]	; (3158 <usb_serial_flush_callback+0x84>)
    30ea:	882a      	ldrh	r2, [r5, #0]
    30ec:	b912      	cbnz	r2, 30f4 <usb_serial_flush_callback+0x20>
    30ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30f2:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    30f4:	4e19      	ldr	r6, [pc, #100]	; (315c <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    30f6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    30fa:	4f19      	ldr	r7, [pc, #100]	; (3160 <usb_serial_flush_callback+0x8c>)
    30fc:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    30fe:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3100:	4c18      	ldr	r4, [pc, #96]	; (3164 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3102:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3106:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    310a:	4638      	mov	r0, r7
    310c:	4621      	mov	r1, r4
    310e:	f7ff fee5 	bl	2edc <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3112:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3116:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    311a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    311e:	4b12      	ldr	r3, [pc, #72]	; (3168 <usb_serial_flush_callback+0x94>)
    3120:	6019      	str	r1, [r3, #0]
		location += 32;
    3122:	3120      	adds	r1, #32
	} while (location < end_addr);
    3124:	428a      	cmp	r2, r1
    3126:	d8fb      	bhi.n	3120 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    3128:	f3bf 8f4f 	dsb	sy
	asm("isb");
    312c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3130:	2004      	movs	r0, #4
    3132:	4639      	mov	r1, r7
    3134:	f7ff feea 	bl	2f0c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3138:	7833      	ldrb	r3, [r6, #0]
    313a:	4a08      	ldr	r2, [pc, #32]	; (315c <usb_serial_flush_callback+0x88>)
    313c:	3301      	adds	r3, #1
    313e:	b2db      	uxtb	r3, r3
    3140:	2b03      	cmp	r3, #3
    3142:	bf88      	it	hi
    3144:	2300      	movhi	r3, #0
    3146:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    3148:	2300      	movs	r3, #0
    314a:	802b      	strh	r3, [r5, #0]
    314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3150:	20007526 	.word	0x20007526
    3154:	20007510 	.word	0x20007510
    3158:	20007666 	.word	0x20007666
    315c:	20007527 	.word	0x20007527
    3160:	20007680 	.word	0x20007680
    3164:	20201aa0 	.word	0x20201aa0
    3168:	e000ef70 	.word	0xe000ef70

0000316c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3170:	b085      	sub	sp, #20
    3172:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    3174:	9101      	str	r1, [sp, #4]
    3176:	2900      	cmp	r1, #0
    3178:	f000 80a2 	beq.w	32c0 <usb_serial_write.part.1+0x154>
    317c:	2300      	movs	r3, #0
    317e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 32dc <usb_serial_write.part.1+0x170>
    3182:	f8df 914c 	ldr.w	r9, [pc, #332]	; 32d0 <usb_serial_write.part.1+0x164>
    3186:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    3188:	4e4e      	ldr	r6, [pc, #312]	; (32c4 <usb_serial_write.part.1+0x158>)
    318a:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    318e:	f8df a150 	ldr.w	sl, [pc, #336]	; 32e0 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    3192:	f8df b150 	ldr.w	fp, [pc, #336]	; 32e4 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    3196:	4a4c      	ldr	r2, [pc, #304]	; (32c8 <usb_serial_write.part.1+0x15c>)
    3198:	7814      	ldrb	r4, [r2, #0]
    319a:	4a4c      	ldr	r2, [pc, #304]	; (32cc <usb_serial_write.part.1+0x160>)
    319c:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    31a0:	2b00      	cmp	r3, #0
    31a2:	d16e      	bne.n	3282 <usb_serial_write.part.1+0x116>
    31a4:	461d      	mov	r5, r3
    31a6:	461c      	mov	r4, r3
    31a8:	e014      	b.n	31d4 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    31aa:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    31ae:	b904      	cbnz	r4, 31b2 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    31b0:	6835      	ldr	r5, [r6, #0]
    31b2:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    31b4:	2b00      	cmp	r3, #0
    31b6:	d15e      	bne.n	3276 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    31b8:	6833      	ldr	r3, [r6, #0]
    31ba:	1b5b      	subs	r3, r3, r5
    31bc:	2b78      	cmp	r3, #120	; 0x78
    31be:	d879      	bhi.n	32b4 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    31c0:	f89a 3000 	ldrb.w	r3, [sl]
    31c4:	2b00      	cmp	r3, #0
    31c6:	d056      	beq.n	3276 <usb_serial_write.part.1+0x10a>
			yield();
    31c8:	f000 fda8 	bl	3d1c <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    31cc:	f8b8 3000 	ldrh.w	r3, [r8]
    31d0:	2b00      	cmp	r3, #0
    31d2:	d154      	bne.n	327e <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    31d4:	4638      	mov	r0, r7
    31d6:	f7ff febf 	bl	2f58 <usb_transfer_status>
			if (!(status & 0x80)) {
    31da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    31de:	4a3c      	ldr	r2, [pc, #240]	; (32d0 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    31e0:	d1e3      	bne.n	31aa <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    31e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    31e6:	4a38      	ldr	r2, [pc, #224]	; (32c8 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    31e8:	f889 0000 	strb.w	r0, [r9]
    31ec:	7814      	ldrb	r4, [r2, #0]
    31ee:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    31f0:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    31f4:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    31f6:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    31f8:	4936      	ldr	r1, [pc, #216]	; (32d4 <usb_serial_write.part.1+0x168>)
    31fa:	4420      	add	r0, r4
		if (size >= tx_available) {
    31fc:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    31fe:	4408      	add	r0, r1
		if (size >= tx_available) {
    3200:	d343      	bcc.n	328a <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3202:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    3204:	9902      	ldr	r1, [sp, #8]
    3206:	f7fe fd61 	bl	1ccc <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    320a:	2300      	movs	r3, #0
    320c:	4621      	mov	r1, r4
    320e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3212:	4638      	mov	r0, r7
    3214:	f7ff fe62 	bl	2edc <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3218:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    321c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    3220:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3224:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    3228:	3320      	adds	r3, #32
	} while (location < end_addr);
    322a:	429c      	cmp	r4, r3
    322c:	d8fa      	bhi.n	3224 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    322e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3232:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    3236:	2004      	movs	r0, #4
    3238:	4639      	mov	r1, r7
    323a:	f7ff fe67 	bl	2f0c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    323e:	4b22      	ldr	r3, [pc, #136]	; (32c8 <usb_serial_write.part.1+0x15c>)
    3240:	4a21      	ldr	r2, [pc, #132]	; (32c8 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    3242:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    3244:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    3246:	4824      	ldr	r0, [pc, #144]	; (32d8 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    3248:	3301      	adds	r3, #1
    324a:	b2db      	uxtb	r3, r3
    324c:	2b03      	cmp	r3, #3
    324e:	bf88      	it	hi
    3250:	2300      	movhi	r3, #0
    3252:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    3254:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    3258:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    325a:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    325e:	4413      	add	r3, r2
    3260:	9300      	str	r3, [sp, #0]
			data += tx_available;
    3262:	9b02      	ldr	r3, [sp, #8]
    3264:	4413      	add	r3, r2
    3266:	9302      	str	r3, [sp, #8]
    3268:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    326a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    326e:	9901      	ldr	r1, [sp, #4]
    3270:	1a8a      	subs	r2, r1, r2
    3272:	9201      	str	r2, [sp, #4]
    3274:	d18f      	bne.n	3196 <usb_serial_write.part.1+0x2a>
    3276:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    3278:	b005      	add	sp, #20
    327a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    327e:	4a12      	ldr	r2, [pc, #72]	; (32c8 <usb_serial_write.part.1+0x15c>)
    3280:	7814      	ldrb	r4, [r2, #0]
    3282:	461a      	mov	r2, r3
    3284:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3288:	e7b4      	b.n	31f4 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    328a:	9c01      	ldr	r4, [sp, #4]
    328c:	9902      	ldr	r1, [sp, #8]
    328e:	4622      	mov	r2, r4
    3290:	9303      	str	r3, [sp, #12]
    3292:	f7fe fd1b 	bl	1ccc <memcpy>
			tx_available -= size;
    3296:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3298:	4a0f      	ldr	r2, [pc, #60]	; (32d8 <usb_serial_write.part.1+0x16c>)
    329a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    329e:	1b1b      	subs	r3, r3, r4
    32a0:	f8a8 3000 	strh.w	r3, [r8]
    32a4:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    32a6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    32aa:	4618      	mov	r0, r3
    32ac:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    32ae:	b005      	add	sp, #20
    32b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    32b4:	2301      	movs	r3, #1
				return sent;
    32b6:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    32b8:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    32ba:	b005      	add	sp, #20
    32bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    32c0:	9801      	ldr	r0, [sp, #4]
    32c2:	e7d9      	b.n	3278 <usb_serial_write.part.1+0x10c>
    32c4:	200074c8 	.word	0x200074c8
    32c8:	20007527 	.word	0x20007527
    32cc:	20007680 	.word	0x20007680
    32d0:	20007665 	.word	0x20007665
    32d4:	20201aa0 	.word	0x20201aa0
    32d8:	402e0000 	.word	0x402e0000
    32dc:	20007666 	.word	0x20007666
    32e0:	20007510 	.word	0x20007510
    32e4:	e000ef70 	.word	0xe000ef70

000032e8 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    32e8:	4770      	bx	lr
    32ea:	bf00      	nop

000032ec <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    32ec:	4b31      	ldr	r3, [pc, #196]	; (33b4 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    32ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    32f2:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    32f4:	4f30      	ldr	r7, [pc, #192]	; (33b8 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    32f6:	2b00      	cmp	r3, #0
    32f8:	d054      	beq.n	33a4 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    32fa:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    32fe:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 33ec <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    3302:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    3304:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3308:	2100      	movs	r1, #0
    330a:	2280      	movs	r2, #128	; 0x80
    330c:	482b      	ldr	r0, [pc, #172]	; (33bc <usb_serial_configure+0xd0>)
	tx_head = 0;
    330e:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3310:	4e2b      	ldr	r6, [pc, #172]	; (33c0 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3312:	f001 ff9f 	bl	5254 <memset>
	tx_head = 0;
    3316:	4c2b      	ldr	r4, [pc, #172]	; (33c4 <usb_serial_configure+0xd8>)
	tx_available = 0;
    3318:	4b2b      	ldr	r3, [pc, #172]	; (33c8 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    331a:	4629      	mov	r1, r5
    331c:	f44f 7280 	mov.w	r2, #256	; 0x100
    3320:	482a      	ldr	r0, [pc, #168]	; (33cc <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    3322:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3324:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    3326:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3328:	f001 ff94 	bl	5254 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    332c:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    332e:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3330:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3332:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3334:	60b5      	str	r5, [r6, #8]
    3336:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3338:	4925      	ldr	r1, [pc, #148]	; (33d0 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    333a:	4e26      	ldr	r6, [pc, #152]	; (33d4 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    333c:	4826      	ldr	r0, [pc, #152]	; (33d8 <usb_serial_configure+0xec>)
	rx_available = 0;
    333e:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 33f0 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3342:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3344:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    3346:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3348:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    334a:	6035      	str	r5, [r6, #0]
    334c:	6075      	str	r5, [r6, #4]
    334e:	60b5      	str	r5, [r6, #8]
    3350:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    3352:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3356:	f7ff fd8d 	bl	2e74 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    335a:	f8b8 1000 	ldrh.w	r1, [r8]
    335e:	462a      	mov	r2, r5
    3360:	4b1e      	ldr	r3, [pc, #120]	; (33dc <usb_serial_configure+0xf0>)
    3362:	2003      	movs	r0, #3
    3364:	f7ff fd54 	bl	2e10 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3368:	462b      	mov	r3, r5
    336a:	8839      	ldrh	r1, [r7, #0]
    336c:	2201      	movs	r2, #1
    336e:	2004      	movs	r0, #4
    3370:	f7ff fd80 	bl	2e74 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3374:	4620      	mov	r0, r4
    3376:	3401      	adds	r4, #1
    3378:	f7ff fe1c 	bl	2fb4 <rx_queue_transfer>
    337c:	2c08      	cmp	r4, #8
    337e:	d1f9      	bne.n	3374 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    3380:	4b17      	ldr	r3, [pc, #92]	; (33e0 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    3382:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    3384:	4817      	ldr	r0, [pc, #92]	; (33e4 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    3386:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    3388:	4c17      	ldr	r4, [pc, #92]	; (33e8 <usb_serial_configure+0xfc>)
    338a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    338c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    3390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3394:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    3398:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    339c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    33a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    33a4:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    33a6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 33ec <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    33aa:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    33ac:	f8a8 3000 	strh.w	r3, [r8]
    33b0:	e7aa      	b.n	3308 <usb_serial_configure+0x1c>
    33b2:	bf00      	nop
    33b4:	200074ec 	.word	0x200074ec
    33b8:	20007524 	.word	0x20007524
    33bc:	20007680 	.word	0x20007680
    33c0:	20007650 	.word	0x20007650
    33c4:	20007527 	.word	0x20007527
    33c8:	20007666 	.word	0x20007666
    33cc:	20007540 	.word	0x20007540
    33d0:	20007664 	.word	0x20007664
    33d4:	20007514 	.word	0x20007514
    33d8:	20007640 	.word	0x20007640
    33dc:	00003021 	.word	0x00003021
    33e0:	402e0000 	.word	0x402e0000
    33e4:	200074dc 	.word	0x200074dc
    33e8:	000030d5 	.word	0x000030d5
    33ec:	2000764e 	.word	0x2000764e
    33f0:	20007660 	.word	0x20007660

000033f4 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    33f4:	4b31      	ldr	r3, [pc, #196]	; (34bc <usb_serial_read+0xc8>)
    33f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    33fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    33fe:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    3400:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    3402:	4b2f      	ldr	r3, [pc, #188]	; (34c0 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3404:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    3406:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3408:	2900      	cmp	r1, #0
    340a:	d053      	beq.n	34b4 <usb_serial_read+0xc0>
    340c:	4b2d      	ldr	r3, [pc, #180]	; (34c4 <usb_serial_read+0xd0>)
    340e:	b2e4      	uxtb	r4, r4
    3410:	781b      	ldrb	r3, [r3, #0]
    3412:	429c      	cmp	r4, r3
    3414:	d050      	beq.n	34b8 <usb_serial_read+0xc4>
    3416:	4682      	mov	sl, r0
    3418:	2700      	movs	r7, #0
    341a:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 34dc <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    341e:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3420:	4b29      	ldr	r3, [pc, #164]	; (34c8 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    3422:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3426:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    3428:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    342a:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    342c:	4b27      	ldr	r3, [pc, #156]	; (34cc <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    342e:	bf28      	it	cs
    3430:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    3432:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3434:	4b24      	ldr	r3, [pc, #144]	; (34c8 <usb_serial_read+0xd4>)
    3436:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    343a:	4b25      	ldr	r3, [pc, #148]	; (34d0 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    343c:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3440:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3444:	4b23      	ldr	r3, [pc, #140]	; (34d4 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3446:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    344a:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    344c:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    344e:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    3450:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    3452:	d219      	bcs.n	3488 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3454:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    3458:	4642      	mov	r2, r8
    345a:	4419      	add	r1, r3
    345c:	f7fe fc36 	bl	1ccc <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    3460:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    3462:	f8db 1000 	ldr.w	r1, [fp]
    3466:	4648      	mov	r0, r9
			rx_index[i] += len;
    3468:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    346c:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    3470:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    3472:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    3476:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    347a:	4b17      	ldr	r3, [pc, #92]	; (34d8 <usb_serial_read+0xe4>)
    347c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3480:	601a      	str	r2, [r3, #0]
	return count;
}
    3482:	b003      	add	sp, #12
    3484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3488:	f7fe fc20 	bl	1ccc <memcpy>
			p += avail;
			rx_available -= avail;
    348c:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    3490:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    3492:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    3494:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    3496:	44b2      	add	sl, r6
			rx_available -= avail;
    3498:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    349c:	4a08      	ldr	r2, [pc, #32]	; (34c0 <usb_serial_read+0xcc>)
    349e:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    34a0:	f7ff fd88 	bl	2fb4 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    34a4:	45b9      	cmp	r9, r7
    34a6:	d903      	bls.n	34b0 <usb_serial_read+0xbc>
    34a8:	4b06      	ldr	r3, [pc, #24]	; (34c4 <usb_serial_read+0xd0>)
    34aa:	781b      	ldrb	r3, [r3, #0]
    34ac:	429c      	cmp	r4, r3
    34ae:	d1b6      	bne.n	341e <usb_serial_read+0x2a>
    34b0:	4638      	mov	r0, r7
    34b2:	e7e2      	b.n	347a <usb_serial_read+0x86>
    34b4:	4608      	mov	r0, r1
    34b6:	e7e0      	b.n	347a <usb_serial_read+0x86>
    34b8:	2000      	movs	r0, #0
    34ba:	e7de      	b.n	347a <usb_serial_read+0x86>
    34bc:	e000e18c 	.word	0xe000e18c
    34c0:	20007640 	.word	0x20007640
    34c4:	20007664 	.word	0x20007664
    34c8:	20007514 	.word	0x20007514
    34cc:	20007644 	.word	0x20007644
    34d0:	20007650 	.word	0x20007650
    34d4:	20200aa0 	.word	0x20200aa0
    34d8:	e000e10c 	.word	0xe000e10c
    34dc:	20007660 	.word	0x20007660

000034e0 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    34e0:	4b0b      	ldr	r3, [pc, #44]	; (3510 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    34e2:	4a0c      	ldr	r2, [pc, #48]	; (3514 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    34e4:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    34e6:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    34e8:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    34ea:	4293      	cmp	r3, r2
    34ec:	d00d      	beq.n	350a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    34ee:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    34f0:	4809      	ldr	r0, [pc, #36]	; (3518 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    34f2:	4a0a      	ldr	r2, [pc, #40]	; (351c <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    34f4:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    34f6:	490a      	ldr	r1, [pc, #40]	; (3520 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    34f8:	bf28      	it	cs
    34fa:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    34fc:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    34fe:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    3502:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    3506:	5c58      	ldrb	r0, [r3, r1]
    3508:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    350a:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    350e:	4770      	bx	lr
    3510:	20007640 	.word	0x20007640
    3514:	20007664 	.word	0x20007664
    3518:	20007644 	.word	0x20007644
    351c:	20200aa0 	.word	0x20200aa0
    3520:	20007514 	.word	0x20007514

00003524 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    3524:	4b01      	ldr	r3, [pc, #4]	; (352c <usb_serial_available+0x8>)
    3526:	6818      	ldr	r0, [r3, #0]
}
    3528:	4770      	bx	lr
    352a:	bf00      	nop
    352c:	20007660 	.word	0x20007660

00003530 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    3530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    3534:	4e15      	ldr	r6, [pc, #84]	; (358c <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    3536:	4d16      	ldr	r5, [pc, #88]	; (3590 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    3538:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    353a:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    353c:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    353e:	429c      	cmp	r4, r3
    3540:	d021      	beq.n	3586 <usb_serial_flush_input+0x56>
    3542:	f8df 9054 	ldr.w	r9, [pc, #84]	; 3598 <usb_serial_flush_input+0x68>
    3546:	f8df b054 	ldr.w	fp, [pc, #84]	; 359c <usb_serial_flush_input+0x6c>
    354a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 35a0 <usb_serial_flush_input+0x70>
    354e:	4f11      	ldr	r7, [pc, #68]	; (3594 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    3550:	3401      	adds	r4, #1
    3552:	2c08      	cmp	r4, #8
    3554:	fa5f fa84 	uxtb.w	sl, r4
    3558:	d901      	bls.n	355e <usb_serial_flush_input+0x2e>
    355a:	2400      	movs	r4, #0
    355c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    355e:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    3562:	f8db 2000 	ldr.w	r2, [fp]
    3566:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    356a:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    356c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3570:	1a5b      	subs	r3, r3, r1
    3572:	1ad3      	subs	r3, r2, r3
    3574:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    3578:	f7ff fd1c 	bl	2fb4 <rx_queue_transfer>
		rx_tail = tail;
    357c:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    3580:	782b      	ldrb	r3, [r5, #0]
    3582:	429c      	cmp	r4, r3
    3584:	d1e4      	bne.n	3550 <usb_serial_flush_input+0x20>
    3586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    358a:	bf00      	nop
    358c:	20007640 	.word	0x20007640
    3590:	20007664 	.word	0x20007664
    3594:	20007514 	.word	0x20007514
    3598:	20007644 	.word	0x20007644
    359c:	20007660 	.word	0x20007660
    35a0:	20007650 	.word	0x20007650

000035a4 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    35a4:	b500      	push	{lr}
    35a6:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    35a8:	2101      	movs	r1, #1
    35aa:	f10d 0007 	add.w	r0, sp, #7
    35ae:	f7ff ff21 	bl	33f4 <usb_serial_read>
    35b2:	b120      	cbz	r0, 35be <usb_serial_getchar+0x1a>
    35b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    35b8:	b003      	add	sp, #12
    35ba:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    35be:	f04f 30ff 	mov.w	r0, #4294967295
    35c2:	e7f9      	b.n	35b8 <usb_serial_getchar+0x14>

000035c4 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    35c4:	4b09      	ldr	r3, [pc, #36]	; (35ec <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    35c6:	b500      	push	{lr}
    35c8:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    35ca:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    35cc:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    35d0:	b923      	cbnz	r3, 35dc <usb_serial_putchar+0x18>
    35d2:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    35d6:	b003      	add	sp, #12
    35d8:	f85d fb04 	ldr.w	pc, [sp], #4
    35dc:	2101      	movs	r1, #1
    35de:	f10d 0007 	add.w	r0, sp, #7
    35e2:	f7ff fdc3 	bl	316c <usb_serial_write.part.1>
    35e6:	b003      	add	sp, #12
    35e8:	f85d fb04 	ldr.w	pc, [sp], #4
    35ec:	20007510 	.word	0x20007510

000035f0 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    35f0:	4b04      	ldr	r3, [pc, #16]	; (3604 <usb_serial_write+0x14>)
    35f2:	781b      	ldrb	r3, [r3, #0]
    35f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    35f8:	b10b      	cbz	r3, 35fe <usb_serial_write+0xe>
    35fa:	f7ff bdb7 	b.w	316c <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    35fe:	4610      	mov	r0, r2
    3600:	4770      	bx	lr
    3602:	bf00      	nop
    3604:	20007510 	.word	0x20007510

00003608 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    3608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    360c:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    360e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 3650 <usb_serial_write_buffer_free+0x48>
    3612:	2301      	movs	r3, #1
    3614:	4d0c      	ldr	r5, [pc, #48]	; (3648 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    3616:	4627      	mov	r7, r4
    3618:	4e0c      	ldr	r6, [pc, #48]	; (364c <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    361a:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    361e:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3620:	4628      	mov	r0, r5
    3622:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    3624:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3626:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    362a:	d005      	beq.n	3638 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    362c:	f7ff fc94 	bl	2f58 <usb_transfer_status>
    3630:	0603      	lsls	r3, r0, #24
    3632:	bf58      	it	pl
    3634:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3638:	2c04      	cmp	r4, #4
    363a:	d1f0      	bne.n	361e <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    363c:	2300      	movs	r3, #0
	return sum;
}
    363e:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    3640:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    3644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3648:	20007680 	.word	0x20007680
    364c:	20007527 	.word	0x20007527
    3650:	20007526 	.word	0x20007526

00003654 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    3654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    3658:	4b1f      	ldr	r3, [pc, #124]	; (36d8 <usb_serial_flush_output+0x84>)
    365a:	781b      	ldrb	r3, [r3, #0]
    365c:	b113      	cbz	r3, 3664 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    365e:	4d1f      	ldr	r5, [pc, #124]	; (36dc <usb_serial_flush_output+0x88>)
    3660:	882a      	ldrh	r2, [r5, #0]
    3662:	b90a      	cbnz	r2, 3668 <usb_serial_flush_output+0x14>
    3664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3668:	f8df 8084 	ldr.w	r8, [pc, #132]	; 36f0 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    366c:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3670:	4e1b      	ldr	r6, [pc, #108]	; (36e0 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    3672:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    3676:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    367a:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    367c:	4c19      	ldr	r4, [pc, #100]	; (36e4 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    367e:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3680:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    3684:	4f18      	ldr	r7, [pc, #96]	; (36e8 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3686:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    368a:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    368c:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3690:	4621      	mov	r1, r4
    3692:	f7ff fc23 	bl	2edc <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3696:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    369a:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    369e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    36a2:	4b12      	ldr	r3, [pc, #72]	; (36ec <usb_serial_flush_output+0x98>)
    36a4:	6019      	str	r1, [r3, #0]
		location += 32;
    36a6:	3120      	adds	r1, #32
	} while (location < end_addr);
    36a8:	428a      	cmp	r2, r1
    36aa:	d8fb      	bhi.n	36a4 <usb_serial_flush_output+0x50>
	asm("dsb");
    36ac:	f3bf 8f4f 	dsb	sy
	asm("isb");
    36b0:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    36b4:	2004      	movs	r0, #4
    36b6:	4631      	mov	r1, r6
    36b8:	f7ff fc28 	bl	2f0c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    36bc:	f898 3000 	ldrb.w	r3, [r8]
    36c0:	4a0b      	ldr	r2, [pc, #44]	; (36f0 <usb_serial_flush_output+0x9c>)
    36c2:	3301      	adds	r3, #1
    36c4:	b2db      	uxtb	r3, r3
    36c6:	2b03      	cmp	r3, #3
    36c8:	bf88      	it	hi
    36ca:	2300      	movhi	r3, #0
    36cc:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    36ce:	2300      	movs	r3, #0
    36d0:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    36d2:	703b      	strb	r3, [r7, #0]
    36d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36d8:	20007510 	.word	0x20007510
    36dc:	20007666 	.word	0x20007666
    36e0:	20007680 	.word	0x20007680
    36e4:	20201aa0 	.word	0x20201aa0
    36e8:	20007526 	.word	0x20007526
    36ec:	e000ef70 	.word	0xe000ef70
    36f0:	20007527 	.word	0x20007527

000036f4 <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    36f4:	b4f0      	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    36f6:	b672      	cpsid	i
	index = memory_pool_first_mask;
    36f8:	4f23      	ldr	r7, [pc, #140]	; (3788 <AudioStream::allocate()+0x94>)
	p += index;
    36fa:	4e24      	ldr	r6, [pc, #144]	; (378c <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    36fc:	883c      	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    36fe:	f106 0370 	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    3702:	eb06 0084 	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    3706:	4298      	cmp	r0, r3
    3708:	d213      	bcs.n	3732 <AudioStream::allocate()+0x3e>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    370a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    370e:	b9a1      	cbnz	r1, 373a <AudioStream::allocate()+0x46>
    3710:	1d02      	adds	r2, r0, #4
    3712:	f106 0573 	add.w	r5, r6, #115	; 0x73
    3716:	1c63      	adds	r3, r4, #1
    3718:	1aad      	subs	r5, r5, r2
    371a:	eb03 0595 	add.w	r5, r3, r5, lsr #2
    371e:	e002      	b.n	3726 <AudioStream::allocate()+0x32>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    3720:	f852 1b04 	ldr.w	r1, [r2], #4
		if (avail) break;
    3724:	b949      	cbnz	r1, 373a <AudioStream::allocate()+0x46>
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    3726:	42ab      	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    3728:	461c      	mov	r4, r3
		p++;
    372a:	4610      	mov	r0, r2
    372c:	f103 0301 	add.w	r3, r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    3730:	d1f6      	bne.n	3720 <AudioStream::allocate()+0x2c>
			__enable_irq();
    3732:	b662      	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    3734:	2000      	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    3736:	bcf0      	pop	{r4, r5, r6, r7}
    3738:	4770      	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    373a:	fab1 f281 	clz	r2, r1
	avail &= ~(0x80000000 >> n);
    373e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    3742:	40d3      	lsrs	r3, r2
    3744:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
    3748:	6001      	str	r1, [r0, #0]
	if (!avail) index++;
    374a:	b901      	cbnz	r1, 374e <AudioStream::allocate()+0x5a>
    374c:	3401      	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    374e:	4b10      	ldr	r3, [pc, #64]	; (3790 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    3750:	803c      	strh	r4, [r7, #0]
	used = memory_used + 1;
    3752:	8819      	ldrh	r1, [r3, #0]
    3754:	3101      	adds	r1, #1
	memory_used = used;
    3756:	b28d      	uxth	r5, r1
    3758:	801d      	strh	r5, [r3, #0]
	__enable_irq();
    375a:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    375c:	1b80      	subs	r0, r0, r6
    375e:	f641 737c 	movw	r3, #8060	; 0x1f7c
    3762:	4c0c      	ldr	r4, [pc, #48]	; (3794 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
    3764:	2701      	movs	r7, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    3766:	1080      	asrs	r0, r0, #2
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    3768:	4e0b      	ldr	r6, [pc, #44]	; (3798 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    376a:	6824      	ldr	r4, [r4, #0]
    376c:	ebc2 1240 	rsb	r2, r2, r0, lsl #5
    3770:	eb02 1282 	add.w	r2, r2, r2, lsl #6
    3774:	0092      	lsls	r2, r2, #2
    3776:	4413      	add	r3, r2
	block->ref_count = 1;
    3778:	54e7      	strb	r7, [r4, r3]
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    377a:	18e0      	adds	r0, r4, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    377c:	8833      	ldrh	r3, [r6, #0]
    377e:	4299      	cmp	r1, r3
    3780:	bf88      	it	hi
    3782:	8035      	strhhi	r5, [r6, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    3784:	bcf0      	pop	{r4, r5, r6, r7}
    3786:	4770      	bx	lr
    3788:	2000777c 	.word	0x2000777c
    378c:	20007708 	.word	0x20007708
    3790:	2000777e 	.word	0x2000777e
    3794:	20007778 	.word	0x20007778
    3798:	20007700 	.word	0x20007700

0000379c <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    379c:	8842      	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    379e:	b672      	cpsid	i
	if (block->ref_count > 1) {
    37a0:	7803      	ldrb	r3, [r0, #0]
    37a2:	2b01      	cmp	r3, #1
    37a4:	d903      	bls.n	37ae <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    37a6:	3b01      	subs	r3, #1
    37a8:	7003      	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    37aa:	b662      	cpsie	i
    37ac:	4770      	bx	lr
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    37ae:	43d1      	mvns	r1, r2
    37b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    37b4:	1152      	asrs	r2, r2, #5
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    37b6:	f001 011f 	and.w	r1, r1, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    37ba:	b430      	push	{r4, r5}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    37bc:	4c09      	ldr	r4, [pc, #36]	; (37e4 <AudioStream::release(audio_block_struct*)+0x48>)
    37be:	fa20 f101 	lsr.w	r1, r0, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    37c2:	4d09      	ldr	r5, [pc, #36]	; (37e8 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    37c4:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    37c8:	8828      	ldrh	r0, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    37ca:	430b      	orrs	r3, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    37cc:	4282      	cmp	r2, r0
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    37ce:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    37d2:	bf38      	it	cc
    37d4:	802a      	strhcc	r2, [r5, #0]
		memory_used--;
    37d6:	4a05      	ldr	r2, [pc, #20]	; (37ec <AudioStream::release(audio_block_struct*)+0x50>)
    37d8:	8813      	ldrh	r3, [r2, #0]
    37da:	3b01      	subs	r3, #1
    37dc:	8013      	strh	r3, [r2, #0]
	}
	__enable_irq();
    37de:	b662      	cpsie	i
}
    37e0:	bc30      	pop	{r4, r5}
    37e2:	4770      	bx	lr
    37e4:	20007708 	.word	0x20007708
    37e8:	2000777c 	.word	0x2000777c
    37ec:	2000777e 	.word	0x2000777e

000037f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    37f0:	68c3      	ldr	r3, [r0, #12]
    37f2:	b1b3      	cbz	r3, 3822 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    37f4:	b430      	push	{r4, r5}
    37f6:	e001      	b.n	37fc <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    37f8:	68db      	ldr	r3, [r3, #12]
    37fa:	b18b      	cbz	r3, 3820 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    37fc:	7a18      	ldrb	r0, [r3, #8]
    37fe:	4290      	cmp	r0, r2
    3800:	d1fa      	bne.n	37f8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    3802:	6858      	ldr	r0, [r3, #4]
    3804:	7a5c      	ldrb	r4, [r3, #9]
    3806:	6900      	ldr	r0, [r0, #16]
    3808:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    380c:	2d00      	cmp	r5, #0
    380e:	d1f3      	bne.n	37f8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    3810:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    3814:	7808      	ldrb	r0, [r1, #0]
    3816:	3001      	adds	r0, #1
    3818:	7008      	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    381a:	68db      	ldr	r3, [r3, #12]
    381c:	2b00      	cmp	r3, #0
    381e:	d1ed      	bne.n	37fc <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    3820:	bc30      	pop	{r4, r5}
    3822:	4770      	bx	lr

00003824 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    3824:	7a43      	ldrb	r3, [r0, #9]
    3826:	428b      	cmp	r3, r1
    3828:	d906      	bls.n	3838 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    382a:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    382c:	2200      	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    382e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    3832:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
    3836:	4770      	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    3838:	2000      	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    383a:	4770      	bx	lr

0000383c <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    383c:	7c03      	ldrb	r3, [r0, #16]
    383e:	bb23      	cbnz	r3, 388a <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    3840:	6843      	ldr	r3, [r0, #4]
    3842:	7a42      	ldrb	r2, [r0, #9]
    3844:	7a5b      	ldrb	r3, [r3, #9]
    3846:	429a      	cmp	r2, r3
    3848:	d81f      	bhi.n	388a <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    384a:	b430      	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    384c:	b672      	cpsid	i
	p = src.destination_list;
    384e:	6804      	ldr	r4, [r0, #0]
    3850:	68e3      	ldr	r3, [r4, #12]
	if (p == NULL) {
    3852:	b32b      	cbz	r3, 38a0 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    3854:	68da      	ldr	r2, [r3, #12]
    3856:	b132      	cbz	r2, 3866 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    3858:	6819      	ldr	r1, [r3, #0]
    385a:	428c      	cmp	r4, r1
    385c:	d016      	beq.n	388c <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    385e:	4613      	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    3860:	68da      	ldr	r2, [r3, #12]
    3862:	2a00      	cmp	r2, #0
    3864:	d1f8      	bne.n	3858 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    3866:	60d8      	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    3868:	2200      	movs	r2, #0
	src.numConnections++;
	src.active = true;
    386a:	2301      	movs	r3, #1
			}
			p = p->next_dest;
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
    386c:	60c2      	str	r2, [r0, #12]
	src.numConnections++;
    386e:	7aa2      	ldrb	r2, [r4, #10]
    3870:	441a      	add	r2, r3
    3872:	72a2      	strb	r2, [r4, #10]
	src.active = true;
    3874:	6802      	ldr	r2, [r0, #0]

	dst.numConnections++;
    3876:	6841      	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    3878:	7213      	strb	r3, [r2, #8]

	dst.numConnections++;
    387a:	7a8a      	ldrb	r2, [r1, #10]
    387c:	441a      	add	r2, r3
    387e:	728a      	strb	r2, [r1, #10]
	dst.active = true;
    3880:	6842      	ldr	r2, [r0, #4]
    3882:	7213      	strb	r3, [r2, #8]

	isConnected = true;
    3884:	7403      	strb	r3, [r0, #16]

	__enable_irq();
    3886:	b662      	cpsie	i
}
    3888:	bc30      	pop	{r4, r5}
    388a:	4770      	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    388c:	685d      	ldr	r5, [r3, #4]
    388e:	6841      	ldr	r1, [r0, #4]
    3890:	428d      	cmp	r5, r1
    3892:	d1e4      	bne.n	385e <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    3894:	8919      	ldrh	r1, [r3, #8]
    3896:	8903      	ldrh	r3, [r0, #8]
    3898:	4299      	cmp	r1, r3
    389a:	d0f4      	beq.n	3886 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    389c:	4613      	mov	r3, r2
    389e:	e7df      	b.n	3860 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    38a0:	60e0      	str	r0, [r4, #12]
    38a2:	e7e1      	b.n	3868 <AudioConnection::connect()+0x2c>

000038a4 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    38a4:	7c03      	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    38a6:	b510      	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    38a8:	2b00      	cmp	r3, #0
    38aa:	d032      	beq.n	3912 <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    38ac:	6843      	ldr	r3, [r0, #4]
    38ae:	7a42      	ldrb	r2, [r0, #9]
    38b0:	7a5b      	ldrb	r3, [r3, #9]
    38b2:	429a      	cmp	r2, r3
    38b4:	d82d      	bhi.n	3912 <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    38b6:	b672      	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    38b8:	6802      	ldr	r2, [r0, #0]
    38ba:	68d3      	ldr	r3, [r2, #12]
	if (p == NULL) {
    38bc:	b343      	cbz	r3, 3910 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    38be:	4298      	cmp	r0, r3
    38c0:	d102      	bne.n	38c8 <AudioConnection::disconnect()+0x24>
    38c2:	e029      	b.n	3918 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    38c4:	4298      	cmp	r0, r3
    38c6:	d002      	beq.n	38ce <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    38c8:	68db      	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    38ca:	2b00      	cmp	r3, #0
    38cc:	d1fa      	bne.n	38c4 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    38ce:	6843      	ldr	r3, [r0, #4]
    38d0:	4604      	mov	r4, r0
    38d2:	7a41      	ldrb	r1, [r0, #9]
    38d4:	691b      	ldr	r3, [r3, #16]
    38d6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    38da:	b148      	cbz	r0, 38f0 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    38dc:	f7ff ff5e 	bl	379c <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    38e0:	b672      	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    38e2:	6863      	ldr	r3, [r4, #4]
    38e4:	2100      	movs	r1, #0
    38e6:	7a62      	ldrb	r2, [r4, #9]
    38e8:	691b      	ldr	r3, [r3, #16]
    38ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    38ee:	6822      	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    38f0:	7a93      	ldrb	r3, [r2, #10]
    38f2:	3b01      	subs	r3, #1
    38f4:	7293      	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    38f6:	6823      	ldr	r3, [r4, #0]
    38f8:	7a9a      	ldrb	r2, [r3, #10]
    38fa:	b902      	cbnz	r2, 38fe <AudioConnection::disconnect()+0x5a>
		src.active = false;
    38fc:	721a      	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    38fe:	6862      	ldr	r2, [r4, #4]
    3900:	7a93      	ldrb	r3, [r2, #10]
    3902:	3b01      	subs	r3, #1
    3904:	7293      	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    3906:	6863      	ldr	r3, [r4, #4]
    3908:	7a9a      	ldrb	r2, [r3, #10]
    390a:	b11a      	cbz	r2, 3914 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    390c:	2300      	movs	r3, #0
    390e:	7423      	strb	r3, [r4, #16]

	__enable_irq();
    3910:	b662      	cpsie	i
    3912:	bd10      	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    3914:	721a      	strb	r2, [r3, #8]
    3916:	e7f9      	b.n	390c <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    3918:	68c3      	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    391a:	60d3      	str	r3, [r2, #12]
    391c:	e7d7      	b.n	38ce <AudioConnection::disconnect()+0x2a>
    391e:	bf00      	nop

00003920 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    3920:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    3922:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    3924:	b989      	cbnz	r1, 394a <DMAChannel::begin(bool)+0x2a>
    3926:	6802      	ldr	r2, [r0, #0]
    3928:	b17a      	cbz	r2, 394a <DMAChannel::begin(bool)+0x2a>
    392a:	7903      	ldrb	r3, [r0, #4]
    392c:	2b0f      	cmp	r3, #15
    392e:	d80c      	bhi.n	394a <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    3930:	4c1f      	ldr	r4, [pc, #124]	; (39b0 <DMAChannel::begin(bool)+0x90>)
    3932:	8821      	ldrh	r1, [r4, #0]
    3934:	fa41 f503 	asr.w	r5, r1, r3
    3938:	07ed      	lsls	r5, r5, #31
    393a:	d508      	bpl.n	394e <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    393c:	4d1d      	ldr	r5, [pc, #116]	; (39b4 <DMAChannel::begin(bool)+0x94>)
    393e:	441d      	add	r5, r3
    3940:	ebb2 1f45 	cmp.w	r2, r5, lsl #5
    3944:	d103      	bne.n	394e <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    3946:	b662      	cpsie	i
		return;
    3948:	e00e      	b.n	3968 <DMAChannel::begin(bool)+0x48>
    394a:	4c19      	ldr	r4, [pc, #100]	; (39b0 <DMAChannel::begin(bool)+0x90>)
    394c:	8821      	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    394e:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    3950:	fa41 f203 	asr.w	r2, r1, r3
    3954:	f012 0201 	ands.w	r2, r2, #1
    3958:	d008      	beq.n	396c <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    395a:	3301      	adds	r3, #1
    395c:	2b10      	cmp	r3, #16
    395e:	d1f7      	bne.n	3950 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    3960:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    3962:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    3964:	7103      	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    3966:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    3968:	bcf0      	pop	{r4, r5, r6, r7}
    396a:	4770      	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    396c:	2501      	movs	r5, #1
    396e:	409d      	lsls	r5, r3
    3970:	4329      	orrs	r1, r5
    3972:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    3974:	b662      	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    3976:	4e10      	ldr	r6, [pc, #64]	; (39b8 <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    3978:	b2dc      	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    397a:	490e      	ldr	r1, [pc, #56]	; (39b4 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    397c:	f240 4782 	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    3980:	7104      	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    3982:	4419      	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    3984:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    3986:	014b      	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    3988:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    398c:	490b      	ldr	r1, [pc, #44]	; (39bc <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    398e:	67f5      	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    3990:	600f      	str	r7, [r1, #0]
	DMA_CERQ = ch;
    3992:	768c      	strb	r4, [r1, #26]
	DMA_CERR = ch;
    3994:	778c      	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    3996:	760c      	strb	r4, [r1, #24]
	DMA_CINT = ch;
    3998:	77cc      	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    399a:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    399c:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    399e:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    39a0:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    39a2:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    39a4:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    39a6:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    39a8:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    39aa:	61da      	str	r2, [r3, #28]
}
    39ac:	bcf0      	pop	{r4, r5, r6, r7}
    39ae:	4770      	bx	lr
    39b0:	20007780 	.word	0x20007780
    39b4:	02007480 	.word	0x02007480
    39b8:	400fc000 	.word	0x400fc000
    39bc:	400e8000 	.word	0x400e8000

000039c0 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    39c0:	7903      	ldrb	r3, [r0, #4]
    39c2:	2b0f      	cmp	r3, #15
    39c4:	d810      	bhi.n	39e8 <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    39c6:	4a09      	ldr	r2, [pc, #36]	; (39ec <DMAChannel::release()+0x2c>)
    39c8:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    39ca:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    39cc:	4908      	ldr	r1, [pc, #32]	; (39f0 <DMAChannel::release()+0x30>)
    39ce:	2301      	movs	r3, #1
    39d0:	7902      	ldrb	r2, [r0, #4]
    39d2:	fa03 f202 	lsl.w	r2, r3, r2
    39d6:	880b      	ldrh	r3, [r1, #0]
    39d8:	ea23 0302 	bic.w	r3, r3, r2
    39dc:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    39de:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    39e0:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    39e2:	2300      	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    39e4:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    39e6:	6003      	str	r3, [r0, #0]
    39e8:	4770      	bx	lr
    39ea:	bf00      	nop
    39ec:	400e8000 	.word	0x400e8000
    39f0:	20007780 	.word	0x20007780

000039f4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    39f4:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    39f6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    39fa:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    39fc:	7f43      	ldrb	r3, [r0, #29]
    39fe:	b933      	cbnz	r3, 3a0e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3a00:	7f01      	ldrb	r1, [r0, #28]
    3a02:	2901      	cmp	r1, #1
    3a04:	d008      	beq.n	3a18 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3a06:	2903      	cmp	r1, #3
    3a08:	d010      	beq.n	3a2c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3a0a:	2301      	movs	r3, #1
    3a0c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3a0e:	b902      	cbnz	r2, 3a12 <EventResponder::triggerEventNotImmediate()+0x1e>
    3a10:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    3a12:	f85d 4b04 	ldr.w	r4, [sp], #4
    3a16:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3a18:	4c11      	ldr	r4, [pc, #68]	; (3a60 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3a1a:	6821      	ldr	r1, [r4, #0]
    3a1c:	b1a1      	cbz	r1, 3a48 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3a1e:	4911      	ldr	r1, [pc, #68]	; (3a64 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3a20:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    3a22:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    3a24:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3a26:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    3a28:	6158      	str	r0, [r3, #20]
    3a2a:	e7ee      	b.n	3a0a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3a2c:	4c0e      	ldr	r4, [pc, #56]	; (3a68 <EventResponder::triggerEventNotImmediate()+0x74>)
    3a2e:	6821      	ldr	r1, [r4, #0]
    3a30:	b181      	cbz	r1, 3a54 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3a32:	490e      	ldr	r1, [pc, #56]	; (3a6c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3a34:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3a36:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    3a38:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3a3a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    3a3c:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3a3e:	4b0c      	ldr	r3, [pc, #48]	; (3a70 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3a40:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3a44:	6019      	str	r1, [r3, #0]
    3a46:	e7e0      	b.n	3a0a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3a48:	4b06      	ldr	r3, [pc, #24]	; (3a64 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3a4a:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3a4c:	6181      	str	r1, [r0, #24]
				firstYield = this;
    3a4e:	6020      	str	r0, [r4, #0]
				lastYield = this;
    3a50:	6018      	str	r0, [r3, #0]
    3a52:	e7da      	b.n	3a0a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3a54:	4b05      	ldr	r3, [pc, #20]	; (3a6c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3a56:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3a58:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    3a5a:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    3a5c:	6018      	str	r0, [r3, #0]
    3a5e:	e7ee      	b.n	3a3e <EventResponder::triggerEventNotImmediate()+0x4a>
    3a60:	20007794 	.word	0x20007794
    3a64:	20007790 	.word	0x20007790
    3a68:	20007784 	.word	0x20007784
    3a6c:	20007788 	.word	0x20007788
    3a70:	e000ed04 	.word	0xe000ed04

00003a74 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3a74:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3a76:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3a7a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3a7c:	4c0c      	ldr	r4, [pc, #48]	; (3ab0 <EventResponder::runFromInterrupt()+0x3c>)
    3a7e:	6823      	ldr	r3, [r4, #0]
		if (first) {
    3a80:	b18b      	cbz	r3, 3aa6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3a82:	4e0c      	ldr	r6, [pc, #48]	; (3ab4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3a84:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3a86:	695a      	ldr	r2, [r3, #20]
    3a88:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    3a8a:	b17a      	cbz	r2, 3aac <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    3a8c:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3a8e:	b901      	cbnz	r1, 3a92 <EventResponder::runFromInterrupt()+0x1e>
    3a90:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3a92:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3a94:	4618      	mov	r0, r3
    3a96:	689b      	ldr	r3, [r3, #8]
    3a98:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3a9a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3a9e:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3aa0:	6823      	ldr	r3, [r4, #0]
		if (first) {
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d1ef      	bne.n	3a86 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3aa6:	b901      	cbnz	r1, 3aaa <EventResponder::runFromInterrupt()+0x36>
    3aa8:	b662      	cpsie	i
    3aaa:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3aac:	6032      	str	r2, [r6, #0]
    3aae:	e7ee      	b.n	3a8e <EventResponder::runFromInterrupt()+0x1a>
    3ab0:	20007784 	.word	0x20007784
    3ab4:	20007788 	.word	0x20007788

00003ab8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3ab8:	f7ff bfdc 	b.w	3a74 <EventResponder::runFromInterrupt()>

00003abc <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3abc:	4a18      	ldr	r2, [pc, #96]	; (3b20 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3abe:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    3ac0:	6814      	ldr	r4, [r2, #0]
    3ac2:	2c00      	cmp	r4, #0
    3ac4:	d028      	beq.n	3b18 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3ac6:	6803      	ldr	r3, [r0, #0]
    3ac8:	6821      	ldr	r1, [r4, #0]
    3aca:	428b      	cmp	r3, r1
    3acc:	d20f      	bcs.n	3aee <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3ace:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3ad0:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3ad2:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    3ad4:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3ad6:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3ad8:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3ada:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3adc:	2302      	movs	r3, #2
}
    3ade:	bc30      	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3ae0:	7503      	strb	r3, [r0, #20]
}
    3ae2:	4770      	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    3ae4:	6003      	str	r3, [r0, #0]
    3ae6:	4614      	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3ae8:	6811      	ldr	r1, [r2, #0]
    3aea:	428b      	cmp	r3, r1
    3aec:	d308      	bcc.n	3b00 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3aee:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3af0:	1a5b      	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3af2:	2a00      	cmp	r2, #0
    3af4:	d1f6      	bne.n	3ae4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3af6:	6082      	str	r2, [r0, #8]
		_prev = timer;
    3af8:	60c4      	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3afa:	6003      	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    3afc:	60a0      	str	r0, [r4, #8]
    3afe:	e7ed      	b.n	3adc <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3b00:	68d5      	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    3b02:	1acb      	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3b04:	6082      	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    3b06:	2202      	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3b08:	60c5      	str	r5, [r0, #12]
				timer->_prev = this;
    3b0a:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    3b0c:	68c1      	ldr	r1, [r0, #12]
    3b0e:	6088      	str	r0, [r1, #8]
				timer->_ms -= _ms;
    3b10:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    3b12:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3b14:	bc30      	pop	{r4, r5}
    3b16:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3b18:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    3b1a:	60c4      	str	r4, [r0, #12]
		listActive = this;
    3b1c:	6010      	str	r0, [r2, #0]
    3b1e:	e7dd      	b.n	3adc <MillisTimer::addToActiveList()+0x20>
    3b20:	2000778c 	.word	0x2000778c

00003b24 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3b26:	4e22      	ldr	r6, [pc, #136]	; (3bb0 <MillisTimer::runFromTimer()+0x8c>)
    3b28:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    3b2a:	b32c      	cbz	r4, 3b78 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3b2c:	6823      	ldr	r3, [r4, #0]
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d13a      	bne.n	3ba8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3b32:	461d      	mov	r5, r3
    3b34:	4f1f      	ldr	r7, [pc, #124]	; (3bb4 <MillisTimer::runFromTimer()+0x90>)
    3b36:	e004      	b.n	3b42 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3b38:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3b3a:	b1ec      	cbz	r4, 3b78 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3b3c:	6823      	ldr	r3, [r4, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d132      	bne.n	3ba8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3b42:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3b44:	b103      	cbz	r3, 3b48 <MillisTimer::runFromTimer()+0x24>
    3b46:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3b48:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3b4a:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3b4c:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3b4e:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3b50:	681b      	ldr	r3, [r3, #0]
    3b52:	42bb      	cmp	r3, r7
    3b54:	d121      	bne.n	3b9a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3b56:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3b58:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3b5a:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3b5c:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3b5e:	d020      	beq.n	3ba2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3b60:	f7ff ff48 	bl	39f4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3b64:	6863      	ldr	r3, [r4, #4]
    3b66:	2b00      	cmp	r3, #0
    3b68:	d0e6      	beq.n	3b38 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3b6a:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    3b6c:	4620      	mov	r0, r4
    3b6e:	f7ff ffa5 	bl	3abc <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3b72:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3b74:	2c00      	cmp	r4, #0
    3b76:	d1e1      	bne.n	3b3c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3b78:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    3b7c:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3b7e:	4a0e      	ldr	r2, [pc, #56]	; (3bb8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3b80:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3b82:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3b84:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3b86:	b903      	cbnz	r3, 3b8a <MillisTimer::runFromTimer()+0x66>
    3b88:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3b8a:	b128      	cbz	r0, 3b98 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3b8c:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3b8e:	f7ff ff95 	bl	3abc <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3b92:	4620      	mov	r0, r4
    3b94:	2800      	cmp	r0, #0
    3b96:	d1f9      	bne.n	3b8c <MillisTimer::runFromTimer()+0x68>
    3b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3b9a:	4622      	mov	r2, r4
    3b9c:	2100      	movs	r1, #0
    3b9e:	4798      	blx	r3
    3ba0:	e7e0      	b.n	3b64 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3ba2:	6883      	ldr	r3, [r0, #8]
    3ba4:	4798      	blx	r3
    3ba6:	e7dd      	b.n	3b64 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3ba8:	3b01      	subs	r3, #1
    3baa:	6023      	str	r3, [r4, #0]
			break;
    3bac:	e7e4      	b.n	3b78 <MillisTimer::runFromTimer()+0x54>
    3bae:	bf00      	nop
    3bb0:	2000778c 	.word	0x2000778c
    3bb4:	00000ed9 	.word	0x00000ed9
    3bb8:	2000779c 	.word	0x2000779c

00003bbc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3bbc:	4a04      	ldr	r2, [pc, #16]	; (3bd0 <systick_isr+0x14>)
    3bbe:	4b05      	ldr	r3, [pc, #20]	; (3bd4 <systick_isr+0x18>)
    3bc0:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    3bc2:	4a05      	ldr	r2, [pc, #20]	; (3bd8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3bc4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    3bc6:	6813      	ldr	r3, [r2, #0]
    3bc8:	3301      	adds	r3, #1
    3bca:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3bcc:	f7ff bfaa 	b.w	3b24 <MillisTimer::runFromTimer()>
    3bd0:	e0001004 	.word	0xe0001004
    3bd4:	200074c0 	.word	0x200074c0
    3bd8:	200074c8 	.word	0x200074c8

00003bdc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3bdc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3bde:	f7fc fa7f 	bl	e0 <setup>
	while (1) {
		loop();
    3be2:	f7fc facf 	bl	184 <loop>
		yield();
    3be6:	f000 f899 	bl	3d1c <yield>
    3bea:	e7fa      	b.n	3be2 <main+0x6>

00003bec <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    3bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    3bee:	460e      	mov	r6, r1
    3bf0:	b171      	cbz	r1, 3c10 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    3bf2:	b17a      	cbz	r2, 3c14 <Print::write(unsigned char const*, unsigned int)+0x28>
    3bf4:	4607      	mov	r7, r0
    3bf6:	4614      	mov	r4, r2
    3bf8:	2500      	movs	r5, #0
    3bfa:	683b      	ldr	r3, [r7, #0]
    3bfc:	4638      	mov	r0, r7
    3bfe:	f816 1b01 	ldrb.w	r1, [r6], #1
    3c02:	681b      	ldr	r3, [r3, #0]
    3c04:	4798      	blx	r3
    3c06:	3c01      	subs	r4, #1
    3c08:	4405      	add	r5, r0
    3c0a:	d1f6      	bne.n	3bfa <Print::write(unsigned char const*, unsigned int)+0xe>
    3c0c:	4628      	mov	r0, r5
    3c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    3c10:	4608      	mov	r0, r1
    3c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c14:	4610      	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    3c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003c18 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3c18:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    3c1a:	4c06      	ldr	r4, [pc, #24]	; (3c34 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3c1c:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3c1e:	6803      	ldr	r3, [r0, #0]
    3c20:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3c22:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    3c24:	a901      	add	r1, sp, #4
    3c26:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3c28:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    3c2c:	4798      	blx	r3
}
    3c2e:	b002      	add	sp, #8
    3c30:	bd10      	pop	{r4, pc}
    3c32:	bf00      	nop
    3c34:	20000d28 	.word	0x20000d28

00003c38 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    3c38:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    3c3a:	b510      	push	{r4, lr}
    3c3c:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    3c3e:	685b      	ldr	r3, [r3, #4]
    3c40:	4798      	blx	r3
	return len;
}
    3c42:	4620      	mov	r0, r4
    3c44:	bd10      	pop	{r4, pc}
    3c46:	bf00      	nop

00003c48 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    3c48:	b40e      	push	{r1, r2, r3}
    3c4a:	b500      	push	{lr}
    3c4c:	b082      	sub	sp, #8
    3c4e:	ab03      	add	r3, sp, #12
    3c50:	f853 1b04 	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    3c54:	461a      	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    3c56:	9301      	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    3c58:	f001 fde6 	bl	5828 <vdprintf>
#endif
}
    3c5c:	b002      	add	sp, #8
    3c5e:	f85d eb04 	ldr.w	lr, [sp], #4
    3c62:	b003      	add	sp, #12
    3c64:	4770      	bx	lr
    3c66:	bf00      	nop

00003c68 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c6a:	4606      	mov	r6, r0
    3c6c:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3c6e:	2a00      	cmp	r2, #0
    3c70:	d033      	beq.n	3cda <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3c72:	2a01      	cmp	r2, #1
    3c74:	bf08      	it	eq
    3c76:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    3c78:	b351      	cbz	r1, 3cd0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    3c7a:	2521      	movs	r5, #33	; 0x21
    3c7c:	e000      	b.n	3c80 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3c7e:	b2fd      	uxtb	r5, r7
    3c80:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3c82:	fbb1 f4f2 	udiv	r4, r1, r2
    3c86:	fb02 1114 	mls	r1, r2, r4, r1
    3c8a:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3c8c:	2909      	cmp	r1, #9
    3c8e:	f100 0137 	add.w	r1, r0, #55	; 0x37
    3c92:	f100 0030 	add.w	r0, r0, #48	; 0x30
    3c96:	bf88      	it	hi
    3c98:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    3c9a:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3c9c:	ac0a      	add	r4, sp, #40	; 0x28
    3c9e:	bf98      	it	ls
    3ca0:	b2c0      	uxtbls	r0, r0
    3ca2:	442c      	add	r4, r5
    3ca4:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    3ca8:	2900      	cmp	r1, #0
    3caa:	d1e8      	bne.n	3c7e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3cac:	b133      	cbz	r3, 3cbc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    3cae:	3d01      	subs	r5, #1
		buf[i] = '-';
    3cb0:	ab0a      	add	r3, sp, #40	; 0x28
    3cb2:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    3cb4:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    3cb6:	442b      	add	r3, r5
    3cb8:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3cbc:	6833      	ldr	r3, [r6, #0]
    3cbe:	a901      	add	r1, sp, #4
    3cc0:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    3cc4:	4630      	mov	r0, r6
    3cc6:	4429      	add	r1, r5
    3cc8:	685b      	ldr	r3, [r3, #4]
    3cca:	4798      	blx	r3
}
    3ccc:	b00b      	add	sp, #44	; 0x2c
    3cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3cd0:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    3cd2:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3cd4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    3cd8:	e7e8      	b.n	3cac <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3cda:	6803      	ldr	r3, [r0, #0]
    3cdc:	b2c9      	uxtb	r1, r1
    3cde:	681b      	ldr	r3, [r3, #0]
    3ce0:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    3ce2:	b00b      	add	sp, #44	; 0x2c
    3ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ce6:	bf00      	nop

00003ce8 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3ce8:	f7ff bc22 	b.w	3530 <usb_serial_flush_input>

00003cec <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3cec:	f7ff bbf8 	b.w	34e0 <usb_serial_peekchar>

00003cf0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3cf0:	f7ff bc58 	b.w	35a4 <usb_serial_getchar>

00003cf4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3cf4:	f7ff bc16 	b.w	3524 <usb_serial_available>

00003cf8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3cf8:	f7ff bcac 	b.w	3654 <usb_serial_flush_output>

00003cfc <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3cfc:	f7ff bc84 	b.w	3608 <usb_serial_write_buffer_free>

00003d00 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3d00:	4608      	mov	r0, r1
    3d02:	4611      	mov	r1, r2
    3d04:	f7ff bc74 	b.w	35f0 <usb_serial_write>

00003d08 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3d08:	4608      	mov	r0, r1
    3d0a:	f7ff bc5b 	b.w	35c4 <usb_serial_putchar>
    3d0e:	bf00      	nop

00003d10 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    3d10:	4b01      	ldr	r3, [pc, #4]	; (3d18 <serialEvent()+0x8>)
    3d12:	2200      	movs	r2, #0
    3d14:	701a      	strb	r2, [r3, #0]
    3d16:	4770      	bx	lr
    3d18:	2000488a 	.word	0x2000488a

00003d1c <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3d1c:	b570      	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3d1e:	4c21      	ldr	r4, [pc, #132]	; (3da4 <yield+0x88>)
    3d20:	7823      	ldrb	r3, [r4, #0]
    3d22:	b983      	cbnz	r3, 3d46 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    3d24:	4b20      	ldr	r3, [pc, #128]	; (3da8 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    3d26:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    3d28:	781b      	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    3d2a:	7022      	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    3d2c:	bb1b      	cbnz	r3, 3d76 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    3d2e:	4b1f      	ldr	r3, [pc, #124]	; (3dac <yield+0x90>)
    3d30:	781b      	ldrb	r3, [r3, #0]
    3d32:	2b00      	cmp	r3, #0
    3d34:	d129      	bne.n	3d8a <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    3d36:	4b1e      	ldr	r3, [pc, #120]	; (3db0 <yield+0x94>)

	running = 0;
    3d38:	2100      	movs	r1, #0
    3d3a:	681a      	ldr	r2, [r3, #0]
    3d3c:	7021      	strb	r1, [r4, #0]
    3d3e:	b112      	cbz	r2, 3d46 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3d40:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    3d44:	b102      	cbz	r2, 3d48 <yield+0x2c>
    3d46:	bd70      	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d48:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    3d4c:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3d4e:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    3d50:	b1f2      	cbz	r2, 3d90 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3d52:	4c18      	ldr	r4, [pc, #96]	; (3db4 <yield+0x98>)
    3d54:	7821      	ldrb	r1, [r4, #0]
    3d56:	b9d9      	cbnz	r1, 3d90 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3d58:	2601      	movs	r6, #1
		firstYield = first->_next;
    3d5a:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3d5c:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    3d5e:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    3d60:	b1d5      	cbz	r5, 3d98 <yield+0x7c>
			firstYield->_prev = nullptr;
    3d62:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d64:	b900      	cbnz	r0, 3d68 <yield+0x4c>
    3d66:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3d68:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    3d6a:	6893      	ldr	r3, [r2, #8]
    3d6c:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3d6e:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    3d70:	4798      	blx	r3
		runningFromYield = false;
    3d72:	7025      	strb	r5, [r4, #0]
    3d74:	bd70      	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3d76:	f7ff fbd5 	bl	3524 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    3d7a:	2800      	cmp	r0, #0
    3d7c:	d0d7      	beq.n	3d2e <yield+0x12>
    3d7e:	f7ff ffc7 	bl	3d10 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    3d82:	4b0a      	ldr	r3, [pc, #40]	; (3dac <yield+0x90>)
    3d84:	781b      	ldrb	r3, [r3, #0]
    3d86:	2b00      	cmp	r3, #0
    3d88:	d0d5      	beq.n	3d36 <yield+0x1a>
    3d8a:	f000 f83f 	bl	3e0c <HardwareSerial::processSerialEvents()>
    3d8e:	e7d2      	b.n	3d36 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d90:	2800      	cmp	r0, #0
    3d92:	d1d8      	bne.n	3d46 <yield+0x2a>
    3d94:	b662      	cpsie	i
    3d96:	bd70      	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3d98:	4b07      	ldr	r3, [pc, #28]	; (3db8 <yield+0x9c>)
    3d9a:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d9c:	2800      	cmp	r0, #0
    3d9e:	d1e3      	bne.n	3d68 <yield+0x4c>
    3da0:	e7e1      	b.n	3d66 <yield+0x4a>
    3da2:	bf00      	nop
    3da4:	200077a0 	.word	0x200077a0
    3da8:	2000488a 	.word	0x2000488a
    3dac:	200077c0 	.word	0x200077c0
    3db0:	20007794 	.word	0x20007794
    3db4:	20007798 	.word	0x20007798
    3db8:	20007790 	.word	0x20007790

00003dbc <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3dbc:	b4f0      	push	{r4, r5, r6, r7}
    3dbe:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    3dc0:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3dc2:	4637      	mov	r7, r6
    3dc4:	e000      	b.n	3dc8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3dc6:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3dc8:	fbb0 f3f2 	udiv	r3, r0, r2
    3dcc:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3dd0:	f100 0437 	add.w	r4, r0, #55	; 0x37
    3dd4:	2809      	cmp	r0, #9
    3dd6:	f100 0030 	add.w	r0, r0, #48	; 0x30
    3dda:	b2e4      	uxtb	r4, r4
    3ddc:	bf98      	it	ls
    3dde:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    3de0:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3de2:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    3de6:	2b00      	cmp	r3, #0
    3de8:	d1ed      	bne.n	3dc6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3dea:	194a      	adds	r2, r1, r5
    3dec:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3dee:	b14d      	cbz	r5, 3e04 <ultoa+0x48>
    3df0:	3301      	adds	r3, #1
		t = buf[j];
    3df2:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    3df6:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3df8:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    3dfa:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3dfc:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3dfe:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3e02:	dbf5      	blt.n	3df0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3e04:	4608      	mov	r0, r1
    3e06:	bcf0      	pop	{r4, r5, r6, r7}
    3e08:	4770      	bx	lr
    3e0a:	bf00      	nop

00003e0c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    3e0c:	b538      	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    3e0e:	4b07      	ldr	r3, [pc, #28]	; (3e2c <HardwareSerial::processSerialEvents()+0x20>)
    3e10:	781c      	ldrb	r4, [r3, #0]
    3e12:	b14c      	cbz	r4, 3e28 <HardwareSerial::processSerialEvents()+0x1c>
    3e14:	4d06      	ldr	r5, [pc, #24]	; (3e30 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    3e16:	f855 3f04 	ldr.w	r3, [r5, #4]!
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d0fb      	beq.n	3e16 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    3e1e:	4798      	blx	r3
			if (--handlers_still_to_process == 0) return;
    3e20:	1e63      	subs	r3, r4, #1
    3e22:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    3e26:	d1f6      	bne.n	3e16 <HardwareSerial::processSerialEvents()+0xa>
    3e28:	bd38      	pop	{r3, r4, r5, pc}
    3e2a:	bf00      	nop
    3e2c:	200077c0 	.word	0x200077c0
    3e30:	200077a0 	.word	0x200077a0

00003e34 <arm_radix4_butterfly_q15>:
    3e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e38:	469b      	mov	fp, r3
    3e3a:	b091      	sub	sp, #68	; 0x44
    3e3c:	088b      	lsrs	r3, r1, #2
    3e3e:	4606      	mov	r6, r0
    3e40:	900e      	str	r0, [sp, #56]	; 0x38
    3e42:	2500      	movs	r5, #0
    3e44:	4618      	mov	r0, r3
    3e46:	9103      	str	r1, [sp, #12]
    3e48:	930f      	str	r3, [sp, #60]	; 0x3c
    3e4a:	4637      	mov	r7, r6
    3e4c:	0081      	lsls	r1, r0, #2
    3e4e:	4682      	mov	sl, r0
    3e50:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    3e54:	4696      	mov	lr, r2
    3e56:	1870      	adds	r0, r6, r1
    3e58:	9207      	str	r2, [sp, #28]
    3e5a:	009b      	lsls	r3, r3, #2
    3e5c:	462c      	mov	r4, r5
    3e5e:	1846      	adds	r6, r0, r1
    3e60:	462a      	mov	r2, r5
    3e62:	9304      	str	r3, [sp, #16]
    3e64:	4431      	add	r1, r6
    3e66:	9601      	str	r6, [sp, #4]
    3e68:	f8cd b008 	str.w	fp, [sp, #8]
    3e6c:	683b      	ldr	r3, [r7, #0]
    3e6e:	fa93 fc22 	shadd16	ip, r3, r2
    3e72:	fa9c fc22 	shadd16	ip, ip, r2
    3e76:	9b01      	ldr	r3, [sp, #4]
    3e78:	681b      	ldr	r3, [r3, #0]
    3e7a:	fa93 f322 	shadd16	r3, r3, r2
    3e7e:	fa93 f322 	shadd16	r3, r3, r2
    3e82:	fa9c f813 	qadd16	r8, ip, r3
    3e86:	fadc fc13 	qsub16	ip, ip, r3
    3e8a:	6803      	ldr	r3, [r0, #0]
    3e8c:	fa93 f322 	shadd16	r3, r3, r2
    3e90:	fa93 f922 	shadd16	r9, r3, r2
    3e94:	680b      	ldr	r3, [r1, #0]
    3e96:	fa93 f322 	shadd16	r3, r3, r2
    3e9a:	fa93 f322 	shadd16	r3, r3, r2
    3e9e:	fa99 f313 	qadd16	r3, r9, r3
    3ea2:	fa98 f923 	shadd16	r9, r8, r3
    3ea6:	f847 9b04 	str.w	r9, [r7], #4
    3eaa:	fad8 f313 	qsub16	r3, r8, r3
    3eae:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    3eb2:	fb29 fb03 	smuad	fp, r9, r3
    3eb6:	fb49 f913 	smusdx	r9, r9, r3
    3eba:	6803      	ldr	r3, [r0, #0]
    3ebc:	fa93 f322 	shadd16	r3, r3, r2
    3ec0:	fa93 f822 	shadd16	r8, r3, r2
    3ec4:	4b78      	ldr	r3, [pc, #480]	; (40a8 <arm_radix4_butterfly_q15+0x274>)
    3ec6:	ea09 0303 	and.w	r3, r9, r3
    3eca:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    3ece:	f840 3b04 	str.w	r3, [r0], #4
    3ed2:	680b      	ldr	r3, [r1, #0]
    3ed4:	fa93 f322 	shadd16	r3, r3, r2
    3ed8:	fa93 f322 	shadd16	r3, r3, r2
    3edc:	fad8 f313 	qsub16	r3, r8, r3
    3ee0:	faac f913 	qasx	r9, ip, r3
    3ee4:	faec fc13 	qsax	ip, ip, r3
    3ee8:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    3eec:	fb23 f80c 	smuad	r8, r3, ip
    3ef0:	fb43 fc1c 	smusdx	ip, r3, ip
    3ef4:	4b6c      	ldr	r3, [pc, #432]	; (40a8 <arm_radix4_butterfly_q15+0x274>)
    3ef6:	9e01      	ldr	r6, [sp, #4]
    3ef8:	ea0c 0303 	and.w	r3, ip, r3
    3efc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    3f00:	f846 3b04 	str.w	r3, [r6], #4
    3f04:	9601      	str	r6, [sp, #4]
    3f06:	462e      	mov	r6, r5
    3f08:	f85e 3005 	ldr.w	r3, [lr, r5]
    3f0c:	fb23 fc09 	smuad	ip, r3, r9
    3f10:	fb43 f919 	smusdx	r9, r3, r9
    3f14:	4b64      	ldr	r3, [pc, #400]	; (40a8 <arm_radix4_butterfly_q15+0x274>)
    3f16:	f1ba 0a01 	subs.w	sl, sl, #1
    3f1a:	9d02      	ldr	r5, [sp, #8]
    3f1c:	ea09 0303 	and.w	r3, r9, r3
    3f20:	442c      	add	r4, r5
    3f22:	9d04      	ldr	r5, [sp, #16]
    3f24:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    3f28:	442e      	add	r6, r5
    3f2a:	f841 3b04 	str.w	r3, [r1], #4
    3f2e:	4635      	mov	r5, r6
    3f30:	d19c      	bne.n	3e6c <arm_radix4_butterfly_q15+0x38>
    3f32:	f8dd b008 	ldr.w	fp, [sp, #8]
    3f36:	ea4f 038b 	mov.w	r3, fp, lsl #2
    3f3a:	9309      	str	r3, [sp, #36]	; 0x24
    3f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3f3e:	2b04      	cmp	r3, #4
    3f40:	f240 8086 	bls.w	4050 <arm_radix4_butterfly_q15+0x21c>
    3f44:	f8cd a010 	str.w	sl, [sp, #16]
    3f48:	930c      	str	r3, [sp, #48]	; 0x30
    3f4a:	9302      	str	r3, [sp, #8]
    3f4c:	9a02      	ldr	r2, [sp, #8]
    3f4e:	2100      	movs	r1, #0
    3f50:	0893      	lsrs	r3, r2, #2
    3f52:	9105      	str	r1, [sp, #20]
    3f54:	0097      	lsls	r7, r2, #2
    3f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3f58:	930d      	str	r3, [sp, #52]	; 0x34
    3f5a:	9206      	str	r2, [sp, #24]
    3f5c:	1e5a      	subs	r2, r3, #1
    3f5e:	009b      	lsls	r3, r3, #2
    3f60:	9108      	str	r1, [sp, #32]
    3f62:	920a      	str	r2, [sp, #40]	; 0x28
    3f64:	930b      	str	r3, [sp, #44]	; 0x2c
    3f66:	9907      	ldr	r1, [sp, #28]
    3f68:	9a08      	ldr	r2, [sp, #32]
    3f6a:	460d      	mov	r5, r1
    3f6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3f6e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3f72:	4611      	mov	r1, r2
    3f74:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    3f78:	9a07      	ldr	r2, [sp, #28]
    3f7a:	9e06      	ldr	r6, [sp, #24]
    3f7c:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    3f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f82:	1930      	adds	r0, r6, r4
    3f84:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    3f88:	18cb      	adds	r3, r1, r3
    3f8a:	9a05      	ldr	r2, [sp, #20]
    3f8c:	1825      	adds	r5, r4, r0
    3f8e:	9308      	str	r3, [sp, #32]
    3f90:	9b03      	ldr	r3, [sp, #12]
    3f92:	442c      	add	r4, r5
    3f94:	4293      	cmp	r3, r2
    3f96:	d946      	bls.n	4026 <arm_radix4_butterfly_q15+0x1f2>
    3f98:	9b02      	ldr	r3, [sp, #8]
    3f9a:	9501      	str	r5, [sp, #4]
    3f9c:	eb03 0e02 	add.w	lr, r3, r2
    3fa0:	9a01      	ldr	r2, [sp, #4]
    3fa2:	6833      	ldr	r3, [r6, #0]
    3fa4:	6812      	ldr	r2, [r2, #0]
    3fa6:	fa93 fa12 	qadd16	sl, r3, r2
    3faa:	fad3 f312 	qsub16	r3, r3, r2
    3fae:	6801      	ldr	r1, [r0, #0]
    3fb0:	6822      	ldr	r2, [r4, #0]
    3fb2:	fa91 f112 	qadd16	r1, r1, r2
    3fb6:	fa9a f221 	shadd16	r2, sl, r1
    3fba:	9d04      	ldr	r5, [sp, #16]
    3fbc:	fa92 f225 	shadd16	r2, r2, r5
    3fc0:	6032      	str	r2, [r6, #0]
    3fc2:	443e      	add	r6, r7
    3fc4:	fada f121 	shsub16	r1, sl, r1
    3fc8:	fb28 fb01 	smuad	fp, r8, r1
    3fcc:	fb48 f211 	smusdx	r2, r8, r1
    3fd0:	4935      	ldr	r1, [pc, #212]	; (40a8 <arm_radix4_butterfly_q15+0x274>)
    3fd2:	f8d0 a000 	ldr.w	sl, [r0]
    3fd6:	4011      	ands	r1, r2
    3fd8:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    3fdc:	6001      	str	r1, [r0, #0]
    3fde:	4438      	add	r0, r7
    3fe0:	6822      	ldr	r2, [r4, #0]
    3fe2:	fada f212 	qsub16	r2, sl, r2
    3fe6:	faa3 f122 	shasx	r1, r3, r2
    3fea:	fae3 f322 	shsax	r3, r3, r2
    3fee:	fb2c fb03 	smuad	fp, ip, r3
    3ff2:	fb4c f313 	smusdx	r3, ip, r3
    3ff6:	4a2c      	ldr	r2, [pc, #176]	; (40a8 <arm_radix4_butterfly_q15+0x274>)
    3ff8:	401a      	ands	r2, r3
    3ffa:	9b01      	ldr	r3, [sp, #4]
    3ffc:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    4000:	601a      	str	r2, [r3, #0]
    4002:	443b      	add	r3, r7
    4004:	9301      	str	r3, [sp, #4]
    4006:	fb29 f201 	smuad	r2, r9, r1
    400a:	fb49 f111 	smusdx	r1, r9, r1
    400e:	4b26      	ldr	r3, [pc, #152]	; (40a8 <arm_radix4_butterfly_q15+0x274>)
    4010:	46f2      	mov	sl, lr
    4012:	9d02      	ldr	r5, [sp, #8]
    4014:	400b      	ands	r3, r1
    4016:	44ae      	add	lr, r5
    4018:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    401c:	6023      	str	r3, [r4, #0]
    401e:	443c      	add	r4, r7
    4020:	9b03      	ldr	r3, [sp, #12]
    4022:	4553      	cmp	r3, sl
    4024:	d8bc      	bhi.n	3fa0 <arm_radix4_butterfly_q15+0x16c>
    4026:	9a06      	ldr	r2, [sp, #24]
    4028:	9b05      	ldr	r3, [sp, #20]
    402a:	3204      	adds	r2, #4
    402c:	3301      	adds	r3, #1
    402e:	9206      	str	r2, [sp, #24]
    4030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4032:	9305      	str	r3, [sp, #20]
    4034:	4293      	cmp	r3, r2
    4036:	d996      	bls.n	3f66 <arm_radix4_butterfly_q15+0x132>
    4038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    403a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    403c:	089b      	lsrs	r3, r3, #2
    403e:	9202      	str	r2, [sp, #8]
    4040:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4042:	2b04      	cmp	r3, #4
    4044:	930c      	str	r3, [sp, #48]	; 0x30
    4046:	ea4f 0282 	mov.w	r2, r2, lsl #2
    404a:	9209      	str	r2, [sp, #36]	; 0x24
    404c:	f63f af7e 	bhi.w	3f4c <arm_radix4_butterfly_q15+0x118>
    4050:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4052:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    4054:	3410      	adds	r4, #16
    4056:	f854 3c10 	ldr.w	r3, [r4, #-16]
    405a:	f854 7c08 	ldr.w	r7, [r4, #-8]
    405e:	fa93 f117 	qadd16	r1, r3, r7
    4062:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    4066:	f854 0c04 	ldr.w	r0, [r4, #-4]
    406a:	fa92 f510 	qadd16	r5, r2, r0
    406e:	fa91 f525 	shadd16	r5, r1, r5
    4072:	f844 5c10 	str.w	r5, [r4, #-16]
    4076:	fa92 f510 	qadd16	r5, r2, r0
    407a:	fad1 f125 	shsub16	r1, r1, r5
    407e:	f844 1c0c 	str.w	r1, [r4, #-12]
    4082:	fad3 f317 	qsub16	r3, r3, r7
    4086:	fad2 f210 	qsub16	r2, r2, r0
    408a:	fae3 f122 	shsax	r1, r3, r2
    408e:	f844 1c08 	str.w	r1, [r4, #-8]
    4092:	faa3 f322 	shasx	r3, r3, r2
    4096:	3e01      	subs	r6, #1
    4098:	f844 3c04 	str.w	r3, [r4, #-4]
    409c:	f104 0410 	add.w	r4, r4, #16
    40a0:	d1d9      	bne.n	4056 <arm_radix4_butterfly_q15+0x222>
    40a2:	b011      	add	sp, #68	; 0x44
    40a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40a8:	ffff0000 	.word	0xffff0000

000040ac <arm_radix4_butterfly_inverse_q15>:
    40ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40b0:	469b      	mov	fp, r3
    40b2:	b091      	sub	sp, #68	; 0x44
    40b4:	088b      	lsrs	r3, r1, #2
    40b6:	4606      	mov	r6, r0
    40b8:	900e      	str	r0, [sp, #56]	; 0x38
    40ba:	2500      	movs	r5, #0
    40bc:	4618      	mov	r0, r3
    40be:	9103      	str	r1, [sp, #12]
    40c0:	930f      	str	r3, [sp, #60]	; 0x3c
    40c2:	4637      	mov	r7, r6
    40c4:	0081      	lsls	r1, r0, #2
    40c6:	4682      	mov	sl, r0
    40c8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    40cc:	4696      	mov	lr, r2
    40ce:	1870      	adds	r0, r6, r1
    40d0:	9207      	str	r2, [sp, #28]
    40d2:	009b      	lsls	r3, r3, #2
    40d4:	462c      	mov	r4, r5
    40d6:	1846      	adds	r6, r0, r1
    40d8:	462a      	mov	r2, r5
    40da:	9304      	str	r3, [sp, #16]
    40dc:	4431      	add	r1, r6
    40de:	9601      	str	r6, [sp, #4]
    40e0:	f8cd b008 	str.w	fp, [sp, #8]
    40e4:	683b      	ldr	r3, [r7, #0]
    40e6:	fa93 fc22 	shadd16	ip, r3, r2
    40ea:	fa9c fc22 	shadd16	ip, ip, r2
    40ee:	9b01      	ldr	r3, [sp, #4]
    40f0:	681b      	ldr	r3, [r3, #0]
    40f2:	fa93 f322 	shadd16	r3, r3, r2
    40f6:	fa93 f322 	shadd16	r3, r3, r2
    40fa:	fa9c f813 	qadd16	r8, ip, r3
    40fe:	fadc fc13 	qsub16	ip, ip, r3
    4102:	6803      	ldr	r3, [r0, #0]
    4104:	fa93 f322 	shadd16	r3, r3, r2
    4108:	fa93 f922 	shadd16	r9, r3, r2
    410c:	680b      	ldr	r3, [r1, #0]
    410e:	fa93 f322 	shadd16	r3, r3, r2
    4112:	fa93 f322 	shadd16	r3, r3, r2
    4116:	fa99 f313 	qadd16	r3, r9, r3
    411a:	fa98 f923 	shadd16	r9, r8, r3
    411e:	f847 9b04 	str.w	r9, [r7], #4
    4122:	fad8 f313 	qsub16	r3, r8, r3
    4126:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    412a:	fb49 fb03 	smusd	fp, r9, r3
    412e:	fb29 f913 	smuadx	r9, r9, r3
    4132:	6803      	ldr	r3, [r0, #0]
    4134:	fa93 f322 	shadd16	r3, r3, r2
    4138:	fa93 f822 	shadd16	r8, r3, r2
    413c:	4b78      	ldr	r3, [pc, #480]	; (4320 <arm_radix4_butterfly_inverse_q15+0x274>)
    413e:	ea09 0303 	and.w	r3, r9, r3
    4142:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    4146:	f840 3b04 	str.w	r3, [r0], #4
    414a:	680b      	ldr	r3, [r1, #0]
    414c:	fa93 f322 	shadd16	r3, r3, r2
    4150:	fa93 f322 	shadd16	r3, r3, r2
    4154:	fad8 f313 	qsub16	r3, r8, r3
    4158:	faec f913 	qsax	r9, ip, r3
    415c:	faac fc13 	qasx	ip, ip, r3
    4160:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    4164:	fb43 f80c 	smusd	r8, r3, ip
    4168:	fb23 fc1c 	smuadx	ip, r3, ip
    416c:	4b6c      	ldr	r3, [pc, #432]	; (4320 <arm_radix4_butterfly_inverse_q15+0x274>)
    416e:	9e01      	ldr	r6, [sp, #4]
    4170:	ea0c 0303 	and.w	r3, ip, r3
    4174:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    4178:	f846 3b04 	str.w	r3, [r6], #4
    417c:	9601      	str	r6, [sp, #4]
    417e:	462e      	mov	r6, r5
    4180:	f85e 3005 	ldr.w	r3, [lr, r5]
    4184:	fb43 fc09 	smusd	ip, r3, r9
    4188:	fb23 f919 	smuadx	r9, r3, r9
    418c:	4b64      	ldr	r3, [pc, #400]	; (4320 <arm_radix4_butterfly_inverse_q15+0x274>)
    418e:	f1ba 0a01 	subs.w	sl, sl, #1
    4192:	9d02      	ldr	r5, [sp, #8]
    4194:	ea09 0303 	and.w	r3, r9, r3
    4198:	442c      	add	r4, r5
    419a:	9d04      	ldr	r5, [sp, #16]
    419c:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    41a0:	442e      	add	r6, r5
    41a2:	f841 3b04 	str.w	r3, [r1], #4
    41a6:	4635      	mov	r5, r6
    41a8:	d19c      	bne.n	40e4 <arm_radix4_butterfly_inverse_q15+0x38>
    41aa:	f8dd b008 	ldr.w	fp, [sp, #8]
    41ae:	ea4f 038b 	mov.w	r3, fp, lsl #2
    41b2:	9309      	str	r3, [sp, #36]	; 0x24
    41b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    41b6:	2b04      	cmp	r3, #4
    41b8:	f240 8086 	bls.w	42c8 <arm_radix4_butterfly_inverse_q15+0x21c>
    41bc:	f8cd a010 	str.w	sl, [sp, #16]
    41c0:	930c      	str	r3, [sp, #48]	; 0x30
    41c2:	9302      	str	r3, [sp, #8]
    41c4:	9a02      	ldr	r2, [sp, #8]
    41c6:	2100      	movs	r1, #0
    41c8:	0893      	lsrs	r3, r2, #2
    41ca:	9105      	str	r1, [sp, #20]
    41cc:	0097      	lsls	r7, r2, #2
    41ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    41d0:	930d      	str	r3, [sp, #52]	; 0x34
    41d2:	9206      	str	r2, [sp, #24]
    41d4:	1e5a      	subs	r2, r3, #1
    41d6:	009b      	lsls	r3, r3, #2
    41d8:	9108      	str	r1, [sp, #32]
    41da:	920a      	str	r2, [sp, #40]	; 0x28
    41dc:	930b      	str	r3, [sp, #44]	; 0x2c
    41de:	9907      	ldr	r1, [sp, #28]
    41e0:	9a08      	ldr	r2, [sp, #32]
    41e2:	460d      	mov	r5, r1
    41e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    41e6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    41ea:	4611      	mov	r1, r2
    41ec:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    41f0:	9a07      	ldr	r2, [sp, #28]
    41f2:	9e06      	ldr	r6, [sp, #24]
    41f4:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    41f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    41fa:	1930      	adds	r0, r6, r4
    41fc:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    4200:	18cb      	adds	r3, r1, r3
    4202:	9a05      	ldr	r2, [sp, #20]
    4204:	1825      	adds	r5, r4, r0
    4206:	9308      	str	r3, [sp, #32]
    4208:	9b03      	ldr	r3, [sp, #12]
    420a:	442c      	add	r4, r5
    420c:	4293      	cmp	r3, r2
    420e:	d946      	bls.n	429e <arm_radix4_butterfly_inverse_q15+0x1f2>
    4210:	9b02      	ldr	r3, [sp, #8]
    4212:	9501      	str	r5, [sp, #4]
    4214:	eb03 0e02 	add.w	lr, r3, r2
    4218:	9a01      	ldr	r2, [sp, #4]
    421a:	6833      	ldr	r3, [r6, #0]
    421c:	6812      	ldr	r2, [r2, #0]
    421e:	fa93 fa12 	qadd16	sl, r3, r2
    4222:	fad3 f312 	qsub16	r3, r3, r2
    4226:	6801      	ldr	r1, [r0, #0]
    4228:	6822      	ldr	r2, [r4, #0]
    422a:	fa91 f112 	qadd16	r1, r1, r2
    422e:	fa9a f221 	shadd16	r2, sl, r1
    4232:	9d04      	ldr	r5, [sp, #16]
    4234:	fa92 f225 	shadd16	r2, r2, r5
    4238:	6032      	str	r2, [r6, #0]
    423a:	443e      	add	r6, r7
    423c:	fada f121 	shsub16	r1, sl, r1
    4240:	fb48 fb01 	smusd	fp, r8, r1
    4244:	fb28 f211 	smuadx	r2, r8, r1
    4248:	4935      	ldr	r1, [pc, #212]	; (4320 <arm_radix4_butterfly_inverse_q15+0x274>)
    424a:	f8d0 a000 	ldr.w	sl, [r0]
    424e:	4011      	ands	r1, r2
    4250:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    4254:	6001      	str	r1, [r0, #0]
    4256:	4438      	add	r0, r7
    4258:	6822      	ldr	r2, [r4, #0]
    425a:	fada f212 	qsub16	r2, sl, r2
    425e:	fae3 f122 	shsax	r1, r3, r2
    4262:	faa3 f322 	shasx	r3, r3, r2
    4266:	fb4c fb03 	smusd	fp, ip, r3
    426a:	fb2c f313 	smuadx	r3, ip, r3
    426e:	4a2c      	ldr	r2, [pc, #176]	; (4320 <arm_radix4_butterfly_inverse_q15+0x274>)
    4270:	401a      	ands	r2, r3
    4272:	9b01      	ldr	r3, [sp, #4]
    4274:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    4278:	601a      	str	r2, [r3, #0]
    427a:	443b      	add	r3, r7
    427c:	9301      	str	r3, [sp, #4]
    427e:	fb49 f201 	smusd	r2, r9, r1
    4282:	fb29 f111 	smuadx	r1, r9, r1
    4286:	4b26      	ldr	r3, [pc, #152]	; (4320 <arm_radix4_butterfly_inverse_q15+0x274>)
    4288:	46f2      	mov	sl, lr
    428a:	9d02      	ldr	r5, [sp, #8]
    428c:	400b      	ands	r3, r1
    428e:	44ae      	add	lr, r5
    4290:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    4294:	6023      	str	r3, [r4, #0]
    4296:	443c      	add	r4, r7
    4298:	9b03      	ldr	r3, [sp, #12]
    429a:	4553      	cmp	r3, sl
    429c:	d8bc      	bhi.n	4218 <arm_radix4_butterfly_inverse_q15+0x16c>
    429e:	9a06      	ldr	r2, [sp, #24]
    42a0:	9b05      	ldr	r3, [sp, #20]
    42a2:	3204      	adds	r2, #4
    42a4:	3301      	adds	r3, #1
    42a6:	9206      	str	r2, [sp, #24]
    42a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    42aa:	9305      	str	r3, [sp, #20]
    42ac:	4293      	cmp	r3, r2
    42ae:	d996      	bls.n	41de <arm_radix4_butterfly_inverse_q15+0x132>
    42b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    42b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    42b4:	089b      	lsrs	r3, r3, #2
    42b6:	9202      	str	r2, [sp, #8]
    42b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    42ba:	2b04      	cmp	r3, #4
    42bc:	930c      	str	r3, [sp, #48]	; 0x30
    42be:	ea4f 0282 	mov.w	r2, r2, lsl #2
    42c2:	9209      	str	r2, [sp, #36]	; 0x24
    42c4:	f63f af7e 	bhi.w	41c4 <arm_radix4_butterfly_inverse_q15+0x118>
    42c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    42ca:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    42cc:	3410      	adds	r4, #16
    42ce:	f854 3c10 	ldr.w	r3, [r4, #-16]
    42d2:	f854 7c08 	ldr.w	r7, [r4, #-8]
    42d6:	fa93 f117 	qadd16	r1, r3, r7
    42da:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    42de:	f854 0c04 	ldr.w	r0, [r4, #-4]
    42e2:	fa92 f510 	qadd16	r5, r2, r0
    42e6:	fa91 f525 	shadd16	r5, r1, r5
    42ea:	f844 5c10 	str.w	r5, [r4, #-16]
    42ee:	fa92 f510 	qadd16	r5, r2, r0
    42f2:	fad1 f125 	shsub16	r1, r1, r5
    42f6:	f844 1c0c 	str.w	r1, [r4, #-12]
    42fa:	fad3 f317 	qsub16	r3, r3, r7
    42fe:	fad2 f210 	qsub16	r2, r2, r0
    4302:	faa3 f122 	shasx	r1, r3, r2
    4306:	f844 1c08 	str.w	r1, [r4, #-8]
    430a:	fae3 f322 	shsax	r3, r3, r2
    430e:	3e01      	subs	r6, #1
    4310:	f844 3c04 	str.w	r3, [r4, #-4]
    4314:	f104 0410 	add.w	r4, r4, #16
    4318:	d1d9      	bne.n	42ce <arm_radix4_butterfly_inverse_q15+0x222>
    431a:	b011      	add	sp, #68	; 0x44
    431c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4320:	ffff0000 	.word	0xffff0000

00004324 <arm_cfft_radix4_q15>:
    4324:	b570      	push	{r4, r5, r6, lr}
    4326:	7883      	ldrb	r3, [r0, #2]
    4328:	4604      	mov	r4, r0
    432a:	460d      	mov	r5, r1
    432c:	2b01      	cmp	r3, #1
    432e:	6862      	ldr	r2, [r4, #4]
    4330:	8983      	ldrh	r3, [r0, #12]
    4332:	4608      	mov	r0, r1
    4334:	8821      	ldrh	r1, [r4, #0]
    4336:	d005      	beq.n	4344 <arm_cfft_radix4_q15+0x20>
    4338:	f7ff fd7c 	bl	3e34 <arm_radix4_butterfly_q15>
    433c:	78e3      	ldrb	r3, [r4, #3]
    433e:	2b01      	cmp	r3, #1
    4340:	d005      	beq.n	434e <arm_cfft_radix4_q15+0x2a>
    4342:	bd70      	pop	{r4, r5, r6, pc}
    4344:	f7ff feb2 	bl	40ac <arm_radix4_butterfly_inverse_q15>
    4348:	78e3      	ldrb	r3, [r4, #3]
    434a:	2b01      	cmp	r3, #1
    434c:	d1f9      	bne.n	4342 <arm_cfft_radix4_q15+0x1e>
    434e:	4628      	mov	r0, r5
    4350:	68a3      	ldr	r3, [r4, #8]
    4352:	89e2      	ldrh	r2, [r4, #14]
    4354:	8821      	ldrh	r1, [r4, #0]
    4356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    435a:	f000 b855 	b.w	4408 <arm_bitreversal_q15>
    435e:	bf00      	nop

00004360 <arm_cfft_radix4_init_q15>:
    4360:	b410      	push	{r4}
    4362:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    4366:	4604      	mov	r4, r0
    4368:	4821      	ldr	r0, [pc, #132]	; (43f0 <arm_cfft_radix4_init_q15+0x90>)
    436a:	70a2      	strb	r2, [r4, #2]
    436c:	70e3      	strb	r3, [r4, #3]
    436e:	8021      	strh	r1, [r4, #0]
    4370:	6060      	str	r0, [r4, #4]
    4372:	d033      	beq.n	43dc <arm_cfft_radix4_init_q15+0x7c>
    4374:	d80b      	bhi.n	438e <arm_cfft_radix4_init_q15+0x2e>
    4376:	2910      	cmp	r1, #16
    4378:	d026      	beq.n	43c8 <arm_cfft_radix4_init_q15+0x68>
    437a:	2940      	cmp	r1, #64	; 0x40
    437c:	d116      	bne.n	43ac <arm_cfft_radix4_init_q15+0x4c>
    437e:	4b1d      	ldr	r3, [pc, #116]	; (43f4 <arm_cfft_radix4_init_q15+0x94>)
    4380:	2000      	movs	r0, #0
    4382:	81a1      	strh	r1, [r4, #12]
    4384:	81e1      	strh	r1, [r4, #14]
    4386:	60a3      	str	r3, [r4, #8]
    4388:	f85d 4b04 	ldr.w	r4, [sp], #4
    438c:	4770      	bx	lr
    438e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    4392:	d010      	beq.n	43b6 <arm_cfft_radix4_init_q15+0x56>
    4394:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    4398:	d108      	bne.n	43ac <arm_cfft_radix4_init_q15+0x4c>
    439a:	2301      	movs	r3, #1
    439c:	4a16      	ldr	r2, [pc, #88]	; (43f8 <arm_cfft_radix4_init_q15+0x98>)
    439e:	2000      	movs	r0, #0
    43a0:	81a3      	strh	r3, [r4, #12]
    43a2:	81e3      	strh	r3, [r4, #14]
    43a4:	60a2      	str	r2, [r4, #8]
    43a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    43aa:	4770      	bx	lr
    43ac:	f04f 30ff 	mov.w	r0, #4294967295
    43b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    43b4:	4770      	bx	lr
    43b6:	2304      	movs	r3, #4
    43b8:	4a10      	ldr	r2, [pc, #64]	; (43fc <arm_cfft_radix4_init_q15+0x9c>)
    43ba:	2000      	movs	r0, #0
    43bc:	81a3      	strh	r3, [r4, #12]
    43be:	81e3      	strh	r3, [r4, #14]
    43c0:	60a2      	str	r2, [r4, #8]
    43c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    43c6:	4770      	bx	lr
    43c8:	f44f 7380 	mov.w	r3, #256	; 0x100
    43cc:	4a0c      	ldr	r2, [pc, #48]	; (4400 <arm_cfft_radix4_init_q15+0xa0>)
    43ce:	2000      	movs	r0, #0
    43d0:	81a3      	strh	r3, [r4, #12]
    43d2:	81e3      	strh	r3, [r4, #14]
    43d4:	60a2      	str	r2, [r4, #8]
    43d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    43da:	4770      	bx	lr
    43dc:	2310      	movs	r3, #16
    43de:	4a09      	ldr	r2, [pc, #36]	; (4404 <arm_cfft_radix4_init_q15+0xa4>)
    43e0:	2000      	movs	r0, #0
    43e2:	81a3      	strh	r3, [r4, #12]
    43e4:	81e3      	strh	r3, [r4, #14]
    43e6:	60a2      	str	r2, [r4, #8]
    43e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    43ec:	4770      	bx	lr
    43ee:	bf00      	nop
    43f0:	20000d54 	.word	0x20000d54
    43f4:	20003dd2 	.word	0x20003dd2
    43f8:	20003d54 	.word	0x20003d54
    43fc:	20003d5a 	.word	0x20003d5a
    4400:	20003f52 	.word	0x20003f52
    4404:	20003d72 	.word	0x20003d72

00004408 <arm_bitreversal_q15>:
    4408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    440c:	0849      	lsrs	r1, r1, #1
    440e:	2600      	movs	r6, #0
    4410:	ea4f 0a42 	mov.w	sl, r2, lsl #1
    4414:	4605      	mov	r5, r0
    4416:	f101 0c01 	add.w	ip, r1, #1
    441a:	f1a1 0e02 	sub.w	lr, r1, #2
    441e:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    4422:	4634      	mov	r4, r6
    4424:	e011      	b.n	444a <arm_bitreversal_q15+0x42>
    4426:	42b4      	cmp	r4, r6
    4428:	d90d      	bls.n	4446 <arm_bitreversal_q15+0x3e>
    442a:	f8d5 9008 	ldr.w	r9, [r5, #8]
    442e:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4432:	60aa      	str	r2, [r5, #8]
    4434:	f840 9024 	str.w	r9, [r0, r4, lsl #2]
    4438:	f8d7 900c 	ldr.w	r9, [r7, #12]
    443c:	f850 2028 	ldr.w	r2, [r0, r8, lsl #2]
    4440:	60fa      	str	r2, [r7, #12]
    4442:	f840 9028 	str.w	r9, [r0, r8, lsl #2]
    4446:	3508      	adds	r5, #8
    4448:	3708      	adds	r7, #8
    444a:	440c      	add	r4, r1
    444c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    4450:	3602      	adds	r6, #2
    4452:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4456:	4576      	cmp	r6, lr
    4458:	606a      	str	r2, [r5, #4]
    445a:	f840 8024 	str.w	r8, [r0, r4, lsl #2]
    445e:	881c      	ldrh	r4, [r3, #0]
    4460:	4453      	add	r3, sl
    4462:	eb0c 0804 	add.w	r8, ip, r4
    4466:	d9de      	bls.n	4426 <arm_bitreversal_q15+0x1e>
    4468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    446c:	0000      	movs	r0, r0
	...

00004470 <sqrtf>:
    4470:	b500      	push	{lr}
    4472:	ed2d 8b02 	vpush	{d8}
    4476:	b08b      	sub	sp, #44	; 0x2c
    4478:	eeb0 8a40 	vmov.f32	s16, s0
    447c:	f000 f850 	bl	4520 <__ieee754_sqrtf>
    4480:	4b25      	ldr	r3, [pc, #148]	; (4518 <sqrtf+0xa8>)
    4482:	f993 3000 	ldrsb.w	r3, [r3]
    4486:	1c5a      	adds	r2, r3, #1
    4488:	d009      	beq.n	449e <sqrtf+0x2e>
    448a:	eeb4 8a48 	vcmp.f32	s16, s16
    448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4492:	d604      	bvs.n	449e <sqrtf+0x2e>
    4494:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    4498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    449c:	d404      	bmi.n	44a8 <sqrtf+0x38>
    449e:	b00b      	add	sp, #44	; 0x2c
    44a0:	ecbd 8b02 	vpop	{d8}
    44a4:	f85d fb04 	ldr.w	pc, [sp], #4
    44a8:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    44ac:	2201      	movs	r2, #1
    44ae:	491b      	ldr	r1, [pc, #108]	; (451c <sqrtf+0xac>)
    44b0:	9200      	str	r2, [sp, #0]
    44b2:	2200      	movs	r2, #0
    44b4:	ed8d 0b04 	vstr	d0, [sp, #16]
    44b8:	ed8d 0b02 	vstr	d0, [sp, #8]
    44bc:	9101      	str	r1, [sp, #4]
    44be:	9208      	str	r2, [sp, #32]
    44c0:	b1b3      	cbz	r3, 44f0 <sqrtf+0x80>
    44c2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 4510 <sqrtf+0xa0>
    44c6:	2b02      	cmp	r3, #2
    44c8:	ee87 6b07 	vdiv.f64	d6, d7, d7
    44cc:	ed8d 6b06 	vstr	d6, [sp, #24]
    44d0:	d112      	bne.n	44f8 <sqrtf+0x88>
    44d2:	f000 fb57 	bl	4b84 <__errno>
    44d6:	2321      	movs	r3, #33	; 0x21
    44d8:	6003      	str	r3, [r0, #0]
    44da:	9b08      	ldr	r3, [sp, #32]
    44dc:	b993      	cbnz	r3, 4504 <sqrtf+0x94>
    44de:	ed9d 0b06 	vldr	d0, [sp, #24]
    44e2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    44e6:	b00b      	add	sp, #44	; 0x2c
    44e8:	ecbd 8b02 	vpop	{d8}
    44ec:	f85d fb04 	ldr.w	pc, [sp], #4
    44f0:	2200      	movs	r2, #0
    44f2:	2300      	movs	r3, #0
    44f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    44f8:	4668      	mov	r0, sp
    44fa:	f000 f863 	bl	45c4 <matherr>
    44fe:	2800      	cmp	r0, #0
    4500:	d1eb      	bne.n	44da <sqrtf+0x6a>
    4502:	e7e6      	b.n	44d2 <sqrtf+0x62>
    4504:	f000 fb3e 	bl	4b84 <__errno>
    4508:	9b08      	ldr	r3, [sp, #32]
    450a:	6003      	str	r3, [r0, #0]
    450c:	e7e7      	b.n	44de <sqrtf+0x6e>
    450e:	bf00      	nop
	...
    4518:	2000489c 	.word	0x2000489c
    451c:	20004554 	.word	0x20004554

00004520 <__ieee754_sqrtf>:
    4520:	ee10 3a10 	vmov	r3, s0
    4524:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    4528:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    452c:	b470      	push	{r4, r5, r6}
    452e:	d230      	bcs.n	4592 <__ieee754_sqrtf+0x72>
    4530:	b36a      	cbz	r2, 458e <__ieee754_sqrtf+0x6e>
    4532:	2b00      	cmp	r3, #0
    4534:	db3d      	blt.n	45b2 <__ieee754_sqrtf+0x92>
    4536:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    453a:	ea4f 50e3 	mov.w	r0, r3, asr #23
    453e:	d32c      	bcc.n	459a <__ieee754_sqrtf+0x7a>
    4540:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
    4544:	f3c3 0316 	ubfx	r3, r3, #0, #23
    4548:	07d1      	lsls	r1, r2, #31
    454a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    454e:	bf48      	it	mi
    4550:	005b      	lslmi	r3, r3, #1
    4552:	2400      	movs	r4, #0
    4554:	1056      	asrs	r6, r2, #1
    4556:	005b      	lsls	r3, r3, #1
    4558:	4625      	mov	r5, r4
    455a:	2119      	movs	r1, #25
    455c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4560:	18a8      	adds	r0, r5, r2
    4562:	4298      	cmp	r0, r3
    4564:	dc02      	bgt.n	456c <__ieee754_sqrtf+0x4c>
    4566:	1a1b      	subs	r3, r3, r0
    4568:	1885      	adds	r5, r0, r2
    456a:	4414      	add	r4, r2
    456c:	3901      	subs	r1, #1
    456e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4572:	ea4f 0252 	mov.w	r2, r2, lsr #1
    4576:	d1f3      	bne.n	4560 <__ieee754_sqrtf+0x40>
    4578:	b113      	cbz	r3, 4580 <__ieee754_sqrtf+0x60>
    457a:	f004 0301 	and.w	r3, r4, #1
    457e:	441c      	add	r4, r3
    4580:	1064      	asrs	r4, r4, #1
    4582:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
    4586:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
    458a:	ee00 3a10 	vmov	s0, r3
    458e:	bc70      	pop	{r4, r5, r6}
    4590:	4770      	bx	lr
    4592:	eea0 0a00 	vfma.f32	s0, s0, s0
    4596:	bc70      	pop	{r4, r5, r6}
    4598:	4770      	bx	lr
    459a:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
    459e:	d001      	beq.n	45a4 <__ieee754_sqrtf+0x84>
    45a0:	e00c      	b.n	45bc <__ieee754_sqrtf+0x9c>
    45a2:	460a      	mov	r2, r1
    45a4:	005b      	lsls	r3, r3, #1
    45a6:	021c      	lsls	r4, r3, #8
    45a8:	f102 0101 	add.w	r1, r2, #1
    45ac:	d5f9      	bpl.n	45a2 <__ieee754_sqrtf+0x82>
    45ae:	1a80      	subs	r0, r0, r2
    45b0:	e7c6      	b.n	4540 <__ieee754_sqrtf+0x20>
    45b2:	ee70 7a40 	vsub.f32	s15, s0, s0
    45b6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
    45ba:	e7e8      	b.n	458e <__ieee754_sqrtf+0x6e>
    45bc:	f04f 32ff 	mov.w	r2, #4294967295
    45c0:	e7f5      	b.n	45ae <__ieee754_sqrtf+0x8e>
    45c2:	bf00      	nop

000045c4 <matherr>:
    45c4:	2000      	movs	r0, #0
    45c6:	4770      	bx	lr

000045c8 <__aeabi_atexit>:
    45c8:	460b      	mov	r3, r1
    45ca:	4601      	mov	r1, r0
    45cc:	4618      	mov	r0, r3
    45ce:	f000 bad3 	b.w	4b78 <__cxa_atexit>
    45d2:	bf00      	nop

000045d4 <__aeabi_frsub>:
    45d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    45d8:	e002      	b.n	45e0 <__addsf3>
    45da:	bf00      	nop

000045dc <__aeabi_fsub>:
    45dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000045e0 <__addsf3>:
    45e0:	0042      	lsls	r2, r0, #1
    45e2:	bf1f      	itttt	ne
    45e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    45e8:	ea92 0f03 	teqne	r2, r3
    45ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    45f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    45f4:	d06a      	beq.n	46cc <__addsf3+0xec>
    45f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    45fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    45fe:	bfc1      	itttt	gt
    4600:	18d2      	addgt	r2, r2, r3
    4602:	4041      	eorgt	r1, r0
    4604:	4048      	eorgt	r0, r1
    4606:	4041      	eorgt	r1, r0
    4608:	bfb8      	it	lt
    460a:	425b      	neglt	r3, r3
    460c:	2b19      	cmp	r3, #25
    460e:	bf88      	it	hi
    4610:	4770      	bxhi	lr
    4612:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4616:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    461a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    461e:	bf18      	it	ne
    4620:	4240      	negne	r0, r0
    4622:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4626:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    462a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    462e:	bf18      	it	ne
    4630:	4249      	negne	r1, r1
    4632:	ea92 0f03 	teq	r2, r3
    4636:	d03f      	beq.n	46b8 <__addsf3+0xd8>
    4638:	f1a2 0201 	sub.w	r2, r2, #1
    463c:	fa41 fc03 	asr.w	ip, r1, r3
    4640:	eb10 000c 	adds.w	r0, r0, ip
    4644:	f1c3 0320 	rsb	r3, r3, #32
    4648:	fa01 f103 	lsl.w	r1, r1, r3
    464c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4650:	d502      	bpl.n	4658 <__addsf3+0x78>
    4652:	4249      	negs	r1, r1
    4654:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4658:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    465c:	d313      	bcc.n	4686 <__addsf3+0xa6>
    465e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4662:	d306      	bcc.n	4672 <__addsf3+0x92>
    4664:	0840      	lsrs	r0, r0, #1
    4666:	ea4f 0131 	mov.w	r1, r1, rrx
    466a:	f102 0201 	add.w	r2, r2, #1
    466e:	2afe      	cmp	r2, #254	; 0xfe
    4670:	d251      	bcs.n	4716 <__addsf3+0x136>
    4672:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4676:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    467a:	bf08      	it	eq
    467c:	f020 0001 	biceq.w	r0, r0, #1
    4680:	ea40 0003 	orr.w	r0, r0, r3
    4684:	4770      	bx	lr
    4686:	0049      	lsls	r1, r1, #1
    4688:	eb40 0000 	adc.w	r0, r0, r0
    468c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4690:	f1a2 0201 	sub.w	r2, r2, #1
    4694:	d1ed      	bne.n	4672 <__addsf3+0x92>
    4696:	fab0 fc80 	clz	ip, r0
    469a:	f1ac 0c08 	sub.w	ip, ip, #8
    469e:	ebb2 020c 	subs.w	r2, r2, ip
    46a2:	fa00 f00c 	lsl.w	r0, r0, ip
    46a6:	bfaa      	itet	ge
    46a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    46ac:	4252      	neglt	r2, r2
    46ae:	4318      	orrge	r0, r3
    46b0:	bfbc      	itt	lt
    46b2:	40d0      	lsrlt	r0, r2
    46b4:	4318      	orrlt	r0, r3
    46b6:	4770      	bx	lr
    46b8:	f092 0f00 	teq	r2, #0
    46bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    46c0:	bf06      	itte	eq
    46c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    46c6:	3201      	addeq	r2, #1
    46c8:	3b01      	subne	r3, #1
    46ca:	e7b5      	b.n	4638 <__addsf3+0x58>
    46cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    46d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    46d4:	bf18      	it	ne
    46d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    46da:	d021      	beq.n	4720 <__addsf3+0x140>
    46dc:	ea92 0f03 	teq	r2, r3
    46e0:	d004      	beq.n	46ec <__addsf3+0x10c>
    46e2:	f092 0f00 	teq	r2, #0
    46e6:	bf08      	it	eq
    46e8:	4608      	moveq	r0, r1
    46ea:	4770      	bx	lr
    46ec:	ea90 0f01 	teq	r0, r1
    46f0:	bf1c      	itt	ne
    46f2:	2000      	movne	r0, #0
    46f4:	4770      	bxne	lr
    46f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    46fa:	d104      	bne.n	4706 <__addsf3+0x126>
    46fc:	0040      	lsls	r0, r0, #1
    46fe:	bf28      	it	cs
    4700:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4704:	4770      	bx	lr
    4706:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    470a:	bf3c      	itt	cc
    470c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4710:	4770      	bxcc	lr
    4712:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4716:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    471a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    471e:	4770      	bx	lr
    4720:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4724:	bf16      	itet	ne
    4726:	4608      	movne	r0, r1
    4728:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    472c:	4601      	movne	r1, r0
    472e:	0242      	lsls	r2, r0, #9
    4730:	bf06      	itte	eq
    4732:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4736:	ea90 0f01 	teqeq	r0, r1
    473a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    473e:	4770      	bx	lr

00004740 <__aeabi_ui2f>:
    4740:	f04f 0300 	mov.w	r3, #0
    4744:	e004      	b.n	4750 <__aeabi_i2f+0x8>
    4746:	bf00      	nop

00004748 <__aeabi_i2f>:
    4748:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    474c:	bf48      	it	mi
    474e:	4240      	negmi	r0, r0
    4750:	ea5f 0c00 	movs.w	ip, r0
    4754:	bf08      	it	eq
    4756:	4770      	bxeq	lr
    4758:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    475c:	4601      	mov	r1, r0
    475e:	f04f 0000 	mov.w	r0, #0
    4762:	e01c      	b.n	479e <__aeabi_l2f+0x2a>

00004764 <__aeabi_ul2f>:
    4764:	ea50 0201 	orrs.w	r2, r0, r1
    4768:	bf08      	it	eq
    476a:	4770      	bxeq	lr
    476c:	f04f 0300 	mov.w	r3, #0
    4770:	e00a      	b.n	4788 <__aeabi_l2f+0x14>
    4772:	bf00      	nop

00004774 <__aeabi_l2f>:
    4774:	ea50 0201 	orrs.w	r2, r0, r1
    4778:	bf08      	it	eq
    477a:	4770      	bxeq	lr
    477c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4780:	d502      	bpl.n	4788 <__aeabi_l2f+0x14>
    4782:	4240      	negs	r0, r0
    4784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4788:	ea5f 0c01 	movs.w	ip, r1
    478c:	bf02      	ittt	eq
    478e:	4684      	moveq	ip, r0
    4790:	4601      	moveq	r1, r0
    4792:	2000      	moveq	r0, #0
    4794:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4798:	bf08      	it	eq
    479a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    479e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    47a2:	fabc f28c 	clz	r2, ip
    47a6:	3a08      	subs	r2, #8
    47a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    47ac:	db10      	blt.n	47d0 <__aeabi_l2f+0x5c>
    47ae:	fa01 fc02 	lsl.w	ip, r1, r2
    47b2:	4463      	add	r3, ip
    47b4:	fa00 fc02 	lsl.w	ip, r0, r2
    47b8:	f1c2 0220 	rsb	r2, r2, #32
    47bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    47c0:	fa20 f202 	lsr.w	r2, r0, r2
    47c4:	eb43 0002 	adc.w	r0, r3, r2
    47c8:	bf08      	it	eq
    47ca:	f020 0001 	biceq.w	r0, r0, #1
    47ce:	4770      	bx	lr
    47d0:	f102 0220 	add.w	r2, r2, #32
    47d4:	fa01 fc02 	lsl.w	ip, r1, r2
    47d8:	f1c2 0220 	rsb	r2, r2, #32
    47dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    47e0:	fa21 f202 	lsr.w	r2, r1, r2
    47e4:	eb43 0002 	adc.w	r0, r3, r2
    47e8:	bf08      	it	eq
    47ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    47ee:	4770      	bx	lr

000047f0 <__aeabi_ldivmod>:
    47f0:	b97b      	cbnz	r3, 4812 <__aeabi_ldivmod+0x22>
    47f2:	b972      	cbnz	r2, 4812 <__aeabi_ldivmod+0x22>
    47f4:	2900      	cmp	r1, #0
    47f6:	bfbe      	ittt	lt
    47f8:	2000      	movlt	r0, #0
    47fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    47fe:	e006      	blt.n	480e <__aeabi_ldivmod+0x1e>
    4800:	bf08      	it	eq
    4802:	2800      	cmpeq	r0, #0
    4804:	bf1c      	itt	ne
    4806:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    480a:	f04f 30ff 	movne.w	r0, #4294967295
    480e:	f000 b9b1 	b.w	4b74 <__aeabi_idiv0>
    4812:	f1ad 0c08 	sub.w	ip, sp, #8
    4816:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    481a:	2900      	cmp	r1, #0
    481c:	db09      	blt.n	4832 <__aeabi_ldivmod+0x42>
    481e:	2b00      	cmp	r3, #0
    4820:	db1a      	blt.n	4858 <__aeabi_ldivmod+0x68>
    4822:	f000 f835 	bl	4890 <__udivmoddi4>
    4826:	f8dd e004 	ldr.w	lr, [sp, #4]
    482a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    482e:	b004      	add	sp, #16
    4830:	4770      	bx	lr
    4832:	4240      	negs	r0, r0
    4834:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4838:	2b00      	cmp	r3, #0
    483a:	db1b      	blt.n	4874 <__aeabi_ldivmod+0x84>
    483c:	f000 f828 	bl	4890 <__udivmoddi4>
    4840:	f8dd e004 	ldr.w	lr, [sp, #4]
    4844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4848:	b004      	add	sp, #16
    484a:	4240      	negs	r0, r0
    484c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4850:	4252      	negs	r2, r2
    4852:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4856:	4770      	bx	lr
    4858:	4252      	negs	r2, r2
    485a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    485e:	f000 f817 	bl	4890 <__udivmoddi4>
    4862:	f8dd e004 	ldr.w	lr, [sp, #4]
    4866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    486a:	b004      	add	sp, #16
    486c:	4240      	negs	r0, r0
    486e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4872:	4770      	bx	lr
    4874:	4252      	negs	r2, r2
    4876:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    487a:	f000 f809 	bl	4890 <__udivmoddi4>
    487e:	f8dd e004 	ldr.w	lr, [sp, #4]
    4882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4886:	b004      	add	sp, #16
    4888:	4252      	negs	r2, r2
    488a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    488e:	4770      	bx	lr

00004890 <__udivmoddi4>:
    4890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4894:	468c      	mov	ip, r1
    4896:	460e      	mov	r6, r1
    4898:	4604      	mov	r4, r0
    489a:	9d08      	ldr	r5, [sp, #32]
    489c:	2b00      	cmp	r3, #0
    489e:	d150      	bne.n	4942 <__udivmoddi4+0xb2>
    48a0:	428a      	cmp	r2, r1
    48a2:	4617      	mov	r7, r2
    48a4:	d96c      	bls.n	4980 <__udivmoddi4+0xf0>
    48a6:	fab2 fe82 	clz	lr, r2
    48aa:	f1be 0f00 	cmp.w	lr, #0
    48ae:	d00b      	beq.n	48c8 <__udivmoddi4+0x38>
    48b0:	f1ce 0420 	rsb	r4, lr, #32
    48b4:	fa20 f404 	lsr.w	r4, r0, r4
    48b8:	fa01 f60e 	lsl.w	r6, r1, lr
    48bc:	ea44 0c06 	orr.w	ip, r4, r6
    48c0:	fa02 f70e 	lsl.w	r7, r2, lr
    48c4:	fa00 f40e 	lsl.w	r4, r0, lr
    48c8:	ea4f 4917 	mov.w	r9, r7, lsr #16
    48cc:	0c22      	lsrs	r2, r4, #16
    48ce:	fbbc f0f9 	udiv	r0, ip, r9
    48d2:	fa1f f887 	uxth.w	r8, r7
    48d6:	fb09 c610 	mls	r6, r9, r0, ip
    48da:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    48de:	fb00 f308 	mul.w	r3, r0, r8
    48e2:	42b3      	cmp	r3, r6
    48e4:	d909      	bls.n	48fa <__udivmoddi4+0x6a>
    48e6:	19f6      	adds	r6, r6, r7
    48e8:	f100 32ff 	add.w	r2, r0, #4294967295
    48ec:	f080 8122 	bcs.w	4b34 <__udivmoddi4+0x2a4>
    48f0:	42b3      	cmp	r3, r6
    48f2:	f240 811f 	bls.w	4b34 <__udivmoddi4+0x2a4>
    48f6:	3802      	subs	r0, #2
    48f8:	443e      	add	r6, r7
    48fa:	1af6      	subs	r6, r6, r3
    48fc:	b2a2      	uxth	r2, r4
    48fe:	fbb6 f3f9 	udiv	r3, r6, r9
    4902:	fb09 6613 	mls	r6, r9, r3, r6
    4906:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    490a:	fb03 f808 	mul.w	r8, r3, r8
    490e:	45a0      	cmp	r8, r4
    4910:	d909      	bls.n	4926 <__udivmoddi4+0x96>
    4912:	19e4      	adds	r4, r4, r7
    4914:	f103 32ff 	add.w	r2, r3, #4294967295
    4918:	f080 810a 	bcs.w	4b30 <__udivmoddi4+0x2a0>
    491c:	45a0      	cmp	r8, r4
    491e:	f240 8107 	bls.w	4b30 <__udivmoddi4+0x2a0>
    4922:	3b02      	subs	r3, #2
    4924:	443c      	add	r4, r7
    4926:	ebc8 0404 	rsb	r4, r8, r4
    492a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    492e:	2100      	movs	r1, #0
    4930:	2d00      	cmp	r5, #0
    4932:	d062      	beq.n	49fa <__udivmoddi4+0x16a>
    4934:	fa24 f40e 	lsr.w	r4, r4, lr
    4938:	2300      	movs	r3, #0
    493a:	602c      	str	r4, [r5, #0]
    493c:	606b      	str	r3, [r5, #4]
    493e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4942:	428b      	cmp	r3, r1
    4944:	d907      	bls.n	4956 <__udivmoddi4+0xc6>
    4946:	2d00      	cmp	r5, #0
    4948:	d055      	beq.n	49f6 <__udivmoddi4+0x166>
    494a:	2100      	movs	r1, #0
    494c:	e885 0041 	stmia.w	r5, {r0, r6}
    4950:	4608      	mov	r0, r1
    4952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4956:	fab3 f183 	clz	r1, r3
    495a:	2900      	cmp	r1, #0
    495c:	f040 8090 	bne.w	4a80 <__udivmoddi4+0x1f0>
    4960:	42b3      	cmp	r3, r6
    4962:	d302      	bcc.n	496a <__udivmoddi4+0xda>
    4964:	4282      	cmp	r2, r0
    4966:	f200 80f8 	bhi.w	4b5a <__udivmoddi4+0x2ca>
    496a:	1a84      	subs	r4, r0, r2
    496c:	eb66 0603 	sbc.w	r6, r6, r3
    4970:	2001      	movs	r0, #1
    4972:	46b4      	mov	ip, r6
    4974:	2d00      	cmp	r5, #0
    4976:	d040      	beq.n	49fa <__udivmoddi4+0x16a>
    4978:	e885 1010 	stmia.w	r5, {r4, ip}
    497c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4980:	b912      	cbnz	r2, 4988 <__udivmoddi4+0xf8>
    4982:	2701      	movs	r7, #1
    4984:	fbb7 f7f2 	udiv	r7, r7, r2
    4988:	fab7 fe87 	clz	lr, r7
    498c:	f1be 0f00 	cmp.w	lr, #0
    4990:	d135      	bne.n	49fe <__udivmoddi4+0x16e>
    4992:	1bf3      	subs	r3, r6, r7
    4994:	ea4f 4817 	mov.w	r8, r7, lsr #16
    4998:	fa1f fc87 	uxth.w	ip, r7
    499c:	2101      	movs	r1, #1
    499e:	fbb3 f0f8 	udiv	r0, r3, r8
    49a2:	0c22      	lsrs	r2, r4, #16
    49a4:	fb08 3610 	mls	r6, r8, r0, r3
    49a8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    49ac:	fb0c f300 	mul.w	r3, ip, r0
    49b0:	42b3      	cmp	r3, r6
    49b2:	d907      	bls.n	49c4 <__udivmoddi4+0x134>
    49b4:	19f6      	adds	r6, r6, r7
    49b6:	f100 32ff 	add.w	r2, r0, #4294967295
    49ba:	d202      	bcs.n	49c2 <__udivmoddi4+0x132>
    49bc:	42b3      	cmp	r3, r6
    49be:	f200 80ce 	bhi.w	4b5e <__udivmoddi4+0x2ce>
    49c2:	4610      	mov	r0, r2
    49c4:	1af6      	subs	r6, r6, r3
    49c6:	b2a2      	uxth	r2, r4
    49c8:	fbb6 f3f8 	udiv	r3, r6, r8
    49cc:	fb08 6613 	mls	r6, r8, r3, r6
    49d0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    49d4:	fb0c fc03 	mul.w	ip, ip, r3
    49d8:	45a4      	cmp	ip, r4
    49da:	d907      	bls.n	49ec <__udivmoddi4+0x15c>
    49dc:	19e4      	adds	r4, r4, r7
    49de:	f103 32ff 	add.w	r2, r3, #4294967295
    49e2:	d202      	bcs.n	49ea <__udivmoddi4+0x15a>
    49e4:	45a4      	cmp	ip, r4
    49e6:	f200 80b5 	bhi.w	4b54 <__udivmoddi4+0x2c4>
    49ea:	4613      	mov	r3, r2
    49ec:	ebcc 0404 	rsb	r4, ip, r4
    49f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    49f4:	e79c      	b.n	4930 <__udivmoddi4+0xa0>
    49f6:	4629      	mov	r1, r5
    49f8:	4628      	mov	r0, r5
    49fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    49fe:	f1ce 0120 	rsb	r1, lr, #32
    4a02:	fa06 f30e 	lsl.w	r3, r6, lr
    4a06:	fa07 f70e 	lsl.w	r7, r7, lr
    4a0a:	fa20 f901 	lsr.w	r9, r0, r1
    4a0e:	ea4f 4817 	mov.w	r8, r7, lsr #16
    4a12:	40ce      	lsrs	r6, r1
    4a14:	ea49 0903 	orr.w	r9, r9, r3
    4a18:	fbb6 faf8 	udiv	sl, r6, r8
    4a1c:	ea4f 4419 	mov.w	r4, r9, lsr #16
    4a20:	fb08 661a 	mls	r6, r8, sl, r6
    4a24:	fa1f fc87 	uxth.w	ip, r7
    4a28:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    4a2c:	fb0a f20c 	mul.w	r2, sl, ip
    4a30:	429a      	cmp	r2, r3
    4a32:	fa00 f40e 	lsl.w	r4, r0, lr
    4a36:	d90a      	bls.n	4a4e <__udivmoddi4+0x1be>
    4a38:	19db      	adds	r3, r3, r7
    4a3a:	f10a 31ff 	add.w	r1, sl, #4294967295
    4a3e:	f080 8087 	bcs.w	4b50 <__udivmoddi4+0x2c0>
    4a42:	429a      	cmp	r2, r3
    4a44:	f240 8084 	bls.w	4b50 <__udivmoddi4+0x2c0>
    4a48:	f1aa 0a02 	sub.w	sl, sl, #2
    4a4c:	443b      	add	r3, r7
    4a4e:	1a9b      	subs	r3, r3, r2
    4a50:	fa1f f989 	uxth.w	r9, r9
    4a54:	fbb3 f1f8 	udiv	r1, r3, r8
    4a58:	fb08 3311 	mls	r3, r8, r1, r3
    4a5c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    4a60:	fb01 f60c 	mul.w	r6, r1, ip
    4a64:	429e      	cmp	r6, r3
    4a66:	d907      	bls.n	4a78 <__udivmoddi4+0x1e8>
    4a68:	19db      	adds	r3, r3, r7
    4a6a:	f101 32ff 	add.w	r2, r1, #4294967295
    4a6e:	d26b      	bcs.n	4b48 <__udivmoddi4+0x2b8>
    4a70:	429e      	cmp	r6, r3
    4a72:	d969      	bls.n	4b48 <__udivmoddi4+0x2b8>
    4a74:	3902      	subs	r1, #2
    4a76:	443b      	add	r3, r7
    4a78:	1b9b      	subs	r3, r3, r6
    4a7a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    4a7e:	e78e      	b.n	499e <__udivmoddi4+0x10e>
    4a80:	f1c1 0e20 	rsb	lr, r1, #32
    4a84:	fa22 f40e 	lsr.w	r4, r2, lr
    4a88:	408b      	lsls	r3, r1
    4a8a:	4323      	orrs	r3, r4
    4a8c:	fa20 f70e 	lsr.w	r7, r0, lr
    4a90:	fa06 f401 	lsl.w	r4, r6, r1
    4a94:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    4a98:	fa26 f60e 	lsr.w	r6, r6, lr
    4a9c:	433c      	orrs	r4, r7
    4a9e:	fbb6 f9fc 	udiv	r9, r6, ip
    4aa2:	0c27      	lsrs	r7, r4, #16
    4aa4:	fb0c 6619 	mls	r6, ip, r9, r6
    4aa8:	fa1f f883 	uxth.w	r8, r3
    4aac:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    4ab0:	fb09 f708 	mul.w	r7, r9, r8
    4ab4:	42b7      	cmp	r7, r6
    4ab6:	fa02 f201 	lsl.w	r2, r2, r1
    4aba:	fa00 fa01 	lsl.w	sl, r0, r1
    4abe:	d908      	bls.n	4ad2 <__udivmoddi4+0x242>
    4ac0:	18f6      	adds	r6, r6, r3
    4ac2:	f109 30ff 	add.w	r0, r9, #4294967295
    4ac6:	d241      	bcs.n	4b4c <__udivmoddi4+0x2bc>
    4ac8:	42b7      	cmp	r7, r6
    4aca:	d93f      	bls.n	4b4c <__udivmoddi4+0x2bc>
    4acc:	f1a9 0902 	sub.w	r9, r9, #2
    4ad0:	441e      	add	r6, r3
    4ad2:	1bf6      	subs	r6, r6, r7
    4ad4:	b2a0      	uxth	r0, r4
    4ad6:	fbb6 f4fc 	udiv	r4, r6, ip
    4ada:	fb0c 6614 	mls	r6, ip, r4, r6
    4ade:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    4ae2:	fb04 f808 	mul.w	r8, r4, r8
    4ae6:	45b8      	cmp	r8, r7
    4ae8:	d907      	bls.n	4afa <__udivmoddi4+0x26a>
    4aea:	18ff      	adds	r7, r7, r3
    4aec:	f104 30ff 	add.w	r0, r4, #4294967295
    4af0:	d228      	bcs.n	4b44 <__udivmoddi4+0x2b4>
    4af2:	45b8      	cmp	r8, r7
    4af4:	d926      	bls.n	4b44 <__udivmoddi4+0x2b4>
    4af6:	3c02      	subs	r4, #2
    4af8:	441f      	add	r7, r3
    4afa:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    4afe:	ebc8 0707 	rsb	r7, r8, r7
    4b02:	fba0 8902 	umull	r8, r9, r0, r2
    4b06:	454f      	cmp	r7, r9
    4b08:	4644      	mov	r4, r8
    4b0a:	464e      	mov	r6, r9
    4b0c:	d314      	bcc.n	4b38 <__udivmoddi4+0x2a8>
    4b0e:	d029      	beq.n	4b64 <__udivmoddi4+0x2d4>
    4b10:	b365      	cbz	r5, 4b6c <__udivmoddi4+0x2dc>
    4b12:	ebba 0304 	subs.w	r3, sl, r4
    4b16:	eb67 0706 	sbc.w	r7, r7, r6
    4b1a:	fa07 fe0e 	lsl.w	lr, r7, lr
    4b1e:	40cb      	lsrs	r3, r1
    4b20:	40cf      	lsrs	r7, r1
    4b22:	ea4e 0303 	orr.w	r3, lr, r3
    4b26:	e885 0088 	stmia.w	r5, {r3, r7}
    4b2a:	2100      	movs	r1, #0
    4b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b30:	4613      	mov	r3, r2
    4b32:	e6f8      	b.n	4926 <__udivmoddi4+0x96>
    4b34:	4610      	mov	r0, r2
    4b36:	e6e0      	b.n	48fa <__udivmoddi4+0x6a>
    4b38:	ebb8 0402 	subs.w	r4, r8, r2
    4b3c:	eb69 0603 	sbc.w	r6, r9, r3
    4b40:	3801      	subs	r0, #1
    4b42:	e7e5      	b.n	4b10 <__udivmoddi4+0x280>
    4b44:	4604      	mov	r4, r0
    4b46:	e7d8      	b.n	4afa <__udivmoddi4+0x26a>
    4b48:	4611      	mov	r1, r2
    4b4a:	e795      	b.n	4a78 <__udivmoddi4+0x1e8>
    4b4c:	4681      	mov	r9, r0
    4b4e:	e7c0      	b.n	4ad2 <__udivmoddi4+0x242>
    4b50:	468a      	mov	sl, r1
    4b52:	e77c      	b.n	4a4e <__udivmoddi4+0x1be>
    4b54:	3b02      	subs	r3, #2
    4b56:	443c      	add	r4, r7
    4b58:	e748      	b.n	49ec <__udivmoddi4+0x15c>
    4b5a:	4608      	mov	r0, r1
    4b5c:	e70a      	b.n	4974 <__udivmoddi4+0xe4>
    4b5e:	3802      	subs	r0, #2
    4b60:	443e      	add	r6, r7
    4b62:	e72f      	b.n	49c4 <__udivmoddi4+0x134>
    4b64:	45c2      	cmp	sl, r8
    4b66:	d3e7      	bcc.n	4b38 <__udivmoddi4+0x2a8>
    4b68:	463e      	mov	r6, r7
    4b6a:	e7d1      	b.n	4b10 <__udivmoddi4+0x280>
    4b6c:	4629      	mov	r1, r5
    4b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b72:	bf00      	nop

00004b74 <__aeabi_idiv0>:
    4b74:	4770      	bx	lr
    4b76:	bf00      	nop

00004b78 <__cxa_atexit>:
    4b78:	4613      	mov	r3, r2
    4b7a:	460a      	mov	r2, r1
    4b7c:	4601      	mov	r1, r0
    4b7e:	2002      	movs	r0, #2
    4b80:	f000 be82 	b.w	5888 <__register_exitproc>

00004b84 <__errno>:
    4b84:	4b01      	ldr	r3, [pc, #4]	; (4b8c <__errno+0x8>)
    4b86:	6818      	ldr	r0, [r3, #0]
    4b88:	4770      	bx	lr
    4b8a:	bf00      	nop
    4b8c:	20004cc8 	.word	0x20004cc8

00004b90 <__libc_init_array>:
    4b90:	b570      	push	{r4, r5, r6, lr}
    4b92:	4e0f      	ldr	r6, [pc, #60]	; (4bd0 <__libc_init_array+0x40>)
    4b94:	4d0f      	ldr	r5, [pc, #60]	; (4bd4 <__libc_init_array+0x44>)
    4b96:	1b76      	subs	r6, r6, r5
    4b98:	10b6      	asrs	r6, r6, #2
    4b9a:	bf18      	it	ne
    4b9c:	2400      	movne	r4, #0
    4b9e:	d005      	beq.n	4bac <__libc_init_array+0x1c>
    4ba0:	3401      	adds	r4, #1
    4ba2:	f855 3b04 	ldr.w	r3, [r5], #4
    4ba6:	4798      	blx	r3
    4ba8:	42a6      	cmp	r6, r4
    4baa:	d1f9      	bne.n	4ba0 <__libc_init_array+0x10>
    4bac:	4e0a      	ldr	r6, [pc, #40]	; (4bd8 <__libc_init_array+0x48>)
    4bae:	4d0b      	ldr	r5, [pc, #44]	; (4bdc <__libc_init_array+0x4c>)
    4bb0:	1b76      	subs	r6, r6, r5
    4bb2:	f003 fdf1 	bl	8798 <___init_veneer>
    4bb6:	10b6      	asrs	r6, r6, #2
    4bb8:	bf18      	it	ne
    4bba:	2400      	movne	r4, #0
    4bbc:	d006      	beq.n	4bcc <__libc_init_array+0x3c>
    4bbe:	3401      	adds	r4, #1
    4bc0:	f855 3b04 	ldr.w	r3, [r5], #4
    4bc4:	4798      	blx	r3
    4bc6:	42a6      	cmp	r6, r4
    4bc8:	d1f9      	bne.n	4bbe <__libc_init_array+0x2e>
    4bca:	bd70      	pop	{r4, r5, r6, pc}
    4bcc:	bd70      	pop	{r4, r5, r6, pc}
    4bce:	bf00      	nop
    4bd0:	60001808 	.word	0x60001808
    4bd4:	60001808 	.word	0x60001808
    4bd8:	60001878 	.word	0x60001878
    4bdc:	60001808 	.word	0x60001808

00004be0 <malloc>:
    4be0:	4b02      	ldr	r3, [pc, #8]	; (4bec <malloc+0xc>)
    4be2:	4601      	mov	r1, r0
    4be4:	6818      	ldr	r0, [r3, #0]
    4be6:	f000 b803 	b.w	4bf0 <_malloc_r>
    4bea:	bf00      	nop
    4bec:	20004cc8 	.word	0x20004cc8

00004bf0 <_malloc_r>:
    4bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bf4:	f101 050b 	add.w	r5, r1, #11
    4bf8:	2d16      	cmp	r5, #22
    4bfa:	b083      	sub	sp, #12
    4bfc:	4606      	mov	r6, r0
    4bfe:	f240 809f 	bls.w	4d40 <_malloc_r+0x150>
    4c02:	f035 0507 	bics.w	r5, r5, #7
    4c06:	f100 80bf 	bmi.w	4d88 <_malloc_r+0x198>
    4c0a:	42a9      	cmp	r1, r5
    4c0c:	f200 80bc 	bhi.w	4d88 <_malloc_r+0x198>
    4c10:	f000 fb6e 	bl	52f0 <__malloc_lock>
    4c14:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    4c18:	f0c0 829c 	bcc.w	5154 <_malloc_r+0x564>
    4c1c:	0a6b      	lsrs	r3, r5, #9
    4c1e:	f000 80ba 	beq.w	4d96 <_malloc_r+0x1a6>
    4c22:	2b04      	cmp	r3, #4
    4c24:	f200 8183 	bhi.w	4f2e <_malloc_r+0x33e>
    4c28:	09a8      	lsrs	r0, r5, #6
    4c2a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    4c2e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4c32:	3038      	adds	r0, #56	; 0x38
    4c34:	4fc4      	ldr	r7, [pc, #784]	; (4f48 <_malloc_r+0x358>)
    4c36:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4c3a:	f1a3 0108 	sub.w	r1, r3, #8
    4c3e:	685c      	ldr	r4, [r3, #4]
    4c40:	42a1      	cmp	r1, r4
    4c42:	d107      	bne.n	4c54 <_malloc_r+0x64>
    4c44:	e0ac      	b.n	4da0 <_malloc_r+0x1b0>
    4c46:	2a00      	cmp	r2, #0
    4c48:	f280 80ac 	bge.w	4da4 <_malloc_r+0x1b4>
    4c4c:	68e4      	ldr	r4, [r4, #12]
    4c4e:	42a1      	cmp	r1, r4
    4c50:	f000 80a6 	beq.w	4da0 <_malloc_r+0x1b0>
    4c54:	6863      	ldr	r3, [r4, #4]
    4c56:	f023 0303 	bic.w	r3, r3, #3
    4c5a:	1b5a      	subs	r2, r3, r5
    4c5c:	2a0f      	cmp	r2, #15
    4c5e:	ddf2      	ble.n	4c46 <_malloc_r+0x56>
    4c60:	49b9      	ldr	r1, [pc, #740]	; (4f48 <_malloc_r+0x358>)
    4c62:	693c      	ldr	r4, [r7, #16]
    4c64:	f101 0e08 	add.w	lr, r1, #8
    4c68:	4574      	cmp	r4, lr
    4c6a:	f000 81b3 	beq.w	4fd4 <_malloc_r+0x3e4>
    4c6e:	6863      	ldr	r3, [r4, #4]
    4c70:	f023 0303 	bic.w	r3, r3, #3
    4c74:	1b5a      	subs	r2, r3, r5
    4c76:	2a0f      	cmp	r2, #15
    4c78:	f300 8199 	bgt.w	4fae <_malloc_r+0x3be>
    4c7c:	2a00      	cmp	r2, #0
    4c7e:	f8c1 e014 	str.w	lr, [r1, #20]
    4c82:	f8c1 e010 	str.w	lr, [r1, #16]
    4c86:	f280 809e 	bge.w	4dc6 <_malloc_r+0x1d6>
    4c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4c8e:	f080 8167 	bcs.w	4f60 <_malloc_r+0x370>
    4c92:	08db      	lsrs	r3, r3, #3
    4c94:	f103 0c01 	add.w	ip, r3, #1
    4c98:	2201      	movs	r2, #1
    4c9a:	109b      	asrs	r3, r3, #2
    4c9c:	fa02 f303 	lsl.w	r3, r2, r3
    4ca0:	684a      	ldr	r2, [r1, #4]
    4ca2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    4ca6:	f8c4 8008 	str.w	r8, [r4, #8]
    4caa:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    4cae:	431a      	orrs	r2, r3
    4cb0:	f1a9 0308 	sub.w	r3, r9, #8
    4cb4:	60e3      	str	r3, [r4, #12]
    4cb6:	604a      	str	r2, [r1, #4]
    4cb8:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    4cbc:	f8c8 400c 	str.w	r4, [r8, #12]
    4cc0:	1083      	asrs	r3, r0, #2
    4cc2:	2401      	movs	r4, #1
    4cc4:	409c      	lsls	r4, r3
    4cc6:	4294      	cmp	r4, r2
    4cc8:	f200 808a 	bhi.w	4de0 <_malloc_r+0x1f0>
    4ccc:	4214      	tst	r4, r2
    4cce:	d106      	bne.n	4cde <_malloc_r+0xee>
    4cd0:	f020 0003 	bic.w	r0, r0, #3
    4cd4:	0064      	lsls	r4, r4, #1
    4cd6:	4214      	tst	r4, r2
    4cd8:	f100 0004 	add.w	r0, r0, #4
    4cdc:	d0fa      	beq.n	4cd4 <_malloc_r+0xe4>
    4cde:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    4ce2:	46cc      	mov	ip, r9
    4ce4:	4680      	mov	r8, r0
    4ce6:	f8dc 100c 	ldr.w	r1, [ip, #12]
    4cea:	458c      	cmp	ip, r1
    4cec:	d107      	bne.n	4cfe <_malloc_r+0x10e>
    4cee:	e173      	b.n	4fd8 <_malloc_r+0x3e8>
    4cf0:	2a00      	cmp	r2, #0
    4cf2:	f280 8181 	bge.w	4ff8 <_malloc_r+0x408>
    4cf6:	68c9      	ldr	r1, [r1, #12]
    4cf8:	458c      	cmp	ip, r1
    4cfa:	f000 816d 	beq.w	4fd8 <_malloc_r+0x3e8>
    4cfe:	684b      	ldr	r3, [r1, #4]
    4d00:	f023 0303 	bic.w	r3, r3, #3
    4d04:	1b5a      	subs	r2, r3, r5
    4d06:	2a0f      	cmp	r2, #15
    4d08:	ddf2      	ble.n	4cf0 <_malloc_r+0x100>
    4d0a:	460c      	mov	r4, r1
    4d0c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    4d10:	f854 8f08 	ldr.w	r8, [r4, #8]!
    4d14:	194b      	adds	r3, r1, r5
    4d16:	f045 0501 	orr.w	r5, r5, #1
    4d1a:	604d      	str	r5, [r1, #4]
    4d1c:	f042 0101 	orr.w	r1, r2, #1
    4d20:	f8c8 c00c 	str.w	ip, [r8, #12]
    4d24:	4630      	mov	r0, r6
    4d26:	f8cc 8008 	str.w	r8, [ip, #8]
    4d2a:	617b      	str	r3, [r7, #20]
    4d2c:	613b      	str	r3, [r7, #16]
    4d2e:	f8c3 e00c 	str.w	lr, [r3, #12]
    4d32:	f8c3 e008 	str.w	lr, [r3, #8]
    4d36:	6059      	str	r1, [r3, #4]
    4d38:	509a      	str	r2, [r3, r2]
    4d3a:	f000 fadb 	bl	52f4 <__malloc_unlock>
    4d3e:	e01f      	b.n	4d80 <_malloc_r+0x190>
    4d40:	2910      	cmp	r1, #16
    4d42:	d821      	bhi.n	4d88 <_malloc_r+0x198>
    4d44:	f000 fad4 	bl	52f0 <__malloc_lock>
    4d48:	2510      	movs	r5, #16
    4d4a:	2306      	movs	r3, #6
    4d4c:	2002      	movs	r0, #2
    4d4e:	4f7e      	ldr	r7, [pc, #504]	; (4f48 <_malloc_r+0x358>)
    4d50:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4d54:	f1a3 0208 	sub.w	r2, r3, #8
    4d58:	685c      	ldr	r4, [r3, #4]
    4d5a:	4294      	cmp	r4, r2
    4d5c:	f000 8145 	beq.w	4fea <_malloc_r+0x3fa>
    4d60:	6863      	ldr	r3, [r4, #4]
    4d62:	68e1      	ldr	r1, [r4, #12]
    4d64:	68a5      	ldr	r5, [r4, #8]
    4d66:	f023 0303 	bic.w	r3, r3, #3
    4d6a:	4423      	add	r3, r4
    4d6c:	4630      	mov	r0, r6
    4d6e:	685a      	ldr	r2, [r3, #4]
    4d70:	60e9      	str	r1, [r5, #12]
    4d72:	f042 0201 	orr.w	r2, r2, #1
    4d76:	608d      	str	r5, [r1, #8]
    4d78:	605a      	str	r2, [r3, #4]
    4d7a:	f000 fabb 	bl	52f4 <__malloc_unlock>
    4d7e:	3408      	adds	r4, #8
    4d80:	4620      	mov	r0, r4
    4d82:	b003      	add	sp, #12
    4d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d88:	2400      	movs	r4, #0
    4d8a:	230c      	movs	r3, #12
    4d8c:	4620      	mov	r0, r4
    4d8e:	6033      	str	r3, [r6, #0]
    4d90:	b003      	add	sp, #12
    4d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d96:	2380      	movs	r3, #128	; 0x80
    4d98:	f04f 0e40 	mov.w	lr, #64	; 0x40
    4d9c:	203f      	movs	r0, #63	; 0x3f
    4d9e:	e749      	b.n	4c34 <_malloc_r+0x44>
    4da0:	4670      	mov	r0, lr
    4da2:	e75d      	b.n	4c60 <_malloc_r+0x70>
    4da4:	4423      	add	r3, r4
    4da6:	68e1      	ldr	r1, [r4, #12]
    4da8:	685a      	ldr	r2, [r3, #4]
    4daa:	68a5      	ldr	r5, [r4, #8]
    4dac:	f042 0201 	orr.w	r2, r2, #1
    4db0:	60e9      	str	r1, [r5, #12]
    4db2:	4630      	mov	r0, r6
    4db4:	608d      	str	r5, [r1, #8]
    4db6:	605a      	str	r2, [r3, #4]
    4db8:	f000 fa9c 	bl	52f4 <__malloc_unlock>
    4dbc:	3408      	adds	r4, #8
    4dbe:	4620      	mov	r0, r4
    4dc0:	b003      	add	sp, #12
    4dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4dc6:	4423      	add	r3, r4
    4dc8:	4630      	mov	r0, r6
    4dca:	685a      	ldr	r2, [r3, #4]
    4dcc:	f042 0201 	orr.w	r2, r2, #1
    4dd0:	605a      	str	r2, [r3, #4]
    4dd2:	f000 fa8f 	bl	52f4 <__malloc_unlock>
    4dd6:	3408      	adds	r4, #8
    4dd8:	4620      	mov	r0, r4
    4dda:	b003      	add	sp, #12
    4ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4de0:	68bc      	ldr	r4, [r7, #8]
    4de2:	6863      	ldr	r3, [r4, #4]
    4de4:	f023 0803 	bic.w	r8, r3, #3
    4de8:	45a8      	cmp	r8, r5
    4dea:	d304      	bcc.n	4df6 <_malloc_r+0x206>
    4dec:	ebc5 0308 	rsb	r3, r5, r8
    4df0:	2b0f      	cmp	r3, #15
    4df2:	f300 808c 	bgt.w	4f0e <_malloc_r+0x31e>
    4df6:	4b55      	ldr	r3, [pc, #340]	; (4f4c <_malloc_r+0x35c>)
    4df8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4f5c <_malloc_r+0x36c>
    4dfc:	681a      	ldr	r2, [r3, #0]
    4dfe:	f8d9 3000 	ldr.w	r3, [r9]
    4e02:	3301      	adds	r3, #1
    4e04:	442a      	add	r2, r5
    4e06:	eb04 0a08 	add.w	sl, r4, r8
    4e0a:	f000 8160 	beq.w	50ce <_malloc_r+0x4de>
    4e0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4e12:	320f      	adds	r2, #15
    4e14:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    4e18:	f022 020f 	bic.w	r2, r2, #15
    4e1c:	4611      	mov	r1, r2
    4e1e:	4630      	mov	r0, r6
    4e20:	9201      	str	r2, [sp, #4]
    4e22:	f000 fc59 	bl	56d8 <_sbrk_r>
    4e26:	f1b0 3fff 	cmp.w	r0, #4294967295
    4e2a:	4683      	mov	fp, r0
    4e2c:	9a01      	ldr	r2, [sp, #4]
    4e2e:	f000 8158 	beq.w	50e2 <_malloc_r+0x4f2>
    4e32:	4582      	cmp	sl, r0
    4e34:	f200 80fc 	bhi.w	5030 <_malloc_r+0x440>
    4e38:	4b45      	ldr	r3, [pc, #276]	; (4f50 <_malloc_r+0x360>)
    4e3a:	6819      	ldr	r1, [r3, #0]
    4e3c:	45da      	cmp	sl, fp
    4e3e:	4411      	add	r1, r2
    4e40:	6019      	str	r1, [r3, #0]
    4e42:	f000 8153 	beq.w	50ec <_malloc_r+0x4fc>
    4e46:	f8d9 0000 	ldr.w	r0, [r9]
    4e4a:	f8df e110 	ldr.w	lr, [pc, #272]	; 4f5c <_malloc_r+0x36c>
    4e4e:	3001      	adds	r0, #1
    4e50:	bf1b      	ittet	ne
    4e52:	ebca 0a0b 	rsbne	sl, sl, fp
    4e56:	4451      	addne	r1, sl
    4e58:	f8ce b000 	streq.w	fp, [lr]
    4e5c:	6019      	strne	r1, [r3, #0]
    4e5e:	f01b 0107 	ands.w	r1, fp, #7
    4e62:	f000 8117 	beq.w	5094 <_malloc_r+0x4a4>
    4e66:	f1c1 0008 	rsb	r0, r1, #8
    4e6a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    4e6e:	4483      	add	fp, r0
    4e70:	3108      	adds	r1, #8
    4e72:	445a      	add	r2, fp
    4e74:	f3c2 020b 	ubfx	r2, r2, #0, #12
    4e78:	ebc2 0901 	rsb	r9, r2, r1
    4e7c:	4649      	mov	r1, r9
    4e7e:	4630      	mov	r0, r6
    4e80:	9301      	str	r3, [sp, #4]
    4e82:	f000 fc29 	bl	56d8 <_sbrk_r>
    4e86:	1c43      	adds	r3, r0, #1
    4e88:	9b01      	ldr	r3, [sp, #4]
    4e8a:	f000 813f 	beq.w	510c <_malloc_r+0x51c>
    4e8e:	ebcb 0200 	rsb	r2, fp, r0
    4e92:	444a      	add	r2, r9
    4e94:	f042 0201 	orr.w	r2, r2, #1
    4e98:	6819      	ldr	r1, [r3, #0]
    4e9a:	f8c7 b008 	str.w	fp, [r7, #8]
    4e9e:	4449      	add	r1, r9
    4ea0:	42bc      	cmp	r4, r7
    4ea2:	f8cb 2004 	str.w	r2, [fp, #4]
    4ea6:	6019      	str	r1, [r3, #0]
    4ea8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4f50 <_malloc_r+0x360>
    4eac:	d016      	beq.n	4edc <_malloc_r+0x2ec>
    4eae:	f1b8 0f0f 	cmp.w	r8, #15
    4eb2:	f240 80fd 	bls.w	50b0 <_malloc_r+0x4c0>
    4eb6:	6862      	ldr	r2, [r4, #4]
    4eb8:	f1a8 030c 	sub.w	r3, r8, #12
    4ebc:	f023 0307 	bic.w	r3, r3, #7
    4ec0:	18e0      	adds	r0, r4, r3
    4ec2:	f002 0201 	and.w	r2, r2, #1
    4ec6:	f04f 0e05 	mov.w	lr, #5
    4eca:	431a      	orrs	r2, r3
    4ecc:	2b0f      	cmp	r3, #15
    4ece:	6062      	str	r2, [r4, #4]
    4ed0:	f8c0 e004 	str.w	lr, [r0, #4]
    4ed4:	f8c0 e008 	str.w	lr, [r0, #8]
    4ed8:	f200 811c 	bhi.w	5114 <_malloc_r+0x524>
    4edc:	4b1d      	ldr	r3, [pc, #116]	; (4f54 <_malloc_r+0x364>)
    4ede:	68bc      	ldr	r4, [r7, #8]
    4ee0:	681a      	ldr	r2, [r3, #0]
    4ee2:	4291      	cmp	r1, r2
    4ee4:	bf88      	it	hi
    4ee6:	6019      	strhi	r1, [r3, #0]
    4ee8:	4b1b      	ldr	r3, [pc, #108]	; (4f58 <_malloc_r+0x368>)
    4eea:	681a      	ldr	r2, [r3, #0]
    4eec:	4291      	cmp	r1, r2
    4eee:	6862      	ldr	r2, [r4, #4]
    4ef0:	bf88      	it	hi
    4ef2:	6019      	strhi	r1, [r3, #0]
    4ef4:	f022 0203 	bic.w	r2, r2, #3
    4ef8:	4295      	cmp	r5, r2
    4efa:	eba2 0305 	sub.w	r3, r2, r5
    4efe:	d801      	bhi.n	4f04 <_malloc_r+0x314>
    4f00:	2b0f      	cmp	r3, #15
    4f02:	dc04      	bgt.n	4f0e <_malloc_r+0x31e>
    4f04:	4630      	mov	r0, r6
    4f06:	f000 f9f5 	bl	52f4 <__malloc_unlock>
    4f0a:	2400      	movs	r4, #0
    4f0c:	e738      	b.n	4d80 <_malloc_r+0x190>
    4f0e:	1962      	adds	r2, r4, r5
    4f10:	f043 0301 	orr.w	r3, r3, #1
    4f14:	f045 0501 	orr.w	r5, r5, #1
    4f18:	6065      	str	r5, [r4, #4]
    4f1a:	4630      	mov	r0, r6
    4f1c:	60ba      	str	r2, [r7, #8]
    4f1e:	6053      	str	r3, [r2, #4]
    4f20:	f000 f9e8 	bl	52f4 <__malloc_unlock>
    4f24:	3408      	adds	r4, #8
    4f26:	4620      	mov	r0, r4
    4f28:	b003      	add	sp, #12
    4f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f2e:	2b14      	cmp	r3, #20
    4f30:	d971      	bls.n	5016 <_malloc_r+0x426>
    4f32:	2b54      	cmp	r3, #84	; 0x54
    4f34:	f200 80a4 	bhi.w	5080 <_malloc_r+0x490>
    4f38:	0b28      	lsrs	r0, r5, #12
    4f3a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    4f3e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4f42:	306e      	adds	r0, #110	; 0x6e
    4f44:	e676      	b.n	4c34 <_malloc_r+0x44>
    4f46:	bf00      	nop
    4f48:	20004e38 	.word	0x20004e38
    4f4c:	200077cc 	.word	0x200077cc
    4f50:	200077d0 	.word	0x200077d0
    4f54:	200077c8 	.word	0x200077c8
    4f58:	200077c4 	.word	0x200077c4
    4f5c:	20005244 	.word	0x20005244
    4f60:	0a5a      	lsrs	r2, r3, #9
    4f62:	2a04      	cmp	r2, #4
    4f64:	d95e      	bls.n	5024 <_malloc_r+0x434>
    4f66:	2a14      	cmp	r2, #20
    4f68:	f200 80b3 	bhi.w	50d2 <_malloc_r+0x4e2>
    4f6c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    4f70:	0049      	lsls	r1, r1, #1
    4f72:	325b      	adds	r2, #91	; 0x5b
    4f74:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    4f78:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    4f7c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 515c <_malloc_r+0x56c>
    4f80:	f1ac 0c08 	sub.w	ip, ip, #8
    4f84:	458c      	cmp	ip, r1
    4f86:	f000 8088 	beq.w	509a <_malloc_r+0x4aa>
    4f8a:	684a      	ldr	r2, [r1, #4]
    4f8c:	f022 0203 	bic.w	r2, r2, #3
    4f90:	4293      	cmp	r3, r2
    4f92:	d202      	bcs.n	4f9a <_malloc_r+0x3aa>
    4f94:	6889      	ldr	r1, [r1, #8]
    4f96:	458c      	cmp	ip, r1
    4f98:	d1f7      	bne.n	4f8a <_malloc_r+0x39a>
    4f9a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    4f9e:	687a      	ldr	r2, [r7, #4]
    4fa0:	f8c4 c00c 	str.w	ip, [r4, #12]
    4fa4:	60a1      	str	r1, [r4, #8]
    4fa6:	f8cc 4008 	str.w	r4, [ip, #8]
    4faa:	60cc      	str	r4, [r1, #12]
    4fac:	e688      	b.n	4cc0 <_malloc_r+0xd0>
    4fae:	1963      	adds	r3, r4, r5
    4fb0:	f042 0701 	orr.w	r7, r2, #1
    4fb4:	f045 0501 	orr.w	r5, r5, #1
    4fb8:	6065      	str	r5, [r4, #4]
    4fba:	4630      	mov	r0, r6
    4fbc:	614b      	str	r3, [r1, #20]
    4fbe:	610b      	str	r3, [r1, #16]
    4fc0:	f8c3 e00c 	str.w	lr, [r3, #12]
    4fc4:	f8c3 e008 	str.w	lr, [r3, #8]
    4fc8:	605f      	str	r7, [r3, #4]
    4fca:	509a      	str	r2, [r3, r2]
    4fcc:	3408      	adds	r4, #8
    4fce:	f000 f991 	bl	52f4 <__malloc_unlock>
    4fd2:	e6d5      	b.n	4d80 <_malloc_r+0x190>
    4fd4:	684a      	ldr	r2, [r1, #4]
    4fd6:	e673      	b.n	4cc0 <_malloc_r+0xd0>
    4fd8:	f108 0801 	add.w	r8, r8, #1
    4fdc:	f018 0f03 	tst.w	r8, #3
    4fe0:	f10c 0c08 	add.w	ip, ip, #8
    4fe4:	f47f ae7f 	bne.w	4ce6 <_malloc_r+0xf6>
    4fe8:	e030      	b.n	504c <_malloc_r+0x45c>
    4fea:	68dc      	ldr	r4, [r3, #12]
    4fec:	42a3      	cmp	r3, r4
    4fee:	bf08      	it	eq
    4ff0:	3002      	addeq	r0, #2
    4ff2:	f43f ae35 	beq.w	4c60 <_malloc_r+0x70>
    4ff6:	e6b3      	b.n	4d60 <_malloc_r+0x170>
    4ff8:	440b      	add	r3, r1
    4ffa:	460c      	mov	r4, r1
    4ffc:	685a      	ldr	r2, [r3, #4]
    4ffe:	68c9      	ldr	r1, [r1, #12]
    5000:	f854 5f08 	ldr.w	r5, [r4, #8]!
    5004:	f042 0201 	orr.w	r2, r2, #1
    5008:	605a      	str	r2, [r3, #4]
    500a:	4630      	mov	r0, r6
    500c:	60e9      	str	r1, [r5, #12]
    500e:	608d      	str	r5, [r1, #8]
    5010:	f000 f970 	bl	52f4 <__malloc_unlock>
    5014:	e6b4      	b.n	4d80 <_malloc_r+0x190>
    5016:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    501a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    501e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5022:	e607      	b.n	4c34 <_malloc_r+0x44>
    5024:	099a      	lsrs	r2, r3, #6
    5026:	f102 0139 	add.w	r1, r2, #57	; 0x39
    502a:	0049      	lsls	r1, r1, #1
    502c:	3238      	adds	r2, #56	; 0x38
    502e:	e7a1      	b.n	4f74 <_malloc_r+0x384>
    5030:	42bc      	cmp	r4, r7
    5032:	4b4a      	ldr	r3, [pc, #296]	; (515c <_malloc_r+0x56c>)
    5034:	f43f af00 	beq.w	4e38 <_malloc_r+0x248>
    5038:	689c      	ldr	r4, [r3, #8]
    503a:	6862      	ldr	r2, [r4, #4]
    503c:	f022 0203 	bic.w	r2, r2, #3
    5040:	e75a      	b.n	4ef8 <_malloc_r+0x308>
    5042:	f859 3908 	ldr.w	r3, [r9], #-8
    5046:	4599      	cmp	r9, r3
    5048:	f040 8082 	bne.w	5150 <_malloc_r+0x560>
    504c:	f010 0f03 	tst.w	r0, #3
    5050:	f100 30ff 	add.w	r0, r0, #4294967295
    5054:	d1f5      	bne.n	5042 <_malloc_r+0x452>
    5056:	687b      	ldr	r3, [r7, #4]
    5058:	ea23 0304 	bic.w	r3, r3, r4
    505c:	607b      	str	r3, [r7, #4]
    505e:	0064      	lsls	r4, r4, #1
    5060:	429c      	cmp	r4, r3
    5062:	f63f aebd 	bhi.w	4de0 <_malloc_r+0x1f0>
    5066:	2c00      	cmp	r4, #0
    5068:	f43f aeba 	beq.w	4de0 <_malloc_r+0x1f0>
    506c:	421c      	tst	r4, r3
    506e:	4640      	mov	r0, r8
    5070:	f47f ae35 	bne.w	4cde <_malloc_r+0xee>
    5074:	0064      	lsls	r4, r4, #1
    5076:	421c      	tst	r4, r3
    5078:	f100 0004 	add.w	r0, r0, #4
    507c:	d0fa      	beq.n	5074 <_malloc_r+0x484>
    507e:	e62e      	b.n	4cde <_malloc_r+0xee>
    5080:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5084:	d818      	bhi.n	50b8 <_malloc_r+0x4c8>
    5086:	0be8      	lsrs	r0, r5, #15
    5088:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    508c:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5090:	3077      	adds	r0, #119	; 0x77
    5092:	e5cf      	b.n	4c34 <_malloc_r+0x44>
    5094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5098:	e6eb      	b.n	4e72 <_malloc_r+0x282>
    509a:	2101      	movs	r1, #1
    509c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    50a0:	1092      	asrs	r2, r2, #2
    50a2:	fa01 f202 	lsl.w	r2, r1, r2
    50a6:	431a      	orrs	r2, r3
    50a8:	f8c8 2004 	str.w	r2, [r8, #4]
    50ac:	4661      	mov	r1, ip
    50ae:	e777      	b.n	4fa0 <_malloc_r+0x3b0>
    50b0:	2301      	movs	r3, #1
    50b2:	f8cb 3004 	str.w	r3, [fp, #4]
    50b6:	e725      	b.n	4f04 <_malloc_r+0x314>
    50b8:	f240 5254 	movw	r2, #1364	; 0x554
    50bc:	4293      	cmp	r3, r2
    50be:	d820      	bhi.n	5102 <_malloc_r+0x512>
    50c0:	0ca8      	lsrs	r0, r5, #18
    50c2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    50c6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    50ca:	307c      	adds	r0, #124	; 0x7c
    50cc:	e5b2      	b.n	4c34 <_malloc_r+0x44>
    50ce:	3210      	adds	r2, #16
    50d0:	e6a4      	b.n	4e1c <_malloc_r+0x22c>
    50d2:	2a54      	cmp	r2, #84	; 0x54
    50d4:	d826      	bhi.n	5124 <_malloc_r+0x534>
    50d6:	0b1a      	lsrs	r2, r3, #12
    50d8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    50dc:	0049      	lsls	r1, r1, #1
    50de:	326e      	adds	r2, #110	; 0x6e
    50e0:	e748      	b.n	4f74 <_malloc_r+0x384>
    50e2:	68bc      	ldr	r4, [r7, #8]
    50e4:	6862      	ldr	r2, [r4, #4]
    50e6:	f022 0203 	bic.w	r2, r2, #3
    50ea:	e705      	b.n	4ef8 <_malloc_r+0x308>
    50ec:	f3ca 000b 	ubfx	r0, sl, #0, #12
    50f0:	2800      	cmp	r0, #0
    50f2:	f47f aea8 	bne.w	4e46 <_malloc_r+0x256>
    50f6:	4442      	add	r2, r8
    50f8:	68bb      	ldr	r3, [r7, #8]
    50fa:	f042 0201 	orr.w	r2, r2, #1
    50fe:	605a      	str	r2, [r3, #4]
    5100:	e6ec      	b.n	4edc <_malloc_r+0x2ec>
    5102:	23fe      	movs	r3, #254	; 0xfe
    5104:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    5108:	207e      	movs	r0, #126	; 0x7e
    510a:	e593      	b.n	4c34 <_malloc_r+0x44>
    510c:	2201      	movs	r2, #1
    510e:	f04f 0900 	mov.w	r9, #0
    5112:	e6c1      	b.n	4e98 <_malloc_r+0x2a8>
    5114:	f104 0108 	add.w	r1, r4, #8
    5118:	4630      	mov	r0, r6
    511a:	f000 fc55 	bl	59c8 <_free_r>
    511e:	f8d9 1000 	ldr.w	r1, [r9]
    5122:	e6db      	b.n	4edc <_malloc_r+0x2ec>
    5124:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5128:	d805      	bhi.n	5136 <_malloc_r+0x546>
    512a:	0bda      	lsrs	r2, r3, #15
    512c:	f102 0178 	add.w	r1, r2, #120	; 0x78
    5130:	0049      	lsls	r1, r1, #1
    5132:	3277      	adds	r2, #119	; 0x77
    5134:	e71e      	b.n	4f74 <_malloc_r+0x384>
    5136:	f240 5154 	movw	r1, #1364	; 0x554
    513a:	428a      	cmp	r2, r1
    513c:	d805      	bhi.n	514a <_malloc_r+0x55a>
    513e:	0c9a      	lsrs	r2, r3, #18
    5140:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    5144:	0049      	lsls	r1, r1, #1
    5146:	327c      	adds	r2, #124	; 0x7c
    5148:	e714      	b.n	4f74 <_malloc_r+0x384>
    514a:	21fe      	movs	r1, #254	; 0xfe
    514c:	227e      	movs	r2, #126	; 0x7e
    514e:	e711      	b.n	4f74 <_malloc_r+0x384>
    5150:	687b      	ldr	r3, [r7, #4]
    5152:	e784      	b.n	505e <_malloc_r+0x46e>
    5154:	08e8      	lsrs	r0, r5, #3
    5156:	1c43      	adds	r3, r0, #1
    5158:	005b      	lsls	r3, r3, #1
    515a:	e5f8      	b.n	4d4e <_malloc_r+0x15e>
    515c:	20004e38 	.word	0x20004e38

00005160 <__ascii_mbtowc>:
    5160:	b082      	sub	sp, #8
    5162:	b149      	cbz	r1, 5178 <__ascii_mbtowc+0x18>
    5164:	b15a      	cbz	r2, 517e <__ascii_mbtowc+0x1e>
    5166:	b16b      	cbz	r3, 5184 <__ascii_mbtowc+0x24>
    5168:	7813      	ldrb	r3, [r2, #0]
    516a:	600b      	str	r3, [r1, #0]
    516c:	7812      	ldrb	r2, [r2, #0]
    516e:	1c10      	adds	r0, r2, #0
    5170:	bf18      	it	ne
    5172:	2001      	movne	r0, #1
    5174:	b002      	add	sp, #8
    5176:	4770      	bx	lr
    5178:	a901      	add	r1, sp, #4
    517a:	2a00      	cmp	r2, #0
    517c:	d1f3      	bne.n	5166 <__ascii_mbtowc+0x6>
    517e:	4610      	mov	r0, r2
    5180:	b002      	add	sp, #8
    5182:	4770      	bx	lr
    5184:	f06f 0001 	mvn.w	r0, #1
    5188:	e7f4      	b.n	5174 <__ascii_mbtowc+0x14>
    518a:	bf00      	nop

0000518c <memmove>:
    518c:	4288      	cmp	r0, r1
    518e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5190:	d90d      	bls.n	51ae <memmove+0x22>
    5192:	188b      	adds	r3, r1, r2
    5194:	4298      	cmp	r0, r3
    5196:	d20a      	bcs.n	51ae <memmove+0x22>
    5198:	1881      	adds	r1, r0, r2
    519a:	2a00      	cmp	r2, #0
    519c:	d051      	beq.n	5242 <memmove+0xb6>
    519e:	1a9a      	subs	r2, r3, r2
    51a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    51a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    51a8:	4293      	cmp	r3, r2
    51aa:	d1f9      	bne.n	51a0 <memmove+0x14>
    51ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51ae:	2a0f      	cmp	r2, #15
    51b0:	d948      	bls.n	5244 <memmove+0xb8>
    51b2:	ea41 0300 	orr.w	r3, r1, r0
    51b6:	079b      	lsls	r3, r3, #30
    51b8:	d146      	bne.n	5248 <memmove+0xbc>
    51ba:	f100 0410 	add.w	r4, r0, #16
    51be:	f101 0310 	add.w	r3, r1, #16
    51c2:	4615      	mov	r5, r2
    51c4:	f853 6c10 	ldr.w	r6, [r3, #-16]
    51c8:	f844 6c10 	str.w	r6, [r4, #-16]
    51cc:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    51d0:	f844 6c0c 	str.w	r6, [r4, #-12]
    51d4:	f853 6c08 	ldr.w	r6, [r3, #-8]
    51d8:	f844 6c08 	str.w	r6, [r4, #-8]
    51dc:	3d10      	subs	r5, #16
    51de:	f853 6c04 	ldr.w	r6, [r3, #-4]
    51e2:	f844 6c04 	str.w	r6, [r4, #-4]
    51e6:	2d0f      	cmp	r5, #15
    51e8:	f103 0310 	add.w	r3, r3, #16
    51ec:	f104 0410 	add.w	r4, r4, #16
    51f0:	d8e8      	bhi.n	51c4 <memmove+0x38>
    51f2:	f1a2 0310 	sub.w	r3, r2, #16
    51f6:	f023 030f 	bic.w	r3, r3, #15
    51fa:	f002 0e0f 	and.w	lr, r2, #15
    51fe:	3310      	adds	r3, #16
    5200:	f1be 0f03 	cmp.w	lr, #3
    5204:	4419      	add	r1, r3
    5206:	4403      	add	r3, r0
    5208:	d921      	bls.n	524e <memmove+0xc2>
    520a:	1f1e      	subs	r6, r3, #4
    520c:	460d      	mov	r5, r1
    520e:	4674      	mov	r4, lr
    5210:	3c04      	subs	r4, #4
    5212:	f855 7b04 	ldr.w	r7, [r5], #4
    5216:	f846 7f04 	str.w	r7, [r6, #4]!
    521a:	2c03      	cmp	r4, #3
    521c:	d8f8      	bhi.n	5210 <memmove+0x84>
    521e:	f1ae 0404 	sub.w	r4, lr, #4
    5222:	f024 0403 	bic.w	r4, r4, #3
    5226:	3404      	adds	r4, #4
    5228:	4423      	add	r3, r4
    522a:	4421      	add	r1, r4
    522c:	f002 0203 	and.w	r2, r2, #3
    5230:	b162      	cbz	r2, 524c <memmove+0xc0>
    5232:	3b01      	subs	r3, #1
    5234:	440a      	add	r2, r1
    5236:	f811 4b01 	ldrb.w	r4, [r1], #1
    523a:	f803 4f01 	strb.w	r4, [r3, #1]!
    523e:	428a      	cmp	r2, r1
    5240:	d1f9      	bne.n	5236 <memmove+0xaa>
    5242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5244:	4603      	mov	r3, r0
    5246:	e7f3      	b.n	5230 <memmove+0xa4>
    5248:	4603      	mov	r3, r0
    524a:	e7f2      	b.n	5232 <memmove+0xa6>
    524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    524e:	4672      	mov	r2, lr
    5250:	e7ee      	b.n	5230 <memmove+0xa4>
    5252:	bf00      	nop

00005254 <memset>:
    5254:	b470      	push	{r4, r5, r6}
    5256:	0784      	lsls	r4, r0, #30
    5258:	d046      	beq.n	52e8 <memset+0x94>
    525a:	1e54      	subs	r4, r2, #1
    525c:	2a00      	cmp	r2, #0
    525e:	d041      	beq.n	52e4 <memset+0x90>
    5260:	b2cd      	uxtb	r5, r1
    5262:	4603      	mov	r3, r0
    5264:	e002      	b.n	526c <memset+0x18>
    5266:	1e62      	subs	r2, r4, #1
    5268:	b3e4      	cbz	r4, 52e4 <memset+0x90>
    526a:	4614      	mov	r4, r2
    526c:	f803 5b01 	strb.w	r5, [r3], #1
    5270:	079a      	lsls	r2, r3, #30
    5272:	d1f8      	bne.n	5266 <memset+0x12>
    5274:	2c03      	cmp	r4, #3
    5276:	d92e      	bls.n	52d6 <memset+0x82>
    5278:	b2cd      	uxtb	r5, r1
    527a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    527e:	2c0f      	cmp	r4, #15
    5280:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5284:	d919      	bls.n	52ba <memset+0x66>
    5286:	f103 0210 	add.w	r2, r3, #16
    528a:	4626      	mov	r6, r4
    528c:	3e10      	subs	r6, #16
    528e:	2e0f      	cmp	r6, #15
    5290:	f842 5c10 	str.w	r5, [r2, #-16]
    5294:	f842 5c0c 	str.w	r5, [r2, #-12]
    5298:	f842 5c08 	str.w	r5, [r2, #-8]
    529c:	f842 5c04 	str.w	r5, [r2, #-4]
    52a0:	f102 0210 	add.w	r2, r2, #16
    52a4:	d8f2      	bhi.n	528c <memset+0x38>
    52a6:	f1a4 0210 	sub.w	r2, r4, #16
    52aa:	f022 020f 	bic.w	r2, r2, #15
    52ae:	f004 040f 	and.w	r4, r4, #15
    52b2:	3210      	adds	r2, #16
    52b4:	2c03      	cmp	r4, #3
    52b6:	4413      	add	r3, r2
    52b8:	d90d      	bls.n	52d6 <memset+0x82>
    52ba:	461e      	mov	r6, r3
    52bc:	4622      	mov	r2, r4
    52be:	3a04      	subs	r2, #4
    52c0:	2a03      	cmp	r2, #3
    52c2:	f846 5b04 	str.w	r5, [r6], #4
    52c6:	d8fa      	bhi.n	52be <memset+0x6a>
    52c8:	1f22      	subs	r2, r4, #4
    52ca:	f022 0203 	bic.w	r2, r2, #3
    52ce:	3204      	adds	r2, #4
    52d0:	4413      	add	r3, r2
    52d2:	f004 0403 	and.w	r4, r4, #3
    52d6:	b12c      	cbz	r4, 52e4 <memset+0x90>
    52d8:	b2c9      	uxtb	r1, r1
    52da:	441c      	add	r4, r3
    52dc:	f803 1b01 	strb.w	r1, [r3], #1
    52e0:	42a3      	cmp	r3, r4
    52e2:	d1fb      	bne.n	52dc <memset+0x88>
    52e4:	bc70      	pop	{r4, r5, r6}
    52e6:	4770      	bx	lr
    52e8:	4614      	mov	r4, r2
    52ea:	4603      	mov	r3, r0
    52ec:	e7c2      	b.n	5274 <memset+0x20>
    52ee:	bf00      	nop

000052f0 <__malloc_lock>:
    52f0:	4770      	bx	lr
    52f2:	bf00      	nop

000052f4 <__malloc_unlock>:
    52f4:	4770      	bx	lr
    52f6:	bf00      	nop

000052f8 <_realloc_r>:
    52f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52fc:	4617      	mov	r7, r2
    52fe:	b083      	sub	sp, #12
    5300:	2900      	cmp	r1, #0
    5302:	f000 80c1 	beq.w	5488 <_realloc_r+0x190>
    5306:	460e      	mov	r6, r1
    5308:	4681      	mov	r9, r0
    530a:	f107 050b 	add.w	r5, r7, #11
    530e:	f7ff ffef 	bl	52f0 <__malloc_lock>
    5312:	f856 ec04 	ldr.w	lr, [r6, #-4]
    5316:	2d16      	cmp	r5, #22
    5318:	f02e 0403 	bic.w	r4, lr, #3
    531c:	f1a6 0808 	sub.w	r8, r6, #8
    5320:	d840      	bhi.n	53a4 <_realloc_r+0xac>
    5322:	2210      	movs	r2, #16
    5324:	4615      	mov	r5, r2
    5326:	42af      	cmp	r7, r5
    5328:	d841      	bhi.n	53ae <_realloc_r+0xb6>
    532a:	4294      	cmp	r4, r2
    532c:	da75      	bge.n	541a <_realloc_r+0x122>
    532e:	4bc9      	ldr	r3, [pc, #804]	; (5654 <_realloc_r+0x35c>)
    5330:	6899      	ldr	r1, [r3, #8]
    5332:	eb08 0004 	add.w	r0, r8, r4
    5336:	4288      	cmp	r0, r1
    5338:	6841      	ldr	r1, [r0, #4]
    533a:	f000 80d9 	beq.w	54f0 <_realloc_r+0x1f8>
    533e:	f021 0301 	bic.w	r3, r1, #1
    5342:	4403      	add	r3, r0
    5344:	685b      	ldr	r3, [r3, #4]
    5346:	07db      	lsls	r3, r3, #31
    5348:	d57d      	bpl.n	5446 <_realloc_r+0x14e>
    534a:	f01e 0f01 	tst.w	lr, #1
    534e:	d035      	beq.n	53bc <_realloc_r+0xc4>
    5350:	4639      	mov	r1, r7
    5352:	4648      	mov	r0, r9
    5354:	f7ff fc4c 	bl	4bf0 <_malloc_r>
    5358:	4607      	mov	r7, r0
    535a:	b1e0      	cbz	r0, 5396 <_realloc_r+0x9e>
    535c:	f856 3c04 	ldr.w	r3, [r6, #-4]
    5360:	f023 0301 	bic.w	r3, r3, #1
    5364:	4443      	add	r3, r8
    5366:	f1a0 0208 	sub.w	r2, r0, #8
    536a:	429a      	cmp	r2, r3
    536c:	f000 8144 	beq.w	55f8 <_realloc_r+0x300>
    5370:	1f22      	subs	r2, r4, #4
    5372:	2a24      	cmp	r2, #36	; 0x24
    5374:	f200 8131 	bhi.w	55da <_realloc_r+0x2e2>
    5378:	2a13      	cmp	r2, #19
    537a:	f200 8104 	bhi.w	5586 <_realloc_r+0x28e>
    537e:	4603      	mov	r3, r0
    5380:	4632      	mov	r2, r6
    5382:	6811      	ldr	r1, [r2, #0]
    5384:	6019      	str	r1, [r3, #0]
    5386:	6851      	ldr	r1, [r2, #4]
    5388:	6059      	str	r1, [r3, #4]
    538a:	6892      	ldr	r2, [r2, #8]
    538c:	609a      	str	r2, [r3, #8]
    538e:	4631      	mov	r1, r6
    5390:	4648      	mov	r0, r9
    5392:	f000 fb19 	bl	59c8 <_free_r>
    5396:	4648      	mov	r0, r9
    5398:	f7ff ffac 	bl	52f4 <__malloc_unlock>
    539c:	4638      	mov	r0, r7
    539e:	b003      	add	sp, #12
    53a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53a4:	f025 0507 	bic.w	r5, r5, #7
    53a8:	2d00      	cmp	r5, #0
    53aa:	462a      	mov	r2, r5
    53ac:	dabb      	bge.n	5326 <_realloc_r+0x2e>
    53ae:	230c      	movs	r3, #12
    53b0:	2000      	movs	r0, #0
    53b2:	f8c9 3000 	str.w	r3, [r9]
    53b6:	b003      	add	sp, #12
    53b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53bc:	f856 3c08 	ldr.w	r3, [r6, #-8]
    53c0:	ebc3 0a08 	rsb	sl, r3, r8
    53c4:	f8da 3004 	ldr.w	r3, [sl, #4]
    53c8:	f023 0c03 	bic.w	ip, r3, #3
    53cc:	eb04 030c 	add.w	r3, r4, ip
    53d0:	4293      	cmp	r3, r2
    53d2:	dbbd      	blt.n	5350 <_realloc_r+0x58>
    53d4:	4657      	mov	r7, sl
    53d6:	f8da 100c 	ldr.w	r1, [sl, #12]
    53da:	f857 0f08 	ldr.w	r0, [r7, #8]!
    53de:	1f22      	subs	r2, r4, #4
    53e0:	2a24      	cmp	r2, #36	; 0x24
    53e2:	60c1      	str	r1, [r0, #12]
    53e4:	6088      	str	r0, [r1, #8]
    53e6:	f200 8117 	bhi.w	5618 <_realloc_r+0x320>
    53ea:	2a13      	cmp	r2, #19
    53ec:	f240 8112 	bls.w	5614 <_realloc_r+0x31c>
    53f0:	6831      	ldr	r1, [r6, #0]
    53f2:	f8ca 1008 	str.w	r1, [sl, #8]
    53f6:	6871      	ldr	r1, [r6, #4]
    53f8:	f8ca 100c 	str.w	r1, [sl, #12]
    53fc:	2a1b      	cmp	r2, #27
    53fe:	f200 812b 	bhi.w	5658 <_realloc_r+0x360>
    5402:	3608      	adds	r6, #8
    5404:	f10a 0210 	add.w	r2, sl, #16
    5408:	6831      	ldr	r1, [r6, #0]
    540a:	6011      	str	r1, [r2, #0]
    540c:	6871      	ldr	r1, [r6, #4]
    540e:	6051      	str	r1, [r2, #4]
    5410:	68b1      	ldr	r1, [r6, #8]
    5412:	6091      	str	r1, [r2, #8]
    5414:	463e      	mov	r6, r7
    5416:	461c      	mov	r4, r3
    5418:	46d0      	mov	r8, sl
    541a:	1b63      	subs	r3, r4, r5
    541c:	2b0f      	cmp	r3, #15
    541e:	d81d      	bhi.n	545c <_realloc_r+0x164>
    5420:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5424:	f003 0301 	and.w	r3, r3, #1
    5428:	4323      	orrs	r3, r4
    542a:	4444      	add	r4, r8
    542c:	f8c8 3004 	str.w	r3, [r8, #4]
    5430:	6863      	ldr	r3, [r4, #4]
    5432:	f043 0301 	orr.w	r3, r3, #1
    5436:	6063      	str	r3, [r4, #4]
    5438:	4648      	mov	r0, r9
    543a:	f7ff ff5b 	bl	52f4 <__malloc_unlock>
    543e:	4630      	mov	r0, r6
    5440:	b003      	add	sp, #12
    5442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5446:	f021 0103 	bic.w	r1, r1, #3
    544a:	4421      	add	r1, r4
    544c:	4291      	cmp	r1, r2
    544e:	db21      	blt.n	5494 <_realloc_r+0x19c>
    5450:	68c3      	ldr	r3, [r0, #12]
    5452:	6882      	ldr	r2, [r0, #8]
    5454:	460c      	mov	r4, r1
    5456:	60d3      	str	r3, [r2, #12]
    5458:	609a      	str	r2, [r3, #8]
    545a:	e7de      	b.n	541a <_realloc_r+0x122>
    545c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5460:	eb08 0105 	add.w	r1, r8, r5
    5464:	f002 0201 	and.w	r2, r2, #1
    5468:	4315      	orrs	r5, r2
    546a:	f043 0201 	orr.w	r2, r3, #1
    546e:	440b      	add	r3, r1
    5470:	f8c8 5004 	str.w	r5, [r8, #4]
    5474:	604a      	str	r2, [r1, #4]
    5476:	685a      	ldr	r2, [r3, #4]
    5478:	f042 0201 	orr.w	r2, r2, #1
    547c:	3108      	adds	r1, #8
    547e:	605a      	str	r2, [r3, #4]
    5480:	4648      	mov	r0, r9
    5482:	f000 faa1 	bl	59c8 <_free_r>
    5486:	e7d7      	b.n	5438 <_realloc_r+0x140>
    5488:	4611      	mov	r1, r2
    548a:	b003      	add	sp, #12
    548c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5490:	f7ff bbae 	b.w	4bf0 <_malloc_r>
    5494:	f01e 0f01 	tst.w	lr, #1
    5498:	f47f af5a 	bne.w	5350 <_realloc_r+0x58>
    549c:	f856 3c08 	ldr.w	r3, [r6, #-8]
    54a0:	ebc3 0a08 	rsb	sl, r3, r8
    54a4:	f8da 3004 	ldr.w	r3, [sl, #4]
    54a8:	f023 0c03 	bic.w	ip, r3, #3
    54ac:	eb01 0e0c 	add.w	lr, r1, ip
    54b0:	4596      	cmp	lr, r2
    54b2:	db8b      	blt.n	53cc <_realloc_r+0xd4>
    54b4:	68c3      	ldr	r3, [r0, #12]
    54b6:	6882      	ldr	r2, [r0, #8]
    54b8:	4657      	mov	r7, sl
    54ba:	60d3      	str	r3, [r2, #12]
    54bc:	609a      	str	r2, [r3, #8]
    54be:	f857 1f08 	ldr.w	r1, [r7, #8]!
    54c2:	f8da 300c 	ldr.w	r3, [sl, #12]
    54c6:	60cb      	str	r3, [r1, #12]
    54c8:	1f22      	subs	r2, r4, #4
    54ca:	2a24      	cmp	r2, #36	; 0x24
    54cc:	6099      	str	r1, [r3, #8]
    54ce:	f200 8099 	bhi.w	5604 <_realloc_r+0x30c>
    54d2:	2a13      	cmp	r2, #19
    54d4:	d962      	bls.n	559c <_realloc_r+0x2a4>
    54d6:	6833      	ldr	r3, [r6, #0]
    54d8:	f8ca 3008 	str.w	r3, [sl, #8]
    54dc:	6873      	ldr	r3, [r6, #4]
    54de:	f8ca 300c 	str.w	r3, [sl, #12]
    54e2:	2a1b      	cmp	r2, #27
    54e4:	f200 80a0 	bhi.w	5628 <_realloc_r+0x330>
    54e8:	3608      	adds	r6, #8
    54ea:	f10a 0310 	add.w	r3, sl, #16
    54ee:	e056      	b.n	559e <_realloc_r+0x2a6>
    54f0:	f021 0b03 	bic.w	fp, r1, #3
    54f4:	44a3      	add	fp, r4
    54f6:	f105 0010 	add.w	r0, r5, #16
    54fa:	4583      	cmp	fp, r0
    54fc:	da59      	bge.n	55b2 <_realloc_r+0x2ba>
    54fe:	f01e 0f01 	tst.w	lr, #1
    5502:	f47f af25 	bne.w	5350 <_realloc_r+0x58>
    5506:	f856 1c08 	ldr.w	r1, [r6, #-8]
    550a:	ebc1 0a08 	rsb	sl, r1, r8
    550e:	f8da 1004 	ldr.w	r1, [sl, #4]
    5512:	f021 0c03 	bic.w	ip, r1, #3
    5516:	44e3      	add	fp, ip
    5518:	4558      	cmp	r0, fp
    551a:	f73f af57 	bgt.w	53cc <_realloc_r+0xd4>
    551e:	4657      	mov	r7, sl
    5520:	f8da 100c 	ldr.w	r1, [sl, #12]
    5524:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5528:	1f22      	subs	r2, r4, #4
    552a:	2a24      	cmp	r2, #36	; 0x24
    552c:	60c1      	str	r1, [r0, #12]
    552e:	6088      	str	r0, [r1, #8]
    5530:	f200 80b4 	bhi.w	569c <_realloc_r+0x3a4>
    5534:	2a13      	cmp	r2, #19
    5536:	f240 80a5 	bls.w	5684 <_realloc_r+0x38c>
    553a:	6831      	ldr	r1, [r6, #0]
    553c:	f8ca 1008 	str.w	r1, [sl, #8]
    5540:	6871      	ldr	r1, [r6, #4]
    5542:	f8ca 100c 	str.w	r1, [sl, #12]
    5546:	2a1b      	cmp	r2, #27
    5548:	f200 80af 	bhi.w	56aa <_realloc_r+0x3b2>
    554c:	3608      	adds	r6, #8
    554e:	f10a 0210 	add.w	r2, sl, #16
    5552:	6831      	ldr	r1, [r6, #0]
    5554:	6011      	str	r1, [r2, #0]
    5556:	6871      	ldr	r1, [r6, #4]
    5558:	6051      	str	r1, [r2, #4]
    555a:	68b1      	ldr	r1, [r6, #8]
    555c:	6091      	str	r1, [r2, #8]
    555e:	eb0a 0105 	add.w	r1, sl, r5
    5562:	ebc5 020b 	rsb	r2, r5, fp
    5566:	f042 0201 	orr.w	r2, r2, #1
    556a:	6099      	str	r1, [r3, #8]
    556c:	604a      	str	r2, [r1, #4]
    556e:	f8da 3004 	ldr.w	r3, [sl, #4]
    5572:	f003 0301 	and.w	r3, r3, #1
    5576:	431d      	orrs	r5, r3
    5578:	4648      	mov	r0, r9
    557a:	f8ca 5004 	str.w	r5, [sl, #4]
    557e:	f7ff feb9 	bl	52f4 <__malloc_unlock>
    5582:	4638      	mov	r0, r7
    5584:	e75c      	b.n	5440 <_realloc_r+0x148>
    5586:	6833      	ldr	r3, [r6, #0]
    5588:	6003      	str	r3, [r0, #0]
    558a:	6873      	ldr	r3, [r6, #4]
    558c:	6043      	str	r3, [r0, #4]
    558e:	2a1b      	cmp	r2, #27
    5590:	d827      	bhi.n	55e2 <_realloc_r+0x2ea>
    5592:	f100 0308 	add.w	r3, r0, #8
    5596:	f106 0208 	add.w	r2, r6, #8
    559a:	e6f2      	b.n	5382 <_realloc_r+0x8a>
    559c:	463b      	mov	r3, r7
    559e:	6832      	ldr	r2, [r6, #0]
    55a0:	601a      	str	r2, [r3, #0]
    55a2:	6872      	ldr	r2, [r6, #4]
    55a4:	605a      	str	r2, [r3, #4]
    55a6:	68b2      	ldr	r2, [r6, #8]
    55a8:	609a      	str	r2, [r3, #8]
    55aa:	463e      	mov	r6, r7
    55ac:	4674      	mov	r4, lr
    55ae:	46d0      	mov	r8, sl
    55b0:	e733      	b.n	541a <_realloc_r+0x122>
    55b2:	eb08 0105 	add.w	r1, r8, r5
    55b6:	ebc5 0b0b 	rsb	fp, r5, fp
    55ba:	f04b 0201 	orr.w	r2, fp, #1
    55be:	6099      	str	r1, [r3, #8]
    55c0:	604a      	str	r2, [r1, #4]
    55c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
    55c6:	f003 0301 	and.w	r3, r3, #1
    55ca:	431d      	orrs	r5, r3
    55cc:	4648      	mov	r0, r9
    55ce:	f846 5c04 	str.w	r5, [r6, #-4]
    55d2:	f7ff fe8f 	bl	52f4 <__malloc_unlock>
    55d6:	4630      	mov	r0, r6
    55d8:	e732      	b.n	5440 <_realloc_r+0x148>
    55da:	4631      	mov	r1, r6
    55dc:	f7ff fdd6 	bl	518c <memmove>
    55e0:	e6d5      	b.n	538e <_realloc_r+0x96>
    55e2:	68b3      	ldr	r3, [r6, #8]
    55e4:	6083      	str	r3, [r0, #8]
    55e6:	68f3      	ldr	r3, [r6, #12]
    55e8:	60c3      	str	r3, [r0, #12]
    55ea:	2a24      	cmp	r2, #36	; 0x24
    55ec:	d028      	beq.n	5640 <_realloc_r+0x348>
    55ee:	f100 0310 	add.w	r3, r0, #16
    55f2:	f106 0210 	add.w	r2, r6, #16
    55f6:	e6c4      	b.n	5382 <_realloc_r+0x8a>
    55f8:	f850 3c04 	ldr.w	r3, [r0, #-4]
    55fc:	f023 0303 	bic.w	r3, r3, #3
    5600:	441c      	add	r4, r3
    5602:	e70a      	b.n	541a <_realloc_r+0x122>
    5604:	4631      	mov	r1, r6
    5606:	4638      	mov	r0, r7
    5608:	4674      	mov	r4, lr
    560a:	46d0      	mov	r8, sl
    560c:	f7ff fdbe 	bl	518c <memmove>
    5610:	463e      	mov	r6, r7
    5612:	e702      	b.n	541a <_realloc_r+0x122>
    5614:	463a      	mov	r2, r7
    5616:	e6f7      	b.n	5408 <_realloc_r+0x110>
    5618:	4631      	mov	r1, r6
    561a:	4638      	mov	r0, r7
    561c:	461c      	mov	r4, r3
    561e:	46d0      	mov	r8, sl
    5620:	f7ff fdb4 	bl	518c <memmove>
    5624:	463e      	mov	r6, r7
    5626:	e6f8      	b.n	541a <_realloc_r+0x122>
    5628:	68b3      	ldr	r3, [r6, #8]
    562a:	f8ca 3010 	str.w	r3, [sl, #16]
    562e:	68f3      	ldr	r3, [r6, #12]
    5630:	f8ca 3014 	str.w	r3, [sl, #20]
    5634:	2a24      	cmp	r2, #36	; 0x24
    5636:	d01b      	beq.n	5670 <_realloc_r+0x378>
    5638:	3610      	adds	r6, #16
    563a:	f10a 0318 	add.w	r3, sl, #24
    563e:	e7ae      	b.n	559e <_realloc_r+0x2a6>
    5640:	6933      	ldr	r3, [r6, #16]
    5642:	6103      	str	r3, [r0, #16]
    5644:	6973      	ldr	r3, [r6, #20]
    5646:	6143      	str	r3, [r0, #20]
    5648:	f106 0218 	add.w	r2, r6, #24
    564c:	f100 0318 	add.w	r3, r0, #24
    5650:	e697      	b.n	5382 <_realloc_r+0x8a>
    5652:	bf00      	nop
    5654:	20004e38 	.word	0x20004e38
    5658:	68b1      	ldr	r1, [r6, #8]
    565a:	f8ca 1010 	str.w	r1, [sl, #16]
    565e:	68f1      	ldr	r1, [r6, #12]
    5660:	f8ca 1014 	str.w	r1, [sl, #20]
    5664:	2a24      	cmp	r2, #36	; 0x24
    5666:	d00f      	beq.n	5688 <_realloc_r+0x390>
    5668:	3610      	adds	r6, #16
    566a:	f10a 0218 	add.w	r2, sl, #24
    566e:	e6cb      	b.n	5408 <_realloc_r+0x110>
    5670:	6933      	ldr	r3, [r6, #16]
    5672:	f8ca 3018 	str.w	r3, [sl, #24]
    5676:	6973      	ldr	r3, [r6, #20]
    5678:	f8ca 301c 	str.w	r3, [sl, #28]
    567c:	3618      	adds	r6, #24
    567e:	f10a 0320 	add.w	r3, sl, #32
    5682:	e78c      	b.n	559e <_realloc_r+0x2a6>
    5684:	463a      	mov	r2, r7
    5686:	e764      	b.n	5552 <_realloc_r+0x25a>
    5688:	6932      	ldr	r2, [r6, #16]
    568a:	f8ca 2018 	str.w	r2, [sl, #24]
    568e:	6972      	ldr	r2, [r6, #20]
    5690:	f8ca 201c 	str.w	r2, [sl, #28]
    5694:	3618      	adds	r6, #24
    5696:	f10a 0220 	add.w	r2, sl, #32
    569a:	e6b5      	b.n	5408 <_realloc_r+0x110>
    569c:	4631      	mov	r1, r6
    569e:	4638      	mov	r0, r7
    56a0:	9301      	str	r3, [sp, #4]
    56a2:	f7ff fd73 	bl	518c <memmove>
    56a6:	9b01      	ldr	r3, [sp, #4]
    56a8:	e759      	b.n	555e <_realloc_r+0x266>
    56aa:	68b1      	ldr	r1, [r6, #8]
    56ac:	f8ca 1010 	str.w	r1, [sl, #16]
    56b0:	68f1      	ldr	r1, [r6, #12]
    56b2:	f8ca 1014 	str.w	r1, [sl, #20]
    56b6:	2a24      	cmp	r2, #36	; 0x24
    56b8:	d003      	beq.n	56c2 <_realloc_r+0x3ca>
    56ba:	3610      	adds	r6, #16
    56bc:	f10a 0218 	add.w	r2, sl, #24
    56c0:	e747      	b.n	5552 <_realloc_r+0x25a>
    56c2:	6932      	ldr	r2, [r6, #16]
    56c4:	f8ca 2018 	str.w	r2, [sl, #24]
    56c8:	6972      	ldr	r2, [r6, #20]
    56ca:	f8ca 201c 	str.w	r2, [sl, #28]
    56ce:	3618      	adds	r6, #24
    56d0:	f10a 0220 	add.w	r2, sl, #32
    56d4:	e73d      	b.n	5552 <_realloc_r+0x25a>
    56d6:	bf00      	nop

000056d8 <_sbrk_r>:
    56d8:	b538      	push	{r3, r4, r5, lr}
    56da:	4c07      	ldr	r4, [pc, #28]	; (56f8 <_sbrk_r+0x20>)
    56dc:	2300      	movs	r3, #0
    56de:	4605      	mov	r5, r0
    56e0:	4608      	mov	r0, r1
    56e2:	6023      	str	r3, [r4, #0]
    56e4:	f7fc ff8e 	bl	2604 <_sbrk>
    56e8:	1c43      	adds	r3, r0, #1
    56ea:	d000      	beq.n	56ee <_sbrk_r+0x16>
    56ec:	bd38      	pop	{r3, r4, r5, pc}
    56ee:	6823      	ldr	r3, [r4, #0]
    56f0:	2b00      	cmp	r3, #0
    56f2:	d0fb      	beq.n	56ec <_sbrk_r+0x14>
    56f4:	602b      	str	r3, [r5, #0]
    56f6:	bd38      	pop	{r3, r4, r5, pc}
    56f8:	2000928c 	.word	0x2000928c
    56fc:	00000000 	.word	0x00000000

00005700 <strlen>:
    5700:	f890 f000 	pld	[r0]
    5704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5708:	f020 0107 	bic.w	r1, r0, #7
    570c:	f06f 0c00 	mvn.w	ip, #0
    5710:	f010 0407 	ands.w	r4, r0, #7
    5714:	f891 f020 	pld	[r1, #32]
    5718:	f040 8049 	bne.w	57ae <strlen+0xae>
    571c:	f04f 0400 	mov.w	r4, #0
    5720:	f06f 0007 	mvn.w	r0, #7
    5724:	e9d1 2300 	ldrd	r2, r3, [r1]
    5728:	f891 f040 	pld	[r1, #64]	; 0x40
    572c:	f100 0008 	add.w	r0, r0, #8
    5730:	fa82 f24c 	uadd8	r2, r2, ip
    5734:	faa4 f28c 	sel	r2, r4, ip
    5738:	fa83 f34c 	uadd8	r3, r3, ip
    573c:	faa2 f38c 	sel	r3, r2, ip
    5740:	bb4b      	cbnz	r3, 5796 <strlen+0x96>
    5742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5746:	fa82 f24c 	uadd8	r2, r2, ip
    574a:	f100 0008 	add.w	r0, r0, #8
    574e:	faa4 f28c 	sel	r2, r4, ip
    5752:	fa83 f34c 	uadd8	r3, r3, ip
    5756:	faa2 f38c 	sel	r3, r2, ip
    575a:	b9e3      	cbnz	r3, 5796 <strlen+0x96>
    575c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5760:	fa82 f24c 	uadd8	r2, r2, ip
    5764:	f100 0008 	add.w	r0, r0, #8
    5768:	faa4 f28c 	sel	r2, r4, ip
    576c:	fa83 f34c 	uadd8	r3, r3, ip
    5770:	faa2 f38c 	sel	r3, r2, ip
    5774:	b97b      	cbnz	r3, 5796 <strlen+0x96>
    5776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    577a:	f101 0120 	add.w	r1, r1, #32
    577e:	fa82 f24c 	uadd8	r2, r2, ip
    5782:	f100 0008 	add.w	r0, r0, #8
    5786:	faa4 f28c 	sel	r2, r4, ip
    578a:	fa83 f34c 	uadd8	r3, r3, ip
    578e:	faa2 f38c 	sel	r3, r2, ip
    5792:	2b00      	cmp	r3, #0
    5794:	d0c6      	beq.n	5724 <strlen+0x24>
    5796:	2a00      	cmp	r2, #0
    5798:	bf04      	itt	eq
    579a:	3004      	addeq	r0, #4
    579c:	461a      	moveq	r2, r3
    579e:	ba12      	rev	r2, r2
    57a0:	fab2 f282 	clz	r2, r2
    57a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    57a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    57ac:	4770      	bx	lr
    57ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    57b2:	f004 0503 	and.w	r5, r4, #3
    57b6:	f1c4 0000 	rsb	r0, r4, #0
    57ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    57be:	f014 0f04 	tst.w	r4, #4
    57c2:	f891 f040 	pld	[r1, #64]	; 0x40
    57c6:	fa0c f505 	lsl.w	r5, ip, r5
    57ca:	ea62 0205 	orn	r2, r2, r5
    57ce:	bf1c      	itt	ne
    57d0:	ea63 0305 	ornne	r3, r3, r5
    57d4:	4662      	movne	r2, ip
    57d6:	f04f 0400 	mov.w	r4, #0
    57da:	e7a9      	b.n	5730 <strlen+0x30>

000057dc <_vdprintf_r>:
    57dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    57de:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    57e2:	ad04      	add	r5, sp, #16
    57e4:	9300      	str	r3, [sp, #0]
    57e6:	460f      	mov	r7, r1
    57e8:	4613      	mov	r3, r2
    57ea:	f44f 7400 	mov.w	r4, #512	; 0x200
    57ee:	aa03      	add	r2, sp, #12
    57f0:	4629      	mov	r1, r5
    57f2:	9403      	str	r4, [sp, #12]
    57f4:	4606      	mov	r6, r0
    57f6:	f000 fd45 	bl	6284 <_vasnprintf_r>
    57fa:	b188      	cbz	r0, 5820 <_vdprintf_r+0x44>
    57fc:	4604      	mov	r4, r0
    57fe:	4602      	mov	r2, r0
    5800:	4639      	mov	r1, r7
    5802:	9b03      	ldr	r3, [sp, #12]
    5804:	4630      	mov	r0, r6
    5806:	f000 f829 	bl	585c <_write_r>
    580a:	42ac      	cmp	r4, r5
    580c:	9003      	str	r0, [sp, #12]
    580e:	d004      	beq.n	581a <_vdprintf_r+0x3e>
    5810:	4630      	mov	r0, r6
    5812:	4621      	mov	r1, r4
    5814:	f000 f8d8 	bl	59c8 <_free_r>
    5818:	9803      	ldr	r0, [sp, #12]
    581a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    581e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5820:	f04f 30ff 	mov.w	r0, #4294967295
    5824:	e7f9      	b.n	581a <_vdprintf_r+0x3e>
    5826:	bf00      	nop

00005828 <vdprintf>:
    5828:	b410      	push	{r4}
    582a:	4c04      	ldr	r4, [pc, #16]	; (583c <vdprintf+0x14>)
    582c:	4613      	mov	r3, r2
    582e:	460a      	mov	r2, r1
    5830:	4601      	mov	r1, r0
    5832:	6820      	ldr	r0, [r4, #0]
    5834:	f85d 4b04 	ldr.w	r4, [sp], #4
    5838:	f7ff bfd0 	b.w	57dc <_vdprintf_r>
    583c:	20004cc8 	.word	0x20004cc8

00005840 <__ascii_wctomb>:
    5840:	b121      	cbz	r1, 584c <__ascii_wctomb+0xc>
    5842:	2aff      	cmp	r2, #255	; 0xff
    5844:	d804      	bhi.n	5850 <__ascii_wctomb+0x10>
    5846:	700a      	strb	r2, [r1, #0]
    5848:	2001      	movs	r0, #1
    584a:	4770      	bx	lr
    584c:	4608      	mov	r0, r1
    584e:	4770      	bx	lr
    5850:	238a      	movs	r3, #138	; 0x8a
    5852:	6003      	str	r3, [r0, #0]
    5854:	f04f 30ff 	mov.w	r0, #4294967295
    5858:	4770      	bx	lr
    585a:	bf00      	nop

0000585c <_write_r>:
    585c:	b570      	push	{r4, r5, r6, lr}
    585e:	460d      	mov	r5, r1
    5860:	4c08      	ldr	r4, [pc, #32]	; (5884 <_write_r+0x28>)
    5862:	4611      	mov	r1, r2
    5864:	4606      	mov	r6, r0
    5866:	461a      	mov	r2, r3
    5868:	4628      	mov	r0, r5
    586a:	2300      	movs	r3, #0
    586c:	6023      	str	r3, [r4, #0]
    586e:	f7fe f9e3 	bl	3c38 <_write>
    5872:	1c43      	adds	r3, r0, #1
    5874:	d000      	beq.n	5878 <_write_r+0x1c>
    5876:	bd70      	pop	{r4, r5, r6, pc}
    5878:	6823      	ldr	r3, [r4, #0]
    587a:	2b00      	cmp	r3, #0
    587c:	d0fb      	beq.n	5876 <_write_r+0x1a>
    587e:	6033      	str	r3, [r6, #0]
    5880:	bd70      	pop	{r4, r5, r6, pc}
    5882:	bf00      	nop
    5884:	2000928c 	.word	0x2000928c

00005888 <__register_exitproc>:
    5888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    588c:	4c25      	ldr	r4, [pc, #148]	; (5924 <__register_exitproc+0x9c>)
    588e:	6825      	ldr	r5, [r4, #0]
    5890:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    5894:	4606      	mov	r6, r0
    5896:	4688      	mov	r8, r1
    5898:	4692      	mov	sl, r2
    589a:	4699      	mov	r9, r3
    589c:	b3c4      	cbz	r4, 5910 <__register_exitproc+0x88>
    589e:	6860      	ldr	r0, [r4, #4]
    58a0:	281f      	cmp	r0, #31
    58a2:	dc17      	bgt.n	58d4 <__register_exitproc+0x4c>
    58a4:	1c43      	adds	r3, r0, #1
    58a6:	b176      	cbz	r6, 58c6 <__register_exitproc+0x3e>
    58a8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    58ac:	2201      	movs	r2, #1
    58ae:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    58b2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    58b6:	4082      	lsls	r2, r0
    58b8:	4311      	orrs	r1, r2
    58ba:	2e02      	cmp	r6, #2
    58bc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    58c0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    58c4:	d01e      	beq.n	5904 <__register_exitproc+0x7c>
    58c6:	3002      	adds	r0, #2
    58c8:	6063      	str	r3, [r4, #4]
    58ca:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    58ce:	2000      	movs	r0, #0
    58d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58d4:	4b14      	ldr	r3, [pc, #80]	; (5928 <__register_exitproc+0xa0>)
    58d6:	b303      	cbz	r3, 591a <__register_exitproc+0x92>
    58d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    58dc:	f7ff f980 	bl	4be0 <malloc>
    58e0:	4604      	mov	r4, r0
    58e2:	b1d0      	cbz	r0, 591a <__register_exitproc+0x92>
    58e4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    58e8:	2700      	movs	r7, #0
    58ea:	e880 0088 	stmia.w	r0, {r3, r7}
    58ee:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    58f2:	4638      	mov	r0, r7
    58f4:	2301      	movs	r3, #1
    58f6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    58fa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    58fe:	2e00      	cmp	r6, #0
    5900:	d0e1      	beq.n	58c6 <__register_exitproc+0x3e>
    5902:	e7d1      	b.n	58a8 <__register_exitproc+0x20>
    5904:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    5908:	430a      	orrs	r2, r1
    590a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    590e:	e7da      	b.n	58c6 <__register_exitproc+0x3e>
    5910:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    5914:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    5918:	e7c1      	b.n	589e <__register_exitproc+0x16>
    591a:	f04f 30ff 	mov.w	r0, #4294967295
    591e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5922:	bf00      	nop
    5924:	2000455c 	.word	0x2000455c
    5928:	00004be1 	.word	0x00004be1

0000592c <_malloc_trim_r>:
    592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    592e:	4f23      	ldr	r7, [pc, #140]	; (59bc <_malloc_trim_r+0x90>)
    5930:	460c      	mov	r4, r1
    5932:	4606      	mov	r6, r0
    5934:	f7ff fcdc 	bl	52f0 <__malloc_lock>
    5938:	68bb      	ldr	r3, [r7, #8]
    593a:	685d      	ldr	r5, [r3, #4]
    593c:	f025 0503 	bic.w	r5, r5, #3
    5940:	1b29      	subs	r1, r5, r4
    5942:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    5946:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    594a:	f021 010f 	bic.w	r1, r1, #15
    594e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    5952:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    5956:	db07      	blt.n	5968 <_malloc_trim_r+0x3c>
    5958:	2100      	movs	r1, #0
    595a:	4630      	mov	r0, r6
    595c:	f7ff febc 	bl	56d8 <_sbrk_r>
    5960:	68bb      	ldr	r3, [r7, #8]
    5962:	442b      	add	r3, r5
    5964:	4298      	cmp	r0, r3
    5966:	d004      	beq.n	5972 <_malloc_trim_r+0x46>
    5968:	4630      	mov	r0, r6
    596a:	f7ff fcc3 	bl	52f4 <__malloc_unlock>
    596e:	2000      	movs	r0, #0
    5970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5972:	4261      	negs	r1, r4
    5974:	4630      	mov	r0, r6
    5976:	f7ff feaf 	bl	56d8 <_sbrk_r>
    597a:	3001      	adds	r0, #1
    597c:	d00d      	beq.n	599a <_malloc_trim_r+0x6e>
    597e:	4b10      	ldr	r3, [pc, #64]	; (59c0 <_malloc_trim_r+0x94>)
    5980:	68ba      	ldr	r2, [r7, #8]
    5982:	6819      	ldr	r1, [r3, #0]
    5984:	1b2d      	subs	r5, r5, r4
    5986:	f045 0501 	orr.w	r5, r5, #1
    598a:	4630      	mov	r0, r6
    598c:	1b09      	subs	r1, r1, r4
    598e:	6055      	str	r5, [r2, #4]
    5990:	6019      	str	r1, [r3, #0]
    5992:	f7ff fcaf 	bl	52f4 <__malloc_unlock>
    5996:	2001      	movs	r0, #1
    5998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    599a:	2100      	movs	r1, #0
    599c:	4630      	mov	r0, r6
    599e:	f7ff fe9b 	bl	56d8 <_sbrk_r>
    59a2:	68ba      	ldr	r2, [r7, #8]
    59a4:	1a83      	subs	r3, r0, r2
    59a6:	2b0f      	cmp	r3, #15
    59a8:	ddde      	ble.n	5968 <_malloc_trim_r+0x3c>
    59aa:	4c06      	ldr	r4, [pc, #24]	; (59c4 <_malloc_trim_r+0x98>)
    59ac:	4904      	ldr	r1, [pc, #16]	; (59c0 <_malloc_trim_r+0x94>)
    59ae:	6824      	ldr	r4, [r4, #0]
    59b0:	f043 0301 	orr.w	r3, r3, #1
    59b4:	1b00      	subs	r0, r0, r4
    59b6:	6053      	str	r3, [r2, #4]
    59b8:	6008      	str	r0, [r1, #0]
    59ba:	e7d5      	b.n	5968 <_malloc_trim_r+0x3c>
    59bc:	20004e38 	.word	0x20004e38
    59c0:	200077d0 	.word	0x200077d0
    59c4:	20005244 	.word	0x20005244

000059c8 <_free_r>:
    59c8:	2900      	cmp	r1, #0
    59ca:	d045      	beq.n	5a58 <_free_r+0x90>
    59cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59d0:	460d      	mov	r5, r1
    59d2:	4680      	mov	r8, r0
    59d4:	f7ff fc8c 	bl	52f0 <__malloc_lock>
    59d8:	f855 7c04 	ldr.w	r7, [r5, #-4]
    59dc:	496a      	ldr	r1, [pc, #424]	; (5b88 <_free_r+0x1c0>)
    59de:	f027 0301 	bic.w	r3, r7, #1
    59e2:	f1a5 0408 	sub.w	r4, r5, #8
    59e6:	18e2      	adds	r2, r4, r3
    59e8:	688e      	ldr	r6, [r1, #8]
    59ea:	6850      	ldr	r0, [r2, #4]
    59ec:	42b2      	cmp	r2, r6
    59ee:	f020 0003 	bic.w	r0, r0, #3
    59f2:	d062      	beq.n	5aba <_free_r+0xf2>
    59f4:	07fe      	lsls	r6, r7, #31
    59f6:	6050      	str	r0, [r2, #4]
    59f8:	d40b      	bmi.n	5a12 <_free_r+0x4a>
    59fa:	f855 7c08 	ldr.w	r7, [r5, #-8]
    59fe:	1be4      	subs	r4, r4, r7
    5a00:	f101 0e08 	add.w	lr, r1, #8
    5a04:	68a5      	ldr	r5, [r4, #8]
    5a06:	4575      	cmp	r5, lr
    5a08:	443b      	add	r3, r7
    5a0a:	d06f      	beq.n	5aec <_free_r+0x124>
    5a0c:	68e7      	ldr	r7, [r4, #12]
    5a0e:	60ef      	str	r7, [r5, #12]
    5a10:	60bd      	str	r5, [r7, #8]
    5a12:	1815      	adds	r5, r2, r0
    5a14:	686d      	ldr	r5, [r5, #4]
    5a16:	07ed      	lsls	r5, r5, #31
    5a18:	d542      	bpl.n	5aa0 <_free_r+0xd8>
    5a1a:	f043 0201 	orr.w	r2, r3, #1
    5a1e:	6062      	str	r2, [r4, #4]
    5a20:	50e3      	str	r3, [r4, r3]
    5a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5a26:	d218      	bcs.n	5a5a <_free_r+0x92>
    5a28:	08db      	lsrs	r3, r3, #3
    5a2a:	1c5a      	adds	r2, r3, #1
    5a2c:	684d      	ldr	r5, [r1, #4]
    5a2e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    5a32:	60a7      	str	r7, [r4, #8]
    5a34:	2001      	movs	r0, #1
    5a36:	109b      	asrs	r3, r3, #2
    5a38:	fa00 f303 	lsl.w	r3, r0, r3
    5a3c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    5a40:	431d      	orrs	r5, r3
    5a42:	3808      	subs	r0, #8
    5a44:	60e0      	str	r0, [r4, #12]
    5a46:	604d      	str	r5, [r1, #4]
    5a48:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    5a4c:	60fc      	str	r4, [r7, #12]
    5a4e:	4640      	mov	r0, r8
    5a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a54:	f7ff bc4e 	b.w	52f4 <__malloc_unlock>
    5a58:	4770      	bx	lr
    5a5a:	0a5a      	lsrs	r2, r3, #9
    5a5c:	2a04      	cmp	r2, #4
    5a5e:	d853      	bhi.n	5b08 <_free_r+0x140>
    5a60:	099a      	lsrs	r2, r3, #6
    5a62:	f102 0739 	add.w	r7, r2, #57	; 0x39
    5a66:	007f      	lsls	r7, r7, #1
    5a68:	f102 0538 	add.w	r5, r2, #56	; 0x38
    5a6c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    5a70:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    5a74:	4944      	ldr	r1, [pc, #272]	; (5b88 <_free_r+0x1c0>)
    5a76:	3808      	subs	r0, #8
    5a78:	4290      	cmp	r0, r2
    5a7a:	d04d      	beq.n	5b18 <_free_r+0x150>
    5a7c:	6851      	ldr	r1, [r2, #4]
    5a7e:	f021 0103 	bic.w	r1, r1, #3
    5a82:	428b      	cmp	r3, r1
    5a84:	d202      	bcs.n	5a8c <_free_r+0xc4>
    5a86:	6892      	ldr	r2, [r2, #8]
    5a88:	4290      	cmp	r0, r2
    5a8a:	d1f7      	bne.n	5a7c <_free_r+0xb4>
    5a8c:	68d0      	ldr	r0, [r2, #12]
    5a8e:	60e0      	str	r0, [r4, #12]
    5a90:	60a2      	str	r2, [r4, #8]
    5a92:	6084      	str	r4, [r0, #8]
    5a94:	60d4      	str	r4, [r2, #12]
    5a96:	4640      	mov	r0, r8
    5a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a9c:	f7ff bc2a 	b.w	52f4 <__malloc_unlock>
    5aa0:	6895      	ldr	r5, [r2, #8]
    5aa2:	4f3a      	ldr	r7, [pc, #232]	; (5b8c <_free_r+0x1c4>)
    5aa4:	42bd      	cmp	r5, r7
    5aa6:	4403      	add	r3, r0
    5aa8:	d03f      	beq.n	5b2a <_free_r+0x162>
    5aaa:	68d0      	ldr	r0, [r2, #12]
    5aac:	60e8      	str	r0, [r5, #12]
    5aae:	f043 0201 	orr.w	r2, r3, #1
    5ab2:	6085      	str	r5, [r0, #8]
    5ab4:	6062      	str	r2, [r4, #4]
    5ab6:	50e3      	str	r3, [r4, r3]
    5ab8:	e7b3      	b.n	5a22 <_free_r+0x5a>
    5aba:	07ff      	lsls	r7, r7, #31
    5abc:	4403      	add	r3, r0
    5abe:	d407      	bmi.n	5ad0 <_free_r+0x108>
    5ac0:	f855 2c08 	ldr.w	r2, [r5, #-8]
    5ac4:	1aa4      	subs	r4, r4, r2
    5ac6:	4413      	add	r3, r2
    5ac8:	68a0      	ldr	r0, [r4, #8]
    5aca:	68e2      	ldr	r2, [r4, #12]
    5acc:	60c2      	str	r2, [r0, #12]
    5ace:	6090      	str	r0, [r2, #8]
    5ad0:	4a2f      	ldr	r2, [pc, #188]	; (5b90 <_free_r+0x1c8>)
    5ad2:	6812      	ldr	r2, [r2, #0]
    5ad4:	f043 0001 	orr.w	r0, r3, #1
    5ad8:	4293      	cmp	r3, r2
    5ada:	6060      	str	r0, [r4, #4]
    5adc:	608c      	str	r4, [r1, #8]
    5ade:	d3b6      	bcc.n	5a4e <_free_r+0x86>
    5ae0:	4b2c      	ldr	r3, [pc, #176]	; (5b94 <_free_r+0x1cc>)
    5ae2:	4640      	mov	r0, r8
    5ae4:	6819      	ldr	r1, [r3, #0]
    5ae6:	f7ff ff21 	bl	592c <_malloc_trim_r>
    5aea:	e7b0      	b.n	5a4e <_free_r+0x86>
    5aec:	1811      	adds	r1, r2, r0
    5aee:	6849      	ldr	r1, [r1, #4]
    5af0:	07c9      	lsls	r1, r1, #31
    5af2:	d444      	bmi.n	5b7e <_free_r+0x1b6>
    5af4:	6891      	ldr	r1, [r2, #8]
    5af6:	68d2      	ldr	r2, [r2, #12]
    5af8:	60ca      	str	r2, [r1, #12]
    5afa:	4403      	add	r3, r0
    5afc:	f043 0001 	orr.w	r0, r3, #1
    5b00:	6091      	str	r1, [r2, #8]
    5b02:	6060      	str	r0, [r4, #4]
    5b04:	50e3      	str	r3, [r4, r3]
    5b06:	e7a2      	b.n	5a4e <_free_r+0x86>
    5b08:	2a14      	cmp	r2, #20
    5b0a:	d817      	bhi.n	5b3c <_free_r+0x174>
    5b0c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    5b10:	007f      	lsls	r7, r7, #1
    5b12:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    5b16:	e7a9      	b.n	5a6c <_free_r+0xa4>
    5b18:	10aa      	asrs	r2, r5, #2
    5b1a:	684b      	ldr	r3, [r1, #4]
    5b1c:	2501      	movs	r5, #1
    5b1e:	fa05 f202 	lsl.w	r2, r5, r2
    5b22:	4313      	orrs	r3, r2
    5b24:	604b      	str	r3, [r1, #4]
    5b26:	4602      	mov	r2, r0
    5b28:	e7b1      	b.n	5a8e <_free_r+0xc6>
    5b2a:	f043 0201 	orr.w	r2, r3, #1
    5b2e:	614c      	str	r4, [r1, #20]
    5b30:	610c      	str	r4, [r1, #16]
    5b32:	60e5      	str	r5, [r4, #12]
    5b34:	60a5      	str	r5, [r4, #8]
    5b36:	6062      	str	r2, [r4, #4]
    5b38:	50e3      	str	r3, [r4, r3]
    5b3a:	e788      	b.n	5a4e <_free_r+0x86>
    5b3c:	2a54      	cmp	r2, #84	; 0x54
    5b3e:	d806      	bhi.n	5b4e <_free_r+0x186>
    5b40:	0b1a      	lsrs	r2, r3, #12
    5b42:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    5b46:	007f      	lsls	r7, r7, #1
    5b48:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    5b4c:	e78e      	b.n	5a6c <_free_r+0xa4>
    5b4e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5b52:	d806      	bhi.n	5b62 <_free_r+0x19a>
    5b54:	0bda      	lsrs	r2, r3, #15
    5b56:	f102 0778 	add.w	r7, r2, #120	; 0x78
    5b5a:	007f      	lsls	r7, r7, #1
    5b5c:	f102 0577 	add.w	r5, r2, #119	; 0x77
    5b60:	e784      	b.n	5a6c <_free_r+0xa4>
    5b62:	f240 5054 	movw	r0, #1364	; 0x554
    5b66:	4282      	cmp	r2, r0
    5b68:	d806      	bhi.n	5b78 <_free_r+0x1b0>
    5b6a:	0c9a      	lsrs	r2, r3, #18
    5b6c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    5b70:	007f      	lsls	r7, r7, #1
    5b72:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    5b76:	e779      	b.n	5a6c <_free_r+0xa4>
    5b78:	27fe      	movs	r7, #254	; 0xfe
    5b7a:	257e      	movs	r5, #126	; 0x7e
    5b7c:	e776      	b.n	5a6c <_free_r+0xa4>
    5b7e:	f043 0201 	orr.w	r2, r3, #1
    5b82:	6062      	str	r2, [r4, #4]
    5b84:	50e3      	str	r3, [r4, r3]
    5b86:	e762      	b.n	5a4e <_free_r+0x86>
    5b88:	20004e38 	.word	0x20004e38
    5b8c:	20004e40 	.word	0x20004e40
    5b90:	20005240 	.word	0x20005240
    5b94:	200077cc 	.word	0x200077cc

00005b98 <_localeconv_r>:
    5b98:	4a04      	ldr	r2, [pc, #16]	; (5bac <_localeconv_r+0x14>)
    5b9a:	4b05      	ldr	r3, [pc, #20]	; (5bb0 <_localeconv_r+0x18>)
    5b9c:	6812      	ldr	r2, [r2, #0]
    5b9e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    5ba0:	2800      	cmp	r0, #0
    5ba2:	bf08      	it	eq
    5ba4:	4618      	moveq	r0, r3
    5ba6:	30f0      	adds	r0, #240	; 0xf0
    5ba8:	4770      	bx	lr
    5baa:	bf00      	nop
    5bac:	20004cc8 	.word	0x20004cc8
    5bb0:	20004ccc 	.word	0x20004ccc
	...

00005bc0 <memchr>:
    5bc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5bc4:	2a10      	cmp	r2, #16
    5bc6:	db2b      	blt.n	5c20 <memchr+0x60>
    5bc8:	f010 0f07 	tst.w	r0, #7
    5bcc:	d008      	beq.n	5be0 <memchr+0x20>
    5bce:	f810 3b01 	ldrb.w	r3, [r0], #1
    5bd2:	3a01      	subs	r2, #1
    5bd4:	428b      	cmp	r3, r1
    5bd6:	d02d      	beq.n	5c34 <memchr+0x74>
    5bd8:	f010 0f07 	tst.w	r0, #7
    5bdc:	b342      	cbz	r2, 5c30 <memchr+0x70>
    5bde:	d1f6      	bne.n	5bce <memchr+0xe>
    5be0:	b4f0      	push	{r4, r5, r6, r7}
    5be2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5be6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    5bea:	f022 0407 	bic.w	r4, r2, #7
    5bee:	f07f 0700 	mvns.w	r7, #0
    5bf2:	2300      	movs	r3, #0
    5bf4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5bf8:	3c08      	subs	r4, #8
    5bfa:	ea85 0501 	eor.w	r5, r5, r1
    5bfe:	ea86 0601 	eor.w	r6, r6, r1
    5c02:	fa85 f547 	uadd8	r5, r5, r7
    5c06:	faa3 f587 	sel	r5, r3, r7
    5c0a:	fa86 f647 	uadd8	r6, r6, r7
    5c0e:	faa5 f687 	sel	r6, r5, r7
    5c12:	b98e      	cbnz	r6, 5c38 <memchr+0x78>
    5c14:	d1ee      	bne.n	5bf4 <memchr+0x34>
    5c16:	bcf0      	pop	{r4, r5, r6, r7}
    5c18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5c1c:	f002 0207 	and.w	r2, r2, #7
    5c20:	b132      	cbz	r2, 5c30 <memchr+0x70>
    5c22:	f810 3b01 	ldrb.w	r3, [r0], #1
    5c26:	3a01      	subs	r2, #1
    5c28:	ea83 0301 	eor.w	r3, r3, r1
    5c2c:	b113      	cbz	r3, 5c34 <memchr+0x74>
    5c2e:	d1f8      	bne.n	5c22 <memchr+0x62>
    5c30:	2000      	movs	r0, #0
    5c32:	4770      	bx	lr
    5c34:	3801      	subs	r0, #1
    5c36:	4770      	bx	lr
    5c38:	2d00      	cmp	r5, #0
    5c3a:	bf06      	itte	eq
    5c3c:	4635      	moveq	r5, r6
    5c3e:	3803      	subeq	r0, #3
    5c40:	3807      	subne	r0, #7
    5c42:	f015 0f01 	tst.w	r5, #1
    5c46:	d107      	bne.n	5c58 <memchr+0x98>
    5c48:	3001      	adds	r0, #1
    5c4a:	f415 7f80 	tst.w	r5, #256	; 0x100
    5c4e:	bf02      	ittt	eq
    5c50:	3001      	addeq	r0, #1
    5c52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5c56:	3001      	addeq	r0, #1
    5c58:	bcf0      	pop	{r4, r5, r6, r7}
    5c5a:	3801      	subs	r0, #1
    5c5c:	4770      	bx	lr
    5c5e:	bf00      	nop

00005c60 <_Balloc>:
    5c60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    5c62:	b570      	push	{r4, r5, r6, lr}
    5c64:	4605      	mov	r5, r0
    5c66:	460c      	mov	r4, r1
    5c68:	b14b      	cbz	r3, 5c7e <_Balloc+0x1e>
    5c6a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    5c6e:	b180      	cbz	r0, 5c92 <_Balloc+0x32>
    5c70:	6802      	ldr	r2, [r0, #0]
    5c72:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    5c76:	2300      	movs	r3, #0
    5c78:	6103      	str	r3, [r0, #16]
    5c7a:	60c3      	str	r3, [r0, #12]
    5c7c:	bd70      	pop	{r4, r5, r6, pc}
    5c7e:	2221      	movs	r2, #33	; 0x21
    5c80:	2104      	movs	r1, #4
    5c82:	f000 fb2f 	bl	62e4 <_calloc_r>
    5c86:	64e8      	str	r0, [r5, #76]	; 0x4c
    5c88:	4603      	mov	r3, r0
    5c8a:	2800      	cmp	r0, #0
    5c8c:	d1ed      	bne.n	5c6a <_Balloc+0xa>
    5c8e:	2000      	movs	r0, #0
    5c90:	bd70      	pop	{r4, r5, r6, pc}
    5c92:	2101      	movs	r1, #1
    5c94:	fa01 f604 	lsl.w	r6, r1, r4
    5c98:	1d72      	adds	r2, r6, #5
    5c9a:	4628      	mov	r0, r5
    5c9c:	0092      	lsls	r2, r2, #2
    5c9e:	f000 fb21 	bl	62e4 <_calloc_r>
    5ca2:	2800      	cmp	r0, #0
    5ca4:	d0f3      	beq.n	5c8e <_Balloc+0x2e>
    5ca6:	6044      	str	r4, [r0, #4]
    5ca8:	6086      	str	r6, [r0, #8]
    5caa:	e7e4      	b.n	5c76 <_Balloc+0x16>

00005cac <_Bfree>:
    5cac:	b131      	cbz	r1, 5cbc <_Bfree+0x10>
    5cae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    5cb0:	684a      	ldr	r2, [r1, #4]
    5cb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    5cb6:	6008      	str	r0, [r1, #0]
    5cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    5cbc:	4770      	bx	lr
    5cbe:	bf00      	nop

00005cc0 <__multadd>:
    5cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cc2:	690c      	ldr	r4, [r1, #16]
    5cc4:	b083      	sub	sp, #12
    5cc6:	460d      	mov	r5, r1
    5cc8:	4606      	mov	r6, r0
    5cca:	f101 0e14 	add.w	lr, r1, #20
    5cce:	2700      	movs	r7, #0
    5cd0:	f8de 0000 	ldr.w	r0, [lr]
    5cd4:	b281      	uxth	r1, r0
    5cd6:	fb02 3101 	mla	r1, r2, r1, r3
    5cda:	0c0b      	lsrs	r3, r1, #16
    5cdc:	0c00      	lsrs	r0, r0, #16
    5cde:	fb02 3300 	mla	r3, r2, r0, r3
    5ce2:	b289      	uxth	r1, r1
    5ce4:	3701      	adds	r7, #1
    5ce6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    5cea:	42bc      	cmp	r4, r7
    5cec:	f84e 1b04 	str.w	r1, [lr], #4
    5cf0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    5cf4:	dcec      	bgt.n	5cd0 <__multadd+0x10>
    5cf6:	b13b      	cbz	r3, 5d08 <__multadd+0x48>
    5cf8:	68aa      	ldr	r2, [r5, #8]
    5cfa:	4294      	cmp	r4, r2
    5cfc:	da07      	bge.n	5d0e <__multadd+0x4e>
    5cfe:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    5d02:	3401      	adds	r4, #1
    5d04:	6153      	str	r3, [r2, #20]
    5d06:	612c      	str	r4, [r5, #16]
    5d08:	4628      	mov	r0, r5
    5d0a:	b003      	add	sp, #12
    5d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d0e:	6869      	ldr	r1, [r5, #4]
    5d10:	9301      	str	r3, [sp, #4]
    5d12:	3101      	adds	r1, #1
    5d14:	4630      	mov	r0, r6
    5d16:	f7ff ffa3 	bl	5c60 <_Balloc>
    5d1a:	692a      	ldr	r2, [r5, #16]
    5d1c:	3202      	adds	r2, #2
    5d1e:	f105 010c 	add.w	r1, r5, #12
    5d22:	4607      	mov	r7, r0
    5d24:	0092      	lsls	r2, r2, #2
    5d26:	300c      	adds	r0, #12
    5d28:	f7fb ffd0 	bl	1ccc <memcpy>
    5d2c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    5d2e:	6869      	ldr	r1, [r5, #4]
    5d30:	9b01      	ldr	r3, [sp, #4]
    5d32:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    5d36:	6028      	str	r0, [r5, #0]
    5d38:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    5d3c:	463d      	mov	r5, r7
    5d3e:	e7de      	b.n	5cfe <__multadd+0x3e>

00005d40 <__hi0bits>:
    5d40:	0c03      	lsrs	r3, r0, #16
    5d42:	041b      	lsls	r3, r3, #16
    5d44:	b9b3      	cbnz	r3, 5d74 <__hi0bits+0x34>
    5d46:	0400      	lsls	r0, r0, #16
    5d48:	2310      	movs	r3, #16
    5d4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    5d4e:	bf04      	itt	eq
    5d50:	0200      	lsleq	r0, r0, #8
    5d52:	3308      	addeq	r3, #8
    5d54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    5d58:	bf04      	itt	eq
    5d5a:	0100      	lsleq	r0, r0, #4
    5d5c:	3304      	addeq	r3, #4
    5d5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    5d62:	bf04      	itt	eq
    5d64:	0080      	lsleq	r0, r0, #2
    5d66:	3302      	addeq	r3, #2
    5d68:	2800      	cmp	r0, #0
    5d6a:	db07      	blt.n	5d7c <__hi0bits+0x3c>
    5d6c:	0042      	lsls	r2, r0, #1
    5d6e:	d403      	bmi.n	5d78 <__hi0bits+0x38>
    5d70:	2020      	movs	r0, #32
    5d72:	4770      	bx	lr
    5d74:	2300      	movs	r3, #0
    5d76:	e7e8      	b.n	5d4a <__hi0bits+0xa>
    5d78:	1c58      	adds	r0, r3, #1
    5d7a:	4770      	bx	lr
    5d7c:	4618      	mov	r0, r3
    5d7e:	4770      	bx	lr

00005d80 <__lo0bits>:
    5d80:	6803      	ldr	r3, [r0, #0]
    5d82:	f013 0207 	ands.w	r2, r3, #7
    5d86:	d007      	beq.n	5d98 <__lo0bits+0x18>
    5d88:	07d9      	lsls	r1, r3, #31
    5d8a:	d420      	bmi.n	5dce <__lo0bits+0x4e>
    5d8c:	079a      	lsls	r2, r3, #30
    5d8e:	d420      	bmi.n	5dd2 <__lo0bits+0x52>
    5d90:	089b      	lsrs	r3, r3, #2
    5d92:	6003      	str	r3, [r0, #0]
    5d94:	2002      	movs	r0, #2
    5d96:	4770      	bx	lr
    5d98:	b299      	uxth	r1, r3
    5d9a:	b909      	cbnz	r1, 5da0 <__lo0bits+0x20>
    5d9c:	0c1b      	lsrs	r3, r3, #16
    5d9e:	2210      	movs	r2, #16
    5da0:	f013 0fff 	tst.w	r3, #255	; 0xff
    5da4:	bf04      	itt	eq
    5da6:	0a1b      	lsreq	r3, r3, #8
    5da8:	3208      	addeq	r2, #8
    5daa:	0719      	lsls	r1, r3, #28
    5dac:	bf04      	itt	eq
    5dae:	091b      	lsreq	r3, r3, #4
    5db0:	3204      	addeq	r2, #4
    5db2:	0799      	lsls	r1, r3, #30
    5db4:	bf04      	itt	eq
    5db6:	089b      	lsreq	r3, r3, #2
    5db8:	3202      	addeq	r2, #2
    5dba:	07d9      	lsls	r1, r3, #31
    5dbc:	d404      	bmi.n	5dc8 <__lo0bits+0x48>
    5dbe:	085b      	lsrs	r3, r3, #1
    5dc0:	d101      	bne.n	5dc6 <__lo0bits+0x46>
    5dc2:	2020      	movs	r0, #32
    5dc4:	4770      	bx	lr
    5dc6:	3201      	adds	r2, #1
    5dc8:	6003      	str	r3, [r0, #0]
    5dca:	4610      	mov	r0, r2
    5dcc:	4770      	bx	lr
    5dce:	2000      	movs	r0, #0
    5dd0:	4770      	bx	lr
    5dd2:	085b      	lsrs	r3, r3, #1
    5dd4:	6003      	str	r3, [r0, #0]
    5dd6:	2001      	movs	r0, #1
    5dd8:	4770      	bx	lr
    5dda:	bf00      	nop

00005ddc <__i2b>:
    5ddc:	b510      	push	{r4, lr}
    5dde:	460c      	mov	r4, r1
    5de0:	2101      	movs	r1, #1
    5de2:	f7ff ff3d 	bl	5c60 <_Balloc>
    5de6:	2201      	movs	r2, #1
    5de8:	6144      	str	r4, [r0, #20]
    5dea:	6102      	str	r2, [r0, #16]
    5dec:	bd10      	pop	{r4, pc}
    5dee:	bf00      	nop

00005df0 <__multiply>:
    5df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5df4:	690d      	ldr	r5, [r1, #16]
    5df6:	6917      	ldr	r7, [r2, #16]
    5df8:	42bd      	cmp	r5, r7
    5dfa:	b083      	sub	sp, #12
    5dfc:	460c      	mov	r4, r1
    5dfe:	4616      	mov	r6, r2
    5e00:	da04      	bge.n	5e0c <__multiply+0x1c>
    5e02:	462a      	mov	r2, r5
    5e04:	4634      	mov	r4, r6
    5e06:	463d      	mov	r5, r7
    5e08:	460e      	mov	r6, r1
    5e0a:	4617      	mov	r7, r2
    5e0c:	68a3      	ldr	r3, [r4, #8]
    5e0e:	6861      	ldr	r1, [r4, #4]
    5e10:	eb05 0807 	add.w	r8, r5, r7
    5e14:	4598      	cmp	r8, r3
    5e16:	bfc8      	it	gt
    5e18:	3101      	addgt	r1, #1
    5e1a:	f7ff ff21 	bl	5c60 <_Balloc>
    5e1e:	f100 0c14 	add.w	ip, r0, #20
    5e22:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    5e26:	45cc      	cmp	ip, r9
    5e28:	9000      	str	r0, [sp, #0]
    5e2a:	d205      	bcs.n	5e38 <__multiply+0x48>
    5e2c:	4663      	mov	r3, ip
    5e2e:	2100      	movs	r1, #0
    5e30:	f843 1b04 	str.w	r1, [r3], #4
    5e34:	4599      	cmp	r9, r3
    5e36:	d8fb      	bhi.n	5e30 <__multiply+0x40>
    5e38:	f106 0214 	add.w	r2, r6, #20
    5e3c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    5e40:	f104 0314 	add.w	r3, r4, #20
    5e44:	4552      	cmp	r2, sl
    5e46:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    5e4a:	d254      	bcs.n	5ef6 <__multiply+0x106>
    5e4c:	f8cd 9004 	str.w	r9, [sp, #4]
    5e50:	4699      	mov	r9, r3
    5e52:	f852 3b04 	ldr.w	r3, [r2], #4
    5e56:	fa1f fb83 	uxth.w	fp, r3
    5e5a:	f1bb 0f00 	cmp.w	fp, #0
    5e5e:	d020      	beq.n	5ea2 <__multiply+0xb2>
    5e60:	2000      	movs	r0, #0
    5e62:	464f      	mov	r7, r9
    5e64:	4666      	mov	r6, ip
    5e66:	4605      	mov	r5, r0
    5e68:	e000      	b.n	5e6c <__multiply+0x7c>
    5e6a:	461e      	mov	r6, r3
    5e6c:	f857 4b04 	ldr.w	r4, [r7], #4
    5e70:	6830      	ldr	r0, [r6, #0]
    5e72:	b2a1      	uxth	r1, r4
    5e74:	b283      	uxth	r3, r0
    5e76:	fb0b 3101 	mla	r1, fp, r1, r3
    5e7a:	0c24      	lsrs	r4, r4, #16
    5e7c:	0c00      	lsrs	r0, r0, #16
    5e7e:	194b      	adds	r3, r1, r5
    5e80:	fb0b 0004 	mla	r0, fp, r4, r0
    5e84:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    5e88:	b299      	uxth	r1, r3
    5e8a:	4633      	mov	r3, r6
    5e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    5e90:	45be      	cmp	lr, r7
    5e92:	ea4f 4510 	mov.w	r5, r0, lsr #16
    5e96:	f843 1b04 	str.w	r1, [r3], #4
    5e9a:	d8e6      	bhi.n	5e6a <__multiply+0x7a>
    5e9c:	6075      	str	r5, [r6, #4]
    5e9e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    5ea2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    5ea6:	d020      	beq.n	5eea <__multiply+0xfa>
    5ea8:	f8dc 3000 	ldr.w	r3, [ip]
    5eac:	4667      	mov	r7, ip
    5eae:	4618      	mov	r0, r3
    5eb0:	464d      	mov	r5, r9
    5eb2:	2100      	movs	r1, #0
    5eb4:	e000      	b.n	5eb8 <__multiply+0xc8>
    5eb6:	4637      	mov	r7, r6
    5eb8:	882c      	ldrh	r4, [r5, #0]
    5eba:	0c00      	lsrs	r0, r0, #16
    5ebc:	fb0b 0004 	mla	r0, fp, r4, r0
    5ec0:	4401      	add	r1, r0
    5ec2:	b29c      	uxth	r4, r3
    5ec4:	463e      	mov	r6, r7
    5ec6:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    5eca:	f846 3b04 	str.w	r3, [r6], #4
    5ece:	6878      	ldr	r0, [r7, #4]
    5ed0:	f855 4b04 	ldr.w	r4, [r5], #4
    5ed4:	b283      	uxth	r3, r0
    5ed6:	0c24      	lsrs	r4, r4, #16
    5ed8:	fb0b 3404 	mla	r4, fp, r4, r3
    5edc:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    5ee0:	45ae      	cmp	lr, r5
    5ee2:	ea4f 4113 	mov.w	r1, r3, lsr #16
    5ee6:	d8e6      	bhi.n	5eb6 <__multiply+0xc6>
    5ee8:	607b      	str	r3, [r7, #4]
    5eea:	4592      	cmp	sl, r2
    5eec:	f10c 0c04 	add.w	ip, ip, #4
    5ef0:	d8af      	bhi.n	5e52 <__multiply+0x62>
    5ef2:	f8dd 9004 	ldr.w	r9, [sp, #4]
    5ef6:	f1b8 0f00 	cmp.w	r8, #0
    5efa:	dd0b      	ble.n	5f14 <__multiply+0x124>
    5efc:	f859 3c04 	ldr.w	r3, [r9, #-4]
    5f00:	f1a9 0904 	sub.w	r9, r9, #4
    5f04:	b11b      	cbz	r3, 5f0e <__multiply+0x11e>
    5f06:	e005      	b.n	5f14 <__multiply+0x124>
    5f08:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    5f0c:	b913      	cbnz	r3, 5f14 <__multiply+0x124>
    5f0e:	f1b8 0801 	subs.w	r8, r8, #1
    5f12:	d1f9      	bne.n	5f08 <__multiply+0x118>
    5f14:	9800      	ldr	r0, [sp, #0]
    5f16:	f8c0 8010 	str.w	r8, [r0, #16]
    5f1a:	b003      	add	sp, #12
    5f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005f20 <__pow5mult>:
    5f20:	f012 0303 	ands.w	r3, r2, #3
    5f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f28:	4614      	mov	r4, r2
    5f2a:	4607      	mov	r7, r0
    5f2c:	d12e      	bne.n	5f8c <__pow5mult+0x6c>
    5f2e:	460e      	mov	r6, r1
    5f30:	10a4      	asrs	r4, r4, #2
    5f32:	d01c      	beq.n	5f6e <__pow5mult+0x4e>
    5f34:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    5f36:	b395      	cbz	r5, 5f9e <__pow5mult+0x7e>
    5f38:	07e3      	lsls	r3, r4, #31
    5f3a:	f04f 0800 	mov.w	r8, #0
    5f3e:	d406      	bmi.n	5f4e <__pow5mult+0x2e>
    5f40:	1064      	asrs	r4, r4, #1
    5f42:	d014      	beq.n	5f6e <__pow5mult+0x4e>
    5f44:	6828      	ldr	r0, [r5, #0]
    5f46:	b1a8      	cbz	r0, 5f74 <__pow5mult+0x54>
    5f48:	4605      	mov	r5, r0
    5f4a:	07e3      	lsls	r3, r4, #31
    5f4c:	d5f8      	bpl.n	5f40 <__pow5mult+0x20>
    5f4e:	462a      	mov	r2, r5
    5f50:	4631      	mov	r1, r6
    5f52:	4638      	mov	r0, r7
    5f54:	f7ff ff4c 	bl	5df0 <__multiply>
    5f58:	b1b6      	cbz	r6, 5f88 <__pow5mult+0x68>
    5f5a:	6872      	ldr	r2, [r6, #4]
    5f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5f5e:	1064      	asrs	r4, r4, #1
    5f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5f64:	6031      	str	r1, [r6, #0]
    5f66:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    5f6a:	4606      	mov	r6, r0
    5f6c:	d1ea      	bne.n	5f44 <__pow5mult+0x24>
    5f6e:	4630      	mov	r0, r6
    5f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f74:	462a      	mov	r2, r5
    5f76:	4629      	mov	r1, r5
    5f78:	4638      	mov	r0, r7
    5f7a:	f7ff ff39 	bl	5df0 <__multiply>
    5f7e:	6028      	str	r0, [r5, #0]
    5f80:	f8c0 8000 	str.w	r8, [r0]
    5f84:	4605      	mov	r5, r0
    5f86:	e7e0      	b.n	5f4a <__pow5mult+0x2a>
    5f88:	4606      	mov	r6, r0
    5f8a:	e7d9      	b.n	5f40 <__pow5mult+0x20>
    5f8c:	1e5a      	subs	r2, r3, #1
    5f8e:	4d0b      	ldr	r5, [pc, #44]	; (5fbc <__pow5mult+0x9c>)
    5f90:	2300      	movs	r3, #0
    5f92:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    5f96:	f7ff fe93 	bl	5cc0 <__multadd>
    5f9a:	4606      	mov	r6, r0
    5f9c:	e7c8      	b.n	5f30 <__pow5mult+0x10>
    5f9e:	2101      	movs	r1, #1
    5fa0:	4638      	mov	r0, r7
    5fa2:	f7ff fe5d 	bl	5c60 <_Balloc>
    5fa6:	f240 2171 	movw	r1, #625	; 0x271
    5faa:	2201      	movs	r2, #1
    5fac:	2300      	movs	r3, #0
    5fae:	6141      	str	r1, [r0, #20]
    5fb0:	6102      	str	r2, [r0, #16]
    5fb2:	4605      	mov	r5, r0
    5fb4:	64b8      	str	r0, [r7, #72]	; 0x48
    5fb6:	6003      	str	r3, [r0, #0]
    5fb8:	e7be      	b.n	5f38 <__pow5mult+0x18>
    5fba:	bf00      	nop
    5fbc:	20004768 	.word	0x20004768

00005fc0 <__lshift>:
    5fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5fc4:	4691      	mov	r9, r2
    5fc6:	690a      	ldr	r2, [r1, #16]
    5fc8:	688b      	ldr	r3, [r1, #8]
    5fca:	ea4f 1469 	mov.w	r4, r9, asr #5
    5fce:	eb04 0802 	add.w	r8, r4, r2
    5fd2:	f108 0501 	add.w	r5, r8, #1
    5fd6:	429d      	cmp	r5, r3
    5fd8:	460e      	mov	r6, r1
    5fda:	4682      	mov	sl, r0
    5fdc:	6849      	ldr	r1, [r1, #4]
    5fde:	dd04      	ble.n	5fea <__lshift+0x2a>
    5fe0:	005b      	lsls	r3, r3, #1
    5fe2:	429d      	cmp	r5, r3
    5fe4:	f101 0101 	add.w	r1, r1, #1
    5fe8:	dcfa      	bgt.n	5fe0 <__lshift+0x20>
    5fea:	4650      	mov	r0, sl
    5fec:	f7ff fe38 	bl	5c60 <_Balloc>
    5ff0:	2c00      	cmp	r4, #0
    5ff2:	f100 0214 	add.w	r2, r0, #20
    5ff6:	dd38      	ble.n	606a <__lshift+0xaa>
    5ff8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    5ffc:	2100      	movs	r1, #0
    5ffe:	f842 1b04 	str.w	r1, [r2], #4
    6002:	4293      	cmp	r3, r2
    6004:	d1fb      	bne.n	5ffe <__lshift+0x3e>
    6006:	6934      	ldr	r4, [r6, #16]
    6008:	f106 0114 	add.w	r1, r6, #20
    600c:	f019 091f 	ands.w	r9, r9, #31
    6010:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    6014:	d021      	beq.n	605a <__lshift+0x9a>
    6016:	f1c9 0220 	rsb	r2, r9, #32
    601a:	2400      	movs	r4, #0
    601c:	680f      	ldr	r7, [r1, #0]
    601e:	fa07 fc09 	lsl.w	ip, r7, r9
    6022:	ea4c 0404 	orr.w	r4, ip, r4
    6026:	469c      	mov	ip, r3
    6028:	f843 4b04 	str.w	r4, [r3], #4
    602c:	f851 4b04 	ldr.w	r4, [r1], #4
    6030:	458e      	cmp	lr, r1
    6032:	fa24 f402 	lsr.w	r4, r4, r2
    6036:	d8f1      	bhi.n	601c <__lshift+0x5c>
    6038:	f8cc 4004 	str.w	r4, [ip, #4]
    603c:	b10c      	cbz	r4, 6042 <__lshift+0x82>
    603e:	f108 0502 	add.w	r5, r8, #2
    6042:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    6046:	6872      	ldr	r2, [r6, #4]
    6048:	3d01      	subs	r5, #1
    604a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    604e:	6105      	str	r5, [r0, #16]
    6050:	6031      	str	r1, [r6, #0]
    6052:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    6056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    605a:	3b04      	subs	r3, #4
    605c:	f851 2b04 	ldr.w	r2, [r1], #4
    6060:	f843 2f04 	str.w	r2, [r3, #4]!
    6064:	458e      	cmp	lr, r1
    6066:	d8f9      	bhi.n	605c <__lshift+0x9c>
    6068:	e7eb      	b.n	6042 <__lshift+0x82>
    606a:	4613      	mov	r3, r2
    606c:	e7cb      	b.n	6006 <__lshift+0x46>
    606e:	bf00      	nop

00006070 <__mcmp>:
    6070:	6902      	ldr	r2, [r0, #16]
    6072:	690b      	ldr	r3, [r1, #16]
    6074:	1ad2      	subs	r2, r2, r3
    6076:	d113      	bne.n	60a0 <__mcmp+0x30>
    6078:	009b      	lsls	r3, r3, #2
    607a:	3014      	adds	r0, #20
    607c:	3114      	adds	r1, #20
    607e:	4419      	add	r1, r3
    6080:	b410      	push	{r4}
    6082:	4403      	add	r3, r0
    6084:	e001      	b.n	608a <__mcmp+0x1a>
    6086:	4298      	cmp	r0, r3
    6088:	d20c      	bcs.n	60a4 <__mcmp+0x34>
    608a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    608e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    6092:	4294      	cmp	r4, r2
    6094:	d0f7      	beq.n	6086 <__mcmp+0x16>
    6096:	d309      	bcc.n	60ac <__mcmp+0x3c>
    6098:	2001      	movs	r0, #1
    609a:	f85d 4b04 	ldr.w	r4, [sp], #4
    609e:	4770      	bx	lr
    60a0:	4610      	mov	r0, r2
    60a2:	4770      	bx	lr
    60a4:	2000      	movs	r0, #0
    60a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    60aa:	4770      	bx	lr
    60ac:	f04f 30ff 	mov.w	r0, #4294967295
    60b0:	e7f3      	b.n	609a <__mcmp+0x2a>
    60b2:	bf00      	nop

000060b4 <__mdiff>:
    60b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    60b8:	690b      	ldr	r3, [r1, #16]
    60ba:	460f      	mov	r7, r1
    60bc:	6911      	ldr	r1, [r2, #16]
    60be:	1a5b      	subs	r3, r3, r1
    60c0:	2b00      	cmp	r3, #0
    60c2:	4690      	mov	r8, r2
    60c4:	d117      	bne.n	60f6 <__mdiff+0x42>
    60c6:	0089      	lsls	r1, r1, #2
    60c8:	f107 0214 	add.w	r2, r7, #20
    60cc:	f108 0514 	add.w	r5, r8, #20
    60d0:	1853      	adds	r3, r2, r1
    60d2:	4429      	add	r1, r5
    60d4:	e001      	b.n	60da <__mdiff+0x26>
    60d6:	429a      	cmp	r2, r3
    60d8:	d25e      	bcs.n	6198 <__mdiff+0xe4>
    60da:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    60de:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    60e2:	42a6      	cmp	r6, r4
    60e4:	d0f7      	beq.n	60d6 <__mdiff+0x22>
    60e6:	d260      	bcs.n	61aa <__mdiff+0xf6>
    60e8:	463b      	mov	r3, r7
    60ea:	4614      	mov	r4, r2
    60ec:	4647      	mov	r7, r8
    60ee:	f04f 0901 	mov.w	r9, #1
    60f2:	4698      	mov	r8, r3
    60f4:	e006      	b.n	6104 <__mdiff+0x50>
    60f6:	db5d      	blt.n	61b4 <__mdiff+0x100>
    60f8:	f107 0514 	add.w	r5, r7, #20
    60fc:	f102 0414 	add.w	r4, r2, #20
    6100:	f04f 0900 	mov.w	r9, #0
    6104:	6879      	ldr	r1, [r7, #4]
    6106:	f7ff fdab 	bl	5c60 <_Balloc>
    610a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    610e:	693e      	ldr	r6, [r7, #16]
    6110:	f8c0 900c 	str.w	r9, [r0, #12]
    6114:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    6118:	46a6      	mov	lr, r4
    611a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    611e:	f100 0414 	add.w	r4, r0, #20
    6122:	2300      	movs	r3, #0
    6124:	f85e 1b04 	ldr.w	r1, [lr], #4
    6128:	f855 8b04 	ldr.w	r8, [r5], #4
    612c:	b28a      	uxth	r2, r1
    612e:	fa13 f388 	uxtah	r3, r3, r8
    6132:	0c09      	lsrs	r1, r1, #16
    6134:	1a9a      	subs	r2, r3, r2
    6136:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    613a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    613e:	b292      	uxth	r2, r2
    6140:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    6144:	45f4      	cmp	ip, lr
    6146:	f844 2b04 	str.w	r2, [r4], #4
    614a:	ea4f 4323 	mov.w	r3, r3, asr #16
    614e:	d8e9      	bhi.n	6124 <__mdiff+0x70>
    6150:	42af      	cmp	r7, r5
    6152:	d917      	bls.n	6184 <__mdiff+0xd0>
    6154:	46a4      	mov	ip, r4
    6156:	4629      	mov	r1, r5
    6158:	f851 eb04 	ldr.w	lr, [r1], #4
    615c:	fa13 f28e 	uxtah	r2, r3, lr
    6160:	1413      	asrs	r3, r2, #16
    6162:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    6166:	b292      	uxth	r2, r2
    6168:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    616c:	428f      	cmp	r7, r1
    616e:	f84c 2b04 	str.w	r2, [ip], #4
    6172:	ea4f 4323 	mov.w	r3, r3, asr #16
    6176:	d8ef      	bhi.n	6158 <__mdiff+0xa4>
    6178:	43ed      	mvns	r5, r5
    617a:	443d      	add	r5, r7
    617c:	f025 0503 	bic.w	r5, r5, #3
    6180:	3504      	adds	r5, #4
    6182:	442c      	add	r4, r5
    6184:	3c04      	subs	r4, #4
    6186:	b922      	cbnz	r2, 6192 <__mdiff+0xde>
    6188:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    618c:	3e01      	subs	r6, #1
    618e:	2b00      	cmp	r3, #0
    6190:	d0fa      	beq.n	6188 <__mdiff+0xd4>
    6192:	6106      	str	r6, [r0, #16]
    6194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6198:	2100      	movs	r1, #0
    619a:	f7ff fd61 	bl	5c60 <_Balloc>
    619e:	2201      	movs	r2, #1
    61a0:	2300      	movs	r3, #0
    61a2:	6102      	str	r2, [r0, #16]
    61a4:	6143      	str	r3, [r0, #20]
    61a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    61aa:	462c      	mov	r4, r5
    61ac:	f04f 0900 	mov.w	r9, #0
    61b0:	4615      	mov	r5, r2
    61b2:	e7a7      	b.n	6104 <__mdiff+0x50>
    61b4:	463b      	mov	r3, r7
    61b6:	f107 0414 	add.w	r4, r7, #20
    61ba:	f108 0514 	add.w	r5, r8, #20
    61be:	4647      	mov	r7, r8
    61c0:	f04f 0901 	mov.w	r9, #1
    61c4:	4698      	mov	r8, r3
    61c6:	e79d      	b.n	6104 <__mdiff+0x50>

000061c8 <__d2b>:
    61c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    61cc:	ec57 6b10 	vmov	r6, r7, d0
    61d0:	b083      	sub	sp, #12
    61d2:	4688      	mov	r8, r1
    61d4:	2101      	movs	r1, #1
    61d6:	463c      	mov	r4, r7
    61d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
    61dc:	4617      	mov	r7, r2
    61de:	f7ff fd3f 	bl	5c60 <_Balloc>
    61e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
    61e6:	4681      	mov	r9, r0
    61e8:	b10d      	cbz	r5, 61ee <__d2b+0x26>
    61ea:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    61ee:	9401      	str	r4, [sp, #4]
    61f0:	b31e      	cbz	r6, 623a <__d2b+0x72>
    61f2:	a802      	add	r0, sp, #8
    61f4:	f840 6d08 	str.w	r6, [r0, #-8]!
    61f8:	f7ff fdc2 	bl	5d80 <__lo0bits>
    61fc:	2800      	cmp	r0, #0
    61fe:	d134      	bne.n	626a <__d2b+0xa2>
    6200:	e89d 000c 	ldmia.w	sp, {r2, r3}
    6204:	f8c9 2014 	str.w	r2, [r9, #20]
    6208:	2b00      	cmp	r3, #0
    620a:	bf0c      	ite	eq
    620c:	2101      	moveq	r1, #1
    620e:	2102      	movne	r1, #2
    6210:	f8c9 3018 	str.w	r3, [r9, #24]
    6214:	f8c9 1010 	str.w	r1, [r9, #16]
    6218:	b9dd      	cbnz	r5, 6252 <__d2b+0x8a>
    621a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    621e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    6222:	f8c8 0000 	str.w	r0, [r8]
    6226:	6918      	ldr	r0, [r3, #16]
    6228:	f7ff fd8a 	bl	5d40 <__hi0bits>
    622c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    6230:	6038      	str	r0, [r7, #0]
    6232:	4648      	mov	r0, r9
    6234:	b003      	add	sp, #12
    6236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    623a:	a801      	add	r0, sp, #4
    623c:	f7ff fda0 	bl	5d80 <__lo0bits>
    6240:	9b01      	ldr	r3, [sp, #4]
    6242:	f8c9 3014 	str.w	r3, [r9, #20]
    6246:	2101      	movs	r1, #1
    6248:	3020      	adds	r0, #32
    624a:	f8c9 1010 	str.w	r1, [r9, #16]
    624e:	2d00      	cmp	r5, #0
    6250:	d0e3      	beq.n	621a <__d2b+0x52>
    6252:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    6256:	4405      	add	r5, r0
    6258:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    625c:	f8c8 5000 	str.w	r5, [r8]
    6260:	6038      	str	r0, [r7, #0]
    6262:	4648      	mov	r0, r9
    6264:	b003      	add	sp, #12
    6266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    626a:	e89d 000c 	ldmia.w	sp, {r2, r3}
    626e:	f1c0 0120 	rsb	r1, r0, #32
    6272:	fa03 f101 	lsl.w	r1, r3, r1
    6276:	430a      	orrs	r2, r1
    6278:	40c3      	lsrs	r3, r0
    627a:	9301      	str	r3, [sp, #4]
    627c:	f8c9 2014 	str.w	r2, [r9, #20]
    6280:	e7c2      	b.n	6208 <__d2b+0x40>
    6282:	bf00      	nop

00006284 <_vasnprintf_r>:
    6284:	b570      	push	{r4, r5, r6, lr}
    6286:	4615      	mov	r5, r2
    6288:	b09a      	sub	sp, #104	; 0x68
    628a:	6814      	ldr	r4, [r2, #0]
    628c:	b109      	cbz	r1, 6292 <_vasnprintf_r+0xe>
    628e:	2c00      	cmp	r4, #0
    6290:	d11a      	bne.n	62c8 <_vasnprintf_r+0x44>
    6292:	2400      	movs	r4, #0
    6294:	f44f 7222 	mov.w	r2, #648	; 0x288
    6298:	f8ad 200c 	strh.w	r2, [sp, #12]
    629c:	9400      	str	r4, [sp, #0]
    629e:	9404      	str	r4, [sp, #16]
    62a0:	461a      	mov	r2, r3
    62a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    62a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    62a8:	9402      	str	r4, [sp, #8]
    62aa:	4669      	mov	r1, sp
    62ac:	9405      	str	r4, [sp, #20]
    62ae:	f8ad 600e 	strh.w	r6, [sp, #14]
    62b2:	f000 ff21 	bl	70f8 <_svfprintf_r>
    62b6:	2800      	cmp	r0, #0
    62b8:	db11      	blt.n	62de <_vasnprintf_r+0x5a>
    62ba:	9b00      	ldr	r3, [sp, #0]
    62bc:	6028      	str	r0, [r5, #0]
    62be:	2200      	movs	r2, #0
    62c0:	701a      	strb	r2, [r3, #0]
    62c2:	9804      	ldr	r0, [sp, #16]
    62c4:	b01a      	add	sp, #104	; 0x68
    62c6:	bd70      	pop	{r4, r5, r6, pc}
    62c8:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    62cc:	9100      	str	r1, [sp, #0]
    62ce:	9104      	str	r1, [sp, #16]
    62d0:	f8ad 200c 	strh.w	r2, [sp, #12]
    62d4:	dae4      	bge.n	62a0 <_vasnprintf_r+0x1c>
    62d6:	238b      	movs	r3, #139	; 0x8b
    62d8:	6003      	str	r3, [r0, #0]
    62da:	2000      	movs	r0, #0
    62dc:	e7f2      	b.n	62c4 <_vasnprintf_r+0x40>
    62de:	2000      	movs	r0, #0
    62e0:	e7f0      	b.n	62c4 <_vasnprintf_r+0x40>
    62e2:	bf00      	nop

000062e4 <_calloc_r>:
    62e4:	b510      	push	{r4, lr}
    62e6:	fb02 f101 	mul.w	r1, r2, r1
    62ea:	f7fe fc81 	bl	4bf0 <_malloc_r>
    62ee:	4604      	mov	r4, r0
    62f0:	b1d8      	cbz	r0, 632a <_calloc_r+0x46>
    62f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
    62f6:	f022 0203 	bic.w	r2, r2, #3
    62fa:	3a04      	subs	r2, #4
    62fc:	2a24      	cmp	r2, #36	; 0x24
    62fe:	d818      	bhi.n	6332 <_calloc_r+0x4e>
    6300:	2a13      	cmp	r2, #19
    6302:	d914      	bls.n	632e <_calloc_r+0x4a>
    6304:	2300      	movs	r3, #0
    6306:	2a1b      	cmp	r2, #27
    6308:	6003      	str	r3, [r0, #0]
    630a:	6043      	str	r3, [r0, #4]
    630c:	d916      	bls.n	633c <_calloc_r+0x58>
    630e:	2a24      	cmp	r2, #36	; 0x24
    6310:	6083      	str	r3, [r0, #8]
    6312:	60c3      	str	r3, [r0, #12]
    6314:	bf11      	iteee	ne
    6316:	f100 0210 	addne.w	r2, r0, #16
    631a:	6103      	streq	r3, [r0, #16]
    631c:	6143      	streq	r3, [r0, #20]
    631e:	f100 0218 	addeq.w	r2, r0, #24
    6322:	2300      	movs	r3, #0
    6324:	6013      	str	r3, [r2, #0]
    6326:	6053      	str	r3, [r2, #4]
    6328:	6093      	str	r3, [r2, #8]
    632a:	4620      	mov	r0, r4
    632c:	bd10      	pop	{r4, pc}
    632e:	4602      	mov	r2, r0
    6330:	e7f7      	b.n	6322 <_calloc_r+0x3e>
    6332:	2100      	movs	r1, #0
    6334:	f7fe ff8e 	bl	5254 <memset>
    6338:	4620      	mov	r0, r4
    633a:	bd10      	pop	{r4, pc}
    633c:	f100 0208 	add.w	r2, r0, #8
    6340:	e7ef      	b.n	6322 <_calloc_r+0x3e>
    6342:	bf00      	nop

00006344 <quorem>:
    6344:	6902      	ldr	r2, [r0, #16]
    6346:	690b      	ldr	r3, [r1, #16]
    6348:	4293      	cmp	r3, r2
    634a:	f300 808d 	bgt.w	6468 <quorem+0x124>
    634e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6352:	f103 38ff 	add.w	r8, r3, #4294967295
    6356:	f101 0714 	add.w	r7, r1, #20
    635a:	f100 0b14 	add.w	fp, r0, #20
    635e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    6362:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    6366:	ea4f 0488 	mov.w	r4, r8, lsl #2
    636a:	b083      	sub	sp, #12
    636c:	3201      	adds	r2, #1
    636e:	fbb3 f9f2 	udiv	r9, r3, r2
    6372:	eb0b 0304 	add.w	r3, fp, r4
    6376:	9400      	str	r4, [sp, #0]
    6378:	eb07 0a04 	add.w	sl, r7, r4
    637c:	9301      	str	r3, [sp, #4]
    637e:	f1b9 0f00 	cmp.w	r9, #0
    6382:	d039      	beq.n	63f8 <quorem+0xb4>
    6384:	2500      	movs	r5, #0
    6386:	46bc      	mov	ip, r7
    6388:	46de      	mov	lr, fp
    638a:	462b      	mov	r3, r5
    638c:	f85c 6b04 	ldr.w	r6, [ip], #4
    6390:	f8de 2000 	ldr.w	r2, [lr]
    6394:	b2b4      	uxth	r4, r6
    6396:	fb09 5504 	mla	r5, r9, r4, r5
    639a:	0c36      	lsrs	r6, r6, #16
    639c:	0c2c      	lsrs	r4, r5, #16
    639e:	fb09 4406 	mla	r4, r9, r6, r4
    63a2:	b2ad      	uxth	r5, r5
    63a4:	1b5b      	subs	r3, r3, r5
    63a6:	b2a6      	uxth	r6, r4
    63a8:	fa13 f382 	uxtah	r3, r3, r2
    63ac:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    63b0:	eb06 4623 	add.w	r6, r6, r3, asr #16
    63b4:	b29b      	uxth	r3, r3
    63b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    63ba:	45e2      	cmp	sl, ip
    63bc:	f84e 3b04 	str.w	r3, [lr], #4
    63c0:	ea4f 4514 	mov.w	r5, r4, lsr #16
    63c4:	ea4f 4326 	mov.w	r3, r6, asr #16
    63c8:	d2e0      	bcs.n	638c <quorem+0x48>
    63ca:	9b00      	ldr	r3, [sp, #0]
    63cc:	f85b 3003 	ldr.w	r3, [fp, r3]
    63d0:	b993      	cbnz	r3, 63f8 <quorem+0xb4>
    63d2:	9c01      	ldr	r4, [sp, #4]
    63d4:	1f23      	subs	r3, r4, #4
    63d6:	459b      	cmp	fp, r3
    63d8:	d20c      	bcs.n	63f4 <quorem+0xb0>
    63da:	f854 3c04 	ldr.w	r3, [r4, #-4]
    63de:	b94b      	cbnz	r3, 63f4 <quorem+0xb0>
    63e0:	f1a4 0308 	sub.w	r3, r4, #8
    63e4:	e002      	b.n	63ec <quorem+0xa8>
    63e6:	681a      	ldr	r2, [r3, #0]
    63e8:	3b04      	subs	r3, #4
    63ea:	b91a      	cbnz	r2, 63f4 <quorem+0xb0>
    63ec:	459b      	cmp	fp, r3
    63ee:	f108 38ff 	add.w	r8, r8, #4294967295
    63f2:	d3f8      	bcc.n	63e6 <quorem+0xa2>
    63f4:	f8c0 8010 	str.w	r8, [r0, #16]
    63f8:	4604      	mov	r4, r0
    63fa:	f7ff fe39 	bl	6070 <__mcmp>
    63fe:	2800      	cmp	r0, #0
    6400:	db2e      	blt.n	6460 <quorem+0x11c>
    6402:	f109 0901 	add.w	r9, r9, #1
    6406:	465d      	mov	r5, fp
    6408:	2300      	movs	r3, #0
    640a:	f857 1b04 	ldr.w	r1, [r7], #4
    640e:	6828      	ldr	r0, [r5, #0]
    6410:	b28a      	uxth	r2, r1
    6412:	1a9a      	subs	r2, r3, r2
    6414:	0c09      	lsrs	r1, r1, #16
    6416:	fa12 f280 	uxtah	r2, r2, r0
    641a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    641e:	eb03 4322 	add.w	r3, r3, r2, asr #16
    6422:	b291      	uxth	r1, r2
    6424:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6428:	45ba      	cmp	sl, r7
    642a:	f845 1b04 	str.w	r1, [r5], #4
    642e:	ea4f 4323 	mov.w	r3, r3, asr #16
    6432:	d2ea      	bcs.n	640a <quorem+0xc6>
    6434:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    6438:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    643c:	b982      	cbnz	r2, 6460 <quorem+0x11c>
    643e:	1f1a      	subs	r2, r3, #4
    6440:	4593      	cmp	fp, r2
    6442:	d20b      	bcs.n	645c <quorem+0x118>
    6444:	f853 2c04 	ldr.w	r2, [r3, #-4]
    6448:	b942      	cbnz	r2, 645c <quorem+0x118>
    644a:	3b08      	subs	r3, #8
    644c:	e002      	b.n	6454 <quorem+0x110>
    644e:	681a      	ldr	r2, [r3, #0]
    6450:	3b04      	subs	r3, #4
    6452:	b91a      	cbnz	r2, 645c <quorem+0x118>
    6454:	459b      	cmp	fp, r3
    6456:	f108 38ff 	add.w	r8, r8, #4294967295
    645a:	d3f8      	bcc.n	644e <quorem+0x10a>
    645c:	f8c4 8010 	str.w	r8, [r4, #16]
    6460:	4648      	mov	r0, r9
    6462:	b003      	add	sp, #12
    6464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6468:	2000      	movs	r0, #0
    646a:	4770      	bx	lr
    646c:	0000      	movs	r0, r0
	...

00006470 <_dtoa_r>:
    6470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6474:	ec57 6b10 	vmov	r6, r7, d0
    6478:	b093      	sub	sp, #76	; 0x4c
    647a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    647c:	9101      	str	r1, [sp, #4]
    647e:	4604      	mov	r4, r0
    6480:	4690      	mov	r8, r2
    6482:	9304      	str	r3, [sp, #16]
    6484:	ee10 aa10 	vmov	sl, s0
    6488:	46bb      	mov	fp, r7
    648a:	b14d      	cbz	r5, 64a0 <_dtoa_r+0x30>
    648c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    648e:	606a      	str	r2, [r5, #4]
    6490:	2301      	movs	r3, #1
    6492:	4093      	lsls	r3, r2
    6494:	60ab      	str	r3, [r5, #8]
    6496:	4629      	mov	r1, r5
    6498:	f7ff fc08 	bl	5cac <_Bfree>
    649c:	2300      	movs	r3, #0
    649e:	6423      	str	r3, [r4, #64]	; 0x40
    64a0:	f1bb 0f00 	cmp.w	fp, #0
    64a4:	465e      	mov	r6, fp
    64a6:	db34      	blt.n	6512 <_dtoa_r+0xa2>
    64a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    64aa:	2300      	movs	r3, #0
    64ac:	6013      	str	r3, [r2, #0]
    64ae:	4bc4      	ldr	r3, [pc, #784]	; (67c0 <_dtoa_r+0x350>)
    64b0:	461a      	mov	r2, r3
    64b2:	4033      	ands	r3, r6
    64b4:	4293      	cmp	r3, r2
    64b6:	d015      	beq.n	64e4 <_dtoa_r+0x74>
    64b8:	ec4b ab17 	vmov	d7, sl, fp
    64bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
    64c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    64c4:	e9cd ab02 	strd	sl, fp, [sp, #8]
    64c8:	d12a      	bne.n	6520 <_dtoa_r+0xb0>
    64ca:	9a04      	ldr	r2, [sp, #16]
    64cc:	2301      	movs	r3, #1
    64ce:	6013      	str	r3, [r2, #0]
    64d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    64d2:	2b00      	cmp	r3, #0
    64d4:	f000 80b7 	beq.w	6646 <_dtoa_r+0x1d6>
    64d8:	48ba      	ldr	r0, [pc, #744]	; (67c4 <_dtoa_r+0x354>)
    64da:	6018      	str	r0, [r3, #0]
    64dc:	3801      	subs	r0, #1
    64de:	b013      	add	sp, #76	; 0x4c
    64e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    64e4:	9a04      	ldr	r2, [sp, #16]
    64e6:	f242 730f 	movw	r3, #9999	; 0x270f
    64ea:	6013      	str	r3, [r2, #0]
    64ec:	f1ba 0f00 	cmp.w	sl, #0
    64f0:	f000 8092 	beq.w	6618 <_dtoa_r+0x1a8>
    64f4:	48b4      	ldr	r0, [pc, #720]	; (67c8 <_dtoa_r+0x358>)
    64f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    64f8:	2b00      	cmp	r3, #0
    64fa:	d0f0      	beq.n	64de <_dtoa_r+0x6e>
    64fc:	78c3      	ldrb	r3, [r0, #3]
    64fe:	2b00      	cmp	r3, #0
    6500:	f000 80a3 	beq.w	664a <_dtoa_r+0x1da>
    6504:	f100 0308 	add.w	r3, r0, #8
    6508:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    650a:	6013      	str	r3, [r2, #0]
    650c:	b013      	add	sp, #76	; 0x4c
    650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6512:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6514:	2301      	movs	r3, #1
    6516:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
    651a:	6013      	str	r3, [r2, #0]
    651c:	46b3      	mov	fp, r6
    651e:	e7c6      	b.n	64ae <_dtoa_r+0x3e>
    6520:	a911      	add	r1, sp, #68	; 0x44
    6522:	aa10      	add	r2, sp, #64	; 0x40
    6524:	ed9d 0b02 	vldr	d0, [sp, #8]
    6528:	4620      	mov	r0, r4
    652a:	f7ff fe4d 	bl	61c8 <__d2b>
    652e:	0d31      	lsrs	r1, r6, #20
    6530:	9007      	str	r0, [sp, #28]
    6532:	d17a      	bne.n	662a <_dtoa_r+0x1ba>
    6534:	9810      	ldr	r0, [sp, #64]	; 0x40
    6536:	9911      	ldr	r1, [sp, #68]	; 0x44
    6538:	4401      	add	r1, r0
    653a:	f201 4332 	addw	r3, r1, #1074	; 0x432
    653e:	2b20      	cmp	r3, #32
    6540:	f340 8241 	ble.w	69c6 <_dtoa_r+0x556>
    6544:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    6548:	f201 4212 	addw	r2, r1, #1042	; 0x412
    654c:	409e      	lsls	r6, r3
    654e:	fa2a f302 	lsr.w	r3, sl, r2
    6552:	4333      	orrs	r3, r6
    6554:	ee07 3a90 	vmov	s15, r3
    6558:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    655c:	2501      	movs	r5, #1
    655e:	ec53 2b17 	vmov	r2, r3, d7
    6562:	3901      	subs	r1, #1
    6564:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
    6568:	950a      	str	r5, [sp, #40]	; 0x28
    656a:	ec43 2b17 	vmov	d7, r2, r3
    656e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    6572:	ed9f 4b8d 	vldr	d4, [pc, #564]	; 67a8 <_dtoa_r+0x338>
    6576:	ee37 6b46 	vsub.f64	d6, d7, d6
    657a:	ed9f 7b8d 	vldr	d7, [pc, #564]	; 67b0 <_dtoa_r+0x340>
    657e:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 67b8 <_dtoa_r+0x348>
    6582:	eea6 7b04 	vfma.f64	d7, d6, d4
    6586:	ee06 1a90 	vmov	s13, r1
    658a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    658e:	eea6 7b05 	vfma.f64	d7, d6, d5
    6592:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    6596:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    659a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    659e:	edcd 6a02 	vstr	s13, [sp, #8]
    65a2:	f100 811c 	bmi.w	67de <_dtoa_r+0x36e>
    65a6:	9d02      	ldr	r5, [sp, #8]
    65a8:	2d16      	cmp	r5, #22
    65aa:	f200 8115 	bhi.w	67d8 <_dtoa_r+0x368>
    65ae:	4b87      	ldr	r3, [pc, #540]	; (67cc <_dtoa_r+0x35c>)
    65b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    65b4:	ed93 7b00 	vldr	d7, [r3]
    65b8:	ec4b ab16 	vmov	d6, sl, fp
    65bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
    65c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    65c4:	f340 8206 	ble.w	69d4 <_dtoa_r+0x564>
    65c8:	1e6b      	subs	r3, r5, #1
    65ca:	9302      	str	r3, [sp, #8]
    65cc:	2300      	movs	r3, #0
    65ce:	930c      	str	r3, [sp, #48]	; 0x30
    65d0:	1a41      	subs	r1, r0, r1
    65d2:	f1b1 0901 	subs.w	r9, r1, #1
    65d6:	f100 8117 	bmi.w	6808 <_dtoa_r+0x398>
    65da:	2300      	movs	r3, #0
    65dc:	9306      	str	r3, [sp, #24]
    65de:	9b02      	ldr	r3, [sp, #8]
    65e0:	2b00      	cmp	r3, #0
    65e2:	f2c0 8108 	blt.w	67f6 <_dtoa_r+0x386>
    65e6:	4499      	add	r9, r3
    65e8:	930b      	str	r3, [sp, #44]	; 0x2c
    65ea:	2300      	movs	r3, #0
    65ec:	9305      	str	r3, [sp, #20]
    65ee:	9b01      	ldr	r3, [sp, #4]
    65f0:	2b09      	cmp	r3, #9
    65f2:	d82c      	bhi.n	664e <_dtoa_r+0x1de>
    65f4:	2b05      	cmp	r3, #5
    65f6:	f340 855f 	ble.w	70b8 <_dtoa_r+0xc48>
    65fa:	3b04      	subs	r3, #4
    65fc:	9301      	str	r3, [sp, #4]
    65fe:	2300      	movs	r3, #0
    6600:	930e      	str	r3, [sp, #56]	; 0x38
    6602:	9b01      	ldr	r3, [sp, #4]
    6604:	3b02      	subs	r3, #2
    6606:	2b03      	cmp	r3, #3
    6608:	f200 855f 	bhi.w	70ca <_dtoa_r+0xc5a>
    660c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6610:	01e502a9 	.word	0x01e502a9
    6614:	03c802b5 	.word	0x03c802b5
    6618:	4b6b      	ldr	r3, [pc, #428]	; (67c8 <_dtoa_r+0x358>)
    661a:	4a6d      	ldr	r2, [pc, #436]	; (67d0 <_dtoa_r+0x360>)
    661c:	f3c6 0013 	ubfx	r0, r6, #0, #20
    6620:	2800      	cmp	r0, #0
    6622:	bf14      	ite	ne
    6624:	4618      	movne	r0, r3
    6626:	4610      	moveq	r0, r2
    6628:	e765      	b.n	64f6 <_dtoa_r+0x86>
    662a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    662e:	f3c3 0013 	ubfx	r0, r3, #0, #20
    6632:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    6636:	2500      	movs	r5, #0
    6638:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    663c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    6640:	9810      	ldr	r0, [sp, #64]	; 0x40
    6642:	950a      	str	r5, [sp, #40]	; 0x28
    6644:	e791      	b.n	656a <_dtoa_r+0xfa>
    6646:	4863      	ldr	r0, [pc, #396]	; (67d4 <_dtoa_r+0x364>)
    6648:	e749      	b.n	64de <_dtoa_r+0x6e>
    664a:	1cc3      	adds	r3, r0, #3
    664c:	e75c      	b.n	6508 <_dtoa_r+0x98>
    664e:	2100      	movs	r1, #0
    6650:	6461      	str	r1, [r4, #68]	; 0x44
    6652:	4620      	mov	r0, r4
    6654:	4688      	mov	r8, r1
    6656:	9101      	str	r1, [sp, #4]
    6658:	f7ff fb02 	bl	5c60 <_Balloc>
    665c:	f04f 37ff 	mov.w	r7, #4294967295
    6660:	2301      	movs	r3, #1
    6662:	9008      	str	r0, [sp, #32]
    6664:	6420      	str	r0, [r4, #64]	; 0x40
    6666:	970d      	str	r7, [sp, #52]	; 0x34
    6668:	9309      	str	r3, [sp, #36]	; 0x24
    666a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    666c:	2b00      	cmp	r3, #0
    666e:	db7a      	blt.n	6766 <_dtoa_r+0x2f6>
    6670:	9a02      	ldr	r2, [sp, #8]
    6672:	2a0e      	cmp	r2, #14
    6674:	dc77      	bgt.n	6766 <_dtoa_r+0x2f6>
    6676:	4b55      	ldr	r3, [pc, #340]	; (67cc <_dtoa_r+0x35c>)
    6678:	f1b8 0f00 	cmp.w	r8, #0
    667c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6680:	ed93 4b00 	vldr	d4, [r3]
    6684:	f2c0 8284 	blt.w	6b90 <_dtoa_r+0x720>
    6688:	eeb1 2b44 	vneg.f64	d2, d4
    668c:	ec4b ab17 	vmov	d7, sl, fp
    6690:	ee87 6b04 	vdiv.f64	d6, d7, d4
    6694:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    6698:	9a08      	ldr	r2, [sp, #32]
    669a:	ee16 3a10 	vmov	r3, s12
    669e:	2f01      	cmp	r7, #1
    66a0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    66a4:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    66a8:	f102 0b01 	add.w	fp, r2, #1
    66ac:	7013      	strb	r3, [r2, #0]
    66ae:	eea2 7b05 	vfma.f64	d7, d2, d5
    66b2:	d022      	beq.n	66fa <_dtoa_r+0x28a>
    66b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
    66b8:	ee27 7b03 	vmul.f64	d7, d7, d3
    66bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
    66c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66c4:	d03a      	beq.n	673c <_dtoa_r+0x2cc>
    66c6:	9a08      	ldr	r2, [sp, #32]
    66c8:	e006      	b.n	66d8 <_dtoa_r+0x268>
    66ca:	ee27 7b03 	vmul.f64	d7, d7, d3
    66ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
    66d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66d6:	d031      	beq.n	673c <_dtoa_r+0x2cc>
    66d8:	ee87 6b04 	vdiv.f64	d6, d7, d4
    66dc:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    66e0:	ee16 3a10 	vmov	r3, s12
    66e4:	3330      	adds	r3, #48	; 0x30
    66e6:	f80b 3b01 	strb.w	r3, [fp], #1
    66ea:	ebc2 030b 	rsb	r3, r2, fp
    66ee:	42bb      	cmp	r3, r7
    66f0:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    66f4:	eea2 7b05 	vfma.f64	d7, d2, d5
    66f8:	d1e7      	bne.n	66ca <_dtoa_r+0x25a>
    66fa:	ee37 7b07 	vadd.f64	d7, d7, d7
    66fe:	eeb4 4bc7 	vcmpe.f64	d4, d7
    6702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6706:	d408      	bmi.n	671a <_dtoa_r+0x2aa>
    6708:	eeb4 4b47 	vcmp.f64	d4, d7
    670c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6710:	d114      	bne.n	673c <_dtoa_r+0x2cc>
    6712:	ee16 3a10 	vmov	r3, s12
    6716:	07db      	lsls	r3, r3, #31
    6718:	d510      	bpl.n	673c <_dtoa_r+0x2cc>
    671a:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    671e:	9a08      	ldr	r2, [sp, #32]
    6720:	f10b 33ff 	add.w	r3, fp, #4294967295
    6724:	e004      	b.n	6730 <_dtoa_r+0x2c0>
    6726:	429a      	cmp	r2, r3
    6728:	f000 83e5 	beq.w	6ef6 <_dtoa_r+0xa86>
    672c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    6730:	2839      	cmp	r0, #57	; 0x39
    6732:	f103 0b01 	add.w	fp, r3, #1
    6736:	d0f6      	beq.n	6726 <_dtoa_r+0x2b6>
    6738:	3001      	adds	r0, #1
    673a:	7018      	strb	r0, [r3, #0]
    673c:	9907      	ldr	r1, [sp, #28]
    673e:	4620      	mov	r0, r4
    6740:	f7ff fab4 	bl	5cac <_Bfree>
    6744:	2200      	movs	r2, #0
    6746:	9b02      	ldr	r3, [sp, #8]
    6748:	f88b 2000 	strb.w	r2, [fp]
    674c:	9a04      	ldr	r2, [sp, #16]
    674e:	3301      	adds	r3, #1
    6750:	6013      	str	r3, [r2, #0]
    6752:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6754:	2b00      	cmp	r3, #0
    6756:	f000 8366 	beq.w	6e26 <_dtoa_r+0x9b6>
    675a:	9808      	ldr	r0, [sp, #32]
    675c:	f8c3 b000 	str.w	fp, [r3]
    6760:	b013      	add	sp, #76	; 0x4c
    6762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6766:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6768:	2a00      	cmp	r2, #0
    676a:	d053      	beq.n	6814 <_dtoa_r+0x3a4>
    676c:	9a01      	ldr	r2, [sp, #4]
    676e:	2a01      	cmp	r2, #1
    6770:	f340 822e 	ble.w	6bd0 <_dtoa_r+0x760>
    6774:	9905      	ldr	r1, [sp, #20]
    6776:	1e7a      	subs	r2, r7, #1
    6778:	4291      	cmp	r1, r2
    677a:	f2c0 8357 	blt.w	6e2c <_dtoa_r+0x9bc>
    677e:	1a8b      	subs	r3, r1, r2
    6780:	930e      	str	r3, [sp, #56]	; 0x38
    6782:	2f00      	cmp	r7, #0
    6784:	9b06      	ldr	r3, [sp, #24]
    6786:	f2c0 8424 	blt.w	6fd2 <_dtoa_r+0xb62>
    678a:	930a      	str	r3, [sp, #40]	; 0x28
    678c:	463b      	mov	r3, r7
    678e:	9a06      	ldr	r2, [sp, #24]
    6790:	2101      	movs	r1, #1
    6792:	441a      	add	r2, r3
    6794:	4620      	mov	r0, r4
    6796:	9206      	str	r2, [sp, #24]
    6798:	4499      	add	r9, r3
    679a:	f7ff fb1f 	bl	5ddc <__i2b>
    679e:	4606      	mov	r6, r0
    67a0:	e03d      	b.n	681e <_dtoa_r+0x3ae>
    67a2:	bf00      	nop
    67a4:	f3af 8000 	nop.w
    67a8:	636f4361 	.word	0x636f4361
    67ac:	3fd287a7 	.word	0x3fd287a7
    67b0:	8b60c8b3 	.word	0x8b60c8b3
    67b4:	3fc68a28 	.word	0x3fc68a28
    67b8:	509f79fb 	.word	0x509f79fb
    67bc:	3fd34413 	.word	0x3fd34413
    67c0:	7ff00000 	.word	0x7ff00000
    67c4:	20004785 	.word	0x20004785
    67c8:	20004780 	.word	0x20004780
    67cc:	20004678 	.word	0x20004678
    67d0:	20004774 	.word	0x20004774
    67d4:	20004784 	.word	0x20004784
    67d8:	2301      	movs	r3, #1
    67da:	930c      	str	r3, [sp, #48]	; 0x30
    67dc:	e6f8      	b.n	65d0 <_dtoa_r+0x160>
    67de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    67e2:	eeb4 7b46 	vcmp.f64	d7, d6
    67e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    67ea:	f43f aedc 	beq.w	65a6 <_dtoa_r+0x136>
    67ee:	9b02      	ldr	r3, [sp, #8]
    67f0:	3b01      	subs	r3, #1
    67f2:	9302      	str	r3, [sp, #8]
    67f4:	e6d7      	b.n	65a6 <_dtoa_r+0x136>
    67f6:	9a06      	ldr	r2, [sp, #24]
    67f8:	9b02      	ldr	r3, [sp, #8]
    67fa:	1ad2      	subs	r2, r2, r3
    67fc:	425b      	negs	r3, r3
    67fe:	9305      	str	r3, [sp, #20]
    6800:	2300      	movs	r3, #0
    6802:	9206      	str	r2, [sp, #24]
    6804:	930b      	str	r3, [sp, #44]	; 0x2c
    6806:	e6f2      	b.n	65ee <_dtoa_r+0x17e>
    6808:	f1c9 0300 	rsb	r3, r9, #0
    680c:	9306      	str	r3, [sp, #24]
    680e:	f04f 0900 	mov.w	r9, #0
    6812:	e6e4      	b.n	65de <_dtoa_r+0x16e>
    6814:	9b05      	ldr	r3, [sp, #20]
    6816:	930e      	str	r3, [sp, #56]	; 0x38
    6818:	9e09      	ldr	r6, [sp, #36]	; 0x24
    681a:	9b06      	ldr	r3, [sp, #24]
    681c:	930a      	str	r3, [sp, #40]	; 0x28
    681e:	990a      	ldr	r1, [sp, #40]	; 0x28
    6820:	460b      	mov	r3, r1
    6822:	b161      	cbz	r1, 683e <_dtoa_r+0x3ce>
    6824:	f1b9 0f00 	cmp.w	r9, #0
    6828:	dd09      	ble.n	683e <_dtoa_r+0x3ce>
    682a:	4549      	cmp	r1, r9
    682c:	9a06      	ldr	r2, [sp, #24]
    682e:	bfa8      	it	ge
    6830:	464b      	movge	r3, r9
    6832:	1ad2      	subs	r2, r2, r3
    6834:	9206      	str	r2, [sp, #24]
    6836:	1aca      	subs	r2, r1, r3
    6838:	920a      	str	r2, [sp, #40]	; 0x28
    683a:	ebc3 0909 	rsb	r9, r3, r9
    683e:	9b05      	ldr	r3, [sp, #20]
    6840:	2b00      	cmp	r3, #0
    6842:	f340 8280 	ble.w	6d46 <_dtoa_r+0x8d6>
    6846:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6848:	2a00      	cmp	r2, #0
    684a:	f000 819a 	beq.w	6b82 <_dtoa_r+0x712>
    684e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6850:	2a00      	cmp	r2, #0
    6852:	f000 8196 	beq.w	6b82 <_dtoa_r+0x712>
    6856:	4631      	mov	r1, r6
    6858:	4620      	mov	r0, r4
    685a:	f7ff fb61 	bl	5f20 <__pow5mult>
    685e:	9a07      	ldr	r2, [sp, #28]
    6860:	4601      	mov	r1, r0
    6862:	4606      	mov	r6, r0
    6864:	4620      	mov	r0, r4
    6866:	f7ff fac3 	bl	5df0 <__multiply>
    686a:	9907      	ldr	r1, [sp, #28]
    686c:	4605      	mov	r5, r0
    686e:	4620      	mov	r0, r4
    6870:	f7ff fa1c 	bl	5cac <_Bfree>
    6874:	9b05      	ldr	r3, [sp, #20]
    6876:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6878:	1a9b      	subs	r3, r3, r2
    687a:	9305      	str	r3, [sp, #20]
    687c:	f040 8180 	bne.w	6b80 <_dtoa_r+0x710>
    6880:	2101      	movs	r1, #1
    6882:	4620      	mov	r0, r4
    6884:	f7ff faaa 	bl	5ddc <__i2b>
    6888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    688a:	9005      	str	r0, [sp, #20]
    688c:	2b00      	cmp	r3, #0
    688e:	f000 81ac 	beq.w	6bea <_dtoa_r+0x77a>
    6892:	4601      	mov	r1, r0
    6894:	461a      	mov	r2, r3
    6896:	4620      	mov	r0, r4
    6898:	f7ff fb42 	bl	5f20 <__pow5mult>
    689c:	9b01      	ldr	r3, [sp, #4]
    689e:	9005      	str	r0, [sp, #20]
    68a0:	2b01      	cmp	r3, #1
    68a2:	f340 8280 	ble.w	6da6 <_dtoa_r+0x936>
    68a6:	2300      	movs	r3, #0
    68a8:	9307      	str	r3, [sp, #28]
    68aa:	9a05      	ldr	r2, [sp, #20]
    68ac:	6913      	ldr	r3, [r2, #16]
    68ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    68b2:	6918      	ldr	r0, [r3, #16]
    68b4:	f7ff fa44 	bl	5d40 <__hi0bits>
    68b8:	f1c0 0020 	rsb	r0, r0, #32
    68bc:	4448      	add	r0, r9
    68be:	f010 001f 	ands.w	r0, r0, #31
    68c2:	f000 8190 	beq.w	6be6 <_dtoa_r+0x776>
    68c6:	f1c0 0320 	rsb	r3, r0, #32
    68ca:	2b04      	cmp	r3, #4
    68cc:	f340 83f8 	ble.w	70c0 <_dtoa_r+0xc50>
    68d0:	f1c0 001c 	rsb	r0, r0, #28
    68d4:	9b06      	ldr	r3, [sp, #24]
    68d6:	4403      	add	r3, r0
    68d8:	9306      	str	r3, [sp, #24]
    68da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    68dc:	4403      	add	r3, r0
    68de:	930a      	str	r3, [sp, #40]	; 0x28
    68e0:	4481      	add	r9, r0
    68e2:	9b06      	ldr	r3, [sp, #24]
    68e4:	2b00      	cmp	r3, #0
    68e6:	dd05      	ble.n	68f4 <_dtoa_r+0x484>
    68e8:	4629      	mov	r1, r5
    68ea:	461a      	mov	r2, r3
    68ec:	4620      	mov	r0, r4
    68ee:	f7ff fb67 	bl	5fc0 <__lshift>
    68f2:	4605      	mov	r5, r0
    68f4:	f1b9 0f00 	cmp.w	r9, #0
    68f8:	dd05      	ble.n	6906 <_dtoa_r+0x496>
    68fa:	464a      	mov	r2, r9
    68fc:	9905      	ldr	r1, [sp, #20]
    68fe:	4620      	mov	r0, r4
    6900:	f7ff fb5e 	bl	5fc0 <__lshift>
    6904:	9005      	str	r0, [sp, #20]
    6906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6908:	2b00      	cmp	r3, #0
    690a:	f040 8201 	bne.w	6d10 <_dtoa_r+0x8a0>
    690e:	2f00      	cmp	r7, #0
    6910:	f340 8220 	ble.w	6d54 <_dtoa_r+0x8e4>
    6914:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6916:	2b00      	cmp	r3, #0
    6918:	f040 817b 	bne.w	6c12 <_dtoa_r+0x7a2>
    691c:	f8dd b020 	ldr.w	fp, [sp, #32]
    6920:	f8dd a014 	ldr.w	sl, [sp, #20]
    6924:	46d8      	mov	r8, fp
    6926:	e002      	b.n	692e <_dtoa_r+0x4be>
    6928:	f7ff f9ca 	bl	5cc0 <__multadd>
    692c:	4605      	mov	r5, r0
    692e:	4651      	mov	r1, sl
    6930:	4628      	mov	r0, r5
    6932:	f7ff fd07 	bl	6344 <quorem>
    6936:	f100 0930 	add.w	r9, r0, #48	; 0x30
    693a:	f808 9b01 	strb.w	r9, [r8], #1
    693e:	ebcb 0308 	rsb	r3, fp, r8
    6942:	42bb      	cmp	r3, r7
    6944:	f04f 020a 	mov.w	r2, #10
    6948:	f04f 0300 	mov.w	r3, #0
    694c:	4629      	mov	r1, r5
    694e:	4620      	mov	r0, r4
    6950:	dbea      	blt.n	6928 <_dtoa_r+0x4b8>
    6952:	9b08      	ldr	r3, [sp, #32]
    6954:	2f01      	cmp	r7, #1
    6956:	bfac      	ite	ge
    6958:	19db      	addge	r3, r3, r7
    695a:	3301      	addlt	r3, #1
    695c:	469b      	mov	fp, r3
    695e:	f04f 0a00 	mov.w	sl, #0
    6962:	4629      	mov	r1, r5
    6964:	2201      	movs	r2, #1
    6966:	4620      	mov	r0, r4
    6968:	f7ff fb2a 	bl	5fc0 <__lshift>
    696c:	9905      	ldr	r1, [sp, #20]
    696e:	9007      	str	r0, [sp, #28]
    6970:	f7ff fb7e 	bl	6070 <__mcmp>
    6974:	2800      	cmp	r0, #0
    6976:	f340 828c 	ble.w	6e92 <_dtoa_r+0xa22>
    697a:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    697e:	9908      	ldr	r1, [sp, #32]
    6980:	f10b 33ff 	add.w	r3, fp, #4294967295
    6984:	e004      	b.n	6990 <_dtoa_r+0x520>
    6986:	428b      	cmp	r3, r1
    6988:	f000 8203 	beq.w	6d92 <_dtoa_r+0x922>
    698c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    6990:	2a39      	cmp	r2, #57	; 0x39
    6992:	f103 0b01 	add.w	fp, r3, #1
    6996:	d0f6      	beq.n	6986 <_dtoa_r+0x516>
    6998:	3201      	adds	r2, #1
    699a:	701a      	strb	r2, [r3, #0]
    699c:	9905      	ldr	r1, [sp, #20]
    699e:	4620      	mov	r0, r4
    69a0:	f7ff f984 	bl	5cac <_Bfree>
    69a4:	2e00      	cmp	r6, #0
    69a6:	f43f aec9 	beq.w	673c <_dtoa_r+0x2cc>
    69aa:	f1ba 0f00 	cmp.w	sl, #0
    69ae:	d005      	beq.n	69bc <_dtoa_r+0x54c>
    69b0:	45b2      	cmp	sl, r6
    69b2:	d003      	beq.n	69bc <_dtoa_r+0x54c>
    69b4:	4651      	mov	r1, sl
    69b6:	4620      	mov	r0, r4
    69b8:	f7ff f978 	bl	5cac <_Bfree>
    69bc:	4631      	mov	r1, r6
    69be:	4620      	mov	r0, r4
    69c0:	f7ff f974 	bl	5cac <_Bfree>
    69c4:	e6ba      	b.n	673c <_dtoa_r+0x2cc>
    69c6:	f1c3 0320 	rsb	r3, r3, #32
    69ca:	fa0a f303 	lsl.w	r3, sl, r3
    69ce:	ee07 3a90 	vmov	s15, r3
    69d2:	e5c1      	b.n	6558 <_dtoa_r+0xe8>
    69d4:	2300      	movs	r3, #0
    69d6:	930c      	str	r3, [sp, #48]	; 0x30
    69d8:	e5fa      	b.n	65d0 <_dtoa_r+0x160>
    69da:	2300      	movs	r3, #0
    69dc:	9309      	str	r3, [sp, #36]	; 0x24
    69de:	9b02      	ldr	r3, [sp, #8]
    69e0:	4443      	add	r3, r8
    69e2:	1c5f      	adds	r7, r3, #1
    69e4:	2f00      	cmp	r7, #0
    69e6:	930d      	str	r3, [sp, #52]	; 0x34
    69e8:	f340 822d 	ble.w	6e46 <_dtoa_r+0x9d6>
    69ec:	463e      	mov	r6, r7
    69ee:	463d      	mov	r5, r7
    69f0:	2100      	movs	r1, #0
    69f2:	2e17      	cmp	r6, #23
    69f4:	6461      	str	r1, [r4, #68]	; 0x44
    69f6:	d90a      	bls.n	6a0e <_dtoa_r+0x59e>
    69f8:	2201      	movs	r2, #1
    69fa:	2304      	movs	r3, #4
    69fc:	005b      	lsls	r3, r3, #1
    69fe:	f103 0014 	add.w	r0, r3, #20
    6a02:	42b0      	cmp	r0, r6
    6a04:	4611      	mov	r1, r2
    6a06:	f102 0201 	add.w	r2, r2, #1
    6a0a:	d9f7      	bls.n	69fc <_dtoa_r+0x58c>
    6a0c:	6461      	str	r1, [r4, #68]	; 0x44
    6a0e:	4620      	mov	r0, r4
    6a10:	f7ff f926 	bl	5c60 <_Balloc>
    6a14:	2d0e      	cmp	r5, #14
    6a16:	9008      	str	r0, [sp, #32]
    6a18:	6420      	str	r0, [r4, #64]	; 0x40
    6a1a:	f63f ae26 	bhi.w	666a <_dtoa_r+0x1fa>
    6a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6a20:	2b00      	cmp	r3, #0
    6a22:	f43f ae22 	beq.w	666a <_dtoa_r+0x1fa>
    6a26:	9902      	ldr	r1, [sp, #8]
    6a28:	2900      	cmp	r1, #0
    6a2a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
    6a2e:	f340 8241 	ble.w	6eb4 <_dtoa_r+0xa44>
    6a32:	4bc6      	ldr	r3, [pc, #792]	; (6d4c <_dtoa_r+0x8dc>)
    6a34:	f001 020f 	and.w	r2, r1, #15
    6a38:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    6a3c:	110b      	asrs	r3, r1, #4
    6a3e:	06de      	lsls	r6, r3, #27
    6a40:	ed92 6b00 	vldr	d6, [r2]
    6a44:	f140 81fb 	bpl.w	6e3e <_dtoa_r+0x9ce>
    6a48:	4ac1      	ldr	r2, [pc, #772]	; (6d50 <_dtoa_r+0x8e0>)
    6a4a:	ed92 7b08 	vldr	d7, [r2, #32]
    6a4e:	ec4b ab14 	vmov	d4, sl, fp
    6a52:	f003 030f 	and.w	r3, r3, #15
    6a56:	2103      	movs	r1, #3
    6a58:	ee84 5b07 	vdiv.f64	d5, d4, d7
    6a5c:	b15b      	cbz	r3, 6a76 <_dtoa_r+0x606>
    6a5e:	4abc      	ldr	r2, [pc, #752]	; (6d50 <_dtoa_r+0x8e0>)
    6a60:	07dd      	lsls	r5, r3, #31
    6a62:	d504      	bpl.n	6a6e <_dtoa_r+0x5fe>
    6a64:	ed92 7b00 	vldr	d7, [r2]
    6a68:	3101      	adds	r1, #1
    6a6a:	ee26 6b07 	vmul.f64	d6, d6, d7
    6a6e:	105b      	asrs	r3, r3, #1
    6a70:	f102 0208 	add.w	r2, r2, #8
    6a74:	d1f4      	bne.n	6a60 <_dtoa_r+0x5f0>
    6a76:	ee85 4b06 	vdiv.f64	d4, d5, d6
    6a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a7c:	b13b      	cbz	r3, 6a8e <_dtoa_r+0x61e>
    6a7e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    6a82:	eeb4 4bc7 	vcmpe.f64	d4, d7
    6a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6a8a:	f100 82b7 	bmi.w	6ffc <_dtoa_r+0xb8c>
    6a8e:	ee07 1a90 	vmov	s15, r1
    6a92:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    6a96:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    6a9a:	eea6 7b04 	vfma.f64	d7, d6, d4
    6a9e:	ec53 2b17 	vmov	r2, r3, d7
    6aa2:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    6aa6:	2f00      	cmp	r7, #0
    6aa8:	f000 81a6 	beq.w	6df8 <_dtoa_r+0x988>
    6aac:	9e02      	ldr	r6, [sp, #8]
    6aae:	4639      	mov	r1, r7
    6ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ab2:	2800      	cmp	r0, #0
    6ab4:	f000 824d 	beq.w	6f52 <_dtoa_r+0xae2>
    6ab8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    6abc:	48a3      	ldr	r0, [pc, #652]	; (6d4c <_dtoa_r+0x8dc>)
    6abe:	9d08      	ldr	r5, [sp, #32]
    6ac0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    6ac4:	ed10 6b02 	vldr	d6, [r0, #-8]
    6ac8:	eebd 7bc4 	vcvt.s32.f64	s14, d4
    6acc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    6ad0:	ee17 0a10 	vmov	r0, s14
    6ad4:	ec43 2b16 	vmov	d6, r2, r3
    6ad8:	3030      	adds	r0, #48	; 0x30
    6ada:	b2c0      	uxtb	r0, r0
    6adc:	ee35 5b46 	vsub.f64	d5, d5, d6
    6ae0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    6ae4:	ee34 7b47 	vsub.f64	d7, d4, d7
    6ae8:	eeb4 5bc7 	vcmpe.f64	d5, d7
    6aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6af0:	7028      	strb	r0, [r5, #0]
    6af2:	f105 0b01 	add.w	fp, r5, #1
    6af6:	dc32      	bgt.n	6b5e <_dtoa_r+0x6ee>
    6af8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    6afc:	ee33 6b47 	vsub.f64	d6, d3, d7
    6b00:	eeb4 5bc6 	vcmpe.f64	d5, d6
    6b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b08:	f300 82ae 	bgt.w	7068 <_dtoa_r+0xbf8>
    6b0c:	2901      	cmp	r1, #1
    6b0e:	f340 81cd 	ble.w	6eac <_dtoa_r+0xa3c>
    6b12:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    6b16:	9b08      	ldr	r3, [sp, #32]
    6b18:	4419      	add	r1, r3
    6b1a:	e00a      	b.n	6b32 <_dtoa_r+0x6c2>
    6b1c:	ee33 6b47 	vsub.f64	d6, d3, d7
    6b20:	eeb4 6bc5 	vcmpe.f64	d6, d5
    6b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b28:	f100 829e 	bmi.w	7068 <_dtoa_r+0xbf8>
    6b2c:	458b      	cmp	fp, r1
    6b2e:	f000 81bd 	beq.w	6eac <_dtoa_r+0xa3c>
    6b32:	ee27 7b04 	vmul.f64	d7, d7, d4
    6b36:	ee25 5b04 	vmul.f64	d5, d5, d4
    6b3a:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    6b3e:	ee16 3a10 	vmov	r3, s12
    6b42:	f103 0030 	add.w	r0, r3, #48	; 0x30
    6b46:	b2c0      	uxtb	r0, r0
    6b48:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    6b4c:	ee37 7b46 	vsub.f64	d7, d7, d6
    6b50:	eeb4 7bc5 	vcmpe.f64	d7, d5
    6b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b58:	f80b 0b01 	strb.w	r0, [fp], #1
    6b5c:	d5de      	bpl.n	6b1c <_dtoa_r+0x6ac>
    6b5e:	9602      	str	r6, [sp, #8]
    6b60:	e5ec      	b.n	673c <_dtoa_r+0x2cc>
    6b62:	2300      	movs	r3, #0
    6b64:	9309      	str	r3, [sp, #36]	; 0x24
    6b66:	f1b8 0f00 	cmp.w	r8, #0
    6b6a:	f340 8170 	ble.w	6e4e <_dtoa_r+0x9de>
    6b6e:	4646      	mov	r6, r8
    6b70:	4645      	mov	r5, r8
    6b72:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    6b76:	4647      	mov	r7, r8
    6b78:	e73a      	b.n	69f0 <_dtoa_r+0x580>
    6b7a:	2301      	movs	r3, #1
    6b7c:	9309      	str	r3, [sp, #36]	; 0x24
    6b7e:	e7f2      	b.n	6b66 <_dtoa_r+0x6f6>
    6b80:	9507      	str	r5, [sp, #28]
    6b82:	9a05      	ldr	r2, [sp, #20]
    6b84:	9907      	ldr	r1, [sp, #28]
    6b86:	4620      	mov	r0, r4
    6b88:	f7ff f9ca 	bl	5f20 <__pow5mult>
    6b8c:	4605      	mov	r5, r0
    6b8e:	e677      	b.n	6880 <_dtoa_r+0x410>
    6b90:	2f00      	cmp	r7, #0
    6b92:	f73f ad79 	bgt.w	6688 <_dtoa_r+0x218>
    6b96:	f040 8142 	bne.w	6e1e <_dtoa_r+0x9ae>
    6b9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    6b9e:	ee24 4b07 	vmul.f64	d4, d4, d7
    6ba2:	ec4b ab17 	vmov	d7, sl, fp
    6ba6:	eeb4 4bc7 	vcmpe.f64	d4, d7
    6baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6bae:	463e      	mov	r6, r7
    6bb0:	9705      	str	r7, [sp, #20]
    6bb2:	f2c0 80e5 	blt.w	6d80 <_dtoa_r+0x910>
    6bb6:	ea6f 0308 	mvn.w	r3, r8
    6bba:	f8dd b020 	ldr.w	fp, [sp, #32]
    6bbe:	9302      	str	r3, [sp, #8]
    6bc0:	9905      	ldr	r1, [sp, #20]
    6bc2:	4620      	mov	r0, r4
    6bc4:	f7ff f872 	bl	5cac <_Bfree>
    6bc8:	2e00      	cmp	r6, #0
    6bca:	f43f adb7 	beq.w	673c <_dtoa_r+0x2cc>
    6bce:	e6f5      	b.n	69bc <_dtoa_r+0x54c>
    6bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6bd2:	2a00      	cmp	r2, #0
    6bd4:	f000 8202 	beq.w	6fdc <_dtoa_r+0xb6c>
    6bd8:	9a05      	ldr	r2, [sp, #20]
    6bda:	920e      	str	r2, [sp, #56]	; 0x38
    6bdc:	9a06      	ldr	r2, [sp, #24]
    6bde:	920a      	str	r2, [sp, #40]	; 0x28
    6be0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    6be4:	e5d3      	b.n	678e <_dtoa_r+0x31e>
    6be6:	201c      	movs	r0, #28
    6be8:	e674      	b.n	68d4 <_dtoa_r+0x464>
    6bea:	9b01      	ldr	r3, [sp, #4]
    6bec:	2b01      	cmp	r3, #1
    6bee:	f340 8240 	ble.w	7072 <_dtoa_r+0xc02>
    6bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6bf4:	9307      	str	r3, [sp, #28]
    6bf6:	2001      	movs	r0, #1
    6bf8:	e660      	b.n	68bc <_dtoa_r+0x44c>
    6bfa:	4631      	mov	r1, r6
    6bfc:	2300      	movs	r3, #0
    6bfe:	220a      	movs	r2, #10
    6c00:	4620      	mov	r0, r4
    6c02:	f7ff f85d 	bl	5cc0 <__multadd>
    6c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6c08:	2b00      	cmp	r3, #0
    6c0a:	4606      	mov	r6, r0
    6c0c:	f340 824d 	ble.w	70aa <_dtoa_r+0xc3a>
    6c10:	461f      	mov	r7, r3
    6c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6c14:	2b00      	cmp	r3, #0
    6c16:	dd05      	ble.n	6c24 <_dtoa_r+0x7b4>
    6c18:	4631      	mov	r1, r6
    6c1a:	461a      	mov	r2, r3
    6c1c:	4620      	mov	r0, r4
    6c1e:	f7ff f9cf 	bl	5fc0 <__lshift>
    6c22:	4606      	mov	r6, r0
    6c24:	9b07      	ldr	r3, [sp, #28]
    6c26:	2b00      	cmp	r3, #0
    6c28:	f040 816e 	bne.w	6f08 <_dtoa_r+0xa98>
    6c2c:	46b0      	mov	r8, r6
    6c2e:	9b08      	ldr	r3, [sp, #32]
    6c30:	3f01      	subs	r7, #1
    6c32:	19da      	adds	r2, r3, r7
    6c34:	9209      	str	r2, [sp, #36]	; 0x24
    6c36:	f00a 0201 	and.w	r2, sl, #1
    6c3a:	920a      	str	r2, [sp, #40]	; 0x28
    6c3c:	461f      	mov	r7, r3
    6c3e:	f8dd b014 	ldr.w	fp, [sp, #20]
    6c42:	4628      	mov	r0, r5
    6c44:	4659      	mov	r1, fp
    6c46:	f7ff fb7d 	bl	6344 <quorem>
    6c4a:	4631      	mov	r1, r6
    6c4c:	4682      	mov	sl, r0
    6c4e:	4628      	mov	r0, r5
    6c50:	f7ff fa0e 	bl	6070 <__mcmp>
    6c54:	4642      	mov	r2, r8
    6c56:	4659      	mov	r1, fp
    6c58:	4681      	mov	r9, r0
    6c5a:	4620      	mov	r0, r4
    6c5c:	f7ff fa2a 	bl	60b4 <__mdiff>
    6c60:	68c3      	ldr	r3, [r0, #12]
    6c62:	4683      	mov	fp, r0
    6c64:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d149      	bne.n	6d00 <_dtoa_r+0x890>
    6c6c:	4601      	mov	r1, r0
    6c6e:	4628      	mov	r0, r5
    6c70:	9207      	str	r2, [sp, #28]
    6c72:	f7ff f9fd 	bl	6070 <__mcmp>
    6c76:	4659      	mov	r1, fp
    6c78:	9006      	str	r0, [sp, #24]
    6c7a:	4620      	mov	r0, r4
    6c7c:	f7ff f816 	bl	5cac <_Bfree>
    6c80:	9b06      	ldr	r3, [sp, #24]
    6c82:	9a07      	ldr	r2, [sp, #28]
    6c84:	b92b      	cbnz	r3, 6c92 <_dtoa_r+0x822>
    6c86:	9901      	ldr	r1, [sp, #4]
    6c88:	b919      	cbnz	r1, 6c92 <_dtoa_r+0x822>
    6c8a:	990a      	ldr	r1, [sp, #40]	; 0x28
    6c8c:	2900      	cmp	r1, #0
    6c8e:	f000 81f5 	beq.w	707c <_dtoa_r+0xc0c>
    6c92:	f1b9 0f00 	cmp.w	r9, #0
    6c96:	f2c0 80df 	blt.w	6e58 <_dtoa_r+0x9e8>
    6c9a:	d105      	bne.n	6ca8 <_dtoa_r+0x838>
    6c9c:	9901      	ldr	r1, [sp, #4]
    6c9e:	b919      	cbnz	r1, 6ca8 <_dtoa_r+0x838>
    6ca0:	990a      	ldr	r1, [sp, #40]	; 0x28
    6ca2:	2900      	cmp	r1, #0
    6ca4:	f000 80d8 	beq.w	6e58 <_dtoa_r+0x9e8>
    6ca8:	2b00      	cmp	r3, #0
    6caa:	f300 8141 	bgt.w	6f30 <_dtoa_r+0xac0>
    6cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6cb0:	703a      	strb	r2, [r7, #0]
    6cb2:	f107 0901 	add.w	r9, r7, #1
    6cb6:	429f      	cmp	r7, r3
    6cb8:	46cb      	mov	fp, r9
    6cba:	f000 8146 	beq.w	6f4a <_dtoa_r+0xada>
    6cbe:	4629      	mov	r1, r5
    6cc0:	2300      	movs	r3, #0
    6cc2:	220a      	movs	r2, #10
    6cc4:	4620      	mov	r0, r4
    6cc6:	f7fe fffb 	bl	5cc0 <__multadd>
    6cca:	4546      	cmp	r6, r8
    6ccc:	4605      	mov	r5, r0
    6cce:	4631      	mov	r1, r6
    6cd0:	f04f 0300 	mov.w	r3, #0
    6cd4:	f04f 020a 	mov.w	r2, #10
    6cd8:	4620      	mov	r0, r4
    6cda:	d00b      	beq.n	6cf4 <_dtoa_r+0x884>
    6cdc:	f7fe fff0 	bl	5cc0 <__multadd>
    6ce0:	4641      	mov	r1, r8
    6ce2:	4606      	mov	r6, r0
    6ce4:	2300      	movs	r3, #0
    6ce6:	220a      	movs	r2, #10
    6ce8:	4620      	mov	r0, r4
    6cea:	f7fe ffe9 	bl	5cc0 <__multadd>
    6cee:	464f      	mov	r7, r9
    6cf0:	4680      	mov	r8, r0
    6cf2:	e7a4      	b.n	6c3e <_dtoa_r+0x7ce>
    6cf4:	f7fe ffe4 	bl	5cc0 <__multadd>
    6cf8:	464f      	mov	r7, r9
    6cfa:	4606      	mov	r6, r0
    6cfc:	4680      	mov	r8, r0
    6cfe:	e79e      	b.n	6c3e <_dtoa_r+0x7ce>
    6d00:	4601      	mov	r1, r0
    6d02:	4620      	mov	r0, r4
    6d04:	9206      	str	r2, [sp, #24]
    6d06:	f7fe ffd1 	bl	5cac <_Bfree>
    6d0a:	2301      	movs	r3, #1
    6d0c:	9a06      	ldr	r2, [sp, #24]
    6d0e:	e7c0      	b.n	6c92 <_dtoa_r+0x822>
    6d10:	9905      	ldr	r1, [sp, #20]
    6d12:	4628      	mov	r0, r5
    6d14:	f7ff f9ac 	bl	6070 <__mcmp>
    6d18:	2800      	cmp	r0, #0
    6d1a:	f6bf adf8 	bge.w	690e <_dtoa_r+0x49e>
    6d1e:	4629      	mov	r1, r5
    6d20:	9d02      	ldr	r5, [sp, #8]
    6d22:	2300      	movs	r3, #0
    6d24:	3d01      	subs	r5, #1
    6d26:	220a      	movs	r2, #10
    6d28:	4620      	mov	r0, r4
    6d2a:	9502      	str	r5, [sp, #8]
    6d2c:	f7fe ffc8 	bl	5cc0 <__multadd>
    6d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6d32:	4605      	mov	r5, r0
    6d34:	2b00      	cmp	r3, #0
    6d36:	f47f af60 	bne.w	6bfa <_dtoa_r+0x78a>
    6d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	f340 81ad 	ble.w	709c <_dtoa_r+0xc2c>
    6d42:	461f      	mov	r7, r3
    6d44:	e5ea      	b.n	691c <_dtoa_r+0x4ac>
    6d46:	9d07      	ldr	r5, [sp, #28]
    6d48:	e59a      	b.n	6880 <_dtoa_r+0x410>
    6d4a:	bf00      	nop
    6d4c:	20004678 	.word	0x20004678
    6d50:	20004740 	.word	0x20004740
    6d54:	9b01      	ldr	r3, [sp, #4]
    6d56:	2b02      	cmp	r3, #2
    6d58:	f77f addc 	ble.w	6914 <_dtoa_r+0x4a4>
    6d5c:	2f00      	cmp	r7, #0
    6d5e:	f040 8169 	bne.w	7034 <_dtoa_r+0xbc4>
    6d62:	463b      	mov	r3, r7
    6d64:	9905      	ldr	r1, [sp, #20]
    6d66:	2205      	movs	r2, #5
    6d68:	4620      	mov	r0, r4
    6d6a:	f7fe ffa9 	bl	5cc0 <__multadd>
    6d6e:	4601      	mov	r1, r0
    6d70:	9005      	str	r0, [sp, #20]
    6d72:	4628      	mov	r0, r5
    6d74:	f7ff f97c 	bl	6070 <__mcmp>
    6d78:	2800      	cmp	r0, #0
    6d7a:	9507      	str	r5, [sp, #28]
    6d7c:	f77f af1b 	ble.w	6bb6 <_dtoa_r+0x746>
    6d80:	9a02      	ldr	r2, [sp, #8]
    6d82:	9908      	ldr	r1, [sp, #32]
    6d84:	2331      	movs	r3, #49	; 0x31
    6d86:	3201      	adds	r2, #1
    6d88:	9202      	str	r2, [sp, #8]
    6d8a:	700b      	strb	r3, [r1, #0]
    6d8c:	f101 0b01 	add.w	fp, r1, #1
    6d90:	e716      	b.n	6bc0 <_dtoa_r+0x750>
    6d92:	9a02      	ldr	r2, [sp, #8]
    6d94:	3201      	adds	r2, #1
    6d96:	9202      	str	r2, [sp, #8]
    6d98:	9a08      	ldr	r2, [sp, #32]
    6d9a:	2331      	movs	r3, #49	; 0x31
    6d9c:	7013      	strb	r3, [r2, #0]
    6d9e:	e5fd      	b.n	699c <_dtoa_r+0x52c>
    6da0:	2301      	movs	r3, #1
    6da2:	9309      	str	r3, [sp, #36]	; 0x24
    6da4:	e61b      	b.n	69de <_dtoa_r+0x56e>
    6da6:	f1ba 0f00 	cmp.w	sl, #0
    6daa:	f47f ad7c 	bne.w	68a6 <_dtoa_r+0x436>
    6dae:	f3cb 0313 	ubfx	r3, fp, #0, #20
    6db2:	2b00      	cmp	r3, #0
    6db4:	f040 811b 	bne.w	6fee <_dtoa_r+0xb7e>
    6db8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    6dbc:	0d1b      	lsrs	r3, r3, #20
    6dbe:	051b      	lsls	r3, r3, #20
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	f000 8154 	beq.w	706e <_dtoa_r+0xbfe>
    6dc6:	9b06      	ldr	r3, [sp, #24]
    6dc8:	3301      	adds	r3, #1
    6dca:	9306      	str	r3, [sp, #24]
    6dcc:	2301      	movs	r3, #1
    6dce:	f109 0901 	add.w	r9, r9, #1
    6dd2:	9307      	str	r3, [sp, #28]
    6dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6dd6:	2001      	movs	r0, #1
    6dd8:	2b00      	cmp	r3, #0
    6dda:	f43f ad6f 	beq.w	68bc <_dtoa_r+0x44c>
    6dde:	e564      	b.n	68aa <_dtoa_r+0x43a>
    6de0:	ee07 1a90 	vmov	s15, r1
    6de4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    6de8:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    6dec:	eea4 7b06 	vfma.f64	d7, d4, d6
    6df0:	ec53 2b17 	vmov	r2, r3, d7
    6df4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    6df8:	ec43 2b16 	vmov	d6, r2, r3
    6dfc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    6e00:	ee34 7b47 	vsub.f64	d7, d4, d7
    6e04:	eeb4 7bc6 	vcmpe.f64	d7, d6
    6e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e0c:	f300 80dd 	bgt.w	6fca <_dtoa_r+0xb5a>
    6e10:	eeb1 6b46 	vneg.f64	d6, d6
    6e14:	eeb4 7bc6 	vcmpe.f64	d7, d6
    6e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e1c:	d546      	bpl.n	6eac <_dtoa_r+0xa3c>
    6e1e:	2300      	movs	r3, #0
    6e20:	9305      	str	r3, [sp, #20]
    6e22:	461e      	mov	r6, r3
    6e24:	e6c7      	b.n	6bb6 <_dtoa_r+0x746>
    6e26:	9808      	ldr	r0, [sp, #32]
    6e28:	f7ff bb59 	b.w	64de <_dtoa_r+0x6e>
    6e2c:	9b05      	ldr	r3, [sp, #20]
    6e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6e30:	9205      	str	r2, [sp, #20]
    6e32:	1ad3      	subs	r3, r2, r3
    6e34:	4419      	add	r1, r3
    6e36:	2300      	movs	r3, #0
    6e38:	910b      	str	r1, [sp, #44]	; 0x2c
    6e3a:	930e      	str	r3, [sp, #56]	; 0x38
    6e3c:	e4a1      	b.n	6782 <_dtoa_r+0x312>
    6e3e:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
    6e42:	2102      	movs	r1, #2
    6e44:	e60a      	b.n	6a5c <_dtoa_r+0x5ec>
    6e46:	463d      	mov	r5, r7
    6e48:	2100      	movs	r1, #0
    6e4a:	6461      	str	r1, [r4, #68]	; 0x44
    6e4c:	e5df      	b.n	6a0e <_dtoa_r+0x59e>
    6e4e:	2501      	movs	r5, #1
    6e50:	950d      	str	r5, [sp, #52]	; 0x34
    6e52:	462f      	mov	r7, r5
    6e54:	46a8      	mov	r8, r5
    6e56:	e7f7      	b.n	6e48 <_dtoa_r+0x9d8>
    6e58:	2b00      	cmp	r3, #0
    6e5a:	4691      	mov	r9, r2
    6e5c:	dd11      	ble.n	6e82 <_dtoa_r+0xa12>
    6e5e:	4629      	mov	r1, r5
    6e60:	2201      	movs	r2, #1
    6e62:	4620      	mov	r0, r4
    6e64:	f7ff f8ac 	bl	5fc0 <__lshift>
    6e68:	9905      	ldr	r1, [sp, #20]
    6e6a:	4605      	mov	r5, r0
    6e6c:	f7ff f900 	bl	6070 <__mcmp>
    6e70:	2800      	cmp	r0, #0
    6e72:	f340 810c 	ble.w	708e <_dtoa_r+0xc1e>
    6e76:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    6e7a:	f000 80dd 	beq.w	7038 <_dtoa_r+0xbc8>
    6e7e:	f10a 0931 	add.w	r9, sl, #49	; 0x31
    6e82:	46b2      	mov	sl, r6
    6e84:	f887 9000 	strb.w	r9, [r7]
    6e88:	f107 0b01 	add.w	fp, r7, #1
    6e8c:	4646      	mov	r6, r8
    6e8e:	9507      	str	r5, [sp, #28]
    6e90:	e584      	b.n	699c <_dtoa_r+0x52c>
    6e92:	d104      	bne.n	6e9e <_dtoa_r+0xa2e>
    6e94:	f019 0f01 	tst.w	r9, #1
    6e98:	d001      	beq.n	6e9e <_dtoa_r+0xa2e>
    6e9a:	e56e      	b.n	697a <_dtoa_r+0x50a>
    6e9c:	4693      	mov	fp, r2
    6e9e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    6ea2:	2b30      	cmp	r3, #48	; 0x30
    6ea4:	f10b 32ff 	add.w	r2, fp, #4294967295
    6ea8:	d0f8      	beq.n	6e9c <_dtoa_r+0xa2c>
    6eaa:	e577      	b.n	699c <_dtoa_r+0x52c>
    6eac:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    6eb0:	f7ff bbdb 	b.w	666a <_dtoa_r+0x1fa>
    6eb4:	9b02      	ldr	r3, [sp, #8]
    6eb6:	425b      	negs	r3, r3
    6eb8:	2b00      	cmp	r3, #0
    6eba:	f000 809b 	beq.w	6ff4 <_dtoa_r+0xb84>
    6ebe:	4a8b      	ldr	r2, [pc, #556]	; (70ec <_dtoa_r+0xc7c>)
    6ec0:	f003 010f 	and.w	r1, r3, #15
    6ec4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    6ec8:	ed92 7b00 	vldr	d7, [r2]
    6ecc:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    6ed0:	111b      	asrs	r3, r3, #4
    6ed2:	ee26 4b07 	vmul.f64	d4, d6, d7
    6ed6:	f000 80e6 	beq.w	70a6 <_dtoa_r+0xc36>
    6eda:	4a85      	ldr	r2, [pc, #532]	; (70f0 <_dtoa_r+0xc80>)
    6edc:	2102      	movs	r1, #2
    6ede:	07d8      	lsls	r0, r3, #31
    6ee0:	d504      	bpl.n	6eec <_dtoa_r+0xa7c>
    6ee2:	ed92 7b00 	vldr	d7, [r2]
    6ee6:	3101      	adds	r1, #1
    6ee8:	ee24 4b07 	vmul.f64	d4, d4, d7
    6eec:	105b      	asrs	r3, r3, #1
    6eee:	f102 0208 	add.w	r2, r2, #8
    6ef2:	d1f4      	bne.n	6ede <_dtoa_r+0xa6e>
    6ef4:	e5c1      	b.n	6a7a <_dtoa_r+0x60a>
    6ef6:	9908      	ldr	r1, [sp, #32]
    6ef8:	2230      	movs	r2, #48	; 0x30
    6efa:	700a      	strb	r2, [r1, #0]
    6efc:	9a02      	ldr	r2, [sp, #8]
    6efe:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    6f02:	3201      	adds	r2, #1
    6f04:	9202      	str	r2, [sp, #8]
    6f06:	e417      	b.n	6738 <_dtoa_r+0x2c8>
    6f08:	6871      	ldr	r1, [r6, #4]
    6f0a:	4620      	mov	r0, r4
    6f0c:	f7fe fea8 	bl	5c60 <_Balloc>
    6f10:	6933      	ldr	r3, [r6, #16]
    6f12:	1c9a      	adds	r2, r3, #2
    6f14:	4680      	mov	r8, r0
    6f16:	0092      	lsls	r2, r2, #2
    6f18:	f106 010c 	add.w	r1, r6, #12
    6f1c:	300c      	adds	r0, #12
    6f1e:	f7fa fed5 	bl	1ccc <memcpy>
    6f22:	4641      	mov	r1, r8
    6f24:	2201      	movs	r2, #1
    6f26:	4620      	mov	r0, r4
    6f28:	f7ff f84a 	bl	5fc0 <__lshift>
    6f2c:	4680      	mov	r8, r0
    6f2e:	e67e      	b.n	6c2e <_dtoa_r+0x7be>
    6f30:	2a39      	cmp	r2, #57	; 0x39
    6f32:	f000 8081 	beq.w	7038 <_dtoa_r+0xbc8>
    6f36:	f102 0901 	add.w	r9, r2, #1
    6f3a:	46b2      	mov	sl, r6
    6f3c:	f887 9000 	strb.w	r9, [r7]
    6f40:	f107 0b01 	add.w	fp, r7, #1
    6f44:	4646      	mov	r6, r8
    6f46:	9507      	str	r5, [sp, #28]
    6f48:	e528      	b.n	699c <_dtoa_r+0x52c>
    6f4a:	46b2      	mov	sl, r6
    6f4c:	4691      	mov	r9, r2
    6f4e:	4646      	mov	r6, r8
    6f50:	e507      	b.n	6962 <_dtoa_r+0x4f2>
    6f52:	4866      	ldr	r0, [pc, #408]	; (70ec <_dtoa_r+0xc7c>)
    6f54:	eebd 6bc4 	vcvt.s32.f64	s12, d4
    6f58:	1e4d      	subs	r5, r1, #1
    6f5a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    6f5e:	ec43 2b17 	vmov	d7, r2, r3
    6f62:	ed90 3b00 	vldr	d3, [r0]
    6f66:	ee16 3a10 	vmov	r3, s12
    6f6a:	ee23 3b07 	vmul.f64	d3, d3, d7
    6f6e:	9808      	ldr	r0, [sp, #32]
    6f70:	3330      	adds	r3, #48	; 0x30
    6f72:	2901      	cmp	r1, #1
    6f74:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    6f78:	7003      	strb	r3, [r0, #0]
    6f7a:	f100 0b01 	add.w	fp, r0, #1
    6f7e:	ee34 7b46 	vsub.f64	d7, d4, d6
    6f82:	d014      	beq.n	6fae <_dtoa_r+0xb3e>
    6f84:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    6f88:	9b08      	ldr	r3, [sp, #32]
    6f8a:	4419      	add	r1, r3
    6f8c:	465b      	mov	r3, fp
    6f8e:	ee27 7b05 	vmul.f64	d7, d7, d5
    6f92:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    6f96:	ee16 2a10 	vmov	r2, s12
    6f9a:	3230      	adds	r2, #48	; 0x30
    6f9c:	f803 2b01 	strb.w	r2, [r3], #1
    6fa0:	4299      	cmp	r1, r3
    6fa2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    6fa6:	ee37 7b46 	vsub.f64	d7, d7, d6
    6faa:	d1f0      	bne.n	6f8e <_dtoa_r+0xb1e>
    6fac:	44ab      	add	fp, r5
    6fae:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    6fb2:	ee33 5b06 	vadd.f64	d5, d3, d6
    6fb6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    6fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6fbe:	d543      	bpl.n	7048 <_dtoa_r+0xbd8>
    6fc0:	9602      	str	r6, [sp, #8]
    6fc2:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    6fc6:	f7ff bbaa 	b.w	671e <_dtoa_r+0x2ae>
    6fca:	2300      	movs	r3, #0
    6fcc:	9305      	str	r3, [sp, #20]
    6fce:	461e      	mov	r6, r3
    6fd0:	e6d6      	b.n	6d80 <_dtoa_r+0x910>
    6fd2:	1bdb      	subs	r3, r3, r7
    6fd4:	930a      	str	r3, [sp, #40]	; 0x28
    6fd6:	2300      	movs	r3, #0
    6fd8:	f7ff bbd9 	b.w	678e <_dtoa_r+0x31e>
    6fdc:	9a05      	ldr	r2, [sp, #20]
    6fde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6fe0:	920e      	str	r2, [sp, #56]	; 0x38
    6fe2:	9a06      	ldr	r2, [sp, #24]
    6fe4:	920a      	str	r2, [sp, #40]	; 0x28
    6fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    6fea:	f7ff bbd0 	b.w	678e <_dtoa_r+0x31e>
    6fee:	2300      	movs	r3, #0
    6ff0:	9307      	str	r3, [sp, #28]
    6ff2:	e6ef      	b.n	6dd4 <_dtoa_r+0x964>
    6ff4:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
    6ff8:	2102      	movs	r1, #2
    6ffa:	e53e      	b.n	6a7a <_dtoa_r+0x60a>
    6ffc:	2f00      	cmp	r7, #0
    6ffe:	f43f aeef 	beq.w	6de0 <_dtoa_r+0x970>
    7002:	980d      	ldr	r0, [sp, #52]	; 0x34
    7004:	2800      	cmp	r0, #0
    7006:	f77f af51 	ble.w	6eac <_dtoa_r+0xa3c>
    700a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    700e:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    7012:	3101      	adds	r1, #1
    7014:	ee06 1a90 	vmov	s13, r1
    7018:	ee24 4b05 	vmul.f64	d4, d4, d5
    701c:	9b02      	ldr	r3, [sp, #8]
    701e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    7022:	1e5e      	subs	r6, r3, #1
    7024:	eea4 7b06 	vfma.f64	d7, d4, d6
    7028:	ec53 2b17 	vmov	r2, r3, d7
    702c:	4601      	mov	r1, r0
    702e:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    7032:	e53d      	b.n	6ab0 <_dtoa_r+0x640>
    7034:	9507      	str	r5, [sp, #28]
    7036:	e5be      	b.n	6bb6 <_dtoa_r+0x746>
    7038:	2239      	movs	r2, #57	; 0x39
    703a:	46b2      	mov	sl, r6
    703c:	9507      	str	r5, [sp, #28]
    703e:	4646      	mov	r6, r8
    7040:	703a      	strb	r2, [r7, #0]
    7042:	f107 0b01 	add.w	fp, r7, #1
    7046:	e49a      	b.n	697e <_dtoa_r+0x50e>
    7048:	ee36 6b43 	vsub.f64	d6, d6, d3
    704c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    7050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7054:	dc01      	bgt.n	705a <_dtoa_r+0xbea>
    7056:	e729      	b.n	6eac <_dtoa_r+0xa3c>
    7058:	4693      	mov	fp, r2
    705a:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    705e:	2b30      	cmp	r3, #48	; 0x30
    7060:	f10b 32ff 	add.w	r2, fp, #4294967295
    7064:	d0f8      	beq.n	7058 <_dtoa_r+0xbe8>
    7066:	e57a      	b.n	6b5e <_dtoa_r+0x6ee>
    7068:	9602      	str	r6, [sp, #8]
    706a:	f7ff bb58 	b.w	671e <_dtoa_r+0x2ae>
    706e:	9307      	str	r3, [sp, #28]
    7070:	e6b0      	b.n	6dd4 <_dtoa_r+0x964>
    7072:	f1ba 0f00 	cmp.w	sl, #0
    7076:	f47f adbc 	bne.w	6bf2 <_dtoa_r+0x782>
    707a:	e698      	b.n	6dae <_dtoa_r+0x93e>
    707c:	2a39      	cmp	r2, #57	; 0x39
    707e:	46cb      	mov	fp, r9
    7080:	4691      	mov	r9, r2
    7082:	d0d9      	beq.n	7038 <_dtoa_r+0xbc8>
    7084:	f1bb 0f00 	cmp.w	fp, #0
    7088:	f73f aef9 	bgt.w	6e7e <_dtoa_r+0xa0e>
    708c:	e6f9      	b.n	6e82 <_dtoa_r+0xa12>
    708e:	f47f aef8 	bne.w	6e82 <_dtoa_r+0xa12>
    7092:	f019 0f01 	tst.w	r9, #1
    7096:	f43f aef4 	beq.w	6e82 <_dtoa_r+0xa12>
    709a:	e6ec      	b.n	6e76 <_dtoa_r+0xa06>
    709c:	9b01      	ldr	r3, [sp, #4]
    709e:	2b02      	cmp	r3, #2
    70a0:	dc08      	bgt.n	70b4 <_dtoa_r+0xc44>
    70a2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    70a4:	e43a      	b.n	691c <_dtoa_r+0x4ac>
    70a6:	2102      	movs	r1, #2
    70a8:	e4e7      	b.n	6a7a <_dtoa_r+0x60a>
    70aa:	9b01      	ldr	r3, [sp, #4]
    70ac:	2b02      	cmp	r3, #2
    70ae:	dc01      	bgt.n	70b4 <_dtoa_r+0xc44>
    70b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    70b2:	e5ae      	b.n	6c12 <_dtoa_r+0x7a2>
    70b4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    70b6:	e651      	b.n	6d5c <_dtoa_r+0x8ec>
    70b8:	2301      	movs	r3, #1
    70ba:	930e      	str	r3, [sp, #56]	; 0x38
    70bc:	f7ff baa1 	b.w	6602 <_dtoa_r+0x192>
    70c0:	f43f ac0f 	beq.w	68e2 <_dtoa_r+0x472>
    70c4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    70c8:	e404      	b.n	68d4 <_dtoa_r+0x464>
    70ca:	2500      	movs	r5, #0
    70cc:	6465      	str	r5, [r4, #68]	; 0x44
    70ce:	4629      	mov	r1, r5
    70d0:	4620      	mov	r0, r4
    70d2:	f7fe fdc5 	bl	5c60 <_Balloc>
    70d6:	f04f 37ff 	mov.w	r7, #4294967295
    70da:	2301      	movs	r3, #1
    70dc:	9008      	str	r0, [sp, #32]
    70de:	46a8      	mov	r8, r5
    70e0:	6420      	str	r0, [r4, #64]	; 0x40
    70e2:	970d      	str	r7, [sp, #52]	; 0x34
    70e4:	9309      	str	r3, [sp, #36]	; 0x24
    70e6:	f7ff bac0 	b.w	666a <_dtoa_r+0x1fa>
    70ea:	bf00      	nop
    70ec:	20004678 	.word	0x20004678
    70f0:	20004740 	.word	0x20004740
    70f4:	00000000 	.word	0x00000000

000070f8 <_svfprintf_r>:
    70f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70fc:	ed2d 8b06 	vpush	{d8-d10}
    7100:	b0b9      	sub	sp, #228	; 0xe4
    7102:	460c      	mov	r4, r1
    7104:	9103      	str	r1, [sp, #12]
    7106:	4692      	mov	sl, r2
    7108:	9309      	str	r3, [sp, #36]	; 0x24
    710a:	9005      	str	r0, [sp, #20]
    710c:	f7fe fd44 	bl	5b98 <_localeconv_r>
    7110:	6803      	ldr	r3, [r0, #0]
    7112:	9310      	str	r3, [sp, #64]	; 0x40
    7114:	4618      	mov	r0, r3
    7116:	f7fe faf3 	bl	5700 <strlen>
    711a:	89a3      	ldrh	r3, [r4, #12]
    711c:	900f      	str	r0, [sp, #60]	; 0x3c
    711e:	0619      	lsls	r1, r3, #24
    7120:	d503      	bpl.n	712a <_svfprintf_r+0x32>
    7122:	6923      	ldr	r3, [r4, #16]
    7124:	2b00      	cmp	r3, #0
    7126:	f001 807d 	beq.w	8224 <_svfprintf_r+0x112c>
    712a:	2300      	movs	r3, #0
    712c:	ed9f 8ba4 	vldr	d8, [pc, #656]	; 73c0 <_svfprintf_r+0x2c8>
    7130:	ed9f 9ba5 	vldr	d9, [pc, #660]	; 73c8 <_svfprintf_r+0x2d0>
    7134:	930d      	str	r3, [sp, #52]	; 0x34
    7136:	931d      	str	r3, [sp, #116]	; 0x74
    7138:	931c      	str	r3, [sp, #112]	; 0x70
    713a:	9311      	str	r3, [sp, #68]	; 0x44
    713c:	9306      	str	r3, [sp, #24]
    713e:	ab28      	add	r3, sp, #160	; 0xa0
    7140:	931b      	str	r3, [sp, #108]	; 0x6c
    7142:	4699      	mov	r9, r3
    7144:	f89a 3000 	ldrb.w	r3, [sl]
    7148:	4654      	mov	r4, sl
    714a:	b1eb      	cbz	r3, 7188 <_svfprintf_r+0x90>
    714c:	2b25      	cmp	r3, #37	; 0x25
    714e:	d102      	bne.n	7156 <_svfprintf_r+0x5e>
    7150:	e01a      	b.n	7188 <_svfprintf_r+0x90>
    7152:	2b25      	cmp	r3, #37	; 0x25
    7154:	d003      	beq.n	715e <_svfprintf_r+0x66>
    7156:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    715a:	2b00      	cmp	r3, #0
    715c:	d1f9      	bne.n	7152 <_svfprintf_r+0x5a>
    715e:	ebca 0504 	rsb	r5, sl, r4
    7162:	b18d      	cbz	r5, 7188 <_svfprintf_r+0x90>
    7164:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    7166:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    7168:	f8c9 a000 	str.w	sl, [r9]
    716c:	3301      	adds	r3, #1
    716e:	442a      	add	r2, r5
    7170:	2b07      	cmp	r3, #7
    7172:	f8c9 5004 	str.w	r5, [r9, #4]
    7176:	921d      	str	r2, [sp, #116]	; 0x74
    7178:	931c      	str	r3, [sp, #112]	; 0x70
    717a:	f300 80a3 	bgt.w	72c4 <_svfprintf_r+0x1cc>
    717e:	f109 0908 	add.w	r9, r9, #8
    7182:	9b06      	ldr	r3, [sp, #24]
    7184:	442b      	add	r3, r5
    7186:	9306      	str	r3, [sp, #24]
    7188:	7823      	ldrb	r3, [r4, #0]
    718a:	2b00      	cmp	r3, #0
    718c:	f000 80a3 	beq.w	72d6 <_svfprintf_r+0x1de>
    7190:	2300      	movs	r3, #0
    7192:	461a      	mov	r2, r3
    7194:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    7198:	4619      	mov	r1, r3
    719a:	9307      	str	r3, [sp, #28]
    719c:	469b      	mov	fp, r3
    719e:	f04f 38ff 	mov.w	r8, #4294967295
    71a2:	7863      	ldrb	r3, [r4, #1]
    71a4:	f104 0a01 	add.w	sl, r4, #1
    71a8:	4645      	mov	r5, r8
    71aa:	f10a 0a01 	add.w	sl, sl, #1
    71ae:	f1a3 0020 	sub.w	r0, r3, #32
    71b2:	2858      	cmp	r0, #88	; 0x58
    71b4:	f200 83f8 	bhi.w	79a8 <_svfprintf_r+0x8b0>
    71b8:	e8df f010 	tbh	[pc, r0, lsl #1]
    71bc:	03f60363 	.word	0x03f60363
    71c0:	036b03f6 	.word	0x036b03f6
    71c4:	03f603f6 	.word	0x03f603f6
    71c8:	03f603f6 	.word	0x03f603f6
    71cc:	03f603f6 	.word	0x03f603f6
    71d0:	037e0370 	.word	0x037e0370
    71d4:	005d03f6 	.word	0x005d03f6
    71d8:	03f600df 	.word	0x03f600df
    71dc:	010c00fb 	.word	0x010c00fb
    71e0:	010c010c 	.word	0x010c010c
    71e4:	010c010c 	.word	0x010c010c
    71e8:	010c010c 	.word	0x010c010c
    71ec:	010c010c 	.word	0x010c010c
    71f0:	03f603f6 	.word	0x03f603f6
    71f4:	03f603f6 	.word	0x03f603f6
    71f8:	03f603f6 	.word	0x03f603f6
    71fc:	03f603f6 	.word	0x03f603f6
    7200:	03f603f6 	.word	0x03f603f6
    7204:	015e011c 	.word	0x015e011c
    7208:	015e03f6 	.word	0x015e03f6
    720c:	03f603f6 	.word	0x03f603f6
    7210:	03f603f6 	.word	0x03f603f6
    7214:	03f602a1 	.word	0x03f602a1
    7218:	02a603f6 	.word	0x02a603f6
    721c:	03f603f6 	.word	0x03f603f6
    7220:	03f603f6 	.word	0x03f603f6
    7224:	02d803f6 	.word	0x02d803f6
    7228:	03f603f6 	.word	0x03f603f6
    722c:	03f60305 	.word	0x03f60305
    7230:	03f603f6 	.word	0x03f603f6
    7234:	03f603f6 	.word	0x03f603f6
    7238:	03f603f6 	.word	0x03f603f6
    723c:	03f603f6 	.word	0x03f603f6
    7240:	034303f6 	.word	0x034303f6
    7244:	015e0356 	.word	0x015e0356
    7248:	015e015e 	.word	0x015e015e
    724c:	0356035e 	.word	0x0356035e
    7250:	03f603f6 	.word	0x03f603f6
    7254:	03f603a4 	.word	0x03f603a4
    7258:	00a203b1 	.word	0x00a203b1
    725c:	03c30062 	.word	0x03c30062
    7260:	03c803f6 	.word	0x03c803f6
    7264:	038303f6 	.word	0x038303f6
    7268:	03f603f6 	.word	0x03f603f6
    726c:	038b      	.short	0x038b
    726e:	9807      	ldr	r0, [sp, #28]
    7270:	9309      	str	r3, [sp, #36]	; 0x24
    7272:	4240      	negs	r0, r0
    7274:	9007      	str	r0, [sp, #28]
    7276:	f04b 0b04 	orr.w	fp, fp, #4
    727a:	f89a 3000 	ldrb.w	r3, [sl]
    727e:	e794      	b.n	71aa <_svfprintf_r+0xb2>
    7280:	46a8      	mov	r8, r5
    7282:	9809      	ldr	r0, [sp, #36]	; 0x24
    7284:	2100      	movs	r1, #0
    7286:	2330      	movs	r3, #48	; 0x30
    7288:	2278      	movs	r2, #120	; 0x78
    728a:	4588      	cmp	r8, r1
    728c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    7290:	6804      	ldr	r4, [r0, #0]
    7292:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    7296:	f100 0704 	add.w	r7, r0, #4
    729a:	f04f 0500 	mov.w	r5, #0
    729e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    72a2:	f04b 0302 	orr.w	r3, fp, #2
    72a6:	f2c0 839c 	blt.w	79e2 <_svfprintf_r+0x8ea>
    72aa:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    72ae:	f043 0b02 	orr.w	fp, r3, #2
    72b2:	ea54 0305 	orrs.w	r3, r4, r5
    72b6:	9709      	str	r7, [sp, #36]	; 0x24
    72b8:	f000 8369 	beq.w	798e <_svfprintf_r+0x896>
    72bc:	460f      	mov	r7, r1
    72be:	920c      	str	r2, [sp, #48]	; 0x30
    72c0:	4843      	ldr	r0, [pc, #268]	; (73d0 <_svfprintf_r+0x2d8>)
    72c2:	e2ae      	b.n	7822 <_svfprintf_r+0x72a>
    72c4:	aa1b      	add	r2, sp, #108	; 0x6c
    72c6:	9903      	ldr	r1, [sp, #12]
    72c8:	9805      	ldr	r0, [sp, #20]
    72ca:	f001 f9cd 	bl	8668 <__ssprint_r>
    72ce:	b948      	cbnz	r0, 72e4 <_svfprintf_r+0x1ec>
    72d0:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    72d4:	e755      	b.n	7182 <_svfprintf_r+0x8a>
    72d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    72d8:	b123      	cbz	r3, 72e4 <_svfprintf_r+0x1ec>
    72da:	9805      	ldr	r0, [sp, #20]
    72dc:	9903      	ldr	r1, [sp, #12]
    72de:	aa1b      	add	r2, sp, #108	; 0x6c
    72e0:	f001 f9c2 	bl	8668 <__ssprint_r>
    72e4:	9b03      	ldr	r3, [sp, #12]
    72e6:	899b      	ldrh	r3, [r3, #12]
    72e8:	f013 0f40 	tst.w	r3, #64	; 0x40
    72ec:	9b06      	ldr	r3, [sp, #24]
    72ee:	bf18      	it	ne
    72f0:	f04f 33ff 	movne.w	r3, #4294967295
    72f4:	4618      	mov	r0, r3
    72f6:	b039      	add	sp, #228	; 0xe4
    72f8:	ecbd 8b06 	vpop	{d8-d10}
    72fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7300:	930c      	str	r3, [sp, #48]	; 0x30
    7302:	46a8      	mov	r8, r5
    7304:	2a00      	cmp	r2, #0
    7306:	f041 819a 	bne.w	863e <_svfprintf_r+0x1546>
    730a:	f01b 0320 	ands.w	r3, fp, #32
    730e:	f000 8206 	beq.w	771e <_svfprintf_r+0x626>
    7312:	9f09      	ldr	r7, [sp, #36]	; 0x24
    7314:	3707      	adds	r7, #7
    7316:	f027 0307 	bic.w	r3, r7, #7
    731a:	2700      	movs	r7, #0
    731c:	f103 0208 	add.w	r2, r3, #8
    7320:	45b8      	cmp	r8, r7
    7322:	9209      	str	r2, [sp, #36]	; 0x24
    7324:	e9d3 4500 	ldrd	r4, r5, [r3]
    7328:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    732c:	f2c0 865e 	blt.w	7fec <_svfprintf_r+0xef4>
    7330:	ea54 0305 	orrs.w	r3, r4, r5
    7334:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    7338:	f000 834b 	beq.w	79d2 <_svfprintf_r+0x8da>
    733c:	ae28      	add	r6, sp, #160	; 0xa0
    733e:	08e2      	lsrs	r2, r4, #3
    7340:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    7344:	08e9      	lsrs	r1, r5, #3
    7346:	f004 0307 	and.w	r3, r4, #7
    734a:	460d      	mov	r5, r1
    734c:	4614      	mov	r4, r2
    734e:	3330      	adds	r3, #48	; 0x30
    7350:	ea54 0205 	orrs.w	r2, r4, r5
    7354:	f806 3d01 	strb.w	r3, [r6, #-1]!
    7358:	d1f1      	bne.n	733e <_svfprintf_r+0x246>
    735a:	f01b 0f01 	tst.w	fp, #1
    735e:	f000 8227 	beq.w	77b0 <_svfprintf_r+0x6b8>
    7362:	2b30      	cmp	r3, #48	; 0x30
    7364:	f000 8224 	beq.w	77b0 <_svfprintf_r+0x6b8>
    7368:	2230      	movs	r2, #48	; 0x30
    736a:	1e73      	subs	r3, r6, #1
    736c:	f806 2c01 	strb.w	r2, [r6, #-1]
    7370:	aa28      	add	r2, sp, #160	; 0xa0
    7372:	1ad2      	subs	r2, r2, r3
    7374:	9208      	str	r2, [sp, #32]
    7376:	461e      	mov	r6, r3
    7378:	e21d      	b.n	77b6 <_svfprintf_r+0x6be>
    737a:	f89a 3000 	ldrb.w	r3, [sl]
    737e:	2b2a      	cmp	r3, #42	; 0x2a
    7380:	f10a 0401 	add.w	r4, sl, #1
    7384:	f001 812f 	beq.w	85e6 <_svfprintf_r+0x14ee>
    7388:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    738c:	2809      	cmp	r0, #9
    738e:	bf98      	it	ls
    7390:	2500      	movls	r5, #0
    7392:	f201 80d5 	bhi.w	8540 <_svfprintf_r+0x1448>
    7396:	f814 3b01 	ldrb.w	r3, [r4], #1
    739a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    739e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    73a2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    73a6:	2809      	cmp	r0, #9
    73a8:	d9f5      	bls.n	7396 <_svfprintf_r+0x29e>
    73aa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    73ae:	46a2      	mov	sl, r4
    73b0:	e6fd      	b.n	71ae <_svfprintf_r+0xb6>
    73b2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    73b6:	f89a 3000 	ldrb.w	r3, [sl]
    73ba:	e6f6      	b.n	71aa <_svfprintf_r+0xb2>
    73bc:	f3af 8000 	nop.w
	...
    73c8:	ffffffff 	.word	0xffffffff
    73cc:	7fefffff 	.word	0x7fefffff
    73d0:	200047bc 	.word	0x200047bc
    73d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    73d8:	2300      	movs	r3, #0
    73da:	461c      	mov	r4, r3
    73dc:	f81a 3b01 	ldrb.w	r3, [sl], #1
    73e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    73e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    73e8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    73ec:	2809      	cmp	r0, #9
    73ee:	d9f5      	bls.n	73dc <_svfprintf_r+0x2e4>
    73f0:	9407      	str	r4, [sp, #28]
    73f2:	e6dc      	b.n	71ae <_svfprintf_r+0xb6>
    73f4:	930c      	str	r3, [sp, #48]	; 0x30
    73f6:	46a8      	mov	r8, r5
    73f8:	2a00      	cmp	r2, #0
    73fa:	f041 812c 	bne.w	8656 <_svfprintf_r+0x155e>
    73fe:	f04b 0b10 	orr.w	fp, fp, #16
    7402:	f01b 0f20 	tst.w	fp, #32
    7406:	f000 8503 	beq.w	7e10 <_svfprintf_r+0xd18>
    740a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    740c:	3707      	adds	r7, #7
    740e:	f027 0707 	bic.w	r7, r7, #7
    7412:	e9d7 2300 	ldrd	r2, r3, [r7]
    7416:	f107 0108 	add.w	r1, r7, #8
    741a:	9109      	str	r1, [sp, #36]	; 0x24
    741c:	4614      	mov	r4, r2
    741e:	461d      	mov	r5, r3
    7420:	2a00      	cmp	r2, #0
    7422:	f173 0300 	sbcs.w	r3, r3, #0
    7426:	f2c0 8537 	blt.w	7e98 <_svfprintf_r+0xda0>
    742a:	f1b8 0f00 	cmp.w	r8, #0
    742e:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    7432:	f2c0 81b5 	blt.w	77a0 <_svfprintf_r+0x6a8>
    7436:	ea54 0305 	orrs.w	r3, r4, r5
    743a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    743e:	f000 83f6 	beq.w	7c2e <_svfprintf_r+0xb36>
    7442:	2d00      	cmp	r5, #0
    7444:	bf08      	it	eq
    7446:	2c0a      	cmpeq	r4, #10
    7448:	f0c0 81ae 	bcc.w	77a8 <_svfprintf_r+0x6b0>
    744c:	ae28      	add	r6, sp, #160	; 0xa0
    744e:	4620      	mov	r0, r4
    7450:	4629      	mov	r1, r5
    7452:	220a      	movs	r2, #10
    7454:	2300      	movs	r3, #0
    7456:	f001 f987 	bl	8768 <__aeabi_uldivmod>
    745a:	3230      	adds	r2, #48	; 0x30
    745c:	f806 2d01 	strb.w	r2, [r6, #-1]!
    7460:	4620      	mov	r0, r4
    7462:	4629      	mov	r1, r5
    7464:	2300      	movs	r3, #0
    7466:	220a      	movs	r2, #10
    7468:	f001 f97e 	bl	8768 <__aeabi_uldivmod>
    746c:	4604      	mov	r4, r0
    746e:	460d      	mov	r5, r1
    7470:	ea54 0305 	orrs.w	r3, r4, r5
    7474:	d1eb      	bne.n	744e <_svfprintf_r+0x356>
    7476:	e19b      	b.n	77b0 <_svfprintf_r+0x6b8>
    7478:	930c      	str	r3, [sp, #48]	; 0x30
    747a:	46a8      	mov	r8, r5
    747c:	2a00      	cmp	r2, #0
    747e:	f041 80e6 	bne.w	864e <_svfprintf_r+0x1556>
    7482:	9f09      	ldr	r7, [sp, #36]	; 0x24
    7484:	f01b 0f08 	tst.w	fp, #8
    7488:	f107 0707 	add.w	r7, r7, #7
    748c:	f000 8640 	beq.w	8110 <_svfprintf_r+0x1018>
    7490:	f027 0307 	bic.w	r3, r7, #7
    7494:	ed93 8b00 	vldr	d8, [r3]
    7498:	f103 0208 	add.w	r2, r3, #8
    749c:	9209      	str	r2, [sp, #36]	; 0x24
    749e:	eeb0 7bc8 	vabs.f64	d7, d8
    74a2:	eeb4 7b49 	vcmp.f64	d7, d9
    74a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74aa:	f340 85bc 	ble.w	8026 <_svfprintf_r+0xf2e>
    74ae:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    74b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74b6:	f100 87ca 	bmi.w	844e <_svfprintf_r+0x1356>
    74ba:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    74be:	4ea7      	ldr	r6, [pc, #668]	; (775c <_svfprintf_r+0x664>)
    74c0:	4ba7      	ldr	r3, [pc, #668]	; (7760 <_svfprintf_r+0x668>)
    74c2:	990c      	ldr	r1, [sp, #48]	; 0x30
    74c4:	2203      	movs	r2, #3
    74c6:	f04f 0800 	mov.w	r8, #0
    74ca:	9204      	str	r2, [sp, #16]
    74cc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    74d0:	2947      	cmp	r1, #71	; 0x47
    74d2:	bfd8      	it	le
    74d4:	461e      	movle	r6, r3
    74d6:	9208      	str	r2, [sp, #32]
    74d8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    74dc:	b117      	cbz	r7, 74e4 <_svfprintf_r+0x3ec>
    74de:	9b04      	ldr	r3, [sp, #16]
    74e0:	3301      	adds	r3, #1
    74e2:	9304      	str	r3, [sp, #16]
    74e4:	f01b 0302 	ands.w	r3, fp, #2
    74e8:	930a      	str	r3, [sp, #40]	; 0x28
    74ea:	d002      	beq.n	74f2 <_svfprintf_r+0x3fa>
    74ec:	9b04      	ldr	r3, [sp, #16]
    74ee:	3302      	adds	r3, #2
    74f0:	9304      	str	r3, [sp, #16]
    74f2:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    74f6:	930b      	str	r3, [sp, #44]	; 0x2c
    74f8:	f040 8280 	bne.w	79fc <_svfprintf_r+0x904>
    74fc:	9b07      	ldr	r3, [sp, #28]
    74fe:	9a04      	ldr	r2, [sp, #16]
    7500:	1a9c      	subs	r4, r3, r2
    7502:	2c00      	cmp	r4, #0
    7504:	f340 827a 	ble.w	79fc <_svfprintf_r+0x904>
    7508:	2c10      	cmp	r4, #16
    750a:	991d      	ldr	r1, [sp, #116]	; 0x74
    750c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    750e:	4f95      	ldr	r7, [pc, #596]	; (7764 <_svfprintf_r+0x66c>)
    7510:	dd23      	ble.n	755a <_svfprintf_r+0x462>
    7512:	4648      	mov	r0, r9
    7514:	2510      	movs	r5, #16
    7516:	46c1      	mov	r9, r8
    7518:	46b0      	mov	r8, r6
    751a:	9e05      	ldr	r6, [sp, #20]
    751c:	e004      	b.n	7528 <_svfprintf_r+0x430>
    751e:	3c10      	subs	r4, #16
    7520:	2c10      	cmp	r4, #16
    7522:	f100 0008 	add.w	r0, r0, #8
    7526:	dd15      	ble.n	7554 <_svfprintf_r+0x45c>
    7528:	3201      	adds	r2, #1
    752a:	3110      	adds	r1, #16
    752c:	2a07      	cmp	r2, #7
    752e:	911d      	str	r1, [sp, #116]	; 0x74
    7530:	921c      	str	r2, [sp, #112]	; 0x70
    7532:	6007      	str	r7, [r0, #0]
    7534:	6045      	str	r5, [r0, #4]
    7536:	ddf2      	ble.n	751e <_svfprintf_r+0x426>
    7538:	aa1b      	add	r2, sp, #108	; 0x6c
    753a:	9903      	ldr	r1, [sp, #12]
    753c:	4630      	mov	r0, r6
    753e:	f001 f893 	bl	8668 <__ssprint_r>
    7542:	2800      	cmp	r0, #0
    7544:	f47f aece 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7548:	3c10      	subs	r4, #16
    754a:	2c10      	cmp	r4, #16
    754c:	991d      	ldr	r1, [sp, #116]	; 0x74
    754e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7550:	a828      	add	r0, sp, #160	; 0xa0
    7552:	dce9      	bgt.n	7528 <_svfprintf_r+0x430>
    7554:	4646      	mov	r6, r8
    7556:	46c8      	mov	r8, r9
    7558:	4681      	mov	r9, r0
    755a:	3201      	adds	r2, #1
    755c:	1863      	adds	r3, r4, r1
    755e:	2a07      	cmp	r2, #7
    7560:	931d      	str	r3, [sp, #116]	; 0x74
    7562:	921c      	str	r2, [sp, #112]	; 0x70
    7564:	f8c9 7000 	str.w	r7, [r9]
    7568:	f8c9 4004 	str.w	r4, [r9, #4]
    756c:	f300 83e2 	bgt.w	7d34 <_svfprintf_r+0xc3c>
    7570:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    7574:	f109 0908 	add.w	r9, r9, #8
    7578:	b177      	cbz	r7, 7598 <_svfprintf_r+0x4a0>
    757a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    757c:	3201      	adds	r2, #1
    757e:	3301      	adds	r3, #1
    7580:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    7584:	2101      	movs	r1, #1
    7586:	2a07      	cmp	r2, #7
    7588:	931d      	str	r3, [sp, #116]	; 0x74
    758a:	921c      	str	r2, [sp, #112]	; 0x70
    758c:	e889 0003 	stmia.w	r9, {r0, r1}
    7590:	f300 835f 	bgt.w	7c52 <_svfprintf_r+0xb5a>
    7594:	f109 0908 	add.w	r9, r9, #8
    7598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    759a:	b16a      	cbz	r2, 75b8 <_svfprintf_r+0x4c0>
    759c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    759e:	3201      	adds	r2, #1
    75a0:	3302      	adds	r3, #2
    75a2:	a814      	add	r0, sp, #80	; 0x50
    75a4:	2102      	movs	r1, #2
    75a6:	2a07      	cmp	r2, #7
    75a8:	931d      	str	r3, [sp, #116]	; 0x74
    75aa:	921c      	str	r2, [sp, #112]	; 0x70
    75ac:	e889 0003 	stmia.w	r9, {r0, r1}
    75b0:	f300 835b 	bgt.w	7c6a <_svfprintf_r+0xb72>
    75b4:	f109 0908 	add.w	r9, r9, #8
    75b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    75ba:	2a80      	cmp	r2, #128	; 0x80
    75bc:	f000 827e 	beq.w	7abc <_svfprintf_r+0x9c4>
    75c0:	9a08      	ldr	r2, [sp, #32]
    75c2:	ebc2 0408 	rsb	r4, r2, r8
    75c6:	2c00      	cmp	r4, #0
    75c8:	dd34      	ble.n	7634 <_svfprintf_r+0x53c>
    75ca:	2c10      	cmp	r4, #16
    75cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    75ce:	4f66      	ldr	r7, [pc, #408]	; (7768 <_svfprintf_r+0x670>)
    75d0:	dd23      	ble.n	761a <_svfprintf_r+0x522>
    75d2:	4649      	mov	r1, r9
    75d4:	f04f 0810 	mov.w	r8, #16
    75d8:	46b1      	mov	r9, r6
    75da:	9d05      	ldr	r5, [sp, #20]
    75dc:	9e03      	ldr	r6, [sp, #12]
    75de:	e004      	b.n	75ea <_svfprintf_r+0x4f2>
    75e0:	3c10      	subs	r4, #16
    75e2:	2c10      	cmp	r4, #16
    75e4:	f101 0108 	add.w	r1, r1, #8
    75e8:	dd15      	ble.n	7616 <_svfprintf_r+0x51e>
    75ea:	3201      	adds	r2, #1
    75ec:	3310      	adds	r3, #16
    75ee:	2a07      	cmp	r2, #7
    75f0:	931d      	str	r3, [sp, #116]	; 0x74
    75f2:	921c      	str	r2, [sp, #112]	; 0x70
    75f4:	e881 0180 	stmia.w	r1, {r7, r8}
    75f8:	ddf2      	ble.n	75e0 <_svfprintf_r+0x4e8>
    75fa:	aa1b      	add	r2, sp, #108	; 0x6c
    75fc:	4631      	mov	r1, r6
    75fe:	4628      	mov	r0, r5
    7600:	f001 f832 	bl	8668 <__ssprint_r>
    7604:	2800      	cmp	r0, #0
    7606:	f47f ae6d 	bne.w	72e4 <_svfprintf_r+0x1ec>
    760a:	3c10      	subs	r4, #16
    760c:	2c10      	cmp	r4, #16
    760e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7610:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7612:	a928      	add	r1, sp, #160	; 0xa0
    7614:	dce9      	bgt.n	75ea <_svfprintf_r+0x4f2>
    7616:	464e      	mov	r6, r9
    7618:	4689      	mov	r9, r1
    761a:	3201      	adds	r2, #1
    761c:	4423      	add	r3, r4
    761e:	2a07      	cmp	r2, #7
    7620:	931d      	str	r3, [sp, #116]	; 0x74
    7622:	921c      	str	r2, [sp, #112]	; 0x70
    7624:	f8c9 7000 	str.w	r7, [r9]
    7628:	f8c9 4004 	str.w	r4, [r9, #4]
    762c:	f300 8305 	bgt.w	7c3a <_svfprintf_r+0xb42>
    7630:	f109 0908 	add.w	r9, r9, #8
    7634:	f41b 7f80 	tst.w	fp, #256	; 0x100
    7638:	f040 81e2 	bne.w	7a00 <_svfprintf_r+0x908>
    763c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    763e:	9808      	ldr	r0, [sp, #32]
    7640:	f8c9 6000 	str.w	r6, [r9]
    7644:	3201      	adds	r2, #1
    7646:	4403      	add	r3, r0
    7648:	2a07      	cmp	r2, #7
    764a:	931d      	str	r3, [sp, #116]	; 0x74
    764c:	f8c9 0004 	str.w	r0, [r9, #4]
    7650:	921c      	str	r2, [sp, #112]	; 0x70
    7652:	f300 82c2 	bgt.w	7bda <_svfprintf_r+0xae2>
    7656:	f109 0908 	add.w	r9, r9, #8
    765a:	f01b 0f04 	tst.w	fp, #4
    765e:	d03e      	beq.n	76de <_svfprintf_r+0x5e6>
    7660:	9a07      	ldr	r2, [sp, #28]
    7662:	9904      	ldr	r1, [sp, #16]
    7664:	1a54      	subs	r4, r2, r1
    7666:	2c00      	cmp	r4, #0
    7668:	dd39      	ble.n	76de <_svfprintf_r+0x5e6>
    766a:	2c10      	cmp	r4, #16
    766c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    766e:	4f3d      	ldr	r7, [pc, #244]	; (7764 <_svfprintf_r+0x66c>)
    7670:	dd22      	ble.n	76b8 <_svfprintf_r+0x5c0>
    7672:	2510      	movs	r5, #16
    7674:	9e05      	ldr	r6, [sp, #20]
    7676:	f8dd 800c 	ldr.w	r8, [sp, #12]
    767a:	e004      	b.n	7686 <_svfprintf_r+0x58e>
    767c:	3c10      	subs	r4, #16
    767e:	2c10      	cmp	r4, #16
    7680:	f109 0908 	add.w	r9, r9, #8
    7684:	dd18      	ble.n	76b8 <_svfprintf_r+0x5c0>
    7686:	3201      	adds	r2, #1
    7688:	3310      	adds	r3, #16
    768a:	2a07      	cmp	r2, #7
    768c:	931d      	str	r3, [sp, #116]	; 0x74
    768e:	921c      	str	r2, [sp, #112]	; 0x70
    7690:	f8c9 7000 	str.w	r7, [r9]
    7694:	f8c9 5004 	str.w	r5, [r9, #4]
    7698:	ddf0      	ble.n	767c <_svfprintf_r+0x584>
    769a:	aa1b      	add	r2, sp, #108	; 0x6c
    769c:	4641      	mov	r1, r8
    769e:	4630      	mov	r0, r6
    76a0:	f000 ffe2 	bl	8668 <__ssprint_r>
    76a4:	2800      	cmp	r0, #0
    76a6:	f47f ae1d 	bne.w	72e4 <_svfprintf_r+0x1ec>
    76aa:	3c10      	subs	r4, #16
    76ac:	2c10      	cmp	r4, #16
    76ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    76b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    76b2:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    76b6:	dce6      	bgt.n	7686 <_svfprintf_r+0x58e>
    76b8:	3201      	adds	r2, #1
    76ba:	4423      	add	r3, r4
    76bc:	2a07      	cmp	r2, #7
    76be:	931d      	str	r3, [sp, #116]	; 0x74
    76c0:	921c      	str	r2, [sp, #112]	; 0x70
    76c2:	f8c9 7000 	str.w	r7, [r9]
    76c6:	f8c9 4004 	str.w	r4, [r9, #4]
    76ca:	dd08      	ble.n	76de <_svfprintf_r+0x5e6>
    76cc:	aa1b      	add	r2, sp, #108	; 0x6c
    76ce:	9903      	ldr	r1, [sp, #12]
    76d0:	9805      	ldr	r0, [sp, #20]
    76d2:	f000 ffc9 	bl	8668 <__ssprint_r>
    76d6:	2800      	cmp	r0, #0
    76d8:	f47f ae04 	bne.w	72e4 <_svfprintf_r+0x1ec>
    76dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    76de:	9a06      	ldr	r2, [sp, #24]
    76e0:	9907      	ldr	r1, [sp, #28]
    76e2:	9804      	ldr	r0, [sp, #16]
    76e4:	4281      	cmp	r1, r0
    76e6:	bfac      	ite	ge
    76e8:	1852      	addge	r2, r2, r1
    76ea:	1812      	addlt	r2, r2, r0
    76ec:	9206      	str	r2, [sp, #24]
    76ee:	2b00      	cmp	r3, #0
    76f0:	f040 827f 	bne.w	7bf2 <_svfprintf_r+0xafa>
    76f4:	2300      	movs	r3, #0
    76f6:	931c      	str	r3, [sp, #112]	; 0x70
    76f8:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    76fc:	e522      	b.n	7144 <_svfprintf_r+0x4c>
    76fe:	f04b 0b08 	orr.w	fp, fp, #8
    7702:	f89a 3000 	ldrb.w	r3, [sl]
    7706:	e550      	b.n	71aa <_svfprintf_r+0xb2>
    7708:	930c      	str	r3, [sp, #48]	; 0x30
    770a:	46a8      	mov	r8, r5
    770c:	2a00      	cmp	r2, #0
    770e:	f040 879a 	bne.w	8646 <_svfprintf_r+0x154e>
    7712:	f04b 0b10 	orr.w	fp, fp, #16
    7716:	f01b 0320 	ands.w	r3, fp, #32
    771a:	f47f adfa 	bne.w	7312 <_svfprintf_r+0x21a>
    771e:	f01b 0210 	ands.w	r2, fp, #16
    7722:	f040 8391 	bne.w	7e48 <_svfprintf_r+0xd50>
    7726:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    772a:	f000 838d 	beq.w	7e48 <_svfprintf_r+0xd50>
    772e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7730:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    7734:	460b      	mov	r3, r1
    7736:	f1b8 0f00 	cmp.w	r8, #0
    773a:	f103 0304 	add.w	r3, r3, #4
    773e:	880c      	ldrh	r4, [r1, #0]
    7740:	f04f 0500 	mov.w	r5, #0
    7744:	f2c0 85ab 	blt.w	829e <_svfprintf_r+0x11a6>
    7748:	ea54 0105 	orrs.w	r1, r4, r5
    774c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    7750:	9309      	str	r3, [sp, #36]	; 0x24
    7752:	f000 813e 	beq.w	79d2 <_svfprintf_r+0x8da>
    7756:	4617      	mov	r7, r2
    7758:	e5f0      	b.n	733c <_svfprintf_r+0x244>
    775a:	bf00      	nop
    775c:	2000479c 	.word	0x2000479c
    7760:	20004798 	.word	0x20004798
    7764:	200047d8 	.word	0x200047d8
    7768:	20004788 	.word	0x20004788
    776c:	930c      	str	r3, [sp, #48]	; 0x30
    776e:	46a8      	mov	r8, r5
    7770:	2a00      	cmp	r2, #0
    7772:	f040 8759 	bne.w	8628 <_svfprintf_r+0x1530>
    7776:	f04b 0b10 	orr.w	fp, fp, #16
    777a:	f01b 0320 	ands.w	r3, fp, #32
    777e:	f000 82e7 	beq.w	7d50 <_svfprintf_r+0xc58>
    7782:	9f09      	ldr	r7, [sp, #36]	; 0x24
    7784:	3707      	adds	r7, #7
    7786:	f027 0307 	bic.w	r3, r7, #7
    778a:	2700      	movs	r7, #0
    778c:	f103 0208 	add.w	r2, r3, #8
    7790:	45b8      	cmp	r8, r7
    7792:	9209      	str	r2, [sp, #36]	; 0x24
    7794:	e9d3 4500 	ldrd	r4, r5, [r3]
    7798:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    779c:	f6bf ae4b 	bge.w	7436 <_svfprintf_r+0x33e>
    77a0:	ea54 0305 	orrs.w	r3, r4, r5
    77a4:	f47f ae4d 	bne.w	7442 <_svfprintf_r+0x34a>
    77a8:	ae38      	add	r6, sp, #224	; 0xe0
    77aa:	3430      	adds	r4, #48	; 0x30
    77ac:	f806 4d41 	strb.w	r4, [r6, #-65]!
    77b0:	ab28      	add	r3, sp, #160	; 0xa0
    77b2:	1b9b      	subs	r3, r3, r6
    77b4:	9308      	str	r3, [sp, #32]
    77b6:	9b08      	ldr	r3, [sp, #32]
    77b8:	4543      	cmp	r3, r8
    77ba:	bfb8      	it	lt
    77bc:	4643      	movlt	r3, r8
    77be:	9304      	str	r3, [sp, #16]
    77c0:	2300      	movs	r3, #0
    77c2:	930e      	str	r3, [sp, #56]	; 0x38
    77c4:	e68a      	b.n	74dc <_svfprintf_r+0x3e4>
    77c6:	930c      	str	r3, [sp, #48]	; 0x30
    77c8:	46a8      	mov	r8, r5
    77ca:	2a00      	cmp	r2, #0
    77cc:	f040 8728 	bne.w	8620 <_svfprintf_r+0x1528>
    77d0:	f01b 0f20 	tst.w	fp, #32
    77d4:	48c2      	ldr	r0, [pc, #776]	; (7ae0 <_svfprintf_r+0x9e8>)
    77d6:	f000 8086 	beq.w	78e6 <_svfprintf_r+0x7ee>
    77da:	9f09      	ldr	r7, [sp, #36]	; 0x24
    77dc:	3707      	adds	r7, #7
    77de:	f027 0307 	bic.w	r3, r7, #7
    77e2:	e9d3 4500 	ldrd	r4, r5, [r3]
    77e6:	f103 0208 	add.w	r2, r3, #8
    77ea:	9209      	str	r2, [sp, #36]	; 0x24
    77ec:	f01b 0701 	ands.w	r7, fp, #1
    77f0:	f000 8247 	beq.w	7c82 <_svfprintf_r+0xb8a>
    77f4:	ea54 0305 	orrs.w	r3, r4, r5
    77f8:	f000 84a3 	beq.w	8142 <_svfprintf_r+0x104a>
    77fc:	2700      	movs	r7, #0
    77fe:	2330      	movs	r3, #48	; 0x30
    7800:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    7804:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    7808:	45b8      	cmp	r8, r7
    780a:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    780e:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    7812:	f04b 0302 	orr.w	r3, fp, #2
    7816:	f2c0 8617 	blt.w	8448 <_svfprintf_r+0x1350>
    781a:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    781e:	f043 0b02 	orr.w	fp, r3, #2
    7822:	ae28      	add	r6, sp, #160	; 0xa0
    7824:	0923      	lsrs	r3, r4, #4
    7826:	f004 010f 	and.w	r1, r4, #15
    782a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    782e:	092a      	lsrs	r2, r5, #4
    7830:	461c      	mov	r4, r3
    7832:	4615      	mov	r5, r2
    7834:	5c43      	ldrb	r3, [r0, r1]
    7836:	f806 3d01 	strb.w	r3, [r6, #-1]!
    783a:	ea54 0305 	orrs.w	r3, r4, r5
    783e:	d1f1      	bne.n	7824 <_svfprintf_r+0x72c>
    7840:	e7b6      	b.n	77b0 <_svfprintf_r+0x6b8>
    7842:	9909      	ldr	r1, [sp, #36]	; 0x24
    7844:	930c      	str	r3, [sp, #48]	; 0x30
    7846:	680a      	ldr	r2, [r1, #0]
    7848:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    784c:	2300      	movs	r3, #0
    784e:	460a      	mov	r2, r1
    7850:	461f      	mov	r7, r3
    7852:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    7856:	3204      	adds	r2, #4
    7858:	2301      	movs	r3, #1
    785a:	9304      	str	r3, [sp, #16]
    785c:	46b8      	mov	r8, r7
    785e:	970e      	str	r7, [sp, #56]	; 0x38
    7860:	9209      	str	r2, [sp, #36]	; 0x24
    7862:	9308      	str	r3, [sp, #32]
    7864:	ae1e      	add	r6, sp, #120	; 0x78
    7866:	e63d      	b.n	74e4 <_svfprintf_r+0x3ec>
    7868:	930c      	str	r3, [sp, #48]	; 0x30
    786a:	46a8      	mov	r8, r5
    786c:	2a00      	cmp	r2, #0
    786e:	f43f adc8 	beq.w	7402 <_svfprintf_r+0x30a>
    7872:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    7876:	e5c4      	b.n	7402 <_svfprintf_r+0x30a>
    7878:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    787c:	f89a 3000 	ldrb.w	r3, [sl]
    7880:	e493      	b.n	71aa <_svfprintf_r+0xb2>
    7882:	f89a 3000 	ldrb.w	r3, [sl]
    7886:	2900      	cmp	r1, #0
    7888:	f47f ac8f 	bne.w	71aa <_svfprintf_r+0xb2>
    788c:	2201      	movs	r2, #1
    788e:	2120      	movs	r1, #32
    7890:	e48b      	b.n	71aa <_svfprintf_r+0xb2>
    7892:	f04b 0b01 	orr.w	fp, fp, #1
    7896:	f89a 3000 	ldrb.w	r3, [sl]
    789a:	e486      	b.n	71aa <_svfprintf_r+0xb2>
    789c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    789e:	6823      	ldr	r3, [r4, #0]
    78a0:	9307      	str	r3, [sp, #28]
    78a2:	4618      	mov	r0, r3
    78a4:	2800      	cmp	r0, #0
    78a6:	4623      	mov	r3, r4
    78a8:	f103 0304 	add.w	r3, r3, #4
    78ac:	f6ff acdf 	blt.w	726e <_svfprintf_r+0x176>
    78b0:	9309      	str	r3, [sp, #36]	; 0x24
    78b2:	f89a 3000 	ldrb.w	r3, [sl]
    78b6:	e478      	b.n	71aa <_svfprintf_r+0xb2>
    78b8:	f89a 3000 	ldrb.w	r3, [sl]
    78bc:	2201      	movs	r2, #1
    78be:	212b      	movs	r1, #43	; 0x2b
    78c0:	e473      	b.n	71aa <_svfprintf_r+0xb2>
    78c2:	930c      	str	r3, [sp, #48]	; 0x30
    78c4:	46a8      	mov	r8, r5
    78c6:	2a00      	cmp	r2, #0
    78c8:	f43f af57 	beq.w	777a <_svfprintf_r+0x682>
    78cc:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    78d0:	e753      	b.n	777a <_svfprintf_r+0x682>
    78d2:	930c      	str	r3, [sp, #48]	; 0x30
    78d4:	46a8      	mov	r8, r5
    78d6:	2a00      	cmp	r2, #0
    78d8:	f040 86aa 	bne.w	8630 <_svfprintf_r+0x1538>
    78dc:	f01b 0f20 	tst.w	fp, #32
    78e0:	4880      	ldr	r0, [pc, #512]	; (7ae4 <_svfprintf_r+0x9ec>)
    78e2:	f47f af7a 	bne.w	77da <_svfprintf_r+0x6e2>
    78e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    78e8:	f01b 0f10 	tst.w	fp, #16
    78ec:	4613      	mov	r3, r2
    78ee:	f040 82c1 	bne.w	7e74 <_svfprintf_r+0xd7c>
    78f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
    78f6:	f000 82bd 	beq.w	7e74 <_svfprintf_r+0xd7c>
    78fa:	3304      	adds	r3, #4
    78fc:	8814      	ldrh	r4, [r2, #0]
    78fe:	9309      	str	r3, [sp, #36]	; 0x24
    7900:	2500      	movs	r5, #0
    7902:	e773      	b.n	77ec <_svfprintf_r+0x6f4>
    7904:	f89a 3000 	ldrb.w	r3, [sl]
    7908:	2b6c      	cmp	r3, #108	; 0x6c
    790a:	bf03      	ittte	eq
    790c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
    7910:	f04b 0b20 	orreq.w	fp, fp, #32
    7914:	f10a 0a01 	addeq.w	sl, sl, #1
    7918:	f04b 0b10 	orrne.w	fp, fp, #16
    791c:	e445      	b.n	71aa <_svfprintf_r+0xb2>
    791e:	2a00      	cmp	r2, #0
    7920:	f040 866f 	bne.w	8602 <_svfprintf_r+0x150a>
    7924:	f01b 0f20 	tst.w	fp, #32
    7928:	f000 8366 	beq.w	7ff8 <_svfprintf_r+0xf00>
    792c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    792e:	9906      	ldr	r1, [sp, #24]
    7930:	6813      	ldr	r3, [r2, #0]
    7932:	17cd      	asrs	r5, r1, #31
    7934:	4608      	mov	r0, r1
    7936:	3204      	adds	r2, #4
    7938:	4629      	mov	r1, r5
    793a:	9209      	str	r2, [sp, #36]	; 0x24
    793c:	e9c3 0100 	strd	r0, r1, [r3]
    7940:	e400      	b.n	7144 <_svfprintf_r+0x4c>
    7942:	f04b 0b20 	orr.w	fp, fp, #32
    7946:	f89a 3000 	ldrb.w	r3, [sl]
    794a:	e42e      	b.n	71aa <_svfprintf_r+0xb2>
    794c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    794e:	930c      	str	r3, [sp, #48]	; 0x30
    7950:	6816      	ldr	r6, [r2, #0]
    7952:	2400      	movs	r4, #0
    7954:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
    7958:	1d17      	adds	r7, r2, #4
    795a:	2e00      	cmp	r6, #0
    795c:	f000 8565 	beq.w	842a <_svfprintf_r+0x1332>
    7960:	2d00      	cmp	r5, #0
    7962:	f2c0 84a2 	blt.w	82aa <_svfprintf_r+0x11b2>
    7966:	462a      	mov	r2, r5
    7968:	4621      	mov	r1, r4
    796a:	4630      	mov	r0, r6
    796c:	f7fe f928 	bl	5bc0 <memchr>
    7970:	2800      	cmp	r0, #0
    7972:	f000 85cc 	beq.w	850e <_svfprintf_r+0x1416>
    7976:	1b83      	subs	r3, r0, r6
    7978:	9308      	str	r3, [sp, #32]
    797a:	46a0      	mov	r8, r4
    797c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7980:	9709      	str	r7, [sp, #36]	; 0x24
    7982:	9304      	str	r3, [sp, #16]
    7984:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    7988:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    798c:	e5a6      	b.n	74dc <_svfprintf_r+0x3e4>
    798e:	4855      	ldr	r0, [pc, #340]	; (7ae4 <_svfprintf_r+0x9ec>)
    7990:	920c      	str	r2, [sp, #48]	; 0x30
    7992:	f1b8 0f00 	cmp.w	r8, #0
    7996:	f040 8184 	bne.w	7ca2 <_svfprintf_r+0xbaa>
    799a:	4647      	mov	r7, r8
    799c:	f04f 0800 	mov.w	r8, #0
    79a0:	f8cd 8020 	str.w	r8, [sp, #32]
    79a4:	ae28      	add	r6, sp, #160	; 0xa0
    79a6:	e706      	b.n	77b6 <_svfprintf_r+0x6be>
    79a8:	930c      	str	r3, [sp, #48]	; 0x30
    79aa:	2a00      	cmp	r2, #0
    79ac:	f040 862d 	bne.w	860a <_svfprintf_r+0x1512>
    79b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    79b2:	2a00      	cmp	r2, #0
    79b4:	f43f ac8f 	beq.w	72d6 <_svfprintf_r+0x1de>
    79b8:	2300      	movs	r3, #0
    79ba:	2101      	movs	r1, #1
    79bc:	461f      	mov	r7, r3
    79be:	9104      	str	r1, [sp, #16]
    79c0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    79c4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    79c8:	4698      	mov	r8, r3
    79ca:	930e      	str	r3, [sp, #56]	; 0x38
    79cc:	9108      	str	r1, [sp, #32]
    79ce:	ae1e      	add	r6, sp, #120	; 0x78
    79d0:	e588      	b.n	74e4 <_svfprintf_r+0x3ec>
    79d2:	f1b8 0f00 	cmp.w	r8, #0
    79d6:	f000 858b 	beq.w	84f0 <_svfprintf_r+0x13f8>
    79da:	2700      	movs	r7, #0
    79dc:	2400      	movs	r4, #0
    79de:	2500      	movs	r5, #0
    79e0:	e4ac      	b.n	733c <_svfprintf_r+0x244>
    79e2:	4840      	ldr	r0, [pc, #256]	; (7ae4 <_svfprintf_r+0x9ec>)
    79e4:	920c      	str	r2, [sp, #48]	; 0x30
    79e6:	469b      	mov	fp, r3
    79e8:	ea54 0305 	orrs.w	r3, r4, r5
    79ec:	9709      	str	r7, [sp, #36]	; 0x24
    79ee:	f04f 0700 	mov.w	r7, #0
    79f2:	f47f af16 	bne.w	7822 <_svfprintf_r+0x72a>
    79f6:	2400      	movs	r4, #0
    79f8:	2500      	movs	r5, #0
    79fa:	e712      	b.n	7822 <_svfprintf_r+0x72a>
    79fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    79fe:	e5bb      	b.n	7578 <_svfprintf_r+0x480>
    7a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7a02:	2a65      	cmp	r2, #101	; 0x65
    7a04:	f340 80a1 	ble.w	7b4a <_svfprintf_r+0xa52>
    7a08:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a10:	f040 8149 	bne.w	7ca6 <_svfprintf_r+0xbae>
    7a14:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7a16:	4934      	ldr	r1, [pc, #208]	; (7ae8 <_svfprintf_r+0x9f0>)
    7a18:	f8c9 1000 	str.w	r1, [r9]
    7a1c:	3201      	adds	r2, #1
    7a1e:	3301      	adds	r3, #1
    7a20:	2101      	movs	r1, #1
    7a22:	2a07      	cmp	r2, #7
    7a24:	931d      	str	r3, [sp, #116]	; 0x74
    7a26:	921c      	str	r2, [sp, #112]	; 0x70
    7a28:	f8c9 1004 	str.w	r1, [r9, #4]
    7a2c:	f300 8392 	bgt.w	8154 <_svfprintf_r+0x105c>
    7a30:	f109 0908 	add.w	r9, r9, #8
    7a34:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7a36:	990d      	ldr	r1, [sp, #52]	; 0x34
    7a38:	428a      	cmp	r2, r1
    7a3a:	db03      	blt.n	7a44 <_svfprintf_r+0x94c>
    7a3c:	f01b 0f01 	tst.w	fp, #1
    7a40:	f43f ae0b 	beq.w	765a <_svfprintf_r+0x562>
    7a44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7a46:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7a48:	9910      	ldr	r1, [sp, #64]	; 0x40
    7a4a:	f8c9 1000 	str.w	r1, [r9]
    7a4e:	3201      	adds	r2, #1
    7a50:	4403      	add	r3, r0
    7a52:	2a07      	cmp	r2, #7
    7a54:	931d      	str	r3, [sp, #116]	; 0x74
    7a56:	f8c9 0004 	str.w	r0, [r9, #4]
    7a5a:	921c      	str	r2, [sp, #112]	; 0x70
    7a5c:	f300 83d6 	bgt.w	820c <_svfprintf_r+0x1114>
    7a60:	f109 0908 	add.w	r9, r9, #8
    7a64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7a66:	1e54      	subs	r4, r2, #1
    7a68:	2c00      	cmp	r4, #0
    7a6a:	f77f adf6 	ble.w	765a <_svfprintf_r+0x562>
    7a6e:	2c10      	cmp	r4, #16
    7a70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7a72:	4f1e      	ldr	r7, [pc, #120]	; (7aec <_svfprintf_r+0x9f4>)
    7a74:	f340 81dc 	ble.w	7e30 <_svfprintf_r+0xd38>
    7a78:	2510      	movs	r5, #16
    7a7a:	9e05      	ldr	r6, [sp, #20]
    7a7c:	f8dd 800c 	ldr.w	r8, [sp, #12]
    7a80:	e005      	b.n	7a8e <_svfprintf_r+0x996>
    7a82:	f109 0908 	add.w	r9, r9, #8
    7a86:	3c10      	subs	r4, #16
    7a88:	2c10      	cmp	r4, #16
    7a8a:	f340 81d1 	ble.w	7e30 <_svfprintf_r+0xd38>
    7a8e:	3201      	adds	r2, #1
    7a90:	3310      	adds	r3, #16
    7a92:	2a07      	cmp	r2, #7
    7a94:	931d      	str	r3, [sp, #116]	; 0x74
    7a96:	921c      	str	r2, [sp, #112]	; 0x70
    7a98:	f8c9 7000 	str.w	r7, [r9]
    7a9c:	f8c9 5004 	str.w	r5, [r9, #4]
    7aa0:	ddef      	ble.n	7a82 <_svfprintf_r+0x98a>
    7aa2:	aa1b      	add	r2, sp, #108	; 0x6c
    7aa4:	4641      	mov	r1, r8
    7aa6:	4630      	mov	r0, r6
    7aa8:	f000 fdde 	bl	8668 <__ssprint_r>
    7aac:	2800      	cmp	r0, #0
    7aae:	f47f ac19 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7ab2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7ab4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7ab6:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7aba:	e7e4      	b.n	7a86 <_svfprintf_r+0x98e>
    7abc:	9a07      	ldr	r2, [sp, #28]
    7abe:	9904      	ldr	r1, [sp, #16]
    7ac0:	1a54      	subs	r4, r2, r1
    7ac2:	2c00      	cmp	r4, #0
    7ac4:	f77f ad7c 	ble.w	75c0 <_svfprintf_r+0x4c8>
    7ac8:	2c10      	cmp	r4, #16
    7aca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7acc:	4f07      	ldr	r7, [pc, #28]	; (7aec <_svfprintf_r+0x9f4>)
    7ace:	dd2e      	ble.n	7b2e <_svfprintf_r+0xa36>
    7ad0:	4649      	mov	r1, r9
    7ad2:	2510      	movs	r5, #16
    7ad4:	46c1      	mov	r9, r8
    7ad6:	4618      	mov	r0, r3
    7ad8:	46b0      	mov	r8, r6
    7ada:	9e05      	ldr	r6, [sp, #20]
    7adc:	e00d      	b.n	7afa <_svfprintf_r+0xa02>
    7ade:	bf00      	nop
    7ae0:	200047a8 	.word	0x200047a8
    7ae4:	200047bc 	.word	0x200047bc
    7ae8:	20004784 	.word	0x20004784
    7aec:	20004788 	.word	0x20004788
    7af0:	3c10      	subs	r4, #16
    7af2:	2c10      	cmp	r4, #16
    7af4:	f101 0108 	add.w	r1, r1, #8
    7af8:	dd15      	ble.n	7b26 <_svfprintf_r+0xa2e>
    7afa:	3201      	adds	r2, #1
    7afc:	3010      	adds	r0, #16
    7afe:	2a07      	cmp	r2, #7
    7b00:	901d      	str	r0, [sp, #116]	; 0x74
    7b02:	921c      	str	r2, [sp, #112]	; 0x70
    7b04:	600f      	str	r7, [r1, #0]
    7b06:	604d      	str	r5, [r1, #4]
    7b08:	ddf2      	ble.n	7af0 <_svfprintf_r+0x9f8>
    7b0a:	aa1b      	add	r2, sp, #108	; 0x6c
    7b0c:	9903      	ldr	r1, [sp, #12]
    7b0e:	4630      	mov	r0, r6
    7b10:	f000 fdaa 	bl	8668 <__ssprint_r>
    7b14:	2800      	cmp	r0, #0
    7b16:	f47f abe5 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7b1a:	3c10      	subs	r4, #16
    7b1c:	2c10      	cmp	r4, #16
    7b1e:	981d      	ldr	r0, [sp, #116]	; 0x74
    7b20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7b22:	a928      	add	r1, sp, #160	; 0xa0
    7b24:	dce9      	bgt.n	7afa <_svfprintf_r+0xa02>
    7b26:	4646      	mov	r6, r8
    7b28:	4603      	mov	r3, r0
    7b2a:	46c8      	mov	r8, r9
    7b2c:	4689      	mov	r9, r1
    7b2e:	3201      	adds	r2, #1
    7b30:	4423      	add	r3, r4
    7b32:	2a07      	cmp	r2, #7
    7b34:	931d      	str	r3, [sp, #116]	; 0x74
    7b36:	921c      	str	r2, [sp, #112]	; 0x70
    7b38:	f8c9 7000 	str.w	r7, [r9]
    7b3c:	f8c9 4004 	str.w	r4, [r9, #4]
    7b40:	f300 8246 	bgt.w	7fd0 <_svfprintf_r+0xed8>
    7b44:	f109 0908 	add.w	r9, r9, #8
    7b48:	e53a      	b.n	75c0 <_svfprintf_r+0x4c8>
    7b4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7b4c:	f8c9 6000 	str.w	r6, [r9]
    7b50:	2a01      	cmp	r2, #1
    7b52:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7b54:	f103 0301 	add.w	r3, r3, #1
    7b58:	f102 0201 	add.w	r2, r2, #1
    7b5c:	f04f 0101 	mov.w	r1, #1
    7b60:	931d      	str	r3, [sp, #116]	; 0x74
    7b62:	921c      	str	r2, [sp, #112]	; 0x70
    7b64:	f8c9 1004 	str.w	r1, [r9, #4]
    7b68:	f340 8210 	ble.w	7f8c <_svfprintf_r+0xe94>
    7b6c:	2a07      	cmp	r2, #7
    7b6e:	f300 8215 	bgt.w	7f9c <_svfprintf_r+0xea4>
    7b72:	f109 0908 	add.w	r9, r9, #8
    7b76:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7b78:	9910      	ldr	r1, [sp, #64]	; 0x40
    7b7a:	f8c9 1000 	str.w	r1, [r9]
    7b7e:	3201      	adds	r2, #1
    7b80:	4403      	add	r3, r0
    7b82:	2a07      	cmp	r2, #7
    7b84:	931d      	str	r3, [sp, #116]	; 0x74
    7b86:	921c      	str	r2, [sp, #112]	; 0x70
    7b88:	f8c9 0004 	str.w	r0, [r9, #4]
    7b8c:	f300 8213 	bgt.w	7fb6 <_svfprintf_r+0xebe>
    7b90:	f109 0908 	add.w	r9, r9, #8
    7b94:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7b9c:	990d      	ldr	r1, [sp, #52]	; 0x34
    7b9e:	f000 80f5 	beq.w	7d8c <_svfprintf_r+0xc94>
    7ba2:	3901      	subs	r1, #1
    7ba4:	3201      	adds	r2, #1
    7ba6:	3601      	adds	r6, #1
    7ba8:	440b      	add	r3, r1
    7baa:	2a07      	cmp	r2, #7
    7bac:	f8c9 6000 	str.w	r6, [r9]
    7bb0:	921c      	str	r2, [sp, #112]	; 0x70
    7bb2:	931d      	str	r3, [sp, #116]	; 0x74
    7bb4:	f8c9 1004 	str.w	r1, [r9, #4]
    7bb8:	f300 811d 	bgt.w	7df6 <_svfprintf_r+0xcfe>
    7bbc:	f109 0908 	add.w	r9, r9, #8
    7bc0:	9811      	ldr	r0, [sp, #68]	; 0x44
    7bc2:	f8c9 0004 	str.w	r0, [r9, #4]
    7bc6:	3201      	adds	r2, #1
    7bc8:	4403      	add	r3, r0
    7bca:	a917      	add	r1, sp, #92	; 0x5c
    7bcc:	2a07      	cmp	r2, #7
    7bce:	931d      	str	r3, [sp, #116]	; 0x74
    7bd0:	921c      	str	r2, [sp, #112]	; 0x70
    7bd2:	f8c9 1000 	str.w	r1, [r9]
    7bd6:	f77f ad3e 	ble.w	7656 <_svfprintf_r+0x55e>
    7bda:	aa1b      	add	r2, sp, #108	; 0x6c
    7bdc:	9903      	ldr	r1, [sp, #12]
    7bde:	9805      	ldr	r0, [sp, #20]
    7be0:	f000 fd42 	bl	8668 <__ssprint_r>
    7be4:	2800      	cmp	r0, #0
    7be6:	f47f ab7d 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7bea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7bec:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7bf0:	e533      	b.n	765a <_svfprintf_r+0x562>
    7bf2:	aa1b      	add	r2, sp, #108	; 0x6c
    7bf4:	9903      	ldr	r1, [sp, #12]
    7bf6:	9805      	ldr	r0, [sp, #20]
    7bf8:	f000 fd36 	bl	8668 <__ssprint_r>
    7bfc:	2800      	cmp	r0, #0
    7bfe:	f43f ad79 	beq.w	76f4 <_svfprintf_r+0x5fc>
    7c02:	f7ff bb6f 	b.w	72e4 <_svfprintf_r+0x1ec>
    7c06:	9909      	ldr	r1, [sp, #36]	; 0x24
    7c08:	f1b8 0f00 	cmp.w	r8, #0
    7c0c:	680c      	ldr	r4, [r1, #0]
    7c0e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    7c12:	f101 0704 	add.w	r7, r1, #4
    7c16:	f04f 0500 	mov.w	r5, #0
    7c1a:	f2c0 8371 	blt.w	8300 <_svfprintf_r+0x1208>
    7c1e:	ea54 0205 	orrs.w	r2, r4, r5
    7c22:	9709      	str	r7, [sp, #36]	; 0x24
    7c24:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    7c28:	461f      	mov	r7, r3
    7c2a:	f47f ac0a 	bne.w	7442 <_svfprintf_r+0x34a>
    7c2e:	f1b8 0f00 	cmp.w	r8, #0
    7c32:	f43f aeb3 	beq.w	799c <_svfprintf_r+0x8a4>
    7c36:	2400      	movs	r4, #0
    7c38:	e5b6      	b.n	77a8 <_svfprintf_r+0x6b0>
    7c3a:	aa1b      	add	r2, sp, #108	; 0x6c
    7c3c:	9903      	ldr	r1, [sp, #12]
    7c3e:	9805      	ldr	r0, [sp, #20]
    7c40:	f000 fd12 	bl	8668 <__ssprint_r>
    7c44:	2800      	cmp	r0, #0
    7c46:	f47f ab4d 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7c4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7c4c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7c50:	e4f0      	b.n	7634 <_svfprintf_r+0x53c>
    7c52:	aa1b      	add	r2, sp, #108	; 0x6c
    7c54:	9903      	ldr	r1, [sp, #12]
    7c56:	9805      	ldr	r0, [sp, #20]
    7c58:	f000 fd06 	bl	8668 <__ssprint_r>
    7c5c:	2800      	cmp	r0, #0
    7c5e:	f47f ab41 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7c62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7c64:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7c68:	e496      	b.n	7598 <_svfprintf_r+0x4a0>
    7c6a:	aa1b      	add	r2, sp, #108	; 0x6c
    7c6c:	9903      	ldr	r1, [sp, #12]
    7c6e:	9805      	ldr	r0, [sp, #20]
    7c70:	f000 fcfa 	bl	8668 <__ssprint_r>
    7c74:	2800      	cmp	r0, #0
    7c76:	f47f ab35 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7c7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7c7c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7c80:	e49a      	b.n	75b8 <_svfprintf_r+0x4c0>
    7c82:	f1b8 0f00 	cmp.w	r8, #0
    7c86:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    7c8a:	f2c0 826f 	blt.w	816c <_svfprintf_r+0x1074>
    7c8e:	ea54 0305 	orrs.w	r3, r4, r5
    7c92:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    7c96:	f47f adc4 	bne.w	7822 <_svfprintf_r+0x72a>
    7c9a:	f1b8 0f00 	cmp.w	r8, #0
    7c9e:	f43f ae7c 	beq.w	799a <_svfprintf_r+0x8a2>
    7ca2:	2700      	movs	r7, #0
    7ca4:	e6a7      	b.n	79f6 <_svfprintf_r+0x8fe>
    7ca6:	9c15      	ldr	r4, [sp, #84]	; 0x54
    7ca8:	2c00      	cmp	r4, #0
    7caa:	f340 8261 	ble.w	8170 <_svfprintf_r+0x1078>
    7cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7cb0:	990d      	ldr	r1, [sp, #52]	; 0x34
    7cb2:	428a      	cmp	r2, r1
    7cb4:	bfa8      	it	ge
    7cb6:	460a      	movge	r2, r1
    7cb8:	2a00      	cmp	r2, #0
    7cba:	4614      	mov	r4, r2
    7cbc:	dd0d      	ble.n	7cda <_svfprintf_r+0xbe2>
    7cbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7cc0:	f8c9 6000 	str.w	r6, [r9]
    7cc4:	3201      	adds	r2, #1
    7cc6:	4423      	add	r3, r4
    7cc8:	2a07      	cmp	r2, #7
    7cca:	931d      	str	r3, [sp, #116]	; 0x74
    7ccc:	f8c9 4004 	str.w	r4, [r9, #4]
    7cd0:	921c      	str	r2, [sp, #112]	; 0x70
    7cd2:	f300 8372 	bgt.w	83ba <_svfprintf_r+0x12c2>
    7cd6:	f109 0908 	add.w	r9, r9, #8
    7cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7cdc:	2c00      	cmp	r4, #0
    7cde:	bfa8      	it	ge
    7ce0:	1b12      	subge	r2, r2, r4
    7ce2:	2a00      	cmp	r2, #0
    7ce4:	4614      	mov	r4, r2
    7ce6:	f340 80f1 	ble.w	7ecc <_svfprintf_r+0xdd4>
    7cea:	2c10      	cmp	r4, #16
    7cec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7cee:	4fc1      	ldr	r7, [pc, #772]	; (7ff4 <_svfprintf_r+0xefc>)
    7cf0:	f340 8219 	ble.w	8126 <_svfprintf_r+0x102e>
    7cf4:	4649      	mov	r1, r9
    7cf6:	2510      	movs	r5, #16
    7cf8:	46b1      	mov	r9, r6
    7cfa:	f8dd 8014 	ldr.w	r8, [sp, #20]
    7cfe:	9e03      	ldr	r6, [sp, #12]
    7d00:	e004      	b.n	7d0c <_svfprintf_r+0xc14>
    7d02:	3108      	adds	r1, #8
    7d04:	3c10      	subs	r4, #16
    7d06:	2c10      	cmp	r4, #16
    7d08:	f340 820b 	ble.w	8122 <_svfprintf_r+0x102a>
    7d0c:	3201      	adds	r2, #1
    7d0e:	3310      	adds	r3, #16
    7d10:	2a07      	cmp	r2, #7
    7d12:	931d      	str	r3, [sp, #116]	; 0x74
    7d14:	921c      	str	r2, [sp, #112]	; 0x70
    7d16:	600f      	str	r7, [r1, #0]
    7d18:	604d      	str	r5, [r1, #4]
    7d1a:	ddf2      	ble.n	7d02 <_svfprintf_r+0xc0a>
    7d1c:	aa1b      	add	r2, sp, #108	; 0x6c
    7d1e:	4631      	mov	r1, r6
    7d20:	4640      	mov	r0, r8
    7d22:	f000 fca1 	bl	8668 <__ssprint_r>
    7d26:	2800      	cmp	r0, #0
    7d28:	f47f aadc 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7d2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7d2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7d30:	a928      	add	r1, sp, #160	; 0xa0
    7d32:	e7e7      	b.n	7d04 <_svfprintf_r+0xc0c>
    7d34:	aa1b      	add	r2, sp, #108	; 0x6c
    7d36:	9903      	ldr	r1, [sp, #12]
    7d38:	9805      	ldr	r0, [sp, #20]
    7d3a:	f000 fc95 	bl	8668 <__ssprint_r>
    7d3e:	2800      	cmp	r0, #0
    7d40:	f47f aad0 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7d44:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    7d48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7d4a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7d4e:	e413      	b.n	7578 <_svfprintf_r+0x480>
    7d50:	f01b 0210 	ands.w	r2, fp, #16
    7d54:	f47f af57 	bne.w	7c06 <_svfprintf_r+0xb0e>
    7d58:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    7d5c:	f43f af53 	beq.w	7c06 <_svfprintf_r+0xb0e>
    7d60:	9909      	ldr	r1, [sp, #36]	; 0x24
    7d62:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    7d66:	460b      	mov	r3, r1
    7d68:	f1b8 0f00 	cmp.w	r8, #0
    7d6c:	f103 0304 	add.w	r3, r3, #4
    7d70:	880c      	ldrh	r4, [r1, #0]
    7d72:	f04f 0500 	mov.w	r5, #0
    7d76:	f2c0 8294 	blt.w	82a2 <_svfprintf_r+0x11aa>
    7d7a:	ea54 0105 	orrs.w	r1, r4, r5
    7d7e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    7d82:	9309      	str	r3, [sp, #36]	; 0x24
    7d84:	4617      	mov	r7, r2
    7d86:	f47f ab5c 	bne.w	7442 <_svfprintf_r+0x34a>
    7d8a:	e750      	b.n	7c2e <_svfprintf_r+0xb36>
    7d8c:	1e4c      	subs	r4, r1, #1
    7d8e:	2c00      	cmp	r4, #0
    7d90:	f77f af16 	ble.w	7bc0 <_svfprintf_r+0xac8>
    7d94:	2c10      	cmp	r4, #16
    7d96:	4f97      	ldr	r7, [pc, #604]	; (7ff4 <_svfprintf_r+0xefc>)
    7d98:	dd22      	ble.n	7de0 <_svfprintf_r+0xce8>
    7d9a:	2510      	movs	r5, #16
    7d9c:	9e05      	ldr	r6, [sp, #20]
    7d9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
    7da2:	e004      	b.n	7dae <_svfprintf_r+0xcb6>
    7da4:	3c10      	subs	r4, #16
    7da6:	2c10      	cmp	r4, #16
    7da8:	f109 0908 	add.w	r9, r9, #8
    7dac:	dd18      	ble.n	7de0 <_svfprintf_r+0xce8>
    7dae:	3201      	adds	r2, #1
    7db0:	3310      	adds	r3, #16
    7db2:	2a07      	cmp	r2, #7
    7db4:	931d      	str	r3, [sp, #116]	; 0x74
    7db6:	921c      	str	r2, [sp, #112]	; 0x70
    7db8:	f8c9 7000 	str.w	r7, [r9]
    7dbc:	f8c9 5004 	str.w	r5, [r9, #4]
    7dc0:	ddf0      	ble.n	7da4 <_svfprintf_r+0xcac>
    7dc2:	aa1b      	add	r2, sp, #108	; 0x6c
    7dc4:	4641      	mov	r1, r8
    7dc6:	4630      	mov	r0, r6
    7dc8:	f000 fc4e 	bl	8668 <__ssprint_r>
    7dcc:	2800      	cmp	r0, #0
    7dce:	f47f aa89 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7dd2:	3c10      	subs	r4, #16
    7dd4:	2c10      	cmp	r4, #16
    7dd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7dd8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7dda:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7dde:	dce6      	bgt.n	7dae <_svfprintf_r+0xcb6>
    7de0:	3201      	adds	r2, #1
    7de2:	4423      	add	r3, r4
    7de4:	2a07      	cmp	r2, #7
    7de6:	931d      	str	r3, [sp, #116]	; 0x74
    7de8:	921c      	str	r2, [sp, #112]	; 0x70
    7dea:	f8c9 7000 	str.w	r7, [r9]
    7dee:	f8c9 4004 	str.w	r4, [r9, #4]
    7df2:	f77f aee3 	ble.w	7bbc <_svfprintf_r+0xac4>
    7df6:	aa1b      	add	r2, sp, #108	; 0x6c
    7df8:	9903      	ldr	r1, [sp, #12]
    7dfa:	9805      	ldr	r0, [sp, #20]
    7dfc:	f000 fc34 	bl	8668 <__ssprint_r>
    7e00:	2800      	cmp	r0, #0
    7e02:	f47f aa6f 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7e06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7e08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7e0a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7e0e:	e6d7      	b.n	7bc0 <_svfprintf_r+0xac8>
    7e10:	f01b 0f10 	tst.w	fp, #16
    7e14:	d133      	bne.n	7e7e <_svfprintf_r+0xd86>
    7e16:	f01b 0f40 	tst.w	fp, #64	; 0x40
    7e1a:	d030      	beq.n	7e7e <_svfprintf_r+0xd86>
    7e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
    7e1e:	f9b1 4000 	ldrsh.w	r4, [r1]
    7e22:	3104      	adds	r1, #4
    7e24:	17e5      	asrs	r5, r4, #31
    7e26:	4622      	mov	r2, r4
    7e28:	462b      	mov	r3, r5
    7e2a:	9109      	str	r1, [sp, #36]	; 0x24
    7e2c:	f7ff baf8 	b.w	7420 <_svfprintf_r+0x328>
    7e30:	3201      	adds	r2, #1
    7e32:	4423      	add	r3, r4
    7e34:	2a07      	cmp	r2, #7
    7e36:	931d      	str	r3, [sp, #116]	; 0x74
    7e38:	921c      	str	r2, [sp, #112]	; 0x70
    7e3a:	f8c9 7000 	str.w	r7, [r9]
    7e3e:	f8c9 4004 	str.w	r4, [r9, #4]
    7e42:	f77f ac08 	ble.w	7656 <_svfprintf_r+0x55e>
    7e46:	e6c8      	b.n	7bda <_svfprintf_r+0xae2>
    7e48:	9909      	ldr	r1, [sp, #36]	; 0x24
    7e4a:	f1b8 0f00 	cmp.w	r8, #0
    7e4e:	680c      	ldr	r4, [r1, #0]
    7e50:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    7e54:	f101 0704 	add.w	r7, r1, #4
    7e58:	f04f 0500 	mov.w	r5, #0
    7e5c:	f2c0 80c5 	blt.w	7fea <_svfprintf_r+0xef2>
    7e60:	ea54 0205 	orrs.w	r2, r4, r5
    7e64:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    7e68:	9709      	str	r7, [sp, #36]	; 0x24
    7e6a:	f43f adb2 	beq.w	79d2 <_svfprintf_r+0x8da>
    7e6e:	461f      	mov	r7, r3
    7e70:	f7ff ba64 	b.w	733c <_svfprintf_r+0x244>
    7e74:	681c      	ldr	r4, [r3, #0]
    7e76:	3304      	adds	r3, #4
    7e78:	9309      	str	r3, [sp, #36]	; 0x24
    7e7a:	2500      	movs	r5, #0
    7e7c:	e4b6      	b.n	77ec <_svfprintf_r+0x6f4>
    7e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7e80:	6814      	ldr	r4, [r2, #0]
    7e82:	4613      	mov	r3, r2
    7e84:	3304      	adds	r3, #4
    7e86:	17e5      	asrs	r5, r4, #31
    7e88:	4622      	mov	r2, r4
    7e8a:	9309      	str	r3, [sp, #36]	; 0x24
    7e8c:	2a00      	cmp	r2, #0
    7e8e:	462b      	mov	r3, r5
    7e90:	f173 0300 	sbcs.w	r3, r3, #0
    7e94:	f6bf aac9 	bge.w	742a <_svfprintf_r+0x332>
    7e98:	4264      	negs	r4, r4
    7e9a:	f04f 072d 	mov.w	r7, #45	; 0x2d
    7e9e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    7ea2:	f1b8 0f00 	cmp.w	r8, #0
    7ea6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    7eaa:	f6ff aaca 	blt.w	7442 <_svfprintf_r+0x34a>
    7eae:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    7eb2:	f7ff bac6 	b.w	7442 <_svfprintf_r+0x34a>
    7eb6:	aa1b      	add	r2, sp, #108	; 0x6c
    7eb8:	9903      	ldr	r1, [sp, #12]
    7eba:	9805      	ldr	r0, [sp, #20]
    7ebc:	f000 fbd4 	bl	8668 <__ssprint_r>
    7ec0:	2800      	cmp	r0, #0
    7ec2:	f47f aa0f 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7ec6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7ec8:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7ecc:	990e      	ldr	r1, [sp, #56]	; 0x38
    7ece:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7ed0:	4431      	add	r1, r6
    7ed2:	460d      	mov	r5, r1
    7ed4:	990d      	ldr	r1, [sp, #52]	; 0x34
    7ed6:	428a      	cmp	r2, r1
    7ed8:	db47      	blt.n	7f6a <_svfprintf_r+0xe72>
    7eda:	f01b 0f01 	tst.w	fp, #1
    7ede:	d144      	bne.n	7f6a <_svfprintf_r+0xe72>
    7ee0:	980d      	ldr	r0, [sp, #52]	; 0x34
    7ee2:	4406      	add	r6, r0
    7ee4:	1b74      	subs	r4, r6, r5
    7ee6:	1a82      	subs	r2, r0, r2
    7ee8:	4294      	cmp	r4, r2
    7eea:	bfa8      	it	ge
    7eec:	4614      	movge	r4, r2
    7eee:	2c00      	cmp	r4, #0
    7ef0:	4626      	mov	r6, r4
    7ef2:	dd0d      	ble.n	7f10 <_svfprintf_r+0xe18>
    7ef4:	991c      	ldr	r1, [sp, #112]	; 0x70
    7ef6:	f8c9 5000 	str.w	r5, [r9]
    7efa:	3101      	adds	r1, #1
    7efc:	4423      	add	r3, r4
    7efe:	2907      	cmp	r1, #7
    7f00:	931d      	str	r3, [sp, #116]	; 0x74
    7f02:	f8c9 4004 	str.w	r4, [r9, #4]
    7f06:	911c      	str	r1, [sp, #112]	; 0x70
    7f08:	f300 8280 	bgt.w	840c <_svfprintf_r+0x1314>
    7f0c:	f109 0908 	add.w	r9, r9, #8
    7f10:	2e00      	cmp	r6, #0
    7f12:	bfac      	ite	ge
    7f14:	1b94      	subge	r4, r2, r6
    7f16:	4614      	movlt	r4, r2
    7f18:	2c00      	cmp	r4, #0
    7f1a:	f77f ab9e 	ble.w	765a <_svfprintf_r+0x562>
    7f1e:	2c10      	cmp	r4, #16
    7f20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7f22:	4f34      	ldr	r7, [pc, #208]	; (7ff4 <_svfprintf_r+0xefc>)
    7f24:	dd84      	ble.n	7e30 <_svfprintf_r+0xd38>
    7f26:	2510      	movs	r5, #16
    7f28:	9e05      	ldr	r6, [sp, #20]
    7f2a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    7f2e:	e005      	b.n	7f3c <_svfprintf_r+0xe44>
    7f30:	f109 0908 	add.w	r9, r9, #8
    7f34:	3c10      	subs	r4, #16
    7f36:	2c10      	cmp	r4, #16
    7f38:	f77f af7a 	ble.w	7e30 <_svfprintf_r+0xd38>
    7f3c:	3201      	adds	r2, #1
    7f3e:	3310      	adds	r3, #16
    7f40:	2a07      	cmp	r2, #7
    7f42:	931d      	str	r3, [sp, #116]	; 0x74
    7f44:	921c      	str	r2, [sp, #112]	; 0x70
    7f46:	f8c9 7000 	str.w	r7, [r9]
    7f4a:	f8c9 5004 	str.w	r5, [r9, #4]
    7f4e:	ddef      	ble.n	7f30 <_svfprintf_r+0xe38>
    7f50:	aa1b      	add	r2, sp, #108	; 0x6c
    7f52:	4641      	mov	r1, r8
    7f54:	4630      	mov	r0, r6
    7f56:	f000 fb87 	bl	8668 <__ssprint_r>
    7f5a:	2800      	cmp	r0, #0
    7f5c:	f47f a9c2 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7f60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7f62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7f64:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7f68:	e7e4      	b.n	7f34 <_svfprintf_r+0xe3c>
    7f6a:	991c      	ldr	r1, [sp, #112]	; 0x70
    7f6c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    7f6e:	9810      	ldr	r0, [sp, #64]	; 0x40
    7f70:	f8c9 0000 	str.w	r0, [r9]
    7f74:	3101      	adds	r1, #1
    7f76:	4423      	add	r3, r4
    7f78:	2907      	cmp	r1, #7
    7f7a:	931d      	str	r3, [sp, #116]	; 0x74
    7f7c:	f8c9 4004 	str.w	r4, [r9, #4]
    7f80:	911c      	str	r1, [sp, #112]	; 0x70
    7f82:	f300 8226 	bgt.w	83d2 <_svfprintf_r+0x12da>
    7f86:	f109 0908 	add.w	r9, r9, #8
    7f8a:	e7a9      	b.n	7ee0 <_svfprintf_r+0xde8>
    7f8c:	f01b 0f01 	tst.w	fp, #1
    7f90:	f47f adec 	bne.w	7b6c <_svfprintf_r+0xa74>
    7f94:	2a07      	cmp	r2, #7
    7f96:	f77f ae11 	ble.w	7bbc <_svfprintf_r+0xac4>
    7f9a:	e72c      	b.n	7df6 <_svfprintf_r+0xcfe>
    7f9c:	aa1b      	add	r2, sp, #108	; 0x6c
    7f9e:	9903      	ldr	r1, [sp, #12]
    7fa0:	9805      	ldr	r0, [sp, #20]
    7fa2:	f000 fb61 	bl	8668 <__ssprint_r>
    7fa6:	2800      	cmp	r0, #0
    7fa8:	f47f a99c 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7fac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7fae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7fb0:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7fb4:	e5df      	b.n	7b76 <_svfprintf_r+0xa7e>
    7fb6:	aa1b      	add	r2, sp, #108	; 0x6c
    7fb8:	9903      	ldr	r1, [sp, #12]
    7fba:	9805      	ldr	r0, [sp, #20]
    7fbc:	f000 fb54 	bl	8668 <__ssprint_r>
    7fc0:	2800      	cmp	r0, #0
    7fc2:	f47f a98f 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7fc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7fc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7fca:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7fce:	e5e1      	b.n	7b94 <_svfprintf_r+0xa9c>
    7fd0:	aa1b      	add	r2, sp, #108	; 0x6c
    7fd2:	9903      	ldr	r1, [sp, #12]
    7fd4:	9805      	ldr	r0, [sp, #20]
    7fd6:	f000 fb47 	bl	8668 <__ssprint_r>
    7fda:	2800      	cmp	r0, #0
    7fdc:	f47f a982 	bne.w	72e4 <_svfprintf_r+0x1ec>
    7fe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7fe2:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    7fe6:	f7ff baeb 	b.w	75c0 <_svfprintf_r+0x4c8>
    7fea:	9709      	str	r7, [sp, #36]	; 0x24
    7fec:	2700      	movs	r7, #0
    7fee:	f7ff b9a5 	b.w	733c <_svfprintf_r+0x244>
    7ff2:	bf00      	nop
    7ff4:	20004788 	.word	0x20004788
    7ff8:	f01b 0f10 	tst.w	fp, #16
    7ffc:	d10b      	bne.n	8016 <_svfprintf_r+0xf1e>
    7ffe:	f01b 0f40 	tst.w	fp, #64	; 0x40
    8002:	d008      	beq.n	8016 <_svfprintf_r+0xf1e>
    8004:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8006:	6813      	ldr	r3, [r2, #0]
    8008:	3204      	adds	r2, #4
    800a:	9209      	str	r2, [sp, #36]	; 0x24
    800c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    8010:	801a      	strh	r2, [r3, #0]
    8012:	f7ff b897 	b.w	7144 <_svfprintf_r+0x4c>
    8016:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8018:	6813      	ldr	r3, [r2, #0]
    801a:	3204      	adds	r2, #4
    801c:	9209      	str	r2, [sp, #36]	; 0x24
    801e:	9a06      	ldr	r2, [sp, #24]
    8020:	601a      	str	r2, [r3, #0]
    8022:	f7ff b88f 	b.w	7144 <_svfprintf_r+0x4c>
    8026:	eeb4 8b48 	vcmp.f64	d8, d8
    802a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    802e:	f180 829e 	bvs.w	856e <_svfprintf_r+0x1476>
    8032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8034:	f1b8 3fff 	cmp.w	r8, #4294967295
    8038:	f023 0520 	bic.w	r5, r3, #32
    803c:	f000 8225 	beq.w	848a <_svfprintf_r+0x1392>
    8040:	2d47      	cmp	r5, #71	; 0x47
    8042:	f000 8126 	beq.w	8292 <_svfprintf_r+0x119a>
    8046:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    804a:	930a      	str	r3, [sp, #40]	; 0x28
    804c:	ee18 3a90 	vmov	r3, s17
    8050:	2b00      	cmp	r3, #0
    8052:	f2c0 821d 	blt.w	8490 <_svfprintf_r+0x1398>
    8056:	eeb0 ab48 	vmov.f64	d10, d8
    805a:	2700      	movs	r7, #0
    805c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    805e:	2b66      	cmp	r3, #102	; 0x66
    8060:	f000 8202 	beq.w	8468 <_svfprintf_r+0x1370>
    8064:	2b46      	cmp	r3, #70	; 0x46
    8066:	f000 80ec 	beq.w	8242 <_svfprintf_r+0x114a>
    806a:	eeb0 0b4a 	vmov.f64	d0, d10
    806e:	2d45      	cmp	r5, #69	; 0x45
    8070:	bf0c      	ite	eq
    8072:	f108 0401 	addeq.w	r4, r8, #1
    8076:	4644      	movne	r4, r8
    8078:	aa19      	add	r2, sp, #100	; 0x64
    807a:	ab16      	add	r3, sp, #88	; 0x58
    807c:	9201      	str	r2, [sp, #4]
    807e:	9300      	str	r3, [sp, #0]
    8080:	4622      	mov	r2, r4
    8082:	ab15      	add	r3, sp, #84	; 0x54
    8084:	2102      	movs	r1, #2
    8086:	9805      	ldr	r0, [sp, #20]
    8088:	f7fe f9f2 	bl	6470 <_dtoa_r>
    808c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    808e:	2b67      	cmp	r3, #103	; 0x67
    8090:	4606      	mov	r6, r0
    8092:	f040 820e 	bne.w	84b2 <_svfprintf_r+0x13ba>
    8096:	f01b 0f01 	tst.w	fp, #1
    809a:	f000 8266 	beq.w	856a <_svfprintf_r+0x1472>
    809e:	1931      	adds	r1, r6, r4
    80a0:	eeb5 ab40 	vcmp.f64	d10, #0.0
    80a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80a8:	f000 8185 	beq.w	83b6 <_svfprintf_r+0x12be>
    80ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
    80ae:	4299      	cmp	r1, r3
    80b0:	d906      	bls.n	80c0 <_svfprintf_r+0xfc8>
    80b2:	2030      	movs	r0, #48	; 0x30
    80b4:	1c5a      	adds	r2, r3, #1
    80b6:	9219      	str	r2, [sp, #100]	; 0x64
    80b8:	7018      	strb	r0, [r3, #0]
    80ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
    80bc:	4299      	cmp	r1, r3
    80be:	d8f9      	bhi.n	80b4 <_svfprintf_r+0xfbc>
    80c0:	1b9b      	subs	r3, r3, r6
    80c2:	2d47      	cmp	r5, #71	; 0x47
    80c4:	930d      	str	r3, [sp, #52]	; 0x34
    80c6:	f000 811f 	beq.w	8308 <_svfprintf_r+0x1210>
    80ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    80cc:	2b65      	cmp	r3, #101	; 0x65
    80ce:	f340 81ff 	ble.w	84d0 <_svfprintf_r+0x13d8>
    80d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    80d4:	2b66      	cmp	r3, #102	; 0x66
    80d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    80d8:	f000 81fc 	beq.w	84d4 <_svfprintf_r+0x13dc>
    80dc:	930e      	str	r3, [sp, #56]	; 0x38
    80de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    80e0:	990d      	ldr	r1, [sp, #52]	; 0x34
    80e2:	428a      	cmp	r2, r1
    80e4:	f2c0 81d8 	blt.w	8498 <_svfprintf_r+0x13a0>
    80e8:	f01b 0f01 	tst.w	fp, #1
    80ec:	f040 8234 	bne.w	8558 <_svfprintf_r+0x1460>
    80f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    80f4:	9208      	str	r2, [sp, #32]
    80f6:	2267      	movs	r2, #103	; 0x67
    80f8:	920c      	str	r2, [sp, #48]	; 0x30
    80fa:	2f00      	cmp	r7, #0
    80fc:	f040 80f6 	bne.w	82ec <_svfprintf_r+0x11f4>
    8100:	46b8      	mov	r8, r7
    8102:	9304      	str	r3, [sp, #16]
    8104:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    8108:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    810c:	f7ff b9e6 	b.w	74dc <_svfprintf_r+0x3e4>
    8110:	f027 0707 	bic.w	r7, r7, #7
    8114:	f107 0308 	add.w	r3, r7, #8
    8118:	ed97 8b00 	vldr	d8, [r7]
    811c:	9309      	str	r3, [sp, #36]	; 0x24
    811e:	f7ff b9be 	b.w	749e <_svfprintf_r+0x3a6>
    8122:	464e      	mov	r6, r9
    8124:	4689      	mov	r9, r1
    8126:	3201      	adds	r2, #1
    8128:	4423      	add	r3, r4
    812a:	2a07      	cmp	r2, #7
    812c:	931d      	str	r3, [sp, #116]	; 0x74
    812e:	921c      	str	r2, [sp, #112]	; 0x70
    8130:	f8c9 7000 	str.w	r7, [r9]
    8134:	f8c9 4004 	str.w	r4, [r9, #4]
    8138:	f73f aebd 	bgt.w	7eb6 <_svfprintf_r+0xdbe>
    813c:	f109 0908 	add.w	r9, r9, #8
    8140:	e6c4      	b.n	7ecc <_svfprintf_r+0xdd4>
    8142:	2700      	movs	r7, #0
    8144:	45b8      	cmp	r8, r7
    8146:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    814a:	f6ff ac54 	blt.w	79f6 <_svfprintf_r+0x8fe>
    814e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    8152:	e41e      	b.n	7992 <_svfprintf_r+0x89a>
    8154:	aa1b      	add	r2, sp, #108	; 0x6c
    8156:	9903      	ldr	r1, [sp, #12]
    8158:	9805      	ldr	r0, [sp, #20]
    815a:	f000 fa85 	bl	8668 <__ssprint_r>
    815e:	2800      	cmp	r0, #0
    8160:	f47f a8c0 	bne.w	72e4 <_svfprintf_r+0x1ec>
    8164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8166:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    816a:	e463      	b.n	7a34 <_svfprintf_r+0x93c>
    816c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    816e:	e43b      	b.n	79e8 <_svfprintf_r+0x8f0>
    8170:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    8172:	49b9      	ldr	r1, [pc, #740]	; (8458 <_svfprintf_r+0x1360>)
    8174:	f8c9 1000 	str.w	r1, [r9]
    8178:	3201      	adds	r2, #1
    817a:	3301      	adds	r3, #1
    817c:	2101      	movs	r1, #1
    817e:	2a07      	cmp	r2, #7
    8180:	931d      	str	r3, [sp, #116]	; 0x74
    8182:	921c      	str	r2, [sp, #112]	; 0x70
    8184:	f8c9 1004 	str.w	r1, [r9, #4]
    8188:	dc76      	bgt.n	8278 <_svfprintf_r+0x1180>
    818a:	f109 0908 	add.w	r9, r9, #8
    818e:	b92c      	cbnz	r4, 819c <_svfprintf_r+0x10a4>
    8190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8192:	b91a      	cbnz	r2, 819c <_svfprintf_r+0x10a4>
    8194:	f01b 0f01 	tst.w	fp, #1
    8198:	f43f aa5f 	beq.w	765a <_svfprintf_r+0x562>
    819c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    819e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    81a0:	9910      	ldr	r1, [sp, #64]	; 0x40
    81a2:	f8c9 1000 	str.w	r1, [r9]
    81a6:	3201      	adds	r2, #1
    81a8:	4403      	add	r3, r0
    81aa:	2a07      	cmp	r2, #7
    81ac:	931d      	str	r3, [sp, #116]	; 0x74
    81ae:	f8c9 0004 	str.w	r0, [r9, #4]
    81b2:	921c      	str	r2, [sp, #112]	; 0x70
    81b4:	f300 81b6 	bgt.w	8524 <_svfprintf_r+0x142c>
    81b8:	f109 0908 	add.w	r9, r9, #8
    81bc:	4264      	negs	r4, r4
    81be:	2c00      	cmp	r4, #0
    81c0:	f340 8087 	ble.w	82d2 <_svfprintf_r+0x11da>
    81c4:	2c10      	cmp	r4, #16
    81c6:	4fa5      	ldr	r7, [pc, #660]	; (845c <_svfprintf_r+0x1364>)
    81c8:	f340 8112 	ble.w	83f0 <_svfprintf_r+0x12f8>
    81cc:	4649      	mov	r1, r9
    81ce:	2510      	movs	r5, #16
    81d0:	46b1      	mov	r9, r6
    81d2:	f8dd 8014 	ldr.w	r8, [sp, #20]
    81d6:	9e03      	ldr	r6, [sp, #12]
    81d8:	e004      	b.n	81e4 <_svfprintf_r+0x10ec>
    81da:	3108      	adds	r1, #8
    81dc:	3c10      	subs	r4, #16
    81de:	2c10      	cmp	r4, #16
    81e0:	f340 8104 	ble.w	83ec <_svfprintf_r+0x12f4>
    81e4:	3201      	adds	r2, #1
    81e6:	3310      	adds	r3, #16
    81e8:	2a07      	cmp	r2, #7
    81ea:	931d      	str	r3, [sp, #116]	; 0x74
    81ec:	921c      	str	r2, [sp, #112]	; 0x70
    81ee:	600f      	str	r7, [r1, #0]
    81f0:	604d      	str	r5, [r1, #4]
    81f2:	ddf2      	ble.n	81da <_svfprintf_r+0x10e2>
    81f4:	aa1b      	add	r2, sp, #108	; 0x6c
    81f6:	4631      	mov	r1, r6
    81f8:	4640      	mov	r0, r8
    81fa:	f000 fa35 	bl	8668 <__ssprint_r>
    81fe:	2800      	cmp	r0, #0
    8200:	f47f a870 	bne.w	72e4 <_svfprintf_r+0x1ec>
    8204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8206:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    8208:	a928      	add	r1, sp, #160	; 0xa0
    820a:	e7e7      	b.n	81dc <_svfprintf_r+0x10e4>
    820c:	aa1b      	add	r2, sp, #108	; 0x6c
    820e:	9903      	ldr	r1, [sp, #12]
    8210:	9805      	ldr	r0, [sp, #20]
    8212:	f000 fa29 	bl	8668 <__ssprint_r>
    8216:	2800      	cmp	r0, #0
    8218:	f47f a864 	bne.w	72e4 <_svfprintf_r+0x1ec>
    821c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    821e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    8222:	e41f      	b.n	7a64 <_svfprintf_r+0x96c>
    8224:	2140      	movs	r1, #64	; 0x40
    8226:	9805      	ldr	r0, [sp, #20]
    8228:	f7fc fce2 	bl	4bf0 <_malloc_r>
    822c:	9a03      	ldr	r2, [sp, #12]
    822e:	6010      	str	r0, [r2, #0]
    8230:	6110      	str	r0, [r2, #16]
    8232:	2800      	cmp	r0, #0
    8234:	f000 81ed 	beq.w	8612 <_svfprintf_r+0x151a>
    8238:	9a03      	ldr	r2, [sp, #12]
    823a:	2340      	movs	r3, #64	; 0x40
    823c:	6153      	str	r3, [r2, #20]
    823e:	f7fe bf74 	b.w	712a <_svfprintf_r+0x32>
    8242:	aa19      	add	r2, sp, #100	; 0x64
    8244:	ab16      	add	r3, sp, #88	; 0x58
    8246:	9201      	str	r2, [sp, #4]
    8248:	9300      	str	r3, [sp, #0]
    824a:	4642      	mov	r2, r8
    824c:	ab15      	add	r3, sp, #84	; 0x54
    824e:	2103      	movs	r1, #3
    8250:	eeb0 0b4a 	vmov.f64	d0, d10
    8254:	9805      	ldr	r0, [sp, #20]
    8256:	f7fe f90b 	bl	6470 <_dtoa_r>
    825a:	4644      	mov	r4, r8
    825c:	4606      	mov	r6, r0
    825e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8260:	2b46      	cmp	r3, #70	; 0x46
    8262:	eb06 0104 	add.w	r1, r6, r4
    8266:	f47f af1b 	bne.w	80a0 <_svfprintf_r+0xfa8>
    826a:	7833      	ldrb	r3, [r6, #0]
    826c:	2b30      	cmp	r3, #48	; 0x30
    826e:	f000 818d 	beq.w	858c <_svfprintf_r+0x1494>
    8272:	9c15      	ldr	r4, [sp, #84]	; 0x54
    8274:	4421      	add	r1, r4
    8276:	e713      	b.n	80a0 <_svfprintf_r+0xfa8>
    8278:	aa1b      	add	r2, sp, #108	; 0x6c
    827a:	9903      	ldr	r1, [sp, #12]
    827c:	9805      	ldr	r0, [sp, #20]
    827e:	f000 f9f3 	bl	8668 <__ssprint_r>
    8282:	2800      	cmp	r0, #0
    8284:	f47f a82e 	bne.w	72e4 <_svfprintf_r+0x1ec>
    8288:	9c15      	ldr	r4, [sp, #84]	; 0x54
    828a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    828c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    8290:	e77d      	b.n	818e <_svfprintf_r+0x1096>
    8292:	f1b8 0f00 	cmp.w	r8, #0
    8296:	bf08      	it	eq
    8298:	f04f 0801 	moveq.w	r8, #1
    829c:	e6d3      	b.n	8046 <_svfprintf_r+0xf4e>
    829e:	9309      	str	r3, [sp, #36]	; 0x24
    82a0:	e6a4      	b.n	7fec <_svfprintf_r+0xef4>
    82a2:	9309      	str	r3, [sp, #36]	; 0x24
    82a4:	4617      	mov	r7, r2
    82a6:	f7ff ba7b 	b.w	77a0 <_svfprintf_r+0x6a8>
    82aa:	4630      	mov	r0, r6
    82ac:	f7fd fa28 	bl	5700 <strlen>
    82b0:	46a0      	mov	r8, r4
    82b2:	4603      	mov	r3, r0
    82b4:	9008      	str	r0, [sp, #32]
    82b6:	f7ff bb61 	b.w	797c <_svfprintf_r+0x884>
    82ba:	aa1b      	add	r2, sp, #108	; 0x6c
    82bc:	9903      	ldr	r1, [sp, #12]
    82be:	9805      	ldr	r0, [sp, #20]
    82c0:	f000 f9d2 	bl	8668 <__ssprint_r>
    82c4:	2800      	cmp	r0, #0
    82c6:	f47f a80d 	bne.w	72e4 <_svfprintf_r+0x1ec>
    82ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    82cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    82ce:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    82d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    82d4:	f8c9 6000 	str.w	r6, [r9]
    82d8:	3201      	adds	r2, #1
    82da:	4403      	add	r3, r0
    82dc:	2a07      	cmp	r2, #7
    82de:	931d      	str	r3, [sp, #116]	; 0x74
    82e0:	921c      	str	r2, [sp, #112]	; 0x70
    82e2:	f8c9 0004 	str.w	r0, [r9, #4]
    82e6:	f77f a9b6 	ble.w	7656 <_svfprintf_r+0x55e>
    82ea:	e476      	b.n	7bda <_svfprintf_r+0xae2>
    82ec:	272d      	movs	r7, #45	; 0x2d
    82ee:	9304      	str	r3, [sp, #16]
    82f0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    82f4:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    82f8:	f04f 0800 	mov.w	r8, #0
    82fc:	f7ff b8ef 	b.w	74de <_svfprintf_r+0x3e6>
    8300:	9709      	str	r7, [sp, #36]	; 0x24
    8302:	461f      	mov	r7, r3
    8304:	f7ff ba4c 	b.w	77a0 <_svfprintf_r+0x6a8>
    8308:	9b15      	ldr	r3, [sp, #84]	; 0x54
    830a:	1cda      	adds	r2, r3, #3
    830c:	db02      	blt.n	8314 <_svfprintf_r+0x121c>
    830e:	4598      	cmp	r8, r3
    8310:	f6bf aee4 	bge.w	80dc <_svfprintf_r+0xfe4>
    8314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8316:	3a02      	subs	r2, #2
    8318:	920c      	str	r2, [sp, #48]	; 0x30
    831a:	3b01      	subs	r3, #1
    831c:	2b00      	cmp	r3, #0
    831e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    8322:	9315      	str	r3, [sp, #84]	; 0x54
    8324:	bfb8      	it	lt
    8326:	425b      	neglt	r3, r3
    8328:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
    832c:	bfb4      	ite	lt
    832e:	222d      	movlt	r2, #45	; 0x2d
    8330:	222b      	movge	r2, #43	; 0x2b
    8332:	2b09      	cmp	r3, #9
    8334:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    8338:	f340 8106 	ble.w	8548 <_svfprintf_r+0x1450>
    833c:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
    8340:	4604      	mov	r4, r0
    8342:	4a47      	ldr	r2, [pc, #284]	; (8460 <_svfprintf_r+0x1368>)
    8344:	fb82 2103 	smull	r2, r1, r2, r3
    8348:	17da      	asrs	r2, r3, #31
    834a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    834e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    8352:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    8356:	f103 0130 	add.w	r1, r3, #48	; 0x30
    835a:	2a09      	cmp	r2, #9
    835c:	4613      	mov	r3, r2
    835e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    8362:	dcee      	bgt.n	8342 <_svfprintf_r+0x124a>
    8364:	4621      	mov	r1, r4
    8366:	3330      	adds	r3, #48	; 0x30
    8368:	b2da      	uxtb	r2, r3
    836a:	f801 2d01 	strb.w	r2, [r1, #-1]!
    836e:	4288      	cmp	r0, r1
    8370:	f240 8162 	bls.w	8638 <_svfprintf_r+0x1540>
    8374:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
    8378:	4623      	mov	r3, r4
    837a:	e001      	b.n	8380 <_svfprintf_r+0x1288>
    837c:	f813 2b01 	ldrb.w	r2, [r3], #1
    8380:	f801 2b01 	strb.w	r2, [r1], #1
    8384:	4298      	cmp	r0, r3
    8386:	d1f9      	bne.n	837c <_svfprintf_r+0x1284>
    8388:	1c43      	adds	r3, r0, #1
    838a:	1b1b      	subs	r3, r3, r4
    838c:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
    8390:	4413      	add	r3, r2
    8392:	aa17      	add	r2, sp, #92	; 0x5c
    8394:	1a9b      	subs	r3, r3, r2
    8396:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8398:	9311      	str	r3, [sp, #68]	; 0x44
    839a:	2a01      	cmp	r2, #1
    839c:	4413      	add	r3, r2
    839e:	9308      	str	r3, [sp, #32]
    83a0:	f340 80ff 	ble.w	85a2 <_svfprintf_r+0x14aa>
    83a4:	9b08      	ldr	r3, [sp, #32]
    83a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    83a8:	4413      	add	r3, r2
    83aa:	2200      	movs	r2, #0
    83ac:	9308      	str	r3, [sp, #32]
    83ae:	920e      	str	r2, [sp, #56]	; 0x38
    83b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    83b4:	e6a1      	b.n	80fa <_svfprintf_r+0x1002>
    83b6:	460b      	mov	r3, r1
    83b8:	e682      	b.n	80c0 <_svfprintf_r+0xfc8>
    83ba:	aa1b      	add	r2, sp, #108	; 0x6c
    83bc:	9903      	ldr	r1, [sp, #12]
    83be:	9805      	ldr	r0, [sp, #20]
    83c0:	f000 f952 	bl	8668 <__ssprint_r>
    83c4:	2800      	cmp	r0, #0
    83c6:	f47e af8d 	bne.w	72e4 <_svfprintf_r+0x1ec>
    83ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    83cc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    83d0:	e483      	b.n	7cda <_svfprintf_r+0xbe2>
    83d2:	aa1b      	add	r2, sp, #108	; 0x6c
    83d4:	9903      	ldr	r1, [sp, #12]
    83d6:	9805      	ldr	r0, [sp, #20]
    83d8:	f000 f946 	bl	8668 <__ssprint_r>
    83dc:	2800      	cmp	r0, #0
    83de:	f47e af81 	bne.w	72e4 <_svfprintf_r+0x1ec>
    83e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    83e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    83e6:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    83ea:	e579      	b.n	7ee0 <_svfprintf_r+0xde8>
    83ec:	464e      	mov	r6, r9
    83ee:	4689      	mov	r9, r1
    83f0:	3201      	adds	r2, #1
    83f2:	4423      	add	r3, r4
    83f4:	2a07      	cmp	r2, #7
    83f6:	931d      	str	r3, [sp, #116]	; 0x74
    83f8:	921c      	str	r2, [sp, #112]	; 0x70
    83fa:	f8c9 7000 	str.w	r7, [r9]
    83fe:	f8c9 4004 	str.w	r4, [r9, #4]
    8402:	f73f af5a 	bgt.w	82ba <_svfprintf_r+0x11c2>
    8406:	f109 0908 	add.w	r9, r9, #8
    840a:	e762      	b.n	82d2 <_svfprintf_r+0x11da>
    840c:	aa1b      	add	r2, sp, #108	; 0x6c
    840e:	9903      	ldr	r1, [sp, #12]
    8410:	9805      	ldr	r0, [sp, #20]
    8412:	f000 f929 	bl	8668 <__ssprint_r>
    8416:	2800      	cmp	r0, #0
    8418:	f47e af64 	bne.w	72e4 <_svfprintf_r+0x1ec>
    841c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    841e:	990d      	ldr	r1, [sp, #52]	; 0x34
    8420:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8422:	1a8a      	subs	r2, r1, r2
    8424:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    8428:	e572      	b.n	7f10 <_svfprintf_r+0xe18>
    842a:	2d06      	cmp	r5, #6
    842c:	462b      	mov	r3, r5
    842e:	bf28      	it	cs
    8430:	2306      	movcs	r3, #6
    8432:	9308      	str	r3, [sp, #32]
    8434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8438:	46b0      	mov	r8, r6
    843a:	9709      	str	r7, [sp, #36]	; 0x24
    843c:	960e      	str	r6, [sp, #56]	; 0x38
    843e:	4637      	mov	r7, r6
    8440:	9304      	str	r3, [sp, #16]
    8442:	4e08      	ldr	r6, [pc, #32]	; (8464 <_svfprintf_r+0x136c>)
    8444:	f7ff b84a 	b.w	74dc <_svfprintf_r+0x3e4>
    8448:	469b      	mov	fp, r3
    844a:	f7ff b9ea 	b.w	7822 <_svfprintf_r+0x72a>
    844e:	272d      	movs	r7, #45	; 0x2d
    8450:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    8454:	f7ff b833 	b.w	74be <_svfprintf_r+0x3c6>
    8458:	20004784 	.word	0x20004784
    845c:	20004788 	.word	0x20004788
    8460:	66666667 	.word	0x66666667
    8464:	200047d0 	.word	0x200047d0
    8468:	aa19      	add	r2, sp, #100	; 0x64
    846a:	ab16      	add	r3, sp, #88	; 0x58
    846c:	9201      	str	r2, [sp, #4]
    846e:	9300      	str	r3, [sp, #0]
    8470:	2103      	movs	r1, #3
    8472:	ab15      	add	r3, sp, #84	; 0x54
    8474:	4642      	mov	r2, r8
    8476:	eeb0 0b4a 	vmov.f64	d0, d10
    847a:	9805      	ldr	r0, [sp, #20]
    847c:	f7fd fff8 	bl	6470 <_dtoa_r>
    8480:	4644      	mov	r4, r8
    8482:	4606      	mov	r6, r0
    8484:	eb00 0108 	add.w	r1, r0, r8
    8488:	e6ef      	b.n	826a <_svfprintf_r+0x1172>
    848a:	f04f 0806 	mov.w	r8, #6
    848e:	e5da      	b.n	8046 <_svfprintf_r+0xf4e>
    8490:	eeb1 ab48 	vneg.f64	d10, d8
    8494:	272d      	movs	r7, #45	; 0x2d
    8496:	e5e1      	b.n	805c <_svfprintf_r+0xf64>
    8498:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    849a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    849c:	4413      	add	r3, r2
    849e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    84a0:	9308      	str	r3, [sp, #32]
    84a2:	2a00      	cmp	r2, #0
    84a4:	f340 8086 	ble.w	85b4 <_svfprintf_r+0x14bc>
    84a8:	2267      	movs	r2, #103	; 0x67
    84aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    84ae:	920c      	str	r2, [sp, #48]	; 0x30
    84b0:	e623      	b.n	80fa <_svfprintf_r+0x1002>
    84b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    84b4:	2b47      	cmp	r3, #71	; 0x47
    84b6:	f47f adf2 	bne.w	809e <_svfprintf_r+0xfa6>
    84ba:	f01b 0f01 	tst.w	fp, #1
    84be:	f47f aece 	bne.w	825e <_svfprintf_r+0x1166>
    84c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    84c4:	2d47      	cmp	r5, #71	; 0x47
    84c6:	eba3 0306 	sub.w	r3, r3, r6
    84ca:	930d      	str	r3, [sp, #52]	; 0x34
    84cc:	f43f af1c 	beq.w	8308 <_svfprintf_r+0x1210>
    84d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    84d2:	e722      	b.n	831a <_svfprintf_r+0x1222>
    84d4:	2b00      	cmp	r3, #0
    84d6:	461a      	mov	r2, r3
    84d8:	930e      	str	r3, [sp, #56]	; 0x38
    84da:	dd73      	ble.n	85c4 <_svfprintf_r+0x14cc>
    84dc:	f1b8 0f00 	cmp.w	r8, #0
    84e0:	d14b      	bne.n	857a <_svfprintf_r+0x1482>
    84e2:	f01b 0f01 	tst.w	fp, #1
    84e6:	d148      	bne.n	857a <_svfprintf_r+0x1482>
    84e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    84ec:	9208      	str	r2, [sp, #32]
    84ee:	e604      	b.n	80fa <_svfprintf_r+0x1002>
    84f0:	f01b 0f01 	tst.w	fp, #1
    84f4:	4647      	mov	r7, r8
    84f6:	d005      	beq.n	8504 <_svfprintf_r+0x140c>
    84f8:	ae38      	add	r6, sp, #224	; 0xe0
    84fa:	2330      	movs	r3, #48	; 0x30
    84fc:	f806 3d41 	strb.w	r3, [r6, #-65]!
    8500:	f7ff b956 	b.w	77b0 <_svfprintf_r+0x6b8>
    8504:	f8cd 8020 	str.w	r8, [sp, #32]
    8508:	ae28      	add	r6, sp, #160	; 0xa0
    850a:	f7ff b954 	b.w	77b6 <_svfprintf_r+0x6be>
    850e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    8512:	9709      	str	r7, [sp, #36]	; 0x24
    8514:	9304      	str	r3, [sp, #16]
    8516:	9508      	str	r5, [sp, #32]
    8518:	4680      	mov	r8, r0
    851a:	900e      	str	r0, [sp, #56]	; 0x38
    851c:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    8520:	f7fe bfdc 	b.w	74dc <_svfprintf_r+0x3e4>
    8524:	aa1b      	add	r2, sp, #108	; 0x6c
    8526:	9903      	ldr	r1, [sp, #12]
    8528:	9805      	ldr	r0, [sp, #20]
    852a:	f000 f89d 	bl	8668 <__ssprint_r>
    852e:	2800      	cmp	r0, #0
    8530:	f47e aed8 	bne.w	72e4 <_svfprintf_r+0x1ec>
    8534:	9c15      	ldr	r4, [sp, #84]	; 0x54
    8536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8538:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    853a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    853e:	e63d      	b.n	81bc <_svfprintf_r+0x10c4>
    8540:	46a2      	mov	sl, r4
    8542:	2500      	movs	r5, #0
    8544:	f7fe be33 	b.w	71ae <_svfprintf_r+0xb6>
    8548:	3330      	adds	r3, #48	; 0x30
    854a:	2230      	movs	r2, #48	; 0x30
    854c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    8550:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
    8554:	ab18      	add	r3, sp, #96	; 0x60
    8556:	e71c      	b.n	8392 <_svfprintf_r+0x129a>
    8558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    855a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    855c:	4413      	add	r3, r2
    855e:	2267      	movs	r2, #103	; 0x67
    8560:	9308      	str	r3, [sp, #32]
    8562:	920c      	str	r2, [sp, #48]	; 0x30
    8564:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8568:	e5c7      	b.n	80fa <_svfprintf_r+0x1002>
    856a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    856c:	e5a8      	b.n	80c0 <_svfprintf_r+0xfc8>
    856e:	4e3c      	ldr	r6, [pc, #240]	; (8660 <_svfprintf_r+0x1568>)
    8570:	4b3c      	ldr	r3, [pc, #240]	; (8664 <_svfprintf_r+0x156c>)
    8572:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    8576:	f7fe bfa4 	b.w	74c2 <_svfprintf_r+0x3ca>
    857a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    857c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    857e:	189d      	adds	r5, r3, r2
    8580:	eb05 0308 	add.w	r3, r5, r8
    8584:	9308      	str	r3, [sp, #32]
    8586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    858a:	e5b6      	b.n	80fa <_svfprintf_r+0x1002>
    858c:	eeb5 ab40 	vcmp.f64	d10, #0.0
    8590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8594:	f43f ae6d 	beq.w	8272 <_svfprintf_r+0x117a>
    8598:	f1c4 0401 	rsb	r4, r4, #1
    859c:	9415      	str	r4, [sp, #84]	; 0x54
    859e:	4421      	add	r1, r4
    85a0:	e57e      	b.n	80a0 <_svfprintf_r+0xfa8>
    85a2:	f01b 0301 	ands.w	r3, fp, #1
    85a6:	f47f aefd 	bne.w	83a4 <_svfprintf_r+0x12ac>
    85aa:	930e      	str	r3, [sp, #56]	; 0x38
    85ac:	9b08      	ldr	r3, [sp, #32]
    85ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    85b2:	e5a2      	b.n	80fa <_svfprintf_r+0x1002>
    85b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    85b6:	9a08      	ldr	r2, [sp, #32]
    85b8:	f1c3 0301 	rsb	r3, r3, #1
    85bc:	441a      	add	r2, r3
    85be:	4613      	mov	r3, r2
    85c0:	9208      	str	r2, [sp, #32]
    85c2:	e771      	b.n	84a8 <_svfprintf_r+0x13b0>
    85c4:	f1b8 0f00 	cmp.w	r8, #0
    85c8:	d102      	bne.n	85d0 <_svfprintf_r+0x14d8>
    85ca:	f01b 0f01 	tst.w	fp, #1
    85ce:	d007      	beq.n	85e0 <_svfprintf_r+0x14e8>
    85d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85d2:	1c5d      	adds	r5, r3, #1
    85d4:	eb05 0308 	add.w	r3, r5, r8
    85d8:	9308      	str	r3, [sp, #32]
    85da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    85de:	e58c      	b.n	80fa <_svfprintf_r+0x1002>
    85e0:	2301      	movs	r3, #1
    85e2:	9308      	str	r3, [sp, #32]
    85e4:	e589      	b.n	80fa <_svfprintf_r+0x1002>
    85e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    85e8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    85ec:	6805      	ldr	r5, [r0, #0]
    85ee:	3004      	adds	r0, #4
    85f0:	2d00      	cmp	r5, #0
    85f2:	9009      	str	r0, [sp, #36]	; 0x24
    85f4:	46a2      	mov	sl, r4
    85f6:	f6be add8 	bge.w	71aa <_svfprintf_r+0xb2>
    85fa:	f04f 35ff 	mov.w	r5, #4294967295
    85fe:	f7fe bdd4 	b.w	71aa <_svfprintf_r+0xb2>
    8602:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    8606:	f7ff b98d 	b.w	7924 <_svfprintf_r+0x82c>
    860a:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    860e:	f7ff b9cf 	b.w	79b0 <_svfprintf_r+0x8b8>
    8612:	9a05      	ldr	r2, [sp, #20]
    8614:	230c      	movs	r3, #12
    8616:	6013      	str	r3, [r2, #0]
    8618:	f04f 30ff 	mov.w	r0, #4294967295
    861c:	f7fe be6b 	b.w	72f6 <_svfprintf_r+0x1fe>
    8620:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    8624:	f7ff b8d4 	b.w	77d0 <_svfprintf_r+0x6d8>
    8628:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    862c:	f7ff b8a3 	b.w	7776 <_svfprintf_r+0x67e>
    8630:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    8634:	f7ff b952 	b.w	78dc <_svfprintf_r+0x7e4>
    8638:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
    863c:	e6a9      	b.n	8392 <_svfprintf_r+0x129a>
    863e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    8642:	f7fe be62 	b.w	730a <_svfprintf_r+0x212>
    8646:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    864a:	f7ff b862 	b.w	7712 <_svfprintf_r+0x61a>
    864e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    8652:	f7fe bf16 	b.w	7482 <_svfprintf_r+0x38a>
    8656:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    865a:	f7fe bed0 	b.w	73fe <_svfprintf_r+0x306>
    865e:	bf00      	nop
    8660:	200047a4 	.word	0x200047a4
    8664:	200047a0 	.word	0x200047a0

00008668 <__ssprint_r>:
    8668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    866c:	6893      	ldr	r3, [r2, #8]
    866e:	b083      	sub	sp, #12
    8670:	4690      	mov	r8, r2
    8672:	2b00      	cmp	r3, #0
    8674:	d072      	beq.n	875c <__ssprint_r+0xf4>
    8676:	4683      	mov	fp, r0
    8678:	f04f 0900 	mov.w	r9, #0
    867c:	6816      	ldr	r6, [r2, #0]
    867e:	6808      	ldr	r0, [r1, #0]
    8680:	688b      	ldr	r3, [r1, #8]
    8682:	460d      	mov	r5, r1
    8684:	464c      	mov	r4, r9
    8686:	2c00      	cmp	r4, #0
    8688:	d045      	beq.n	8716 <__ssprint_r+0xae>
    868a:	429c      	cmp	r4, r3
    868c:	461f      	mov	r7, r3
    868e:	469a      	mov	sl, r3
    8690:	d346      	bcc.n	8720 <__ssprint_r+0xb8>
    8692:	89ab      	ldrh	r3, [r5, #12]
    8694:	f413 6f90 	tst.w	r3, #1152	; 0x480
    8698:	d02d      	beq.n	86f6 <__ssprint_r+0x8e>
    869a:	696f      	ldr	r7, [r5, #20]
    869c:	6929      	ldr	r1, [r5, #16]
    869e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    86a2:	ebc1 0a00 	rsb	sl, r1, r0
    86a6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    86aa:	1c60      	adds	r0, r4, #1
    86ac:	107f      	asrs	r7, r7, #1
    86ae:	4450      	add	r0, sl
    86b0:	42b8      	cmp	r0, r7
    86b2:	463a      	mov	r2, r7
    86b4:	bf84      	itt	hi
    86b6:	4607      	movhi	r7, r0
    86b8:	463a      	movhi	r2, r7
    86ba:	055b      	lsls	r3, r3, #21
    86bc:	d533      	bpl.n	8726 <__ssprint_r+0xbe>
    86be:	4611      	mov	r1, r2
    86c0:	4658      	mov	r0, fp
    86c2:	f7fc fa95 	bl	4bf0 <_malloc_r>
    86c6:	2800      	cmp	r0, #0
    86c8:	d037      	beq.n	873a <__ssprint_r+0xd2>
    86ca:	4652      	mov	r2, sl
    86cc:	6929      	ldr	r1, [r5, #16]
    86ce:	9001      	str	r0, [sp, #4]
    86d0:	f7f9 fafc 	bl	1ccc <memcpy>
    86d4:	89aa      	ldrh	r2, [r5, #12]
    86d6:	9b01      	ldr	r3, [sp, #4]
    86d8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    86dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    86e0:	81aa      	strh	r2, [r5, #12]
    86e2:	ebca 0207 	rsb	r2, sl, r7
    86e6:	eb03 000a 	add.w	r0, r3, sl
    86ea:	616f      	str	r7, [r5, #20]
    86ec:	612b      	str	r3, [r5, #16]
    86ee:	6028      	str	r0, [r5, #0]
    86f0:	60aa      	str	r2, [r5, #8]
    86f2:	4627      	mov	r7, r4
    86f4:	46a2      	mov	sl, r4
    86f6:	4652      	mov	r2, sl
    86f8:	4649      	mov	r1, r9
    86fa:	f7fc fd47 	bl	518c <memmove>
    86fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
    8702:	68ab      	ldr	r3, [r5, #8]
    8704:	6828      	ldr	r0, [r5, #0]
    8706:	1bdb      	subs	r3, r3, r7
    8708:	4450      	add	r0, sl
    870a:	1b14      	subs	r4, r2, r4
    870c:	60ab      	str	r3, [r5, #8]
    870e:	6028      	str	r0, [r5, #0]
    8710:	f8c8 4008 	str.w	r4, [r8, #8]
    8714:	b314      	cbz	r4, 875c <__ssprint_r+0xf4>
    8716:	f8d6 9000 	ldr.w	r9, [r6]
    871a:	6874      	ldr	r4, [r6, #4]
    871c:	3608      	adds	r6, #8
    871e:	e7b2      	b.n	8686 <__ssprint_r+0x1e>
    8720:	4627      	mov	r7, r4
    8722:	46a2      	mov	sl, r4
    8724:	e7e7      	b.n	86f6 <__ssprint_r+0x8e>
    8726:	4658      	mov	r0, fp
    8728:	f7fc fde6 	bl	52f8 <_realloc_r>
    872c:	4603      	mov	r3, r0
    872e:	2800      	cmp	r0, #0
    8730:	d1d7      	bne.n	86e2 <__ssprint_r+0x7a>
    8732:	6929      	ldr	r1, [r5, #16]
    8734:	4658      	mov	r0, fp
    8736:	f7fd f947 	bl	59c8 <_free_r>
    873a:	230c      	movs	r3, #12
    873c:	f8cb 3000 	str.w	r3, [fp]
    8740:	89ab      	ldrh	r3, [r5, #12]
    8742:	2200      	movs	r2, #0
    8744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8748:	f04f 30ff 	mov.w	r0, #4294967295
    874c:	81ab      	strh	r3, [r5, #12]
    874e:	f8c8 2008 	str.w	r2, [r8, #8]
    8752:	f8c8 2004 	str.w	r2, [r8, #4]
    8756:	b003      	add	sp, #12
    8758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    875c:	2000      	movs	r0, #0
    875e:	f8c8 0004 	str.w	r0, [r8, #4]
    8762:	b003      	add	sp, #12
    8764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008768 <__aeabi_uldivmod>:
    8768:	b953      	cbnz	r3, 8780 <__aeabi_uldivmod+0x18>
    876a:	b94a      	cbnz	r2, 8780 <__aeabi_uldivmod+0x18>
    876c:	2900      	cmp	r1, #0
    876e:	bf08      	it	eq
    8770:	2800      	cmpeq	r0, #0
    8772:	bf1c      	itt	ne
    8774:	f04f 31ff 	movne.w	r1, #4294967295
    8778:	f04f 30ff 	movne.w	r0, #4294967295
    877c:	f7fc b9fa 	b.w	4b74 <__aeabi_idiv0>
    8780:	f1ad 0c08 	sub.w	ip, sp, #8
    8784:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8788:	f7fc f882 	bl	4890 <__udivmoddi4>
    878c:	f8dd e004 	ldr.w	lr, [sp, #4]
    8790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8794:	b004      	add	sp, #16
    8796:	4770      	bx	lr

00008798 <___init_veneer>:
    8798:	f85f f000 	ldr.w	pc, [pc]	; 879c <___init_veneer+0x4>
    879c:	600017b5 	.word	0x600017b5

000087a0 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
    87a0:	f85f f000 	ldr.w	pc, [pc]	; 87a4 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
    87a4:	60001609 	.word	0x60001609
	...

Disassembly of section .fini:

000087b0 <_fini>:
    87b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87b2:	bf00      	nop
