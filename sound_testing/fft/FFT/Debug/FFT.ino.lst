
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\FFT\teensy40\Debug/FFT.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 30 d9 00 00 00 00 00 00                 ...`0.......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8e1 	bl	60001300 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f93c 	bl	600013f8 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fbad 	bl	600018f0 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 fb8a 	bl	600018f8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f9c5 	bl	60001578 <usb_init>
	analog_init();
600011ee:	f000 fa71 	bl	600016d4 <analog_init>
	pwm_init();
600011f2:	f000 fb9d 	bl	60001930 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f931 	bl	6000145c <tempmon_init>

	startup_late_hook();
600011fa:	f000 fb89 	bl	60001910 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 fb7b 	bl	60001900 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 fb89 	bl	60001920 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	600019b0 	.word	0x600019b0
60001228:	00006910 	.word	0x00006910
6000122c:	20000000 	.word	0x20000000
60001230:	600082cc 	.word	0x600082cc
60001234:	20005670 	.word	0x20005670
60001238:	20005670 	.word	0x20005670
6000123c:	200092c0 	.word	0x200092c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	200077fc 	.word	0x200077fc
60001248:	00003e21 	.word	0x00003e21
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	00005429 	.word	0x00005429
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	0000552d 	.word	0x0000552d
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	200072fc 	.word	0x200072fc
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20007304 	.word	0x20007304
60001298:	20007800 	.word	0x20007800
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <set_audioClock(int, long, unsigned long, bool)>:
#if defined(__IMXRT1052__) || defined(__IMXRT1062__)
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
600012a4:	b410      	push	{r4}
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
600012a6:	b91b      	cbnz	r3, 600012b0 <set_audioClock(int, long, unsigned long, bool)+0xc>
600012a8:	4b13      	ldr	r3, [pc, #76]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
600012ac:	049b      	lsls	r3, r3, #18
600012ae:	d420      	bmi.n	600012f2 <set_audioClock(int, long, unsigned long, bool)+0x4e>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
600012b4:	4b10      	ldr	r3, [pc, #64]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012b6:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012ba:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012be:	f440 1089 	orr.w	r0, r0, #1122304	; 0x112000

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012c2:	461c      	mov	r4, r3
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012c4:	6718      	str	r0, [r3, #112]	; 0x70

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012c6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600012ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
600012d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
600012d4:	671a      	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
600012d8:	4a07      	ldr	r2, [pc, #28]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012da:	2b00      	cmp	r3, #0
600012dc:	dafb      	bge.n	600012d6 <set_audioClock(int, long, unsigned long, bool)+0x32>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600012de:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
600012e2:	4b06      	ldr	r3, [pc, #24]	; (600012fc <set_audioClock(int, long, unsigned long, bool)+0x58>)
600012e4:	400b      	ands	r3, r1
600012e6:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600012ea:	6f13      	ldr	r3, [r2, #112]	; 0x70
600012ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
600012f0:	6713      	str	r3, [r2, #112]	; 0x70
}
600012f2:	f85d 4b04 	ldr.w	r4, [sp], #4
600012f6:	4770      	bx	lr
600012f8:	400d8000 	.word	0x400d8000
600012fc:	ff7f7fff 	.word	0xff7f7fff

60001300 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001300:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001302:	4a28      	ldr	r2, [pc, #160]	; (600013a4 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001304:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001306:	4b28      	ldr	r3, [pc, #160]	; (600013a8 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001308:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000130c:	4c27      	ldr	r4, [pc, #156]	; (600013ac <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000130e:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001310:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 600013ec <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001314:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001316:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001318:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000131a:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000131e:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001322:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001324:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 600013f0 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001328:	4f21      	ldr	r7, [pc, #132]	; (600013b0 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000132a:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000132e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001330:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001332:	4e20      	ldr	r6, [pc, #128]	; (600013b4 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001334:	4f20      	ldr	r7, [pc, #128]	; (600013b8 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001336:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001338:	4920      	ldr	r1, [pc, #128]	; (600013bc <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000133a:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000133c:	4e20      	ldr	r6, [pc, #128]	; (600013c0 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000133e:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001342:	4f20      	ldr	r7, [pc, #128]	; (600013c4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001344:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001346:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001348:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000134c:	4e1e      	ldr	r6, [pc, #120]	; (600013c8 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000134e:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001350:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001352:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001354:	f8df e09c 	ldr.w	lr, [pc, #156]	; 600013f4 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001358:	4e1c      	ldr	r6, [pc, #112]	; (600013cc <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000135a:	491d      	ldr	r1, [pc, #116]	; (600013d0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000135c:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001360:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001362:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001364:	4f1b      	ldr	r7, [pc, #108]	; (600013d4 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001366:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001368:	4e1b      	ldr	r6, [pc, #108]	; (600013d8 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000136a:	491c      	ldr	r1, [pc, #112]	; (600013dc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000136c:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000136e:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001370:	4f1b      	ldr	r7, [pc, #108]	; (600013e0 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001372:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001374:	4e1b      	ldr	r6, [pc, #108]	; (600013e4 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001376:	491c      	ldr	r1, [pc, #112]	; (600013e8 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001378:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000137a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000137c:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000137e:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001380:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001384:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001388:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
6000138c:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001390:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001394:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001398:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
6000139c:	f842 3c88 	str.w	r3, [r2, #-136]
600013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
600013a2:	bf00      	nop
600013a4:	e000ed9c 	.word	0xe000ed9c
600013a8:	e000eda0 	.word	0xe000eda0
600013ac:	e000ed94 	.word	0xe000ed94
600013b0:	00100009 	.word	0x00100009
600013b4:	00200013 	.word	0x00200013
600013b8:	07020021 	.word	0x07020021
600013bc:	200092c0 	.word	0x200092c0
600013c0:	20000014 	.word	0x20000014
600013c4:	13080025 	.word	0x13080025
600013c8:	10000009 	.word	0x10000009
600013cc:	40000017 	.word	0x40000017
600013d0:	13100033 	.word	0x13100033
600013d4:	60000018 	.word	0x60000018
600013d8:	070b002f 	.word	0x070b002f
600013dc:	70000019 	.word	0x70000019
600013e0:	170b0037 	.word	0x170b0037
600013e4:	7000001a 	.word	0x7000001a
600013e8:	130b002f 	.word	0x130b002f
600013ec:	1000003f 	.word	0x1000003f
600013f0:	03080025 	.word	0x03080025
600013f4:	20200016 	.word	0x20200016

600013f8 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
600013f8:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013fa:	4a17      	ldr	r2, [pc, #92]	; (60001458 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013fc:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001402:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001406:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000140a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140e:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001412:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001414:	f013 0f02 	tst.w	r3, #2
60001418:	d006      	beq.n	60001428 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000141a:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000141c:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141e:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001420:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001422:	f013 0f02 	tst.w	r3, #2
60001426:	d1f8      	bne.n	6000141a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001428:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000142c:	d101      	bne.n	60001432 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142e:	6155      	str	r5, [r2, #20]
			continue;
60001430:	e7ef      	b.n	60001412 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001432:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001436:	d101      	bne.n	6000143c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001438:	6156      	str	r6, [r2, #20]
			continue;
6000143a:	e7ea      	b.n	60001412 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000143c:	2b00      	cmp	r3, #0
6000143e:	dae8      	bge.n	60001412 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001440:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001444:	d001      	beq.n	6000144a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001446:	6191      	str	r1, [r2, #24]
			continue;
60001448:	e7e3      	b.n	60001412 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000144a:	065b      	lsls	r3, r3, #25
6000144c:	d401      	bmi.n	60001452 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144e:	6157      	str	r7, [r2, #20]
			continue;
60001450:	e7df      	b.n	60001412 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001452:	bcf0      	pop	{r4, r5, r6, r7}
60001454:	4770      	bx	lr
60001456:	bf00      	nop
60001458:	400d8000 	.word	0x400d8000

6000145c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000145c:	4a3b      	ldr	r2, [pc, #236]	; (6000154c <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001462:	493b      	ldr	r1, [pc, #236]	; (60001550 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001464:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001466:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001468:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000146a:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000146e:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001470:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001574 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001474:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001476:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000147a:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000147e:	4f35      	ldr	r7, [pc, #212]	; (60001554 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001480:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001482:	f3c3 240b 	ubfx	r4, r3, #8, #12
60001486:	4e34      	ldr	r6, [pc, #208]	; (60001558 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001488:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000148c:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001490:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001494:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000149c:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014a0:	ee07 4a90 	vmov	s15, r4
600014a4:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014a8:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014aa:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ae:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b2:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014b6:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b8:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c0:	4d26      	ldr	r5, [pc, #152]	; (6000155c <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c2:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c6:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c8:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d0:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014d2:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600014d6:	4e22      	ldr	r6, [pc, #136]	; (60001560 <tempmon_init+0x104>)
600014d8:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014da:	4922      	ldr	r1, [pc, #136]	; (60001564 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014dc:	4c22      	ldr	r4, [pc, #136]	; (60001568 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014de:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014e2:	ee07 3a90 	vmov	s15, r3
600014e6:	4b21      	ldr	r3, [pc, #132]	; (6000156c <tempmon_init+0x110>)
600014e8:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
600014ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
600014f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f4:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014f8:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014fc:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001500:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001504:	ee15 3a90 	vmov	r3, s11
60001508:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000150c:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001510:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001514:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001516:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000151a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000151e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001522:	430b      	orrs	r3, r1
60001524:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001528:	ee17 3a90 	vmov	r3, s15
6000152c:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001530:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001534:	430b      	orrs	r3, r1
60001536:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000153a:	6813      	ldr	r3, [r2, #0]
6000153c:	f043 0302 	orr.w	r3, r3, #2
60001540:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001542:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001544:	4b0a      	ldr	r3, [pc, #40]	; (60001570 <tempmon_init+0x114>)
60001546:	2201      	movs	r2, #1
60001548:	601a      	str	r2, [r3, #0]
6000154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000154c:	400d8180 	.word	0x400d8180
60001550:	401f4400 	.word	0x401f4400
60001554:	20007310 	.word	0x20007310
60001558:	20007314 	.word	0x20007314
6000155c:	2000730c 	.word	0x2000730c
60001560:	20007800 	.word	0x20007800
60001564:	0fff0000 	.word	0x0fff0000
60001568:	e000e440 	.word	0xe000e440
6000156c:	00003f01 	.word	0x00003f01
60001570:	e000e108 	.word	0xe000e108
60001574:	20007308 	.word	0x20007308

60001578 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001578:	4b30      	ldr	r3, [pc, #192]	; (6000163c <usb_init+0xc4>)
6000157a:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000157e:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001580:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001584:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001588:	f000 f9c6 	bl	60001918 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000158c:	492c      	ldr	r1, [pc, #176]	; (60001640 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000158e:	482d      	ldr	r0, [pc, #180]	; (60001644 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001590:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001594:	4c2c      	ldr	r4, [pc, #176]	; (60001648 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001596:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000159a:	4b2c      	ldr	r3, [pc, #176]	; (6000164c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000159c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600015a0:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600015a4:	6822      	ldr	r2, [r4, #0]
600015a6:	4013      	ands	r3, r2
600015a8:	b91b      	cbnz	r3, 600015b2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600015aa:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600015ae:	079a      	lsls	r2, r3, #30
600015b0:	d01a      	beq.n	600015e8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015b2:	4b24      	ldr	r3, [pc, #144]	; (60001644 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600015b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600015b8:	4a23      	ldr	r2, [pc, #140]	; (60001648 <usb_init+0xd0>)
600015ba:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015bc:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015be:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600015c2:	f041 0102 	orr.w	r1, r1, #2
600015c6:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015ca:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600015ce:	079b      	lsls	r3, r3, #30
600015d0:	d4fb      	bmi.n	600015ca <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600015d6:	491e      	ldr	r1, [pc, #120]	; (60001650 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015d8:	4b1b      	ldr	r3, [pc, #108]	; (60001648 <usb_init+0xd0>)
600015da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015de:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015e0:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015e2:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015e4:	f000 f990 	bl	60001908 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015e8:	4d1a      	ldr	r5, [pc, #104]	; (60001654 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015ea:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015ec:	4b16      	ldr	r3, [pc, #88]	; (60001648 <usb_init+0xd0>)
600015ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015f2:	4c14      	ldr	r4, [pc, #80]	; (60001644 <usb_init+0xcc>)
600015f4:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015f6:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f8:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015fa:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015fc:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015fe:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001602:	f44f 7220 	mov.w	r2, #640	; 0x280
60001606:	f000 f98f 	bl	60001928 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000160a:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000160e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001612:	f240 1343 	movw	r3, #323	; 0x143
60001616:	4a10      	ldr	r2, [pc, #64]	; (60001658 <usb_init+0xe0>)
60001618:	4910      	ldr	r1, [pc, #64]	; (6000165c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000161a:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000161c:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000161e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001622:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001626:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000162a:	4a0d      	ldr	r2, [pc, #52]	; (60001660 <usb_init+0xe8>)
6000162c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001630:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001632:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001634:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001638:	bd70      	pop	{r4, r5, r6, pc}
6000163a:	bf00      	nop
6000163c:	400d8000 	.word	0x400d8000
60001640:	400fc000 	.word	0x400fc000
60001644:	402e0000 	.word	0x402e0000
60001648:	400d9000 	.word	0x400d9000
6000164c:	001e1c00 	.word	0x001e1c00
60001650:	e000e28c 	.word	0xe000e28c
60001654:	20009000 	.word	0x20009000
60001658:	20007800 	.word	0x20007800
6000165c:	0000406d 	.word	0x0000406d
60001660:	e000e10c 	.word	0xe000e10c

60001664 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
FLASHMEM void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
60001664:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
60001668:	b4f0      	push	{r4, r5, r6, r7}
6000166a:	bf28      	it	cs
6000166c:	f44f 7160 	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
60001670:	b672      	cpsid	i
	memory_pool = data;
	memory_pool_first_mask = 0;
60001672:	2500      	movs	r5, #0
60001674:	4b13      	ldr	r3, [pc, #76]	; (600016c4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
60001676:	4f14      	ldr	r7, [pc, #80]	; (600016c8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)
	memory_pool_first_mask = 0;
60001678:	4e14      	ldr	r6, [pc, #80]	; (600016cc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000167a:	462c      	mov	r4, r5
6000167c:	f103 0270 	add.w	r2, r3, #112	; 0x70

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
60001680:	6038      	str	r0, [r7, #0]
	memory_pool_first_mask = 0;
60001682:	8035      	strh	r5, [r6, #0]
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001684:	f843 4f04 	str.w	r4, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
60001688:	4293      	cmp	r3, r2
6000168a:	d1fb      	bne.n	60001684 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x20>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
6000168c:	b1b9      	cbz	r1, 600016be <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5a>
6000168e:	2300      	movs	r3, #0
60001690:	4e0f      	ldr	r6, [pc, #60]	; (600016d0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001692:	2701      	movs	r7, #1
60001694:	095d      	lsrs	r5, r3, #5
60001696:	f003 041f 	and.w	r4, r3, #31
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
6000169a:	3301      	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000169c:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
600016a0:	fa07 f404 	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600016a4:	428b      	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600016a6:	ea42 0204 	orr.w	r2, r2, r4
600016aa:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600016ae:	d1f1      	bne.n	60001694 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x30>
600016b0:	2300      	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
600016b2:	8043      	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
600016b4:	3301      	adds	r3, #1
600016b6:	f500 7082 	add.w	r0, r0, #260	; 0x104
600016ba:	428b      	cmp	r3, r1
600016bc:	d1f9      	bne.n	600016b2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4e>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
600016be:	b662      	cpsie	i

}
600016c0:	bcf0      	pop	{r4, r5, r6, r7}
600016c2:	4770      	bx	lr
600016c4:	20007544 	.word	0x20007544
600016c8:	200075b8 	.word	0x200075b8
600016cc:	200075be 	.word	0x200075be
600016d0:	20007548 	.word	0x20007548

600016d4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016d4:	4b11      	ldr	r3, [pc, #68]	; (6000171c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016d6:	4912      	ldr	r1, [pc, #72]	; (60001720 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016d8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600016da:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016dc:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600016e0:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016e2:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016e4:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600016e8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600016ea:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600016ec:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600016f0:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016f2:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600016f4:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600016f6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016f8:	061b      	lsls	r3, r3, #24
600016fa:	d4fc      	bmi.n	600016f6 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016fc:	4b09      	ldr	r3, [pc, #36]	; (60001724 <analog_init+0x50>)
600016fe:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001702:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001704:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001706:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001708:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000170a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000170c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001710:	d1fb      	bne.n	6000170a <analog_init+0x36>
	calibrating = 0;
60001712:	4a05      	ldr	r2, [pc, #20]	; (60001728 <analog_init+0x54>)
60001714:	7013      	strb	r3, [r2, #0]
}
60001716:	bc30      	pop	{r4, r5}
60001718:	4770      	bx	lr
6000171a:	bf00      	nop
6000171c:	400fc000 	.word	0x400fc000
60001720:	400c4000 	.word	0x400c4000
60001724:	400c8000 	.word	0x400c8000
60001728:	200075e5 	.word	0x200075e5

6000172c <Orange_to_Purple_gp>:
6000172c:	0132d000 2d1b927f b20c61ff              ..2....-.a..

60001738 <TwoWire::i2c4_hardware>:
60001738:	400fc080 03000000 00000019 00000010     ...@............
60001748:	401f84e8 00000001 000000ff 000000ff     ...@............
	...
60001760:	00000018 00000010 401f84e4 00000001     ...........@....
60001770:	000000ff 000000ff 00000000 00000000     ................
60001780:	0000001f                                ....

60001784 <TwoWire::i2c3_hardware>:
60001784:	400fc070 00000c00 00000011 00000011     p..@............
60001794:	401f84e0 00000002 00000024 00000012     ...@....$.......
600017a4:	401f84e0 00000001 00000010 00000011     ...@............
600017b4:	401f84dc 00000002 00000025 00000012     ...@....%.......
600017c4:	401f84dc 00000001 0000001e              ...@........

600017d0 <TwoWire::i2c1_hardware>:
600017d0:	400fc070 000000c0 00000012 00000013     p..@............
600017e0:	401f84d0 00000001 000000ff 000000ff     ...@............
	...
600017f8:	00000013 00000013 401f84cc 00000001     ...........@....
60001808:	000000ff 000000ff 00000000 00000000     ................
60001818:	0000001c                                ....

6000181c <usb_string_product_name_default>:
6000181c:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
6000182c:	00610069 0000006c                       i.a.l...

60001834 <usb_string_manufacturer_name_default>:
60001834:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001844:	00690075 006f006e                       u.i.n.o.

6000184c <string0>:
6000184c:	04090304                                ....

60001850 <usb_config_descriptor_12>:
60001850:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001860:	24050001 05011000 01010124 06022404     ...$....$....$..
60001870:	00062405 82050701 10001003 00010409     .$..............
60001880:	00000a02 03050700 00004002 02840507     .........@......
60001890:	00000040                                @...

60001894 <usb_config_descriptor_480>:
60001894:	00430209 c0000102 00040932 02020100     ..C.....2.......
600018a4:	24050001 05011000 01010124 06022404     ...$....$....$..
600018b4:	00062405 82050701 05001003 00010409     .$..............
600018c4:	00000a02 03050700 00020002 02840507     ................
600018d4:	00000200                                ....

600018d8 <qualifier_descriptor>:
600018d8:	0200060a 40000002 ffff0001              .......@....

600018e4 <_init>:
600018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600018e6:	bf00      	nop
600018e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
600018ea:	bc08      	pop	{r3}
600018ec:	469e      	mov	lr, r3
600018ee:	4770      	bx	lr

600018f0 <__set_arm_clock_veneer>:
600018f0:	f85f f000 	ldr.w	pc, [pc]	; 600018f4 <__set_arm_clock_veneer+0x4>
600018f4:	0000371d 	.word	0x0000371d

600018f8 <__startup_early_hook_veneer>:
600018f8:	f85f f000 	ldr.w	pc, [pc]	; 600018fc <__startup_early_hook_veneer+0x4>
600018fc:	00003e39 	.word	0x00003e39

60001900 <____libc_init_array_veneer>:
60001900:	f85f f000 	ldr.w	pc, [pc]	; 60001904 <____libc_init_array_veneer+0x4>
60001904:	00005f45 	.word	0x00005f45

60001908 <__delay_veneer>:
60001908:	f85f f000 	ldr.w	pc, [pc]	; 6000190c <__delay_veneer+0x4>
6000190c:	000039e1 	.word	0x000039e1

60001910 <__startup_late_hook_veneer>:
60001910:	f85f f000 	ldr.w	pc, [pc]	; 60001914 <__startup_late_hook_veneer+0x4>
60001914:	00003e3d 	.word	0x00003e3d

60001918 <__usb_init_serialnumber_veneer>:
60001918:	f85f f000 	ldr.w	pc, [pc]	; 6000191c <__usb_init_serialnumber_veneer+0x4>
6000191c:	00004825 	.word	0x00004825

60001920 <__main_veneer>:
60001920:	f85f f000 	ldr.w	pc, [pc]	; 60001924 <__main_veneer+0x4>
60001924:	0000554d 	.word	0x0000554d

60001928 <__memset_veneer>:
60001928:	f85f f000 	ldr.w	pc, [pc]	; 6000192c <__memset_veneer+0x4>
6000192c:	00006515 	.word	0x00006515

60001930 <__pwm_init_veneer>:
60001930:	f85f f000 	ldr.w	pc, [pc]	; 60001934 <__pwm_init_veneer+0x4>
60001934:	00003b69 	.word	0x00003b69

60001938 <__init_array_start>:
60001938:	00000045 	.word	0x00000045
6000193c:	00000be1 	.word	0x00000be1
60001940:	00000fd9 	.word	0x00000fd9
60001944:	00001311 	.word	0x00001311
60001948:	000015d5 	.word	0x000015d5
6000194c:	00001815 	.word	0x00001815
60001950:	0000182d 	.word	0x0000182d
60001954:	00001845 	.word	0x00001845
60001958:	0000185d 	.word	0x0000185d
6000195c:	00001875 	.word	0x00001875
60001960:	0000188d 	.word	0x0000188d
60001964:	000018a5 	.word	0x000018a5
60001968:	000018bd 	.word	0x000018bd
6000196c:	00001c71 	.word	0x00001c71
60001970:	00001c89 	.word	0x00001c89
60001974:	00001ca1 	.word	0x00001ca1
60001978:	00001cb9 	.word	0x00001cb9
6000197c:	00001cd1 	.word	0x00001cd1
60001980:	00001ce9 	.word	0x00001ce9
60001984:	00001d01 	.word	0x00001d01
60001988:	00001d19 	.word	0x00001d19
6000198c:	00001d31 	.word	0x00001d31
60001990:	00001d49 	.word	0x00001d49
60001994:	00001d61 	.word	0x00001d61
60001998:	00001d79 	.word	0x00001d79
6000199c:	00001d91 	.word	0x00001d91
600019a0:	00002131 	.word	0x00002131
600019a4:	000027f1 	.word	0x000027f1
600019a8:	000035d1 	.word	0x000035d1

600019ac <__init_array_end>:
600019ac:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
		if (p) memcpy(p->data, in->data, sizeof(p->data));
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
      26:	b933      	.short	0xb933
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
		in->ref_count--;
      30:	8000      	strh	r0, [r0, #0]

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
      32:	2301      	.short	0x2301
		if (p) memcpy(p->data, in->data, sizeof(p->data));
		in->ref_count--;
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	.short	0xbd10
      38:	5670      	ldrsb	r0, [r6, r1]
      3a:	2000      	.short	0x2000
		in = p;
	}
	return in;
}
      3c:	0000      	movs	r0, r0
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
      3e:	0000      	movs	r0, r0
      40:	6914      	ldr	r4, [r2, #16]
	...

00000044 <frame_dummy>:
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
}
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	4010e8bd 	.word	0x4010e8bd
      64:	4718      	bx	r3
      66:	bf00      	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	00000000 	.word	0x00000000
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	5674      	ldrsb	r4, [r6, r1]
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	6914      	ldr	r4, [r2, #16]
  ADC2_CFG = mode1;
      72:	0000      	.short	0x0000
  
  if(num >= 4){
      74:	5670      	ldrsb	r0, [r6, r1]
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	00000000 	.word	0x00000000

0000007c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
      7c:	6940      	ldr	r0, [r0, #20]
      7e:	4770      	.short	0x4770

00000080 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
      80:	2000      	movs	r0, #0
      82:	4770      	bx	lr

00000084 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
      84:	6842      	ldr	r2, [r0, #4]
      86:	68c1      	ldr	r1, [r0, #12]
      88:	6813      	ldr	r3, [r2, #0]
      8a:	430b      	orrs	r3, r1
      8c:	6013      	str	r3, [r2, #0]
      8e:	4770      	bx	lr

00000090 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
      90:	6842      	ldr	r2, [r0, #4]
      92:	68c1      	.short	0x68c1
      94:	6813      	ldr	r3, [r2, #0]
      96:	ea23 0301 	bic.w	r3, r3, r1
      9a:	6013      	.short	0x6013
      9c:	4770      	bx	lr

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      9e:	bf00      	nop

000000a0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::init()>:

	// set the object representing the selectable -- ignore for now
	void setSelect(Selectable *pSelect) { /* TODO */ }

	// initialize the SPI subssytem
	void init() { _SPIObject.begin(); }
      a0:	4801      	ldr	r0, [pc, #4]	; (a8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::init()+0x8>)
      a2:	f001      	.short	0xf001
      a4:	bf25      	ittet	cs
      a6:	bf00      	.short	0xbf00
      a8:	4d18      	ldr	r5, [pc, #96]	; (10c <CLEDController::clearLeds(int)+0x54>)
      aa:	2000      	.short	0x2000

000000ac <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
      ac:	b510      	push	{r4, lr}
      ae:	4604      	movcs	r4, r0
		disconnect();
      b0:	f890f005 	.word	0xf890f005
	}
      b4:	4620      	mov	r0, r4
      b6:	bd10      	.short	0xbd10

000000b8 <CLEDController::clearLeds(int)>:
      b8:	b5f0      	push	{r4, r5, r6, r7, lr}
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
      ba:	2300      	.short	0x2300
    br = 0;
      bc:	b08b      	sub	sp, #44	; 0x2c
    lastframe = millis();
      be:	6805      	.short	0x6805
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
      c0:	4a3b      	ldr	r2, [pc, #236]	; (1b0 <CLEDController::clearLeds(int)+0xf8>)
      c2:	f88d      	.short	0xf88d
      c4:	3004      	adds	r0, #4
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
      c6:	f88d 3005 	strbcs.w	r3, [sp, #5]
      ca:	f88d 3006 	strbcc.w	r3, [sp, #6]
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
      ce:	682e      	ldrcs	r6, [r5, #0]
      d0:	f88d 3008 	strb.w	r3, [sp, #8]
      d4:	f88d4296 	.word	0xf88d4296
      d8:	3009      	adds	r0, #9
      da:	f88d      	.short	0xf88d
      dc:	300a      	adds	r0, #10
      de:	d160      	.short	0xd160
      e0:	4604      	mov	r4, r0
      e2:	a801      	.short	0xa801
      e4:	9104      	str	r1, [sp, #16]
      e6:	7ca2      	.short	0x7ca2
      e8:	9105      	str	r1, [sp, #20]
      ea:	2a01      	.short	0x2a01
      ec:	f88d 301e 	strb.w	r3, [sp, #30]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
      f0:	301ff88d 	.word	0x301ff88d
        b = rhs.b;
      f4:	f88d 3020 	strb.w	r3, [sp, #32]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
      f8:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
      fa:	d015      	.short	0xd015
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
      fc:	f88d 301d 	strb.w	r3, [sp, #29]
     100:	301cf88d 	.word	0x301cf88d
     104:	f88d 301b 	strb.w	r3, [sp, #27]
     108:	301af88d 	.word	0x301af88d
     10c:	f88d 3019 	strb.w	r3, [sp, #25]
     110:	3018f88d 	.word	0x3018f88d
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     114:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     116:	69aa      	.short	0x69aa
     118:	4620      	mov	r0, r4
     11a:	a903      	add	r1, sp, #12
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     11c:	3021f88d 	.word	0x3021f88d
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     120:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     122:	4790      	.short	0x4790

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     124:	b00b      	add	sp, #44	; 0x2c
     126:	bdf0      	.short	0xbdf0
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     128:	4a22      	ldr	r2, [pc, #136]	; (1b4 <CLEDController::clearLeds(int)+0xfc>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     12a:	7813      	.short	0x7813
     12c:	3301      	adds	r3, #1
     12e:	f003      	.short	0xf003
     130:	0307      	lsls	r7, r0, #12

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     132:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     136:	7013      	.short	0x7013

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     138:	bf14      	ite	ne
     13a:	2180      	.short	0x2180
     13c:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     13e:	079a      	lsls	r2, r3, #30
     140:	f041d502 	.word	0xf041d502
     144:	0140      	lsls	r0, r0, #5
     146:	b2c9      	.short	0xb2c9
                if(R & 0x04) { Q |= 0x20; }
     148:	075b      	lsls	r3, r3, #29
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     14a:	f04f      	.short	0xf04f
     14c:	0200      	lsls	r0, r0, #8
     14e:	f10d      	.short	0xf10d
     150:	031b      	lsls	r3, r3, #12
     152:	f10d      	.short	0xf10d
     154:	071e      	lsls	r6, r3, #28

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     156:	bf48      	.short	0xbf48
     158:	f041 0120 	orrmi.w	r1, r1, #32
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     15c:	f44f 7e80 	mov.w	lr, #256	; 0x100
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     160:	b2c93110 	.word	0xb2c93110
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     164:	b1aa      	cbz	r2, 192 <CLEDController::clearLeds(int)+0xda>
     166:	fb9e      	.short	0xfb9e
     168:	f2f2 b2d2 	b.w	6f2710 <_flashimagelen+0x6e4de0>
     16c:	1c50      	adds	r0, r2, #1
     16e:	b2c0      	.short	0xb2c0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     170:	fb00 1501 	mla	r5, r0, r1, r1
     174:	122d7018 	.word	0x122d7018
     178:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     17a:	b105      	cbz	r5, 17e <CLEDController::clearLeds(int)+0xc6>
     17c:	3e01      	subs	r6, #1
     17e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     182:	b100      	.short	0xb100
     184:	701a      	strb	r2, [r3, #0]
     186:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     188:	d008429f 	.word	0xd008429f
     18c:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     18e:	2a00      	.short	0x2a00
     190:	d1e9      	bne.n	166 <CLEDController::clearLeds(int)+0xae>
     192:	701a      	.short	0x701a
     194:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
     196:	f803      	.short	0xf803
     198:	2c04      	cmp	r4, #4
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     19a:	429f      	cmp	r7, r3
     19c:	6825d1f6 	.word	0x6825d1f6
     1a0:	e7b8      	b.n	114 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     1a2:	460a      	.short	0x460a
     1a4:	ab02      	add	r3, sp, #8
     1a6:	a901      	.short	0xa901
     1a8:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     1aa:	b00b      	add	sp, #44	; 0x2c
     1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ae:	bf00      	nop
     1b0:	01b9      	lsls	r1, r7, #6
     1b2:	0000      	movs	r0, r0
     1b4:	2000568c 	.word	0x2000568c

000001b8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ba:	b089      	.short	0xb089

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     1bc:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     1be:	789c      	.short	0x789c
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     1c0:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     1c2:	7819      	.short	0x7819
     1c4:	7c83      	ldrb	r3, [r0, #18]
     1c6:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1c8:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     1ca:	9203      	str	r2, [sp, #12]
     1cc:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     1d0:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
     1d4:	f88d 4018 	strb.w	r4, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1d8:	d016      	beq.n	208 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     1da:	2300      	.short	0x2300
     1dc:	f88d 3015 	strb.w	r3, [sp, #21]
     1e0:	3014f88d 	.word	0x3014f88d
     1e4:	f88d 3013 	strb.w	r3, [sp, #19]
     1e8:	3012f88d 	.word	0x3012f88d
     1ec:	f88d 3011 	strb.w	r3, [sp, #17]
     1f0:	3010f88d 	.word	0x3010f88d
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     1f4:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     1f6:	6802      	ldr	r2, [r0, #0]
     1f8:	f88da901 	.word	0xf88da901
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     1fc:	3019      	adds	r0, #25
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     1fe:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     200:	6993      	ldr	r3, [r2, #24]
     202:	4798      	.short	0x4798
  }
     204:	b009      	add	sp, #36	; 0x24
     206:	bdf0      	.short	0xbdf0
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     208:	4a1b      	ldr	r2, [pc, #108]	; (278 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     20a:	7813      	.short	0x7813
     20c:	3301      	adds	r3, #1
     20e:	f003      	.short	0xf003
     210:	0307      	lsls	r7, r0, #12

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     212:	f013      	.short	0xf013
     214:	0f01      	lsrs	r1, r0, #28
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     216:	7013      	.short	0x7013

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     218:	bf14      	ite	ne
     21a:	2280      	.short	0x2280
     21c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     21e:	079c      	.short	0x079c
     220:	d502      	bpl.n	228 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x70>
     222:	f042      	.short	0xf042
     224:	0240      	lsls	r0, r0, #9
     226:	b2d2      	.short	0xb2d2
                if(R & 0x04) { Q |= 0x20; }
     228:	075b      	lsls	r3, r3, #29
     22a:	f10d      	.short	0xf10d
     22c:	0716      	lsls	r6, r2, #28
     22e:	f10d      	.short	0xf10d
     230:	0313      	lsls	r3, r2, #12
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     232:	f44f      	.short	0xf44f
     234:	7e80      	ldrb	r0, [r0, #26]

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     236:	bf48      	.short	0xbf48
     238:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     23c:	3210      	adds	r2, #16
     23e:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     240:	b1a9      	cbz	r1, 26e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     242:	fb9e      	.short	0xfb9e
     244:	f1f1 b2c9 	b.w	5f17da <_flashimagelen+0x5e3eaa>
     248:	b2e41c4c 	.word	0xb2e41c4c
     24c:	fb04 2502 	mla	r5, r4, r2, r2
     250:	701c      	strb	r4, [r3, #0]
     252:	122d      	asrs	r5, r5, #8
     254:	b105b2ee 	.word	0xb105b2ee
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     258:	3e01      	subs	r6, #1
     25a:	f803      	.short	0xf803
     25c:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif
                    if(e[i]) e[i]--;
     25e:	b104      	.short	0xb104
     260:	7019      	strb	r1, [r3, #0]
     262:	3301      	.short	0x3301
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     264:	42bb      	cmp	r3, r7
     266:	d0c5      	.short	0xd0c5
     268:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     26a:	2900      	.short	0x2900
     26c:	d1e9      	bne.n	242 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     26e:	7019      	.short	0x7019
                    d[i] = scale8(Q, e[i]);
     270:	f803 1c03 	strb.w	r1, [r3, #-3]
     274:	bf00e7f5 	.word	0xbf00e7f5
     278:	568c      	ldrsb	r4, [r1, r2]
     27a:	2000      	.short	0x2000

0000027c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     27c:	b5f0      	push	{r4, r5, r6, r7, lr}
     27e:	b089      	.short	0xb089

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     280:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     282:	789c      	.short	0x789c
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     284:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     286:	7819      	.short	0x7819
     288:	7c83      	ldrb	r3, [r0, #18]
     28a:	9202      	.short	0x9202
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     28c:	2b01      	cmp	r3, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     28e:	9203      	.short	0x9203
     290:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     294:	5017f88d 	.word	0x5017f88d
        b = rhs.b;
     298:	f88d 4018 	strb.w	r4, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     29c:	2300d017 	.word	0x2300d017
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     2a0:	f88d 3015 	strb.w	r3, [sp, #21]
     2a4:	3014f88d 	.word	0x3014f88d
     2a8:	f88d 3013 	strb.w	r3, [sp, #19]
     2ac:	3012f88d 	.word	0x3012f88d
     2b0:	f88d 3011 	strb.w	r3, [sp, #17]
     2b4:	3010f88d 	.word	0x3010f88d
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     2b8:	6803      	ldr	r3, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     2ba:	2103      	.short	0x2103
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     2bc:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     2be:	f88d      	.short	0xf88d
     2c0:	1019      	asrs	r1, r3, #32
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     2c2:	a901      	.short	0xa901
     2c4:	699b      	ldr	r3, [r3, #24]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     2c6:	9207      	.short	0x9207
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     2c8:	4798      	blx	r3
  }
     2ca:	b009      	.short	0xb009
     2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     2ce:	4a1b      	.short	0x4a1b

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     2d0:	7813      	ldrb	r3, [r2, #0]
     2d2:	3301      	.short	0x3301
     2d4:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     2d8:	0f01f013 	.word	0x0f01f013
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     2dc:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     2de:	bf14      	.short	0xbf14
     2e0:	2280      	movne	r2, #128	; 0x80
     2e2:	2200      	.short	0x2200

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     2e4:	079c      	lsls	r4, r3, #30
     2e6:	d502      	.short	0xd502
     2e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     2ec:	b2d2      	uxtbeq	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     2ee:	075b      	lsls	r3, r3, #29
     2f0:	0716f10d 	.word	0x0716f10d
     2f4:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     2f8:	7e80f44f 	.word	0x7e80f44f

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     2fc:	bf48      	it	mi
     2fe:	f042      	.short	0xf042
     300:	0220      	lsls	r0, r4, #8
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     302:	3210      	addmi	r2, #16
     304:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     306:	b1a9      	.short	0xb1a9
     308:	fb9e f1f1 	sdiv	r1, lr, r1
     30c:	b2c9      	uxtb	r1, r1
     30e:	1c4c      	.short	0x1c4c
     310:	b2e4      	uxtb	r4, r4
     312:	fb04      	.short	0xfb04
     314:	2502      	movs	r5, #2
     316:	701c      	strb	r4, [r3, #0]
     318:	b2ee122d 	.word	0xb2ee122d
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     31c:	b105      	cbz	r5, 320 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     31e:	3e01      	.short	0x3e01
     320:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     324:	b104      	cbz	r4, 328 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     326:	7019      	.short	0x7019
     328:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     32a:	42bb      	.short	0x42bb
     32c:	d0c4      	beq.n	2b8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     32e:	78d9      	.short	0x78d9
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     330:	2900      	cmp	r1, #0
     332:	d1e9      	bne.n	308 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     334:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     336:	f803      	.short	0xf803
     338:	1c03      	adds	r3, r0, #0
     33a:	e7f5      	.short	0xe7f5
     33c:	568c      	ldrsb	r4, [r1, r2]
     33e:	2000      	.short	0x2000

00000340 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     344:	92e8f8df 	.word	0x92e8f8df
     348:	b087      	sub	sp, #28
     34a:	4680      	.short	0x4680
     34c:	f899 3013 	ldrb.w	r3, [r9, #19]
     350:	2b00      	cmp	r3, #0
     352:	d035      	.short	0xd035
			__disable_irq();
     354:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     356:	f899      	.short	0xf899
     358:	2013      	movs	r0, #19
     35a:	07d5      	lsls	r5, r2, #31
     35c:	4613      	mov	r3, r2
     35e:	d507      	bpl.n	370 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x30>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     360:	4cae      	ldr	r4, [pc, #696]	; (61c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2dc>)
     362:	f8d9 0014 	ldr.w	r0, [r9, #20]
     366:	6825      	ldr	r5, [r4, #0]
     368:	4028      	ands	r0, r5
     36a:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     36e:	6020      	str	r0, [r4, #0]
			}
			if (interruptMasksUsed & 0x02) {
     370:	0794      	lsls	r4, r2, #30
     372:	d509      	bpl.n	388 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x48>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     374:	48aa      	ldr	r0, [pc, #680]	; (620 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2e0>)
     376:	f8d9 2018 	ldr.w	r2, [r9, #24]
     37a:	6804      	ldr	r4, [r0, #0]
     37c:	f899 3013 	ldrb.w	r3, [r9, #19]
     380:	4022      	ands	r2, r4
     382:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     386:	6002      	str	r2, [r0, #0]
			}
			if (interruptMasksUsed & 0x04) {
     388:	0758      	lsls	r0, r3, #29
     38a:	d509      	bpl.n	3a0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x60>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     38c:	48a5      	ldr	r0, [pc, #660]	; (624 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2e4>)
     38e:	f8d9 201c 	ldr.w	r2, [r9, #28]
     392:	6804      	ldr	r4, [r0, #0]
     394:	f899 3013 	ldrb.w	r3, [r9, #19]
     398:	4022      	ands	r2, r4
     39a:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     39e:	6002      	str	r2, [r0, #0]
			}
			if (interruptMasksUsed & 0x08) {
     3a0:	071a      	lsls	r2, r3, #28
     3a2:	d509      	bpl.n	3b8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x78>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     3a4:	48a0      	ldr	r0, [pc, #640]	; (628 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2e8>)
     3a6:	f8d9 2020 	ldr.w	r2, [r9, #32]
     3aa:	6804      	ldr	r4, [r0, #0]
     3ac:	f899 3013 	ldrb.w	r3, [r9, #19]
     3b0:	4022      	ands	r2, r4
     3b2:	f8c9 2034 	str.w	r2, [r9, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     3b6:	6002      	str	r2, [r0, #0]
			}
			if (interruptMasksUsed & 0x10) {
     3b8:	06db      	lsls	r3, r3, #27
     3ba:	f100 81ab 	bmi.w	714 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3d4>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
     3be:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     3c0:	4c9a      	ldr	r4, [pc, #616]	; (62c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ec>)
     3c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
     3c6:	489a      	ldr	r0, [pc, #616]	; (630 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     3c8:	42a3      	cmp	r3, r4
     3ca:	f000 81ac 	beq.w	726 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3e6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     3ce:	4b99      	ldr	r3, [pc, #612]	; (634 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f4>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     3d0:	4d99      	ldr	r5, [pc, #612]	; (638 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f8>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     3d2:	699a      	ldr	r2, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     3d4:	6084      	str	r4, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     3d6:	f3c2 1601 	ubfx	r6, r2, #4, #2
     3da:	f3c2 6282 	ubfx	r2, r2, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     3de:	4b97      	ldr	r3, [pc, #604]	; (63c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2fc>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     3e0:	3201      	adds	r2, #1
     3e2:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
     3e6:	fbb0 f0f2 	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     3ea:	fba3 2300 	umull	r2, r3, r3, r0

			if (d && clkhz/d > _clock) d++;
     3ee:	0d1a      	lsrs	r2, r3, #20
     3f0:	f040 8186 	bne.w	700 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3c0>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     3f4:	f8c9 200c 	str.w	r2, [r9, #12]
     3f8:	f8d9 3000 	ldr.w	r3, [r9]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     3fc:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     3fe:	2003      	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
     400:	2507      	movs	r5, #7
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     402:	611c      	str	r4, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
     404:	2401      	movs	r4, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     406:	6258      	str	r0, [r3, #36]	; 0x24

	// latch the CS select
	void inline select() __attribute__((always_inline)) {
    // begin the SPI transaction
    _SPIObject.beginTransaction(SPISettings(_SPI_CLOCK_RATE, MSBFIRST, SPI_MODE0));
    if(m_pSelect != NULL) { m_pSelect->select(); }
     408:	f8d8 0018 	ldr.w	r0, [r8, #24]
		port().CCR = _ccr;
     40c:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     40e:	661d      	str	r5, [r3, #96]	; 0x60
     410:	4d87      	ldr	r5, [pc, #540]	; (630 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
		port().CR = LPSPI_CR_MEN;
     412:	611c      	str	r4, [r3, #16]
     414:	b150      	cbz	r0, 42c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xec>
     416:	6802      	ldr	r2, [r0, #0]
     418:	4c89      	ldr	r4, [pc, #548]	; (640 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x300>)
     41a:	6812      	ldr	r2, [r2, #0]
     41c:	42a2      	cmp	r2, r4
     41e:	f040 8186 	bne.w	72e <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3ee>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     422:	6844      	ldr	r4, [r0, #4]
     424:	68c0      	ldr	r0, [r0, #12]
     426:	6822      	ldr	r2, [r4, #0]
     428:	4302      	orrs	r2, r0
     42a:	6022      	str	r2, [r4, #0]
	// wait until all queued up data has been written
	static void waitFully() { /* TODO */ }

	// write a byte out via SPI (returns immediately on writing register) -
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
     42c:	f8d8 201c 	ldr.w	r2, [r8, #28]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     430:	7d08      	ldrb	r0, [r1, #20]
     432:	7ccc      	ldrb	r4, [r1, #19]
     434:	7c8d      	ldrb	r5, [r1, #18]
     436:	2a00      	cmp	r2, #0
     438:	f040 8141 	bne.w	6be <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x37e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     43c:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     43e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     440:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     444:	d0fb      	beq.n	43e <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xfe>
     446:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     448:	2200      	movs	r2, #0
     44a:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     44c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     44e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     452:	d0fb      	beq.n	44c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x10c>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     454:	2200      	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     456:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     458:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     45a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     45c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     460:	d0fb      	beq.n	45a <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11a>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     462:	2200      	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     464:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     466:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     46a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     46e:	d0fb      	beq.n	468 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x128>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     470:	f8d1 c008 	ldr.w	ip, [r1, #8]
     474:	6f5a      	ldr	r2, [r3, #116]	; 0x74
     476:	f1bc 0f00 	cmp.w	ip, #0
     47a:	f340 815d 	ble.w	738 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3f8>
     47e:	1c6a      	adds	r2, r5, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     480:	f8d1 b018 	ldr.w	fp, [r1, #24]
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     484:	4d6f      	ldr	r5, [pc, #444]	; (644 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x304>)
     486:	2700      	movs	r7, #0
     488:	9202      	str	r2, [sp, #8]
     48a:	1c62      	adds	r2, r4, #1
     48c:	680e      	ldr	r6, [r1, #0]
     48e:	9203      	str	r2, [sp, #12]
     490:	1c42      	adds	r2, r0, #1
     492:	9204      	str	r2, [sp, #16]
     494:	f10b 0202 	add.w	r2, fp, #2
     498:	9201      	str	r2, [sp, #4]
     49a:	f10b 0201 	add.w	r2, fp, #1
     49e:	9200      	str	r2, [sp, #0]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
     4a0:	9a01      	ldr	r2, [sp, #4]
     4a2:	f816 e00b 	ldrb.w	lr, [r6, fp]
     4a6:	5cb4      	ldrb	r4, [r6, r2]
     4a8:	9a00      	ldr	r2, [sp, #0]
     4aa:	5cb0      	ldrb	r0, [r6, r2]
     4ac:	9a04      	ldr	r2, [sp, #16]
     4ae:	fb02 f404 	mul.w	r4, r2, r4
     4b2:	9a03      	ldr	r2, [sp, #12]
     4b4:	fb02 f000 	mul.w	r0, r2, r0
     4b8:	9a02      	ldr	r2, [sp, #8]
     4ba:	1224      	asrs	r4, r4, #8
     4bc:	fb02 f20e 	mul.w	r2, r2, lr
     4c0:	1200      	asrs	r0, r0, #8
     4c2:	f064 04ff 	orn	r4, r4, #255	; 0xff
     4c6:	1212      	asrs	r2, r2, #8
	// wait until all queued up data has been written
	static void waitFully() { /* TODO */ }

	// write a byte out via SPI (returns immediately on writing register) -
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
     4c8:	2f00      	cmp	r7, #0
     4ca:	d13d      	bne.n	548 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     4cc:	27ff      	movs	r7, #255	; 0xff
     4ce:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     4d0:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     4d2:	f417 1ff8 	tst.w	r7, #2031616	; 0x1f0000
     4d6:	d0fb      	beq.n	4d0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x190>
     4d8:	6f5f      	ldr	r7, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     4da:	b2e4      	uxtb	r4, r4
     4dc:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     4de:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     4e0:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
     4e4:	d0fb      	beq.n	4de <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x19e>
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
     4e6:	0200      	lsls	r0, r0, #8
     4e8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
     4ea:	b280      	uxth	r0, r0
		w |= b2;
     4ec:	4310      	orrs	r0, r2
     4ee:	b282      	uxth	r2, r0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     4f0:	0a10      	lsrs	r0, r2, #8
     4f2:	6658      	str	r0, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     4f4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     4f6:	f410 1ff8 	tst.w	r0, #2031616	; 0x1f0000
     4fa:	d0fb      	beq.n	4f4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1b4>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     4fc:	b2d2      	uxtb	r2, r2
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     4fe:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     500:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     504:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     508:	d0fb      	beq.n	502 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1c2>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     50a:	7b0a      	ldrb	r2, [r1, #12]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     50c:	f10c 3cff 	add.w	ip, ip, #4294967295
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     510:	7c0f      	ldrb	r7, [r1, #16]
     512:	7b48      	ldrb	r0, [r1, #13]
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     514:	f1bc 0f00 	cmp.w	ip, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     518:	7bcc      	ldrb	r4, [r1, #15]
                d[1] = e[1] - d[1];
     51a:	eba7 0000 	sub.w	r0, r7, r0
                d[2] = e[2] - d[2];
     51e:	7b8f      	ldrb	r7, [r1, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     520:	eba4 0402 	sub.w	r4, r4, r2
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     524:	7c4a      	ldrb	r2, [r1, #17]
     526:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
     52a:	eba2 0207 	sub.w	r2, r2, r7

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     52e:	f991 7015 	ldrsb.w	r7, [r1, #21]
     532:	f8c1 c008 	str.w	ip, [r1, #8]
     536:	443e      	add	r6, r7

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     538:	730c      	strb	r4, [r1, #12]
                d[1] = e[1] - d[1];
     53a:	7348      	strb	r0, [r1, #13]
                d[2] = e[2] - d[2];
     53c:	738a      	strb	r2, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     53e:	600e      	str	r6, [r1, #0]
     540:	dd25      	ble.n	58e <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24e>
     542:	f8d8 701c 	ldr.w	r7, [r8, #28]
     546:	e7ab      	b.n	4a0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x160>
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     548:	f107 0e07 	add.w	lr, r7, #7
     54c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 648 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x308>
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     550:	6e2f      	ldr	r7, [r5, #96]	; 0x60
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     552:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
     556:	ea07 0a0a 	and.w	sl, r7, sl
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     55a:	f8d8 7020 	ldr.w	r7, [r8, #32]
     55e:	023f      	lsls	r7, r7, #8
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     560:	ea4e 0e0a 	orr.w	lr, lr, sl
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     564:	f047 07ff 	orr.w	r7, r7, #255	; 0xff
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     568:	f8c5 e060 	str.w	lr, [r5, #96]	; 0x60
      port().TDR = outData;		// output 9 bit data.
     56c:	666f      	str	r7, [r5, #100]	; 0x64
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     56e:	6f2f      	ldr	r7, [r5, #112]	; 0x70
     570:	f017 0702 	ands.w	r7, r7, #2
     574:	d1fb      	bne.n	56e <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x22e>
     576:	9705      	str	r7, [sp, #20]
			port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8) - 1);  // turn back on 8 bit mode
     578:	f04a 0a07 	orr.w	sl, sl, #7
     57c:	4f31      	ldr	r7, [pc, #196]	; (644 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x304>)
     57e:	f8c7 a060 	str.w	sl, [r7, #96]	; 0x60
      port().RDR;
     582:	f8d7 e074 	ldr.w	lr, [r7, #116]	; 0x74
      m_bitCount = 0;
     586:	9f05      	ldr	r7, [sp, #20]
     588:	f8c8 701c 	str.w	r7, [r8, #28]
     58c:	e7a5      	b.n	4da <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x19a>
     58e:	f8d8 201c 	ldr.w	r2, [r8, #28]
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     592:	6848      	ldr	r0, [r1, #4]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     594:	26ff      	movs	r6, #255	; 0xff
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     596:	492b      	ldr	r1, [pc, #172]	; (644 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x304>)
     598:	2400      	movs	r4, #0
     59a:	2800      	cmp	r0, #0
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
      port().TDR = outData;		// output 9 bit data.
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     59c:	460d      	mov	r5, r1
     59e:	bfb8      	it	lt
     5a0:	301f      	addlt	r0, #31
     5a2:	1140      	asrs	r0, r0, #5
	// wait until all queued up data has been written
	static void waitFully() { /* TODO */ }

	// write a byte out via SPI (returns immediately on writing register) -
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
     5a4:	b9f2      	cbnz	r2, 5e4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a4>
     5a6:	665e      	str	r6, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     5a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     5aa:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     5ae:	d0fb      	beq.n	5a8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x268>
     5b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     5b2:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     5b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     5b6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     5ba:	d0fb      	beq.n	5b4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x274>
     5bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     5be:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     5c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     5c2:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     5c6:	d0fb      	beq.n	5c0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x280>
     5c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     5ca:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     5cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     5ce:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     5d2:	d0fb      	beq.n	5cc <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x28c>
     5d4:	3801      	subs	r0, #1
     5d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
     5d8:	1c47      	adds	r7, r0, #1
     5da:	d037      	beq.n	64c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x30c>
     5dc:	f8d8 201c 	ldr.w	r2, [r8, #28]
     5e0:	2a00      	cmp	r2, #0
     5e2:	d0e0      	beq.n	5a6 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x266>
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     5e4:	6e0f      	ldr	r7, [r1, #96]	; 0x60
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     5e6:	3207      	adds	r2, #7
     5e8:	f8df e05c 	ldr.w	lr, [pc, #92]	; 648 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x308>
     5ec:	f3c2 020b 	ubfx	r2, r2, #0, #12
     5f0:	ea07 0e0e 	and.w	lr, r7, lr
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     5f4:	f8d8 7020 	ldr.w	r7, [r8, #32]
     5f8:	023f      	lsls	r7, r7, #8
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     5fa:	ea42 020e 	orr.w	r2, r2, lr
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     5fe:	f047 07ff 	orr.w	r7, r7, #255	; 0xff
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     602:	660a      	str	r2, [r1, #96]	; 0x60
      port().TDR = outData;		// output 9 bit data.
     604:	664f      	str	r7, [r1, #100]	; 0x64
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     606:	6f0a      	ldr	r2, [r1, #112]	; 0x70
     608:	f012 0202 	ands.w	r2, r2, #2
     60c:	d1fb      	bne.n	606 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2c6>
			port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8) - 1);  // turn back on 8 bit mode
     60e:	f04e 0707 	orr.w	r7, lr, #7
     612:	662f      	str	r7, [r5, #96]	; 0x60
      port().RDR;
     614:	6f6f      	ldr	r7, [r5, #116]	; 0x74
      m_bitCount = 0;
     616:	f8c8 201c 	str.w	r2, [r8, #28]
     61a:	e7ca      	b.n	5b2 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x272>
     61c:	e000e180 	.word	0xe000e180
     620:	e000e184 	.word	0xe000e184
     624:	e000e188 	.word	0xe000e188
     628:	e000e18c 	.word	0xe000e18c
     62c:	00b71b00 	.word	0x00b71b00
     630:	20004d18 	.word	0x20004d18
     634:	400fc000 	.word	0x400fc000
     638:	20000030 	.word	0x20000030
     63c:	165e9f81 	.word	0x165e9f81
     640:	00000085 	.word	0x00000085
     644:	403a0000 	.word	0x403a0000
     648:	fffff000 	.word	0xfffff000
    if(m_pSelect != NULL) { m_pSelect->select(); }
  }

	// release the CS select
	void inline release() __attribute__((always_inline)) {
    if(m_pSelect != NULL) { m_pSelect->release(); }
     64c:	f8d8 0018 	ldr.w	r0, [r8, #24]
     650:	b150      	cbz	r0, 668 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x328>
     652:	6803      	ldr	r3, [r0, #0]
     654:	4a40      	ldr	r2, [pc, #256]	; (758 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x418>)
     656:	685b      	ldr	r3, [r3, #4]
     658:	4293      	cmp	r3, r2
     65a:	d166      	bne.n	72a <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3ea>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     65c:	6842      	ldr	r2, [r0, #4]
     65e:	68c1      	ldr	r1, [r0, #12]
     660:	6813      	ldr	r3, [r2, #0]
     662:	ea23 0301 	bic.w	r3, r3, r1
     666:	6013      	str	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     668:	f899 3013 	ldrb.w	r3, [r9, #19]
     66c:	493b      	ldr	r1, [pc, #236]	; (75c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x41c>)
     66e:	461a      	mov	r2, r3
     670:	b313      	cbz	r3, 6b8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x378>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     672:	07dd      	lsls	r5, r3, #31
     674:	d502      	bpl.n	67c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x33c>
     676:	6a88      	ldr	r0, [r1, #40]	; 0x28
     678:	4939      	ldr	r1, [pc, #228]	; (760 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x420>)
     67a:	6008      	str	r0, [r1, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     67c:	079c      	lsls	r4, r3, #30
     67e:	d505      	bpl.n	68c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x34c>
     680:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
     684:	4b37      	ldr	r3, [pc, #220]	; (764 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x424>)
     686:	f899 2013 	ldrb.w	r2, [r9, #19]
     68a:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     68c:	0750      	lsls	r0, r2, #29
     68e:	d505      	bpl.n	69c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x35c>
     690:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
     694:	4b34      	ldr	r3, [pc, #208]	; (768 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x428>)
     696:	f899 2013 	ldrb.w	r2, [r9, #19]
     69a:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     69c:	0711      	lsls	r1, r2, #28
     69e:	d505      	bpl.n	6ac <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x36c>
     6a0:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
     6a4:	4b31      	ldr	r3, [pc, #196]	; (76c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x42c>)
     6a6:	f899 2013 	ldrb.w	r2, [r9, #19]
     6aa:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     6ac:	06d3      	lsls	r3, r2, #27
     6ae:	d503      	bpl.n	6b8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x378>
     6b0:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
     6b4:	4b2e      	ldr	r3, [pc, #184]	; (770 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x430>)
     6b6:	601a      	str	r2, [r3, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
     6b8:	b007      	add	sp, #28
     6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     6be:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 774 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x434>
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     6c2:	1dd6      	adds	r6, r2, #7
     6c4:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 780 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x440>
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     6c8:	f8dc 7060 	ldr.w	r7, [ip, #96]	; 0x60
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     6cc:	f3c6 060b 	ubfx	r6, r6, #0, #12
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     6d0:	f8d8 2020 	ldr.w	r2, [r8, #32]
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     6d4:	ea07 0e0e 	and.w	lr, r7, lr
      port().TDR = outData;		// output 9 bit data.
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     6d8:	4667      	mov	r7, ip
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     6da:	0212      	lsls	r2, r2, #8
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     6dc:	ea46 060e 	orr.w	r6, r6, lr
     6e0:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
      port().TDR = outData;		// output 9 bit data.
     6e4:	f8cc 2064 	str.w	r2, [ip, #100]	; 0x64
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     6e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
     6ea:	4e22      	ldr	r6, [pc, #136]	; (774 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x434>)
     6ec:	f012 0202 	ands.w	r2, r2, #2
     6f0:	d1fa      	bne.n	6e8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3a8>
			port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8) - 1);  // turn back on 8 bit mode
     6f2:	f04e 0707 	orr.w	r7, lr, #7
     6f6:	6637      	str	r7, [r6, #96]	; 0x60
      port().RDR;
     6f8:	6f76      	ldr	r6, [r6, #116]	; 0x74
      m_bitCount = 0;
     6fa:	f8c8 201c 	str.w	r2, [r8, #28]
     6fe:	e6a3      	b.n	448 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x108>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
     700:	fbb0 f0f2 	udiv	r0, r0, r2
     704:	42a0      	cmp	r0, r4
     706:	bf88      	it	hi
     708:	3201      	addhi	r2, #1
			if (d > 257) d= 257;  // max div
     70a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
     70e:	d315      	bcc.n	73c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3fc>
     710:	4a19      	ldr	r2, [pc, #100]	; (778 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x438>)
     712:	e66f      	b.n	3f4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb4>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     714:	4a19      	ldr	r2, [pc, #100]	; (77c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x43c>)
     716:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
     71a:	6810      	ldr	r0, [r2, #0]
     71c:	4003      	ands	r3, r0
     71e:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     722:	6013      	str	r3, [r2, #0]
     724:	e64b      	b.n	3be <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x7e>
     726:	68c2      	ldr	r2, [r0, #12]
     728:	e666      	b.n	3f8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb8>
    if(m_pSelect != NULL) { m_pSelect->select(); }
  }

	// release the CS select
	void inline release() __attribute__((always_inline)) {
    if(m_pSelect != NULL) { m_pSelect->release(); }
     72a:	4798      	blx	r3
     72c:	e79c      	b.n	668 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x328>
     72e:	9100      	str	r1, [sp, #0]

	// latch the CS select
	void inline select() __attribute__((always_inline)) {
    // begin the SPI transaction
    _SPIObject.beginTransaction(SPISettings(_SPI_CLOCK_RATE, MSBFIRST, SPI_MODE0));
    if(m_pSelect != NULL) { m_pSelect->select(); }
     730:	4790      	blx	r2
     732:	682b      	ldr	r3, [r5, #0]
     734:	9900      	ldr	r1, [sp, #0]
     736:	e679      	b.n	42c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xec>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     738:	2200      	movs	r2, #0
     73a:	e72a      	b.n	592 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x252>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     73c:	2a02      	cmp	r2, #2
     73e:	d801      	bhi.n	744 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x404>
     740:	2200      	movs	r2, #0
     742:	e657      	b.n	3f4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb4>
     744:	3a02      	subs	r2, #2
     746:	0850      	lsrs	r0, r2, #1
     748:	0403      	lsls	r3, r0, #16
     74a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
     74e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     752:	431a      	orrs	r2, r3
     754:	e64e      	b.n	3f4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb4>
     756:	bf00      	nop
     758:	00000091 	.word	0x00000091
     75c:	20004d18 	.word	0x20004d18
     760:	e000e100 	.word	0xe000e100
     764:	e000e104 	.word	0xe000e104
     768:	e000e108 	.word	0xe000e108
     76c:	e000e10c 	.word	0xe000e10c
     770:	e000e110 	.word	0xe000e110
     774:	403a0000 	.word	0x403a0000
     778:	007f7fff 	.word	0x007f7fff
     77c:	e000e190 	.word	0xe000e190
     780:	fffff000 	.word	0xfffff000

00000784 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     788:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     78a:	b08d      	sub	sp, #52	; 0x34
     78c:	9008      	str	r0, [sp, #32]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     78e:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
     792:	3701      	adds	r7, #1
        } while ( u.index != 255);
     794:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     796:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     798:	2bff      	cmp	r3, #255	; 0xff
     79a:	d1f8      	bne.n	78e <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     79c:	680b      	ldr	r3, [r1, #0]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     79e:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     7a2:	468a      	mov	sl, r1

        int indexstart = 0;
     7a4:	2400      	movs	r4, #0
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     7a6:	ea4f 6b13 	mov.w	fp, r3, lsr #24
     7aa:	f3c3 2907 	ubfx	r9, r3, #8, #8
     7ae:	f3c3 4807 	ubfx	r8, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     7b2:	9207      	str	r2, [sp, #28]
     7b4:	46dc      	mov	ip, fp
     7b6:	9709      	str	r7, [sp, #36]	; 0x24
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     7b8:	f85a 5f04 	ldr.w	r5, [sl, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
     7bc:	ea4f 1e24 	mov.w	lr, r4, asr #4
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     7c0:	aa0a      	add	r2, sp, #40	; 0x28
     7c2:	9808      	ldr	r0, [sp, #32]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     7c4:	f3c5 2707 	ubfx	r7, r5, #8, #8
     7c8:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     7cc:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     7ce:	f3c5 6507 	ubfx	r5, r5, #24, #8
     7d2:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     7d4:	0923      	lsrs	r3, r4, #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     7d6:	9105      	str	r1, [sp, #20]
     7d8:	b2f1      	uxtb	r1, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     7da:	9303      	str	r3, [sp, #12]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     7dc:	fa5f fb85 	uxtb.w	fp, r5
     7e0:	9106      	str	r1, [sp, #24]
            istart8 = indexstart / 16;
     7e2:	fa5f f18e 	uxtb.w	r1, lr
     7e6:	9104      	str	r1, [sp, #16]
            iend8   = indexend   / 16;
            if( count < 16) {
     7e8:	9909      	ldr	r1, [sp, #36]	; 0x24
     7ea:	290f      	cmp	r1, #15
     7ec:	d810      	bhi.n	810 <CRGBPalette16::operator=(unsigned char const*)+0x8c>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
                    istart8 = lastSlotUsed + 1;
     7ee:	9907      	ldr	r1, [sp, #28]
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     7f0:	458e      	cmp	lr, r1
                    istart8 = lastSlotUsed + 1;
     7f2:	f101 0301 	add.w	r3, r1, #1
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     7f6:	dc08      	bgt.n	80a <CRGBPalette16::operator=(unsigned char const*)+0x86>
     7f8:	290e      	cmp	r1, #14
     7fa:	dc06      	bgt.n	80a <CRGBPalette16::operator=(unsigned char const*)+0x86>
                    istart8 = lastSlotUsed + 1;
     7fc:	b2d9      	uxtb	r1, r3
     7fe:	0923      	lsrs	r3, r4, #4
     800:	9104      	str	r1, [sp, #16]
     802:	428b      	cmp	r3, r1
     804:	bf38      	it	cc
     806:	460b      	movcc	r3, r1
     808:	9303      	str	r3, [sp, #12]
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     80a:	f99d 100c 	ldrsb.w	r1, [sp, #12]
     80e:	9107      	str	r1, [sp, #28]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     810:	a90b      	add	r1, sp, #44	; 0x2c
     812:	9b03      	ldr	r3, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     814:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
     818:	9100      	str	r1, [sp, #0]
     81a:	9904      	ldr	r1, [sp, #16]
        g = rhs.g;
     81c:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
        b = rhs.b;
     820:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     824:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
     828:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
     82c:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
     830:	f002 fcaa 	bl	3188 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     834:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     836:	46dc      	mov	ip, fp

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     838:	f8dd 8018 	ldr.w	r8, [sp, #24]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     83c:	f8dd 9014 	ldr.w	r9, [sp, #20]
     840:	d1ba      	bne.n	7b8 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     842:	9808      	ldr	r0, [sp, #32]
     844:	b00d      	add	sp, #52	; 0x34
     846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     84a:	bf00      	nop

0000084c <setup>:

AudioConnection          patchCord3(audioInput, 0, audioOutput, 0);
AudioConnection          patchCord4(audioInput, 1, audioOutput, 1);

AudioControlSGTL5000 audioControl;

     84c:	b570      	push	{r4, r5, r6, lr}
     84e:	f640 31b8 	movw	r1, #3000	; 0xbb8
     852:	4845      	ldr	r0, [pc, #276]	; (968 <setup+0x11c>)
     854:	f000 fb04 	bl	e60 <VisualMicroDebug::init(unsigned long)>
     858:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     85c:	4842      	ldr	r0, [pc, #264]	; (968 <setup+0x11c>)
     85e:	f000 fafb 	bl	e58 <VisualMicroDebug::begin(unsigned long)>
     862:	2101      	movs	r1, #1
     864:	4840      	ldr	r0, [pc, #256]	; (968 <setup+0x11c>)
     866:	f000 fad9 	bl	e1c <VisualMicroDebug::outPacketStart(bool)>
     86a:	2800      	cmp	r0, #0
     86c:	d16d      	bne.n	94a <setup+0xfe>
     86e:	2100      	movs	r1, #0
     870:	483d      	ldr	r0, [pc, #244]	; (968 <setup+0x11c>)
     872:	2201      	movs	r2, #1
     874:	f000 fb92 	bl	f9c <VisualMicroDebug::start(bool, bool)>
     878:	2101      	movs	r1, #1
     87a:	483b      	ldr	r0, [pc, #236]	; (968 <setup+0x11c>)
     87c:	f000 face 	bl	e1c <VisualMicroDebug::outPacketStart(bool)>
     880:	b130      	cbz	r0, 890 <setup+0x44>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     882:	2106      	movs	r1, #6
     884:	4839      	ldr	r0, [pc, #228]	; (96c <setup+0x120>)
     886:	f004 fb17 	bl	4eb8 <usb_serial_write>
     88a:	4837      	ldr	r0, [pc, #220]	; (968 <setup+0x11c>)
     88c:	f000 fae2 	bl	e54 <VisualMicroDebug::outPacketEnd()>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     890:	4837      	ldr	r0, [pc, #220]	; (970 <setup+0x124>)
     892:	6803      	ldr	r3, [r0, #0]
     894:	f013 0201 	ands.w	r2, r3, #1
     898:	d02b      	beq.n	8f2 <setup+0xa6>
     89a:	2300      	movs	r3, #0
     89c:	f44f 7290 	mov.w	r2, #288	; 0x120
     8a0:	4934      	ldr	r1, [pc, #208]	; (974 <setup+0x128>)

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
     8a2:	26b0      	movs	r6, #176	; 0xb0
     8a4:	4834      	ldr	r0, [pc, #208]	; (978 <setup+0x12c>)
        b = (colorcode >>  0) & 0xFF;
     8a6:	25f0      	movs	r5, #240	; 0xf0
     8a8:	f002 fdea 	bl	3480 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     8ac:	2280      	movs	r2, #128	; 0x80
     8ae:	4b33      	ldr	r3, [pc, #204]	; (97c <setup+0x130>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     8b0:	21ff      	movs	r1, #255	; 0xff
    FastLED.setBrightness(BRIGHTNESS);
  // Audio connections require memory to work.  For more
  // detailed information, see the MemoryAndCpuUsage example
  AudioMemory(12);

  // Enable the audio shield and set the output volume.
     8b2:	4c33      	ldr	r4, [pc, #204]	; (980 <setup+0x134>)
     8b4:	7301      	strb	r1, [r0, #12]
    Serial.begin(115200);

    FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
    FastLED.setBrightness(BRIGHTNESS);
  // Audio connections require memory to work.  For more
  // detailed information, see the MemoryAndCpuUsage example
     8b6:	210c      	movs	r1, #12
     8b8:	701a      	strb	r2, [r3, #0]
        g = (colorcode >>  8) & 0xFF;
     8ba:	7346      	strb	r6, [r0, #13]
        b = (colorcode >>  0) & 0xFF;
     8bc:	7385      	strb	r5, [r0, #14]
     8be:	4831      	ldr	r0, [pc, #196]	; (984 <setup+0x138>)
     8c0:	f006 f81a 	bl	68f8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  AudioMemory(12);

  // Enable the audio shield and set the output volume.
     8c4:	4620      	mov	r0, r4
     8c6:	f000 fd99 	bl	13fc <AudioControlSGTL5000::enable()>
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
     8ca:	4620      	mov	r0, r4
     8cc:	f240 1273 	movw	r2, #371	; 0x173
     8d0:	212a      	movs	r1, #42	; 0x2a
     8d2:	f000 fd2d 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     8d6:	bb48      	cbnz	r0, 92c <setup+0xe0>
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
     8d8:	2181      	movs	r1, #129	; 0x81
     8da:	4829      	ldr	r0, [pc, #164]	; (980 <setup+0x134>)
     8dc:	f000 fe2c 	bl	1538 <AudioControlSGTL5000::volumeInteger(unsigned int)>
  audioControl.enable();
  audioControl.inputSelect(myInput);
  audioControl.volume(1);
  if (myInput == AUDIO_INPUT_MIC) {
     8e0:	2128      	movs	r1, #40	; 0x28
     8e2:	4827      	ldr	r0, [pc, #156]	; (980 <setup+0x134>)
     8e4:	f000 fd52 	bl	138c <AudioControlSGTL5000::micGain(unsigned int)>
	}
	void averageTogether(uint8_t n) {
		// not implemented yet (may never be, 86 Hz output rate is ok)
	}
	void windowFunction(const int16_t *w) {
		window = w;
     8e8:	4b27      	ldr	r3, [pc, #156]	; (988 <setup+0x13c>)
     8ea:	4a28      	ldr	r2, [pc, #160]	; (98c <setup+0x140>)
     8ec:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
     8f0:	bd70      	pop	{r4, r5, r6, pc}

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     8f2:	4c27      	ldr	r4, [pc, #156]	; (990 <setup+0x144>)
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     8f4:	21ff      	movs	r1, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     8f6:	4b20      	ldr	r3, [pc, #128]	; (978 <setup+0x12c>)
     8f8:	2601      	movs	r6, #1
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     8fa:	6825      	ldr	r5, [r4, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     8fc:	605a      	str	r2, [r3, #4]
     8fe:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     900:	609a      	str	r2, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     902:	749e      	strb	r6, [r3, #18]
     904:	7319      	strb	r1, [r3, #12]
     906:	7359      	strb	r1, [r3, #13]
     908:	7399      	strb	r1, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     90a:	73d9      	strb	r1, [r3, #15]
     90c:	7419      	strb	r1, [r3, #16]
     90e:	7459      	strb	r1, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     910:	b33d      	cbz	r5, 962 <setup+0x116>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     912:	4920      	ldr	r1, [pc, #128]	; (994 <setup+0x148>)
     914:	680a      	ldr	r2, [r1, #0]
     916:	b102      	cbz	r2, 91a <setup+0xce>
     918:	6093      	str	r3, [r2, #8]
        return IMXRT_LPSPI1_S;
    }
  }

public:
	Teesy4HardwareSPIOutput() { m_pSelect = NULL; m_bitCount = 0;}
     91a:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
     91c:	4d1e      	ldr	r5, [pc, #120]	; (998 <setup+0x14c>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     91e:	2401      	movs	r4, #1
        m_pTail = this;
     920:	600b      	str	r3, [r1, #0]
     922:	601d      	str	r5, [r3, #0]
     924:	619a      	str	r2, [r3, #24]
     926:	61da      	str	r2, [r3, #28]
     928:	6004      	str	r4, [r0, #0]
     92a:	e7b6      	b.n	89a <setup+0x4e>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
     92c:	2288      	movs	r2, #136	; 0x88
     92e:	2120      	movs	r1, #32
     930:	4620      	mov	r0, r4
     932:	f000 fcfd 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
     936:	2800      	cmp	r0, #0
     938:	d0ce      	beq.n	8d8 <setup+0x8c>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     93a:	88e2      	ldrh	r2, [r4, #6]
     93c:	4620      	mov	r0, r4
     93e:	2124      	movs	r1, #36	; 0x24
     940:	f022 0204 	bic.w	r2, r2, #4
     944:	f000 fcf4 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
     948:	e7c6      	b.n	8d8 <setup+0x8c>
     94a:	2110      	movs	r1, #16
     94c:	4813      	ldr	r0, [pc, #76]	; (99c <setup+0x150>)
     94e:	f004 fab3 	bl	4eb8 <usb_serial_write>

AudioConnection          patchCord3(audioInput, 0, audioOutput, 0);
AudioConnection          patchCord4(audioInput, 1, audioOutput, 1);

AudioControlSGTL5000 audioControl;

     952:	210a      	movs	r1, #10
     954:	4804      	ldr	r0, [pc, #16]	; (968 <setup+0x11c>)
     956:	f000 fa55 	bl	e04 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     95a:	4803      	ldr	r0, [pc, #12]	; (968 <setup+0x11c>)
     95c:	f000 fa7a 	bl	e54 <VisualMicroDebug::outPacketEnd()>
     960:	e785      	b.n	86e <setup+0x22>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     962:	6023      	str	r3, [r4, #0]
     964:	e7d5      	b.n	912 <setup+0xc6>
     966:	bf00      	nop
     968:	20006f30 	.word	0x20006f30
     96c:	20000054 	.word	0x20000054
     970:	20005690 	.word	0x20005690
     974:	200056bc 	.word	0x200056bc
     978:	20005694 	.word	0x20005694
     97c:	200072d8 	.word	0x200072d8
     980:	20005a50 	.word	0x20005a50
     984:	20200000 	.word	0x20200000
     988:	20005aa8 	.word	0x20005aa8
     98c:	200000dc 	.word	0x200000dc
     990:	200072e8 	.word	0x200072e8
     994:	200072f8 	.word	0x200072f8
     998:	20000014 	.word	0x20000014
     99c:	20000040 	.word	0x20000040

000009a0 <loop>:
  myFFT.windowFunction(AudioWindowBartlett1024);
  //myFFT.windowFunction(NULL);
}
elapsedMillis msecs;
uint8_t c_index = 0;

     9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     9a4:	4a7e      	ldr	r2, [pc, #504]	; (ba0 <loop+0x200>)
     9a6:	f8df b230 	ldr.w	fp, [pc, #560]	; bd8 <loop+0x238>
void loop() {
     9aa:	6811      	ldr	r1, [r2, #0]
     9ac:	f8db 3000 	ldr.w	r3, [fp]
     9b0:	1a5b      	subs	r3, r3, r1
     9b2:	2b28      	cmp	r3, #40	; 0x28
  myFFT.windowFunction(AudioWindowBartlett1024);
  //myFFT.windowFunction(NULL);
}
elapsedMillis msecs;
uint8_t c_index = 0;

     9b4:	ed2d 8b06 	vpush	{d8-d10}
     9b8:	b087      	sub	sp, #28
void loop() {
     9ba:	f240 80b6 	bls.w	b2a <loop+0x18a>
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
	}
	bool available() {
		if (outputflag == true) {
     9be:	4b79      	ldr	r3, [pc, #484]	; (ba4 <loop+0x204>)
     9c0:	f241 413d 	movw	r1, #5181	; 0x143d
     9c4:	5c58      	ldrb	r0, [r3, r1]
     9c6:	2800      	cmp	r0, #0
     9c8:	f000 80af 	beq.w	b2a <loop+0x18a>
			outputflag = false;
     9cc:	2400      	movs	r4, #0
     9ce:	f103 0816 	add.w	r8, r3, #22
     9d2:	f103 0a66 	add.w	sl, r3, #102	; 0x66
		}
		return false;
	}
	float read(unsigned int binNumber) {
		if (binNumber > 511) return 0.0;
		return (float)(output[binNumber]) * (1.0 / 16384.0);
     9d6:	ed9f aa74 	vldr	s20, [pc, #464]	; ba8 <loop+0x208>
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
	}
	bool available() {
		if (outputflag == true) {
			outputflag = false;
     9da:	545c      	strb	r4, [r3, r1]
     9dc:	4625      	mov	r5, r4
     9de:	f8db 3000 	ldr.w	r3, [fp]
     9e2:	2105      	movs	r1, #5
                n = myFFT.read(i);
                if (n >= 0.01) {
                    Serial.print(n);
                    Serial.print(" ");
                    for (int j = 6 * i - random8(3); j < 6 * i + 6 + random8(3); j++) {
                        if (j > 0 && j < NUM_LEDS) {
     9e4:	eddf 8a71 	vldr	s17, [pc, #452]	; bac <loop+0x20c>
     9e8:	4871      	ldr	r0, [pc, #452]	; (bb0 <loop+0x210>)
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
     9ea:	6013      	str	r3, [r2, #0]
     9ec:	f004 fa64 	bl	4eb8 <usb_serial_write>
            msecs = 0;
            // each time new FFT data is available
            // print it all to the Arduino Serial Monitor
            Serial.print("FFT: ");
            for (i = 0; i < 40; i++) {
                n = myFFT.read(i);
     9f0:	ed9f 9b69 	vldr	d9, [pc, #420]	; b98 <loop+0x1f8>
		}
		return false;
	}
	float read(unsigned int binNumber) {
		if (binNumber > 511) return 0.0;
		return (float)(output[binNumber]) * (1.0 / 16384.0);
     9f4:	f838 3f02 	ldrh.w	r3, [r8, #2]!
     9f8:	ee08 3a10 	vmov	s16, r3
     9fc:	eeb8 8a48 	vcvt.f32.u32	s16, s16
     a00:	ee28 8a0a 	vmul.f32	s16, s16, s20
     a04:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
     a08:	eeb4 0bc9 	vcmpe.f64	d0, d9
     a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a10:	db7b      	blt.n	b0a <loop+0x16a>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a12:	2102      	movs	r1, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a14:	4e67      	ldr	r6, [pc, #412]	; (bb4 <loop+0x214>)
     a16:	4868      	ldr	r0, [pc, #416]	; (bb8 <loop+0x218>)
     a18:	1daf      	adds	r7, r5, #6
     a1a:	f004 fe05 	bl	5628 <Print::printFloat(double, unsigned char)>
     a1e:	2101      	movs	r1, #1
     a20:	4866      	ldr	r0, [pc, #408]	; (bbc <loop+0x21c>)
     a22:	f004 fa49 	bl	4eb8 <usb_serial_write>
     a26:	8831      	ldrh	r1, [r6, #0]
     a28:	f243 6319 	movw	r3, #13849	; 0x3619
     a2c:	eb01 2041 	add.w	r0, r1, r1, lsl #9
     a30:	461a      	mov	r2, r3
     a32:	eb01 0180 	add.w	r1, r1, r0, lsl #2
     a36:	440b      	add	r3, r1
     a38:	b29b      	uxth	r3, r3
     a3a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     a3e:	eb03 2413 	add.w	r4, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a42:	eb03 0381 	add.w	r3, r3, r1, lsl #2
                if (n >= 0.01) {
                    Serial.print(n);
                    Serial.print(" ");
     a46:	b2e4      	uxtb	r4, r4
     a48:	441a      	add	r2, r3
     a4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     a4e:	b292      	uxth	r2, r2
     a50:	eba5 2424 	sub.w	r4, r5, r4, asr #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     a54:	eb02 2312 	add.w	r3, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a58:	8032      	strh	r2, [r6, #0]
     a5a:	b2db      	uxtb	r3, r3
     a5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a60:	eb07 2323 	add.w	r3, r7, r3, asr #8
     a64:	429c      	cmp	r4, r3
     a66:	f280 808e 	bge.w	b86 <loop+0x1e6>
     a6a:	4d55      	ldr	r5, [pc, #340]	; (bc0 <loop+0x220>)
     a6c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     a70:	f8df 9168 	ldr.w	r9, [pc, #360]	; bdc <loop+0x23c>
     a74:	441d      	add	r5, r3
     a76:	e014      	b.n	aa2 <loop+0x102>
     a78:	8833      	ldrh	r3, [r6, #0]
     a7a:	f243 6219 	movw	r2, #13849	; 0x3619
     a7e:	3401      	adds	r4, #1
     a80:	3503      	adds	r5, #3
     a82:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     a86:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     a8a:	441a      	add	r2, r3
     a8c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     a8e:	eb02 2312 	add.w	r3, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a92:	8032      	strh	r2, [r6, #0]
     a94:	b2db      	uxtb	r3, r3
     a96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a9a:	eb07 2323 	add.w	r3, r7, r3, asr #8
     a9e:	42a3      	cmp	r3, r4
     aa0:	dd73      	ble.n	b8a <loop+0x1ea>
                    for (int j = 6 * i - random8(3); j < 6 * i + 6 + random8(3); j++) {
     aa2:	1e63      	subs	r3, r4, #1
     aa4:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
     aa8:	d8e6      	bhi.n	a78 <loop+0xd8>
                        if (j > 0 && j < NUM_LEDS) {
     aaa:	ee68 7a28 	vmul.f32	s15, s16, s17
     aae:	f899 2000 	ldrb.w	r2, [r9]
     ab2:	2301      	movs	r3, #1
     ab4:	4943      	ldr	r1, [pc, #268]	; (bc4 <loop+0x224>)
     ab6:	4422      	add	r2, r4
     ab8:	a805      	add	r0, sp, #20
     aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     abe:	9300      	str	r3, [sp, #0]
     ac0:	b2d2      	uxtb	r2, r2
     ac2:	edcd 7a03 	vstr	s15, [sp, #12]
     ac6:	f89d 300c 	ldrb.w	r3, [sp, #12]
     aca:	f002 fc6f 	bl	33ac <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     ace:	782a      	ldrb	r2, [r5, #0]
     ad0:	f89d 3014 	ldrb.w	r3, [sp, #20]
        g = qadd8( g, rhs.g);
     ad4:	7869      	ldrb	r1, [r5, #1]
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    if( t > 255) t = 255;
     ad6:	4413      	add	r3, r2
     ad8:	2bff      	cmp	r3, #255	; 0xff
     ada:	bfd8      	it	le
     adc:	b2da      	uxtble	r2, r3
     ade:	f89d 3015 	ldrb.w	r3, [sp, #21]
     ae2:	bfc8      	it	gt
     ae4:	22ff      	movgt	r2, #255	; 0xff
     ae6:	440b      	add	r3, r1
        b = qadd8( b, rhs.b);
     ae8:	78a9      	ldrb	r1, [r5, #2]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     aea:	702a      	strb	r2, [r5, #0]
     aec:	2bff      	cmp	r3, #255	; 0xff
     aee:	bfd8      	it	le
     af0:	b2da      	uxtble	r2, r3
        g = qadd8( g, rhs.g);
        b = qadd8( b, rhs.b);
     af2:	f89d 3016 	ldrb.w	r3, [sp, #22]
     af6:	bfc8      	it	gt
     af8:	22ff      	movgt	r2, #255	; 0xff
     afa:	440b      	add	r3, r1

    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
        g = qadd8( g, rhs.g);
     afc:	706a      	strb	r2, [r5, #1]
     afe:	2bff      	cmp	r3, #255	; 0xff
     b00:	bfd4      	ite	le
     b02:	b2db      	uxtble	r3, r3
     b04:	23ff      	movgt	r3, #255	; 0xff
        b = qadd8( b, rhs.b);
     b06:	70ab      	strb	r3, [r5, #2]
     b08:	e7b6      	b.n	a78 <loop+0xd8>
     b0a:	2105      	movs	r1, #5
     b0c:	482e      	ldr	r0, [pc, #184]	; (bc8 <loop+0x228>)
     b0e:	1daf      	adds	r7, r5, #6
     b10:	f004 f9d2 	bl	4eb8 <usb_serial_write>
        //fadeToBlackBy(leds, NUM_LEDS, 32);
        if (myFFT.available()) {
            msecs = 0;
            // each time new FFT data is available
            // print it all to the Arduino Serial Monitor
            Serial.print("FFT: ");
     b14:	45d0      	cmp	r8, sl
     b16:	463d      	mov	r5, r7
     b18:	f47f af6c 	bne.w	9f4 <loop+0x54>
                    c_index++;
                }
                else {
                    Serial.print("  -  "); // don't print "0.00"
                }
            }
     b1c:	4826      	ldr	r0, [pc, #152]	; (bb8 <loop+0x218>)
     b1e:	f004 fd33 	bl	5588 <Print::println()>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     b22:	482a      	ldr	r0, [pc, #168]	; (bcc <loop+0x22c>)
     b24:	7801      	ldrb	r1, [r0, #0]
     b26:	f002 fcd9 	bl	34dc <CFastLED::show(unsigned char)>
            Serial.println();
           FastLED.show();
        }
    } 
     b2a:	4a29      	ldr	r2, [pc, #164]	; (bd0 <loop+0x230>)
     b2c:	6813      	ldr	r3, [r2, #0]
     b2e:	07db      	lsls	r3, r3, #31
     b30:	d420      	bmi.n	b74 <loop+0x1d4>
     b32:	f8db 0000 	ldr.w	r0, [fp]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
     b36:	2414      	movs	r4, #20
     b38:	f8db 1000 	ldr.w	r1, [fp]
     b3c:	2501      	movs	r5, #1
     b3e:	4b25      	ldr	r3, [pc, #148]	; (bd4 <loop+0x234>)
     b40:	1a09      	subs	r1, r1, r0
     b42:	6015      	str	r5, [r2, #0]
     b44:	2913      	cmp	r1, #19
     b46:	e883 0011 	stmia.w	r3, {r0, r4}
     b4a:	d90e      	bls.n	b6a <loop+0x1ca>
     b4c:	f8db 4000 	ldr.w	r4, [fp]
    EVERY_N_MILLIS(20){
     b50:	2204      	movs	r2, #4
     b52:	f44f 7190 	mov.w	r1, #288	; 0x120
     b56:	481a      	ldr	r0, [pc, #104]	; (bc0 <loop+0x220>)
     b58:	601c      	str	r4, [r3, #0]
     b5a:	f002 fbad 	bl	32b8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
      fadeToBlackBy(leds, NUM_LEDS, 4);
     b5e:	2240      	movs	r2, #64	; 0x40
     b60:	f44f 7190 	mov.w	r1, #288	; 0x120
     b64:	4816      	ldr	r0, [pc, #88]	; (bc0 <loop+0x220>)
     b66:	f002 fba9 	bl	32bc <blur1d(CRGB*, unsigned short, unsigned char)>
      blur1d(leds,NUM_LEDS, 64);   
    }
     b6a:	b007      	add	sp, #28
     b6c:	ecbd 8b06 	vpop	{d8-d10}
     b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b74:	4b17      	ldr	r3, [pc, #92]	; (bd4 <loop+0x234>)
     b76:	f8db 2000 	ldr.w	r2, [fp]
     b7a:	e893 0003 	ldmia.w	r3, {r0, r1}
     b7e:	1a12      	subs	r2, r2, r0
     b80:	4291      	cmp	r1, r2
     b82:	d9e3      	bls.n	b4c <loop+0x1ac>
     b84:	e7f1      	b.n	b6a <loop+0x1ca>
     b86:	f8df 9054 	ldr.w	r9, [pc, #84]	; bdc <loop+0x23c>
                    Serial.print(" ");
                    for (int j = 6 * i - random8(3); j < 6 * i + 6 + random8(3); j++) {
                        if (j > 0 && j < NUM_LEDS) {
                            leds[j] += ColorFromPalette(myPal, j + c_index, n*1000, LINEARBLEND);
                        }
                    }
     b8a:	f899 3000 	ldrb.w	r3, [r9]
     b8e:	3301      	adds	r3, #1
     b90:	f889 3000 	strb.w	r3, [r9]
     b94:	e7be      	b.n	b14 <loop+0x174>
     b96:	bf00      	nop
     b98:	47ae147b 	.word	0x47ae147b
     b9c:	3f847ae1 	.word	0x3f847ae1
     ba0:	20005a4c 	.word	0x20005a4c
     ba4:	20005aa8 	.word	0x20005aa8
     ba8:	38800000 	.word	0x38800000
     bac:	447a0000 	.word	0x447a0000
     bb0:	2000005c 	.word	0x2000005c
     bb4:	20004ddc 	.word	0x20004ddc
     bb8:	20004e18 	.word	0x20004e18
     bbc:	20000068 	.word	0x20000068
     bc0:	200056bc 	.word	0x200056bc
     bc4:	20005a64 	.word	0x20005a64
     bc8:	20000064 	.word	0x20000064
     bcc:	200072d8 	.word	0x200072d8
     bd0:	20005a34 	.word	0x20005a34
     bd4:	20005a5c 	.word	0x20005a5c
     bd8:	20007304 	.word	0x20007304
     bdc:	200056b8 	.word	0x200056b8

00000be0 <_GLOBAL__sub_I_leds>:
        }
    } 
    EVERY_N_MILLIS(20){
      fadeToBlackBy(leds, NUM_LEDS, 4);
      blur1d(leds,NUM_LEDS, 64);   
    }
     be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     be4:	4e72      	ldr	r6, [pc, #456]	; (db0 <_GLOBAL__sub_I_leds+0x1d0>)
    // will be, by definition, different from the widths in the gradient
    // palette.  This code attempts to preserve "all the colors", rather than
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
     be6:	4973      	ldr	r1, [pc, #460]	; (db4 <_GLOBAL__sub_I_leds+0x1d4>)
     be8:	4873      	ldr	r0, [pc, #460]	; (db8 <_GLOBAL__sub_I_leds+0x1d8>)
     bea:	f7ff fdcb 	bl	784 <CRGBPalette16::operator=(unsigned char const*)>

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     bee:	4d73      	ldr	r5, [pc, #460]	; (dbc <_GLOBAL__sub_I_leds+0x1dc>)
     bf0:	2300      	movs	r3, #0
     bf2:	4f73      	ldr	r7, [pc, #460]	; (dc0 <_GLOBAL__sub_I_leds+0x1e0>)
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     bf4:	6832      	ldr	r2, [r6, #0]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     bf6:	726b      	strb	r3, [r5, #9]
     bf8:	602f      	str	r7, [r5, #0]
     bfa:	612b      	str	r3, [r5, #16]
			active = false;
     bfc:	722b      	strb	r3, [r5, #8]
			destination_list = NULL;
     bfe:	60eb      	str	r3, [r5, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     c00:	b90a      	cbnz	r2, c06 <_GLOBAL__sub_I_leds+0x26>
     c02:	e0ce      	b.n	da2 <_GLOBAL__sub_I_leds+0x1c2>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     c04:	461a      	mov	r2, r3
     c06:	6953      	ldr	r3, [r2, #20]
     c08:	2b00      	cmp	r3, #0
     c0a:	d1fb      	bne.n	c04 <_GLOBAL__sub_I_leds+0x24>
				p->next_update = this;
     c0c:	6155      	str	r5, [r2, #20]
			}
			next_update = NULL;
     c0e:	f04f 0800 	mov.w	r8, #0

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     c12:	4c6c      	ldr	r4, [pc, #432]	; (dc4 <_GLOBAL__sub_I_leds+0x1e4>)
#include "DMAChannel.h"

class AudioInputI2S : public AudioStream
{
public:
	AudioInputI2S(void) : AudioStream(0, NULL) { begin(); }
     c14:	4b6c      	ldr	r3, [pc, #432]	; (dc8 <_GLOBAL__sub_I_leds+0x1e8>)
     c16:	4869      	ldr	r0, [pc, #420]	; (dbc <_GLOBAL__sub_I_leds+0x1dc>)
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     c18:	f8c5 8014 	str.w	r8, [r5, #20]
			cpu_cycles = 0;
     c1c:	f8a5 8004 	strh.w	r8, [r5, #4]
			cpu_cycles_max = 0;
     c20:	f8a5 8006 	strh.w	r8, [r5, #6]
			numConnections = 0;
     c24:	f885 800a 	strb.w	r8, [r5, #10]
     c28:	602b      	str	r3, [r5, #0]
     c2a:	f000 fd8d 	bl	1748 <AudioInputI2S::begin()>

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     c2e:	f504 50a2 	add.w	r0, r4, #5184	; 0x1440
     c32:	f04f 0c01 	mov.w	ip, #1
			active = false;
			destination_list = NULL;
     c36:	4643      	mov	r3, r8

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     c38:	6027      	str	r7, [r4, #0]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     c3a:	4641      	mov	r1, r8
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     c3c:	4602      	mov	r2, r0
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     c3e:	f884 8008 	strb.w	r8, [r4, #8]
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     c42:	46a6      	mov	lr, r4
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     c44:	f8c4 800c 	str.w	r8, [r4, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     c48:	f884 c009 	strb.w	ip, [r4, #9]
     c4c:	6120      	str	r0, [r4, #16]
     c4e:	e001      	b.n	c54 <_GLOBAL__sub_I_leds+0x74>
     c50:	f8de 2010 	ldr.w	r2, [lr, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     c54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     c58:	3301      	adds	r3, #1
     c5a:	7a62      	ldrb	r2, [r4, #9]
     c5c:	4859      	ldr	r0, [pc, #356]	; (dc4 <_GLOBAL__sub_I_leds+0x1e4>)
     c5e:	429a      	cmp	r2, r3
     c60:	dcf6      	bgt.n	c50 <_GLOBAL__sub_I_leds+0x70>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     c62:	6832      	ldr	r2, [r6, #0]
     c64:	4b52      	ldr	r3, [pc, #328]	; (db0 <_GLOBAL__sub_I_leds+0x1d0>)
     c66:	b90a      	cbnz	r2, c6c <_GLOBAL__sub_I_leds+0x8c>
     c68:	e09d      	b.n	da6 <_GLOBAL__sub_I_leds+0x1c6>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     c6a:	461a      	mov	r2, r3
     c6c:	6953      	ldr	r3, [r2, #20]
     c6e:	2b00      	cmp	r3, #0
     c70:	d1fb      	bne.n	c6a <_GLOBAL__sub_I_leds+0x8a>
				p->next_update = this;
     c72:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
     c74:	f04f 0900 	mov.w	r9, #0

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     c78:	f241 413c 	movw	r1, #5180	; 0x143c
     c7c:	4853      	ldr	r0, [pc, #332]	; (dcc <_GLOBAL__sub_I_leds+0x1ec>)
     c7e:	f241 4c3d 	movw	ip, #5181	; 0x143d

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     c82:	f8df 8150 	ldr.w	r8, [pc, #336]	; dd4 <_GLOBAL__sub_I_leds+0x1f4>
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     c86:	464a      	mov	r2, r9

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     c88:	f8df e170 	ldr.w	lr, [pc, #368]	; dfc <_GLOBAL__sub_I_leds+0x21c>
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     c8c:	2301      	movs	r3, #1

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     c8e:	f804 9001 	strb.w	r9, [r4, r1]
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     c92:	f44f 6180 	mov.w	r1, #1024	; 0x400

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     c96:	f8c4 0418 	str.w	r0, [r4, #1048]	; 0x418
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     c9a:	f8c4 9014 	str.w	r9, [r4, #20]
			cpu_cycles = 0;
     c9e:	f8a4 9004 	strh.w	r9, [r4, #4]
			cpu_cycles_max = 0;
     ca2:	f8a4 9006 	strh.w	r9, [r4, #6]
			numConnections = 0;
     ca6:	f884 900a 	strb.w	r9, [r4, #10]
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     caa:	4849      	ldr	r0, [pc, #292]	; (dd0 <_GLOBAL__sub_I_leds+0x1f0>)

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     cac:	f8c4 e000 	str.w	lr, [r4]
     cb0:	f804 900c 	strb.w	r9, [r4, ip]
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     cb4:	f005 f8ae 	bl	5e14 <arm_cfft_radix4_init_q15>

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     cb8:	f108 0018 	add.w	r0, r8, #24
     cbc:	f04f 0e02 	mov.w	lr, #2
     cc0:	f8c8 7000 	str.w	r7, [r8]
			active = false;
			destination_list = NULL;
     cc4:	464b      	mov	r3, r9
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     cc6:	4649      	mov	r1, r9
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     cc8:	4602      	mov	r2, r0
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     cca:	f888 9008 	strb.w	r9, [r8, #8]
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     cce:	4647      	mov	r7, r8
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     cd0:	f8c8 900c 	str.w	r9, [r8, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     cd4:	f888 e009 	strb.w	lr, [r8, #9]
     cd8:	f8c8 0010 	str.w	r0, [r8, #16]
     cdc:	e000      	b.n	ce0 <_GLOBAL__sub_I_leds+0x100>
     cde:	693a      	ldr	r2, [r7, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     ce0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     ce4:	3301      	adds	r3, #1
     ce6:	f898 2009 	ldrb.w	r2, [r8, #9]
     cea:	483a      	ldr	r0, [pc, #232]	; (dd4 <_GLOBAL__sub_I_leds+0x1f4>)
     cec:	429a      	cmp	r2, r3
     cee:	dcf6      	bgt.n	cde <_GLOBAL__sub_I_leds+0xfe>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     cf0:	6832      	ldr	r2, [r6, #0]
     cf2:	4b2f      	ldr	r3, [pc, #188]	; (db0 <_GLOBAL__sub_I_leds+0x1d0>)
     cf4:	b90a      	cbnz	r2, cfa <_GLOBAL__sub_I_leds+0x11a>
     cf6:	e058      	b.n	daa <_GLOBAL__sub_I_leds+0x1ca>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     cf8:	461a      	mov	r2, r3
     cfa:	6953      	ldr	r3, [r2, #20]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d1fb      	bne.n	cf8 <_GLOBAL__sub_I_leds+0x118>
				p->next_update = this;
     d00:	f8c2 8014 	str.w	r8, [r2, #20]
			}
			next_update = NULL;
     d04:	2600      	movs	r6, #0
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d06:	f8df 90f8 	ldr.w	r9, [pc, #248]	; e00 <_GLOBAL__sub_I_leds+0x220>
#include "DMAChannel.h"

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
     d0a:	4b33      	ldr	r3, [pc, #204]	; (dd8 <_GLOBAL__sub_I_leds+0x1f8>)
     d0c:	4831      	ldr	r0, [pc, #196]	; (dd4 <_GLOBAL__sub_I_leds+0x1f4>)
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     d0e:	f8c8 6014 	str.w	r6, [r8, #20]
			cpu_cycles = 0;
     d12:	f8a8 6004 	strh.w	r6, [r8, #4]
			cpu_cycles_max = 0;
     d16:	f8a8 6006 	strh.w	r6, [r8, #6]
			numConnections = 0;
     d1a:	f888 600a 	strb.w	r6, [r8, #10]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d1e:	4f2f      	ldr	r7, [pc, #188]	; (ddc <_GLOBAL__sub_I_leds+0x1fc>)
     d20:	f8c8 3000 	str.w	r3, [r8]
     d24:	f000 ff34 	bl	1b90 <AudioOutputI2S::begin()>
		{ isConnected = false;
		  connect(); }
     d28:	4648      	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d2a:	f8c9 4004 	str.w	r4, [r9, #4]
     d2e:	f889 6008 	strb.w	r6, [r9, #8]
     d32:	f8c9 5000 	str.w	r5, [r9]
     d36:	f889 6009 	strb.w	r6, [r9, #9]
     d3a:	f8c9 600c 	str.w	r6, [r9, #12]
		{ isConnected = false;
     d3e:	f889 6010 	strb.w	r6, [r9, #16]
		  connect(); }
     d42:	f004 fa13 	bl	516c <AudioConnection::connect()>
AudioInputI2S          audioInput;         // audio shield: mic or line-in
AudioAnalyzeFFT1024    myFFT;
AudioOutputI2S         audioOutput;        // audio shield: headphones & line-out

// Connect either the live input or synthesized sine wave
AudioConnection patchCord1(audioInput, 0, myFFT, 0);
     d46:	4a26      	ldr	r2, [pc, #152]	; (de0 <_GLOBAL__sub_I_leds+0x200>)
     d48:	4648      	mov	r0, r9
     d4a:	4926      	ldr	r1, [pc, #152]	; (de4 <_GLOBAL__sub_I_leds+0x204>)
     d4c:	f005 f8e8 	bl	5f20 <__aeabi_atexit>
     d50:	4638      	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d52:	4c25      	ldr	r4, [pc, #148]	; (de8 <_GLOBAL__sub_I_leds+0x208>)
     d54:	723e      	strb	r6, [r7, #8]
     d56:	727e      	strb	r6, [r7, #9]
     d58:	60fe      	str	r6, [r7, #12]
		{ isConnected = false;
     d5a:	743e      	strb	r6, [r7, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d5c:	e887 0120 	stmia.w	r7, {r5, r8}
		{ isConnected = false;
		  connect(); }
     d60:	f004 fa04 	bl	516c <AudioConnection::connect()>

AudioConnection          patchCord3(audioInput, 0, audioOutput, 0);
     d64:	4a1e      	ldr	r2, [pc, #120]	; (de0 <_GLOBAL__sub_I_leds+0x200>)
     d66:	491f      	ldr	r1, [pc, #124]	; (de4 <_GLOBAL__sub_I_leds+0x204>)
     d68:	4638      	mov	r0, r7
     d6a:	f005 f8d9 	bl	5f20 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d6e:	2301      	movs	r3, #1
		{ isConnected = false;
		  connect(); }
     d70:	4620      	mov	r0, r4
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d72:	60e6      	str	r6, [r4, #12]
     d74:	7223      	strb	r3, [r4, #8]
     d76:	7263      	strb	r3, [r4, #9]
		{ isConnected = false;
     d78:	7426      	strb	r6, [r4, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d7a:	e884 0120 	stmia.w	r4, {r5, r8}
		{ isConnected = false;
		  connect(); }
     d7e:	f004 f9f5 	bl	516c <AudioConnection::connect()>
AudioConnection          patchCord4(audioInput, 1, audioOutput, 1);
     d82:	4620      	mov	r0, r4
     d84:	4a16      	ldr	r2, [pc, #88]	; (de0 <_GLOBAL__sub_I_leds+0x200>)
     d86:	4917      	ldr	r1, [pc, #92]	; (de4 <_GLOBAL__sub_I_leds+0x204>)
     d88:	f005 f8ca 	bl	5f20 <__aeabi_atexit>
     d8c:	4b17      	ldr	r3, [pc, #92]	; (dec <_GLOBAL__sub_I_leds+0x20c>)
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
     d8e:	4818      	ldr	r0, [pc, #96]	; (df0 <_GLOBAL__sub_I_leds+0x210>)
#include "AudioControl.h"

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
     d90:	220a      	movs	r2, #10
     d92:	681c      	ldr	r4, [r3, #0]
     d94:	4917      	ldr	r1, [pc, #92]	; (df4 <_GLOBAL__sub_I_leds+0x214>)
     d96:	4b18      	ldr	r3, [pc, #96]	; (df8 <_GLOBAL__sub_I_leds+0x218>)
     d98:	6004      	str	r4, [r0, #0]
     d9a:	6019      	str	r1, [r3, #0]
     d9c:	721a      	strb	r2, [r3, #8]
     d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     da2:	6035      	str	r5, [r6, #0]
     da4:	e733      	b.n	c0e <_GLOBAL__sub_I_leds+0x2e>
     da6:	6018      	str	r0, [r3, #0]
     da8:	e764      	b.n	c74 <_GLOBAL__sub_I_leds+0x94>
     daa:	6018      	str	r0, [r3, #0]
     dac:	e7aa      	b.n	d04 <_GLOBAL__sub_I_leds+0x124>
     dae:	bf00      	nop
     db0:	20007544 	.word	0x20007544
     db4:	6000172c 	.word	0x6000172c
     db8:	20005a64 	.word	0x20005a64
     dbc:	20005a1c 	.word	0x20005a1c
     dc0:	20000008 	.word	0x20000008
     dc4:	20005aa8 	.word	0x20005aa8
     dc8:	2000110c 	.word	0x2000110c
     dcc:	200008dc 	.word	0x200008dc
     dd0:	20006eec 	.word	0x20006eec
     dd4:	20006f10 	.word	0x20006f10
     dd8:	20001118 	.word	0x20001118
     ddc:	20005a38 	.word	0x20005a38
     de0:	20004d14 	.word	0x20004d14
     de4:	000000ad 	.word	0x000000ad
     de8:	20006efc 	.word	0x20006efc
     dec:	20007304 	.word	0x20007304
     df0:	20005a4c 	.word	0x20005a4c
     df4:	200010f0 	.word	0x200010f0
     df8:	20005a50 	.word	0x20005a50
     dfc:	200010e4 	.word	0x200010e4
     e00:	20005a94 	.word	0x20005a94

00000e04 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
     e04:	4804      	ldr	r0, [pc, #16]	; (e18 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
     e06:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     e08:	4411      	add	r1, r2
     e0a:	e001      	b.n	e10 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     e0c:	4299      	cmp	r1, r3
     e0e:	d302      	bcc.n	e16 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
     e10:	6803      	ldr	r3, [r0, #0]
     e12:	429a      	cmp	r2, r3
     e14:	d9fa      	bls.n	e0c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
     e16:	4770      	bx	lr
     e18:	20007304 	.word	0x20007304

00000e1c <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
     e1c:	b410      	push	{r4}
     e1e:	4a0c      	ldr	r2, [pc, #48]	; (e50 <VisualMicroDebug::outPacketStart(bool)+0x34>)
     e20:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DEBUGGER_TYPE != VM_DEBUGGER_TYPE_NET_UDP)
	if (!noWait)
     e22:	b971      	cbnz	r1, e42 <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
     e24:	6841      	ldr	r1, [r0, #4]
     e26:	6813      	ldr	r3, [r2, #0]
     e28:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
     e2a:	2931      	cmp	r1, #49	; 0x31
     e2c:	d809      	bhi.n	e42 <VisualMicroDebug::outPacketStart(bool)+0x26>
     e2e:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     e30:	f100 0332 	add.w	r3, r0, #50	; 0x32
     e34:	1a59      	subs	r1, r3, r1
     e36:	e001      	b.n	e3c <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     e38:	4299      	cmp	r1, r3
     e3a:	d302      	bcc.n	e42 <VisualMicroDebug::outPacketStart(bool)+0x26>
     e3c:	6813      	ldr	r3, [r2, #0]
     e3e:	4298      	cmp	r0, r3
     e40:	d9fa      	bls.n	e38 <VisualMicroDebug::outPacketStart(bool)+0x1c>
     e42:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
     e44:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     e46:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
     e48:	f85d 4b04 	ldr.w	r4, [sp], #4
     e4c:	4770      	bx	lr
     e4e:	bf00      	nop
     e50:	20007304 	.word	0x20007304

00000e54 <VisualMicroDebug::outPacketEnd()>:
     e54:	4770      	bx	lr
     e56:	bf00      	nop

00000e58 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
     e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     e5c:	f002 bdc0 	b.w	39e0 <delay>

00000e60 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
     e60:	2300      	movs	r3, #0
     e62:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
     e64:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
     e66:	b141      	cbz	r1, e7a <VisualMicroDebug::init(unsigned long)+0x1a>
     e68:	4804      	ldr	r0, [pc, #16]	; (e7c <VisualMicroDebug::init(unsigned long)+0x1c>)
     e6a:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     e6c:	4411      	add	r1, r2
     e6e:	e001      	b.n	e74 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     e70:	4299      	cmp	r1, r3
     e72:	d302      	bcc.n	e7a <VisualMicroDebug::init(unsigned long)+0x1a>
     e74:	6803      	ldr	r3, [r0, #0]
     e76:	429a      	cmp	r2, r3
     e78:	d9fa      	bls.n	e70 <VisualMicroDebug::init(unsigned long)+0x10>
     e7a:	4770      	bx	lr
     e7c:	20007304 	.word	0x20007304

00000e80 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
     e80:	b538      	push	{r3, r4, r5, lr}
     e82:	4c0f      	ldr	r4, [pc, #60]	; (ec0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
     e84:	460d      	mov	r5, r1
     e86:	2106      	movs	r1, #6
     e88:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     e8a:	6043      	str	r3, [r0, #4]
     e8c:	480d      	ldr	r0, [pc, #52]	; (ec4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
     e8e:	f004 f813 	bl	4eb8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e92:	220a      	movs	r2, #10
     e94:	2300      	movs	r3, #0
     e96:	4629      	mov	r1, r5
     e98:	480b      	ldr	r0, [pc, #44]	; (ec8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     e9a:	f004 fb85 	bl	55a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     e9e:	2106      	movs	r1, #6
     ea0:	480a      	ldr	r0, [pc, #40]	; (ecc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
     ea2:	f004 f809 	bl	4eb8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ea6:	4808      	ldr	r0, [pc, #32]	; (ec8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     ea8:	f004 fb6e 	bl	5588 <Print::println()>
     eac:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     eae:	f102 0132 	add.w	r1, r2, #50	; 0x32
     eb2:	e001      	b.n	eb8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     eb4:	4299      	cmp	r1, r3
     eb6:	d302      	bcc.n	ebe <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
     eb8:	6823      	ldr	r3, [r4, #0]
     eba:	429a      	cmp	r2, r3
     ebc:	d9fa      	bls.n	eb4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
     ebe:	bd38      	pop	{r3, r4, r5, pc}
     ec0:	20007304 	.word	0x20007304
     ec4:	20000084 	.word	0x20000084
     ec8:	20004e18 	.word	0x20004e18
     ecc:	2000008c 	.word	0x2000008c

00000ed0 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
     ed0:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
     ed2:	7e03      	ldrb	r3, [r0, #24]
     ed4:	b90b      	cbnz	r3, eda <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
     ed6:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
     ed8:	bd38      	pop	{r3, r4, r5, pc}
     eda:	460d      	mov	r5, r1
     edc:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     ede:	f003 ff85 	bl	4dec <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
     ee2:	f010 0fff 	tst.w	r0, #255	; 0xff
     ee6:	d101      	bne.n	eec <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
     ee8:	2065      	movs	r0, #101	; 0x65
     eea:	bd38      	pop	{r3, r4, r5, pc}
     eec:	f003 ff7e 	bl	4dec <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
     ef0:	f010 0fff 	tst.w	r0, #255	; 0xff
     ef4:	d0f8      	beq.n	ee8 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
     ef6:	f003 ffb9 	bl	4e6c <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
     efa:	b2c0      	uxtb	r0, r0
     efc:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
     f00:	2b1e      	cmp	r3, #30
     f02:	d8f3      	bhi.n	eec <VisualMicroDebug::breakWait(unsigned char)+0x1c>
     f04:	a201      	add	r2, pc, #4	; (adr r2, f0c <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
     f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f0a:	bf00      	nop
     f0c:	00000f95 	.word	0x00000f95
     f10:	00000eed 	.word	0x00000eed
     f14:	00000eed 	.word	0x00000eed
     f18:	00000eed 	.word	0x00000eed
     f1c:	00000eed 	.word	0x00000eed
     f20:	00000eed 	.word	0x00000eed
     f24:	00000eed 	.word	0x00000eed
     f28:	00000eed 	.word	0x00000eed
     f2c:	00000eed 	.word	0x00000eed
     f30:	00000eed 	.word	0x00000eed
     f34:	00000eed 	.word	0x00000eed
     f38:	00000f89 	.word	0x00000f89
     f3c:	00000eed 	.word	0x00000eed
     f40:	00000eed 	.word	0x00000eed
     f44:	00000eed 	.word	0x00000eed
     f48:	00000eed 	.word	0x00000eed
     f4c:	00000ed7 	.word	0x00000ed7
     f50:	00000eed 	.word	0x00000eed
     f54:	00000eed 	.word	0x00000eed
     f58:	00000eed 	.word	0x00000eed
     f5c:	00000eed 	.word	0x00000eed
     f60:	00000eed 	.word	0x00000eed
     f64:	00000eed 	.word	0x00000eed
     f68:	00000eed 	.word	0x00000eed
     f6c:	00000eed 	.word	0x00000eed
     f70:	00000ed7 	.word	0x00000ed7
     f74:	00000eed 	.word	0x00000eed
     f78:	00000eed 	.word	0x00000eed
     f7c:	00000eed 	.word	0x00000eed
     f80:	00000eed 	.word	0x00000eed
     f84:	00000ed9 	.word	0x00000ed9
		{

		case 'c':
			sendContinuedACK(breakPointId);
     f88:	4620      	mov	r0, r4
     f8a:	4629      	mov	r1, r5
     f8c:	f7ff ff78 	bl	e80 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
     f90:	2063      	movs	r0, #99	; 0x63
     f92:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     f94:	2300      	movs	r3, #0
			return 'c';
     f96:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     f98:	7623      	strb	r3, [r4, #24]
     f9a:	bd38      	pop	{r3, r4, r5, pc}

00000f9c <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	4605      	mov	r5, r0
     fa0:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
     fa2:	b1a9      	cbz	r1, fd0 <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
     fa4:	2301      	movs	r3, #1
     fa6:	4c0b      	ldr	r4, [pc, #44]	; (fd4 <VisualMicroDebug::start(bool, bool)+0x38>)
     fa8:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     faa:	2100      	movs	r1, #0
     fac:	4628      	mov	r0, r5
     fae:	f7ff ff8f 	bl	ed0 <VisualMicroDebug::breakWait(unsigned char)>
     fb2:	2863      	cmp	r0, #99	; 0x63
     fb4:	d00c      	beq.n	fd0 <VisualMicroDebug::start(bool, bool)+0x34>
     fb6:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     fb8:	1c51      	adds	r1, r2, #1
     fba:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     fbc:	429a      	cmp	r2, r3
     fbe:	d8f4      	bhi.n	faa <VisualMicroDebug::start(bool, bool)+0xe>
     fc0:	4299      	cmp	r1, r3
     fc2:	d2fa      	bcs.n	fba <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     fc4:	2100      	movs	r1, #0
     fc6:	4628      	mov	r0, r5
     fc8:	f7ff ff82 	bl	ed0 <VisualMicroDebug::breakWait(unsigned char)>
     fcc:	2863      	cmp	r0, #99	; 0x63
     fce:	d1f2      	bne.n	fb6 <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
     fd0:	762e      	strb	r6, [r5, #24]
     fd2:	bd70      	pop	{r4, r5, r6, pc}
     fd4:	20007304 	.word	0x20007304

00000fd8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
     fd8:	4b03      	ldr	r3, [pc, #12]	; (fe8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
     fda:	2200      	movs	r2, #0
     fdc:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
     fde:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
     fe0:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
     fe2:	615a      	str	r2, [r3, #20]
     fe4:	4770      	bx	lr
     fe6:	bf00      	nop
     fe8:	20006f30 	.word	0x20006f30

00000fec <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
     fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
     ff0:	f500 7e80 	add.w	lr, r0, #256	; 0x100

00000ff4 <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
     ff4:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
     ff8:	e8b2 1540 	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
     ffc:	eac5 4306 	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    1000:	eac6 4425 	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    1004:	eac7 4508 	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    1008:	eac8 4627 	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    100c:	eac9 470a 	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    1010:	eaca 4829 	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    1014:	eacb 490c 	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    1018:	eacc 4a2b 	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    101c:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    1020:	4586      	cmp	lr, r0
	bne .loopLR
    1022:	d1e7      	bne.n	ff4 <.loopLR>

	pop	{r4-r11,r14}	
    1024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
    1028:	4770      	bx	lr

0000102a <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    102a:	f04f 0200 	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    102e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    1032:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    1036:	bf00      	nop

00001038 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    1038:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    103c:	eac5 0302 	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    1040:	eac2 4425 	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    1044:	eac7 0502 	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    1048:	eac2 4627 	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    104c:	eac9 0702 	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    1050:	eac2 4829 	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    1054:	eacb 0902 	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    1058:	eac2 4a2b 	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    105c:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    1060:	4584      	cmp	ip, r0
	bne .loopL
    1062:	d1e9      	bne.n	1038 <.loopL>

	pop	{r4-r11}
    1064:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    1068:	4770      	bx	lr

0000106a <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    106a:	f04f 0200 	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    106e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    1072:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    1076:	bf00      	nop

00001078 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    1078:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    107c:	eac2 4305 	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    1080:	eac2 0405 	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    1084:	eac2 4507 	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    1088:	eac2 0607 	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    108c:	eac2 4709 	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    1090:	eac2 0809 	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    1094:	eac2 490b 	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    1098:	eac2 0a0b 	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    109c:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    10a0:	4584      	cmp	ip, r0
	bne .loopR
    10a2:	d1e9      	bne.n	1078 <.loopR>

	pop	{r4-r11}
    10a4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    10a8:	4770      	bx	lr

000010aa <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    10aa:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    10ae:	9c08      	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    10b0:	f500 7b00 	add.w	fp, r0, #512	; 0x200

000010b4 <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    10b4:	f851 5b04 	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    10b8:	f853 6b04 	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    10bc:	eac5 4706 	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    10c0:	eac6 4925 	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    10c4:	f852 5b04 	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    10c8:	f854 6b04 	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    10cc:	eac5 4806 	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    10d0:	eac6 4a25 	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    10d4:	e8a0 0780 	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    10d8:	4583      	cmp	fp, r0
	bne .loopQuad
    10da:	d1eb      	bne.n	10b4 <.loopQuad>

	pop	{r4-r11}
    10dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    10e0:	4770      	bx	lr
    10e2:	bf00      	nop

000010e4 <AudioAnalyzeFFT1024::update()>:
	}

}

void AudioAnalyzeFFT1024::update(void)
{
    10e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	audio_block_t *block;

	block = receiveReadOnly();
    10e6:	2100      	movs	r1, #0
	}

}

void AudioAnalyzeFFT1024::update(void)
{
    10e8:	4605      	mov	r5, r0
	audio_block_t *block;

	block = receiveReadOnly();
    10ea:	f004 f833 	bl	5154 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
    10ee:	2800      	cmp	r0, #0
    10f0:	f000 80d3 	beq.w	129a <AudioAnalyzeFFT1024::update()+0x1b6>

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
    10f4:	f241 433c 	movw	r3, #5180	; 0x143c
    10f8:	5ceb      	ldrb	r3, [r5, r3]
    10fa:	2b07      	cmp	r3, #7
    10fc:	f200 80cd 	bhi.w	129a <AudioAnalyzeFFT1024::update()+0x1b6>
    1100:	e8df f003 	tbb	[pc, r3]
    1104:	e1dad3cc 	.word	0xe1dad3cc
    1108:	04f6efe8 	.word	0x04f6efe8
		break;
	case 7:
		blocklist[7] = block;
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
    110c:	f8d5 741c 	ldr.w	r7, [r5, #1052]	; 0x41c
    1110:	f505 6487 	add.w	r4, r5, #1080	; 0x438
    1114:	f205 413c 	addw	r1, r5, #1084	; 0x43c
	case 6:
		blocklist[6] = block;
		state = 7;
		break;
	case 7:
		blocklist[7] = block;
    1118:	f8c5 0438 	str.w	r0, [r5, #1080]	; 0x438
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
    111c:	1d3b      	adds	r3, r7, #4
    111e:	4622      	mov	r2, r4
    1120:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1124:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1128:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    112a:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    112e:	d1f9      	bne.n	1124 <AudioAnalyzeFFT1024::update()+0x40>
	case 7:
		blocklist[7] = block;
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
    1130:	f8d5 7420 	ldr.w	r7, [r5, #1056]	; 0x420
    1134:	f505 62c7 	add.w	r2, r5, #1592	; 0x638
    1138:	1d3b      	adds	r3, r7, #4
    113a:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    113e:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1142:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1144:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1148:	d1f9      	bne.n	113e <AudioAnalyzeFFT1024::update()+0x5a>
		blocklist[7] = block;
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
    114a:	f8d5 7424 	ldr.w	r7, [r5, #1060]	; 0x424
    114e:	f605 0238 	addw	r2, r5, #2104	; 0x838
    1152:	1d3b      	adds	r3, r7, #4
    1154:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1158:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    115c:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    115e:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1162:	d1f9      	bne.n	1158 <AudioAnalyzeFFT1024::update()+0x74>
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
    1164:	f8d5 7428 	ldr.w	r7, [r5, #1064]	; 0x428
    1168:	f605 2238 	addw	r2, r5, #2616	; 0xa38
    116c:	1d3b      	adds	r3, r7, #4
    116e:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1172:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1176:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1178:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    117c:	d1f9      	bne.n	1172 <AudioAnalyzeFFT1024::update()+0x8e>
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
    117e:	f8d5 742c 	ldr.w	r7, [r5, #1068]	; 0x42c
    1182:	f605 4238 	addw	r2, r5, #3128	; 0xc38
    1186:	1d3b      	adds	r3, r7, #4
    1188:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    118c:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1190:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1192:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1196:	d1f9      	bne.n	118c <AudioAnalyzeFFT1024::update()+0xa8>
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
    1198:	f8d5 7430 	ldr.w	r7, [r5, #1072]	; 0x430
    119c:	f605 6238 	addw	r2, r5, #3640	; 0xe38
    11a0:	1d3b      	adds	r3, r7, #4
    11a2:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    11a6:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    11aa:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    11ac:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    11b0:	d1f9      	bne.n	11a6 <AudioAnalyzeFFT1024::update()+0xc2>
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
    11b2:	f8d5 7434 	ldr.w	r7, [r5, #1076]	; 0x434
    11b6:	f241 0238 	movw	r2, #4152	; 0x1038
    11ba:	1d3b      	adds	r3, r7, #4
    11bc:	442a      	add	r2, r5
    11be:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    11c2:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    11c6:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    11c8:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    11cc:	d1f9      	bne.n	11c2 <AudioAnalyzeFFT1024::update()+0xde>
    11ce:	f241 2238 	movw	r2, #4664	; 0x1238
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
    11d2:	1d03      	adds	r3, r0, #4
    11d4:	f500 7082 	add.w	r0, r0, #260	; 0x104
    11d8:	442a      	add	r2, r5
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    11da:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    11de:	4283      	cmp	r3, r0
		*dst++ = *src++;  // real sample plus a zero for imaginary
    11e0:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    11e4:	d1f9      	bne.n	11da <AudioAnalyzeFFT1024::update()+0xf6>
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
		if (window) apply_window_to_fft_buffer(buffer, window);
    11e6:	f8d5 0418 	ldr.w	r0, [r5, #1048]	; 0x418
    11ea:	b180      	cbz	r0, 120e <AudioAnalyzeFFT1024::update()+0x12a>
    11ec:	f505 6288 	add.w	r2, r5, #1088	; 0x440
    11f0:	f500 6700 	add.w	r7, r0, #2048	; 0x800
{
	int16_t *buf = (int16_t *)buffer;
	const int16_t *win = (int16_t *)window;;

	for (int i=0; i < 1024; i++) {
		int32_t val = *buf * *win++;
    11f4:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
    11f8:	3204      	adds	r2, #4
    11fa:	f930 6b02 	ldrsh.w	r6, [r0], #2
		//*buf = signed_saturate_rshift(val, 16, 15);
		*buf = val >> 15;
    11fe:	fb03 f306 	mul.w	r3, r3, r6
static void apply_window_to_fft_buffer(void *buffer, const void *window)
{
	int16_t *buf = (int16_t *)buffer;
	const int16_t *win = (int16_t *)window;;

	for (int i=0; i < 1024; i++) {
    1202:	4287      	cmp	r7, r0
		int32_t val = *buf * *win++;
		//*buf = signed_saturate_rshift(val, 16, 15);
		*buf = val >> 15;
    1204:	ea4f 33e3 	mov.w	r3, r3, asr #15
    1208:	f822 3c08 	strh.w	r3, [r2, #-8]
static void apply_window_to_fft_buffer(void *buffer, const void *window)
{
	int16_t *buf = (int16_t *)buffer;
	const int16_t *win = (int16_t *)window;;

	for (int i=0; i < 1024; i++) {
    120c:	d1f2      	bne.n	11f4 <AudioAnalyzeFFT1024::update()+0x110>
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
		if (window) apply_window_to_fft_buffer(buffer, window);
		arm_cfft_radix4_q15(&fft_inst, buffer);
    120e:	f241 4044 	movw	r0, #5188	; 0x1444
    1212:	f205 4716 	addw	r7, r5, #1046	; 0x416
    1216:	4e3a      	ldr	r6, [pc, #232]	; (1300 <AudioAnalyzeFFT1024::update()+0x21c>)
    1218:	4428      	add	r0, r5
    121a:	f004 fddd 	bl	5dd8 <arm_cfft_radix4_q15>
    121e:	f105 0016 	add.w	r0, r5, #22
		// TODO: support averaging multiple copies
		for (int i=0; i < 512; i++) {
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
    1222:	f854 1f04 	ldr.w	r1, [r4, #4]!
// computes ((a[15:0] * b[15:0]) + (a[31:16] * b[31:16]))
static inline int32_t multiply_16tx16t_add_16bx16b(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16tx16t_add_16bx16b(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smuad %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1226:	fb21 f101 	smuad	r1, r1, r1
}

inline uint32_t sqrt_uint32_approx(uint32_t in) __attribute__((always_inline,unused));
inline uint32_t sqrt_uint32_approx(uint32_t in)
{
	uint32_t n = sqrt_integer_guess_table[__builtin_clz(in)];
    122a:	fab1 f381 	clz	r3, r1
    122e:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
	n = ((in / n) + n) / 2;
    1232:	fbb1 f3f2 	udiv	r3, r1, r2
    1236:	441a      	add	r2, r3
    1238:	0853      	lsrs	r3, r2, #1
	n = ((in / n) + n) / 2;
    123a:	fbb1 f1f3 	udiv	r1, r1, r3
    123e:	440b      	add	r3, r1
			uint32_t magsq = multiply_16tx16t_add_16bx16b(tmp, tmp);
			output[i] = sqrt_uint32_approx(magsq);
    1240:	085b      	lsrs	r3, r3, #1
    1242:	f820 3f02 	strh.w	r3, [r0, #2]!
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
		if (window) apply_window_to_fft_buffer(buffer, window);
		arm_cfft_radix4_q15(&fft_inst, buffer);
		// TODO: support averaging multiple copies
		for (int i=0; i < 512; i++) {
    1246:	42b8      	cmp	r0, r7
    1248:	d1eb      	bne.n	1222 <AudioAnalyzeFFT1024::update()+0x13e>
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
			uint32_t magsq = multiply_16tx16t_add_16bx16b(tmp, tmp);
			output[i] = sqrt_uint32_approx(magsq);
		}
		outputflag = true;
    124a:	f241 433d 	movw	r3, #5181	; 0x143d
    124e:	2201      	movs	r2, #1
		release(blocklist[0]);
    1250:	f8d5 041c 	ldr.w	r0, [r5, #1052]	; 0x41c
		for (int i=0; i < 512; i++) {
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
			uint32_t magsq = multiply_16tx16t_add_16bx16b(tmp, tmp);
			output[i] = sqrt_uint32_approx(magsq);
		}
		outputflag = true;
    1254:	54ea      	strb	r2, [r5, r3]
		release(blocklist[0]);
    1256:	f003 ff39 	bl	50cc <AudioStream::release(audio_block_struct*)>
		release(blocklist[1]);
    125a:	f8d5 0420 	ldr.w	r0, [r5, #1056]	; 0x420
    125e:	f003 ff35 	bl	50cc <AudioStream::release(audio_block_struct*)>
		release(blocklist[2]);
    1262:	f8d5 0424 	ldr.w	r0, [r5, #1060]	; 0x424
    1266:	f003 ff31 	bl	50cc <AudioStream::release(audio_block_struct*)>
		release(blocklist[3]);
    126a:	f8d5 0428 	ldr.w	r0, [r5, #1064]	; 0x428
    126e:	f003 ff2d 	bl	50cc <AudioStream::release(audio_block_struct*)>
		blocklist[0] = blocklist[4];
    1272:	f8d5 642c 	ldr.w	r6, [r5, #1068]	; 0x42c
		blocklist[1] = blocklist[5];
    1276:	f8d5 4430 	ldr.w	r4, [r5, #1072]	; 0x430
		blocklist[2] = blocklist[6];
		blocklist[3] = blocklist[7];
		state = 4;
    127a:	f241 433c 	movw	r3, #5180	; 0x143c
		release(blocklist[1]);
		release(blocklist[2]);
		release(blocklist[3]);
		blocklist[0] = blocklist[4];
		blocklist[1] = blocklist[5];
		blocklist[2] = blocklist[6];
    127e:	f8d5 0434 	ldr.w	r0, [r5, #1076]	; 0x434
		blocklist[3] = blocklist[7];
		state = 4;
    1282:	2204      	movs	r2, #4
		release(blocklist[2]);
		release(blocklist[3]);
		blocklist[0] = blocklist[4];
		blocklist[1] = blocklist[5];
		blocklist[2] = blocklist[6];
		blocklist[3] = blocklist[7];
    1284:	f8d5 1438 	ldr.w	r1, [r5, #1080]	; 0x438
		outputflag = true;
		release(blocklist[0]);
		release(blocklist[1]);
		release(blocklist[2]);
		release(blocklist[3]);
		blocklist[0] = blocklist[4];
    1288:	f8c5 641c 	str.w	r6, [r5, #1052]	; 0x41c
		blocklist[1] = blocklist[5];
    128c:	f8c5 4420 	str.w	r4, [r5, #1056]	; 0x420
		blocklist[2] = blocklist[6];
    1290:	f8c5 0424 	str.w	r0, [r5, #1060]	; 0x424
		blocklist[3] = blocklist[7];
    1294:	f8c5 1428 	str.w	r1, [r5, #1064]	; 0x428
		state = 4;
    1298:	54ea      	strb	r2, [r5, r3]
    129a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
	case 0:
		blocklist[0] = block;
		state = 1;
    129c:	f241 433c 	movw	r3, #5180	; 0x143c
    12a0:	2201      	movs	r2, #1
	if (!block) return;

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
	case 0:
		blocklist[0] = block;
    12a2:	f8c5 041c 	str.w	r0, [r5, #1052]	; 0x41c
		state = 1;
    12a6:	54ea      	strb	r2, [r5, r3]
		break;
    12a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 1:
		blocklist[1] = block;
		state = 2;
    12aa:	f241 433c 	movw	r3, #5180	; 0x143c
    12ae:	2202      	movs	r2, #2
	case 0:
		blocklist[0] = block;
		state = 1;
		break;
	case 1:
		blocklist[1] = block;
    12b0:	f8c5 0420 	str.w	r0, [r5, #1056]	; 0x420
		state = 2;
    12b4:	54ea      	strb	r2, [r5, r3]
		break;
    12b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 2:
		blocklist[2] = block;
		state = 3;
    12b8:	f241 433c 	movw	r3, #5180	; 0x143c
    12bc:	2203      	movs	r2, #3
	case 1:
		blocklist[1] = block;
		state = 2;
		break;
	case 2:
		blocklist[2] = block;
    12be:	f8c5 0424 	str.w	r0, [r5, #1060]	; 0x424
		state = 3;
    12c2:	54ea      	strb	r2, [r5, r3]
		break;
    12c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 3:
		blocklist[3] = block;
		state = 4;
    12c6:	f241 433c 	movw	r3, #5180	; 0x143c
    12ca:	2204      	movs	r2, #4
	case 2:
		blocklist[2] = block;
		state = 3;
		break;
	case 3:
		blocklist[3] = block;
    12cc:	f8c5 0428 	str.w	r0, [r5, #1064]	; 0x428
		state = 4;
    12d0:	54ea      	strb	r2, [r5, r3]
		break;
    12d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 4:
		blocklist[4] = block;
		state = 5;
    12d4:	f241 433c 	movw	r3, #5180	; 0x143c
    12d8:	2205      	movs	r2, #5
	case 3:
		blocklist[3] = block;
		state = 4;
		break;
	case 4:
		blocklist[4] = block;
    12da:	f8c5 042c 	str.w	r0, [r5, #1068]	; 0x42c
		state = 5;
    12de:	54ea      	strb	r2, [r5, r3]
		break;
    12e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 5:
		blocklist[5] = block;
		state = 6;
    12e2:	f241 433c 	movw	r3, #5180	; 0x143c
    12e6:	2206      	movs	r2, #6
	case 4:
		blocklist[4] = block;
		state = 5;
		break;
	case 5:
		blocklist[5] = block;
    12e8:	f8c5 0430 	str.w	r0, [r5, #1072]	; 0x430
		state = 6;
    12ec:	54ea      	strb	r2, [r5, r3]
		break;
    12ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 6:
		blocklist[6] = block;
		state = 7;
    12f0:	f241 433c 	movw	r3, #5180	; 0x143c
    12f4:	2207      	movs	r2, #7
	case 5:
		blocklist[5] = block;
		state = 6;
		break;
	case 6:
		blocklist[6] = block;
    12f6:	f8c5 0434 	str.w	r0, [r5, #1076]	; 0x434
		state = 7;
    12fa:	54ea      	strb	r2, [r5, r3]
		break;
    12fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12fe:	bf00      	nop
    1300:	2000111c 	.word	0x2000111c

00001304 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    1304:	b510      	push	{r4, lr}
    1306:	4604      	mov	r4, r0
		release();
    1308:	f004 f812 	bl	5330 <DMAChannel::release()>
	}
    130c:	4620      	mov	r0, r4
    130e:	bd10      	pop	{r4, pc}

00001310 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE>:
volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

volatile bool AsyncAudioInputSPDIF3::lockChanged=false;
volatile bool AsyncAudioInputSPDIF3::locked=false;
DMAChannel AsyncAudioInputSPDIF3::dma(false);
    1310:	4a02      	ldr	r2, [pc, #8]	; (131c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0xc>)
    1312:	4903      	ldr	r1, [pc, #12]	; (1320 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x10>)
    1314:	4803      	ldr	r0, [pc, #12]	; (1324 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x14>)
    1316:	f004 be03 	b.w	5f20 <__aeabi_atexit>
    131a:	bf00      	nop
    131c:	20004d14 	.word	0x20004d14
    1320:	00001305 	.word	0x00001305
    1324:	20006f78 	.word	0x20006f78

00001328 <AudioControlSGTL5000::disable()>:
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
    1328:	2000      	movs	r0, #0
    132a:	4770      	bx	lr

0000132c <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
    132c:	2000      	movs	r0, #0
    132e:	4770      	bx	lr

00001330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    1330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    1332:	2501      	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1334:	7a03      	ldrb	r3, [r0, #8]
    1336:	4c14      	ldr	r4, [pc, #80]	; (1388 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x58>)
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    1338:	2924      	cmp	r1, #36	; 0x24
    133a:	fa03 f305 	lsl.w	r3, r3, r5
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    133e:	460e      	mov	r6, r1
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    1340:	bf08      	it	eq
    1342:	80c2      	strheq	r2, [r0, #6]
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    1344:	4617      	mov	r7, r2
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1346:	f3c1 2107 	ubfx	r1, r1, #8, #8
    134a:	4620      	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    134c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		transmitting = 1;
    1350:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		txBufferLength = 1;
    1354:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1358:	f001 fd5c 	bl	2e14 <TwoWire::write(unsigned char)>
    135c:	b2f1      	uxtb	r1, r6
    135e:	4620      	mov	r0, r4
    1360:	f001 fd58 	bl	2e14 <TwoWire::write(unsigned char)>
    1364:	f3c7 2107 	ubfx	r1, r7, #8, #8
    1368:	4620      	mov	r0, r4
    136a:	f001 fd53 	bl	2e14 <TwoWire::write(unsigned char)>
    136e:	4620      	mov	r0, r4
    1370:	b2f9      	uxtb	r1, r7
    1372:	f001 fd4f 	bl	2e14 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    1376:	4629      	mov	r1, r5
    1378:	4620      	mov	r0, r4
    137a:	f001 fe95 	bl	30a8 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    137e:	fab0 f080 	clz	r0, r0
    1382:	0940      	lsrs	r0, r0, #5
    1384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1386:	bf00      	nop
    1388:	20004d6c 	.word	0x20004d6c

0000138c <AudioControlSGTL5000::micGain(unsigned int)>:

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    138c:	2927      	cmp	r1, #39	; 0x27
	unsigned short m=((0x7F-calcVol(right,0x7F))<<8)|(0x7F-calcVol(left,0x7F));
	return write(CHIP_ANA_HP_CTRL, m);
}

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
    138e:	b538      	push	{r3, r4, r5, lr}
    1390:	460c      	mov	r4, r1
    1392:	4605      	mov	r5, r0
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    1394:	d909      	bls.n	13aa <AudioControlSGTL5000::micGain(unsigned int)+0x1e>
		preamp_gain = 3;
		dB -= 40;
    1396:	f1a1 0428 	sub.w	r4, r1, #40	; 0x28
    139a:	f240 1273 	movw	r2, #371	; 0x173
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    139e:	212a      	movs	r1, #42	; 0x2a
    13a0:	4628      	mov	r0, r5
    13a2:	f7ff ffc5 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    13a6:	b960      	cbnz	r0, 13c2 <AudioControlSGTL5000::micGain(unsigned int)+0x36>
}
    13a8:	bd38      	pop	{r3, r4, r5, pc}
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
    13aa:	291d      	cmp	r1, #29
    13ac:	d919      	bls.n	13e2 <AudioControlSGTL5000::micGain(unsigned int)+0x56>
		preamp_gain = 2;
		dB -= 30;
    13ae:	f1a1 041e 	sub.w	r4, r1, #30
    13b2:	f44f 72b9 	mov.w	r2, #370	; 0x172
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    13b6:	212a      	movs	r1, #42	; 0x2a
    13b8:	4628      	mov	r0, r5
    13ba:	f7ff ffb9 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    13be:	2800      	cmp	r0, #0
    13c0:	d0f2      	beq.n	13a8 <AudioControlSGTL5000::micGain(unsigned int)+0x1c>
		preamp_gain = 1;
		dB -= 20;
	} else {
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
    13c2:	0064      	lsls	r4, r4, #1
    13c4:	4a0c      	ldr	r2, [pc, #48]	; (13f8 <AudioControlSGTL5000::micGain(unsigned int)+0x6c>)
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    13c6:	4628      	mov	r0, r5
    13c8:	2120      	movs	r1, #32
		preamp_gain = 1;
		dB -= 20;
	} else {
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
    13ca:	fba2 3204 	umull	r3, r2, r2, r4
    13ce:	0852      	lsrs	r2, r2, #1
    13d0:	2a0f      	cmp	r2, #15
    13d2:	bf28      	it	cs
    13d4:	220f      	movcs	r2, #15
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
}
    13d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    13da:	ea42 1202 	orr.w	r2, r2, r2, lsl #4
    13de:	f7ff bfa7 	b.w	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
		preamp_gain = 2;
		dB -= 30;
	} else if (dB >= 20) {
    13e2:	2913      	cmp	r1, #19
    13e4:	d904      	bls.n	13f0 <AudioControlSGTL5000::micGain(unsigned int)+0x64>
		preamp_gain = 1;
		dB -= 20;
    13e6:	f1a1 0414 	sub.w	r4, r1, #20
    13ea:	f240 1271 	movw	r2, #369	; 0x171
    13ee:	e7d6      	b.n	139e <AudioControlSGTL5000::micGain(unsigned int)+0x12>
    13f0:	f44f 72b8 	mov.w	r2, #368	; 0x170
    13f4:	e7d3      	b.n	139e <AudioControlSGTL5000::micGain(unsigned int)+0x12>
    13f6:	bf00      	nop
    13f8:	aaaaaaab 	.word	0xaaaaaaab

000013fc <AudioControlSGTL5000::enable()>:
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
    13fc:	b570      	push	{r4, r5, r6, lr}
    13fe:	4604      	mov	r4, r0
	muted = true;
    1400:	2601      	movs	r6, #1
	Wire.begin();
    1402:	4835      	ldr	r0, [pc, #212]	; (14d8 <AudioControlSGTL5000::enable()+0xdc>)
	}
}

bool AudioControlSGTL5000::enable(void)
{
	muted = true;
    1404:	7126      	strb	r6, [r4, #4]
	Wire.begin();
    1406:	f001 fd3b 	bl	2e80 <TwoWire::begin()>
	delay(5);
    140a:	2005      	movs	r0, #5
    140c:	f002 fae8 	bl	39e0 <delay>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    1410:	4620      	mov	r0, r4
    1412:	f244 0260 	movw	r2, #16480	; 0x4060
    1416:	2130      	movs	r1, #48	; 0x30
    1418:	f7ff ff8a 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    141c:	4605      	mov	r5, r0
    141e:	2800      	cmp	r0, #0
    1420:	d057      	beq.n	14d2 <AudioControlSGTL5000::enable()+0xd6>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    1422:	226c      	movs	r2, #108	; 0x6c
    1424:	2126      	movs	r1, #38	; 0x26
    1426:	4620      	mov	r0, r4
    1428:	f7ff ff82 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    142c:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
    1430:	2128      	movs	r1, #40	; 0x28
    1432:	4620      	mov	r0, r4
    1434:	f7ff ff7c 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    1438:	f640 7222 	movw	r2, #3874	; 0xf22
    143c:	212c      	movs	r1, #44	; 0x2c
    143e:	4620      	mov	r0, r4
    1440:	f7ff ff76 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    1444:	f244 4246 	movw	r2, #17478	; 0x4446
    1448:	213c      	movs	r1, #60	; 0x3c
    144a:	4620      	mov	r0, r4
    144c:	f7ff ff70 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    1450:	f240 1237 	movw	r2, #311	; 0x137
    1454:	2124      	movs	r1, #36	; 0x24
    1456:	4620      	mov	r0, r4
    1458:	f7ff ff6a 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    145c:	f244 02ff 	movw	r2, #16639	; 0x40ff
    1460:	2130      	movs	r1, #48	; 0x30
    1462:	4620      	mov	r0, r4
    1464:	f7ff ff64 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    1468:	2273      	movs	r2, #115	; 0x73
    146a:	2102      	movs	r1, #2
    146c:	4620      	mov	r0, r4
    146e:	f7ff ff5f 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    1472:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1476:	f002 fab3 	bl	39e0 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    147a:	f641 521d 	movw	r2, #7453	; 0x1d1d
    147e:	212e      	movs	r1, #46	; 0x2e
    1480:	4620      	mov	r0, r4
    1482:	f7ff ff55 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    1486:	2204      	movs	r2, #4
    1488:	4620      	mov	r0, r4
    148a:	4611      	mov	r1, r2
    148c:	f7ff ff50 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    1490:	2230      	movs	r2, #48	; 0x30
    1492:	2106      	movs	r1, #6
    1494:	4620      	mov	r0, r4
    1496:	f7ff ff4b 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    149a:	2210      	movs	r2, #16
    149c:	210a      	movs	r1, #10
    149e:	4620      	mov	r0, r4
    14a0:	f7ff ff46 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    14a4:	2200      	movs	r2, #0
    14a6:	210e      	movs	r1, #14
    14a8:	4620      	mov	r0, r4
    14aa:	f7ff ff41 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    14ae:	f643 423c 	movw	r2, #15420	; 0x3c3c
    14b2:	2110      	movs	r1, #16
    14b4:	4620      	mov	r0, r4
    14b6:	f7ff ff3b 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    14ba:	f647 727f 	movw	r2, #32639	; 0x7f7f
    14be:	2122      	movs	r1, #34	; 0x22
    14c0:	4620      	mov	r0, r4
    14c2:	f7ff ff35 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    14c6:	2236      	movs	r2, #54	; 0x36
    14c8:	2124      	movs	r1, #36	; 0x24
    14ca:	4620      	mov	r0, r4
    14cc:	f7ff ff30 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	//mute = false;
	semi_automated = true;
    14d0:	7266      	strb	r6, [r4, #9]
	return true;
}
    14d2:	4628      	mov	r0, r5
    14d4:	bd70      	pop	{r4, r5, r6, pc}
    14d6:	bf00      	nop
    14d8:	20004d6c 	.word	0x20004d6c

000014dc <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    14dc:	b510      	push	{r4, lr}
    14de:	4604      	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    14e0:	b119      	cbz	r1, 14ea <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    14e2:	2901      	cmp	r1, #1
    14e4:	d011      	beq.n	150a <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    14e6:	2000      	movs	r0, #0
    14e8:	bd10      	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    14ea:	2255      	movs	r2, #85	; 0x55
    14ec:	2120      	movs	r1, #32
    14ee:	f7ff ff1f 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    14f2:	2800      	cmp	r0, #0
    14f4:	d0f7      	beq.n	14e6 <AudioControlSGTL5000::inputSelect(int)+0xa>
    14f6:	88e2      	ldrh	r2, [r4, #6]
    14f8:	4620      	mov	r0, r4
    14fa:	2124      	movs	r1, #36	; 0x24
    14fc:	f042 0204 	orr.w	r2, r2, #4
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    1500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    1504:	b292      	uxth	r2, r2
    1506:	f7ff bf13 	b.w	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    150a:	f240 1273 	movw	r2, #371	; 0x173
    150e:	212a      	movs	r1, #42	; 0x2a
    1510:	f7ff ff0e 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1514:	2800      	cmp	r0, #0
    1516:	d0e6      	beq.n	14e6 <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    1518:	2288      	movs	r2, #136	; 0x88
    151a:	2120      	movs	r1, #32
    151c:	4620      	mov	r0, r4
    151e:	f7ff ff07 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1522:	2800      	cmp	r0, #0
    1524:	d0df      	beq.n	14e6 <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1526:	88e2      	ldrh	r2, [r4, #6]
    1528:	4620      	mov	r0, r4
    152a:	2124      	movs	r1, #36	; 0x24
    152c:	f022 0204 	bic.w	r2, r2, #4
		} else {
			return false;
		}
	}
    1530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1534:	f7ff befc 	b.w	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

00001538 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    1538:	b538      	push	{r3, r4, r5, lr}
    153a:	4605      	mov	r5, r0
	if (n == 0) {
    153c:	b311      	cbz	r1, 1584 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x4c>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    153e:	2980      	cmp	r1, #128	; 0x80
    1540:	d909      	bls.n	1556 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x1e>
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    1542:	792b      	ldrb	r3, [r5, #4]
    1544:	2400      	movs	r4, #0
    1546:	b96b      	cbnz	r3, 1564 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x2c>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1548:	4622      	mov	r2, r4
    154a:	4628      	mov	r0, r5
    154c:	2122      	movs	r1, #34	; 0x22
}
    154e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1552:	f7ff beed 	b.w	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    1556:	f1c1 0480 	rsb	r4, r1, #128	; 0x80
	}
	if (muted) {
    155a:	792b      	ldrb	r3, [r5, #4]
    155c:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
    1560:	2b00      	cmp	r3, #0
    1562:	d0f1      	beq.n	1548 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x10>
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    1564:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    1566:	2300      	movs	r3, #0
    1568:	2124      	movs	r1, #36	; 0x24
    156a:	4628      	mov	r0, r5
    156c:	f022 0210 	bic.w	r2, r2, #16
    1570:	712b      	strb	r3, [r5, #4]
    1572:	f7ff fedd 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1576:	4622      	mov	r2, r4
    1578:	4628      	mov	r0, r5
    157a:	2122      	movs	r1, #34	; 0x22
}
    157c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1580:	f7ff bed6 	b.w	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    1584:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    1586:	f647 727f 	movw	r2, #32639	; 0x7f7f
    158a:	2122      	movs	r1, #34	; 0x22
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    158c:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    158e:	f7ff fecf 	bl	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    1592:	88ea      	ldrh	r2, [r5, #6]
    1594:	4628      	mov	r0, r5
    1596:	2124      	movs	r1, #36	; 0x24
    1598:	f042 0210 	orr.w	r2, r2, #16
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    159c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    15a0:	b292      	uxth	r2, r2
    15a2:	f7ff bec5 	b.w	1330 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    15a6:	bf00      	nop

000015a8 <AudioControlSGTL5000::volume(float)>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
    15a8:	eddf 7a09 	vldr	s15, [pc, #36]	; 15d0 <AudioControlSGTL5000::volume(float)+0x28>
    15ac:	ee20 0a27 	vmul.f32	s0, s0, s15
    15b0:	ed9f 7b05 	vldr	d7, [pc, #20]	; 15c8 <AudioControlSGTL5000::volume(float)+0x20>
    15b4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    15b8:	ee30 0b07 	vadd.f64	d0, d0, d7
    15bc:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    15c0:	ee17 1a90 	vmov	r1, s15
    15c4:	f7ff bfb8 	b.w	1538 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    15c8:	b22d0e56 	.word	0xb22d0e56
    15cc:	3fdfef9d 	.word	0x3fdfef9d
    15d0:	43010000 	.word	0x43010000

000015d4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:

extern "C" void xbar_connect(unsigned int input, unsigned int output);

#define FILTERLEN 15

DMAChannel AudioInputAnalog::dma(false);
    15d4:	4a02      	ldr	r2, [pc, #8]	; (15e0 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    15d6:	4903      	ldr	r1, [pc, #12]	; (15e4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    15d8:	4803      	ldr	r0, [pc, #12]	; (15e8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    15da:	f004 bca1 	b.w	5f20 <__aeabi_atexit>
    15de:	bf00      	nop
    15e0:	20004d14 	.word	0x20004d14
    15e4:	00001305 	.word	0x00001305
    15e8:	20006f80 	.word	0x20006f80

000015ec <AudioInputI2S::isr()>:
	const int16_t *src, *end;
	int16_t *dest_left, *dest_right;
	audio_block_t *left, *right;

#if defined(KINETISK) || defined(__IMXRT1062__)
	daddr = (uint32_t)(dma.TCD->DADDR);
    15ec:	4b24      	ldr	r3, [pc, #144]	; (1680 <AudioInputI2S::isr()+0x94>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    15ee:	4925      	ldr	r1, [pc, #148]	; (1684 <AudioInputI2S::isr()+0x98>)
    15f0:	681a      	ldr	r2, [r3, #0]
	dma.enable();
	dma.attachInterrupt(isr);
}

void AudioInputI2S::isr(void)
{
    15f2:	b4f0      	push	{r4, r5, r6, r7}
	const int16_t *src, *end;
	int16_t *dest_left, *dest_right;
	audio_block_t *left, *right;

#if defined(KINETISK) || defined(__IMXRT1062__)
	daddr = (uint32_t)(dma.TCD->DADDR);
    15f4:	6912      	ldr	r2, [r2, #16]
    15f6:	7918      	ldrb	r0, [r3, #4]
	dma.clearInterrupt();
	//Serial.println("isr");

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
    15f8:	4b23      	ldr	r3, [pc, #140]	; (1688 <AudioInputI2S::isr()+0x9c>)
    15fa:	77c8      	strb	r0, [r1, #31]
    15fc:	429a      	cmp	r2, r3
    15fe:	d209      	bcs.n	1614 <AudioInputI2S::isr()+0x28>
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
    1600:	4a22      	ldr	r2, [pc, #136]	; (168c <AudioInputI2S::isr()+0xa0>)
    1602:	7812      	ldrb	r2, [r2, #0]
    1604:	2a00      	cmp	r2, #0
    1606:	d037      	beq.n	1678 <AudioInputI2S::isr()+0x8c>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    1608:	4a21      	ldr	r2, [pc, #132]	; (1690 <AudioInputI2S::isr()+0xa4>)
    160a:	2140      	movs	r1, #64	; 0x40

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
    160c:	f503 7480 	add.w	r4, r3, #256	; 0x100
    1610:	6011      	str	r1, [r2, #0]
    1612:	e002      	b.n	161a <AudioInputI2S::isr()+0x2e>
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
    1614:	461c      	mov	r4, r3
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
    1616:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = AudioInputI2S::block_left;
    161a:	491e      	ldr	r1, [pc, #120]	; (1694 <AudioInputI2S::isr()+0xa8>)
	right = AudioInputI2S::block_right;
    161c:	4a1e      	ldr	r2, [pc, #120]	; (1698 <AudioInputI2S::isr()+0xac>)
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = AudioInputI2S::block_left;
    161e:	6809      	ldr	r1, [r1, #0]
	right = AudioInputI2S::block_right;
    1620:	6816      	ldr	r6, [r2, #0]
	if (left != NULL && right != NULL) {
    1622:	b339      	cbz	r1, 1674 <AudioInputI2S::isr()+0x88>
    1624:	b336      	cbz	r6, 1674 <AudioInputI2S::isr()+0x88>
		offset = AudioInputI2S::block_offset;
    1626:	4f1d      	ldr	r7, [pc, #116]	; (169c <AudioInputI2S::isr()+0xb0>)
    1628:	883a      	ldrh	r2, [r7, #0]
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
    162a:	2a40      	cmp	r2, #64	; 0x40
    162c:	d822      	bhi.n	1674 <AudioInputI2S::isr()+0x88>
			dest_left = &(left->data[offset]);
    162e:	0050      	lsls	r0, r2, #1
			dest_right = &(right->data[offset]);
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    1630:	f102 0540 	add.w	r5, r2, #64	; 0x40
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1634:	f023 021f 	bic.w	r2, r3, #31
	left = AudioInputI2S::block_left;
	right = AudioInputI2S::block_right;
	if (left != NULL && right != NULL) {
		offset = AudioInputI2S::block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			dest_left = &(left->data[offset]);
    1638:	4401      	add	r1, r0
			dest_right = &(right->data[offset]);
    163a:	4430      	add	r0, r6
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    163c:	803d      	strh	r5, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    163e:	f503 7680 	add.w	r6, r3, #256	; 0x100
	left = AudioInputI2S::block_left;
	right = AudioInputI2S::block_right;
	if (left != NULL && right != NULL) {
		offset = AudioInputI2S::block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			dest_left = &(left->data[offset]);
    1642:	3104      	adds	r1, #4
			dest_right = &(right->data[offset]);
    1644:	3004      	adds	r0, #4
	asm volatile("": : :"memory");
	asm("dsb");
    1646:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    164a:	4d15      	ldr	r5, [pc, #84]	; (16a0 <AudioInputI2S::isr()+0xb4>)
    164c:	602a      	str	r2, [r5, #0]
		location += 32;
    164e:	3220      	adds	r2, #32
	} while (location < end_addr);
    1650:	4296      	cmp	r6, r2
    1652:	d8fb      	bhi.n	164c <AudioInputI2S::isr()+0x60>
	asm("dsb");
    1654:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1658:	f3bf 8f6f 	isb	sy
    165c:	1e8a      	subs	r2, r1, #2
    165e:	1e81      	subs	r1, r0, #2
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			do {
				*dest_left++ = *src++;
    1660:	f933 0b04 	ldrsh.w	r0, [r3], #4
    1664:	f822 0f02 	strh.w	r0, [r2, #2]!
				*dest_right++ = *src++;
			} while (src < end);
    1668:	429c      	cmp	r4, r3
			dest_right = &(right->data[offset]);
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			do {
				*dest_left++ = *src++;
				*dest_right++ = *src++;
    166a:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
    166e:	f821 0f02 	strh.w	r0, [r1, #2]!
			} while (src < end);
    1672:	d8f5      	bhi.n	1660 <AudioInputI2S::isr()+0x74>
		}
	}
#endif
}
    1674:	bcf0      	pop	{r4, r5, r6, r7}
    1676:	4770      	bx	lr

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
    1678:	f503 7480 	add.w	r4, r3, #256	; 0x100
    167c:	e7cd      	b.n	161a <AudioInputI2S::isr()+0x2e>
    167e:	bf00      	nop
    1680:	20006f90 	.word	0x20006f90
    1684:	400e8000 	.word	0x400e8000
    1688:	20200d40 	.word	0x20200d40
    168c:	20006f8a 	.word	0x20006f8a
    1690:	e000e208 	.word	0xe000e208
    1694:	20006f98 	.word	0x20006f98
    1698:	20006f8c 	.word	0x20006f8c
    169c:	20006f88 	.word	0x20006f88
    16a0:	e000ef5c 	.word	0xe000ef5c

000016a4 <AudioInputI2S::update()>:
}



void AudioInputI2S::update(void)
{
    16a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16a6:	4606      	mov	r6, r0
	audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

	// allocate 2 new blocks, but if one fails, allocate neither
	new_left = allocate();
    16a8:	f003 fcbc 	bl	5024 <AudioStream::allocate()>
	if (new_left != NULL) {
    16ac:	4604      	mov	r4, r0
    16ae:	b1e8      	cbz	r0, 16ec <AudioInputI2S::update()+0x48>
		new_right = allocate();
    16b0:	f003 fcb8 	bl	5024 <AudioStream::allocate()>
		if (new_right == NULL) {
    16b4:	4605      	mov	r5, r0
    16b6:	2800      	cmp	r0, #0
    16b8:	d03a      	beq.n	1730 <AudioInputI2S::update()+0x8c>
			release(new_left);
			new_left = NULL;
		}
	}
	__disable_irq();
    16ba:	b672      	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    16bc:	4b1f      	ldr	r3, [pc, #124]	; (173c <AudioInputI2S::update()+0x98>)
    16be:	881a      	ldrh	r2, [r3, #0]
    16c0:	2a7f      	cmp	r2, #127	; 0x7f
    16c2:	d819      	bhi.n	16f8 <AudioInputI2S::update()+0x54>
		transmit(out_left, 0);
		release(out_left);
		transmit(out_right, 1);
		release(out_right);
		//Serial.print(".");
	} else if (new_left != NULL) {
    16c4:	2c00      	cmp	r4, #0
    16c6:	d031      	beq.n	172c <AudioInputI2S::update()+0x88>
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
    16c8:	491d      	ldr	r1, [pc, #116]	; (1740 <AudioInputI2S::update()+0x9c>)
    16ca:	680a      	ldr	r2, [r1, #0]
    16cc:	b142      	cbz	r2, 16e0 <AudioInputI2S::update()+0x3c>
			block_right = new_right;
			block_offset = 0;
			__enable_irq();
		} else {
			// the DMA already has blocks, doesn't need these
			__enable_irq();
    16ce:	b662      	cpsie	i
			release(new_left);
    16d0:	4620      	mov	r0, r4
    16d2:	f003 fcfb 	bl	50cc <AudioStream::release(audio_block_struct*)>
			release(new_right);
    16d6:	4628      	mov	r0, r5
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    16d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			__enable_irq();
		} else {
			// the DMA already has blocks, doesn't need these
			__enable_irq();
			release(new_left);
			release(new_right);
    16dc:	f003 bcf6 	b.w	50cc <AudioStream::release(audio_block_struct*)>
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_left = new_left;
			block_right = new_right;
    16e0:	4818      	ldr	r0, [pc, #96]	; (1744 <AudioInputI2S::update()+0xa0>)
	} else if (new_left != NULL) {
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_left = new_left;
    16e2:	600c      	str	r4, [r1, #0]
			block_right = new_right;
			block_offset = 0;
    16e4:	801a      	strh	r2, [r3, #0]
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_left = new_left;
			block_right = new_right;
    16e6:	6005      	str	r5, [r0, #0]
			block_offset = 0;
			__enable_irq();
    16e8:	b662      	cpsie	i
    16ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}



void AudioInputI2S::update(void)
{
	audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
    16ec:	4605      	mov	r5, r0
		if (new_right == NULL) {
			release(new_left);
			new_left = NULL;
		}
	}
	__disable_irq();
    16ee:	b672      	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    16f0:	4b12      	ldr	r3, [pc, #72]	; (173c <AudioInputI2S::update()+0x98>)
    16f2:	881a      	ldrh	r2, [r3, #0]
    16f4:	2a7f      	cmp	r2, #127	; 0x7f
    16f6:	d9e5      	bls.n	16c4 <AudioInputI2S::update()+0x20>
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
    16f8:	4811      	ldr	r0, [pc, #68]	; (1740 <AudioInputI2S::update()+0x9c>)
		block_left = new_left;
		out_right = block_right;
		block_right = new_right;
		block_offset = 0;
    16fa:	2200      	movs	r2, #0
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
		block_left = new_left;
		out_right = block_right;
    16fc:	4911      	ldr	r1, [pc, #68]	; (1744 <AudioInputI2S::update()+0xa0>)
	}
	__disable_irq();
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
    16fe:	6807      	ldr	r7, [r0, #0]
		block_left = new_left;
		out_right = block_right;
		block_right = new_right;
		block_offset = 0;
    1700:	801a      	strh	r2, [r3, #0]
	__disable_irq();
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
		block_left = new_left;
    1702:	6004      	str	r4, [r0, #0]
		out_right = block_right;
    1704:	680c      	ldr	r4, [r1, #0]
		block_right = new_right;
    1706:	600d      	str	r5, [r1, #0]
		block_offset = 0;
		__enable_irq();
    1708:	b662      	cpsie	i
		// then transmit the DMA's former blocks
		transmit(out_left, 0);
    170a:	4639      	mov	r1, r7
    170c:	4630      	mov	r0, r6
    170e:	f003 fd07 	bl	5120 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out_left);
    1712:	4638      	mov	r0, r7
    1714:	f003 fcda 	bl	50cc <AudioStream::release(audio_block_struct*)>
		transmit(out_right, 1);
    1718:	4630      	mov	r0, r6
    171a:	4621      	mov	r1, r4
    171c:	2201      	movs	r2, #1
    171e:	f003 fcff 	bl	5120 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out_right);
    1722:	4620      	mov	r0, r4
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    1724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		__enable_irq();
		// then transmit the DMA's former blocks
		transmit(out_left, 0);
		release(out_left);
		transmit(out_right, 1);
		release(out_right);
    1728:	f003 bcd0 	b.w	50cc <AudioStream::release(audio_block_struct*)>
		}
	} else {
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
    172c:	b662      	cpsie	i
    172e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// allocate 2 new blocks, but if one fails, allocate neither
	new_left = allocate();
	if (new_left != NULL) {
		new_right = allocate();
		if (new_right == NULL) {
			release(new_left);
    1730:	4620      	mov	r0, r4
			new_left = NULL;
    1732:	462c      	mov	r4, r5
	// allocate 2 new blocks, but if one fails, allocate neither
	new_left = allocate();
	if (new_left != NULL) {
		new_right = allocate();
		if (new_right == NULL) {
			release(new_left);
    1734:	f003 fcca 	bl	50cc <AudioStream::release(audio_block_struct*)>
    1738:	e7bf      	b.n	16ba <AudioInputI2S::update()+0x16>
    173a:	bf00      	nop
    173c:	20006f88 	.word	0x20006f88
    1740:	20006f98 	.word	0x20006f98
    1744:	20006f8c 	.word	0x20006f8c

00001748 <AudioInputI2S::begin()>:
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);


void AudioInputI2S::begin(void)
{
    1748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    174a:	4c23      	ldr	r4, [pc, #140]	; (17d8 <AudioInputI2S::begin()+0x90>)
    174c:	2101      	movs	r1, #1

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
    174e:	4e23      	ldr	r6, [pc, #140]	; (17dc <AudioInputI2S::begin()+0x94>)
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    1750:	f44f 7580 	mov.w	r5, #256	; 0x100
DMAChannel AudioInputI2S::dma(false);


void AudioInputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    1754:	4620      	mov	r0, r4
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    1756:	f240 1701 	movw	r7, #257	; 0x101
DMAChannel AudioInputI2S::dma(false);


void AudioInputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    175a:	f003 fd99 	bl	5290 <DMAChannel::begin(bool)>

	//block_left_1st = NULL;
	//block_right_1st = NULL;

	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2S::config_i2s();
    175e:	f000 f9b1 	bl	1ac4 <AudioOutputI2S::config_i2s()>
	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    1762:	2102      	movs	r1, #2

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
    1764:	4a1e      	ldr	r2, [pc, #120]	; (17e0 <AudioInputI2S::begin()+0x98>)
    1766:	2003      	movs	r0, #3
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    1768:	4b1e      	ldr	r3, [pc, #120]	; (17e4 <AudioInputI2S::begin()+0x9c>)
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    176a:	f04f 0e06 	mov.w	lr, #6

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
    176e:	f8c2 017c 	str.w	r0, [r2, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
    1772:	2200      	movs	r2, #0
	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    1774:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
    1778:	6823      	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    177a:	481b      	ldr	r0, [pc, #108]	; (17e8 <AudioInputI2S::begin()+0xa0>)

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
    177c:	601e      	str	r6, [r3, #0]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    177e:	4e1b      	ldr	r6, [pc, #108]	; (17ec <AudioInputI2S::begin()+0xa4>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    1780:	6118      	str	r0, [r3, #16]
#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
    1782:	809a      	strh	r2, [r3, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    1784:	82dd      	strh	r5, [r3, #22]
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    1786:	6099      	str	r1, [r3, #8]
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    1788:	83dd      	strh	r5, [r3, #30]
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
    178a:	8299      	strh	r1, [r3, #20]
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    178c:	80df      	strh	r7, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    178e:	619e      	str	r6, [r3, #24]

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
    1790:	60da      	str	r2, [r3, #12]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    1792:	7920      	ldrb	r0, [r4, #4]
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1794:	f8a3 e01c 	strh.w	lr, [r3, #28]
    1798:	4915      	ldr	r1, [pc, #84]	; (17f0 <AudioInputI2S::begin()+0xa8>)
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_RX);

	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    179a:	4b16      	ldr	r3, [pc, #88]	; (17f4 <AudioInputI2S::begin()+0xac>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    179c:	4f16      	ldr	r7, [pc, #88]	; (17f8 <AudioInputI2S::begin()+0xb0>)
    179e:	4e17      	ldr	r6, [pc, #92]	; (17fc <AudioInputI2S::begin()+0xb4>)

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    17a0:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    17a4:	f841 7020 	str.w	r7, [r1, r0, lsl #2]
    17a8:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
#endif
	update_responsibility = update_setup();
    17ac:	f003 fd50 	bl	5250 <AudioStream::update_setup()>
    17b0:	7923      	ldrb	r3, [r4, #4]
    17b2:	4913      	ldr	r1, [pc, #76]	; (1800 <AudioInputI2S::begin()+0xb8>)
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    17b4:	2201      	movs	r2, #1
    17b6:	f003 051f 	and.w	r5, r3, #31
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    17ba:	4f12      	ldr	r7, [pc, #72]	; (1804 <AudioInputI2S::begin()+0xbc>)
    17bc:	7008      	strb	r0, [r1, #0]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    17be:	f103 0610 	add.w	r6, r3, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    17c2:	40aa      	lsls	r2, r5
    17c4:	115c      	asrs	r4, r3, #5

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    17c6:	4d10      	ldr	r5, [pc, #64]	; (1808 <AudioInputI2S::begin()+0xc0>)
    17c8:	4810      	ldr	r0, [pc, #64]	; (180c <AudioInputI2S::begin()+0xc4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    17ca:	4911      	ldr	r1, [pc, #68]	; (1810 <AudioInputI2S::begin()+0xc8>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    17cc:	76fb      	strb	r3, [r7, #27]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    17ce:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    17d2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    17d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17d8:	20006f90 	.word	0x20006f90
    17dc:	403840a2 	.word	0x403840a2
    17e0:	401f8000 	.word	0x401f8000
    17e4:	401f8400 	.word	0x401f8400
    17e8:	20200c40 	.word	0x20200c40
    17ec:	fffffe00 	.word	0xfffffe00
    17f0:	400ec000 	.word	0x400ec000
    17f4:	92000001 	.word	0x92000001
    17f8:	80000013 	.word	0x80000013
    17fc:	40384000 	.word	0x40384000
    1800:	20006f8a 	.word	0x20006f8a
    1804:	400e8000 	.word	0x400e8000
    1808:	20007800 	.word	0x20007800
    180c:	000015ed 	.word	0x000015ed
    1810:	e000e100 	.word	0xe000e100

00001814 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    1814:	4a02      	ldr	r2, [pc, #8]	; (1820 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    1816:	4903      	ldr	r1, [pc, #12]	; (1824 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1818:	4803      	ldr	r0, [pc, #12]	; (1828 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    181a:	f004 bb81 	b.w	5f20 <__aeabi_atexit>
    181e:	bf00      	nop
    1820:	20004d14 	.word	0x20004d14
    1824:	00001305 	.word	0x00001305
    1828:	20006f90 	.word	0x20006f90

0000182c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    182c:	4a02      	ldr	r2, [pc, #8]	; (1838 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    182e:	4903      	ldr	r1, [pc, #12]	; (183c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    1830:	4803      	ldr	r0, [pc, #12]	; (1840 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    1832:	f004 bb75 	b.w	5f20 <__aeabi_atexit>
    1836:	bf00      	nop
    1838:	20004d14 	.word	0x20004d14
    183c:	00001305 	.word	0x00001305
    1840:	20006f9c 	.word	0x20006f9c

00001844 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    1844:	4a02      	ldr	r2, [pc, #8]	; (1850 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    1846:	4903      	ldr	r1, [pc, #12]	; (1854 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    1848:	4803      	ldr	r0, [pc, #12]	; (1858 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    184a:	f004 bb69 	b.w	5f20 <__aeabi_atexit>
    184e:	bf00      	nop
    1850:	20004d14 	.word	0x20004d14
    1854:	00001305 	.word	0x00001305
    1858:	20006fa4 	.word	0x20006fa4

0000185c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    185c:	4a02      	ldr	r2, [pc, #8]	; (1868 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    185e:	4903      	ldr	r1, [pc, #12]	; (186c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    1860:	4803      	ldr	r0, [pc, #12]	; (1870 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    1862:	f004 bb5d 	b.w	5f20 <__aeabi_atexit>
    1866:	bf00      	nop
    1868:	20004d14 	.word	0x20004d14
    186c:	00001305 	.word	0x00001305
    1870:	20006fac 	.word	0x20006fac

00001874 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    1874:	4a02      	ldr	r2, [pc, #8]	; (1880 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    1876:	4903      	ldr	r1, [pc, #12]	; (1884 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    1878:	4803      	ldr	r0, [pc, #12]	; (1888 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    187a:	f004 bb51 	b.w	5f20 <__aeabi_atexit>
    187e:	bf00      	nop
    1880:	20004d14 	.word	0x20004d14
    1884:	00001305 	.word	0x00001305
    1888:	20006fb4 	.word	0x20006fb4

0000188c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    188c:	4a02      	ldr	r2, [pc, #8]	; (1898 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    188e:	4903      	ldr	r1, [pc, #12]	; (189c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    1890:	4803      	ldr	r0, [pc, #12]	; (18a0 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    1892:	f004 bb45 	b.w	5f20 <__aeabi_atexit>
    1896:	bf00      	nop
    1898:	20004d14 	.word	0x20004d14
    189c:	00001305 	.word	0x00001305
    18a0:	20006fbc 	.word	0x20006fbc

000018a4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    18a4:	4a02      	ldr	r2, [pc, #8]	; (18b0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    18a6:	4903      	ldr	r1, [pc, #12]	; (18b4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    18a8:	4803      	ldr	r0, [pc, #12]	; (18b8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    18aa:	f004 bb39 	b.w	5f20 <__aeabi_atexit>
    18ae:	bf00      	nop
    18b0:	20004d14 	.word	0x20004d14
    18b4:	00001305 	.word	0x00001305
    18b8:	20006fc4 	.word	0x20006fc4

000018bc <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    18bc:	4a02      	ldr	r2, [pc, #8]	; (18c8 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    18be:	4903      	ldr	r1, [pc, #12]	; (18cc <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    18c0:	4803      	ldr	r0, [pc, #12]	; (18d0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    18c2:	f004 bb2d 	b.w	5f20 <__aeabi_atexit>
    18c6:	bf00      	nop
    18c8:	20004d14 	.word	0x20004d14
    18cc:	00001305 	.word	0x00001305
    18d0:	20006fcc 	.word	0x20006fcc

000018d4 <AudioOutputI2S::isr()>:
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    18d4:	4b49      	ldr	r3, [pc, #292]	; (19fc <AudioOutputI2S::isr()+0x128>)
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    18d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    18da:	681a      	ldr	r2, [r3, #0]
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    18dc:	b083      	sub	sp, #12
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    18de:	4c48      	ldr	r4, [pc, #288]	; (1a00 <AudioOutputI2S::isr()+0x12c>)
    18e0:	7919      	ldrb	r1, [r3, #4]
    18e2:	f504 7580 	add.w	r5, r4, #256	; 0x100
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    18e6:	6813      	ldr	r3, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    18e8:	4a46      	ldr	r2, [pc, #280]	; (1a04 <AudioOutputI2S::isr()+0x130>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    18ea:	42ab      	cmp	r3, r5
    18ec:	77d1      	strb	r1, [r2, #31]
    18ee:	d209      	bcs.n	1904 <AudioOutputI2S::isr()+0x30>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    18f0:	4b45      	ldr	r3, [pc, #276]	; (1a08 <AudioOutputI2S::isr()+0x134>)
    18f2:	781b      	ldrb	r3, [r3, #0]
    18f4:	2b00      	cmp	r3, #0
    18f6:	d04c      	beq.n	1992 <AudioOutputI2S::isr()+0xbe>
    18f8:	4b44      	ldr	r3, [pc, #272]	; (1a0c <AudioOutputI2S::isr()+0x138>)
    18fa:	2240      	movs	r2, #64	; 0x40
    18fc:	462c      	mov	r4, r5
    18fe:	f505 7580 	add.w	r5, r5, #256	; 0x100
    1902:	601a      	str	r2, [r3, #0]
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    1904:	4b42      	ldr	r3, [pc, #264]	; (1a10 <AudioOutputI2S::isr()+0x13c>)
	blockR = AudioOutputI2S::block_right_1st;
    1906:	f8df b118 	ldr.w	fp, [pc, #280]	; 1a20 <AudioOutputI2S::isr()+0x14c>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    190a:	f8d3 8000 	ldr.w	r8, [r3]
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
    190e:	f8df a114 	ldr.w	sl, [pc, #276]	; 1a24 <AudioOutputI2S::isr()+0x150>
	offsetR = AudioOutputI2S::block_right_offset;
    1912:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1a28 <AudioOutputI2S::isr()+0x154>
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
	blockR = AudioOutputI2S::block_right_1st;
    1916:	f8db 3000 	ldr.w	r3, [fp]
	offsetL = AudioOutputI2S::block_left_offset;
    191a:	f8ba 6000 	ldrh.w	r6, [sl]
	offsetR = AudioOutputI2S::block_right_offset;
    191e:	f8b9 7000 	ldrh.w	r7, [r9]

	if (blockL && blockR) {
    1922:	f1b8 0f00 	cmp.w	r8, #0
    1926:	d000      	beq.n	192a <AudioOutputI2S::isr()+0x56>
    1928:	bb23      	cbnz	r3, 1974 <AudioOutputI2S::isr()+0xa0>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
    192a:	f1b8 0f00 	cmp.w	r8, #0
    192e:	d034      	beq.n	199a <AudioOutputI2S::isr()+0xc6>
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    1930:	f108 0104 	add.w	r1, r8, #4
    1934:	4620      	mov	r0, r4
    1936:	9301      	str	r3, [sp, #4]
    1938:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    193c:	3640      	adds	r6, #64	; 0x40
	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    193e:	f7ff fb74 	bl	102a <memcpy_tointerleaveL>
    1942:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1944:	f024 041f 	bic.w	r4, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1948:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    194c:	4a31      	ldr	r2, [pc, #196]	; (1a14 <AudioOutputI2S::isr()+0x140>)
    194e:	6014      	str	r4, [r2, #0]
		location += 32;
    1950:	3420      	adds	r4, #32
	} while (location < end_addr);
    1952:	42ac      	cmp	r4, r5
    1954:	d3fb      	bcc.n	194e <AudioOutputI2S::isr()+0x7a>
	asm("dsb");
    1956:	f3bf 8f4f 	dsb	sy
	asm("isb");
    195a:	f3bf 8f6f 	isb	sy
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    195e:	2e7f      	cmp	r6, #127	; 0x7f
    1960:	d834      	bhi.n	19cc <AudioOutputI2S::isr()+0xf8>
		AudioOutputI2S::block_left_offset = offsetL;
    1962:	f8aa 6000 	strh.w	r6, [sl]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    1966:	2f7f      	cmp	r7, #127	; 0x7f
    1968:	d822      	bhi.n	19b0 <AudioOutputI2S::isr()+0xdc>
		AudioOutputI2S::block_right_offset = offsetR;
    196a:	f8a9 7000 	strh.w	r7, [r9]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    196e:	b003      	add	sp, #12
    1970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    1974:	1d1a      	adds	r2, r3, #4
    1976:	f108 0104 	add.w	r1, r8, #4
    197a:	4620      	mov	r0, r4
    197c:	9301      	str	r3, [sp, #4]
    197e:	eb02 0247 	add.w	r2, r2, r7, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    1982:	3740      	adds	r7, #64	; 0x40
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    1984:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    1988:	3640      	adds	r6, #64	; 0x40
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    198a:	f7ff fb2f 	bl	fec <memcpy_tointerleaveLR>
    198e:	9b01      	ldr	r3, [sp, #4]
    1990:	e7d8      	b.n	1944 <AudioOutputI2S::isr()+0x70>
    1992:	462c      	mov	r4, r5
    1994:	f505 7580 	add.w	r5, r5, #256	; 0x100
    1998:	e7b4      	b.n	1904 <AudioOutputI2S::isr()+0x30>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
    199a:	b32b      	cbz	r3, 19e8 <AudioOutputI2S::isr()+0x114>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    199c:	1d19      	adds	r1, r3, #4
    199e:	4620      	mov	r0, r4
    19a0:	9301      	str	r3, [sp, #4]
    19a2:	eb01 0147 	add.w	r1, r1, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    19a6:	3740      	adds	r7, #64	; 0x40
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    19a8:	f7ff fb5f 	bl	106a <memcpy_tointerleaveR>
    19ac:	9b01      	ldr	r3, [sp, #4]
    19ae:	e7c9      	b.n	1944 <AudioOutputI2S::isr()+0x70>
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    19b0:	2400      	movs	r4, #0
		AudioStream::release(blockR);
    19b2:	4618      	mov	r0, r3
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    19b4:	f8a9 4000 	strh.w	r4, [r9]
		AudioStream::release(blockR);
    19b8:	f003 fb88 	bl	50cc <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    19bc:	4b16      	ldr	r3, [pc, #88]	; (1a18 <AudioOutputI2S::isr()+0x144>)
    19be:	681a      	ldr	r2, [r3, #0]
		AudioOutputI2S::block_right_2nd = NULL;
    19c0:	601c      	str	r4, [r3, #0]
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
		AudioStream::release(blockR);
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    19c2:	f8cb 2000 	str.w	r2, [fp]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    19c6:	b003      	add	sp, #12
    19c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    19cc:	2400      	movs	r4, #0
		AudioStream::release(blockL);
    19ce:	4640      	mov	r0, r8
    19d0:	9301      	str	r3, [sp, #4]
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    19d2:	f8aa 4000 	strh.w	r4, [sl]
		AudioStream::release(blockL);
    19d6:	f003 fb79 	bl	50cc <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    19da:	4a10      	ldr	r2, [pc, #64]	; (1a1c <AudioOutputI2S::isr()+0x148>)
    19dc:	4b0c      	ldr	r3, [pc, #48]	; (1a10 <AudioOutputI2S::isr()+0x13c>)
    19de:	6811      	ldr	r1, [r2, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    19e0:	6014      	str	r4, [r2, #0]
	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    19e2:	6019      	str	r1, [r3, #0]
    19e4:	9b01      	ldr	r3, [sp, #4]
    19e6:	e7be      	b.n	1966 <AudioOutputI2S::isr()+0x92>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    19e8:	4619      	mov	r1, r3
    19ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    19ee:	4620      	mov	r0, r4
    19f0:	9301      	str	r3, [sp, #4]
    19f2:	f004 fd8f 	bl	6514 <memset>
    19f6:	9b01      	ldr	r3, [sp, #4]
    19f8:	e7a4      	b.n	1944 <AudioOutputI2S::isr()+0x70>
    19fa:	bf00      	nop
    19fc:	20006fd8 	.word	0x20006fd8
    1a00:	20200e40 	.word	0x20200e40
    1a04:	400e8000 	.word	0x400e8000
    1a08:	20006ff0 	.word	0x20006ff0
    1a0c:	e000e208 	.word	0xe000e208
    1a10:	20006fe8 	.word	0x20006fe8
    1a14:	e000ef70 	.word	0xe000ef70
    1a18:	20006fec 	.word	0x20006fec
    1a1c:	20006ff4 	.word	0x20006ff4
    1a20:	20006fe0 	.word	0x20006fe0
    1a24:	20006fd4 	.word	0x20006fd4
    1a28:	20006fe4 	.word	0x20006fe4

00001a2c <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    1a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    1a2e:	2100      	movs	r1, #0




void AudioOutputI2S::update(void)
{
    1a30:	4604      	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    1a32:	f003 fb8f 	bl	5154 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    1a36:	b180      	cbz	r0, 1a5a <AudioOutputI2S::update()+0x2e>
		__disable_irq();
    1a38:	b672      	cpsid	i
		if (block_left_1st == NULL) {
    1a3a:	4a1c      	ldr	r2, [pc, #112]	; (1aac <AudioOutputI2S::update()+0x80>)
    1a3c:	6813      	ldr	r3, [r2, #0]
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d029      	beq.n	1a96 <AudioOutputI2S::update()+0x6a>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    1a42:	491b      	ldr	r1, [pc, #108]	; (1ab0 <AudioOutputI2S::update()+0x84>)
    1a44:	680d      	ldr	r5, [r1, #0]
    1a46:	b305      	cbz	r5, 1a8a <AudioOutputI2S::update()+0x5e>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
			block_left_offset = 0;
    1a48:	4e1a      	ldr	r6, [pc, #104]	; (1ab4 <AudioOutputI2S::update()+0x88>)
    1a4a:	2700      	movs	r7, #0
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    1a4c:	6015      	str	r5, [r2, #0]
			block_left_2nd = block;
    1a4e:	6008      	str	r0, [r1, #0]
			block_left_offset = 0;
    1a50:	8037      	strh	r7, [r6, #0]
			__enable_irq();
    1a52:	b662      	cpsie	i
			release(tmp);
    1a54:	4618      	mov	r0, r3
    1a56:	f003 fb39 	bl	50cc <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    1a5a:	4620      	mov	r0, r4
    1a5c:	2101      	movs	r1, #1
    1a5e:	f003 fb79 	bl	5154 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    1a62:	b188      	cbz	r0, 1a88 <AudioOutputI2S::update()+0x5c>
		__disable_irq();
    1a64:	b672      	cpsid	i
		if (block_right_1st == NULL) {
    1a66:	4a14      	ldr	r2, [pc, #80]	; (1ab8 <AudioOutputI2S::update()+0x8c>)
    1a68:	6813      	ldr	r3, [r2, #0]
    1a6a:	b1cb      	cbz	r3, 1aa0 <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    1a6c:	4913      	ldr	r1, [pc, #76]	; (1abc <AudioOutputI2S::update()+0x90>)
    1a6e:	680c      	ldr	r4, [r1, #0]
    1a70:	b174      	cbz	r4, 1a90 <AudioOutputI2S::update()+0x64>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
    1a72:	4d13      	ldr	r5, [pc, #76]	; (1ac0 <AudioOutputI2S::update()+0x94>)
    1a74:	2600      	movs	r6, #0
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    1a76:	6014      	str	r4, [r2, #0]
			block_right_2nd = block;
    1a78:	6008      	str	r0, [r1, #0]
			block_right_offset = 0;
    1a7a:	802e      	strh	r6, [r5, #0]
			__enable_irq();
    1a7c:	b662      	cpsie	i
			release(tmp);
    1a7e:	4618      	mov	r0, r3
		}
	}
}
    1a80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
			__enable_irq();
			release(tmp);
    1a84:	f003 bb22 	b.w	50cc <AudioStream::release(audio_block_struct*)>
    1a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
    1a8a:	6008      	str	r0, [r1, #0]
			__enable_irq();
    1a8c:	b662      	cpsie	i
    1a8e:	e7e4      	b.n	1a5a <AudioOutputI2S::update()+0x2e>
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
    1a90:	6008      	str	r0, [r1, #0]
			__enable_irq();
    1a92:	b662      	cpsie	i
    1a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
    1a96:	4907      	ldr	r1, [pc, #28]	; (1ab4 <AudioOutputI2S::update()+0x88>)
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
    1a98:	6010      	str	r0, [r2, #0]
			block_left_offset = 0;
    1a9a:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    1a9c:	b662      	cpsie	i
    1a9e:	e7dc      	b.n	1a5a <AudioOutputI2S::update()+0x2e>
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
    1aa0:	4907      	ldr	r1, [pc, #28]	; (1ac0 <AudioOutputI2S::update()+0x94>)
	}
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
    1aa2:	6010      	str	r0, [r2, #0]
			block_right_offset = 0;
    1aa4:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    1aa6:	b662      	cpsie	i
    1aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aaa:	bf00      	nop
    1aac:	20006fe8 	.word	0x20006fe8
    1ab0:	20006ff4 	.word	0x20006ff4
    1ab4:	20006fd4 	.word	0x20006fd4
    1ab8:	20006fe0 	.word	0x20006fe0
    1abc:	20006fec 	.word	0x20006fec
    1ac0:	20006fe4 	.word	0x20006fe4

00001ac4 <AudioOutputI2S::config_i2s()>:
#endif
#endif


void AudioOutputI2S::config_i2s(void)
{
    1ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    1ac6:	4d28      	ldr	r5, [pc, #160]	; (1b68 <AudioOutputI2S::config_i2s()+0xa4>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
    1ac8:	4c28      	ldr	r4, [pc, #160]	; (1b6c <AudioOutputI2S::config_i2s()+0xa8>)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    1aca:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    1acc:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    1ad0:	67eb      	str	r3, [r5, #124]	; 0x7c

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
    1ad2:	68a3      	ldr	r3, [r4, #8]
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	db45      	blt.n	1b64 <AudioOutputI2S::config_i2s()+0xa0>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
    1ad8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    1adc:	2b00      	cmp	r3, #0
    1ade:	db41      	blt.n	1b64 <AudioOutputI2S::config_i2s()+0xa0>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
    1ae0:	2300      	movs	r3, #0
    1ae2:	f242 7210 	movw	r2, #10000	; 0x2710
    1ae6:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
    1aea:	201c      	movs	r0, #28
    1aec:	f004 ff00 	bl	68f0 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    1af0:	69e9      	ldr	r1, [r5, #28]
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    1af2:	4a1f      	ldr	r2, [pc, #124]	; (1b70 <AudioOutputI2S::config_i2s()+0xac>)
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    1af4:	2603      	movs	r6, #3
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    1af6:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    1afa:	f8df e090 	ldr.w	lr, [pc, #144]	; 1b8c <AudioOutputI2S::config_i2s()+0xc8>
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    1afe:	4b1d      	ldr	r3, [pc, #116]	; (1b74 <AudioOutputI2S::config_i2s()+0xb0>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    1b00:	2700      	movs	r7, #0
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    1b02:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    1b06:	481c      	ldr	r0, [pc, #112]	; (1b78 <AudioOutputI2S::config_i2s()+0xb4>)
	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    1b08:	f04f 0c01 	mov.w	ip, #1
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    1b0c:	61e9      	str	r1, [r5, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    1b0e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    1b10:	400a      	ands	r2, r1
	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
    1b12:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    1b16:	f042 02ce 	orr.w	r2, r2, #206	; 0xce
    1b1a:	62aa      	str	r2, [r5, #40]	; 0x28

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    1b1c:	f8de 2004 	ldr.w	r2, [lr, #4]

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
    1b20:	4d16      	ldr	r5, [pc, #88]	; (1b7c <AudioOutputI2S::config_i2s()+0xb8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    1b22:	4013      	ands	r3, r2
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
    1b24:	4a16      	ldr	r2, [pc, #88]	; (1b80 <AudioOutputI2S::config_i2s()+0xbc>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    1b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1b2a:	f8ce 3004 	str.w	r3, [lr, #4]

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    1b2e:	f8c0 6120 	str.w	r6, [r0, #288]	; 0x120
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    1b32:	4b14      	ldr	r3, [pc, #80]	; (1b84 <AudioOutputI2S::config_i2s()+0xc0>)
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    1b34:	f8c0 6128 	str.w	r6, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
    1b38:	f8c0 6124 	str.w	r6, [r0, #292]	; 0x124

	I2S1_RMR = 0;
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    1b3c:	4812      	ldr	r0, [pc, #72]	; (1b88 <AudioOutputI2S::config_i2s()+0xc4>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    1b3e:	6627      	str	r7, [r4, #96]	; 0x60
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    1b40:	f8c4 c00c 	str.w	ip, [r4, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
    1b44:	6125      	str	r5, [r4, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
    1b46:	6161      	str	r1, [r4, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
    1b48:	61a2      	str	r2, [r4, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    1b4a:	61e3      	str	r3, [r4, #28]

	I2S1_RMR = 0;
    1b4c:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
    1b50:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    1b54:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	I2S1_RCR3 = I2S_RCR3_RCE;
    1b58:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    1b5c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
    1b60:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    1b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b66:	bf00      	nop
    1b68:	400fc000 	.word	0x400fc000
    1b6c:	40384000 	.word	0x40384000
    1b70:	fffffe00 	.word	0xfffffe00
    1b74:	fff7fff8 	.word	0xfff7fff8
    1b78:	401f8000 	.word	0x401f8000
    1b7c:	47000001 	.word	0x47000001
    1b80:	00011f1b 	.word	0x00011f1b
    1b84:	1f1f1f00 	.word	0x1f1f1f00
    1b88:	07000001 	.word	0x07000001
    1b8c:	400ac000 	.word	0x400ac000

00001b90 <AudioOutputI2S::begin()>:
#if defined(__IMXRT1062__)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
    1b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    1b92:	4c27      	ldr	r4, [pc, #156]	; (1c30 <AudioOutputI2S::begin()+0xa0>)
    1b94:	2101      	movs	r1, #1

	block_left_1st = NULL;
    1b96:	2500      	movs	r5, #0
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
    1b98:	4e26      	ldr	r6, [pc, #152]	; (1c34 <AudioOutputI2S::begin()+0xa4>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    1b9a:	4620      	mov	r0, r4
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    1b9c:	4f26      	ldr	r7, [pc, #152]	; (1c38 <AudioOutputI2S::begin()+0xa8>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    1b9e:	f003 fb77 	bl	5290 <DMAChannel::begin(bool)>

	block_left_1st = NULL;
    1ba2:	4a26      	ldr	r2, [pc, #152]	; (1c3c <AudioOutputI2S::begin()+0xac>)
	block_right_1st = NULL;
    1ba4:	4b26      	ldr	r3, [pc, #152]	; (1c40 <AudioOutputI2S::begin()+0xb0>)

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_left_1st = NULL;
    1ba6:	6015      	str	r5, [r2, #0]
	block_right_1st = NULL;
    1ba8:	601d      	str	r5, [r3, #0]

	config_i2s();
    1baa:	f7ff ff8b 	bl	1ac4 <AudioOutputI2S::config_i2s()>

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    1bae:	4b25      	ldr	r3, [pc, #148]	; (1c44 <AudioOutputI2S::begin()+0xb4>)
    1bb0:	2203      	movs	r2, #3
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
    1bb2:	2002      	movs	r0, #2
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    1bb4:	f240 1101 	movw	r1, #257	; 0x101

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    1bb8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    1bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
    1bc0:	6823      	ldr	r3, [r4, #0]
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1bc2:	f04f 0e06 	mov.w	lr, #6
	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
    1bc6:	601e      	str	r6, [r3, #0]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    1bc8:	4e1f      	ldr	r6, [pc, #124]	; (1c48 <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    1bca:	82da      	strh	r2, [r3, #22]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
    1bcc:	8098      	strh	r0, [r3, #4]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    1bce:	83da      	strh	r2, [r3, #30]

#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    1bd0:	80d9      	strh	r1, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    1bd2:	60de      	str	r6, [r3, #12]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    1bd4:	7921      	ldrb	r1, [r4, #4]
    1bd6:	4a1d      	ldr	r2, [pc, #116]	; (1c4c <AudioOutputI2S::begin()+0xbc>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    1bd8:	4e1d      	ldr	r6, [pc, #116]	; (1c50 <AudioOutputI2S::begin()+0xc0>)
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1bda:	f8a3 e01c 	strh.w	lr, [r3, #28]
#elif defined(__IMXRT1062__)
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    1bde:	6098      	str	r0, [r3, #8]
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    1be0:	611f      	str	r7, [r3, #16]
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DOFF = 0;
    1be2:	829d      	strh	r5, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
    1be4:	619d      	str	r5, [r3, #24]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1be6:	481b      	ldr	r0, [pc, #108]	; (1c54 <AudioOutputI2S::begin()+0xc4>)

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    1be8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    1bec:	4b1a      	ldr	r3, [pc, #104]	; (1c58 <AudioOutputI2S::begin()+0xc8>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    1bee:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
    1bf2:	7922      	ldrb	r2, [r4, #4]
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    1bf4:	4919      	ldr	r1, [pc, #100]	; (1c5c <AudioOutputI2S::begin()+0xcc>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1bf6:	76c2      	strb	r2, [r0, #27]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    1bf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
#endif
	update_responsibility = update_setup();
    1bfc:	4f18      	ldr	r7, [pc, #96]	; (1c60 <AudioOutputI2S::begin()+0xd0>)
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);
	dma.enable();

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    1bfe:	f042 4210 	orr.w	r2, r2, #2415919104	; 0x90000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1c02:	4e18      	ldr	r6, [pc, #96]	; (1c64 <AudioOutputI2S::begin()+0xd4>)
    1c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    1c08:	6099      	str	r1, [r3, #8]
#endif
	update_responsibility = update_setup();
    1c0a:	f003 fb21 	bl	5250 <AudioStream::update_setup()>
    1c0e:	7923      	ldrb	r3, [r4, #4]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1c10:	2201      	movs	r2, #1

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1c12:	4c15      	ldr	r4, [pc, #84]	; (1c68 <AudioOutputI2S::begin()+0xd8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1c14:	f003 011f 	and.w	r1, r3, #31

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1c18:	f103 0510 	add.w	r5, r3, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1c1c:	115b      	asrs	r3, r3, #5
    1c1e:	7038      	strb	r0, [r7, #0]
    1c20:	408a      	lsls	r2, r1
    1c22:	4912      	ldr	r1, [pc, #72]	; (1c6c <AudioOutputI2S::begin()+0xdc>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1c24:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    1c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c2e:	bf00      	nop
    1c30:	20006fd8 	.word	0x20006fd8
    1c34:	20200e40 	.word	0x20200e40
    1c38:	40384022 	.word	0x40384022
    1c3c:	20006fe8 	.word	0x20006fe8
    1c40:	20006fe0 	.word	0x20006fe0
    1c44:	401f8000 	.word	0x401f8000
    1c48:	fffffe00 	.word	0xfffffe00
    1c4c:	400ec000 	.word	0x400ec000
    1c50:	80000014 	.word	0x80000014
    1c54:	400e8000 	.word	0x400e8000
    1c58:	40384000 	.word	0x40384000
    1c5c:	90000001 	.word	0x90000001
    1c60:	20006ff0 	.word	0x20006ff0
    1c64:	000018d5 	.word	0x000018d5
    1c68:	20007800 	.word	0x20007800
    1c6c:	e000e100 	.word	0xe000e100

00001c70 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    1c70:	4a02      	ldr	r2, [pc, #8]	; (1c7c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    1c72:	4903      	ldr	r1, [pc, #12]	; (1c80 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    1c74:	4803      	ldr	r0, [pc, #12]	; (1c84 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    1c76:	f004 b953 	b.w	5f20 <__aeabi_atexit>
    1c7a:	bf00      	nop
    1c7c:	20004d14 	.word	0x20004d14
    1c80:	00001305 	.word	0x00001305
    1c84:	20006fd8 	.word	0x20006fd8

00001c88 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    1c88:	4a02      	ldr	r2, [pc, #8]	; (1c94 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    1c8a:	4903      	ldr	r1, [pc, #12]	; (1c98 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    1c8c:	4803      	ldr	r0, [pc, #12]	; (1c9c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    1c8e:	f004 b947 	b.w	5f20 <__aeabi_atexit>
    1c92:	bf00      	nop
    1c94:	20004d14 	.word	0x20004d14
    1c98:	00001305 	.word	0x00001305
    1c9c:	20006ff8 	.word	0x20006ff8

00001ca0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    1ca0:	4a02      	ldr	r2, [pc, #8]	; (1cac <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    1ca2:	4903      	ldr	r1, [pc, #12]	; (1cb0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    1ca4:	4803      	ldr	r0, [pc, #12]	; (1cb4 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    1ca6:	f004 b93b 	b.w	5f20 <__aeabi_atexit>
    1caa:	bf00      	nop
    1cac:	20004d14 	.word	0x20004d14
    1cb0:	00001305 	.word	0x00001305
    1cb4:	20007000 	.word	0x20007000

00001cb8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    1cb8:	4a02      	ldr	r2, [pc, #8]	; (1cc4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    1cba:	4903      	ldr	r1, [pc, #12]	; (1cc8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    1cbc:	4803      	ldr	r0, [pc, #12]	; (1ccc <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    1cbe:	f004 b92f 	b.w	5f20 <__aeabi_atexit>
    1cc2:	bf00      	nop
    1cc4:	20004d14 	.word	0x20004d14
    1cc8:	00001305 	.word	0x00001305
    1ccc:	20007008 	.word	0x20007008

00001cd0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    1cd0:	4a02      	ldr	r2, [pc, #8]	; (1cdc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    1cd2:	4903      	ldr	r1, [pc, #12]	; (1ce0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    1cd4:	4803      	ldr	r0, [pc, #12]	; (1ce4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    1cd6:	f004 b923 	b.w	5f20 <__aeabi_atexit>
    1cda:	bf00      	nop
    1cdc:	20004d14 	.word	0x20004d14
    1ce0:	00001305 	.word	0x00001305
    1ce4:	20007010 	.word	0x20007010

00001ce8 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    1ce8:	4a02      	ldr	r2, [pc, #8]	; (1cf4 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    1cea:	4903      	ldr	r1, [pc, #12]	; (1cf8 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    1cec:	4803      	ldr	r0, [pc, #12]	; (1cfc <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    1cee:	f004 b917 	b.w	5f20 <__aeabi_atexit>
    1cf2:	bf00      	nop
    1cf4:	20004d14 	.word	0x20004d14
    1cf8:	00001305 	.word	0x00001305
    1cfc:	20007018 	.word	0x20007018

00001d00 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    1d00:	4a02      	ldr	r2, [pc, #8]	; (1d0c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    1d02:	4903      	ldr	r1, [pc, #12]	; (1d10 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    1d04:	4803      	ldr	r0, [pc, #12]	; (1d14 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    1d06:	f004 b90b 	b.w	5f20 <__aeabi_atexit>
    1d0a:	bf00      	nop
    1d0c:	20004d14 	.word	0x20004d14
    1d10:	00001305 	.word	0x00001305
    1d14:	20007020 	.word	0x20007020

00001d18 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    1d18:	4a02      	ldr	r2, [pc, #8]	; (1d24 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    1d1a:	4903      	ldr	r1, [pc, #12]	; (1d28 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    1d1c:	4803      	ldr	r0, [pc, #12]	; (1d2c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    1d1e:	f004 b8ff 	b.w	5f20 <__aeabi_atexit>
    1d22:	bf00      	nop
    1d24:	20004d14 	.word	0x20004d14
    1d28:	00001305 	.word	0x00001305
    1d2c:	20007028 	.word	0x20007028

00001d30 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    1d30:	4a02      	ldr	r2, [pc, #8]	; (1d3c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    1d32:	4903      	ldr	r1, [pc, #12]	; (1d40 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    1d34:	4803      	ldr	r0, [pc, #12]	; (1d44 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    1d36:	f004 b8f3 	b.w	5f20 <__aeabi_atexit>
    1d3a:	bf00      	nop
    1d3c:	20004d14 	.word	0x20004d14
    1d40:	00001305 	.word	0x00001305
    1d44:	20007030 	.word	0x20007030

00001d48 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    1d48:	4a02      	ldr	r2, [pc, #8]	; (1d54 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    1d4a:	4903      	ldr	r1, [pc, #12]	; (1d58 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    1d4c:	4803      	ldr	r0, [pc, #12]	; (1d5c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    1d4e:	f004 b8e7 	b.w	5f20 <__aeabi_atexit>
    1d52:	bf00      	nop
    1d54:	20004d14 	.word	0x20004d14
    1d58:	00001305 	.word	0x00001305
    1d5c:	20007038 	.word	0x20007038

00001d60 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    1d60:	4a02      	ldr	r2, [pc, #8]	; (1d6c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    1d62:	4903      	ldr	r1, [pc, #12]	; (1d70 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    1d64:	4803      	ldr	r0, [pc, #12]	; (1d74 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    1d66:	f004 b8db 	b.w	5f20 <__aeabi_atexit>
    1d6a:	bf00      	nop
    1d6c:	20004d14 	.word	0x20004d14
    1d70:	00001305 	.word	0x00001305
    1d74:	20007040 	.word	0x20007040

00001d78 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    1d78:	4a02      	ldr	r2, [pc, #8]	; (1d84 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    1d7a:	4903      	ldr	r1, [pc, #12]	; (1d88 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    1d7c:	4803      	ldr	r0, [pc, #12]	; (1d8c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    1d7e:	f004 b8cf 	b.w	5f20 <__aeabi_atexit>
    1d82:	bf00      	nop
    1d84:	20004d14 	.word	0x20004d14
    1d88:	00001305 	.word	0x00001305
    1d8c:	20007048 	.word	0x20007048

00001d90 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    1d90:	4a02      	ldr	r2, [pc, #8]	; (1d9c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    1d92:	4903      	ldr	r1, [pc, #12]	; (1da0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    1d94:	4803      	ldr	r0, [pc, #12]	; (1da4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    1d96:	f004 b8c3 	b.w	5f20 <__aeabi_atexit>
    1d9a:	bf00      	nop
    1d9c:	20004d14 	.word	0x20004d14
    1da0:	00001305 	.word	0x00001305
    1da4:	20007050 	.word	0x20007050

00001da8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1da8:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1daa:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1dac:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1dae:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1db0:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1db2:	d003      	beq.n	1dbc <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1db4:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1db8:	f003 bad4 	b.w	5364 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1dbc:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1dc2:	4718      	bx	r3

00001dc4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    1dc4:	b470      	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1dc6:	f240 2501 	movw	r5, #513	; 0x201
    1dca:	6804      	ldr	r4, [r0, #0]
    1dcc:	6125      	str	r5, [r4, #16]

	while (count > 0) {
    1dce:	b31b      	cbz	r3, 1e18 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    1dd0:	461e      	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1dd2:	b1f1      	cbz	r1, 1e12 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    1dd4:	780d      	ldrb	r5, [r1, #0]
    1dd6:	3101      	adds	r1, #1
		count--; // how many bytes left to output.
    1dd8:	3b01      	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1dda:	6665      	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1ddc:	6f25      	ldr	r5, [r4, #112]	; 0x70
    1dde:	07ad      	lsls	r5, r5, #30
    1de0:	d406      	bmi.n	1df0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1de2:	6f65      	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    1de4:	3e01      	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1de6:	b2ed      	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    1de8:	b112      	cbz	r2, 1df0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    1dea:	7015      	strb	r5, [r2, #0]
    1dec:	3201      	adds	r2, #1
    1dee:	6804      	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    1df0:	6965      	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    1df2:	07ed      	lsls	r5, r5, #31
    1df4:	d5f2      	bpl.n	1ddc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    1df6:	2b00      	cmp	r3, #0
    1df8:	d1eb      	bne.n	1dd2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    1dfa:	b16e      	cbz	r6, 1e18 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1dfc:	6801      	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1dfe:	6f0b      	ldr	r3, [r1, #112]	; 0x70
    1e00:	079b      	lsls	r3, r3, #30
    1e02:	d4fc      	bmi.n	1dfe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1e04:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    1e06:	b2db      	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    1e08:	b10a      	cbz	r2, 1e0e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    1e0a:	7013      	strb	r3, [r2, #0]
    1e0c:	3201      	adds	r2, #1
			count_read--;
    1e0e:	3e01      	subs	r6, #1
    1e10:	e7f3      	b.n	1dfa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1e12:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    1e16:	e7df      	b.n	1dd8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    1e18:	bc70      	pop	{r4, r5, r6}
    1e1a:	4770      	bx	lr

00001e1c <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e1c:	b5f0      	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    1e1e:	4c30      	ldr	r4, [pc, #192]	; (1ee0 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1e20:	4b30      	ldr	r3, [pc, #192]	; (1ee4 <_spi_dma_rxISR0()+0xc8>)
    1e22:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    1e24:	6c65      	ldr	r5, [r4, #68]	; 0x44
    1e26:	7901      	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    1e28:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1e2a:	77d9      	strb	r1, [r3, #31]
    1e2c:	7929      	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1e2e:	7719      	strb	r1, [r3, #28]
    1e30:	7901      	ldrb	r1, [r0, #4]
    1e32:	7719      	strb	r1, [r3, #28]
    1e34:	b1fa      	cbz	r2, 1e76 <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    1e36:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    1e3a:	d218      	bcs.n	1e6e <_spi_dma_rxISR0()+0x52>
    1e3c:	682b      	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    1e3e:	b292      	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1e40:	8bd9      	ldrh	r1, [r3, #30]
    1e42:	040e      	lsls	r6, r1, #16
    1e44:	d43b      	bmi.n	1ebe <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    1e46:	83da      	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1e48:	8bd9      	ldrh	r1, [r3, #30]
    1e4a:	b289      	uxth	r1, r1
    1e4c:	82d9      	strh	r1, [r3, #22]
    1e4e:	6803      	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1e50:	8bd9      	ldrh	r1, [r3, #30]
    1e52:	0409      	lsls	r1, r1, #16
    1e54:	d42c      	bmi.n	1eb0 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1e56:	83da      	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    1e58:	2100      	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1e5a:	8bda      	ldrh	r2, [r3, #30]
    1e5c:	b292      	uxth	r2, r2
    1e5e:	82da      	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    1e60:	6421      	str	r1, [r4, #64]	; 0x40
    1e62:	7902      	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1e64:	4b1f      	ldr	r3, [pc, #124]	; (1ee4 <_spi_dma_rxISR0()+0xc8>)
    1e66:	76da      	strb	r2, [r3, #27]
    1e68:	792a      	ldrb	r2, [r5, #4]
    1e6a:	76da      	strb	r2, [r3, #27]
    1e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    1e6e:	4b1e      	ldr	r3, [pc, #120]	; (1ee8 <_spi_dma_rxISR0()+0xcc>)
    1e70:	4413      	add	r3, r2
    1e72:	6423      	str	r3, [r4, #64]	; 0x40
    1e74:	e7f5      	b.n	1e62 <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e76:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1e78:	250f      	movs	r5, #15
    1e7a:	6823      	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1e7c:	f240 3e01 	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e80:	6801      	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    1e82:	f44f 577c 	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1e86:	659d      	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1e88:	2603      	movs	r6, #3
		_dma_event_responder->triggerEvent();
    1e8a:	680d      	ldr	r5, [r1, #0]
    1e8c:	4917      	ldr	r1, [pc, #92]	; (1eec <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    1e8e:	61da      	str	r2, [r3, #28]
    1e90:	428d      	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1e92:	f8c3 e010 	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1e96:	615f      	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1e98:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    1e9c:	d117      	bne.n	1ece <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1e9e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1ea0:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1ea2:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1ea4:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1ea6:	d017      	beq.n	1ed8 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1ea8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1eac:	f003 ba5a 	b.w	5364 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1eb0:	8bd9      	ldrh	r1, [r3, #30]
    1eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1eb6:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    1eba:	430a      	orrs	r2, r1
    1ebc:	e7cb      	b.n	1e56 <_spi_dma_rxISR0()+0x3a>
    1ebe:	8bd9      	ldrh	r1, [r3, #30]
    1ec0:	f3c2 0608 	ubfx	r6, r2, #0, #9
    1ec4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    1ec8:	4331      	orrs	r1, r6
    1eca:	83d9      	strh	r1, [r3, #30]
    1ecc:	e7bc      	b.n	1e48 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1ece:	462b      	mov	r3, r5
    1ed0:	4611      	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1ed2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1ed6:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1ed8:	6883      	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1eda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1ede:	4718      	bx	r3
    1ee0:	20004d18 	.word	0x20004d18
    1ee4:	400e8000 	.word	0x400e8000
    1ee8:	ffff8001 	.word	0xffff8001
    1eec:	00001da9 	.word	0x00001da9

00001ef0 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    1ef0:	6843      	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    1ef2:	b5f0      	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1ef4:	e893 0082 	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1ef8:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 20f8 <SPIClass::begin()+0x208>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1efc:	26b8      	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1efe:	680a      	ldr	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    1f00:	2502      	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1f02:	4c75      	ldr	r4, [pc, #468]	; (20d8 <SPIClass::begin()+0x1e8>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1f04:	ea22 0207 	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1f08:	4f74      	ldr	r7, [pc, #464]	; (20dc <SPIClass::begin()+0x1ec>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1f0a:	600a      	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1f0c:	f8de 2018 	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1f10:	4014      	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1f12:	4a73      	ldr	r2, [pc, #460]	; (20e0 <SPIClass::begin()+0x1f0>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1f14:	4327      	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    1f16:	240f      	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1f18:	f8ce 7018 	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1f1c:	7c07      	ldrb	r7, [r0, #16]
    1f1e:	441f      	add	r7, r3
    1f20:	7c3f      	ldrb	r7, [r7, #16]
    1f22:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    1f26:	68bf      	ldr	r7, [r7, #8]
    1f28:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    1f2a:	7c47      	ldrb	r7, [r0, #17]
    1f2c:	441f      	add	r7, r3
    1f2e:	f897 7020 	ldrb.w	r7, [r7, #32]
    1f32:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    1f36:	68bf      	ldr	r7, [r7, #8]
    1f38:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    1f3a:	7c87      	ldrb	r7, [r0, #18]
    1f3c:	441f      	add	r7, r3
    1f3e:	f897 7030 	ldrb.w	r7, [r7, #48]	; 0x30
    1f42:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    1f46:	68bf      	ldr	r7, [r7, #8]
    1f48:	603e      	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    1f4a:	680f      	ldr	r7, [r1, #0]
    1f4c:	685e      	ldr	r6, [r3, #4]
    1f4e:	433e      	orrs	r6, r7
    1f50:	600e      	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    1f52:	7c01      	ldrb	r1, [r0, #16]
    1f54:	185e      	adds	r6, r3, r1
    1f56:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1f5a:	7c36      	ldrb	r6, [r6, #16]
    1f5c:	694f      	ldr	r7, [r1, #20]
    1f5e:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    1f62:	6849      	ldr	r1, [r1, #4]
    1f64:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    1f66:	7c41      	ldrb	r1, [r0, #17]
    1f68:	185e      	adds	r6, r3, r1
    1f6a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1f6e:	f896 6020 	ldrb.w	r6, [r6, #32]
    1f72:	6a4f      	ldr	r7, [r1, #36]	; 0x24
    1f74:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    1f78:	6849      	ldr	r1, [r1, #4]
    1f7a:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1f7c:	7c81      	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    1f7e:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1f82:	185e      	adds	r6, r3, r1
    1f84:	eb03 0181 	add.w	r1, r3, r1, lsl #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    1f88:	69df      	ldr	r7, [r3, #28]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1f8a:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
    1f8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    1f90:	eb02 1206 	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    1f94:	6ade      	ldr	r6, [r3, #44]	; 0x2c

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1f96:	6852      	ldr	r2, [r2, #4]
    1f98:	6011      	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    1f9a:	7c81      	ldrb	r1, [r0, #18]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1f9c:	6802      	ldr	r2, [r0, #0]
    1f9e:	4419      	add	r1, r3
    1fa0:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
    1fa4:	f8ce 1000 	str.w	r1, [lr]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    1fa8:	7c01      	ldrb	r1, [r0, #16]
    1faa:	4419      	add	r1, r3
    1fac:	7e09      	ldrb	r1, [r1, #24]
    1fae:	6039      	str	r1, [r7, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    1fb0:	7c41      	ldrb	r1, [r0, #17]
    1fb2:	440b      	add	r3, r1
    1fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    1fb8:	6033      	str	r3, [r6, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    1fba:	6115      	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    1fbc:	6594      	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1fbe:	7cc3      	ldrb	r3, [r0, #19]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d029      	beq.n	2018 <SPIClass::begin()+0x128>
			__disable_irq();
    1fc4:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1fc6:	7cc3      	ldrb	r3, [r0, #19]
    1fc8:	07dc      	lsls	r4, r3, #31
    1fca:	d506      	bpl.n	1fda <SPIClass::begin()+0xea>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1fcc:	4a45      	ldr	r2, [pc, #276]	; (20e4 <SPIClass::begin()+0x1f4>)
    1fce:	6943      	ldr	r3, [r0, #20]
    1fd0:	6811      	ldr	r1, [r2, #0]
    1fd2:	400b      	ands	r3, r1
    1fd4:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1fd6:	6013      	str	r3, [r2, #0]
    1fd8:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    1fda:	0799      	lsls	r1, r3, #30
    1fdc:	d506      	bpl.n	1fec <SPIClass::begin()+0xfc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1fde:	4a42      	ldr	r2, [pc, #264]	; (20e8 <SPIClass::begin()+0x1f8>)
    1fe0:	6983      	ldr	r3, [r0, #24]
    1fe2:	6811      	ldr	r1, [r2, #0]
    1fe4:	400b      	ands	r3, r1
    1fe6:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1fe8:	6013      	str	r3, [r2, #0]
    1fea:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    1fec:	075a      	lsls	r2, r3, #29
    1fee:	d506      	bpl.n	1ffe <SPIClass::begin()+0x10e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1ff0:	4a3e      	ldr	r2, [pc, #248]	; (20ec <SPIClass::begin()+0x1fc>)
    1ff2:	69c3      	ldr	r3, [r0, #28]
    1ff4:	6811      	ldr	r1, [r2, #0]
    1ff6:	400b      	ands	r3, r1
    1ff8:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1ffa:	6013      	str	r3, [r2, #0]
    1ffc:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    1ffe:	071f      	lsls	r7, r3, #28
    2000:	d506      	bpl.n	2010 <SPIClass::begin()+0x120>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2002:	4a3b      	ldr	r2, [pc, #236]	; (20f0 <SPIClass::begin()+0x200>)
    2004:	6a03      	ldr	r3, [r0, #32]
    2006:	6811      	ldr	r1, [r2, #0]
    2008:	400b      	ands	r3, r1
    200a:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    200c:	6013      	str	r3, [r2, #0]
    200e:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    2010:	06de      	lsls	r6, r3, #27
    2012:	d44b      	bmi.n	20ac <SPIClass::begin()+0x1bc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    2014:	b662      	cpsie	i
    2016:	6802      	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    2018:	4d36      	ldr	r5, [pc, #216]	; (20f4 <SPIClass::begin()+0x204>)
    201a:	6883      	ldr	r3, [r0, #8]
    201c:	42ab      	cmp	r3, r5
    201e:	d04c      	beq.n	20ba <SPIClass::begin()+0x1ca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    2020:	4b35      	ldr	r3, [pc, #212]	; (20f8 <SPIClass::begin()+0x208>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    2022:	6085      	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    2024:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2026:	4c35      	ldr	r4, [pc, #212]	; (20fc <SPIClass::begin()+0x20c>)
    2028:	f3c3 1601 	ubfx	r6, r3, #4, #2
    202c:	f3c3 6182 	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    2030:	4b33      	ldr	r3, [pc, #204]	; (2100 <SPIClass::begin()+0x210>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2032:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    2036:	3101      	adds	r1, #1
    2038:	fbb4 f1f1 	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    203c:	fba3 4301 	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    2040:	0d1b      	lsrs	r3, r3, #20
    2042:	d129      	bne.n	2098 <SPIClass::begin()+0x1a8>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2044:	60c3      	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    2046:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2048:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    204a:	2407      	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    204c:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    204e:	6116      	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2050:	6255      	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    2052:	6413      	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    2054:	6614      	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2056:	6111      	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    2058:	7cc3      	ldrb	r3, [r0, #19]
    205a:	b1e3      	cbz	r3, 2096 <SPIClass::begin()+0x1a6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    205c:	07dd      	lsls	r5, r3, #31
    205e:	d503      	bpl.n	2068 <SPIClass::begin()+0x178>
    2060:	4b28      	ldr	r3, [pc, #160]	; (2104 <SPIClass::begin()+0x214>)
    2062:	6a82      	ldr	r2, [r0, #40]	; 0x28
    2064:	601a      	str	r2, [r3, #0]
    2066:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    2068:	079c      	lsls	r4, r3, #30
    206a:	d503      	bpl.n	2074 <SPIClass::begin()+0x184>
    206c:	4b26      	ldr	r3, [pc, #152]	; (2108 <SPIClass::begin()+0x218>)
    206e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2070:	601a      	str	r2, [r3, #0]
    2072:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2074:	0759      	lsls	r1, r3, #29
    2076:	d503      	bpl.n	2080 <SPIClass::begin()+0x190>
    2078:	4b24      	ldr	r3, [pc, #144]	; (210c <SPIClass::begin()+0x21c>)
    207a:	6b02      	ldr	r2, [r0, #48]	; 0x30
    207c:	601a      	str	r2, [r3, #0]
    207e:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2080:	071a      	lsls	r2, r3, #28
    2082:	d503      	bpl.n	208c <SPIClass::begin()+0x19c>
    2084:	4b22      	ldr	r3, [pc, #136]	; (2110 <SPIClass::begin()+0x220>)
    2086:	6b42      	ldr	r2, [r0, #52]	; 0x34
    2088:	601a      	str	r2, [r3, #0]
    208a:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    208c:	06db      	lsls	r3, r3, #27
    208e:	d502      	bpl.n	2096 <SPIClass::begin()+0x1a6>
    2090:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2092:	4b20      	ldr	r3, [pc, #128]	; (2114 <SPIClass::begin()+0x224>)
    2094:	601a      	str	r2, [r3, #0]
    2096:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    2098:	fbb1 f1f3 	udiv	r1, r1, r3
    209c:	42a9      	cmp	r1, r5
    209e:	bf88      	it	hi
    20a0:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    20a2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    20a6:	d30a      	bcc.n	20be <SPIClass::begin()+0x1ce>
    20a8:	4b1b      	ldr	r3, [pc, #108]	; (2118 <SPIClass::begin()+0x228>)
    20aa:	e7cb      	b.n	2044 <SPIClass::begin()+0x154>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    20ac:	4a1b      	ldr	r2, [pc, #108]	; (211c <SPIClass::begin()+0x22c>)
    20ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
    20b0:	6811      	ldr	r1, [r2, #0]
    20b2:	400b      	ands	r3, r1
    20b4:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    20b6:	6013      	str	r3, [r2, #0]
    20b8:	e7ac      	b.n	2014 <SPIClass::begin()+0x124>
    20ba:	68c3      	ldr	r3, [r0, #12]
    20bc:	e7c3      	b.n	2046 <SPIClass::begin()+0x156>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    20be:	2b02      	cmp	r3, #2
    20c0:	bf98      	it	ls
    20c2:	2300      	movls	r3, #0
    20c4:	d9be      	bls.n	2044 <SPIClass::begin()+0x154>
    20c6:	3b02      	subs	r3, #2
    20c8:	085c      	lsrs	r4, r3, #1
    20ca:	0421      	lsls	r1, r4, #16
    20cc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    20d0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    20d4:	430b      	orrs	r3, r1
    20d6:	e7b5      	b.n	2044 <SPIClass::begin()+0x154>
    20d8:	e3ffffcf 	.word	0xe3ffffcf
    20dc:	08000010 	.word	0x08000010
    20e0:	200011ec 	.word	0x200011ec
    20e4:	e000e180 	.word	0xe000e180
    20e8:	e000e184 	.word	0xe000e184
    20ec:	e000e188 	.word	0xe000e188
    20f0:	e000e18c 	.word	0xe000e18c
    20f4:	003d0900 	.word	0x003d0900
    20f8:	400fc000 	.word	0x400fc000
    20fc:	20000030 	.word	0x20000030
    2100:	431bde83 	.word	0x431bde83
    2104:	e000e100 	.word	0xe000e100
    2108:	e000e104 	.word	0xe000e104
    210c:	e000e108 	.word	0xe000e108
    2110:	e000e10c 	.word	0xe000e10c
    2114:	e000e110 	.word	0xe000e110
    2118:	007f7fff 	.word	0x007f7fff
    211c:	e000e190 	.word	0xe000e190

00002120 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    2120:	b10b      	cbz	r3, 2126 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2122:	f7ff be4f 	b.w	1dc4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    2126:	4770      	bx	lr

00002128 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    2128:	2000      	movs	r0, #0
    212a:	4770      	bx	lr

0000212c <Print::flush()>:
	virtual void flush()				{ }
    212c:	4770      	bx	lr
    212e:	bf00      	nop

00002130 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    2130:	4b06      	ldr	r3, [pc, #24]	; (214c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
    2132:	2200      	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    2134:	2002      	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2136:	4906      	ldr	r1, [pc, #24]	; (2150 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    2138:	709a      	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    213a:	6058      	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    213c:	62d9      	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2146:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    214a:	4770      	bx	lr
    214c:	20007058 	.word	0x20007058
    2150:	200011b8 	.word	0x200011b8

00002154 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    2154:	4b20      	ldr	r3, [pc, #128]	; (21d8 <SDHC_CMD_Do(unsigned long)+0x84>)
    2156:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    2158:	4619      	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    215a:	b410      	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    215c:	f042 0280 	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    2160:	461c      	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    2162:	631a      	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    2164:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    2166:	4b1c      	ldr	r3, [pc, #112]	; (21d8 <SDHC_CMD_Do(unsigned long)+0x84>)
    2168:	07d2      	lsls	r2, r2, #31
    216a:	d4fb      	bmi.n	2164 <SDHC_CMD_Do(unsigned long)+0x10>
    216c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    216e:	0792      	lsls	r2, r2, #30
    2170:	d4f8      	bmi.n	2164 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    2172:	60d8      	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    2174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    2178:	4618      	mov	r0, r3
    217a:	e000      	b.n	217e <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    217c:	b1aa      	cbz	r2, 21aa <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    217e:	6b01      	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    2180:	3a01      	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    2182:	4b16      	ldr	r3, [pc, #88]	; (21dc <SDHC_CMD_Do(unsigned long)+0x88>)
    2184:	4c14      	ldr	r4, [pc, #80]	; (21d8 <SDHC_CMD_Do(unsigned long)+0x84>)
    2186:	400b      	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    2188:	2b00      	cmp	r3, #0
    218a:	d0f7      	beq.n	217c <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    218c:	b16a      	cbz	r2, 21aa <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    218e:	2b01      	cmp	r3, #1
    2190:	d10b      	bne.n	21aa <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    2192:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2194:	f013 0f80 	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    2198:	6b23      	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    219a:	d00f      	beq.n	21bc <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    219c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    21a0:	2003      	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    21a2:	6323      	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    21a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    21a8:	4770      	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    21aa:	4a0b      	ldr	r2, [pc, #44]	; (21d8 <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    21ac:	2001      	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    21ae:	4b0c      	ldr	r3, [pc, #48]	; (21e0 <SDHC_CMD_Do(unsigned long)+0x8c>)
    21b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
    21b2:	430b      	orrs	r3, r1
    21b4:	6313      	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    21b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    21ba:	4770      	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    21bc:	f413 3080 	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    21c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    21c2:	d004      	beq.n	21ce <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    21c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    21c8:	2005      	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    21ca:	6323      	str	r3, [r4, #48]	; 0x30
    21cc:	e7f3      	b.n	21b6 <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    21ce:	f043 0301 	orr.w	r3, r3, #1
    21d2:	6323      	str	r3, [r4, #48]	; 0x30
    21d4:	e7ef      	b.n	21b6 <SDHC_CMD_Do(unsigned long)+0x62>
    21d6:	bf00      	nop
    21d8:	402c0000 	.word	0x402c0000
    21dc:	000e0001 	.word	0x000e0001
    21e0:	000f0001 	.word	0x000f0001

000021e4 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    21e4:	b570      	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    21e6:	4d0d      	ldr	r5, [pc, #52]	; (221c <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    21e8:	2600      	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    21ea:	480d      	ldr	r0, [pc, #52]	; (2220 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    21ec:	f240 34e7 	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    21f0:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    21f2:	f7ff ffaf 	bl	2154 <SDHC_CMD_Do(unsigned long)>
    21f6:	4603      	mov	r3, r0
    21f8:	e006      	b.n	2208 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    21fa:	b94b      	cbnz	r3, 2210 <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    21fc:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    21fe:	f7ff ffa9 	bl	2154 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    2202:	3c01      	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    2204:	4603      	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    2206:	d005      	beq.n	2214 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    2208:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    220a:	4805      	ldr	r0, [pc, #20]	; (2220 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    220c:	0752      	lsls	r2, r2, #29
    220e:	d4f4      	bmi.n	21fa <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    2210:	4618      	mov	r0, r3
    2212:	bd70      	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    2214:	2800      	cmp	r0, #0
    2216:	bf08      	it	eq
    2218:	2005      	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    221a:	bd70      	pop	{r4, r5, r6, pc}
    221c:	402c0000 	.word	0x402c0000
    2220:	0cdb0000 	.word	0x0cdb0000

00002224 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    2224:	4b38      	ldr	r3, [pc, #224]	; (2308 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    2226:	781a      	ldrb	r2, [r3, #0]
    2228:	b10a      	cbz	r2, 222e <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    222a:	2003      	movs	r0, #3
    222c:	4770      	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    222e:	b570      	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    2230:	785b      	ldrb	r3, [r3, #1]
    2232:	4606      	mov	r6, r0
    2234:	b903      	cbnz	r3, 2238 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    2236:	0249      	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    2238:	4d34      	ldr	r5, [pc, #208]	; (230c <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    223a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    223e:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2242:	4833      	ldr	r0, [pc, #204]	; (2310 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    2244:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    2246:	6cab      	ldr	r3, [r5, #72]	; 0x48
    2248:	f043 0310 	orr.w	r3, r3, #16
    224c:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    224e:	60a9      	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    2250:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2252:	f7ff ff7f 	bl	2154 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    2256:	2800      	cmp	r0, #0
    2258:	d14d      	bne.n	22f6 <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    225a:	462c      	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    225c:	692b      	ldr	r3, [r5, #16]
    225e:	f106 0240 	add.w	r2, r6, #64	; 0x40
    2262:	f506 7010 	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    2266:	4629      	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    2268:	6b23      	ldr	r3, [r4, #48]	; 0x30
    226a:	4e28      	ldr	r6, [pc, #160]	; (230c <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    226c:	f043 0520 	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    2270:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    2274:	6325      	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    2276:	d13f      	bne.n	22f8 <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    2278:	6a63      	ldr	r3, [r4, #36]	; 0x24
    227a:	051d      	lsls	r5, r3, #20
    227c:	d5fc      	bpl.n	2278 <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    227e:	6a0b      	ldr	r3, [r1, #32]
    2280:	3240      	adds	r2, #64	; 0x40
    2282:	f842 3c80 	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    2286:	6a0b      	ldr	r3, [r1, #32]
    2288:	f842 3c7c 	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    228c:	6a0b      	ldr	r3, [r1, #32]
    228e:	f842 3c78 	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    2292:	6a0b      	ldr	r3, [r1, #32]
    2294:	f842 3c74 	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    2298:	6a0b      	ldr	r3, [r1, #32]
    229a:	f842 3c70 	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    229e:	6a0b      	ldr	r3, [r1, #32]
    22a0:	f842 3c6c 	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    22a4:	6a0b      	ldr	r3, [r1, #32]
    22a6:	f842 3c68 	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    22aa:	6a0b      	ldr	r3, [r1, #32]
    22ac:	f842 3c64 	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    22b0:	6a0b      	ldr	r3, [r1, #32]
    22b2:	f842 3c60 	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    22b6:	6a0b      	ldr	r3, [r1, #32]
    22b8:	f842 3c5c 	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    22bc:	6a0b      	ldr	r3, [r1, #32]
    22be:	f842 3c58 	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    22c2:	6a0b      	ldr	r3, [r1, #32]
    22c4:	f842 3c54 	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    22c8:	6a0b      	ldr	r3, [r1, #32]
    22ca:	f842 3c50 	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    22ce:	6a0b      	ldr	r3, [r1, #32]
    22d0:	f842 3c4c 	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    22d4:	6a0b      	ldr	r3, [r1, #32]
    22d6:	f842 3c48 	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    22da:	6a0b      	ldr	r3, [r1, #32]
    22dc:	f842 3c44 	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    22e0:	4282      	cmp	r2, r0
    22e2:	d1c1      	bne.n	2268 <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    22e4:	2000      	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    22e6:	4909      	ldr	r1, [pc, #36]	; (230c <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    22e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    22ea:	4a08      	ldr	r2, [pc, #32]	; (230c <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    22ec:	079b      	lsls	r3, r3, #30
    22ee:	d5fb      	bpl.n	22e8 <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    22f0:	4b08      	ldr	r3, [pc, #32]	; (2314 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    22f2:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    22f4:	bd70      	pop	{r4, r5, r6, pc}
}
    22f6:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    22f8:	4a07      	ldr	r2, [pc, #28]	; (2318 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    22fa:	431a      	orrs	r2, r3
    22fc:	6332      	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    22fe:	f7ff ff71 	bl	21e4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    2302:	2001      	movs	r0, #1
    2304:	e7ef      	b.n	22e6 <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    2306:	bf00      	nop
    2308:	200070ac 	.word	0x200070ac
    230c:	402c0000 	.word	0x402c0000
    2310:	113a0010 	.word	0x113a0010
    2314:	01000022 	.word	0x01000022
    2318:	00700020 	.word	0x00700020

0000231c <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    231e:	4b28      	ldr	r3, [pc, #160]	; (23c0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    2320:	781a      	ldrb	r2, [r3, #0]
    2322:	b10a      	cbz	r2, 2328 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    2324:	2003      	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    2326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    2328:	785b      	ldrb	r3, [r3, #1]
    232a:	4604      	mov	r4, r0
    232c:	b903      	cbnz	r3, 2330 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    232e:	0249      	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    2330:	4d24      	ldr	r5, [pc, #144]	; (23c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    2332:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2336:	4824      	ldr	r0, [pc, #144]	; (23c8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    2338:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    233a:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    233c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    233e:	f023 0310 	bic.w	r3, r3, #16
    2342:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    2344:	60a9      	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    2346:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2348:	f7ff ff04 	bl	2154 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    234c:	2800      	cmp	r0, #0
    234e:	d1ea      	bne.n	2326 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    2350:	462a      	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2352:	692b      	ldr	r3, [r5, #16]
    2354:	f504 7700 	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    2358:	462e      	mov	r6, r5
    235a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    235c:	4919      	ldr	r1, [pc, #100]	; (23c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    235e:	06d8      	lsls	r0, r3, #27
    2360:	d5fb      	bpl.n	235a <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    2362:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2364:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
    2368:	d119      	bne.n	239e <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    236a:	f104 0140 	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    236e:	f854 3b04 	ldr.w	r3, [r4], #4
    2372:	4d14      	ldr	r5, [pc, #80]	; (23c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    2374:	42a1      	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    2376:	6213      	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    2378:	d1f9      	bne.n	236e <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    237a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    237c:	f043 0310 	orr.w	r3, r3, #16
    2380:	6333      	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    2382:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2384:	f413 00e0 	ands.w	r0, r3, #7340032	; 0x700000
    2388:	d111      	bne.n	23ae <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    238a:	428f      	cmp	r7, r1
    238c:	d1e5      	bne.n	235a <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    238e:	490d      	ldr	r1, [pc, #52]	; (23c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    2390:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2392:	4a0c      	ldr	r2, [pc, #48]	; (23c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    2394:	079b      	lsls	r3, r3, #30
    2396:	d5fb      	bpl.n	2390 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    2398:	4b0c      	ldr	r3, [pc, #48]	; (23cc <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    239a:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    239e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    23a0:	4b0b      	ldr	r3, [pc, #44]	; (23d0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    23a2:	4313      	orrs	r3, r2
    23a4:	630b      	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    23a6:	f7ff ff1d 	bl	21e4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    23aa:	2001      	movs	r0, #1
    23ac:	e7ef      	b.n	238e <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    23ae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    23b0:	4b07      	ldr	r3, [pc, #28]	; (23d0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    23b2:	4313      	orrs	r3, r2
    23b4:	632b      	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    23b6:	f7ff ff15 	bl	21e4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    23ba:	2001      	movs	r0, #1
    23bc:	e7e7      	b.n	238e <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    23be:	bf00      	nop
    23c0:	200070ac 	.word	0x200070ac
    23c4:	402c0000 	.word	0x402c0000
    23c8:	183a0000 	.word	0x183a0000
    23cc:	01000012 	.word	0x01000012
    23d0:	00700010 	.word	0x00700010

000023d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    23d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d6:	4e27      	ldr	r6, [pc, #156]	; (2474 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    23d8:	27ff      	movs	r7, #255	; 0xff
    23da:	4d27      	ldr	r5, [pc, #156]	; (2478 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    23dc:	f8d6 e000 	ldr.w	lr, [r6]
    23e0:	682b      	ldr	r3, [r5, #0]
    23e2:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    23e4:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    23e6:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    23ea:	d0fb      	beq.n	23e4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    23ec:	6f5c      	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    23ee:	b2e4      	uxtb	r4, r4
    23f0:	2cff      	cmp	r4, #255	; 0xff
    23f2:	d005      	beq.n	2400 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    23f4:	6834      	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    23f6:	ebce 0404 	rsb	r4, lr, r4
    23fa:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    23fe:	d3f0      	bcc.n	23e2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2400:	f041 0440 	orr.w	r4, r1, #64	; 0x40
    2404:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2406:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2408:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    240c:	d0fb      	beq.n	2406 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    240e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
    2410:	2618      	movs	r6, #24
    2412:	fa22 f406 	lsr.w	r4, r2, r6
    2416:	b2e4      	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2418:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    241a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    241c:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    2420:	d0fb      	beq.n	241a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    2422:	3e08      	subs	r6, #8
    2424:	6f5c      	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    2426:	f116 0f08 	cmn.w	r6, #8
    242a:	d1f2      	bne.n	2412 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    242c:	b1f9      	cbz	r1, 246e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    242e:	2908      	cmp	r1, #8
    2430:	bf0c      	ite	eq
    2432:	2287      	moveq	r2, #135	; 0x87
    2434:	22ff      	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2436:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2438:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    243a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    243e:	d0fb      	beq.n	2438 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    2440:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    2442:	2100      	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2444:	24ff      	movs	r4, #255	; 0xff
    2446:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    244a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    244e:	d0fb      	beq.n	2448 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    2450:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    2452:	b2cb      	uxtb	r3, r1
    2454:	3101      	adds	r1, #1
    2456:	3bff      	subs	r3, #255	; 0xff
    2458:	b2d2      	uxtb	r2, r2
    245a:	bf18      	it	ne
    245c:	2301      	movne	r3, #1
    245e:	7042      	strb	r2, [r0, #1]
    2460:	ea13 13d2 	ands.w	r3, r3, r2, lsr #7
    2464:	d001      	beq.n	246a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    2466:	682b      	ldr	r3, [r5, #0]
    2468:	e7ed      	b.n	2446 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    246a:	4610      	mov	r0, r2
    246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    246e:	2295      	movs	r2, #149	; 0x95
    2470:	e7e1      	b.n	2436 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    2472:	bf00      	nop
    2474:	20007304 	.word	0x20007304
    2478:	20004d18 	.word	0x20004d18

0000247c <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    247c:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    247e:	2101      	movs	r1, #1
    2480:	7800      	ldrb	r0, [r0, #0]
    2482:	f001 fb6b 	bl	3b5c <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    2486:	4913      	ldr	r1, [pc, #76]	; (24d4 <Sd2Card::chipSelectHigh()+0x58>)
    2488:	780b      	ldrb	r3, [r1, #0]
    248a:	b1eb      	cbz	r3, 24c8 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    248c:	4a12      	ldr	r2, [pc, #72]	; (24d8 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    248e:	2000      	movs	r0, #0
    2490:	7cd3      	ldrb	r3, [r2, #19]
    2492:	7008      	strb	r0, [r1, #0]
    2494:	4619      	mov	r1, r3
    2496:	b1bb      	cbz	r3, 24c8 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2498:	07d8      	lsls	r0, r3, #31
    249a:	d502      	bpl.n	24a2 <Sd2Card::chipSelectHigh()+0x26>
    249c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    249e:	480f      	ldr	r0, [pc, #60]	; (24dc <Sd2Card::chipSelectHigh()+0x60>)
    24a0:	6004      	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    24a2:	079b      	lsls	r3, r3, #30
    24a4:	d503      	bpl.n	24ae <Sd2Card::chipSelectHigh()+0x32>
    24a6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    24a8:	4b0d      	ldr	r3, [pc, #52]	; (24e0 <Sd2Card::chipSelectHigh()+0x64>)
    24aa:	7cd1      	ldrb	r1, [r2, #19]
    24ac:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    24ae:	074c      	lsls	r4, r1, #29
    24b0:	d503      	bpl.n	24ba <Sd2Card::chipSelectHigh()+0x3e>
    24b2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    24b4:	4b0b      	ldr	r3, [pc, #44]	; (24e4 <Sd2Card::chipSelectHigh()+0x68>)
    24b6:	7cd1      	ldrb	r1, [r2, #19]
    24b8:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    24ba:	0708      	lsls	r0, r1, #28
    24bc:	d405      	bmi.n	24ca <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    24be:	06cb      	lsls	r3, r1, #27
    24c0:	d502      	bpl.n	24c8 <Sd2Card::chipSelectHigh()+0x4c>
    24c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    24c4:	4b08      	ldr	r3, [pc, #32]	; (24e8 <Sd2Card::chipSelectHigh()+0x6c>)
    24c6:	601a      	str	r2, [r3, #0]
    24c8:	bd10      	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    24ca:	6b50      	ldr	r0, [r2, #52]	; 0x34
    24cc:	4b07      	ldr	r3, [pc, #28]	; (24ec <Sd2Card::chipSelectHigh()+0x70>)
    24ce:	7cd1      	ldrb	r1, [r2, #19]
    24d0:	6018      	str	r0, [r3, #0]
    24d2:	e7f4      	b.n	24be <Sd2Card::chipSelectHigh()+0x42>
    24d4:	200070c4 	.word	0x200070c4
    24d8:	20004d18 	.word	0x20004d18
    24dc:	e000e100 	.word	0xe000e100
    24e0:	e000e104 	.word	0xe000e104
    24e4:	e000e108 	.word	0xe000e108
    24e8:	e000e110 	.word	0xe000e110
    24ec:	e000e10c 	.word	0xe000e10c

000024f0 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    24f0:	4a40      	ldr	r2, [pc, #256]	; (25f4 <Sd2Card::chipSelectLow()+0x104>)
    24f2:	7813      	ldrb	r3, [r2, #0]
    24f4:	b11b      	cbz	r3, 24fe <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    24f6:	7800      	ldrb	r0, [r0, #0]
    24f8:	2100      	movs	r1, #0
    24fa:	f001 bb2f 	b.w	3b5c <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    24fe:	4b3e      	ldr	r3, [pc, #248]	; (25f8 <Sd2Card::chipSelectLow()+0x108>)
    2500:	493e      	ldr	r1, [pc, #248]	; (25fc <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    2502:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    2504:	2401      	movs	r4, #1
    2506:	7cde      	ldrb	r6, [r3, #19]
    2508:	680d      	ldr	r5, [r1, #0]
    250a:	7014      	strb	r4, [r2, #0]
    250c:	684c      	ldr	r4, [r1, #4]
    250e:	2e00      	cmp	r6, #0
    2510:	d031      	beq.n	2576 <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
    2512:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2514:	7cd9      	ldrb	r1, [r3, #19]
    2516:	07ce      	lsls	r6, r1, #31
    2518:	460a      	mov	r2, r1
    251a:	d508      	bpl.n	252e <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    251c:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 261c <Sd2Card::chipSelectLow()+0x12c>
    2520:	695f      	ldr	r7, [r3, #20]
    2522:	f8de 6000 	ldr.w	r6, [lr]
    2526:	403e      	ands	r6, r7
    2528:	629e      	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    252a:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    252e:	078f      	lsls	r7, r1, #30
    2530:	d506      	bpl.n	2540 <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2532:	4e33      	ldr	r6, [pc, #204]	; (2600 <Sd2Card::chipSelectLow()+0x110>)
    2534:	6999      	ldr	r1, [r3, #24]
    2536:	6837      	ldr	r7, [r6, #0]
    2538:	7cda      	ldrb	r2, [r3, #19]
    253a:	4039      	ands	r1, r7
    253c:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    253e:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    2540:	0756      	lsls	r6, r2, #29
    2542:	d506      	bpl.n	2552 <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2544:	4e2f      	ldr	r6, [pc, #188]	; (2604 <Sd2Card::chipSelectLow()+0x114>)
    2546:	69d9      	ldr	r1, [r3, #28]
    2548:	6837      	ldr	r7, [r6, #0]
    254a:	7cda      	ldrb	r2, [r3, #19]
    254c:	4039      	ands	r1, r7
    254e:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2550:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    2552:	0711      	lsls	r1, r2, #28
    2554:	d506      	bpl.n	2564 <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2556:	4e2c      	ldr	r6, [pc, #176]	; (2608 <Sd2Card::chipSelectLow()+0x118>)
    2558:	6a19      	ldr	r1, [r3, #32]
    255a:	6837      	ldr	r7, [r6, #0]
    255c:	7cda      	ldrb	r2, [r3, #19]
    255e:	4039      	ands	r1, r7
    2560:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    2562:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    2564:	06d2      	lsls	r2, r2, #27
    2566:	d505      	bpl.n	2574 <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2568:	4928      	ldr	r1, [pc, #160]	; (260c <Sd2Card::chipSelectLow()+0x11c>)
    256a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    256c:	680e      	ldr	r6, [r1, #0]
    256e:	4032      	ands	r2, r6
    2570:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    2572:	600a      	str	r2, [r1, #0]
			}
			__enable_irq();
    2574:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    2576:	689a      	ldr	r2, [r3, #8]
    2578:	491f      	ldr	r1, [pc, #124]	; (25f8 <Sd2Card::chipSelectLow()+0x108>)
    257a:	42aa      	cmp	r2, r5
    257c:	d02b      	beq.n	25d6 <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    257e:	4a24      	ldr	r2, [pc, #144]	; (2610 <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2580:	4e24      	ldr	r6, [pc, #144]	; (2614 <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    2582:	6992      	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    2584:	608d      	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2586:	f3c2 1101 	ubfx	r1, r2, #4, #2
    258a:	f3c2 6282 	ubfx	r2, r2, #26, #3
    258e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    2592:	3201      	adds	r2, #1
    2594:	fbb1 f1f2 	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    2598:	b1dd      	cbz	r5, 25d2 <Sd2Card::chipSelectLow()+0xe2>
    259a:	fbb1 f2f5 	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
    259e:	b142      	cbz	r2, 25b2 <Sd2Card::chipSelectLow()+0xc2>
    25a0:	fbb1 f1f2 	udiv	r1, r1, r2
    25a4:	42a9      	cmp	r1, r5
    25a6:	bf88      	it	hi
    25a8:	3201      	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    25aa:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    25ae:	d314      	bcc.n	25da <Sd2Card::chipSelectLow()+0xea>
    25b0:	4a19      	ldr	r2, [pc, #100]	; (2618 <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    25b2:	60da      	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    25b4:	681b      	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    25b6:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    25b8:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    25ba:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    25bc:	611e      	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    25be:	625d      	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
    25c0:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    25c2:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    25c4:	6119      	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    25c6:	2100      	movs	r1, #0
    25c8:	7800      	ldrb	r0, [r0, #0]
}
    25ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    25ce:	f001 bac5 	b.w	3b5c <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    25d2:	460a      	mov	r2, r1
    25d4:	e7e3      	b.n	259e <Sd2Card::chipSelectLow()+0xae>
    25d6:	68ca      	ldr	r2, [r1, #12]
    25d8:	e7ec      	b.n	25b4 <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    25da:	2a02      	cmp	r2, #2
    25dc:	bf98      	it	ls
    25de:	2200      	movls	r2, #0
    25e0:	d9e7      	bls.n	25b2 <Sd2Card::chipSelectLow()+0xc2>
    25e2:	3a02      	subs	r2, #2
    25e4:	0855      	lsrs	r5, r2, #1
    25e6:	0429      	lsls	r1, r5, #16
    25e8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    25ec:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    25f0:	430a      	orrs	r2, r1
    25f2:	e7de      	b.n	25b2 <Sd2Card::chipSelectLow()+0xc2>
    25f4:	200070c4 	.word	0x200070c4
    25f8:	20004d18 	.word	0x20004d18
    25fc:	200070bc 	.word	0x200070bc
    2600:	e000e184 	.word	0xe000e184
    2604:	e000e188 	.word	0xe000e188
    2608:	e000e18c 	.word	0xe000e18c
    260c:	e000e190 	.word	0xe000e190
    2610:	400fc000 	.word	0x400fc000
    2614:	20000030 	.word	0x20000030
    2618:	007f7fff 	.word	0x007f7fff
    261c:	e000e180 	.word	0xe000e180

00002620 <Sd2Card::waitStartBlock()>:
    2620:	490f      	ldr	r1, [pc, #60]	; (2660 <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    2622:	b470      	push	{r4, r5, r6}
    2624:	4d0f      	ldr	r5, [pc, #60]	; (2664 <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2626:	24ff      	movs	r4, #255	; 0xff
    2628:	680e      	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    262a:	682a      	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    262c:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    262e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2630:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2634:	d0fb      	beq.n	262e <Sd2Card::waitStartBlock()+0xe>
    2636:	6f53      	ldr	r3, [r2, #116]	; 0x74
    2638:	b2db      	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    263a:	2bff      	cmp	r3, #255	; 0xff
    263c:	7043      	strb	r3, [r0, #1]
    263e:	d107      	bne.n	2650 <Sd2Card::waitStartBlock()+0x30>
    2640:	680b      	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    2642:	1b9b      	subs	r3, r3, r6
    2644:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2648:	d9ef      	bls.n	262a <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    264a:	2000      	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    264c:	bc70      	pop	{r4, r5, r6}
    264e:	4770      	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2650:	f1a3 00fe 	sub.w	r0, r3, #254	; 0xfe
    2654:	fab0 f080 	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    2658:	bc70      	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    265a:	0940      	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    265c:	4770      	bx	lr
    265e:	bf00      	nop
    2660:	20007304 	.word	0x20007304
    2664:	20004d18 	.word	0x20004d18

00002668 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2668:	b570      	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    266a:	7883      	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    266c:	460d      	mov	r5, r1
    266e:	4604      	mov	r4, r0
    2670:	4616      	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    2672:	2b03      	cmp	r3, #3
    2674:	bf18      	it	ne
    2676:	024d      	lslne	r5, r1, #9
  chipSelectLow();
    2678:	f7ff ff3a 	bl	24f0 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    267c:	2111      	movs	r1, #17
    267e:	462a      	mov	r2, r5
    2680:	4620      	mov	r0, r4
    2682:	f7ff fea7 	bl	23d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2686:	b918      	cbnz	r0, 2690 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    2688:	4620      	mov	r0, r4
    268a:	f7ff ffc9 	bl	2620 <Sd2Card::waitStartBlock()>
    268e:	b920      	cbnz	r0, 269a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    2690:	4620      	mov	r0, r4
    2692:	f7ff fef3 	bl	247c <Sd2Card::chipSelectHigh()>
  return false;
    2696:	2000      	movs	r0, #0
}
    2698:	bd70      	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    269a:	4d11      	ldr	r5, [pc, #68]	; (26e0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
    269c:	f44f 7200 	mov.w	r2, #512	; 0x200
    26a0:	21ff      	movs	r1, #255	; 0xff
    26a2:	4630      	mov	r0, r6
    26a4:	f003 ff36 	bl	6514 <memset>
    26a8:	f44f 7300 	mov.w	r3, #512	; 0x200
    26ac:	4632      	mov	r2, r6
    26ae:	4628      	mov	r0, r5
    26b0:	4631      	mov	r1, r6
    26b2:	f7ff fd35 	bl	2120 <SPIClass::transfer(void const*, void*, unsigned int)>
    26b6:	682b      	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    26b8:	22ff      	movs	r2, #255	; 0xff
    26ba:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    26bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    26be:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    26c2:	d0fb      	beq.n	26bc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    26c4:	22ff      	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    26c6:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    26c8:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    26ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    26cc:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    26d0:	d0fb      	beq.n	26ca <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    26d2:	4620      	mov	r0, r4
    26d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    26d6:	f7ff fed1 	bl	247c <Sd2Card::chipSelectHigh()>
  return true;
    26da:	2001      	movs	r0, #1
    26dc:	bd70      	pop	{r4, r5, r6, pc}
    26de:	bf00      	nop
    26e0:	20004d18 	.word	0x20004d18

000026e4 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    26e4:	4b1b      	ldr	r3, [pc, #108]	; (2754 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
    26e6:	b410      	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    26e8:	681c      	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    26ea:	6661      	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    26ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    26ee:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    26f2:	d0fb      	beq.n	26ec <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
    26f4:	1e51      	subs	r1, r2, #1
    26f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
    26f8:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    26fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    2700:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2702:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2704:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2708:	d0fb      	beq.n	2702 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    270a:	4291      	cmp	r1, r2
    270c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    270e:	d1f5      	bne.n	26fc <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2710:	23ff      	movs	r3, #255	; 0xff
    2712:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2714:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2716:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    271a:	d0fb      	beq.n	2714 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    271c:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    271e:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2720:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2722:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2724:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2728:	d0fb      	beq.n	2722 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    272a:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    272c:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    272e:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2730:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2732:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2736:	d0fb      	beq.n	2730 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
    2738:	6f63      	ldr	r3, [r4, #116]	; 0x74
    273a:	b2db      	uxtb	r3, r3
    273c:	f003 021f 	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    2740:	7043      	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    2742:	f85d 4b04 	ldr.w	r4, [sp], #4
    2746:	f1a2 0005 	sub.w	r0, r2, #5
    274a:	fab0 f080 	clz	r0, r0
    274e:	0940      	lsrs	r0, r0, #5
    2750:	4770      	bx	lr
    2752:	bf00      	nop
    2754:	20004d18 	.word	0x20004d18

00002758 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    2758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    275a:	4605      	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    275c:	b169      	cbz	r1, 277a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    275e:	7883      	ldrb	r3, [r0, #2]
    2760:	460c      	mov	r4, r1
    2762:	4616      	mov	r6, r2
    2764:	2b03      	cmp	r3, #3
    2766:	bf18      	it	ne
    2768:	024c      	lslne	r4, r1, #9
  chipSelectLow();
    276a:	f7ff fec1 	bl	24f0 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    276e:	2118      	movs	r1, #24
    2770:	4622      	mov	r2, r4
    2772:	4628      	mov	r0, r5
    2774:	f7ff fe2e 	bl	23d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2778:	b120      	cbz	r0, 2784 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    277a:	4628      	mov	r0, r5
    277c:	f7ff fe7e 	bl	247c <Sd2Card::chipSelectHigh()>
  return false;
    2780:	2000      	movs	r0, #0
}
    2782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    2784:	4632      	mov	r2, r6
    2786:	21fe      	movs	r1, #254	; 0xfe
    2788:	4628      	mov	r0, r5
    278a:	f7ff ffab 	bl	26e4 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    278e:	2800      	cmp	r0, #0
    2790:	d0f3      	beq.n	277a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    2792:	4915      	ldr	r1, [pc, #84]	; (27e8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2794:	20ff      	movs	r0, #255	; 0xff
    2796:	4e15      	ldr	r6, [pc, #84]	; (27ec <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
    2798:	680f      	ldr	r7, [r1, #0]
    279a:	6832      	ldr	r2, [r6, #0]
    279c:	6650      	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    279e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    27a0:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    27a4:	d0fb      	beq.n	279e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
    27a6:	6f54      	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    27a8:	b2e4      	uxtb	r4, r4
    27aa:	2cff      	cmp	r4, #255	; 0xff
    27ac:	d005      	beq.n	27ba <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
    27ae:	680b      	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    27b0:	1bdb      	subs	r3, r3, r7
    27b2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    27b6:	d3f1      	bcc.n	279c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
    27b8:	e7df      	b.n	277a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    27ba:	2200      	movs	r2, #0
    27bc:	210d      	movs	r1, #13
    27be:	4628      	mov	r0, r5
    27c0:	f7ff fe08 	bl	23d4 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    27c4:	2800      	cmp	r0, #0
    27c6:	d1d8      	bne.n	277a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    27c8:	6832      	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    27ca:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    27cc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    27ce:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    27d2:	d0fb      	beq.n	27cc <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
    27d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
    27d6:	f013 0fff 	tst.w	r3, #255	; 0xff
    27da:	d1ce      	bne.n	277a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    27dc:	4628      	mov	r0, r5
    27de:	f7ff fe4d 	bl	247c <Sd2Card::chipSelectHigh()>
  return true;
    27e2:	2001      	movs	r0, #1
    27e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27e6:	bf00      	nop
    27e8:	20007304 	.word	0x20007304
    27ec:	20004d18 	.word	0x20004d18

000027f0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    27f0:	4b02      	ldr	r3, [pc, #8]	; (27fc <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    27f2:	2207      	movs	r2, #7
    27f4:	4902      	ldr	r1, [pc, #8]	; (2800 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    27f6:	e883 0006 	stmia.w	r3, {r1, r2}
    27fa:	4770      	bx	lr
    27fc:	200070bc 	.word	0x200070bc
    2800:	003d0900 	.word	0x003d0900

00002804 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    2804:	b538      	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    2806:	f990 3005 	ldrsb.w	r3, [r0, #5]
    280a:	2b00      	cmp	r3, #0
    280c:	db03      	blt.n	2816 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    280e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    2812:	f000 b977 	b.w	2b04 <SdVolume::cacheFlush()>
    2816:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    2818:	2101      	movs	r1, #1
    281a:	6900      	ldr	r0, [r0, #16]
    281c:	f000 f9b2 	bl	2b84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2820:	b300      	cbz	r0, 2864 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    2822:	7d25      	ldrb	r5, [r4, #20]
    2824:	4b10      	ldr	r3, [pc, #64]	; (2868 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    2826:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    282a:	d01b      	beq.n	2864 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    282c:	79a3      	ldrb	r3, [r4, #6]
    282e:	2b01      	cmp	r3, #1
    2830:	d915      	bls.n	285e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2832:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2834:	490d      	ldr	r1, [pc, #52]	; (286c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    2836:	0c1a      	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2838:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    283a:	680b      	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    283c:	82aa      	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    283e:	b133      	cbz	r3, 284e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    2840:	f105 0116 	add.w	r1, r5, #22
    2844:	f105 0018 	add.w	r0, r5, #24
    2848:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    284a:	8b2b      	ldrh	r3, [r5, #24]
    284c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    284e:	7963      	ldrb	r3, [r4, #5]
    2850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2854:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    2856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    285a:	f000 b953 	b.w	2b04 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    285e:	69a3      	ldr	r3, [r4, #24]
    2860:	61eb      	str	r3, [r5, #28]
    2862:	e7e6      	b.n	2832 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    2864:	2000      	movs	r0, #0
    2866:	bd38      	pop	{r3, r4, r5, pc}
    2868:	200070d4 	.word	0x200070d4
    286c:	200070c8 	.word	0x200070c8

00002870 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    2870:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    2872:	f100 0208 	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    2876:	4604      	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    2878:	2101      	movs	r1, #1
    287a:	6a00      	ldr	r0, [r0, #32]
    287c:	f000 fa2c 	bl	2cd8 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    2880:	b150      	cbz	r0, 2898 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    2882:	69e3      	ldr	r3, [r4, #28]
    2884:	b93b      	cbnz	r3, 2896 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    2886:	7963      	ldrb	r3, [r4, #5]
    2888:	2001      	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    288a:	68a2      	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    288c:	f063 037f 	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    2890:	61e2      	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    2892:	7163      	strb	r3, [r4, #5]
    2894:	bd10      	pop	{r4, pc}
  }
  return true;
    2896:	2001      	movs	r0, #1
}
    2898:	bd10      	pop	{r4, pc}
    289a:	bf00      	nop

0000289c <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    289e:	7983      	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    28a0:	b113      	cbz	r3, 28a8 <SdFile::seekSet(unsigned long)+0xc>
    28a2:	6982      	ldr	r2, [r0, #24]
    28a4:	428a      	cmp	r2, r1
    28a6:	d201      	bcs.n	28ac <SdFile::seekSet(unsigned long)+0x10>
    28a8:	2000      	movs	r0, #0
    28aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    28ac:	2b02      	cmp	r3, #2
    28ae:	460f      	mov	r7, r1
    28b0:	4605      	mov	r5, r0
    28b2:	d01c      	beq.n	28ee <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    28b4:	b1f7      	cbz	r7, 28f4 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    28b6:	6a2b      	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    28b8:	1e7c      	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    28ba:	68e9      	ldr	r1, [r5, #12]
    28bc:	7c1b      	ldrb	r3, [r3, #16]
    28be:	1e4a      	subs	r2, r1, #1
    28c0:	3309      	adds	r3, #9
    28c2:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    28c4:	40dc      	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    28c6:	42a2      	cmp	r2, r4
    28c8:	d802      	bhi.n	28d0 <SdFile::seekSet(unsigned long)+0x34>
    28ca:	b109      	cbz	r1, 28d0 <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    28cc:	1aa4      	subs	r4, r4, r2
    28ce:	e001      	b.n	28d4 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    28d0:	69eb      	ldr	r3, [r5, #28]
    28d2:	60ab      	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    28d4:	f105 0608 	add.w	r6, r5, #8
    28d8:	e006      	b.n	28e8 <SdFile::seekSet(unsigned long)+0x4c>
    28da:	68a9      	ldr	r1, [r5, #8]
    28dc:	3c01      	subs	r4, #1
    28de:	6a28      	ldr	r0, [r5, #32]
    28e0:	f000 f9c0 	bl	2c64 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    28e4:	2800      	cmp	r0, #0
    28e6:	d0df      	beq.n	28a8 <SdFile::seekSet(unsigned long)+0xc>
    28e8:	4632      	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    28ea:	2c00      	cmp	r4, #0
    28ec:	d1f5      	bne.n	28da <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    28ee:	60ef      	str	r7, [r5, #12]
    return true;
    28f0:	2001      	movs	r0, #1
    28f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    28f4:	60af      	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    28f6:	2001      	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    28f8:	60ef      	str	r7, [r5, #12]
    return true;
    28fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000028fc <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    28fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2900:	b085      	sub	sp, #20
    2902:	4607      	mov	r7, r0
    2904:	9201      	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2906:	7982      	ldrb	r2, [r0, #6]
    2908:	2a01      	cmp	r2, #1
    290a:	d005      	beq.n	2918 <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    290c:	2301      	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    290e:	2000      	movs	r0, #0
    2910:	713b      	strb	r3, [r7, #4]
}
    2912:	b005      	add	sp, #20
    2914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2918:	7942      	ldrb	r2, [r0, #5]
    291a:	0794      	lsls	r4, r2, #30
    291c:	d5f6      	bpl.n	290c <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    291e:	0753      	lsls	r3, r2, #29
    2920:	468b      	mov	fp, r1
    2922:	d508      	bpl.n	2936 <SdFile::write(void const*, unsigned int)+0x3a>
    2924:	69b9      	ldr	r1, [r7, #24]
    2926:	68fb      	ldr	r3, [r7, #12]
    2928:	428b      	cmp	r3, r1
    292a:	f000 80c0 	beq.w	2aae <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    292e:	f7ff ffb5 	bl	289c <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    2932:	2800      	cmp	r0, #0
    2934:	d0ea      	beq.n	290c <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    2936:	9b01      	ldr	r3, [sp, #4]
    2938:	68f9      	ldr	r1, [r7, #12]
    293a:	2b00      	cmp	r3, #0
    293c:	f000 80c5 	beq.w	2aca <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    2940:	f8dd 8004 	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    2944:	f8df 919c 	ldr.w	r9, [pc, #412]	; 2ae4 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    2948:	f8df a19c 	ldr.w	sl, [pc, #412]	; 2ae8 <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    294c:	6a38      	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    294e:	f3c1 0608 	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2952:	7902      	ldrb	r2, [r0, #4]
    2954:	3a01      	subs	r2, #1
    2956:	ea02 2551 	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    295a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    295e:	d153      	bne.n	2a08 <SdFile::write(void const*, unsigned int)+0x10c>
    2960:	2e00      	cmp	r6, #0
    2962:	d151      	bne.n	2a08 <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    2964:	68b9      	ldr	r1, [r7, #8]
    2966:	2900      	cmp	r1, #0
    2968:	d179      	bne.n	2a5e <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    296a:	69fa      	ldr	r2, [r7, #28]
    296c:	2a00      	cmp	r2, #0
    296e:	f000 8089 	beq.w	2a84 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    2972:	60ba      	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2974:	f5c6 7400 	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2978:	3a02      	subs	r2, #2
    297a:	f890 e010 	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    297e:	b2a4      	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2980:	6941      	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    2982:	4544      	cmp	r4, r8
    2984:	d942      	bls.n	2a0c <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2986:	fa02 f20e 	lsl.w	r2, r2, lr
    298a:	440d      	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    298c:	fa1f f488 	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2990:	4415      	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2992:	b91e      	cbnz	r6, 299c <SdFile::write(void const*, unsigned int)+0xa0>
    2994:	68f8      	ldr	r0, [r7, #12]
    2996:	69ba      	ldr	r2, [r7, #24]
    2998:	4290      	cmp	r0, r2
    299a:	d253      	bcs.n	2a44 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    299c:	4628      	mov	r0, r5
    299e:	2101      	movs	r1, #1
    29a0:	f000 f8f0 	bl	2b84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    29a4:	2800      	cmp	r0, #0
    29a6:	d0b1      	beq.n	290c <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    29a8:	444e      	add	r6, r9
      uint8_t* end = dst + n;
    29aa:	eb06 0e04 	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    29ae:	4576      	cmp	r6, lr
    29b0:	d00d      	beq.n	29ce <SdFile::write(void const*, unsigned int)+0xd2>
    29b2:	f10b 31ff 	add.w	r1, fp, #4294967295
    29b6:	1e72      	subs	r2, r6, #1
    29b8:	f10e 35ff 	add.w	r5, lr, #4294967295
    29bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    29c0:	f802 0f01 	strb.w	r0, [r2, #1]!
    29c4:	4295      	cmp	r5, r2
    29c6:	d1f9      	bne.n	29bc <SdFile::write(void const*, unsigned int)+0xc0>
    29c8:	ebc6 060e 	rsb	r6, r6, lr
    29cc:	44b3      	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    29ce:	68fd      	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    29d0:	ebb8 0804 	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    29d4:	eb04 0105 	add.w	r1, r4, r5
    29d8:	60f9      	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    29da:	d1b7      	bne.n	294c <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    29dc:	69bb      	ldr	r3, [r7, #24]
    29de:	4299      	cmp	r1, r3
    29e0:	d96a      	bls.n	2ab8 <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    29e2:	797a      	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    29e4:	61b9      	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    29e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    29ea:	717a      	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    29ec:	0712      	lsls	r2, r2, #28
    29ee:	d507      	bpl.n	2a00 <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    29f0:	79bb      	ldrb	r3, [r7, #6]
    29f2:	2b00      	cmp	r3, #0
    29f4:	d08a      	beq.n	290c <SdFile::write(void const*, unsigned int)+0x10>
    29f6:	4638      	mov	r0, r7
    29f8:	f7ff ff04 	bl	2804 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    29fc:	2800      	cmp	r0, #0
    29fe:	d085      	beq.n	290c <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2a00:	9801      	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2a02:	b005      	add	sp, #20
    2a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a08:	68ba      	ldr	r2, [r7, #8]
    2a0a:	e7b3      	b.n	2974 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2a0c:	fa02 f20e 	lsl.w	r2, r2, lr
    2a10:	440d      	add	r5, r1
    if (n == 512) {
    2a12:	f5b4 7f00 	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2a16:	4415      	add	r5, r2
    if (n == 512) {
    2a18:	d1bb      	bne.n	2992 <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2a1a:	f8da 2000 	ldr.w	r2, [sl]
    2a1e:	4295      	cmp	r5, r2
    2a20:	d039      	beq.n	2a96 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2a22:	4a2c      	ldr	r2, [pc, #176]	; (2ad4 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    2a24:	4629      	mov	r1, r5
    2a26:	6810      	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2a28:	7802      	ldrb	r2, [r0, #0]
    2a2a:	2afe      	cmp	r2, #254	; 0xfe
    2a2c:	d038      	beq.n	2aa0 <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    2a2e:	465a      	mov	r2, fp
    2a30:	f7ff fe92 	bl	2758 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2a34:	2800      	cmp	r0, #0
    2a36:	f43f af69 	beq.w	290c <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    2a3a:	f50b 7b00 	add.w	fp, fp, #512	; 0x200
    2a3e:	f44f 7400 	mov.w	r4, #512	; 0x200
    2a42:	e7c4      	b.n	29ce <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2a44:	f000 f85e 	bl	2b04 <SdVolume::cacheFlush()>
    2a48:	2800      	cmp	r0, #0
    2a4a:	f43f af5f 	beq.w	290c <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2a4e:	4922      	ldr	r1, [pc, #136]	; (2ad8 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    2a50:	f8ca 5000 	str.w	r5, [sl]
    2a54:	780a      	ldrb	r2, [r1, #0]
    2a56:	f042 0201 	orr.w	r2, r2, #1
    2a5a:	700a      	strb	r2, [r1, #0]
    2a5c:	e7a4      	b.n	29a8 <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2a5e:	aa03      	add	r2, sp, #12
    2a60:	f000 f900 	bl	2c64 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2a64:	2800      	cmp	r0, #0
    2a66:	f43f af54 	beq.w	2912 <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    2a6a:	6a38      	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2a6c:	f64f 71f8 	movw	r1, #65528	; 0xfff8
    2a70:	4b1a      	ldr	r3, [pc, #104]	; (2adc <SdFile::write(void const*, unsigned int)+0x1e0>)
    2a72:	f890 4020 	ldrb.w	r4, [r0, #32]
    2a76:	9a03      	ldr	r2, [sp, #12]
    2a78:	2c10      	cmp	r4, #16
    2a7a:	bf18      	it	ne
    2a7c:	4619      	movne	r1, r3
    2a7e:	428a      	cmp	r2, r1
    2a80:	f4ff af77 	bcc.w	2972 <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2a84:	4638      	mov	r0, r7
    2a86:	f7ff fef3 	bl	2870 <SdFile::addCluster()>
    2a8a:	2800      	cmp	r0, #0
    2a8c:	f43f af3e 	beq.w	290c <SdFile::write(void const*, unsigned int)+0x10>
    2a90:	6a38      	ldr	r0, [r7, #32]
    2a92:	68ba      	ldr	r2, [r7, #8]
    2a94:	e76e      	b.n	2974 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2a96:	f04f 32ff 	mov.w	r2, #4294967295
    2a9a:	f8ca 2000 	str.w	r2, [sl]
    2a9e:	e7c0      	b.n	2a22 <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    2aa0:	4658      	mov	r0, fp
    2aa2:	f7ff fc3b 	bl	231c <SDHC_CardWriteBlock(void const*, unsigned long)>
    2aa6:	fab0 f080 	clz	r0, r0
    2aaa:	0940      	lsrs	r0, r0, #5
    2aac:	e7c2      	b.n	2a34 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2aae:	9b01      	ldr	r3, [sp, #4]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	f47f af45 	bne.w	2940 <SdFile::write(void const*, unsigned int)+0x44>
    2ab6:	e799      	b.n	29ec <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    2ab8:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2aba:	797a      	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    2abc:	681b      	ldr	r3, [r3, #0]
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d094      	beq.n	29ec <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2ac2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2ac6:	717a      	strb	r2, [r7, #5]
    2ac8:	e790      	b.n	29ec <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2aca:	69bb      	ldr	r3, [r7, #24]
    2acc:	428b      	cmp	r3, r1
    2ace:	d388      	bcc.n	29e2 <SdFile::write(void const*, unsigned int)+0xe6>
    2ad0:	797a      	ldrb	r2, [r7, #5]
    2ad2:	e78b      	b.n	29ec <SdFile::write(void const*, unsigned int)+0xf0>
    2ad4:	200070d0 	.word	0x200070d0
    2ad8:	200072d4 	.word	0x200072d4
    2adc:	0ffffff8 	.word	0x0ffffff8
    2ae0:	200070c8 	.word	0x200070c8
    2ae4:	200070d4 	.word	0x200070d4
    2ae8:	20004d68 	.word	0x20004d68

00002aec <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2aec:	b500      	push	{lr}
    2aee:	b083      	sub	sp, #12
  return write(&b, 1);
    2af0:	2201      	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2af2:	ab02      	add	r3, sp, #8
    2af4:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    2af8:	4619      	mov	r1, r3
    2afa:	f7ff feff 	bl	28fc <SdFile::write(void const*, unsigned int)>
}
    2afe:	b003      	add	sp, #12
    2b00:	f85d fb04 	ldr.w	pc, [sp], #4

00002b04 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    2b04:	b570      	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    2b06:	4c1a      	ldr	r4, [pc, #104]	; (2b70 <SdVolume::cacheFlush()+0x6c>)
    2b08:	7823      	ldrb	r3, [r4, #0]
    2b0a:	b90b      	cbnz	r3, 2b10 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    2b0c:	2001      	movs	r0, #1
}
    2b0e:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2b10:	4d18      	ldr	r5, [pc, #96]	; (2b74 <SdVolume::cacheFlush()+0x70>)
    2b12:	4b19      	ldr	r3, [pc, #100]	; (2b78 <SdVolume::cacheFlush()+0x74>)
    2b14:	6828      	ldr	r0, [r5, #0]
    2b16:	6819      	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2b18:	7803      	ldrb	r3, [r0, #0]
    2b1a:	2bfe      	cmp	r3, #254	; 0xfe
    2b1c:	d017      	beq.n	2b4e <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    2b1e:	4a17      	ldr	r2, [pc, #92]	; (2b7c <SdVolume::cacheFlush()+0x78>)
    2b20:	f7ff fe1a 	bl	2758 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    2b24:	b188      	cbz	r0, 2b4a <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2b26:	4e16      	ldr	r6, [pc, #88]	; (2b80 <SdVolume::cacheFlush()+0x7c>)
    2b28:	6831      	ldr	r1, [r6, #0]
    2b2a:	b919      	cbnz	r1, 2b34 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    2b2c:	2300      	movs	r3, #0
  }
  return true;
    2b2e:	2001      	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    2b30:	7023      	strb	r3, [r4, #0]
    2b32:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2b34:	6828      	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2b36:	7803      	ldrb	r3, [r0, #0]
    2b38:	2bfe      	cmp	r3, #254	; 0xfe
    2b3a:	d00f      	beq.n	2b5c <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    2b3c:	4a0f      	ldr	r2, [pc, #60]	; (2b7c <SdVolume::cacheFlush()+0x78>)
    2b3e:	f7ff fe0b 	bl	2758 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    2b42:	b110      	cbz	r0, 2b4a <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2b44:	2300      	movs	r3, #0
    2b46:	6033      	str	r3, [r6, #0]
    2b48:	e7f0      	b.n	2b2c <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    2b4a:	2000      	movs	r0, #0
    2b4c:	bd70      	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    2b4e:	480b      	ldr	r0, [pc, #44]	; (2b7c <SdVolume::cacheFlush()+0x78>)
    2b50:	f7ff fbe4 	bl	231c <SDHC_CardWriteBlock(void const*, unsigned long)>
    2b54:	fab0 f080 	clz	r0, r0
    2b58:	0940      	lsrs	r0, r0, #5
    2b5a:	e7e3      	b.n	2b24 <SdVolume::cacheFlush()+0x20>
    2b5c:	4807      	ldr	r0, [pc, #28]	; (2b7c <SdVolume::cacheFlush()+0x78>)
    2b5e:	f7ff fbdd 	bl	231c <SDHC_CardWriteBlock(void const*, unsigned long)>
    2b62:	fab0 f080 	clz	r0, r0
    2b66:	0940      	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2b68:	2800      	cmp	r0, #0
    2b6a:	d1eb      	bne.n	2b44 <SdVolume::cacheFlush()+0x40>
    2b6c:	e7ed      	b.n	2b4a <SdVolume::cacheFlush()+0x46>
    2b6e:	bf00      	nop
    2b70:	200072d4 	.word	0x200072d4
    2b74:	200070d0 	.word	0x200070d0
    2b78:	20004d68 	.word	0x20004d68
    2b7c:	200070d4 	.word	0x200070d4
    2b80:	200070cc 	.word	0x200070cc

00002b84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2b84:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    2b86:	4d12      	ldr	r5, [pc, #72]	; (2bd0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2b88:	460e      	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    2b8a:	682b      	ldr	r3, [r5, #0]
    2b8c:	4283      	cmp	r3, r0
    2b8e:	d011      	beq.n	2bb4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    2b90:	4604      	mov	r4, r0
    if (!cacheFlush()) return false;
    2b92:	f7ff ffb7 	bl	2b04 <SdVolume::cacheFlush()>
    2b96:	b908      	cbnz	r0, 2b9c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    2b98:	2000      	movs	r0, #0
    2b9a:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2b9c:	4b0d      	ldr	r3, [pc, #52]	; (2bd4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    2b9e:	6818      	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2ba0:	7803      	ldrb	r3, [r0, #0]
    2ba2:	2bfe      	cmp	r3, #254	; 0xfe
    2ba4:	d00c      	beq.n	2bc0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    2ba6:	4a0c      	ldr	r2, [pc, #48]	; (2bd8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    2ba8:	4621      	mov	r1, r4
    2baa:	f7ff fd5d 	bl	2668 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    2bae:	2800      	cmp	r0, #0
    2bb0:	d0f2      	beq.n	2b98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    2bb2:	602c      	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    2bb4:	4b09      	ldr	r3, [pc, #36]	; (2bdc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
    2bb6:	2001      	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    2bb8:	7819      	ldrb	r1, [r3, #0]
    2bba:	4331      	orrs	r1, r6
    2bbc:	7019      	strb	r1, [r3, #0]
  return true;
}
    2bbe:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    2bc0:	4621      	mov	r1, r4
    2bc2:	4805      	ldr	r0, [pc, #20]	; (2bd8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    2bc4:	f7ff fb2e 	bl	2224 <SDHC_CardReadBlock(void*, unsigned long)>
    2bc8:	fab0 f080 	clz	r0, r0
    2bcc:	0940      	lsrs	r0, r0, #5
    2bce:	e7ee      	b.n	2bae <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    2bd0:	20004d68 	.word	0x20004d68
    2bd4:	200070d0 	.word	0x200070d0
    2bd8:	200070d4 	.word	0x200070d4
    2bdc:	200072d4 	.word	0x200072d4

00002be0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2be2:	f890 3020 	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2be6:	4605      	mov	r5, r0
    2be8:	460e      	mov	r6, r1
    2bea:	4617      	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2bec:	2b10      	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2bee:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    2bf0:	4b18      	ldr	r3, [pc, #96]	; (2c54 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2bf2:	d017      	beq.n	2c24 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    2bf4:	eb04 14d1 	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    2bf8:	681b      	ldr	r3, [r3, #0]
    2bfa:	429c      	cmp	r4, r3
    2bfc:	d117      	bne.n	2c2e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2bfe:	f006 017f 	and.w	r1, r6, #127	; 0x7f
    2c02:	4a15      	ldr	r2, [pc, #84]	; (2c58 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    2c04:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2c08:	4914      	ldr	r1, [pc, #80]	; (2c5c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2c0a:	7e28      	ldrb	r0, [r5, #24]
    2c0c:	780a      	ldrb	r2, [r1, #0]
    2c0e:	2801      	cmp	r0, #1
    2c10:	f042 0201 	orr.w	r2, r2, #1
    2c14:	700a      	strb	r2, [r1, #0]
    2c16:	d919      	bls.n	2c4c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
    2c18:	68a9      	ldr	r1, [r5, #8]
  return true;
    2c1a:	2001      	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2c1c:	4a10      	ldr	r2, [pc, #64]	; (2c60 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    2c1e:	440b      	add	r3, r1
    2c20:	6013      	str	r3, [r2, #0]
    2c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2c24:	eb04 2411 	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    2c28:	681b      	ldr	r3, [r3, #0]
    2c2a:	429c      	cmp	r4, r3
    2c2c:	d008      	beq.n	2c40 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2c2e:	2100      	movs	r1, #0
    2c30:	4620      	mov	r0, r4
    2c32:	f7ff ffa7 	bl	2b84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2c36:	b150      	cbz	r0, 2c4e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
    2c38:	f895 3020 	ldrb.w	r3, [r5, #32]
    2c3c:	2b10      	cmp	r3, #16
    2c3e:	d107      	bne.n	2c50 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2c40:	b2f1      	uxtb	r1, r6
    2c42:	4a05      	ldr	r2, [pc, #20]	; (2c58 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    2c44:	4623      	mov	r3, r4
    2c46:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
    2c4a:	e7dd      	b.n	2c08 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    2c4c:	2001      	movs	r0, #1
}
    2c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2c50:	4623      	mov	r3, r4
    2c52:	e7d4      	b.n	2bfe <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    2c54:	20004d68 	.word	0x20004d68
    2c58:	200070d4 	.word	0x200070d4
    2c5c:	200072d4 	.word	0x200072d4
    2c60:	200070cc 	.word	0x200070cc

00002c64 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    2c64:	68c3      	ldr	r3, [r0, #12]
    2c66:	3301      	adds	r3, #1
    2c68:	428b      	cmp	r3, r1
    2c6a:	d318      	bcc.n	2c9e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2c6c:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2c6e:	f890 3020 	ldrb.w	r3, [r0, #32]
    2c72:	4604      	mov	r4, r0
    2c74:	4616      	mov	r6, r2
    2c76:	460d      	mov	r5, r1
    2c78:	2b10      	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    2c7a:	69c0      	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    2c7c:	4b14      	ldr	r3, [pc, #80]	; (2cd0 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2c7e:	d010      	beq.n	2ca2 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    2c80:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    2c84:	681b      	ldr	r3, [r3, #0]
    2c86:	4298      	cmp	r0, r3
    2c88:	d110      	bne.n	2cac <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2c8a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    2c8e:	4b11      	ldr	r3, [pc, #68]	; (2cd4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    2c90:	2001      	movs	r0, #1
    2c92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    2c96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    2c9a:	6033      	str	r3, [r6, #0]
  }
  return true;
}
    2c9c:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    2c9e:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    2ca0:	4770      	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2ca2:	eb00 2011 	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    2ca6:	681b      	ldr	r3, [r3, #0]
    2ca8:	4298      	cmp	r0, r3
    2caa:	d007      	beq.n	2cbc <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2cac:	2100      	movs	r1, #0
    2cae:	f7ff ff69 	bl	2b84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2cb2:	b150      	cbz	r0, 2cca <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
    2cb4:	f894 3020 	ldrb.w	r3, [r4, #32]
    2cb8:	2b10      	cmp	r3, #16
    2cba:	d1e6      	bne.n	2c8a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2cbc:	b2e9      	uxtb	r1, r5
    2cbe:	4b05      	ldr	r3, [pc, #20]	; (2cd4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    2cc0:	2001      	movs	r0, #1
    2cc2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    2cc6:	6033      	str	r3, [r6, #0]
    2cc8:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    2cca:	2000      	movs	r0, #0
    2ccc:	bd70      	pop	{r4, r5, r6, pc}
    2cce:	bf00      	nop
    2cd0:	20004d68 	.word	0x20004d68
    2cd4:	200070d4 	.word	0x200070d4

00002cd8 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2cdc:	6817      	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2cde:	b083      	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2ce0:	b367      	cbz	r7, 2d3c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2ce2:	3701      	adds	r7, #1

    // don't save new start location
    setStart = false;
    2ce4:	f04f 0a00 	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2ce8:	68c3      	ldr	r3, [r0, #12]
    2cea:	f103 0801 	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2cee:	b30b      	cbz	r3, 2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    2cf0:	468b      	mov	fp, r1
    2cf2:	4606      	mov	r6, r0
    2cf4:	4691      	mov	r9, r2
    2cf6:	463c      	mov	r4, r7
    2cf8:	2500      	movs	r5, #0
    2cfa:	e005      	b.n	2d08 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2cfc:	461c      	mov	r4, r3
    2cfe:	461f      	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2d00:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2d02:	68f3      	ldr	r3, [r6, #12]
    2d04:	42ab      	cmp	r3, r5
    2d06:	d915      	bls.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2d08:	45a0      	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2d0a:	aa01      	add	r2, sp, #4
    2d0c:	4630      	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2d0e:	d201      	bcs.n	2d14 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
    2d10:	2402      	movs	r4, #2
    2d12:	4627      	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2d14:	4621      	mov	r1, r4
    2d16:	f7ff ffa5 	bl	2c64 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2d1a:	1c63      	adds	r3, r4, #1
    2d1c:	b150      	cbz	r0, 2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
    2d1e:	9a01      	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    2d20:	1bd9      	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    2d22:	2a00      	cmp	r2, #0
    2d24:	d1ea      	bne.n	2cfc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    2d26:	458b      	cmp	fp, r1
    2d28:	d010      	beq.n	2d4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
    2d2a:	461c      	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2d2c:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2d2e:	68f3      	ldr	r3, [r6, #12]
    2d30:	42ab      	cmp	r3, r5
    2d32:	d8e9      	bhi.n	2d08 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2d34:	2000      	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    2d36:	b003      	add	sp, #12
    2d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    2d3c:	f1a1 0a01 	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2d40:	6807      	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    2d42:	faba fa8a 	clz	sl, sl
    2d46:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    2d4a:	e7cd      	b.n	2ce8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2d4c:	2c01      	cmp	r4, #1
    2d4e:	d9f1      	bls.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2d50:	68f3      	ldr	r3, [r6, #12]
    2d52:	3301      	adds	r3, #1
    2d54:	429c      	cmp	r4, r3
    2d56:	d8ed      	bhi.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    2d58:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    2d5c:	4621      	mov	r1, r4
    2d5e:	4630      	mov	r0, r6
    2d60:	f7ff ff3e 	bl	2be0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2d64:	2800      	cmp	r0, #0
    2d66:	d0e5      	beq.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    2d68:	42a7      	cmp	r7, r4
    2d6a:	d214      	bcs.n	2d96 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2d6c:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2d6e:	2c01      	cmp	r4, #1
    2d70:	d9e0      	bls.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2d72:	68f3      	ldr	r3, [r6, #12]
    2d74:	3301      	adds	r3, #1
    2d76:	429c      	cmp	r4, r3
    2d78:	d8dc      	bhi.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    2d7a:	1c62      	adds	r2, r4, #1
    2d7c:	4621      	mov	r1, r4
    2d7e:	4630      	mov	r0, r6
    2d80:	f7ff ff2e 	bl	2be0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2d84:	2800      	cmp	r0, #0
    2d86:	d0d5      	beq.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2d88:	42a7      	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2d8a:	f104 34ff 	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2d8e:	d002      	beq.n	2d96 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2d90:	2c01      	cmp	r4, #1
    2d92:	d1ee      	bne.n	2d72 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    2d94:	e7ce      	b.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2d96:	f8d9 1000 	ldr.w	r1, [r9]
    2d9a:	b159      	cbz	r1, 2db4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2d9c:	2901      	cmp	r1, #1
    2d9e:	d9c9      	bls.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2da0:	68f3      	ldr	r3, [r6, #12]
    2da2:	3301      	adds	r3, #1
    2da4:	4299      	cmp	r1, r3
    2da6:	d8c5      	bhi.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    2da8:	463a      	mov	r2, r7
    2daa:	4630      	mov	r0, r6
    2dac:	f7ff ff18 	bl	2be0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2db0:	2800      	cmp	r0, #0
    2db2:	d0bf      	beq.n	2d34 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2db4:	f8c9 7000 	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2db8:	f1ba 0f00 	cmp.w	sl, #0
    2dbc:	d003      	beq.n	2dc6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    2dbe:	3701      	adds	r7, #1

  return true;
    2dc0:	2001      	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2dc2:	6037      	str	r7, [r6, #0]
    2dc4:	e7b7      	b.n	2d36 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    2dc6:	2001      	movs	r0, #1
    2dc8:	e7b5      	b.n	2d36 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    2dca:	bf00      	nop

00002dcc <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2dcc:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    2dd0:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
	}
    2dd4:	1a10      	subs	r0, r2, r0
    2dd6:	4770      	bx	lr

00002dd8 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2dd8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    2ddc:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    2de0:	429a      	cmp	r2, r3
    2de2:	d905      	bls.n	2df0 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    2de4:	1c5a      	adds	r2, r3, #1
    2de6:	4403      	add	r3, r0
    2de8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    2dec:	7e98      	ldrb	r0, [r3, #26]
    2dee:	4770      	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2df0:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    2df4:	4770      	bx	lr
    2df6:	bf00      	nop

00002df8 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2df8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    2dfc:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    2e00:	429a      	cmp	r2, r3
    2e02:	d902      	bls.n	2e0a <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    2e04:	4403      	add	r3, r0
    2e06:	7e98      	ldrb	r0, [r3, #26]
    2e08:	4770      	bx	lr
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2e0a:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    2e0e:	4770      	bx	lr

00002e10 <TwoWire::flush()>:
	virtual void flush(void) {
    2e10:	4770      	bx	lr
    2e12:	bf00      	nop

00002e14 <TwoWire::write(unsigned char)>:
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    2e14:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    2e18:	b193      	cbz	r3, 2e40 <TwoWire::write(unsigned char)+0x2c>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2e1a:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
    2e1e:	2b20      	cmp	r3, #32
    2e20:	d80b      	bhi.n	2e3a <TwoWire::write(unsigned char)+0x26>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2e22:	18c2      	adds	r2, r0, r3
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
    2e24:	b410      	push	{r4}
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2e26:	1c5c      	adds	r4, r3, #1
		return 1;
    2e28:	2301      	movs	r3, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2e2a:	f880 405f 	strb.w	r4, [r0, #95]	; 0x5f
		return 1;
	}
	return 0;
}
    2e2e:	4618      	mov	r0, r3
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2e30:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
		return 1;
	}
	return 0;
}
    2e34:	f85d 4b04 	ldr.w	r4, [sp], #4
    2e38:	4770      	bx	lr
    2e3a:	2201      	movs	r2, #1
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    2e3c:	2300      	movs	r3, #0
    2e3e:	7102      	strb	r2, [r0, #4]
		}
		txBuffer[txBufferLength++] = data;
		return 1;
	}
	return 0;
}
    2e40:	4618      	mov	r0, r3
    2e42:	4770      	bx	lr

00002e44 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2e44:	b538      	push	{r3, r4, r5, lr}
    2e46:	4605      	mov	r5, r0
	if (transmitting || slave_mode) {
    2e48:	f8b0 0060 	ldrh.w	r0, [r0, #96]	; 0x60
    2e4c:	b190      	cbz	r0, 2e74 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    2e4e:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
    2e52:	4614      	mov	r4, r2
    2e54:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    2e58:	4294      	cmp	r4, r2
    2e5a:	d80c      	bhi.n	2e76 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    2e5c:	f105 003d 	add.w	r0, r5, #61	; 0x3d
    2e60:	4622      	mov	r2, r4
    2e62:	4418      	add	r0, r3
    2e64:	f000 fbc0 	bl	35e8 <memcpy>
		txBufferLength += quantity;
    2e68:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
    2e6c:	4620      	mov	r0, r4
    2e6e:	441c      	add	r4, r3
    2e70:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
		return quantity;
	}
	return 0;
}
    2e74:	bd38      	pop	{r3, r4, r5, pc}
    2e76:	4614      	mov	r4, r2
    2e78:	2201      	movs	r2, #1
    2e7a:	712a      	strb	r2, [r5, #4]
    2e7c:	e7ee      	b.n	2e5c <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    2e7e:	bf00      	nop

00002e80 <TwoWire::begin()>:
//#include "debug/printf.h"

#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
    2e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    2e84:	4f2f      	ldr	r7, [pc, #188]	; (2f44 <TwoWire::begin()+0xc4>)
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    2e86:	2500      	movs	r5, #0

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    2e88:	6942      	ldr	r2, [r0, #20]
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    2e8a:	2401      	movs	r4, #1
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    2e8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    2e8e:	f04f 0e02 	mov.w	lr, #2

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    2e92:	6816      	ldr	r6, [r2, #0]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    2e94:	f44f 3830 	mov.w	r8, #180224	; 0x2c000
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    2e98:	f421 017c 	bic.w	r1, r1, #16515072	; 0xfc0000
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    2e9c:	6903      	ldr	r3, [r0, #16]
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    2e9e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 2f50 <TwoWire::begin()+0xd0>
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    2ea2:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    2ea6:	63b9      	str	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    2ea8:	6831      	ldr	r1, [r6, #0]
    2eaa:	6857      	ldr	r7, [r2, #4]
    2eac:	4339      	orrs	r1, r7
    2eae:	6031      	str	r1, [r6, #0]
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    2eb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    2eb4:	4e24      	ldr	r6, [pc, #144]	; (2f48 <TwoWire::begin()+0xc8>)
void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    2eb6:	f8c3 e010 	str.w	lr, [r3, #16]
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    2eba:	611d      	str	r5, [r3, #16]
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    2ebc:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    2ec0:	625c      	str	r4, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    2ec2:	629e      	str	r6, [r3, #40]	; 0x28
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    2ec4:	f64f 0661 	movw	r6, #63585	; 0xf861
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    2ec8:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    2ecc:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    2ece:	651f      	str	r7, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    2ed0:	621d      	str	r5, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    2ed2:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    2ed4:	611c      	str	r4, [r3, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    2ed6:	7e01      	ldrb	r1, [r0, #24]
    2ed8:	4b1c      	ldr	r3, [pc, #112]	; (2f4c <TwoWire::begin()+0xcc>)
    2eda:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2ede:	7a09      	ldrb	r1, [r1, #8]
    2ee0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2ee4:	6889      	ldr	r1, [r1, #8]
    2ee6:	600e      	str	r6, [r1, #0]
	*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    2ee8:	7e01      	ldrb	r1, [r0, #24]
    2eea:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2eee:	7a0c      	ldrb	r4, [r1, #8]
    2ef0:	68cd      	ldr	r5, [r1, #12]
    2ef2:	eb03 1104 	add.w	r1, r3, r4, lsl #4
    2ef6:	6849      	ldr	r1, [r1, #4]
    2ef8:	600d      	str	r5, [r1, #0]
    2efa:	7e01      	ldrb	r1, [r0, #24]
    2efc:	eb02 1101 	add.w	r1, r2, r1, lsl #4
	if (hardware.sda_pins[sda_pin_index_].select_input_register) {
    2f00:	690c      	ldr	r4, [r1, #16]
    2f02:	b10c      	cbz	r4, 2f08 <TwoWire::begin()+0x88>
		*(hardware.sda_pins[sda_pin_index_].select_input_register) =  hardware.sda_pins[sda_pin_index_].select_val;
    2f04:	6949      	ldr	r1, [r1, #20]
    2f06:	6021      	str	r1, [r4, #0]
	}

	// setup SCL register
	*(portControlRegister(hardware.scl_pins[scl_pin_index_].pin)) = PINCONFIG;
    2f08:	7e41      	ldrb	r1, [r0, #25]
    2f0a:	f64f 0461 	movw	r4, #63585	; 0xf861
    2f0e:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2f12:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    2f16:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2f1a:	6889      	ldr	r1, [r1, #8]
    2f1c:	600c      	str	r4, [r1, #0]
	*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    2f1e:	7e41      	ldrb	r1, [r0, #25]
    2f20:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2f24:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    2f28:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2f2a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2f2e:	685b      	ldr	r3, [r3, #4]
    2f30:	6019      	str	r1, [r3, #0]
    2f32:	7e43      	ldrb	r3, [r0, #25]
    2f34:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (hardware.scl_pins[scl_pin_index_].select_input_register) {
    2f38:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2f3a:	b10b      	cbz	r3, 2f40 <TwoWire::begin()+0xc0>
		*(hardware.scl_pins[scl_pin_index_].select_input_register) =  hardware.scl_pins[scl_pin_index_].select_val;
    2f3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    2f3e:	601a      	str	r2, [r3, #0]
    2f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f44:	400fc000 	.word	0x400fc000
    2f48:	05050bb8 	.word	0x05050bb8
    2f4c:	200011ec 	.word	0x200011ec
    2f50:	1928373b 	.word	0x1928373b

00002f54 <TwoWire::force_clock()>:
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    2f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f58:	4683      	mov	fp, r0
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2f5a:	4840      	ldr	r0, [pc, #256]	; (305c <TwoWire::force_clock()+0x108>)
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    2f5c:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2f5e:	2515      	movs	r5, #21
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2f60:	f8db a014 	ldr.w	sl, [fp, #20]
    2f64:	f89b 6018 	ldrb.w	r6, [fp, #24]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2f68:	f89b 3019 	ldrb.w	r3, [fp, #25]
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2f6c:	eb0a 1606 	add.w	r6, sl, r6, lsl #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2f70:	493b      	ldr	r1, [pc, #236]	; (3060 <TwoWire::force_clock()+0x10c>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2f72:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2f76:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 3064 <TwoWire::force_clock()+0x110>
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2f7a:	7a36      	ldrb	r6, [r6, #8]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2f7c:	460c      	mov	r4, r1
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2f82:	0136      	lsls	r6, r6, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2f84:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 3068 <TwoWire::force_clock()+0x114>
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2f88:	011b      	lsls	r3, r3, #4
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2f8a:	1987      	adds	r7, r0, r6
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
    2f8c:	f850 8006 	ldr.w	r8, [r0, r6]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2f90:	eb00 0c03 	add.w	ip, r0, r3
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
    2f94:	58c6      	ldr	r6, [r0, r3]
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2f96:	68f8      	ldr	r0, [r7, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2f98:	687b      	ldr	r3, [r7, #4]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2f9a:	f8dc 700c 	ldr.w	r7, [ip, #12]
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2f9e:	9300      	str	r3, [sp, #0]
    2fa0:	601d      	str	r5, [r3, #0]
	*portSetRegister(sda_pin) = sda_mask;
    2fa2:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    2fa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2faa:	f8dc 2004 	ldr.w	r2, [ip, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    2fae:	4303      	orrs	r3, r0
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2fb0:	9201      	str	r2, [sp, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    2fb2:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2fb6:	6015      	str	r5, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    2fb8:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    2fbc:	6873      	ldr	r3, [r6, #4]
    2fbe:	433b      	orrs	r3, r7
    2fc0:	6073      	str	r3, [r6, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2fc2:	6809      	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2fc4:	f8de 3000 	ldr.w	r3, [lr]
    2fc8:	fba9 3203 	umull	r3, r2, r9, r3
    2fcc:	0c92      	lsrs	r2, r2, #18
    2fce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2fd2:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2fd4:	6823      	ldr	r3, [r4, #0]
    2fd6:	1a5b      	subs	r3, r3, r1
    2fd8:	429a      	cmp	r2, r3
    2fda:	d8fb      	bhi.n	2fd4 <TwoWire::force_clock()+0x80>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2fdc:	4a20      	ldr	r2, [pc, #128]	; (3060 <TwoWire::force_clock()+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2fde:	2509      	movs	r5, #9

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2fe0:	f8df c084 	ldr.w	ip, [pc, #132]	; 3068 <TwoWire::force_clock()+0x114>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2fe4:	4691      	mov	r9, r2
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
    2fe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    2fea:	4218      	tst	r0, r3
    2fec:	d002      	beq.n	2ff4 <TwoWire::force_clock()+0xa0>
    2fee:	68b3      	ldr	r3, [r6, #8]
    2ff0:	421f      	tst	r7, r3
    2ff2:	d131      	bne.n	3058 <TwoWire::force_clock()+0x104>
			// success, both pins are high
			ret = true;
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
    2ff4:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2ff8:	6814      	ldr	r4, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2ffa:	f8de 1000 	ldr.w	r1, [lr]
    2ffe:	fbac 3101 	umull	r3, r1, ip, r1
    3002:	0c89      	lsrs	r1, r1, #18
    3004:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    3008:	6813      	ldr	r3, [r2, #0]
    300a:	1b1b      	subs	r3, r3, r4
    300c:	4299      	cmp	r1, r3
    300e:	d8fb      	bhi.n	3008 <TwoWire::force_clock()+0xb4>
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
    3010:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    3014:	f8d9 4000 	ldr.w	r4, [r9]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    3018:	f8de 1000 	ldr.w	r1, [lr]
    301c:	fbac 3101 	umull	r3, r1, ip, r1
    3020:	0c89      	lsrs	r1, r1, #18
    3022:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    3026:	6813      	ldr	r3, [r2, #0]
    3028:	1b1b      	subs	r3, r3, r4
    302a:	4299      	cmp	r1, r3
    302c:	d8fb      	bhi.n	3026 <TwoWire::force_clock()+0xd2>
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
	*portModeRegister(scl_pin) |= scl_mask;
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
    302e:	3d01      	subs	r5, #1
    3030:	d1d9      	bne.n	2fe6 <TwoWire::force_clock()+0x92>
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
	bool ret = false;
    3032:	4628      	mov	r0, r5
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    3034:	f89b 3018 	ldrb.w	r3, [fp, #24]
    3038:	9a00      	ldr	r2, [sp, #0]
    303a:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    303e:	68db      	ldr	r3, [r3, #12]
    3040:	6013      	str	r3, [r2, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    3042:	f89b 3019 	ldrb.w	r3, [fp, #25]
    3046:	9a01      	ldr	r2, [sp, #4]
    3048:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    304c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    3050:	6013      	str	r3, [r2, #0]
	return ret;
}
    3052:	b003      	add	sp, #12
    3054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
		  && (*portInputRegister(scl_pin) & scl_mask)) {
			// success, both pins are high
			ret = true;
    3058:	2001      	movs	r0, #1
    305a:	e7eb      	b.n	3034 <TwoWire::force_clock()+0xe0>
    305c:	200011ec 	.word	0x200011ec
    3060:	e0001004 	.word	0xe0001004
    3064:	20004de4 	.word	0x20004de4
    3068:	431bde83 	.word	0x431bde83

0000306c <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    306c:	490d      	ldr	r1, [pc, #52]	; (30a4 <TwoWire::wait_idle()+0x38>)
    306e:	6902      	ldr	r2, [r0, #16]
//   01   EPF = End Packet Flag
//      2 RDF = Receive Data Flag
//      1 TDF = Transmit Data Flag

bool TwoWire::wait_idle()
{
    3070:	b510      	push	{r4, lr}
    3072:	680c      	ldr	r4, [r1, #0]
    3074:	e005      	b.n	3082 <TwoWire::wait_idle()+0x16>
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    3076:	01db      	lsls	r3, r3, #7
    3078:	d407      	bmi.n	308a <TwoWire::wait_idle()+0x1e>
    307a:	680b      	ldr	r3, [r1, #0]
		if (timeout > 16) {
    307c:	1b1b      	subs	r3, r3, r4
    307e:	2b10      	cmp	r3, #16
    3080:	d808      	bhi.n	3094 <TwoWire::wait_idle()+0x28>

bool TwoWire::wait_idle()
{
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
    3082:	6953      	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    3084:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3088:	d1f5      	bne.n	3076 <TwoWire::wait_idle()+0xa>
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    308a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    308e:	2001      	movs	r0, #1
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    3090:	6153      	str	r3, [r2, #20]
	return true;
}
    3092:	bd10      	pop	{r4, pc}
    3094:	4604      	mov	r4, r0
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
		if (timeout > 16) {
			//Serial.printf("timeout waiting for idle, MSR = %x\n", status);
			if (force_clock()) break;
    3096:	f7ff ff5d 	bl	2f54 <TwoWire::force_clock()>
    309a:	2800      	cmp	r0, #0
    309c:	d0f9      	beq.n	3092 <TwoWire::wait_idle()+0x26>
    309e:	6922      	ldr	r2, [r4, #16]
    30a0:	e7f3      	b.n	308a <TwoWire::wait_idle()+0x1e>
    30a2:	bf00      	nop
    30a4:	20007304 	.word	0x20007304

000030a8 <TwoWire::endTransmission(unsigned char)>:
	return true;
}


uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    30a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    30ac:	f890 a05f 	ldrb.w	sl, [r0, #95]	; 0x5f
	if (!tx_len) return 4; // no address for transmit
    30b0:	f1ba 0f00 	cmp.w	sl, #0
    30b4:	d102      	bne.n	30bc <TwoWire::endTransmission(unsigned char)+0x14>
    30b6:	2004      	movs	r0, #4
    30b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30bc:	4605      	mov	r5, r0
    30be:	460e      	mov	r6, r1
	if (!wait_idle()) return 4;
    30c0:	f7ff ffd4 	bl	306c <TwoWire::wait_idle()>
    30c4:	2800      	cmp	r0, #0
    30c6:	d0f6      	beq.n	30b6 <TwoWire::endTransmission(unsigned char)+0xe>
    30c8:	4f2e      	ldr	r7, [pc, #184]	; (3184 <TwoWire::endTransmission(unsigned char)+0xdc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    30ca:	2400      	movs	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    30cc:	f44f 7900 	mov.w	r9, #512	; 0x200
    30d0:	f8d7 8000 	ldr.w	r8, [r7]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    30d4:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    30d6:	6929      	ldr	r1, [r5, #16]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    30d8:	d81a      	bhi.n	3110 <TwoWire::endTransmission(unsigned char)+0x68>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    30da:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
    30dc:	f003 0307 	and.w	r3, r3, #7
			while (fifo_used < 4) {
    30e0:	2b03      	cmp	r3, #3
    30e2:	d909      	bls.n	30f8 <TwoWire::endTransmission(unsigned char)+0x50>
    30e4:	e014      	b.n	3110 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    30e6:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    30ea:	3301      	adds	r3, #1
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
    30ec:	2401      	movs	r4, #1
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    30ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    30f2:	2b04      	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    30f4:	660a      	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    30f6:	d00b      	beq.n	3110 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    30f8:	192a      	adds	r2, r5, r4
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
    30fa:	2c00      	cmp	r4, #0
    30fc:	d0f3      	beq.n	30e6 <TwoWire::endTransmission(unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
    30fe:	45a2      	cmp	sl, r4
    3100:	d927      	bls.n	3152 <TwoWire::endTransmission(unsigned char)+0xaa>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    3102:	3301      	adds	r3, #1
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    3104:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
    3108:	3401      	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    310a:	2b04      	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    310c:	660a      	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    310e:	d1f3      	bne.n	30f8 <TwoWire::endTransmission(unsigned char)+0x50>
				}
				fifo_used++;
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
    3110:	694b      	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    3112:	0518      	lsls	r0, r3, #20
    3114:	d422      	bmi.n	315c <TwoWire::endTransmission(unsigned char)+0xb4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
    3116:	055a      	lsls	r2, r3, #21
    3118:	d427      	bmi.n	316a <TwoWire::endTransmission(unsigned char)+0xc2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    311a:	0498      	lsls	r0, r3, #18
    311c:	d404      	bmi.n	3128 <TwoWire::endTransmission(unsigned char)+0x80>
    311e:	683a      	ldr	r2, [r7, #0]
    3120:	ebc8 0202 	rsb	r2, r8, r2
    3124:	2a32      	cmp	r2, #50	; 0x32
    3126:	d909      	bls.n	313c <TwoWire::endTransmission(unsigned char)+0x94>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    3128:	690b      	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    312a:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    312e:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    3130:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    3134:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    3136:	660a      	str	r2, [r1, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    3138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
    313c:	4554      	cmp	r4, sl
    313e:	d905      	bls.n	314c <TwoWire::endTransmission(unsigned char)+0xa4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    3140:	6dca      	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    3142:	0752      	lsls	r2, r2, #29
    3144:	d102      	bne.n	314c <TwoWire::endTransmission(unsigned char)+0xa4>
    3146:	059b      	lsls	r3, r3, #22
    3148:	d419      	bmi.n	317e <TwoWire::endTransmission(unsigned char)+0xd6>
    314a:	b1c6      	cbz	r6, 317e <TwoWire::endTransmission(unsigned char)+0xd6>
				return 0;
			}
		}
		yield();
    314c:	f002 fb40 	bl	57d0 <yield>
	uint32_t tx_len = txBufferLength;
	if (!tx_len) return 4; // no address for transmit
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
    3150:	e7c0      	b.n	30d4 <TwoWire::endTransmission(unsigned char)+0x2c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    3152:	b10e      	cbz	r6, 3158 <TwoWire::endTransmission(unsigned char)+0xb0>
    3154:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
					tx_index++;
    3158:	3401      	adds	r4, #1
					break;
    315a:	e7d9      	b.n	3110 <TwoWire::endTransmission(unsigned char)+0x68>
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    315c:	690b      	ldr	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    315e:	2004      	movs	r0, #4
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    3160:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    3164:	610b      	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    3166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    316a:	690b      	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    316c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    3170:	2002      	movs	r0, #2
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    3172:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    3176:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    3178:	660a      	str	r2, [r1, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    317a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
				return 0;
    317e:	2000      	movs	r0, #0
    3180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3184:	20007304 	.word	0x20007304

00003188 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:
void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    3188:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    318a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    318e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    3190:	d352      	bcc.n	3238 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    3192:	f896 e000 	ldrb.w	lr, [r6]
    3196:	7815      	ldrb	r5, [r2, #0]
    3198:	f896 a001 	ldrb.w	sl, [r6, #1]
    319c:	f896 b002 	ldrb.w	fp, [r6, #2]
    31a0:	7854      	ldrb	r4, [r2, #1]
    31a2:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    31a6:	1a5e      	subs	r6, r3, r1

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    31a8:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    31ac:	ebc4 0a0a 	rsb	sl, r4, sl
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    31b0:	ebcc 0b0b 	rsb	fp, ip, fp

    uint16_t pixeldistance = endpos - startpos;
    31b4:	b2b6      	uxth	r6, r6

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    31b6:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    31ba:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    31be:	ea4f 17cb 	mov.w	r7, fp, lsl #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    31c2:	b3b6      	cbz	r6, 3232 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    31c4:	fa0f fb86 	sxth.w	fp, r6
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    31c8:	4299      	cmp	r1, r3

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    31ca:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    31ce:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    31d2:	ea4f 220c 	mov.w	r2, ip, lsl #8

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    31d6:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    31da:	fb9a fafb 	sdiv	sl, sl, fp
    bdelta87 *= 2;
    31de:	fb97 fbfb 	sdiv	fp, r7, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    31e2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    31e6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    31ea:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    31ee:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    31f2:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    31f6:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    31fa:	d818      	bhi.n	322e <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    31fc:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3200:	3101      	adds	r1, #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3202:	ea4f 2925 	mov.w	r9, r5, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    3206:	4475      	add	r5, lr
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3208:	b289      	uxth	r1, r1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    320a:	19c6      	adds	r6, r0, r7
        g = rhs.g;
    320c:	ea4f 2824 	mov.w	r8, r4, asr #8
        r88 += rdelta87;
        g88 += gdelta87;
    3210:	4454      	add	r4, sl
        b = rhs.b;
    3212:	ea4f 2c22 	mov.w	ip, r2, asr #8
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3216:	428b      	cmp	r3, r1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
        g88 += gdelta87;
        b88 += bdelta87;
    3218:	445a      	add	r2, fp
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    321a:	f800 9007 	strb.w	r9, [r0, r7]
    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    321e:	b2ad      	uxth	r5, r5
        g = rhs.g;
    3220:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    3224:	b2a4      	uxth	r4, r4
        b = rhs.b;
    3226:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    322a:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    322c:	d2e6      	bcs.n	31fc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3232:	f04f 0b01 	mov.w	fp, #1
    3236:	e7c7      	b.n	31c8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    3238:	460c      	mov	r4, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    323a:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    323c:	f892 e000 	ldrb.w	lr, [r2]
    3240:	4619      	mov	r1, r3
        g = rhs.g;
    3242:	f892 a001 	ldrb.w	sl, [r2, #1]
    3246:	4623      	mov	r3, r4
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    3248:	f896 c002 	ldrb.w	ip, [r6, #2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    324c:	7874      	ldrb	r4, [r6, #1]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    324e:	f892 b002 	ldrb.w	fp, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3252:	7015      	strb	r5, [r2, #0]
    3254:	f886 e000 	strb.w	lr, [r6]
        g = rhs.g;
    3258:	7054      	strb	r4, [r2, #1]
    325a:	f886 a001 	strb.w	sl, [r6, #1]
        b = rhs.b;
    325e:	f882 c002 	strb.w	ip, [r2, #2]
    3262:	f886 b002 	strb.w	fp, [r6, #2]
    3266:	e79e      	b.n	31a6 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1e>

00003268 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    3268:	b321      	cbz	r1, 32b4 <fade_raw(CRGB*, unsigned short, unsigned char)+0x4c>
    326a:	43d2      	mvns	r2, r2
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    326c:	b430      	push	{r4, r5}
    326e:	1e4d      	subs	r5, r1, #1
    3270:	b2d2      	uxtb	r2, r2
    3272:	1c44      	adds	r4, r0, #1
    3274:	b2ad      	uxth	r5, r5
    3276:	3201      	adds	r2, #1
    3278:	3501      	adds	r5, #1
    327a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    327e:	4405      	add	r5, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    3280:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    3284:	3003      	adds	r0, #3
    3286:	3403      	adds	r4, #3
    3288:	fb02 f303 	mul.w	r3, r2, r3
    328c:	121b      	asrs	r3, r3, #8
    328e:	f804 3c04 	strb.w	r3, [r4, #-4]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3292:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3296:	f810 3c01 	ldrb.w	r3, [r0, #-1]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    329a:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    329e:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    32a2:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    32a4:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    32a6:	f800 1c02 	strb.w	r1, [r0, #-2]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    32aa:	f800 3c01 	strb.w	r3, [r0, #-1]
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    32ae:	4285      	cmp	r5, r0
    32b0:	d1e6      	bne.n	3280 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    32b2:	bc30      	pop	{r4, r5}
    32b4:	4770      	bx	lr
    32b6:	bf00      	nop

000032b8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    32b8:	f7ff bfd6 	b.w	3268 <fade_raw(CRGB*, unsigned short, unsigned char)>

000032bc <blur1d(CRGB*, unsigned short, unsigned char)>:
//         Total light is NOT entirely conserved, so many repeated
//         calls to 'blur' will also result in the light fading,
//         eventually all the way to black; this is by design so that
//         it can be used to (slowly) clear the LEDs to black.
void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)
{
    32bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    CRGB carryover = CRGB::Black;
    for( uint16_t i = 0; i < numLeds; i++) {
    32c0:	460c      	mov	r4, r1
//         Total light is NOT entirely conserved, so many repeated
//         calls to 'blur' will also result in the light fading,
//         eventually all the way to black; this is by design so that
//         it can be used to (slowly) clear the LEDs to black.
void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)
{
    32c2:	b085      	sub	sp, #20
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    32c4:	1053      	asrs	r3, r2, #1
    CRGB carryover = CRGB::Black;
    for( uint16_t i = 0; i < numLeds; i++) {
    32c6:	9103      	str	r1, [sp, #12]
//         calls to 'blur' will also result in the light fading,
//         eventually all the way to black; this is by design so that
//         it can be used to (slowly) clear the LEDs to black.
void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)
{
    uint8_t keep = 255 - blur_amount;
    32c8:	43d1      	mvns	r1, r2
    uint8_t seep = blur_amount >> 1;
    CRGB carryover = CRGB::Black;
    for( uint16_t i = 0; i < numLeds; i++) {
    32ca:	2c00      	cmp	r4, #0
    32cc:	d06a      	beq.n	33a4 <blur1d(CRGB*, unsigned short, unsigned char)+0xe8>
    32ce:	2200      	movs	r2, #0
    32d0:	b2c9      	uxtb	r1, r1
    32d2:	f103 0a01 	add.w	sl, r3, #1
    32d6:	f100 0901 	add.w	r9, r0, #1
    32da:	f101 0b01 	add.w	fp, r1, #1
    32de:	4615      	mov	r5, r2
    32e0:	4611      	mov	r1, r2
    32e2:	4694      	mov	ip, r2
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    32e4:	f819 8c01 	ldrb.w	r8, [r9, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    32e8:	7844      	ldrb	r4, [r0, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    32ea:	fb0a fe08 	mul.w	lr, sl, r8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    32ee:	7883      	ldrb	r3, [r0, #2]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    32f0:	fb0b f808 	mul.w	r8, fp, r8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    32f4:	fb0a f704 	mul.w	r7, sl, r4
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    32f8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    32fc:	eb02 2228 	add.w	r2, r2, r8, asr #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3300:	fb0a f603 	mul.w	r6, sl, r3
    3304:	fb0b f803 	mul.w	r8, fp, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3308:	123f      	asrs	r7, r7, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    330a:	fa5f f38e 	uxtb.w	r3, lr
    g = (((uint16_t)g) * scale_fixed) >> 8;
    330e:	fb0b f404 	mul.w	r4, fp, r4
    if( t > 255) t = 255;
    3312:	2aff      	cmp	r2, #255	; 0xff
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3314:	ea4f 2626 	mov.w	r6, r6, asr #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    3318:	9301      	str	r3, [sp, #4]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    331a:	ea4f 2424 	mov.w	r4, r4, asr #8
    331e:	b2fb      	uxtb	r3, r7
    3320:	bfc8      	it	gt
    3322:	22ff      	movgt	r2, #255	; 0xff
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    3324:	442c      	add	r4, r5
    3326:	bfd8      	it	le
    3328:	b2d2      	uxtble	r2, r2
    332a:	9302      	str	r3, [sp, #8]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    332c:	ea4f 2328 	mov.w	r3, r8, asr #8
    if( t > 255) t = 255;
    3330:	2cff      	cmp	r4, #255	; 0xff
    3332:	fa5f f886 	uxtb.w	r8, r6
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    3336:	4463      	add	r3, ip
    3338:	bfd4      	ite	le
    333a:	b2e4      	uxtble	r4, r4
    if( t > 255) t = 255;
    333c:	24ff      	movgt	r4, #255	; 0xff
    333e:	2bff      	cmp	r3, #255	; 0xff
    3340:	bfd4      	ite	le
    3342:	b2db      	uxtble	r3, r3
    3344:	23ff      	movgt	r3, #255	; 0xff
        CRGB cur = leds[i];
        CRGB part = cur;
        part.nscale8( seep);
        cur.nscale8( keep);
        cur += carryover;
        if( i) leds[i-1] += part;
    3346:	b1e9      	cbz	r1, 3384 <blur1d(CRGB*, unsigned short, unsigned char)+0xc8>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    3348:	f810 5c03 	ldrb.w	r5, [r0, #-3]
    334c:	44ae      	add	lr, r5
    334e:	f810 5c02 	ldrb.w	r5, [r0, #-2]
    if( t > 255) t = 255;
    3352:	f1be 0fff 	cmp.w	lr, #255	; 0xff
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    3356:	442f      	add	r7, r5
    3358:	f810 5c01 	ldrb.w	r5, [r0, #-1]
    335c:	bfd4      	ite	le
    335e:	fa5f fe8e 	uxtble.w	lr, lr
    if( t > 255) t = 255;
    3362:	f04f 0eff 	movgt.w	lr, #255	; 0xff
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    3366:	442e      	add	r6, r5
    if( t > 255) t = 255;
    3368:	2fff      	cmp	r7, #255	; 0xff


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    336a:	f800 ec03 	strb.w	lr, [r0, #-3]
    336e:	bfd4      	ite	le
    3370:	b2ff      	uxtble	r7, r7
    3372:	27ff      	movgt	r7, #255	; 0xff
    3374:	2eff      	cmp	r6, #255	; 0xff
        g = qadd8( g, rhs.g);
    3376:	f800 7c02 	strb.w	r7, [r0, #-2]
    337a:	bfd4      	ite	le
    337c:	b2f6      	uxtble	r6, r6
    337e:	26ff      	movgt	r6, #255	; 0xff
        b = qadd8( b, rhs.b);
    3380:	f800 6c01 	strb.w	r6, [r0, #-1]
void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)
{
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    CRGB carryover = CRGB::Black;
    for( uint16_t i = 0; i < numLeds; i++) {
    3384:	3101      	adds	r1, #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3386:	f809 2c01 	strb.w	r2, [r9, #-1]
        g = rhs.g;
        b = rhs.b;
    338a:	7083      	strb	r3, [r0, #2]
    338c:	46c4      	mov	ip, r8
    338e:	b289      	uxth	r1, r1
    3390:	9b03      	ldr	r3, [sp, #12]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3392:	7044      	strb	r4, [r0, #1]
    3394:	f109 0903 	add.w	r9, r9, #3
    3398:	428b      	cmp	r3, r1
    339a:	f100 0003 	add.w	r0, r0, #3
    339e:	9d02      	ldr	r5, [sp, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    33a0:	9a01      	ldr	r2, [sp, #4]
    33a2:	d19f      	bne.n	32e4 <blur1d(CRGB*, unsigned short, unsigned char)+0x28>
        cur += carryover;
        if( i) leds[i-1] += part;
        leds[i] = cur;
        carryover = part;
    }
}
    33a4:	b005      	add	sp, #20
    33a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33aa:	bf00      	nop

000033ac <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    33ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    33b0:	4607      	mov	r7, r0
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    33b2:	1110      	asrs	r0, r2, #4
    uint8_t red1   = entry->red;
    uint8_t green1 = entry->green;
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
    33b4:	0715      	lsls	r5, r2, #28
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    33b6:	f89d 801c 	ldrb.w	r8, [sp, #28]
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    33ba:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    33be:	eb01 0e04 	add.w	lr, r1, r4
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    33c2:	f811 c004 	ldrb.w	ip, [r1, r4]
    uint8_t green1 = entry->green;
    uint8_t blue1  = entry->blue;
    33c6:	f89e 6002 	ldrb.w	r6, [lr, #2]
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    uint8_t green1 = entry->green;
    33ca:	f89e 4001 	ldrb.w	r4, [lr, #1]
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
    33ce:	d030      	beq.n	3432 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x86>
    33d0:	f1b8 0f00 	cmp.w	r8, #0
    33d4:	d02d      	beq.n	3432 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x86>
    33d6:	f002 050f 	and.w	r5, r2, #15
        
        if( hi4 == 15 ) {
    33da:	280f      	cmp	r0, #15
            entry = &(pal[0]);
        } else {
            entry++;
        }
        
        uint8_t f2 = lo4 << 4;
    33dc:	ea4f 1505 	mov.w	r5, r5, lsl #4
    if( blend ) {
        
        if( hi4 == 15 ) {
            entry = &(pal[0]);
        } else {
            entry++;
    33e0:	bf18      	it	ne
    33e2:	f10e 0103 	addne.w	r1, lr, #3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    33e6:	f085 00ff 	eor.w	r0, r5, #255	; 0xff
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    33ea:	f891 8000 	ldrb.w	r8, [r1]
    33ee:	3501      	adds	r5, #1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    33f0:	f891 e001 	ldrb.w	lr, [r1, #1]
    33f4:	1c42      	adds	r2, r0, #1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    33f6:	f891 9002 	ldrb.w	r9, [r1, #2]
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    33fa:	fb05 f808 	mul.w	r8, r5, r8
    33fe:	fb02 f404 	mul.w	r4, r2, r4
    3402:	fb02 fc0c 	mul.w	ip, r2, ip
    3406:	fb02 f206 	mul.w	r2, r2, r6
    340a:	f3c4 2007 	ubfx	r0, r4, #8, #8
    340e:	f3cc 2c07 	ubfx	ip, ip, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    3412:	fb05 f40e 	mul.w	r4, r5, lr
    3416:	f3c2 2107 	ubfx	r1, r2, #8, #8

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    341a:	fb05 f209 	mul.w	r2, r5, r9
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    341e:	eb0c 2c28 	add.w	ip, ip, r8, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    3422:	eb00 2424 	add.w	r4, r0, r4, asr #8

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    3426:	eb01 2222 	add.w	r2, r1, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    342a:	fa5f fc8c 	uxtb.w	ip, ip

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    342e:	b2e4      	uxtb	r4, r4

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    3430:	b2d6      	uxtb	r6, r2
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    3432:	2bff      	cmp	r3, #255	; 0xff
    3434:	d013      	beq.n	345e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb2>
        if( brightness ) {
    3436:	b1cb      	cbz	r3, 346c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc0>
            brightness++; // adjust for rounding
    3438:	3301      	adds	r3, #1
    343a:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    343c:	f1bc 0f00 	cmp.w	ip, #0
    3440:	d003      	beq.n	344a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x9e>
    3442:	fb03 cc0c 	mla	ip, r3, ip, ip
    3446:	f3cc 2c07 	ubfx	ip, ip, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    344a:	b11c      	cbz	r4, 3454 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xa8>
    344c:	fb03 4404 	mla	r4, r3, r4, r4
    3450:	f3c4 2407 	ubfx	r4, r4, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    3454:	b11e      	cbz	r6, 345e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb2>
    3456:	fb03 6206 	mla	r2, r3, r6, r6
    345a:	f3c2 2607 	ubfx	r6, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    345e:	f887 c000 	strb.w	ip, [r7]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    3462:	4638      	mov	r0, r7
    3464:	707c      	strb	r4, [r7, #1]
    3466:	70be      	strb	r6, [r7, #2]
    3468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    346c:	461e      	mov	r6, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    346e:	461c      	mov	r4, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    3470:	469c      	mov	ip, r3
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    3472:	4638      	mov	r0, r7
    3474:	707c      	strb	r4, [r7, #1]
    3476:	f887 c000 	strb.w	ip, [r7]
    347a:	70be      	strb	r6, [r7, #2]
    347c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003480 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    3480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    3482:	1e1e      	subs	r6, r3, #0
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    3484:	4604      	mov	r4, r0
    3486:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    3488:	dd0f      	ble.n	34aa <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
    348a:	eb02 0542 	add.w	r5, r2, r2, lsl #1
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    348e:	6823      	ldr	r3, [r4, #0]
    3490:	4620      	mov	r0, r4
    3492:	689b      	ldr	r3, [r3, #8]
    3494:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    3496:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    3498:	6823      	ldr	r3, [r4, #0]
    349a:	6062      	str	r2, [r4, #4]
    349c:	4a0c      	ldr	r2, [pc, #48]	; (34d0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    349e:	695b      	ldr	r3, [r3, #20]
        m_nLeds = nLeds;
    34a0:	6166      	str	r6, [r4, #20]
    34a2:	4293      	cmp	r3, r2
    34a4:	d104      	bne.n	34b0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x30>
	return *pLed;
}
    34a6:	4620      	mov	r0, r4
    34a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    34aa:	4616      	mov	r6, r2
    34ac:	2500      	movs	r5, #0
    34ae:	e7ee      	b.n	348e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    34b0:	4620      	mov	r0, r4
    34b2:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    34b4:	2800      	cmp	r0, #0
    34b6:	d0f6      	beq.n	34a6 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    34b8:	4b06      	ldr	r3, [pc, #24]	; (34d4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    34ba:	4a07      	ldr	r2, [pc, #28]	; (34d8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x58>)
    34bc:	fb93 f0f0 	sdiv	r0, r3, r0
    34c0:	6853      	ldr	r3, [r2, #4]
    34c2:	4298      	cmp	r0, r3
    34c4:	bf38      	it	cc
    34c6:	4618      	movcc	r0, r3
    34c8:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    34ca:	4620      	mov	r0, r4
    34cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34ce:	bf00      	nop
    34d0:	00000081 	.word	0x00000081
    34d4:	000f4240 	.word	0x000f4240
    34d8:	200072d8 	.word	0x200072d8

000034dc <CFastLED::show(unsigned char)>:

void CFastLED::show(uint8_t scale) {
    34dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34e0:	6843      	ldr	r3, [r0, #4]
    34e2:	b083      	sub	sp, #12
    34e4:	4606      	mov	r6, r0
    34e6:	460f      	mov	r7, r1
    34e8:	4c34      	ldr	r4, [pc, #208]	; (35bc <CFastLED::show(unsigned char)+0xe0>)
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    34ea:	2b00      	cmp	r3, #0
    34ec:	d15d      	bne.n	35aa <CFastLED::show(unsigned char)+0xce>
	lastshow = micros();
    34ee:	f000 fadd 	bl	3aac <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    34f2:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    34f4:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    34f6:	b11b      	cbz	r3, 3500 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    34f8:	4638      	mov	r0, r7
    34fa:	68b1      	ldr	r1, [r6, #8]
    34fc:	4798      	blx	r3
    34fe:	4607      	mov	r7, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    3500:	4b2f      	ldr	r3, [pc, #188]	; (35c0 <CFastLED::show(unsigned char)+0xe4>)
    3502:	681c      	ldr	r4, [r3, #0]
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3504:	2c00      	cmp	r4, #0
    3506:	d037      	beq.n	3578 <CFastLED::show(unsigned char)+0x9c>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3508:	2500      	movs	r5, #0
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    350a:	8873      	ldrh	r3, [r6, #2]
    350c:	f894 8012 	ldrb.w	r8, [r4, #18]
    3510:	2b63      	cmp	r3, #99	; 0x63
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3512:	6823      	ldr	r3, [r4, #0]
    3514:	6861      	ldr	r1, [r4, #4]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3516:	bf98      	it	ls
    3518:	74a5      	strbls	r5, [r4, #18]
    351a:	f88d 5004 	strb.w	r5, [sp, #4]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    351e:	f8d3 9004 	ldr.w	r9, [r3, #4]
    3522:	f88d 5005 	strb.w	r5, [sp, #5]
    3526:	f88d 5006 	strb.w	r5, [sp, #6]
    352a:	6962      	ldr	r2, [r4, #20]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    352c:	b1e7      	cbz	r7, 3568 <CFastLED::show(unsigned char)+0x8c>
    352e:	f104 000b 	add.w	r0, r4, #11
    3532:	f10d 0e04 	add.w	lr, sp, #4
    3536:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    353a:	f810 af01 	ldrb.w	sl, [r0, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    353e:	f890 b003 	ldrb.w	fp, [r0, #3]
                      if(cc > 0 && ct > 0) {
    3542:	f1ba 0f00 	cmp.w	sl, #0
    3546:	d00b      	beq.n	3560 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3548:	f10b 0301 	add.w	r3, fp, #1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    354c:	f1bb 0f00 	cmp.w	fp, #0
    3550:	d006      	beq.n	3560 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3552:	fb0a 3303 	mla	r3, sl, r3, r3
    3556:	fb07 f303 	mul.w	r3, r7, r3
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    355a:	0c1b      	lsrs	r3, r3, #16
    355c:	f88e 3000 	strb.w	r3, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    3560:	4584      	cmp	ip, r0
    3562:	f10e 0e01 	add.w	lr, lr, #1
    3566:	d1e8      	bne.n	353a <CFastLED::show(unsigned char)+0x5e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3568:	4620      	mov	r0, r4
    356a:	ab01      	add	r3, sp, #4
    356c:	47c8      	blx	r9

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    356e:	f884 8012 	strb.w	r8, [r4, #18]
    3572:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3574:	2c00      	cmp	r4, #0
    3576:	d1c8      	bne.n	350a <CFastLED::show(unsigned char)+0x2e>

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    3578:	4912      	ldr	r1, [pc, #72]	; (35c4 <CFastLED::show(unsigned char)+0xe8>)
    357a:	6808      	ldr	r0, [r1, #0]
    357c:	1c43      	adds	r3, r0, #1
    357e:	2818      	cmp	r0, #24
    3580:	600b      	str	r3, [r1, #0]
    3582:	dd0f      	ble.n	35a4 <CFastLED::show(unsigned char)+0xc8>
    3584:	4d10      	ldr	r5, [pc, #64]	; (35c8 <CFastLED::show(unsigned char)+0xec>)
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
    358a:	4c10      	ldr	r4, [pc, #64]	; (35cc <CFastLED::show(unsigned char)+0xf0>)
		m_nFPS = (br * 1000) / now;
    br = 0;
    358c:	2700      	movs	r7, #0
    358e:	6828      	ldr	r0, [r5, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3590:	fb02 f203 	mul.w	r2, r2, r3
    3594:	6823      	ldr	r3, [r4, #0]
    3596:	682d      	ldr	r5, [r5, #0]
    3598:	1ac3      	subs	r3, r0, r3
    br = 0;
    359a:	600f      	str	r7, [r1, #0]
    lastframe = millis();
    359c:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    359e:	fbb2 f3f3 	udiv	r3, r2, r3
    35a2:	8073      	strh	r3, [r6, #2]
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
    35a4:	b003      	add	sp, #12
    35a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    35aa:	f000 fa7f 	bl	3aac <micros>
    35ae:	6822      	ldr	r2, [r4, #0]
    35b0:	6873      	ldr	r3, [r6, #4]
    35b2:	1a80      	subs	r0, r0, r2
    35b4:	4298      	cmp	r0, r3
    35b6:	d398      	bcc.n	34ea <CFastLED::show(unsigned char)+0xe>
    35b8:	e799      	b.n	34ee <CFastLED::show(unsigned char)+0x12>
    35ba:	bf00      	nop
    35bc:	200072f0 	.word	0x200072f0
    35c0:	200072e8 	.word	0x200072e8
    35c4:	200072ec 	.word	0x200072ec
    35c8:	20007304 	.word	0x20007304
    35cc:	200072f4 	.word	0x200072f4

000035d0 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    35d0:	4b04      	ldr	r3, [pc, #16]	; (35e4 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    35d2:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    35d4:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    35d6:	f04f 31ff 	mov.w	r1, #4294967295

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    35da:	805a      	strh	r2, [r3, #2]
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    35dc:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    35de:	6099      	str	r1, [r3, #8]
CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
	m_pPowerFunc = NULL;
    35e0:	60da      	str	r2, [r3, #12]
    35e2:	4770      	bx	lr
    35e4:	200072d8 	.word	0x200072d8

000035e8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    35e8:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    35ea:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    35ee:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    35f2:	d16d      	bne.n	36d0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    35f4:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    35f6:	d341      	bcc.n	367c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    35f8:	f851 3b04 	ldr.w	r3, [r1], #4
    35fc:	f840 3b04 	str.w	r3, [r0], #4
    3600:	f851 3b04 	ldr.w	r3, [r1], #4
    3604:	f840 3b04 	str.w	r3, [r0], #4
    3608:	f851 3b04 	ldr.w	r3, [r1], #4
    360c:	f840 3b04 	str.w	r3, [r0], #4
    3610:	f851 3b04 	ldr.w	r3, [r1], #4
    3614:	f840 3b04 	str.w	r3, [r0], #4
    3618:	f851 3b04 	ldr.w	r3, [r1], #4
    361c:	f840 3b04 	str.w	r3, [r0], #4
    3620:	f851 3b04 	ldr.w	r3, [r1], #4
    3624:	f840 3b04 	str.w	r3, [r0], #4
    3628:	f851 3b04 	ldr.w	r3, [r1], #4
    362c:	f840 3b04 	str.w	r3, [r0], #4
    3630:	f851 3b04 	ldr.w	r3, [r1], #4
    3634:	f840 3b04 	str.w	r3, [r0], #4
    3638:	f851 3b04 	ldr.w	r3, [r1], #4
    363c:	f840 3b04 	str.w	r3, [r0], #4
    3640:	f851 3b04 	ldr.w	r3, [r1], #4
    3644:	f840 3b04 	str.w	r3, [r0], #4
    3648:	f851 3b04 	ldr.w	r3, [r1], #4
    364c:	f840 3b04 	str.w	r3, [r0], #4
    3650:	f851 3b04 	ldr.w	r3, [r1], #4
    3654:	f840 3b04 	str.w	r3, [r0], #4
    3658:	f851 3b04 	ldr.w	r3, [r1], #4
    365c:	f840 3b04 	str.w	r3, [r0], #4
    3660:	f851 3b04 	ldr.w	r3, [r1], #4
    3664:	f840 3b04 	str.w	r3, [r0], #4
    3668:	f851 3b04 	ldr.w	r3, [r1], #4
    366c:	f840 3b04 	str.w	r3, [r0], #4
    3670:	f851 3b04 	ldr.w	r3, [r1], #4
    3674:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3678:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    367a:	d2bd      	bcs.n	35f8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    367c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    367e:	d311      	bcc.n	36a4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3680:	f851 3b04 	ldr.w	r3, [r1], #4
    3684:	f840 3b04 	str.w	r3, [r0], #4
    3688:	f851 3b04 	ldr.w	r3, [r1], #4
    368c:	f840 3b04 	str.w	r3, [r0], #4
    3690:	f851 3b04 	ldr.w	r3, [r1], #4
    3694:	f840 3b04 	str.w	r3, [r0], #4
    3698:	f851 3b04 	ldr.w	r3, [r1], #4
    369c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    36a0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    36a2:	d2ed      	bcs.n	3680 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    36a4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    36a6:	d305      	bcc.n	36b4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    36a8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    36ac:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    36b0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    36b2:	d2f9      	bcs.n	36a8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    36b4:	3204      	adds	r2, #4
	beq	.Ldone
    36b6:	d008      	beq.n	36ca <memcpy+0xe2>

	lsls	r2, r2, #31
    36b8:	07d2      	lsls	r2, r2, #31
	itt ne
    36ba:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    36bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    36c0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    36c4:	d301      	bcc.n	36ca <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    36c6:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    36c8:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    36ca:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    36cc:	4770      	bx	lr
    36ce:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    36d0:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    36d2:	d313      	bcc.n	36fc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    36d4:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    36d6:	d08d      	beq.n	35f4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    36d8:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    36dc:	d08a      	beq.n	35f4 <memcpy+0xc>

	rsb	r3, #4
    36de:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    36e2:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    36e4:	07db      	lsls	r3, r3, #31
	itt ne
    36e6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    36e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    36ec:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    36f0:	d380      	bcc.n	35f4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    36f2:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    36f6:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    36fa:	e77b      	b.n	35f4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    36fc:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    36fe:	d3d9      	bcc.n	36b4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3700:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3702:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    3706:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    370a:	d2f9      	bcs.n	3700 <memcpy+0x118>

	ldrb	r3, [r1]
    370c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    370e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3710:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3712:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    3714:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    3716:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3718:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    371a:	4770      	bx	lr

0000371c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    371c:	4a96      	ldr	r2, [pc, #600]	; (3978 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    371e:	4b97      	ldr	r3, [pc, #604]	; (397c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3720:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    3722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    3726:	4c96      	ldr	r4, [pc, #600]	; (3980 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3728:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    372c:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    372e:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3730:	d91c      	bls.n	376c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    3732:	4b94      	ldr	r3, [pc, #592]	; (3984 <set_arm_clock+0x268>)
    3734:	4298      	cmp	r0, r3
    3736:	f240 8115 	bls.w	3964 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    373a:	4b93      	ldr	r3, [pc, #588]	; (3988 <set_arm_clock+0x26c>)
    373c:	f240 6527 	movw	r5, #1575	; 0x627
    3740:	4f92      	ldr	r7, [pc, #584]	; (398c <set_arm_clock+0x270>)
    3742:	4403      	add	r3, r0
    3744:	4c92      	ldr	r4, [pc, #584]	; (3990 <set_arm_clock+0x274>)
    3746:	0a1a      	lsrs	r2, r3, #8
    3748:	fba7 3202 	umull	r3, r2, r7, r2
    374c:	09d3      	lsrs	r3, r2, #7
    374e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3752:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3756:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    375a:	42ab      	cmp	r3, r5
    375c:	bf28      	it	cs
    375e:	462b      	movcs	r3, r5
    3760:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    3764:	fba4 3503 	umull	r3, r5, r4, r3
    3768:	08ed      	lsrs	r5, r5, #3
    376a:	e004      	b.n	3776 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    376c:	4d89      	ldr	r5, [pc, #548]	; (3994 <set_arm_clock+0x278>)
    376e:	42a8      	cmp	r0, r5
    3770:	bf94      	ite	ls
    3772:	2506      	movls	r5, #6
    3774:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3776:	4a81      	ldr	r2, [pc, #516]	; (397c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3778:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    377c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3780:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3782:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3786:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    378a:	d20a      	bcs.n	37a2 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    378c:	4b7c      	ldr	r3, [pc, #496]	; (3980 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    378e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3792:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3794:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    3796:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3798:	6813      	ldr	r3, [r2, #0]
    379a:	2b00      	cmp	r3, #0
    379c:	dafc      	bge.n	3798 <set_arm_clock+0x7c>
    379e:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    37a2:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    37a6:	d131      	bne.n	380c <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    37a8:	4c7b      	ldr	r4, [pc, #492]	; (3998 <set_arm_clock+0x27c>)
    37aa:	4a7c      	ldr	r2, [pc, #496]	; (399c <set_arm_clock+0x280>)
    37ac:	f8d4 c010 	ldr.w	ip, [r4, #16]
    37b0:	4614      	mov	r4, r2
    37b2:	ea0c 0202 	and.w	r2, ip, r2
    37b6:	42a2      	cmp	r2, r4
    37b8:	bf0a      	itet	eq
    37ba:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    37be:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    37c2:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    37c4:	ea8e 0403 	eor.w	r4, lr, r3
    37c8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    37cc:	d008      	beq.n	37e0 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    37ce:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    37d2:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    37d6:	4c69      	ldr	r4, [pc, #420]	; (397c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    37d8:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    37dc:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    37e0:	ea81 0302 	eor.w	r3, r1, r2
    37e4:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    37e8:	d008      	beq.n	37fc <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    37ea:	4b64      	ldr	r3, [pc, #400]	; (397c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    37ec:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    37f0:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    37f2:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    37f4:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    37f6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    37f8:	071c      	lsls	r4, r3, #28
    37fa:	d4fc      	bmi.n	37f6 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    37fc:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3800:	4a5e      	ldr	r2, [pc, #376]	; (397c <set_arm_clock+0x260>)
    3802:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3806:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3808:	0699      	lsls	r1, r3, #26
    380a:	d4fc      	bmi.n	3806 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    380c:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    380e:	4c64      	ldr	r4, [pc, #400]	; (39a0 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    3810:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    3812:	fb01 f302 	mul.w	r3, r1, r2
    3816:	fb00 f303 	mul.w	r3, r0, r3
    381a:	42a3      	cmp	r3, r4
    381c:	d809      	bhi.n	3832 <set_arm_clock+0x116>
		if (div_arm < 8) {
    381e:	2a07      	cmp	r2, #7
    3820:	f200 8095 	bhi.w	394e <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    3824:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    3826:	fb01 f302 	mul.w	r3, r1, r2
    382a:	fb00 f303 	mul.w	r3, r0, r3
    382e:	42a3      	cmp	r3, r4
    3830:	d9f5      	bls.n	381e <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3832:	485c      	ldr	r0, [pc, #368]	; (39a4 <set_arm_clock+0x288>)
    3834:	4c5c      	ldr	r4, [pc, #368]	; (39a8 <set_arm_clock+0x28c>)
    3836:	4418      	add	r0, r3
    3838:	fba4 0300 	umull	r0, r3, r4, r0
    383c:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    383e:	2b6c      	cmp	r3, #108	; 0x6c
    3840:	f200 808b 	bhi.w	395a <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    3844:	2b35      	cmp	r3, #53	; 0x35
    3846:	f200 808f 	bhi.w	3968 <set_arm_clock+0x24c>
    384a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 39d4 <set_arm_clock+0x2b8>
    384e:	2336      	movs	r3, #54	; 0x36
    3850:	4856      	ldr	r0, [pc, #344]	; (39ac <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3852:	f8df c144 	ldr.w	ip, [pc, #324]	; 3998 <set_arm_clock+0x27c>
    3856:	4c56      	ldr	r4, [pc, #344]	; (39b0 <set_arm_clock+0x294>)
    3858:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    385c:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3860:	ea09 0404 	and.w	r4, r9, r4
    3864:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    3866:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    386a:	d00b      	beq.n	3884 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    386c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3870:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3874:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3876:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    387a:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    387e:	6823      	ldr	r3, [r4, #0]
    3880:	2b00      	cmp	r3, #0
    3882:	dafc      	bge.n	387e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3884:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 397c <set_arm_clock+0x260>
    3888:	3a01      	subs	r2, #1
    388a:	f8dc 3010 	ldr.w	r3, [ip, #16]
    388e:	f003 0307 	and.w	r3, r3, #7
    3892:	4293      	cmp	r3, r2
    3894:	d007      	beq.n	38a6 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3896:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    389a:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    389c:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    38a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    38a2:	03db      	lsls	r3, r3, #15
    38a4:	d4fc      	bmi.n	38a0 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    38a6:	3901      	subs	r1, #1
    38a8:	0289      	lsls	r1, r1, #10
    38aa:	ea8e 0301 	eor.w	r3, lr, r1
    38ae:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    38b2:	d00c      	beq.n	38ce <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    38b4:	4b31      	ldr	r3, [pc, #196]	; (397c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    38b6:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    38ba:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    38be:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    38c0:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    38c4:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    38c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    38ca:	0799      	lsls	r1, r3, #30
    38cc:	d4fc      	bmi.n	38c8 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    38ce:	4b39      	ldr	r3, [pc, #228]	; (39b4 <set_arm_clock+0x298>)
    38d0:	4939      	ldr	r1, [pc, #228]	; (39b8 <set_arm_clock+0x29c>)
    38d2:	4403      	add	r3, r0
    38d4:	09db      	lsrs	r3, r3, #7
    38d6:	fba1 3103 	umull	r3, r1, r1, r3
    38da:	0b09      	lsrs	r1, r1, #12
    38dc:	2904      	cmp	r1, #4
    38de:	bf28      	it	cs
    38e0:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    38e2:	1e4b      	subs	r3, r1, #1
    38e4:	021b      	lsls	r3, r3, #8
    38e6:	ea8e 0203 	eor.w	r2, lr, r3
    38ea:	f412 7f40 	tst.w	r2, #768	; 0x300
    38ee:	d007      	beq.n	3900 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    38f0:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    38f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    38f8:	4a20      	ldr	r2, [pc, #128]	; (397c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    38fa:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    38fe:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3900:	4b1e      	ldr	r3, [pc, #120]	; (397c <set_arm_clock+0x260>)
    3902:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3904:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3906:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    390a:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    390c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    390e:	069b      	lsls	r3, r3, #26
    3910:	d4fc      	bmi.n	390c <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3912:	4b2a      	ldr	r3, [pc, #168]	; (39bc <set_arm_clock+0x2a0>)
    3914:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    3918:	4c29      	ldr	r4, [pc, #164]	; (39c0 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    391a:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    391c:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    3920:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3922:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    3926:	4c27      	ldr	r4, [pc, #156]	; (39c4 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3928:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    392c:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3930:	4a25      	ldr	r2, [pc, #148]	; (39c8 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    3932:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3934:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3936:	d208      	bcs.n	394a <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3938:	4b11      	ldr	r3, [pc, #68]	; (3980 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    393a:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    393e:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3940:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    3942:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3944:	6813      	ldr	r3, [r2, #0]
    3946:	2b00      	cmp	r3, #0
    3948:	dafc      	bge.n	3944 <set_arm_clock+0x228>
	}

	return frequency;
}
    394a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    394e:	2904      	cmp	r1, #4
    3950:	f63f af6f 	bhi.w	3832 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    3954:	3101      	adds	r1, #1
				div_arm = 1;
    3956:	2201      	movs	r2, #1
    3958:	e75b      	b.n	3812 <set_arm_clock+0xf6>
    395a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 39d8 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    395e:	236c      	movs	r3, #108	; 0x6c
    3960:	481a      	ldr	r0, [pc, #104]	; (39cc <set_arm_clock+0x2b0>)
    3962:	e776      	b.n	3852 <set_arm_clock+0x136>
    3964:	2512      	movs	r5, #18
    3966:	e706      	b.n	3776 <set_arm_clock+0x5a>
    3968:	4819      	ldr	r0, [pc, #100]	; (39d0 <set_arm_clock+0x2b4>)
    396a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 39dc <set_arm_clock+0x2c0>
    396e:	fb00 f003 	mul.w	r0, r0, r3
    3972:	ea43 0808 	orr.w	r8, r3, r8
    3976:	e76c      	b.n	3852 <set_arm_clock+0x136>
    3978:	1f78a400 	.word	0x1f78a400
    397c:	400fc000 	.word	0x400fc000
    3980:	40080000 	.word	0x40080000
    3984:	23c34600 	.word	0x23c34600
    3988:	dc3cba00 	.word	0xdc3cba00
    398c:	004cb223 	.word	0x004cb223
    3990:	51eb851f 	.word	0x51eb851f
    3994:	016e3600 	.word	0x016e3600
    3998:	400d8000 	.word	0x400d8000
    399c:	80003040 	.word	0x80003040
    39a0:	269fb1ff 	.word	0x269fb1ff
    39a4:	005b8d80 	.word	0x005b8d80
    39a8:	165e9f81 	.word	0x165e9f81
    39ac:	269fb200 	.word	0x269fb200
    39b0:	8001307f 	.word	0x8001307f
    39b4:	08f0d17f 	.word	0x08f0d17f
    39b8:	00e5109f 	.word	0x00e5109f
    39bc:	431bde83 	.word	0x431bde83
    39c0:	20004de4 	.word	0x20004de4
    39c4:	20004de0 	.word	0x20004de0
    39c8:	20007300 	.word	0x20007300
    39cc:	4d3f6400 	.word	0x4d3f6400
    39d0:	00b71b00 	.word	0x00b71b00
    39d4:	80002036 	.word	0x80002036
    39d8:	8000206c 	.word	0x8000206c
    39dc:	80002000 	.word	0x80002000

000039e0 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    39e0:	2800      	cmp	r0, #0
    39e2:	d057      	beq.n	3a94 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    39e4:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    39e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39ea:	b085      	sub	sp, #20
    39ec:	4683      	mov	fp, r0
    39ee:	4c2a      	ldr	r4, [pc, #168]	; (3a98 <delay+0xb8>)
    39f0:	4d2a      	ldr	r5, [pc, #168]	; (3a9c <delay+0xbc>)
    39f2:	4e2b      	ldr	r6, [pc, #172]	; (3aa0 <delay+0xc0>)
    39f4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    39f8:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    39fc:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    39fe:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3a00:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3a04:	2900      	cmp	r1, #0
    3a06:	d1f7      	bne.n	39f8 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3a08:	4f26      	ldr	r7, [pc, #152]	; (3aa4 <delay+0xc4>)
    3a0a:	e9cd 8902 	strd	r8, r9, [sp, #8]
    3a0e:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    3a10:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a12:	4a25      	ldr	r2, [pc, #148]	; (3aa8 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    3a14:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3a18:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a1a:	6812      	ldr	r2, [r2, #0]
    3a1c:	2701      	movs	r7, #1
    3a1e:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    3a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a26:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    3a28:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a2a:	428b      	cmp	r3, r1
    3a2c:	bf08      	it	eq
    3a2e:	4542      	cmpeq	r2, r8
    3a30:	bf2c      	ite	cs
    3a32:	46c2      	movcs	sl, r8
    3a34:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    3a36:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3a3a:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3a3e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3a40:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3a42:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3a46:	2b00      	cmp	r3, #0
    3a48:	d1f7      	bne.n	3a3a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3a4a:	9801      	ldr	r0, [sp, #4]
    3a4c:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    3a4e:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a50:	4815      	ldr	r0, [pc, #84]	; (3aa8 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3a52:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a56:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3a58:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a5c:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    3a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3a64:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a68:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    3a6a:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a6c:	4299      	cmp	r1, r3
    3a6e:	bf08      	it	eq
    3a70:	4540      	cmpeq	r0, r8
    3a72:	bf2c      	ite	cs
    3a74:	4643      	movcs	r3, r8
    3a76:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3a78:	441a      	add	r2, r3
    3a7a:	4572      	cmp	r2, lr
    3a7c:	d307      	bcc.n	3a8e <delay+0xae>
			if (--msec == 0) return;
    3a7e:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    3a82:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    3a86:	d1d8      	bne.n	3a3a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    3a88:	b005      	add	sp, #20
    3a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    3a8e:	f001 fe9f 	bl	57d0 <yield>
	}
    3a92:	e7d2      	b.n	3a3a <delay+0x5a>
    3a94:	4770      	bx	lr
    3a96:	bf00      	nop
    3a98:	2000763c 	.word	0x2000763c
    3a9c:	20007304 	.word	0x20007304
    3aa0:	200072fc 	.word	0x200072fc
    3aa4:	e0001004 	.word	0xe0001004
    3aa8:	20007300 	.word	0x20007300

00003aac <micros>:
	// TODO...
}

uint32_t micros(void)
{
    3aac:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    3ab0:	4a12      	ldr	r2, [pc, #72]	; (3afc <micros+0x50>)
    3ab2:	2601      	movs	r6, #1
    3ab4:	4d12      	ldr	r5, [pc, #72]	; (3b00 <micros+0x54>)
    3ab6:	4c13      	ldr	r4, [pc, #76]	; (3b04 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3ab8:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3abc:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    3abe:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3ac0:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d1f7      	bne.n	3ab8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3ac8:	4a0f      	ldr	r2, [pc, #60]	; (3b08 <micros+0x5c>)
    3aca:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3acc:	4f0f      	ldr	r7, [pc, #60]	; (3b0c <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    3ace:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    3ad0:	f04f 0900 	mov.w	r9, #0
    3ad4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3ad8:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    3ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3ade:	4599      	cmp	r9, r3
    3ae0:	fba2 6706 	umull	r6, r7, r2, r6
    3ae4:	bf08      	it	eq
    3ae6:	45b8      	cmpeq	r8, r7
    3ae8:	463c      	mov	r4, r7
    3aea:	bf2c      	ite	cs
    3aec:	463c      	movcs	r4, r7
    3aee:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    3af0:	fb00 4001 	mla	r0, r0, r1, r4
    3af4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    3af8:	4770      	bx	lr
    3afa:	bf00      	nop
    3afc:	2000763c 	.word	0x2000763c
    3b00:	20007304 	.word	0x20007304
    3b04:	200072fc 	.word	0x200072fc
    3b08:	e0001004 	.word	0xe0001004
    3b0c:	20007300 	.word	0x20007300

00003b10 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    3b10:	0100      	lsls	r0, r0, #4
    3b12:	4b0f      	ldr	r3, [pc, #60]	; (3b50 <digitalWrite.part.0+0x40>)
    3b14:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    3b16:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    3b18:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    3b1a:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    3b1c:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    3b1e:	4204      	tst	r4, r0
    3b20:	d005      	beq.n	3b2e <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    3b22:	b159      	cbz	r1, 3b3c <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    3b24:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3b28:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b2c:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3b2e:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    3b30:	b949      	cbnz	r1, 3b46 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3b32:	4a08      	ldr	r2, [pc, #32]	; (3b54 <digitalWrite.part.0+0x44>)
		}
	}
}
    3b34:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3b38:	601a      	str	r2, [r3, #0]
		}
	}
}
    3b3a:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    3b3c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3b40:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b44:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3b46:	4a04      	ldr	r2, [pc, #16]	; (3b58 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3b48:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3b4c:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3b4e:	4770      	bx	lr
    3b50:	200011ec 	.word	0x200011ec
    3b54:	00013038 	.word	0x00013038
    3b58:	0001f038 	.word	0x0001f038

00003b5c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    3b5c:	2827      	cmp	r0, #39	; 0x27
    3b5e:	d801      	bhi.n	3b64 <digitalWrite+0x8>
    3b60:	f7ff bfd6 	b.w	3b10 <digitalWrite.part.0>
    3b64:	4770      	bx	lr
    3b66:	bf00      	nop

00003b68 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3b68:	48a4      	ldr	r0, [pc, #656]	; (3dfc <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3b6a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3b6e:	4ba4      	ldr	r3, [pc, #656]	; (3e00 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3b70:	6f82      	ldr	r2, [r0, #120]	; 0x78
    3b72:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    3b76:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3b78:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    3b7a:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b7c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3b80:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b84:	4c9f      	ldr	r4, [pc, #636]	; (3e04 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3b86:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3b8a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3b8c:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b90:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3b92:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b94:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3b98:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3b9c:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3ba0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3ba4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3ba8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3bac:	b280      	uxth	r0, r0
    3bae:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3bb2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3bb6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3bba:	4b91      	ldr	r3, [pc, #580]	; (3e00 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    3bbc:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3bbe:	2500      	movs	r5, #0
    3bc0:	0140      	lsls	r0, r0, #5
    3bc2:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3bc4:	2904      	cmp	r1, #4
    3bc6:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3bc8:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3bcc:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    3bce:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3bd0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3bd2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3bd4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3bd6:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3bd8:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3bda:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3bdc:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3bde:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3be0:	d1e9      	bne.n	3bb6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3be2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3be6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3bea:	4b87      	ldr	r3, [pc, #540]	; (3e08 <pwm_init+0x2a0>)
    3bec:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3bf0:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3bf2:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3bf4:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3bf8:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3bfa:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3bfe:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c02:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3c06:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    3c0a:	b280      	uxth	r0, r0
    3c0c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3c10:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3c14:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3c18:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3c1c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3c20:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3c24:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3c28:	b280      	uxth	r0, r0
    3c2a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3c2e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3c32:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3c36:	4b74      	ldr	r3, [pc, #464]	; (3e08 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    3c38:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3c3a:	2500      	movs	r5, #0
    3c3c:	0140      	lsls	r0, r0, #5
    3c3e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3c40:	2904      	cmp	r1, #4
    3c42:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3c44:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3c46:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3c4a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3c4c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3c4e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3c50:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3c52:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3c54:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3c56:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3c58:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3c5a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3c5c:	d1e9      	bne.n	3c32 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c5e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3c62:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3c66:	4b69      	ldr	r3, [pc, #420]	; (3e0c <pwm_init+0x2a4>)
    3c68:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c6c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3c6e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3c70:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3c74:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c76:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3c7a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c7e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3c82:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    3c86:	b280      	uxth	r0, r0
    3c88:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3c8c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3c90:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3c94:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3c98:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3c9c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3ca0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3ca4:	b280      	uxth	r0, r0
    3ca6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3caa:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3cae:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3cb2:	4b56      	ldr	r3, [pc, #344]	; (3e0c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    3cb4:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3cb6:	2500      	movs	r5, #0
    3cb8:	0140      	lsls	r0, r0, #5
    3cba:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3cbc:	2904      	cmp	r1, #4
    3cbe:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3cc0:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3cc2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3cc6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3cc8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3cca:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3ccc:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3cce:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3cd0:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3cd2:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3cd4:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3cd6:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3cd8:	d1e9      	bne.n	3cae <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3cda:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3cde:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3ce2:	4b4b      	ldr	r3, [pc, #300]	; (3e10 <pwm_init+0x2a8>)
    3ce4:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3ce8:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3cea:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3cec:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3cf0:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3cf2:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3cf6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3cfa:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3cfe:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    3d02:	b280      	uxth	r0, r0
    3d04:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3d08:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3d0c:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3d10:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3d14:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3d18:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3d1c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3d20:	b280      	uxth	r0, r0
    3d22:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3d26:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3d2a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3d2e:	4b38      	ldr	r3, [pc, #224]	; (3e10 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    3d30:	3101      	adds	r1, #1
    3d32:	0140      	lsls	r0, r0, #5
    3d34:	461c      	mov	r4, r3
    3d36:	2904      	cmp	r1, #4
    3d38:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3d3a:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3d3c:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3d40:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3d42:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3d44:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3d46:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3d48:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    3d4a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3d4c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3d4e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3d50:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3d52:	d1ea      	bne.n	3d2a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3d54:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3d58:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d5a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3d5c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3d60:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3d62:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3d66:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3d68:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3d6c:	433b      	orrs	r3, r7
    3d6e:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3d72:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    3d76:	b29b      	uxth	r3, r3
    3d78:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    3d7c:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3d80:	0150      	lsls	r0, r2, #5
    3d82:	4b24      	ldr	r3, [pc, #144]	; (3e14 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d84:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3d86:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d88:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3d8a:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3d8c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3d8e:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3d90:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3d92:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3d96:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3d98:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3d9a:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d9c:	d1f0      	bne.n	3d80 <pwm_init+0x218>
    3d9e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3da0:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3da2:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3da6:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3daa:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3dac:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3db0:	0150      	lsls	r0, r2, #5
    3db2:	4b19      	ldr	r3, [pc, #100]	; (3e18 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3db4:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3db6:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3db8:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3dba:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3dbc:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3dbe:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3dc0:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3dc2:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3dc4:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3dc6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3dc8:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3dca:	d1f1      	bne.n	3db0 <pwm_init+0x248>
    3dcc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3dce:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3dd0:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3dd4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3dd8:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3dda:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3dde:	0150      	lsls	r0, r2, #5
    3de0:	4b0e      	ldr	r3, [pc, #56]	; (3e1c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3de2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3de4:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3de6:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3de8:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3dea:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3dec:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3dee:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3df0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3df2:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3df4:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3df6:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3df8:	d1f1      	bne.n	3dde <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    3dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dfc:	400fc000 	.word	0x400fc000
    3e00:	403dc000 	.word	0x403dc000
    3e04:	fc030000 	.word	0xfc030000
    3e08:	403e0000 	.word	0x403e0000
    3e0c:	403e4000 	.word	0x403e4000
    3e10:	403e8000 	.word	0x403e8000
    3e14:	401dc000 	.word	0x401dc000
    3e18:	401e0000 	.word	0x401e0000
    3e1c:	401e4000 	.word	0x401e4000

00003e20 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    3e20:	2004      	movs	r0, #4
    3e22:	4671      	mov	r1, lr
    3e24:	4208      	tst	r0, r1
    3e26:	d003      	beq.n	3e30 <_MSP>
    3e28:	f3ef 8009 	mrs	r0, PSP
    3e2c:	f000 b808 	b.w	3e40 <HardFault_HandlerC>

00003e30 <_MSP>:
    3e30:	f3ef 8008 	mrs	r0, MSP
    3e34:	f000 b804 	b.w	3e40 <HardFault_HandlerC>

00003e38 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop

00003e3c <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    3e3c:	4770      	bx	lr
    3e3e:	bf00      	nop

00003e40 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3e40:	4b1b      	ldr	r3, [pc, #108]	; (3eb0 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    3e42:	2105      	movs	r1, #5
    3e44:	4a1b      	ldr	r2, [pc, #108]	; (3eb4 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    3e46:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    3e48:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    3e4a:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    3e4e:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    3e50:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    3e54:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3e56:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3e58:	4c17      	ldr	r4, [pc, #92]	; (3eb8 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3e5a:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3e5c:	4817      	ldr	r0, [pc, #92]	; (3ebc <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3e5e:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    3e60:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3e64:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    3e68:	6823      	ldr	r3, [r4, #0]
    3e6a:	4283      	cmp	r3, r0
    3e6c:	d902      	bls.n	3e74 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    3e6e:	4814      	ldr	r0, [pc, #80]	; (3ec0 <HardFault_HandlerC+0x80>)
    3e70:	f7ff fc54 	bl	371c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    3e74:	4d0e      	ldr	r5, [pc, #56]	; (3eb0 <HardFault_HandlerC+0x70>)
    3e76:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    3e78:	2000      	movs	r0, #0
    3e7a:	4a12      	ldr	r2, [pc, #72]	; (3ec4 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3e7c:	4912      	ldr	r1, [pc, #72]	; (3ec8 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    3e7e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    3e82:	9001      	str	r0, [sp, #4]
    3e84:	9b01      	ldr	r3, [sp, #4]
    3e86:	4293      	cmp	r3, r2
    3e88:	d805      	bhi.n	3e96 <HardFault_HandlerC+0x56>
    3e8a:	9b01      	ldr	r3, [sp, #4]
    3e8c:	3301      	adds	r3, #1
    3e8e:	9301      	str	r3, [sp, #4]
    3e90:	9b01      	ldr	r3, [sp, #4]
    3e92:	4293      	cmp	r3, r2
    3e94:	d9f9      	bls.n	3e8a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3e96:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3e9a:	9001      	str	r0, [sp, #4]
    3e9c:	9b01      	ldr	r3, [sp, #4]
    3e9e:	428b      	cmp	r3, r1
    3ea0:	d8ed      	bhi.n	3e7e <HardFault_HandlerC+0x3e>
    3ea2:	9b01      	ldr	r3, [sp, #4]
    3ea4:	3301      	adds	r3, #1
    3ea6:	9301      	str	r3, [sp, #4]
    3ea8:	9b01      	ldr	r3, [sp, #4]
    3eaa:	428b      	cmp	r3, r1
    3eac:	d9f9      	bls.n	3ea2 <HardFault_HandlerC+0x62>
    3eae:	e7e6      	b.n	3e7e <HardFault_HandlerC+0x3e>
    3eb0:	401bc000 	.word	0x401bc000
    3eb4:	401f8000 	.word	0x401f8000
    3eb8:	20004de4 	.word	0x20004de4
    3ebc:	23c345ff 	.word	0x23c345ff
    3ec0:	11e1a300 	.word	0x11e1a300
    3ec4:	000f423f 	.word	0x000f423f
    3ec8:	0089543f 	.word	0x0089543f

00003ecc <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    3ecc:	4a09      	ldr	r2, [pc, #36]	; (3ef4 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    3ece:	b508      	push	{r3, lr}
        char *prev = __brkval;
    3ed0:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    3ed2:	b120      	cbz	r0, 3ede <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    3ed4:	4418      	add	r0, r3
    3ed6:	4908      	ldr	r1, [pc, #32]	; (3ef8 <_sbrk+0x2c>)
    3ed8:	4288      	cmp	r0, r1
    3eda:	d802      	bhi.n	3ee2 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    3edc:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    3ede:	4618      	mov	r0, r3
    3ee0:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    3ee2:	f002 f829 	bl	5f38 <__errno>
    3ee6:	220c      	movs	r2, #12
                        return (void *)-1;
    3ee8:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    3eec:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    3eee:	4618      	mov	r0, r3
    3ef0:	bd08      	pop	{r3, pc}
    3ef2:	bf00      	nop
    3ef4:	20004de8 	.word	0x20004de8
    3ef8:	20280000 	.word	0x20280000

00003efc <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    3efc:	bf30      	wfi
    3efe:	e7fd      	b.n	3efc <__cxa_pure_virtual>

00003f00 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    3f00:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    3f02:	4a06      	ldr	r2, [pc, #24]	; (3f1c <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    3f04:	2107      	movs	r1, #7
    3f06:	4b06      	ldr	r3, [pc, #24]	; (3f20 <Panic_Temp_isr+0x20>)
    3f08:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    3f0a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    3f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3f10:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    3f12:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    3f16:	bf30      	wfi
    3f18:	e7fd      	b.n	3f16 <Panic_Temp_isr+0x16>
    3f1a:	bf00      	nop
    3f1c:	400d4000 	.word	0x400d4000
    3f20:	400ac000 	.word	0x400ac000

00003f24 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3f24:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    3f26:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3f28:	b11b      	cbz	r3, 3f32 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    3f2a:	6853      	ldr	r3, [r2, #4]
    3f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3f30:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    3f32:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    3f34:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    3f36:	b1dc      	cbz	r4, 3f70 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    3f38:	4b14      	ldr	r3, [pc, #80]	; (3f8c <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    3f3a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    3f3c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    3f40:	420c      	tst	r4, r1
    3f42:	d11f      	bne.n	3f84 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    3f44:	4d12      	ldr	r5, [pc, #72]	; (3f90 <schedule_transfer+0x6c>)
    3f46:	682f      	ldr	r7, [r5, #0]
    3f48:	e004      	b.n	3f54 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3f4a:	682c      	ldr	r4, [r5, #0]
    3f4c:	1be4      	subs	r4, r4, r7
    3f4e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    3f52:	d20b      	bcs.n	3f6c <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    3f54:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3f58:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    3f5c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    3f60:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3f64:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3f68:	0464      	lsls	r4, r4, #17
    3f6a:	d5ee      	bpl.n	3f4a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    3f6c:	4231      	tst	r1, r6
    3f6e:	d109      	bne.n	3f84 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    3f70:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    3f72:	4c06      	ldr	r4, [pc, #24]	; (3f8c <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    3f74:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    3f76:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    3f78:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3f7c:	4319      	orrs	r1, r3
    3f7e:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    3f82:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    3f84:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3f86:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    3f88:	bcf0      	pop	{r4, r5, r6, r7}
    3f8a:	4770      	bx	lr
    3f8c:	402e0000 	.word	0x402e0000
    3f90:	e0001004 	.word	0xe0001004

00003f94 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    3f94:	b570      	push	{r4, r5, r6, lr}
    3f96:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3f98:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    3f9a:	b190      	cbz	r0, 3fc2 <run_callbacks+0x2e>
    3f9c:	4602      	mov	r2, r0
    3f9e:	2400      	movs	r4, #0
    3fa0:	e003      	b.n	3faa <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3fa2:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    3fa4:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    3fa6:	2a01      	cmp	r2, #1
    3fa8:	d00c      	beq.n	3fc4 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    3faa:	6853      	ldr	r3, [r2, #4]
    3fac:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3fb0:	d0f7      	beq.n	3fa2 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    3fb2:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3fb4:	b12c      	cbz	r4, 3fc2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    3fb6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    3fb8:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    3fba:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3fbc:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    3fbe:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3fc0:	d1f9      	bne.n	3fb6 <run_callbacks+0x22>
    3fc2:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    3fc4:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    3fc6:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    3fc8:	e7f4      	b.n	3fb4 <run_callbacks+0x20>
    3fca:	bf00      	nop

00003fcc <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    3fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    3fce:	b9e1      	cbnz	r1, 400a <endpoint0_transmit.constprop.1+0x3e>
    3fd0:	4c21      	ldr	r4, [pc, #132]	; (4058 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3fd2:	4922      	ldr	r1, [pc, #136]	; (405c <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3fd4:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3fd6:	4b22      	ldr	r3, [pc, #136]	; (4060 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3fd8:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3fda:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3fde:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3fe0:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    3fe2:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3fe4:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3fe6:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3fe8:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3fea:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3fee:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3ff2:	4d1c      	ldr	r5, [pc, #112]	; (4064 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3ff4:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3ff8:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3ffa:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3ffe:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    4000:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4004:	2b00      	cmp	r3, #0
    4006:	d1fb      	bne.n	4000 <endpoint0_transmit.constprop.1+0x34>
}
    4008:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    400a:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    400c:	4b16      	ldr	r3, [pc, #88]	; (4068 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    400e:	4d14      	ldr	r5, [pc, #80]	; (4060 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    4010:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    4012:	4c11      	ldr	r4, [pc, #68]	; (4058 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4014:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    4018:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    401a:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    401c:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    401e:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    4022:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4024:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    4028:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    402a:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    402e:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4032:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    4036:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    4038:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    403a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    403e:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4042:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4046:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4048:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    404a:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    404e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4052:	2b00      	cmp	r3, #0
    4054:	d1fb      	bne.n	404e <endpoint0_transmit.constprop.1+0x82>
    4056:	e7bc      	b.n	3fd2 <endpoint0_transmit.constprop.1+0x6>
    4058:	20009000 	.word	0x20009000
    405c:	20008020 	.word	0x20008020
    4060:	402e0000 	.word	0x402e0000
    4064:	2000732c 	.word	0x2000732c
    4068:	20008000 	.word	0x20008000

0000406c <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    4070:	4cac      	ldr	r4, [pc, #688]	; (4324 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    4072:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    4074:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    4078:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    407c:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    4080:	d05e      	beq.n	4140 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    4082:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4086:	2b00      	cmp	r3, #0
    4088:	d055      	beq.n	4136 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    408a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    408e:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 434c <isr+0x2e0>
    4092:	4ea5      	ldr	r6, [pc, #660]	; (4328 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    4094:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4096:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    4098:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    409c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    409e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    40a0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    40a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    40a8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    40ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    40b0:	049f      	lsls	r7, r3, #18
    40b2:	d5f5      	bpl.n	40a0 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    40b4:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    40b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    40bc:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    40c0:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    40c4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    40c8:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    40cc:	d1fa      	bne.n	40c4 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    40ce:	b281      	uxth	r1, r0
    40d0:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    40d4:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    40d8:	42b9      	cmp	r1, r7
    40da:	f200 80b4 	bhi.w	4246 <isr+0x1da>
    40de:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    40e2:	f080 81e9 	bcs.w	44b8 <isr+0x44c>
    40e6:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    40ea:	f000 816b 	beq.w	43c4 <isr+0x358>
    40ee:	f200 80f0 	bhi.w	42d2 <isr+0x266>
    40f2:	2980      	cmp	r1, #128	; 0x80
    40f4:	f000 8159 	beq.w	43aa <isr+0x33e>
    40f8:	2982      	cmp	r1, #130	; 0x82
    40fa:	f040 80e2 	bne.w	42c2 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    40fe:	b292      	uxth	r2, r2
    4100:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    4104:	2907      	cmp	r1, #7
    4106:	f200 80dc 	bhi.w	42c2 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    410a:	0089      	lsls	r1, r1, #2
    410c:	4887      	ldr	r0, [pc, #540]	; (432c <isr+0x2c0>)
		reply_buffer[0] = 0;
    410e:	4f88      	ldr	r7, [pc, #544]	; (4330 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    4110:	4408      	add	r0, r1
    4112:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4114:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    4116:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    4118:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    411a:	f140 820c 	bpl.w	4536 <isr+0x4ca>
    411e:	03ca      	lsls	r2, r1, #15
    4120:	d501      	bpl.n	4126 <isr+0xba>
			reply_buffer[0] = 1;
    4122:	2301      	movs	r3, #1
    4124:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    4126:	2102      	movs	r1, #2
    4128:	4881      	ldr	r0, [pc, #516]	; (4330 <isr+0x2c4>)
    412a:	f7ff ff4f 	bl	3fcc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    412e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4132:	2b00      	cmp	r3, #0
    4134:	d1b0      	bne.n	4098 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    4136:	4a7b      	ldr	r2, [pc, #492]	; (4324 <isr+0x2b8>)
    4138:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    413c:	2b00      	cmp	r3, #0
    413e:	d150      	bne.n	41e2 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    4140:	f018 0f40 	tst.w	r8, #64	; 0x40
    4144:	d018      	beq.n	4178 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    4146:	4b77      	ldr	r3, [pc, #476]	; (4324 <isr+0x2b8>)
    4148:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    414c:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    414e:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    4152:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    4156:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    415a:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    415e:	4b71      	ldr	r3, [pc, #452]	; (4324 <isr+0x2b8>)
    4160:	2c00      	cmp	r4, #0
    4162:	d1fa      	bne.n	415a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    4164:	f04f 32ff 	mov.w	r2, #4294967295
    4168:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    416c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    4170:	f000 fd1e 	bl	4bb0 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    4174:	4b6f      	ldr	r3, [pc, #444]	; (4334 <isr+0x2c8>)
    4176:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    4178:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    417c:	d003      	beq.n	4186 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    417e:	4b6e      	ldr	r3, [pc, #440]	; (4338 <isr+0x2cc>)
    4180:	681b      	ldr	r3, [r3, #0]
    4182:	b103      	cbz	r3, 4186 <isr+0x11a>
    4184:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    4186:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    418a:	d003      	beq.n	4194 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    418c:	4b6b      	ldr	r3, [pc, #428]	; (433c <isr+0x2d0>)
    418e:	681b      	ldr	r3, [r3, #0]
    4190:	b103      	cbz	r3, 4194 <isr+0x128>
    4192:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    4194:	f018 0f04 	tst.w	r8, #4
    4198:	d008      	beq.n	41ac <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    419a:	4b62      	ldr	r3, [pc, #392]	; (4324 <isr+0x2b8>)
    419c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    41a0:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    41a4:	d04c      	beq.n	4240 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    41a6:	4b66      	ldr	r3, [pc, #408]	; (4340 <isr+0x2d4>)
    41a8:	2201      	movs	r2, #1
    41aa:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    41ac:	4b5d      	ldr	r3, [pc, #372]	; (4324 <isr+0x2b8>)
    41ae:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    41b2:	0612      	lsls	r2, r2, #24
    41b4:	d512      	bpl.n	41dc <isr+0x170>
    41b6:	f018 0f80 	tst.w	r8, #128	; 0x80
    41ba:	d00f      	beq.n	41dc <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    41bc:	4961      	ldr	r1, [pc, #388]	; (4344 <isr+0x2d8>)
    41be:	780a      	ldrb	r2, [r1, #0]
    41c0:	b162      	cbz	r2, 41dc <isr+0x170>
			if (--usb_reboot_timer == 0) {
    41c2:	3a01      	subs	r2, #1
    41c4:	b2d2      	uxtb	r2, r2
    41c6:	700a      	strb	r2, [r1, #0]
    41c8:	b942      	cbnz	r2, 41dc <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    41ca:	495f      	ldr	r1, [pc, #380]	; (4348 <isr+0x2dc>)
    41cc:	780a      	ldrb	r2, [r1, #0]
    41ce:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    41d2:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    41d4:	2a00      	cmp	r2, #0
    41d6:	f000 8232 	beq.w	463e <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    41da:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    41dc:	b003      	add	sp, #12
    41de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    41e2:	495a      	ldr	r1, [pc, #360]	; (434c <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    41e4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    41e8:	6808      	ldr	r0, [r1, #0]
    41ea:	4203      	tst	r3, r0
    41ec:	f040 81e6 	bne.w	45bc <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    41f0:	4a50      	ldr	r2, [pc, #320]	; (4334 <isr+0x2c8>)
    41f2:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    41f4:	401d      	ands	r5, r3
    41f6:	d0a3      	beq.n	4140 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    41f8:	0c2f      	lsrs	r7, r5, #16
    41fa:	d00f      	beq.n	421c <isr+0x1b0>
    41fc:	4e4a      	ldr	r6, [pc, #296]	; (4328 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    41fe:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    4202:	fa97 f4a7 	rbit	r4, r7
    4206:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    420a:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    420e:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4212:	3040      	adds	r0, #64	; 0x40
    4214:	f7ff febe 	bl	3f94 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    4218:	43a7      	bics	r7, r4
    421a:	d1f2      	bne.n	4202 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    421c:	b2ad      	uxth	r5, r5
				while(rx) {
    421e:	2d00      	cmp	r5, #0
    4220:	d08e      	beq.n	4140 <isr+0xd4>
    4222:	4e41      	ldr	r6, [pc, #260]	; (4328 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    4224:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    4226:	fa95 f4a5 	rbit	r4, r5
    422a:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    422e:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    4232:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    4236:	f7ff fead 	bl	3f94 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    423a:	43a5      	bics	r5, r4
    423c:	d1f3      	bne.n	4226 <isr+0x1ba>
    423e:	e77f      	b.n	4140 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    4240:	4a3f      	ldr	r2, [pc, #252]	; (4340 <isr+0x2d4>)
    4242:	7013      	strb	r3, [r2, #0]
    4244:	e7b2      	b.n	41ac <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    4246:	f242 0721 	movw	r7, #8225	; 0x2021
    424a:	42b9      	cmp	r1, r7
    424c:	d035      	beq.n	42ba <isr+0x24e>
    424e:	f200 8089 	bhi.w	4364 <isr+0x2f8>
    4252:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    4256:	f000 8121 	beq.w	449c <isr+0x430>
    425a:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    425e:	d130      	bne.n	42c2 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    4260:	f3c0 4007 	ubfx	r0, r0, #16, #8
    4264:	4a3a      	ldr	r2, [pc, #232]	; (4350 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    4266:	493b      	ldr	r1, [pc, #236]	; (4354 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    4268:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    426a:	4f3b      	ldr	r7, [pc, #236]	; (4358 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    426c:	4a3b      	ldr	r2, [pc, #236]	; (435c <isr+0x2f0>)
    426e:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    4270:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    4274:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    4278:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    427c:	f000 fc9a 	bl	4bb4 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4280:	4a37      	ldr	r2, [pc, #220]	; (4360 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4282:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4284:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4286:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4288:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    428a:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    428c:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    428e:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4290:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4294:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4298:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    429a:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    429e:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    42a2:	4a2a      	ldr	r2, [pc, #168]	; (434c <isr+0x2e0>)
    42a4:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    42a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    42aa:	2b00      	cmp	r3, #0
    42ac:	d1fb      	bne.n	42a6 <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    42ae:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    42b2:	2b00      	cmp	r3, #0
    42b4:	f47f aef0 	bne.w	4098 <isr+0x2c>
    42b8:	e73d      	b.n	4136 <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    42ba:	0c11      	lsrs	r1, r2, #16
    42bc:	2907      	cmp	r1, #7
    42be:	f000 813e 	beq.w	453e <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    42c2:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    42c6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    42ca:	2b00      	cmp	r3, #0
    42cc:	f47f aee4 	bne.w	4098 <isr+0x2c>
    42d0:	e731      	b.n	4136 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    42d2:	f240 3702 	movw	r7, #770	; 0x302
    42d6:	42b9      	cmp	r1, r7
    42d8:	f000 80b0 	beq.w	443c <isr+0x3d0>
    42dc:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    42e0:	d1ef      	bne.n	42c2 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    42e2:	4a1f      	ldr	r2, [pc, #124]	; (4360 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    42e4:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    42e6:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    42e8:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    42ea:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    42ec:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    42ee:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    42f0:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    42f4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    42f8:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    42fa:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    42fe:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    4302:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4306:	2b00      	cmp	r3, #0
    4308:	d1fb      	bne.n	4302 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    430a:	0c03      	lsrs	r3, r0, #16
    430c:	065b      	lsls	r3, r3, #25
    430e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4312:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4316:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    431a:	2b00      	cmp	r3, #0
    431c:	f47f aebc 	bne.w	4098 <isr+0x2c>
    4320:	e709      	b.n	4136 <isr+0xca>
    4322:	bf00      	nop
    4324:	402e0000 	.word	0x402e0000
    4328:	20009000 	.word	0x20009000
    432c:	402e01c0 	.word	0x402e01c0
    4330:	20007340 	.word	0x20007340
    4334:	2000731c 	.word	0x2000731c
    4338:	20007318 	.word	0x20007318
    433c:	20007324 	.word	0x20007324
    4340:	20007328 	.word	0x20007328
    4344:	20007330 	.word	0x20007330
    4348:	20007320 	.word	0x20007320
    434c:	2000732c 	.word	0x2000732c
    4350:	20007350 	.word	0x20007350
    4354:	000200c8 	.word	0x000200c8
    4358:	00cc0002 	.word	0x00cc0002
    435c:	00c80002 	.word	0x00c80002
    4360:	20008020 	.word	0x20008020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    4364:	f242 2321 	movw	r3, #8737	; 0x2221
    4368:	4299      	cmp	r1, r3
    436a:	d05b      	beq.n	4424 <isr+0x3b8>
    436c:	f242 3321 	movw	r3, #8993	; 0x2321
    4370:	4299      	cmp	r1, r3
    4372:	d1a6      	bne.n	42c2 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4374:	4bb5      	ldr	r3, [pc, #724]	; (464c <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4376:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    4378:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    437a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    437c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    437e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4380:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4382:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4384:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4388:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    438c:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    438e:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    4392:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    4396:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    439a:	2b00      	cmp	r3, #0
    439c:	d1fb      	bne.n	4396 <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    439e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    43a2:	2b00      	cmp	r3, #0
    43a4:	f47f ae78 	bne.w	4098 <isr+0x2c>
    43a8:	e6c5      	b.n	4136 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    43aa:	4aa9      	ldr	r2, [pc, #676]	; (4650 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    43ac:	2102      	movs	r1, #2
    43ae:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    43b0:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    43b2:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    43b4:	f7ff fe0a 	bl	3fcc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    43b8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    43bc:	2b00      	cmp	r3, #0
    43be:	f47f ae6b 	bne.w	4098 <isr+0x2c>
    43c2:	e6b8      	b.n	4136 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    43c4:	b292      	uxth	r2, r2
    43c6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    43ca:	2b07      	cmp	r3, #7
    43cc:	f63f af79 	bhi.w	42c2 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    43d0:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    43d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43d8:	4a9e      	ldr	r2, [pc, #632]	; (4654 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    43da:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    43de:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    43e2:	441a      	add	r2, r3
    43e4:	6813      	ldr	r3, [r2, #0]
    43e6:	bf14      	ite	ne
    43e8:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    43ec:	f023 0301 	biceq.w	r3, r3, #1
    43f0:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    43f2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    43f4:	4b95      	ldr	r3, [pc, #596]	; (464c <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    43f6:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    43f8:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    43fa:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    43fc:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    43fe:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4402:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4406:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    4408:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    440c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    4410:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4414:	2b00      	cmp	r3, #0
    4416:	d1fb      	bne.n	4410 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4418:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    441c:	2b00      	cmp	r3, #0
    441e:	f47f ae3b 	bne.w	4098 <isr+0x2c>
    4422:	e688      	b.n	4136 <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    4424:	b292      	uxth	r2, r2
    4426:	2a00      	cmp	r2, #0
    4428:	d1a4      	bne.n	4374 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    442a:	4b8b      	ldr	r3, [pc, #556]	; (4658 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    442c:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4430:	4a8a      	ldr	r2, [pc, #552]	; (465c <isr+0x5f0>)
    4432:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    4434:	4b8a      	ldr	r3, [pc, #552]	; (4660 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4436:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    4438:	7018      	strb	r0, [r3, #0]
    443a:	e79b      	b.n	4374 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    443c:	b292      	uxth	r2, r2
    443e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    4442:	2b07      	cmp	r3, #7
    4444:	f63f af3d 	bhi.w	42c2 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    4448:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    444c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4450:	4a80      	ldr	r2, [pc, #512]	; (4654 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4452:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4456:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    445a:	441a      	add	r2, r3
    445c:	6813      	ldr	r3, [r2, #0]
    445e:	bf14      	ite	ne
    4460:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    4464:	f043 0301 	orreq.w	r3, r3, #1
    4468:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    446a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    446c:	4b77      	ldr	r3, [pc, #476]	; (464c <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    446e:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4470:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4472:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4474:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4476:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    447a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    447e:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    4480:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    4484:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    4488:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    448c:	2b00      	cmp	r3, #0
    448e:	d1fb      	bne.n	4488 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4490:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4494:	2b00      	cmp	r3, #0
    4496:	f47f adff 	bne.w	4098 <isr+0x2c>
    449a:	e64c      	b.n	4136 <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    449c:	4a71      	ldr	r2, [pc, #452]	; (4664 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    449e:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    44a0:	4b6b      	ldr	r3, [pc, #428]	; (4650 <isr+0x5e4>)
    44a2:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    44a4:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    44a6:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    44a8:	f7ff fd90 	bl	3fcc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    44ac:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    44b0:	2b00      	cmp	r3, #0
    44b2:	f47f adf1 	bne.w	4098 <isr+0x2c>
    44b6:	e63e      	b.n	4136 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    44b8:	4b6b      	ldr	r3, [pc, #428]	; (4668 <isr+0x5fc>)
    44ba:	6859      	ldr	r1, [r3, #4]
    44bc:	2900      	cmp	r1, #0
    44be:	f43f af00 	beq.w	42c2 <isr+0x256>
    44c2:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    44c4:	fa1f fe82 	uxth.w	lr, r2
    44c8:	e004      	b.n	44d4 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    44ca:	330c      	adds	r3, #12
    44cc:	6859      	ldr	r1, [r3, #4]
    44ce:	2900      	cmp	r1, #0
    44d0:	f43f aef7 	beq.w	42c2 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    44d4:	881f      	ldrh	r7, [r3, #0]
    44d6:	4287      	cmp	r7, r0
    44d8:	d1f7      	bne.n	44ca <isr+0x45e>
    44da:	885f      	ldrh	r7, [r3, #2]
    44dc:	4577      	cmp	r7, lr
    44de:	d1f4      	bne.n	44ca <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    44e0:	0a07      	lsrs	r7, r0, #8
    44e2:	2f03      	cmp	r7, #3
    44e4:	f000 80e9 	beq.w	46ba <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    44e8:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    44ea:	0c12      	lsrs	r2, r2, #16
    44ec:	4293      	cmp	r3, r2
    44ee:	bf28      	it	cs
    44f0:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    44f2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    44f6:	f000 80d1 	beq.w	469c <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    44fa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    44fe:	f000 808b 	beq.w	4618 <isr+0x5ac>
    4502:	4f5a      	ldr	r7, [pc, #360]	; (466c <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    4504:	461a      	mov	r2, r3
    4506:	9301      	str	r3, [sp, #4]
    4508:	4638      	mov	r0, r7
    450a:	f7ff f86d 	bl	35e8 <memcpy>
    450e:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4510:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4514:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    4516:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    451a:	4955      	ldr	r1, [pc, #340]	; (4670 <isr+0x604>)
    451c:	600a      	str	r2, [r1, #0]
		location += 32;
    451e:	3220      	adds	r2, #32
	} while (location < end_addr);
    4520:	4297      	cmp	r7, r2
    4522:	d8fa      	bhi.n	451a <isr+0x4ae>
	asm("dsb");
    4524:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4528:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    452c:	484f      	ldr	r0, [pc, #316]	; (466c <isr+0x600>)
    452e:	4619      	mov	r1, r3
    4530:	f7ff fd4c 	bl	3fcc <endpoint0_transmit.constprop.1>
    4534:	e5fb      	b.n	412e <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4536:	07cb      	lsls	r3, r1, #31
    4538:	f57f adf5 	bpl.w	4126 <isr+0xba>
    453c:	e5f1      	b.n	4122 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    453e:	4f4d      	ldr	r7, [pc, #308]	; (4674 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    4540:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    4544:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4546:	494c      	ldr	r1, [pc, #304]	; (4678 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    4548:	4b4c      	ldr	r3, [pc, #304]	; (467c <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    454a:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    454c:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4550:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    4552:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    4554:	494a      	ldr	r1, [pc, #296]	; (4680 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    4556:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    455a:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    455c:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    4560:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    4564:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4566:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    456a:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    456e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    4572:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4576:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4578:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    457c:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    457e:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    4580:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4584:	2b00      	cmp	r3, #0
    4586:	d1fb      	bne.n	4580 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    4588:	4a30      	ldr	r2, [pc, #192]	; (464c <isr+0x5e0>)
    458a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    458c:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4590:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4592:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4594:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4598:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    459a:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    459c:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    45a0:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    45a4:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    45a6:	ea41 0300 	orr.w	r3, r1, r0
    45aa:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    45ae:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    45b2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    45b6:	2b00      	cmp	r3, #0
    45b8:	d1fb      	bne.n	45b2 <isr+0x546>
    45ba:	e5b8      	b.n	412e <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    45bc:	482d      	ldr	r0, [pc, #180]	; (4674 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    45be:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    45c2:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    45c4:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    45c6:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    45c8:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    45ca:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    45cc:	f47f ae10 	bne.w	41f0 <isr+0x184>
    45d0:	b281      	uxth	r1, r0
    45d2:	2900      	cmp	r1, #0
    45d4:	f47f ae0c 	bne.w	41f0 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    45d8:	4929      	ldr	r1, [pc, #164]	; (4680 <isr+0x614>)
    45da:	4c2a      	ldr	r4, [pc, #168]	; (4684 <isr+0x618>)
    45dc:	c903      	ldmia	r1, {r0, r1}
    45de:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    45e0:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    45e2:	6020      	str	r0, [r4, #0]
    45e4:	80a1      	strh	r1, [r4, #4]
    45e6:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    45e8:	f47f ae02 	bne.w	41f0 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    45ec:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    45ee:	4826      	ldr	r0, [pc, #152]	; (4688 <isr+0x61c>)
    45f0:	7801      	ldrb	r1, [r0, #0]
    45f2:	f041 0104 	orr.w	r1, r1, #4
    45f6:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    45f8:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    45fc:	0608      	lsls	r0, r1, #24
    45fe:	d406      	bmi.n	460e <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4600:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4604:	2080      	movs	r0, #128	; 0x80
    4606:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    460a:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    460e:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    4610:	4a1e      	ldr	r2, [pc, #120]	; (468c <isr+0x620>)
    4612:	2150      	movs	r1, #80	; 0x50
    4614:	7011      	strb	r1, [r2, #0]
    4616:	e5eb      	b.n	41f0 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    4618:	481d      	ldr	r0, [pc, #116]	; (4690 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    461a:	461a      	mov	r2, r3
    461c:	4f13      	ldr	r7, [pc, #76]	; (466c <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    461e:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    4622:	491c      	ldr	r1, [pc, #112]	; (4694 <isr+0x628>)
    4624:	481c      	ldr	r0, [pc, #112]	; (4698 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    4626:	9301      	str	r3, [sp, #4]
    4628:	f1be 0f00 	cmp.w	lr, #0
    462c:	bf08      	it	eq
    462e:	4601      	moveq	r1, r0
    4630:	4638      	mov	r0, r7
    4632:	f7fe ffd9 	bl	35e8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    4636:	2207      	movs	r2, #7
    4638:	9b01      	ldr	r3, [sp, #4]
    463a:	707a      	strb	r2, [r7, #1]
    463c:	e768      	b.n	4510 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    463e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    4642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4646:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    464a:	e5c6      	b.n	41da <isr+0x16e>
    464c:	20008020 	.word	0x20008020
    4650:	20007340 	.word	0x20007340
    4654:	402e01c0 	.word	0x402e01c0
    4658:	20007304 	.word	0x20007304
    465c:	20009288 	.word	0x20009288
    4660:	200074a8 	.word	0x200074a8
    4664:	20007350 	.word	0x20007350
    4668:	2000146c 	.word	0x2000146c
    466c:	20201040 	.word	0x20201040
    4670:	e000ef70 	.word	0xe000ef70
    4674:	20007338 	.word	0x20007338
    4678:	00070080 	.word	0x00070080
    467c:	20008000 	.word	0x20008000
    4680:	20007348 	.word	0x20007348
    4684:	20009280 	.word	0x20009280
    4688:	20007320 	.word	0x20007320
    468c:	20007330 	.word	0x20007330
    4690:	20007328 	.word	0x20007328
    4694:	60001850 	.word	0x60001850
    4698:	60001894 	.word	0x60001894

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    469c:	480a      	ldr	r0, [pc, #40]	; (46c8 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    469e:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    46a0:	490a      	ldr	r1, [pc, #40]	; (46cc <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    46a2:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    46a4:	480a      	ldr	r0, [pc, #40]	; (46d0 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    46a6:	9301      	str	r3, [sp, #4]
    46a8:	2f00      	cmp	r7, #0
    46aa:	bf08      	it	eq
    46ac:	4601      	moveq	r1, r0
    46ae:	4809      	ldr	r0, [pc, #36]	; (46d4 <isr+0x668>)
    46b0:	f7fe ff9a 	bl	35e8 <memcpy>
    46b4:	4f07      	ldr	r7, [pc, #28]	; (46d4 <isr+0x668>)
    46b6:	9b01      	ldr	r3, [sp, #4]
    46b8:	e72a      	b.n	4510 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    46ba:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    46bc:	780b      	ldrb	r3, [r1, #0]
    46be:	4293      	cmp	r3, r2
    46c0:	bf28      	it	cs
    46c2:	4613      	movcs	r3, r2
    46c4:	e719      	b.n	44fa <isr+0x48e>
    46c6:	bf00      	nop
    46c8:	20007328 	.word	0x20007328
    46cc:	60001894 	.word	0x60001894
    46d0:	60001850 	.word	0x60001850
    46d4:	20201040 	.word	0x20201040

000046d8 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    46d8:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    46da:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    46de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    46e2:	bf14      	ite	ne
    46e4:	2700      	movne	r7, #0
    46e6:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    46ea:	2a02      	cmp	r2, #2
    46ec:	d901      	bls.n	46f2 <usb_config_rx+0x1a>
    46ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    46f2:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    46f6:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4738 <usb_config_rx+0x60>
    46fa:	460d      	mov	r5, r1
    46fc:	4604      	mov	r4, r0
    46fe:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    4702:	2100      	movs	r1, #0
    4704:	2240      	movs	r2, #64	; 0x40
    4706:	4698      	mov	r8, r3
    4708:	4630      	mov	r0, r6
    470a:	f001 ff03 	bl	6514 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    470e:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    4710:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    4714:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    4718:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    471c:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    471e:	f1b8 0f00 	cmp.w	r8, #0
    4722:	d0e4      	beq.n	46ee <usb_config_rx+0x16>
    4724:	4b03      	ldr	r3, [pc, #12]	; (4734 <usb_config_rx+0x5c>)
    4726:	40a0      	lsls	r0, r4
    4728:	681c      	ldr	r4, [r3, #0]
    472a:	4320      	orrs	r0, r4
    472c:	6018      	str	r0, [r3, #0]
    472e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4732:	bf00      	nop
    4734:	2000731c 	.word	0x2000731c
    4738:	20009000 	.word	0x20009000

0000473c <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    473c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    473e:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    4742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4746:	bf14      	ite	ne
    4748:	2700      	movne	r7, #0
    474a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    474e:	2a02      	cmp	r2, #2
    4750:	d901      	bls.n	4756 <usb_config_tx+0x1a>
    4752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    4756:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4758:	01c5      	lsls	r5, r0, #7
    475a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 47a0 <usb_config_tx+0x64>
    475e:	4688      	mov	r8, r1
    4760:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    4762:	2100      	movs	r1, #0
    4764:	4604      	mov	r4, r0
    4766:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4768:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    476c:	4650      	mov	r0, sl
    476e:	f001 fed1 	bl	6514 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    4772:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    4774:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    4778:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    477c:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    4780:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    4784:	2e00      	cmp	r6, #0
    4786:	d0e4      	beq.n	4752 <usb_config_tx+0x16>
    4788:	f104 0010 	add.w	r0, r4, #16
    478c:	4b03      	ldr	r3, [pc, #12]	; (479c <usb_config_tx+0x60>)
    478e:	4082      	lsls	r2, r0
    4790:	6818      	ldr	r0, [r3, #0]
    4792:	4302      	orrs	r2, r0
    4794:	601a      	str	r2, [r3, #0]
    4796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    479a:	bf00      	nop
    479c:	2000731c 	.word	0x2000731c
    47a0:	20009000 	.word	0x20009000

000047a4 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    47a4:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    47a6:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    47a8:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    47aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    47ae:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    47b0:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    47b2:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    47b4:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    47b8:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    47bc:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    47c0:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    47c4:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    47c6:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    47c8:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    47ca:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    47cc:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    47ce:	bcf0      	pop	{r4, r5, r6, r7}
    47d0:	4770      	bx	lr
    47d2:	bf00      	nop

000047d4 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    47d4:	1e83      	subs	r3, r0, #2
    47d6:	2b02      	cmp	r3, #2
    47d8:	d900      	bls.n	47dc <usb_transmit+0x8>
    47da:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    47dc:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    47de:	4b06      	ldr	r3, [pc, #24]	; (47f8 <usb_transmit+0x24>)
    47e0:	f100 0410 	add.w	r4, r0, #16
    47e4:	2501      	movs	r5, #1
    47e6:	460a      	mov	r2, r1
    47e8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    47ec:	fa05 f104 	lsl.w	r1, r5, r4
}
    47f0:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    47f2:	f7ff bb97 	b.w	3f24 <schedule_transfer>
    47f6:	bf00      	nop
    47f8:	20009040 	.word	0x20009040

000047fc <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    47fc:	1e83      	subs	r3, r0, #2
    47fe:	2b02      	cmp	r3, #2
    4800:	d900      	bls.n	4804 <usb_receive+0x8>
    4802:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    4804:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    4806:	4b05      	ldr	r3, [pc, #20]	; (481c <usb_receive+0x20>)
    4808:	2401      	movs	r4, #1
    480a:	460a      	mov	r2, r1
    480c:	fa04 f100 	lsl.w	r1, r4, r0
    4810:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    4814:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    4818:	f7ff bb84 	b.w	3f24 <schedule_transfer>
    481c:	20009000 	.word	0x20009000

00004820 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    4820:	6840      	ldr	r0, [r0, #4]
#endif
}
    4822:	4770      	bx	lr

00004824 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4824:	4a12      	ldr	r2, [pc, #72]	; (4870 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4826:	4b13      	ldr	r3, [pc, #76]	; (4874 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4828:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    482c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4830:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4832:	b510      	push	{r4, lr}
    4834:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4836:	d802      	bhi.n	483e <usb_init_serialnumber+0x1a>
    4838:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    483c:	0040      	lsls	r0, r0, #1
    483e:	4c0e      	ldr	r4, [pc, #56]	; (4878 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    4840:	a901      	add	r1, sp, #4
    4842:	220a      	movs	r2, #10
    4844:	f001 f814 	bl	5870 <ultoa>
    4848:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    484a:	2300      	movs	r3, #0
    484c:	4620      	mov	r0, r4
		char c = buf[i];
    484e:	f811 2b01 	ldrb.w	r2, [r1], #1
    4852:	3301      	adds	r3, #1
		if (!c) break;
    4854:	b13a      	cbz	r2, 4866 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4856:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4858:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    485c:	d1f7      	bne.n	484e <usb_init_serialnumber+0x2a>
    485e:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4860:	7023      	strb	r3, [r4, #0]
}
    4862:	b004      	add	sp, #16
    4864:	bd10      	pop	{r4, pc}
    4866:	005b      	lsls	r3, r3, #1
    4868:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    486a:	7023      	strb	r3, [r4, #0]
}
    486c:	b004      	add	sp, #16
    486e:	bd10      	pop	{r4, pc}
    4870:	401f4400 	.word	0x401f4400
    4874:	0098967f 	.word	0x0098967f
    4878:	20004e00 	.word	0x20004e00

0000487c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    487e:	4914      	ldr	r1, [pc, #80]	; (48d0 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4880:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4884:	4d13      	ldr	r5, [pc, #76]	; (48d4 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    4886:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4888:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    488c:	4e12      	ldr	r6, [pc, #72]	; (48d8 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    488e:	4a13      	ldr	r2, [pc, #76]	; (48dc <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4890:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    4894:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4896:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4898:	4628      	mov	r0, r5
    489a:	8832      	ldrh	r2, [r6, #0]
    489c:	f7ff ff82 	bl	47a4 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    48a0:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    48a2:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    48a6:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    48a8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    48ac:	4a0c      	ldr	r2, [pc, #48]	; (48e0 <rx_queue_transfer+0x64>)
    48ae:	6013      	str	r3, [r2, #0]
		location += 32;
    48b0:	3320      	adds	r3, #32
	} while (location < end_addr);
    48b2:	4299      	cmp	r1, r3
    48b4:	d8fb      	bhi.n	48ae <rx_queue_transfer+0x32>
	asm("dsb");
    48b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    48ba:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    48be:	2003      	movs	r0, #3
    48c0:	4629      	mov	r1, r5
    48c2:	f7ff ff9b 	bl	47fc <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    48c6:	4b07      	ldr	r3, [pc, #28]	; (48e4 <rx_queue_transfer+0x68>)
    48c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    48cc:	601a      	str	r2, [r3, #0]
    48ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48d0:	202010a0 	.word	0x202010a0
    48d4:	20007380 	.word	0x20007380
    48d8:	2000748e 	.word	0x2000748e
    48dc:	e000e18c 	.word	0xe000e18c
    48e0:	e000ef5c 	.word	0xe000ef5c
    48e4:	e000e10c 	.word	0xe000e10c

000048e8 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    48e8:	4a24      	ldr	r2, [pc, #144]	; (497c <rx_event+0x94>)
    48ea:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    48ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    48f0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    48f4:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    48f6:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    48f8:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    48fa:	2c00      	cmp	r4, #0
    48fc:	dd38      	ble.n	4970 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    48fe:	4920      	ldr	r1, [pc, #128]	; (4980 <rx_event+0x98>)
		if (head != rx_tail) {
    4900:	4a20      	ldr	r2, [pc, #128]	; (4984 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    4902:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    4904:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    4906:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    4908:	481f      	ldr	r0, [pc, #124]	; (4988 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    490a:	4e20      	ldr	r6, [pc, #128]	; (498c <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    490c:	4293      	cmp	r3, r2
    490e:	d007      	beq.n	4920 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    4910:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    4914:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    4918:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    491c:	4294      	cmp	r4, r2
    491e:	d912      	bls.n	4946 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    4920:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    4922:	2200      	movs	r2, #0
    4924:	4f1a      	ldr	r7, [pc, #104]	; (4990 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    4926:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    4928:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    492c:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    4930:	4e18      	ldr	r6, [pc, #96]	; (4994 <rx_event+0xac>)
    4932:	bf94      	ite	ls
    4934:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    4936:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    4938:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    493a:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    493c:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    493e:	4414      	add	r4, r2
    4940:	6034      	str	r4, [r6, #0]
    4942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4946:	4b14      	ldr	r3, [pc, #80]	; (4998 <rx_event+0xb0>)
    4948:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    494c:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    494e:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4950:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    4954:	4418      	add	r0, r3
    4956:	f7fe fe47 	bl	35e8 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    495a:	4a0e      	ldr	r2, [pc, #56]	; (4994 <rx_event+0xac>)
				rx_queue_transfer(i);
    495c:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    495e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    4962:	6813      	ldr	r3, [r2, #0]
    4964:	441c      	add	r4, r3
    4966:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    4968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    496c:	f7ff bf86 	b.w	487c <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    4970:	4628      	mov	r0, r5
	}
}
    4972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    4976:	f7ff bf81 	b.w	487c <rx_queue_transfer>
    497a:	bf00      	nop
    497c:	2000748e 	.word	0x2000748e
    4980:	200074a4 	.word	0x200074a4
    4984:	20007480 	.word	0x20007480
    4988:	20007484 	.word	0x20007484
    498c:	20007490 	.word	0x20007490
    4990:	20007354 	.word	0x20007354
    4994:	200074a0 	.word	0x200074a0
    4998:	202010a0 	.word	0x202010a0

0000499c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    499c:	4b1e      	ldr	r3, [pc, #120]	; (4a18 <usb_serial_flush_callback+0x7c>)
    499e:	781a      	ldrb	r2, [r3, #0]
    49a0:	b95a      	cbnz	r2, 49ba <usb_serial_flush_callback+0x1e>
    49a2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    49a6:	4a1d      	ldr	r2, [pc, #116]	; (4a1c <usb_serial_flush_callback+0x80>)
    49a8:	7812      	ldrb	r2, [r2, #0]
    49aa:	b132      	cbz	r2, 49ba <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    49ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    49b0:	4d1b      	ldr	r5, [pc, #108]	; (4a20 <usb_serial_flush_callback+0x84>)
    49b2:	882a      	ldrh	r2, [r5, #0]
    49b4:	b912      	cbnz	r2, 49bc <usb_serial_flush_callback+0x20>
    49b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49ba:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    49bc:	4e19      	ldr	r6, [pc, #100]	; (4a24 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    49be:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    49c2:	4f19      	ldr	r7, [pc, #100]	; (4a28 <usb_serial_flush_callback+0x8c>)
    49c4:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    49c6:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    49c8:	4c18      	ldr	r4, [pc, #96]	; (4a2c <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    49ca:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    49ce:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    49d2:	4638      	mov	r0, r7
    49d4:	4621      	mov	r1, r4
    49d6:	f7ff fee5 	bl	47a4 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    49da:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    49de:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    49e2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    49e6:	4b12      	ldr	r3, [pc, #72]	; (4a30 <usb_serial_flush_callback+0x94>)
    49e8:	6019      	str	r1, [r3, #0]
		location += 32;
    49ea:	3120      	adds	r1, #32
	} while (location < end_addr);
    49ec:	428a      	cmp	r2, r1
    49ee:	d8fb      	bhi.n	49e8 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    49f0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    49f4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    49f8:	2004      	movs	r0, #4
    49fa:	4639      	mov	r1, r7
    49fc:	f7ff feea 	bl	47d4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4a00:	7833      	ldrb	r3, [r6, #0]
    4a02:	4a08      	ldr	r2, [pc, #32]	; (4a24 <usb_serial_flush_callback+0x88>)
    4a04:	3301      	adds	r3, #1
    4a06:	b2db      	uxtb	r3, r3
    4a08:	2b03      	cmp	r3, #3
    4a0a:	bf88      	it	hi
    4a0c:	2300      	movhi	r3, #0
    4a0e:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    4a10:	2300      	movs	r3, #0
    4a12:	802b      	strh	r3, [r5, #0]
    4a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a18:	20007366 	.word	0x20007366
    4a1c:	20007350 	.word	0x20007350
    4a20:	200074a6 	.word	0x200074a6
    4a24:	20007367 	.word	0x20007367
    4a28:	200074c0 	.word	0x200074c0
    4a2c:	202020a0 	.word	0x202020a0
    4a30:	e000ef70 	.word	0xe000ef70

00004a34 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    4a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a38:	b085      	sub	sp, #20
    4a3a:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    4a3c:	9101      	str	r1, [sp, #4]
    4a3e:	2900      	cmp	r1, #0
    4a40:	f000 80a2 	beq.w	4b88 <usb_serial_write.part.1+0x154>
    4a44:	2300      	movs	r3, #0
    4a46:	f8df 815c 	ldr.w	r8, [pc, #348]	; 4ba4 <usb_serial_write.part.1+0x170>
    4a4a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 4b98 <usb_serial_write.part.1+0x164>
    4a4e:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    4a50:	4e4e      	ldr	r6, [pc, #312]	; (4b8c <usb_serial_write.part.1+0x158>)
    4a52:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    4a56:	f8df a150 	ldr.w	sl, [pc, #336]	; 4ba8 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    4a5a:	f8df b150 	ldr.w	fp, [pc, #336]	; 4bac <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    4a5e:	4a4c      	ldr	r2, [pc, #304]	; (4b90 <usb_serial_write.part.1+0x15c>)
    4a60:	7814      	ldrb	r4, [r2, #0]
    4a62:	4a4c      	ldr	r2, [pc, #304]	; (4b94 <usb_serial_write.part.1+0x160>)
    4a64:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d16e      	bne.n	4b4a <usb_serial_write.part.1+0x116>
    4a6c:	461d      	mov	r5, r3
    4a6e:	461c      	mov	r4, r3
    4a70:	e014      	b.n	4a9c <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    4a72:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    4a76:	b904      	cbnz	r4, 4a7a <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    4a78:	6835      	ldr	r5, [r6, #0]
    4a7a:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	d15e      	bne.n	4b3e <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    4a80:	6833      	ldr	r3, [r6, #0]
    4a82:	1b5b      	subs	r3, r3, r5
    4a84:	2b78      	cmp	r3, #120	; 0x78
    4a86:	d879      	bhi.n	4b7c <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    4a88:	f89a 3000 	ldrb.w	r3, [sl]
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d056      	beq.n	4b3e <usb_serial_write.part.1+0x10a>
			yield();
    4a90:	f000 fe9e 	bl	57d0 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    4a94:	f8b8 3000 	ldrh.w	r3, [r8]
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d154      	bne.n	4b46 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    4a9c:	4638      	mov	r0, r7
    4a9e:	f7ff febf 	bl	4820 <usb_transfer_status>
			if (!(status & 0x80)) {
    4aa2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    4aa6:	4a3c      	ldr	r2, [pc, #240]	; (4b98 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    4aa8:	d1e3      	bne.n	4a72 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    4aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    4aae:	4a38      	ldr	r2, [pc, #224]	; (4b90 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    4ab0:	f889 0000 	strb.w	r0, [r9]
    4ab4:	7814      	ldrb	r4, [r2, #0]
    4ab6:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    4ab8:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4abc:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    4abe:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4ac0:	4936      	ldr	r1, [pc, #216]	; (4b9c <usb_serial_write.part.1+0x168>)
    4ac2:	4420      	add	r0, r4
		if (size >= tx_available) {
    4ac4:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4ac6:	4408      	add	r0, r1
		if (size >= tx_available) {
    4ac8:	d343      	bcc.n	4b52 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4aca:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    4acc:	9902      	ldr	r1, [sp, #8]
    4ace:	f7fe fd8b 	bl	35e8 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    4ad2:	2300      	movs	r3, #0
    4ad4:	4621      	mov	r1, r4
    4ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    4ada:	4638      	mov	r0, r7
    4adc:	f7ff fe62 	bl	47a4 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4ae0:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4ae4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    4ae8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4aec:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    4af0:	3320      	adds	r3, #32
	} while (location < end_addr);
    4af2:	429c      	cmp	r4, r3
    4af4:	d8fa      	bhi.n	4aec <usb_serial_write.part.1+0xb8>
	asm("dsb");
    4af6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4afa:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    4afe:	2004      	movs	r0, #4
    4b00:	4639      	mov	r1, r7
    4b02:	f7ff fe67 	bl	47d4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    4b06:	4b22      	ldr	r3, [pc, #136]	; (4b90 <usb_serial_write.part.1+0x15c>)
    4b08:	4a21      	ldr	r2, [pc, #132]	; (4b90 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    4b0a:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    4b0c:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    4b0e:	4824      	ldr	r0, [pc, #144]	; (4ba0 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    4b10:	3301      	adds	r3, #1
    4b12:	b2db      	uxtb	r3, r3
    4b14:	2b03      	cmp	r3, #3
    4b16:	bf88      	it	hi
    4b18:	2300      	movhi	r3, #0
    4b1a:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    4b1c:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    4b20:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    4b22:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    4b26:	4413      	add	r3, r2
    4b28:	9300      	str	r3, [sp, #0]
			data += tx_available;
    4b2a:	9b02      	ldr	r3, [sp, #8]
    4b2c:	4413      	add	r3, r2
    4b2e:	9302      	str	r3, [sp, #8]
    4b30:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    4b32:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    4b36:	9901      	ldr	r1, [sp, #4]
    4b38:	1a8a      	subs	r2, r1, r2
    4b3a:	9201      	str	r2, [sp, #4]
    4b3c:	d18f      	bne.n	4a5e <usb_serial_write.part.1+0x2a>
    4b3e:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    4b40:	b005      	add	sp, #20
    4b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b46:	4a12      	ldr	r2, [pc, #72]	; (4b90 <usb_serial_write.part.1+0x15c>)
    4b48:	7814      	ldrb	r4, [r2, #0]
    4b4a:	461a      	mov	r2, r3
    4b4c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    4b50:	e7b4      	b.n	4abc <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    4b52:	9c01      	ldr	r4, [sp, #4]
    4b54:	9902      	ldr	r1, [sp, #8]
    4b56:	4622      	mov	r2, r4
    4b58:	9303      	str	r3, [sp, #12]
    4b5a:	f7fe fd45 	bl	35e8 <memcpy>
			tx_available -= size;
    4b5e:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    4b60:	4a0f      	ldr	r2, [pc, #60]	; (4ba0 <usb_serial_write.part.1+0x16c>)
    4b62:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    4b66:	1b1b      	subs	r3, r3, r4
    4b68:	f8a8 3000 	strh.w	r3, [r8]
    4b6c:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    4b6e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    4b72:	4618      	mov	r0, r3
    4b74:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    4b76:	b005      	add	sp, #20
    4b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    4b7c:	2301      	movs	r3, #1
				return sent;
    4b7e:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    4b80:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    4b82:	b005      	add	sp, #20
    4b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    4b88:	9801      	ldr	r0, [sp, #4]
    4b8a:	e7d9      	b.n	4b40 <usb_serial_write.part.1+0x10c>
    4b8c:	20007304 	.word	0x20007304
    4b90:	20007367 	.word	0x20007367
    4b94:	200074c0 	.word	0x200074c0
    4b98:	200074a5 	.word	0x200074a5
    4b9c:	202020a0 	.word	0x202020a0
    4ba0:	402e0000 	.word	0x402e0000
    4ba4:	200074a6 	.word	0x200074a6
    4ba8:	20007350 	.word	0x20007350
    4bac:	e000ef70 	.word	0xe000ef70

00004bb0 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    4bb0:	4770      	bx	lr
    4bb2:	bf00      	nop

00004bb4 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    4bb4:	4b31      	ldr	r3, [pc, #196]	; (4c7c <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    4bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    4bba:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    4bbc:	4f30      	ldr	r7, [pc, #192]	; (4c80 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d054      	beq.n	4c6c <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    4bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    4bc6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4cb4 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    4bca:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    4bcc:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4bd0:	2100      	movs	r1, #0
    4bd2:	2280      	movs	r2, #128	; 0x80
    4bd4:	482b      	ldr	r0, [pc, #172]	; (4c84 <usb_serial_configure+0xd0>)
	tx_head = 0;
    4bd6:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    4bd8:	4e2b      	ldr	r6, [pc, #172]	; (4c88 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4bda:	f001 fc9b 	bl	6514 <memset>
	tx_head = 0;
    4bde:	4c2b      	ldr	r4, [pc, #172]	; (4c8c <usb_serial_configure+0xd8>)
	tx_available = 0;
    4be0:	4b2b      	ldr	r3, [pc, #172]	; (4c90 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4be2:	4629      	mov	r1, r5
    4be4:	f44f 7280 	mov.w	r2, #256	; 0x100
    4be8:	482a      	ldr	r0, [pc, #168]	; (4c94 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    4bea:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4bec:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    4bee:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4bf0:	f001 fc90 	bl	6514 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    4bf4:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4bf6:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    4bf8:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4bfa:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    4bfc:	60b5      	str	r5, [r6, #8]
    4bfe:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    4c00:	4925      	ldr	r1, [pc, #148]	; (4c98 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    4c02:	4e26      	ldr	r6, [pc, #152]	; (4c9c <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    4c04:	4826      	ldr	r0, [pc, #152]	; (4ca0 <usb_serial_configure+0xec>)
	rx_available = 0;
    4c06:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 4cb8 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    4c0a:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4c0c:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    4c0e:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4c10:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    4c12:	6035      	str	r5, [r6, #0]
    4c14:	6075      	str	r5, [r6, #4]
    4c16:	60b5      	str	r5, [r6, #8]
    4c18:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    4c1a:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4c1e:	f7ff fd8d 	bl	473c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    4c22:	f8b8 1000 	ldrh.w	r1, [r8]
    4c26:	462a      	mov	r2, r5
    4c28:	4b1e      	ldr	r3, [pc, #120]	; (4ca4 <usb_serial_configure+0xf0>)
    4c2a:	2003      	movs	r0, #3
    4c2c:	f7ff fd54 	bl	46d8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4c30:	462b      	mov	r3, r5
    4c32:	8839      	ldrh	r1, [r7, #0]
    4c34:	2201      	movs	r2, #1
    4c36:	2004      	movs	r0, #4
    4c38:	f7ff fd80 	bl	473c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4c3c:	4620      	mov	r0, r4
    4c3e:	3401      	adds	r4, #1
    4c40:	f7ff fe1c 	bl	487c <rx_queue_transfer>
    4c44:	2c08      	cmp	r4, #8
    4c46:	d1f9      	bne.n	4c3c <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    4c48:	4b17      	ldr	r3, [pc, #92]	; (4ca8 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    4c4a:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    4c4c:	4817      	ldr	r0, [pc, #92]	; (4cac <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    4c4e:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    4c50:	4c17      	ldr	r4, [pc, #92]	; (4cb0 <usb_serial_configure+0xfc>)
    4c52:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    4c54:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    4c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    4c5c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    4c60:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4c64:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    4c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    4c6c:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    4c6e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4cb4 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    4c72:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    4c74:	f8a8 3000 	strh.w	r3, [r8]
    4c78:	e7aa      	b.n	4bd0 <usb_serial_configure+0x1c>
    4c7a:	bf00      	nop
    4c7c:	20007328 	.word	0x20007328
    4c80:	20007364 	.word	0x20007364
    4c84:	200074c0 	.word	0x200074c0
    4c88:	20007490 	.word	0x20007490
    4c8c:	20007367 	.word	0x20007367
    4c90:	200074a6 	.word	0x200074a6
    4c94:	20007380 	.word	0x20007380
    4c98:	200074a4 	.word	0x200074a4
    4c9c:	20007354 	.word	0x20007354
    4ca0:	20007480 	.word	0x20007480
    4ca4:	000048e9 	.word	0x000048e9
    4ca8:	402e0000 	.word	0x402e0000
    4cac:	20007318 	.word	0x20007318
    4cb0:	0000499d 	.word	0x0000499d
    4cb4:	2000748e 	.word	0x2000748e
    4cb8:	200074a0 	.word	0x200074a0

00004cbc <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    4cbc:	4b31      	ldr	r3, [pc, #196]	; (4d84 <usb_serial_read+0xc8>)
    4cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    4cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    4cc6:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    4cc8:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    4cca:	4b2f      	ldr	r3, [pc, #188]	; (4d88 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4ccc:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    4cce:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4cd0:	2900      	cmp	r1, #0
    4cd2:	d053      	beq.n	4d7c <usb_serial_read+0xc0>
    4cd4:	4b2d      	ldr	r3, [pc, #180]	; (4d8c <usb_serial_read+0xd0>)
    4cd6:	b2e4      	uxtb	r4, r4
    4cd8:	781b      	ldrb	r3, [r3, #0]
    4cda:	429c      	cmp	r4, r3
    4cdc:	d050      	beq.n	4d80 <usb_serial_read+0xc4>
    4cde:	4682      	mov	sl, r0
    4ce0:	2700      	movs	r7, #0
    4ce2:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 4da4 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    4ce6:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4ce8:	4b29      	ldr	r3, [pc, #164]	; (4d90 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    4cea:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4cee:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    4cf0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4cf2:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    4cf4:	4b27      	ldr	r3, [pc, #156]	; (4d94 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    4cf6:	bf28      	it	cs
    4cf8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    4cfa:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4cfc:	4b24      	ldr	r3, [pc, #144]	; (4d90 <usb_serial_read+0xd4>)
    4cfe:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    4d02:	4b25      	ldr	r3, [pc, #148]	; (4d98 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4d04:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4d08:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4d0c:	4b23      	ldr	r3, [pc, #140]	; (4d9c <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4d0e:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4d12:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    4d14:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4d16:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    4d18:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    4d1a:	d219      	bcs.n	4d50 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4d1c:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    4d20:	4642      	mov	r2, r8
    4d22:	4419      	add	r1, r3
    4d24:	f7fe fc60 	bl	35e8 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    4d28:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    4d2a:	f8db 1000 	ldr.w	r1, [fp]
    4d2e:	4648      	mov	r0, r9
			rx_index[i] += len;
    4d30:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    4d34:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    4d38:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    4d3a:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    4d3e:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4d42:	4b17      	ldr	r3, [pc, #92]	; (4da0 <usb_serial_read+0xe4>)
    4d44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4d48:	601a      	str	r2, [r3, #0]
	return count;
}
    4d4a:	b003      	add	sp, #12
    4d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4d50:	f7fe fc4a 	bl	35e8 <memcpy>
			p += avail;
			rx_available -= avail;
    4d54:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    4d58:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    4d5a:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    4d5c:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    4d5e:	44b2      	add	sl, r6
			rx_available -= avail;
    4d60:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    4d64:	4a08      	ldr	r2, [pc, #32]	; (4d88 <usb_serial_read+0xcc>)
    4d66:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    4d68:	f7ff fd88 	bl	487c <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4d6c:	45b9      	cmp	r9, r7
    4d6e:	d903      	bls.n	4d78 <usb_serial_read+0xbc>
    4d70:	4b06      	ldr	r3, [pc, #24]	; (4d8c <usb_serial_read+0xd0>)
    4d72:	781b      	ldrb	r3, [r3, #0]
    4d74:	429c      	cmp	r4, r3
    4d76:	d1b6      	bne.n	4ce6 <usb_serial_read+0x2a>
    4d78:	4638      	mov	r0, r7
    4d7a:	e7e2      	b.n	4d42 <usb_serial_read+0x86>
    4d7c:	4608      	mov	r0, r1
    4d7e:	e7e0      	b.n	4d42 <usb_serial_read+0x86>
    4d80:	2000      	movs	r0, #0
    4d82:	e7de      	b.n	4d42 <usb_serial_read+0x86>
    4d84:	e000e18c 	.word	0xe000e18c
    4d88:	20007480 	.word	0x20007480
    4d8c:	200074a4 	.word	0x200074a4
    4d90:	20007354 	.word	0x20007354
    4d94:	20007484 	.word	0x20007484
    4d98:	20007490 	.word	0x20007490
    4d9c:	202010a0 	.word	0x202010a0
    4da0:	e000e10c 	.word	0xe000e10c
    4da4:	200074a0 	.word	0x200074a0

00004da8 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    4da8:	4b0b      	ldr	r3, [pc, #44]	; (4dd8 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    4daa:	4a0c      	ldr	r2, [pc, #48]	; (4ddc <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    4dac:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    4dae:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    4db0:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    4db2:	4293      	cmp	r3, r2
    4db4:	d00d      	beq.n	4dd2 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    4db6:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    4db8:	4809      	ldr	r0, [pc, #36]	; (4de0 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4dba:	4a0a      	ldr	r2, [pc, #40]	; (4de4 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    4dbc:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4dbe:	490a      	ldr	r1, [pc, #40]	; (4de8 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    4dc0:	bf28      	it	cs
    4dc2:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    4dc4:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4dc6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    4dca:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    4dce:	5c58      	ldrb	r0, [r3, r1]
    4dd0:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    4dd2:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    4dd6:	4770      	bx	lr
    4dd8:	20007480 	.word	0x20007480
    4ddc:	200074a4 	.word	0x200074a4
    4de0:	20007484 	.word	0x20007484
    4de4:	202010a0 	.word	0x202010a0
    4de8:	20007354 	.word	0x20007354

00004dec <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    4dec:	4b01      	ldr	r3, [pc, #4]	; (4df4 <usb_serial_available+0x8>)
    4dee:	6818      	ldr	r0, [r3, #0]
}
    4df0:	4770      	bx	lr
    4df2:	bf00      	nop
    4df4:	200074a0 	.word	0x200074a0

00004df8 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    4df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    4dfc:	4e15      	ldr	r6, [pc, #84]	; (4e54 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    4dfe:	4d16      	ldr	r5, [pc, #88]	; (4e58 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    4e00:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    4e02:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    4e04:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    4e06:	429c      	cmp	r4, r3
    4e08:	d021      	beq.n	4e4e <usb_serial_flush_input+0x56>
    4e0a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 4e60 <usb_serial_flush_input+0x68>
    4e0e:	f8df b054 	ldr.w	fp, [pc, #84]	; 4e64 <usb_serial_flush_input+0x6c>
    4e12:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4e68 <usb_serial_flush_input+0x70>
    4e16:	4f11      	ldr	r7, [pc, #68]	; (4e5c <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    4e18:	3401      	adds	r4, #1
    4e1a:	2c08      	cmp	r4, #8
    4e1c:	fa5f fa84 	uxtb.w	sl, r4
    4e20:	d901      	bls.n	4e26 <usb_serial_flush_input+0x2e>
    4e22:	2400      	movs	r4, #0
    4e24:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    4e26:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    4e2a:	f8db 2000 	ldr.w	r2, [fp]
    4e2e:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    4e32:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    4e34:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    4e38:	1a5b      	subs	r3, r3, r1
    4e3a:	1ad3      	subs	r3, r2, r3
    4e3c:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    4e40:	f7ff fd1c 	bl	487c <rx_queue_transfer>
		rx_tail = tail;
    4e44:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    4e48:	782b      	ldrb	r3, [r5, #0]
    4e4a:	429c      	cmp	r4, r3
    4e4c:	d1e4      	bne.n	4e18 <usb_serial_flush_input+0x20>
    4e4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e52:	bf00      	nop
    4e54:	20007480 	.word	0x20007480
    4e58:	200074a4 	.word	0x200074a4
    4e5c:	20007354 	.word	0x20007354
    4e60:	20007484 	.word	0x20007484
    4e64:	200074a0 	.word	0x200074a0
    4e68:	20007490 	.word	0x20007490

00004e6c <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    4e6c:	b500      	push	{lr}
    4e6e:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    4e70:	2101      	movs	r1, #1
    4e72:	f10d 0007 	add.w	r0, sp, #7
    4e76:	f7ff ff21 	bl	4cbc <usb_serial_read>
    4e7a:	b120      	cbz	r0, 4e86 <usb_serial_getchar+0x1a>
    4e7c:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    4e80:	b003      	add	sp, #12
    4e82:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    4e86:	f04f 30ff 	mov.w	r0, #4294967295
    4e8a:	e7f9      	b.n	4e80 <usb_serial_getchar+0x14>

00004e8c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4e8c:	4b09      	ldr	r3, [pc, #36]	; (4eb4 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4e8e:	b500      	push	{lr}
    4e90:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4e92:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4e94:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4e98:	b923      	cbnz	r3, 4ea4 <usb_serial_putchar+0x18>
    4e9a:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    4e9e:	b003      	add	sp, #12
    4ea0:	f85d fb04 	ldr.w	pc, [sp], #4
    4ea4:	2101      	movs	r1, #1
    4ea6:	f10d 0007 	add.w	r0, sp, #7
    4eaa:	f7ff fdc3 	bl	4a34 <usb_serial_write.part.1>
    4eae:	b003      	add	sp, #12
    4eb0:	f85d fb04 	ldr.w	pc, [sp], #4
    4eb4:	20007350 	.word	0x20007350

00004eb8 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4eb8:	4b04      	ldr	r3, [pc, #16]	; (4ecc <usb_serial_write+0x14>)
    4eba:	781b      	ldrb	r3, [r3, #0]
    4ebc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4ec0:	b10b      	cbz	r3, 4ec6 <usb_serial_write+0xe>
    4ec2:	f7ff bdb7 	b.w	4a34 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    4ec6:	4610      	mov	r0, r2
    4ec8:	4770      	bx	lr
    4eca:	bf00      	nop
    4ecc:	20007350 	.word	0x20007350

00004ed0 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    4ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    4ed4:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    4ed6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4f18 <usb_serial_write_buffer_free+0x48>
    4eda:	2301      	movs	r3, #1
    4edc:	4d0c      	ldr	r5, [pc, #48]	; (4f10 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    4ede:	4627      	mov	r7, r4
    4ee0:	4e0c      	ldr	r6, [pc, #48]	; (4f14 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    4ee2:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    4ee6:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4ee8:	4628      	mov	r0, r5
    4eea:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    4eec:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    4eee:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    4ef2:	d005      	beq.n	4f00 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4ef4:	f7ff fc94 	bl	4820 <usb_transfer_status>
    4ef8:	0603      	lsls	r3, r0, #24
    4efa:	bf58      	it	pl
    4efc:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    4f00:	2c04      	cmp	r4, #4
    4f02:	d1f0      	bne.n	4ee6 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    4f04:	2300      	movs	r3, #0
	return sum;
}
    4f06:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    4f08:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    4f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f10:	200074c0 	.word	0x200074c0
    4f14:	20007367 	.word	0x20007367
    4f18:	20007366 	.word	0x20007366

00004f1c <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    4f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    4f20:	4b1f      	ldr	r3, [pc, #124]	; (4fa0 <usb_serial_flush_output+0x84>)
    4f22:	781b      	ldrb	r3, [r3, #0]
    4f24:	b113      	cbz	r3, 4f2c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    4f26:	4d1f      	ldr	r5, [pc, #124]	; (4fa4 <usb_serial_flush_output+0x88>)
    4f28:	882a      	ldrh	r2, [r5, #0]
    4f2a:	b90a      	cbnz	r2, 4f30 <usb_serial_flush_output+0x14>
    4f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    4f30:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4fb8 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    4f34:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    4f38:	4e1b      	ldr	r6, [pc, #108]	; (4fa8 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    4f3a:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    4f3e:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4f42:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4f44:	4c19      	ldr	r4, [pc, #100]	; (4fac <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4f46:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    4f48:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    4f4c:	4f18      	ldr	r7, [pc, #96]	; (4fb0 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4f4e:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4f52:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    4f54:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4f58:	4621      	mov	r1, r4
    4f5a:	f7ff fc23 	bl	47a4 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    4f5e:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4f62:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    4f66:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4f6a:	4b12      	ldr	r3, [pc, #72]	; (4fb4 <usb_serial_flush_output+0x98>)
    4f6c:	6019      	str	r1, [r3, #0]
		location += 32;
    4f6e:	3120      	adds	r1, #32
	} while (location < end_addr);
    4f70:	428a      	cmp	r2, r1
    4f72:	d8fb      	bhi.n	4f6c <usb_serial_flush_output+0x50>
	asm("dsb");
    4f74:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4f78:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4f7c:	2004      	movs	r0, #4
    4f7e:	4631      	mov	r1, r6
    4f80:	f7ff fc28 	bl	47d4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4f84:	f898 3000 	ldrb.w	r3, [r8]
    4f88:	4a0b      	ldr	r2, [pc, #44]	; (4fb8 <usb_serial_flush_output+0x9c>)
    4f8a:	3301      	adds	r3, #1
    4f8c:	b2db      	uxtb	r3, r3
    4f8e:	2b03      	cmp	r3, #3
    4f90:	bf88      	it	hi
    4f92:	2300      	movhi	r3, #0
    4f94:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    4f96:	2300      	movs	r3, #0
    4f98:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    4f9a:	703b      	strb	r3, [r7, #0]
    4f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4fa0:	20007350 	.word	0x20007350
    4fa4:	200074a6 	.word	0x200074a6
    4fa8:	200074c0 	.word	0x200074c0
    4fac:	202020a0 	.word	0x202020a0
    4fb0:	20007366 	.word	0x20007366
    4fb4:	e000ef70 	.word	0xe000ef70
    4fb8:	20007367 	.word	0x20007367

00004fbc <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    4fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4fbe:	4b15      	ldr	r3, [pc, #84]	; (5014 <software_isr()+0x58>)

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
    4fc0:	4d15      	ldr	r5, [pc, #84]	; (5018 <software_isr()+0x5c>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4fc2:	681c      	ldr	r4, [r3, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
    4fc4:	682e      	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4fc6:	b914      	cbnz	r4, 4fce <software_isr()+0x12>
    4fc8:	e015      	b.n	4ff6 <software_isr()+0x3a>
    4fca:	6964      	ldr	r4, [r4, #20]
    4fcc:	b19c      	cbz	r4, 4ff6 <software_isr()+0x3a>
		if (p->active) {
    4fce:	7a23      	ldrb	r3, [r4, #8]
    4fd0:	2b00      	cmp	r3, #0
    4fd2:	d0fa      	beq.n	4fca <software_isr()+0xe>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    4fd4:	6823      	ldr	r3, [r4, #0]
    4fd6:	4620      	mov	r0, r4

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    4fd8:	682f      	ldr	r7, [r5, #0]
			p->update();
    4fda:	681b      	ldr	r3, [r3, #0]
    4fdc:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    4fde:	682b      	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    4fe0:	88e1      	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    4fe2:	1bdb      	subs	r3, r3, r7
    4fe4:	091b      	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    4fe6:	b29a      	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    4fe8:	428b      	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    4fea:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    4fec:	bf88      	it	hi
    4fee:	80e2      	strhhi	r2, [r4, #6]
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4ff0:	6964      	ldr	r4, [r4, #20]
    4ff2:	2c00      	cmp	r4, #0
    4ff4:	d1eb      	bne.n	4fce <software_isr()+0x12>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    4ff6:	4b08      	ldr	r3, [pc, #32]	; (5018 <software_isr()+0x5c>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    4ff8:	4a08      	ldr	r2, [pc, #32]	; (501c <software_isr()+0x60>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    4ffa:	681b      	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    4ffc:	8810      	ldrh	r0, [r2, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    4ffe:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    5000:	4c07      	ldr	r4, [pc, #28]	; (5020 <software_isr()+0x64>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    5002:	091b      	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    5004:	b299      	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    5006:	4283      	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    5008:	8021      	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    500a:	d900      	bls.n	500e <software_isr()+0x52>
		AudioStream::cpu_cycles_total_max = totalcycles;
    500c:	8011      	strh	r1, [r2, #0]

	asm("DSB");
    500e:	f3bf 8f4f 	dsb	sy
    5012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5014:	20007544 	.word	0x20007544
    5018:	e0001004 	.word	0xe0001004
    501c:	20007542 	.word	0x20007542
    5020:	200075c2 	.word	0x200075c2

00005024 <AudioStream::allocate()>:
}

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    5024:	b4f0      	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    5026:	b672      	cpsid	i
	index = memory_pool_first_mask;
    5028:	4f23      	ldr	r7, [pc, #140]	; (50b8 <AudioStream::allocate()+0x94>)
	p += index;
    502a:	4e24      	ldr	r6, [pc, #144]	; (50bc <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    502c:	883c      	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    502e:	f106 0370 	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    5032:	eb06 0084 	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    5036:	4298      	cmp	r0, r3
    5038:	d213      	bcs.n	5062 <AudioStream::allocate()+0x3e>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    503a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    503e:	b9a1      	cbnz	r1, 506a <AudioStream::allocate()+0x46>
    5040:	1d02      	adds	r2, r0, #4
    5042:	f106 0573 	add.w	r5, r6, #115	; 0x73
    5046:	1c63      	adds	r3, r4, #1
    5048:	1aad      	subs	r5, r5, r2
    504a:	eb03 0595 	add.w	r5, r3, r5, lsr #2
    504e:	e002      	b.n	5056 <AudioStream::allocate()+0x32>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    5050:	f852 1b04 	ldr.w	r1, [r2], #4
		if (avail) break;
    5054:	b949      	cbnz	r1, 506a <AudioStream::allocate()+0x46>
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    5056:	42ab      	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    5058:	461c      	mov	r4, r3
		p++;
    505a:	4610      	mov	r0, r2
    505c:	f103 0301 	add.w	r3, r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    5060:	d1f6      	bne.n	5050 <AudioStream::allocate()+0x2c>
			__enable_irq();
    5062:	b662      	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    5064:	2000      	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    5066:	bcf0      	pop	{r4, r5, r6, r7}
    5068:	4770      	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    506a:	fab1 f281 	clz	r2, r1
	avail &= ~(0x80000000 >> n);
    506e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    5072:	40d3      	lsrs	r3, r2
    5074:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
    5078:	6001      	str	r1, [r0, #0]
	if (!avail) index++;
    507a:	b901      	cbnz	r1, 507e <AudioStream::allocate()+0x5a>
    507c:	3401      	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    507e:	4b10      	ldr	r3, [pc, #64]	; (50c0 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    5080:	803c      	strh	r4, [r7, #0]
	used = memory_used + 1;
    5082:	8819      	ldrh	r1, [r3, #0]
    5084:	3101      	adds	r1, #1
	memory_used = used;
    5086:	b28d      	uxth	r5, r1
    5088:	801d      	strh	r5, [r3, #0]
	__enable_irq();
    508a:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    508c:	1b80      	subs	r0, r0, r6
    508e:	f641 737c 	movw	r3, #8060	; 0x1f7c
    5092:	4c0c      	ldr	r4, [pc, #48]	; (50c4 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
    5094:	2701      	movs	r7, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    5096:	1080      	asrs	r0, r0, #2
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    5098:	4e0b      	ldr	r6, [pc, #44]	; (50c8 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    509a:	6824      	ldr	r4, [r4, #0]
    509c:	ebc2 1240 	rsb	r2, r2, r0, lsl #5
    50a0:	eb02 1282 	add.w	r2, r2, r2, lsl #6
    50a4:	0092      	lsls	r2, r2, #2
    50a6:	4413      	add	r3, r2
	block->ref_count = 1;
    50a8:	54e7      	strb	r7, [r4, r3]
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    50aa:	18e0      	adds	r0, r4, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    50ac:	8833      	ldrh	r3, [r6, #0]
    50ae:	4299      	cmp	r1, r3
    50b0:	bf88      	it	hi
    50b2:	8035      	strhhi	r5, [r6, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    50b4:	bcf0      	pop	{r4, r5, r6, r7}
    50b6:	4770      	bx	lr
    50b8:	200075be 	.word	0x200075be
    50bc:	20007548 	.word	0x20007548
    50c0:	200075c0 	.word	0x200075c0
    50c4:	200075b8 	.word	0x200075b8
    50c8:	20007540 	.word	0x20007540

000050cc <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    50cc:	8842      	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    50ce:	b672      	cpsid	i
	if (block->ref_count > 1) {
    50d0:	7803      	ldrb	r3, [r0, #0]
    50d2:	2b01      	cmp	r3, #1
    50d4:	d903      	bls.n	50de <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    50d6:	3b01      	subs	r3, #1
    50d8:	7003      	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    50da:	b662      	cpsie	i
    50dc:	4770      	bx	lr
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    50de:	43d1      	mvns	r1, r2
    50e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    50e4:	1152      	asrs	r2, r2, #5
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    50e6:	f001 011f 	and.w	r1, r1, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    50ea:	b430      	push	{r4, r5}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    50ec:	4c09      	ldr	r4, [pc, #36]	; (5114 <AudioStream::release(audio_block_struct*)+0x48>)
    50ee:	fa20 f101 	lsr.w	r1, r0, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    50f2:	4d09      	ldr	r5, [pc, #36]	; (5118 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    50f4:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    50f8:	8828      	ldrh	r0, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    50fa:	430b      	orrs	r3, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    50fc:	4282      	cmp	r2, r0
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    50fe:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    5102:	bf38      	it	cc
    5104:	802a      	strhcc	r2, [r5, #0]
		memory_used--;
    5106:	4a05      	ldr	r2, [pc, #20]	; (511c <AudioStream::release(audio_block_struct*)+0x50>)
    5108:	8813      	ldrh	r3, [r2, #0]
    510a:	3b01      	subs	r3, #1
    510c:	8013      	strh	r3, [r2, #0]
	}
	__enable_irq();
    510e:	b662      	cpsie	i
}
    5110:	bc30      	pop	{r4, r5}
    5112:	4770      	bx	lr
    5114:	20007548 	.word	0x20007548
    5118:	200075be 	.word	0x200075be
    511c:	200075c0 	.word	0x200075c0

00005120 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    5120:	68c3      	ldr	r3, [r0, #12]
    5122:	b1b3      	cbz	r3, 5152 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    5124:	b430      	push	{r4, r5}
    5126:	e001      	b.n	512c <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    5128:	68db      	ldr	r3, [r3, #12]
    512a:	b18b      	cbz	r3, 5150 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    512c:	7a18      	ldrb	r0, [r3, #8]
    512e:	4290      	cmp	r0, r2
    5130:	d1fa      	bne.n	5128 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    5132:	6858      	ldr	r0, [r3, #4]
    5134:	7a5c      	ldrb	r4, [r3, #9]
    5136:	6900      	ldr	r0, [r0, #16]
    5138:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    513c:	2d00      	cmp	r5, #0
    513e:	d1f3      	bne.n	5128 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    5140:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    5144:	7808      	ldrb	r0, [r1, #0]
    5146:	3001      	adds	r0, #1
    5148:	7008      	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    514a:	68db      	ldr	r3, [r3, #12]
    514c:	2b00      	cmp	r3, #0
    514e:	d1ed      	bne.n	512c <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    5150:	bc30      	pop	{r4, r5}
    5152:	4770      	bx	lr

00005154 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    5154:	7a43      	ldrb	r3, [r0, #9]
    5156:	428b      	cmp	r3, r1
    5158:	d906      	bls.n	5168 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    515a:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    515c:	2200      	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    515e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    5162:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
    5166:	4770      	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    5168:	2000      	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    516a:	4770      	bx	lr

0000516c <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    516c:	7c03      	ldrb	r3, [r0, #16]
    516e:	bb23      	cbnz	r3, 51ba <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    5170:	6843      	ldr	r3, [r0, #4]
    5172:	7a42      	ldrb	r2, [r0, #9]
    5174:	7a5b      	ldrb	r3, [r3, #9]
    5176:	429a      	cmp	r2, r3
    5178:	d81f      	bhi.n	51ba <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    517a:	b430      	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    517c:	b672      	cpsid	i
	p = src.destination_list;
    517e:	6804      	ldr	r4, [r0, #0]
    5180:	68e3      	ldr	r3, [r4, #12]
	if (p == NULL) {
    5182:	b32b      	cbz	r3, 51d0 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    5184:	68da      	ldr	r2, [r3, #12]
    5186:	b132      	cbz	r2, 5196 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    5188:	6819      	ldr	r1, [r3, #0]
    518a:	428c      	cmp	r4, r1
    518c:	d016      	beq.n	51bc <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    518e:	4613      	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    5190:	68da      	ldr	r2, [r3, #12]
    5192:	2a00      	cmp	r2, #0
    5194:	d1f8      	bne.n	5188 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    5196:	60d8      	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    5198:	2200      	movs	r2, #0
	src.numConnections++;
	src.active = true;
    519a:	2301      	movs	r3, #1
			}
			p = p->next_dest;
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
    519c:	60c2      	str	r2, [r0, #12]
	src.numConnections++;
    519e:	7aa2      	ldrb	r2, [r4, #10]
    51a0:	441a      	add	r2, r3
    51a2:	72a2      	strb	r2, [r4, #10]
	src.active = true;
    51a4:	6802      	ldr	r2, [r0, #0]

	dst.numConnections++;
    51a6:	6841      	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    51a8:	7213      	strb	r3, [r2, #8]

	dst.numConnections++;
    51aa:	7a8a      	ldrb	r2, [r1, #10]
    51ac:	441a      	add	r2, r3
    51ae:	728a      	strb	r2, [r1, #10]
	dst.active = true;
    51b0:	6842      	ldr	r2, [r0, #4]
    51b2:	7213      	strb	r3, [r2, #8]

	isConnected = true;
    51b4:	7403      	strb	r3, [r0, #16]

	__enable_irq();
    51b6:	b662      	cpsie	i
}
    51b8:	bc30      	pop	{r4, r5}
    51ba:	4770      	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    51bc:	685d      	ldr	r5, [r3, #4]
    51be:	6841      	ldr	r1, [r0, #4]
    51c0:	428d      	cmp	r5, r1
    51c2:	d1e4      	bne.n	518e <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    51c4:	8919      	ldrh	r1, [r3, #8]
    51c6:	8903      	ldrh	r3, [r0, #8]
    51c8:	4299      	cmp	r1, r3
    51ca:	d0f4      	beq.n	51b6 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    51cc:	4613      	mov	r3, r2
    51ce:	e7df      	b.n	5190 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    51d0:	60e0      	str	r0, [r4, #12]
    51d2:	e7e1      	b.n	5198 <AudioConnection::connect()+0x2c>

000051d4 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    51d4:	7c03      	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    51d6:	b510      	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    51d8:	2b00      	cmp	r3, #0
    51da:	d032      	beq.n	5242 <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    51dc:	6843      	ldr	r3, [r0, #4]
    51de:	7a42      	ldrb	r2, [r0, #9]
    51e0:	7a5b      	ldrb	r3, [r3, #9]
    51e2:	429a      	cmp	r2, r3
    51e4:	d82d      	bhi.n	5242 <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    51e6:	b672      	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    51e8:	6802      	ldr	r2, [r0, #0]
    51ea:	68d3      	ldr	r3, [r2, #12]
	if (p == NULL) {
    51ec:	b343      	cbz	r3, 5240 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    51ee:	4298      	cmp	r0, r3
    51f0:	d102      	bne.n	51f8 <AudioConnection::disconnect()+0x24>
    51f2:	e029      	b.n	5248 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    51f4:	4298      	cmp	r0, r3
    51f6:	d002      	beq.n	51fe <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    51f8:	68db      	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    51fa:	2b00      	cmp	r3, #0
    51fc:	d1fa      	bne.n	51f4 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    51fe:	6843      	ldr	r3, [r0, #4]
    5200:	4604      	mov	r4, r0
    5202:	7a41      	ldrb	r1, [r0, #9]
    5204:	691b      	ldr	r3, [r3, #16]
    5206:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    520a:	b148      	cbz	r0, 5220 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    520c:	f7ff ff5e 	bl	50cc <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    5210:	b672      	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    5212:	6863      	ldr	r3, [r4, #4]
    5214:	2100      	movs	r1, #0
    5216:	7a62      	ldrb	r2, [r4, #9]
    5218:	691b      	ldr	r3, [r3, #16]
    521a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    521e:	6822      	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    5220:	7a93      	ldrb	r3, [r2, #10]
    5222:	3b01      	subs	r3, #1
    5224:	7293      	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    5226:	6823      	ldr	r3, [r4, #0]
    5228:	7a9a      	ldrb	r2, [r3, #10]
    522a:	b902      	cbnz	r2, 522e <AudioConnection::disconnect()+0x5a>
		src.active = false;
    522c:	721a      	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    522e:	6862      	ldr	r2, [r4, #4]
    5230:	7a93      	ldrb	r3, [r2, #10]
    5232:	3b01      	subs	r3, #1
    5234:	7293      	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    5236:	6863      	ldr	r3, [r4, #4]
    5238:	7a9a      	ldrb	r2, [r3, #10]
    523a:	b11a      	cbz	r2, 5244 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    523c:	2300      	movs	r3, #0
    523e:	7423      	strb	r3, [r4, #16]

	__enable_irq();
    5240:	b662      	cpsie	i
    5242:	bd10      	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    5244:	721a      	strb	r2, [r3, #8]
    5246:	e7f9      	b.n	523c <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    5248:	68c3      	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    524a:	60d3      	str	r3, [r2, #12]
    524c:	e7d7      	b.n	51fe <AudioConnection::disconnect()+0x2a>
    524e:	bf00      	nop

00005250 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    5250:	4b0a      	ldr	r3, [pc, #40]	; (527c <AudioStream::update_setup()+0x2c>)
    5252:	781a      	ldrb	r2, [r3, #0]
    5254:	b97a      	cbnz	r2, 5276 <AudioStream::update_setup()+0x26>
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    5256:	4a0a      	ldr	r2, [pc, #40]	; (5280 <AudioStream::update_setup()+0x30>)
    5258:	490a      	ldr	r1, [pc, #40]	; (5284 <AudioStream::update_setup()+0x34>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    525a:	b430      	push	{r4, r5}
    525c:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    5260:	4c09      	ldr	r4, [pc, #36]	; (5288 <AudioStream::update_setup()+0x38>)
    5262:	25d0      	movs	r5, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    5264:	2040      	movs	r0, #64	; 0x40
	update_scheduled = true;
    5266:	2201      	movs	r2, #1
bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    5268:	4908      	ldr	r1, [pc, #32]	; (528c <AudioStream::update_setup()+0x3c>)

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    526a:	7025      	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    526c:	6008      	str	r0, [r1, #0]
	update_scheduled = true;
	return true;
    526e:	4610      	mov	r0, r2
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
	update_scheduled = true;
    5270:	701a      	strb	r2, [r3, #0]
	return true;
}
    5272:	bc30      	pop	{r4, r5}
    5274:	4770      	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    5276:	2000      	movs	r0, #0
    5278:	4770      	bx	lr
    527a:	bf00      	nop
    527c:	200075bc 	.word	0x200075bc
    5280:	20007800 	.word	0x20007800
    5284:	00004fbd 	.word	0x00004fbd
    5288:	e000e446 	.word	0xe000e446
    528c:	e000e108 	.word	0xe000e108

00005290 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    5290:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    5292:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    5294:	b989      	cbnz	r1, 52ba <DMAChannel::begin(bool)+0x2a>
    5296:	6802      	ldr	r2, [r0, #0]
    5298:	b17a      	cbz	r2, 52ba <DMAChannel::begin(bool)+0x2a>
    529a:	7903      	ldrb	r3, [r0, #4]
    529c:	2b0f      	cmp	r3, #15
    529e:	d80c      	bhi.n	52ba <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    52a0:	4c1f      	ldr	r4, [pc, #124]	; (5320 <DMAChannel::begin(bool)+0x90>)
    52a2:	8821      	ldrh	r1, [r4, #0]
    52a4:	fa41 f503 	asr.w	r5, r1, r3
    52a8:	07ed      	lsls	r5, r5, #31
    52aa:	d508      	bpl.n	52be <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    52ac:	4d1d      	ldr	r5, [pc, #116]	; (5324 <DMAChannel::begin(bool)+0x94>)
    52ae:	441d      	add	r5, r3
    52b0:	ebb2 1f45 	cmp.w	r2, r5, lsl #5
    52b4:	d103      	bne.n	52be <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    52b6:	b662      	cpsie	i
		return;
    52b8:	e00e      	b.n	52d8 <DMAChannel::begin(bool)+0x48>
    52ba:	4c19      	ldr	r4, [pc, #100]	; (5320 <DMAChannel::begin(bool)+0x90>)
    52bc:	8821      	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    52be:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    52c0:	fa41 f203 	asr.w	r2, r1, r3
    52c4:	f012 0201 	ands.w	r2, r2, #1
    52c8:	d008      	beq.n	52dc <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    52ca:	3301      	adds	r3, #1
    52cc:	2b10      	cmp	r3, #16
    52ce:	d1f7      	bne.n	52c0 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    52d0:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    52d2:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    52d4:	7103      	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    52d6:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    52d8:	bcf0      	pop	{r4, r5, r6, r7}
    52da:	4770      	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    52dc:	2501      	movs	r5, #1
    52de:	409d      	lsls	r5, r3
    52e0:	4329      	orrs	r1, r5
    52e2:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    52e4:	b662      	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    52e6:	4e10      	ldr	r6, [pc, #64]	; (5328 <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    52e8:	b2dc      	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    52ea:	490e      	ldr	r1, [pc, #56]	; (5324 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    52ec:	f240 4782 	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    52f0:	7104      	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    52f2:	4419      	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    52f4:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    52f6:	014b      	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    52f8:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    52fc:	490b      	ldr	r1, [pc, #44]	; (532c <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    52fe:	67f5      	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    5300:	600f      	str	r7, [r1, #0]
	DMA_CERQ = ch;
    5302:	768c      	strb	r4, [r1, #26]
	DMA_CERR = ch;
    5304:	778c      	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    5306:	760c      	strb	r4, [r1, #24]
	DMA_CINT = ch;
    5308:	77cc      	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    530a:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    530c:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    530e:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    5310:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    5312:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    5314:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    5316:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    5318:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    531a:	61da      	str	r2, [r3, #28]
}
    531c:	bcf0      	pop	{r4, r5, r6, r7}
    531e:	4770      	bx	lr
    5320:	200075c4 	.word	0x200075c4
    5324:	02007480 	.word	0x02007480
    5328:	400fc000 	.word	0x400fc000
    532c:	400e8000 	.word	0x400e8000

00005330 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    5330:	7903      	ldrb	r3, [r0, #4]
    5332:	2b0f      	cmp	r3, #15
    5334:	d810      	bhi.n	5358 <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    5336:	4a09      	ldr	r2, [pc, #36]	; (535c <DMAChannel::release()+0x2c>)
    5338:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    533a:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    533c:	4908      	ldr	r1, [pc, #32]	; (5360 <DMAChannel::release()+0x30>)
    533e:	2301      	movs	r3, #1
    5340:	7902      	ldrb	r2, [r0, #4]
    5342:	fa03 f202 	lsl.w	r2, r3, r2
    5346:	880b      	ldrh	r3, [r1, #0]
    5348:	ea23 0302 	bic.w	r3, r3, r2
    534c:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    534e:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    5350:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    5352:	2300      	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    5354:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    5356:	6003      	str	r3, [r0, #0]
    5358:	4770      	bx	lr
    535a:	bf00      	nop
    535c:	400e8000 	.word	0x400e8000
    5360:	200075c4 	.word	0x200075c4

00005364 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    5364:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5366:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    536a:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    536c:	7f43      	ldrb	r3, [r0, #29]
    536e:	b933      	cbnz	r3, 537e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    5370:	7f01      	ldrb	r1, [r0, #28]
    5372:	2901      	cmp	r1, #1
    5374:	d008      	beq.n	5388 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    5376:	2903      	cmp	r1, #3
    5378:	d010      	beq.n	539c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    537a:	2301      	movs	r3, #1
    537c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    537e:	b902      	cbnz	r2, 5382 <EventResponder::triggerEventNotImmediate()+0x1e>
    5380:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    5382:	f85d 4b04 	ldr.w	r4, [sp], #4
    5386:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    5388:	4c11      	ldr	r4, [pc, #68]	; (53d0 <EventResponder::triggerEventNotImmediate()+0x6c>)
    538a:	6821      	ldr	r1, [r4, #0]
    538c:	b1a1      	cbz	r1, 53b8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    538e:	4911      	ldr	r1, [pc, #68]	; (53d4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    5390:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    5392:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    5394:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    5396:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    5398:	6158      	str	r0, [r3, #20]
    539a:	e7ee      	b.n	537a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    539c:	4c0e      	ldr	r4, [pc, #56]	; (53d8 <EventResponder::triggerEventNotImmediate()+0x74>)
    539e:	6821      	ldr	r1, [r4, #0]
    53a0:	b181      	cbz	r1, 53c4 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    53a2:	490e      	ldr	r1, [pc, #56]	; (53dc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    53a4:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    53a6:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    53a8:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    53aa:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    53ac:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    53ae:	4b0c      	ldr	r3, [pc, #48]	; (53e0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    53b0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    53b4:	6019      	str	r1, [r3, #0]
    53b6:	e7e0      	b.n	537a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    53b8:	4b06      	ldr	r3, [pc, #24]	; (53d4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    53ba:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    53bc:	6181      	str	r1, [r0, #24]
				firstYield = this;
    53be:	6020      	str	r0, [r4, #0]
				lastYield = this;
    53c0:	6018      	str	r0, [r3, #0]
    53c2:	e7da      	b.n	537a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    53c4:	4b05      	ldr	r3, [pc, #20]	; (53dc <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    53c6:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    53c8:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    53ca:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    53cc:	6018      	str	r0, [r3, #0]
    53ce:	e7ee      	b.n	53ae <EventResponder::triggerEventNotImmediate()+0x4a>
    53d0:	200075d8 	.word	0x200075d8
    53d4:	200075d4 	.word	0x200075d4
    53d8:	200075c8 	.word	0x200075c8
    53dc:	200075cc 	.word	0x200075cc
    53e0:	e000ed04 	.word	0xe000ed04

000053e4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    53e4:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    53e6:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    53ea:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    53ec:	4c0c      	ldr	r4, [pc, #48]	; (5420 <EventResponder::runFromInterrupt()+0x3c>)
    53ee:	6823      	ldr	r3, [r4, #0]
		if (first) {
    53f0:	b18b      	cbz	r3, 5416 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    53f2:	4e0c      	ldr	r6, [pc, #48]	; (5424 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    53f4:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    53f6:	695a      	ldr	r2, [r3, #20]
    53f8:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    53fa:	b17a      	cbz	r2, 541c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    53fc:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    53fe:	b901      	cbnz	r1, 5402 <EventResponder::runFromInterrupt()+0x1e>
    5400:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    5402:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    5404:	4618      	mov	r0, r3
    5406:	689b      	ldr	r3, [r3, #8]
    5408:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    540a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    540e:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5410:	6823      	ldr	r3, [r4, #0]
		if (first) {
    5412:	2b00      	cmp	r3, #0
    5414:	d1ef      	bne.n	53f6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5416:	b901      	cbnz	r1, 541a <EventResponder::runFromInterrupt()+0x36>
    5418:	b662      	cpsie	i
    541a:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    541c:	6032      	str	r2, [r6, #0]
    541e:	e7ee      	b.n	53fe <EventResponder::runFromInterrupt()+0x1a>
    5420:	200075c8 	.word	0x200075c8
    5424:	200075cc 	.word	0x200075cc

00005428 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    5428:	f7ff bfdc 	b.w	53e4 <EventResponder::runFromInterrupt()>

0000542c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    542c:	4a18      	ldr	r2, [pc, #96]	; (5490 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    542e:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    5430:	6814      	ldr	r4, [r2, #0]
    5432:	2c00      	cmp	r4, #0
    5434:	d028      	beq.n	5488 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    5436:	6803      	ldr	r3, [r0, #0]
    5438:	6821      	ldr	r1, [r4, #0]
    543a:	428b      	cmp	r3, r1
    543c:	d20f      	bcs.n	545e <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    543e:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    5440:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    5442:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5444:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    5446:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    5448:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    544a:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    544c:	2302      	movs	r3, #2
}
    544e:	bc30      	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    5450:	7503      	strb	r3, [r0, #20]
}
    5452:	4770      	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    5454:	6003      	str	r3, [r0, #0]
    5456:	4614      	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    5458:	6811      	ldr	r1, [r2, #0]
    545a:	428b      	cmp	r3, r1
    545c:	d308      	bcc.n	5470 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    545e:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    5460:	1a5b      	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5462:	2a00      	cmp	r2, #0
    5464:	d1f6      	bne.n	5454 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    5466:	6082      	str	r2, [r0, #8]
		_prev = timer;
    5468:	60c4      	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    546a:	6003      	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    546c:	60a0      	str	r0, [r4, #8]
    546e:	e7ed      	b.n	544c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    5470:	68d5      	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    5472:	1acb      	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    5474:	6082      	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    5476:	2202      	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    5478:	60c5      	str	r5, [r0, #12]
				timer->_prev = this;
    547a:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    547c:	68c1      	ldr	r1, [r0, #12]
    547e:	6088      	str	r0, [r1, #8]
				timer->_ms -= _ms;
    5480:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    5482:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    5484:	bc30      	pop	{r4, r5}
    5486:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    5488:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    548a:	60c4      	str	r4, [r0, #12]
		listActive = this;
    548c:	6010      	str	r0, [r2, #0]
    548e:	e7dd      	b.n	544c <MillisTimer::addToActiveList()+0x20>
    5490:	200075d0 	.word	0x200075d0

00005494 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    5494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    5496:	4e22      	ldr	r6, [pc, #136]	; (5520 <MillisTimer::runFromTimer()+0x8c>)
    5498:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    549a:	b32c      	cbz	r4, 54e8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    549c:	6823      	ldr	r3, [r4, #0]
    549e:	2b00      	cmp	r3, #0
    54a0:	d13a      	bne.n	5518 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    54a2:	461d      	mov	r5, r3
    54a4:	4f1f      	ldr	r7, [pc, #124]	; (5524 <MillisTimer::runFromTimer()+0x90>)
    54a6:	e004      	b.n	54b2 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    54a8:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    54aa:	b1ec      	cbz	r4, 54e8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    54ac:	6823      	ldr	r3, [r4, #0]
    54ae:	2b00      	cmp	r3, #0
    54b0:	d132      	bne.n	5518 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    54b2:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    54b4:	b103      	cbz	r3, 54b8 <MillisTimer::runFromTimer()+0x24>
    54b6:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    54b8:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    54ba:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    54bc:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    54be:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    54c0:	681b      	ldr	r3, [r3, #0]
    54c2:	42bb      	cmp	r3, r7
    54c4:	d121      	bne.n	550a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    54c6:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    54c8:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    54ca:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    54cc:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    54ce:	d020      	beq.n	5512 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    54d0:	f7ff ff48 	bl	5364 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    54d4:	6863      	ldr	r3, [r4, #4]
    54d6:	2b00      	cmp	r3, #0
    54d8:	d0e6      	beq.n	54a8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    54da:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    54dc:	4620      	mov	r0, r4
    54de:	f7ff ffa5 	bl	542c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    54e2:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    54e4:	2c00      	cmp	r4, #0
    54e6:	d1e1      	bne.n	54ac <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    54e8:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    54ec:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    54ee:	4a0e      	ldr	r2, [pc, #56]	; (5528 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    54f0:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    54f2:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    54f4:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    54f6:	b903      	cbnz	r3, 54fa <MillisTimer::runFromTimer()+0x66>
    54f8:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    54fa:	b128      	cbz	r0, 5508 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    54fc:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    54fe:	f7ff ff95 	bl	542c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    5502:	4620      	mov	r0, r4
    5504:	2800      	cmp	r0, #0
    5506:	d1f9      	bne.n	54fc <MillisTimer::runFromTimer()+0x68>
    5508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    550a:	4622      	mov	r2, r4
    550c:	2100      	movs	r1, #0
    550e:	4798      	blx	r3
    5510:	e7e0      	b.n	54d4 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5512:	6883      	ldr	r3, [r0, #8]
    5514:	4798      	blx	r3
    5516:	e7dd      	b.n	54d4 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    5518:	3b01      	subs	r3, #1
    551a:	6023      	str	r3, [r4, #0]
			break;
    551c:	e7e4      	b.n	54e8 <MillisTimer::runFromTimer()+0x54>
    551e:	bf00      	nop
    5520:	200075d0 	.word	0x200075d0
    5524:	00001da9 	.word	0x00001da9
    5528:	200075e0 	.word	0x200075e0

0000552c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    552c:	4a04      	ldr	r2, [pc, #16]	; (5540 <systick_isr+0x14>)
    552e:	4b05      	ldr	r3, [pc, #20]	; (5544 <systick_isr+0x18>)
    5530:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    5532:	4a05      	ldr	r2, [pc, #20]	; (5548 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    5534:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    5536:	6813      	ldr	r3, [r2, #0]
    5538:	3301      	adds	r3, #1
    553a:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    553c:	f7ff bfaa 	b.w	5494 <MillisTimer::runFromTimer()>
    5540:	e0001004 	.word	0xe0001004
    5544:	200072fc 	.word	0x200072fc
    5548:	20007304 	.word	0x20007304

0000554c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    554c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    554e:	f7fb f97d 	bl	84c <setup>
	while (1) {
		loop();
    5552:	f7fb fa25 	bl	9a0 <loop>
		yield();
    5556:	f000 f93b 	bl	57d0 <yield>
    555a:	e7fa      	b.n	5552 <main+0x6>

0000555c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    555e:	460e      	mov	r6, r1
    5560:	b171      	cbz	r1, 5580 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    5562:	b17a      	cbz	r2, 5584 <Print::write(unsigned char const*, unsigned int)+0x28>
    5564:	4607      	mov	r7, r0
    5566:	4614      	mov	r4, r2
    5568:	2500      	movs	r5, #0
    556a:	683b      	ldr	r3, [r7, #0]
    556c:	4638      	mov	r0, r7
    556e:	f816 1b01 	ldrb.w	r1, [r6], #1
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	4798      	blx	r3
    5576:	3c01      	subs	r4, #1
    5578:	4405      	add	r5, r0
    557a:	d1f6      	bne.n	556a <Print::write(unsigned char const*, unsigned int)+0xe>
    557c:	4628      	mov	r0, r5
    557e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    5580:	4608      	mov	r0, r1
    5582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5584:	4610      	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    5586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005588 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    5588:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    558a:	4c06      	ldr	r4, [pc, #24]	; (55a4 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    558c:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    558e:	6803      	ldr	r3, [r0, #0]
    5590:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    5592:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    5594:	a901      	add	r1, sp, #4
    5596:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    5598:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    559c:	4798      	blx	r3
}
    559e:	b002      	add	sp, #8
    55a0:	bd10      	pop	{r4, pc}
    55a2:	bf00      	nop
    55a4:	200014d8 	.word	0x200014d8

000055a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    55a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55aa:	4606      	mov	r6, r0
    55ac:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    55ae:	2a00      	cmp	r2, #0
    55b0:	d033      	beq.n	561a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    55b2:	2a01      	cmp	r2, #1
    55b4:	bf08      	it	eq
    55b6:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    55b8:	b351      	cbz	r1, 5610 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    55ba:	2521      	movs	r5, #33	; 0x21
    55bc:	e000      	b.n	55c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    55be:	b2fd      	uxtb	r5, r7
    55c0:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    55c2:	fbb1 f4f2 	udiv	r4, r1, r2
    55c6:	fb02 1114 	mls	r1, r2, r4, r1
    55ca:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    55cc:	2909      	cmp	r1, #9
    55ce:	f100 0137 	add.w	r1, r0, #55	; 0x37
    55d2:	f100 0030 	add.w	r0, r0, #48	; 0x30
    55d6:	bf88      	it	hi
    55d8:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    55da:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    55dc:	ac0a      	add	r4, sp, #40	; 0x28
    55de:	bf98      	it	ls
    55e0:	b2c0      	uxtbls	r0, r0
    55e2:	442c      	add	r4, r5
    55e4:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    55e8:	2900      	cmp	r1, #0
    55ea:	d1e8      	bne.n	55be <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    55ec:	b133      	cbz	r3, 55fc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    55ee:	3d01      	subs	r5, #1
		buf[i] = '-';
    55f0:	ab0a      	add	r3, sp, #40	; 0x28
    55f2:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    55f4:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    55f6:	442b      	add	r3, r5
    55f8:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    55fc:	6833      	ldr	r3, [r6, #0]
    55fe:	a901      	add	r1, sp, #4
    5600:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    5604:	4630      	mov	r0, r6
    5606:	4429      	add	r1, r5
    5608:	685b      	ldr	r3, [r3, #4]
    560a:	4798      	blx	r3
}
    560c:	b00b      	add	sp, #44	; 0x2c
    560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    5610:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    5612:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    5614:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    5618:	e7e8      	b.n	55ec <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    561a:	6803      	ldr	r3, [r0, #0]
    561c:	b2c9      	uxtb	r1, r1
    561e:	681b      	ldr	r3, [r3, #0]
    5620:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    5622:	b00b      	add	sp, #44	; 0x2c
    5624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5626:	bf00      	nop

00005628 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    5628:	eeb4 0b40 	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    562c:	b570      	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    562e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    5632:	4605      	mov	r5, r0
    5634:	ed2d 8b02 	vpush	{d8}
    5638:	b086      	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    563a:	f180 8091 	bvs.w	5760 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    563e:	eeb0 7bc0 	vabs.f64	d7, d0
    5642:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 5770 <Print::printFloat(double, unsigned char)+0x148>
    5646:	eeb4 7b46 	vcmp.f64	d7, d6
    564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    564e:	dd0a      	ble.n	5666 <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    5650:	6803      	ldr	r3, [r0, #0]
    5652:	2203      	movs	r2, #3
    5654:	494e      	ldr	r1, [pc, #312]	; (5790 <Print::printFloat(double, unsigned char)+0x168>)
    5656:	685b      	ldr	r3, [r3, #4]
    5658:	4798      	blx	r3
    565a:	4606      	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    565c:	4630      	mov	r0, r6
    565e:	b006      	add	sp, #24
    5660:	ecbd 8b02 	vpop	{d8}
    5664:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    5666:	ed9f 7b44 	vldr	d7, [pc, #272]	; 5778 <Print::printFloat(double, unsigned char)+0x150>
    566a:	eeb4 0bc7 	vcmpe.f64	d0, d7
    566e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5672:	dc58      	bgt.n	5726 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    5674:	ed9f 7b42 	vldr	d7, [pc, #264]	; 5780 <Print::printFloat(double, unsigned char)+0x158>
    5678:	eeb4 0bc7 	vcmpe.f64	d0, d7
    567c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5680:	d451      	bmi.n	5726 <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    5682:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    5686:	460c      	mov	r4, r1
    5688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    568c:	d456      	bmi.n	573c <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    568e:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    5690:	2c00      	cmp	r4, #0
    5692:	d057      	beq.n	5744 <Print::printFloat(double, unsigned char)+0x11c>
    5694:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
    5698:	2200      	movs	r2, #0
		rounding *= 0.1;
    569a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 5788 <Print::printFloat(double, unsigned char)+0x160>
    569e:	3201      	adds	r2, #1
    56a0:	ee28 8b07 	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    56a4:	b2d1      	uxtb	r1, r2
    56a6:	428c      	cmp	r4, r1
    56a8:	d8f9      	bhi.n	569e <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    56aa:	ee30 0b08 	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    56ae:	220a      	movs	r2, #10
    56b0:	4628      	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    56b2:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    56b6:	eeb8 8b67 	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    56ba:	ee17 1a90 	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    56be:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    56c2:	f7ff ff71 	bl	55a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    56c6:	2c0f      	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    56c8:	f04f 0201 	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    56cc:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    56d0:	f04f 032e 	mov.w	r3, #46	; 0x2e
    56d4:	bf28      	it	cs
    56d6:	240f      	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    56d8:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    56da:	f88d 3008 	strb.w	r3, [sp, #8]
    56de:	4414      	add	r4, r2
    56e0:	b2e4      	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    56e2:	ee28 0b07 	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    56e6:	1c53      	adds	r3, r2, #1
    56e8:	a906      	add	r1, sp, #24
    56ea:	4411      	add	r1, r2
    56ec:	b2da      	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    56ee:	42a2      	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    56f0:	eefc 6bc0 	vcvt.u32.f64	s13, d0
    56f4:	edcd 6a01 	vstr	s13, [sp, #4]
    56f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    56fc:	ee06 3a90 	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    5700:	f103 0330 	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    5704:	eeb8 8be6 	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    5708:	f801 3c10 	strb.w	r3, [r1, #-16]
			remainder -= n; 
    570c:	ee30 8b48 	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    5710:	d1e7      	bne.n	56e2 <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    5712:	682b      	ldr	r3, [r5, #0]
    5714:	4628      	mov	r0, r5
    5716:	a902      	add	r1, sp, #8
    5718:	685b      	ldr	r3, [r3, #4]
    571a:	4798      	blx	r3
	}
	return count;
}
    571c:	4630      	mov	r0, r6
    571e:	b006      	add	sp, #24
    5720:	ecbd 8b02 	vpop	{d8}
    5724:	bd70      	pop	{r4, r5, r6, pc}
    5726:	682b      	ldr	r3, [r5, #0]
    5728:	2203      	movs	r2, #3
    572a:	491a      	ldr	r1, [pc, #104]	; (5794 <Print::printFloat(double, unsigned char)+0x16c>)
    572c:	685b      	ldr	r3, [r3, #4]
    572e:	4798      	blx	r3
    5730:	4606      	mov	r6, r0
    5732:	4630      	mov	r0, r6
    5734:	b006      	add	sp, #24
    5736:	ecbd 8b02 	vpop	{d8}
    573a:	bd70      	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    573c:	eeb1 0b40 	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    5740:	2301      	movs	r3, #1
    5742:	e7a5      	b.n	5690 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    5744:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    5748:	4628      	mov	r0, r5
    574a:	220a      	movs	r2, #10
    574c:	ee30 0b07 	vadd.f64	d0, d0, d7
    5750:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    5754:	ee17 1a90 	vmov	r1, s15
    5758:	f7ff ff26 	bl	55a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    575c:	4606      	mov	r6, r0
    575e:	e77d      	b.n	565c <Print::printFloat(double, unsigned char)+0x34>
    5760:	6803      	ldr	r3, [r0, #0]
    5762:	2203      	movs	r2, #3
    5764:	490c      	ldr	r1, [pc, #48]	; (5798 <Print::printFloat(double, unsigned char)+0x170>)
    5766:	685b      	ldr	r3, [r3, #4]
    5768:	4798      	blx	r3
    576a:	4606      	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    576c:	e776      	b.n	565c <Print::printFloat(double, unsigned char)+0x34>
    576e:	bf00      	nop
    5770:	ffffffff 	.word	0xffffffff
    5774:	7fefffff 	.word	0x7fefffff
    5778:	e0000000 	.word	0xe0000000
    577c:	41efffff 	.word	0x41efffff
    5780:	e0000000 	.word	0xe0000000
    5784:	c1efffff 	.word	0xc1efffff
    5788:	9999999a 	.word	0x9999999a
    578c:	3fb99999 	.word	0x3fb99999
    5790:	200014e4 	.word	0x200014e4
    5794:	200014e0 	.word	0x200014e0
    5798:	200014dc 	.word	0x200014dc

0000579c <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    579c:	f7ff bb2c 	b.w	4df8 <usb_serial_flush_input>

000057a0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    57a0:	f7ff bb02 	b.w	4da8 <usb_serial_peekchar>

000057a4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    57a4:	f7ff bb62 	b.w	4e6c <usb_serial_getchar>

000057a8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    57a8:	f7ff bb20 	b.w	4dec <usb_serial_available>

000057ac <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    57ac:	f7ff bbb6 	b.w	4f1c <usb_serial_flush_output>

000057b0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    57b0:	f7ff bb8e 	b.w	4ed0 <usb_serial_write_buffer_free>

000057b4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    57b4:	4608      	mov	r0, r1
    57b6:	4611      	mov	r1, r2
    57b8:	f7ff bb7e 	b.w	4eb8 <usb_serial_write>

000057bc <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    57bc:	4608      	mov	r0, r1
    57be:	f7ff bb65 	b.w	4e8c <usb_serial_putchar>
    57c2:	bf00      	nop

000057c4 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    57c4:	4b01      	ldr	r3, [pc, #4]	; (57cc <serialEvent()+0x8>)
    57c6:	2200      	movs	r2, #0
    57c8:	701a      	strb	r2, [r3, #0]
    57ca:	4770      	bx	lr
    57cc:	20004e16 	.word	0x20004e16

000057d0 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    57d0:	b570      	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    57d2:	4c21      	ldr	r4, [pc, #132]	; (5858 <yield+0x88>)
    57d4:	7823      	ldrb	r3, [r4, #0]
    57d6:	b983      	cbnz	r3, 57fa <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    57d8:	4b20      	ldr	r3, [pc, #128]	; (585c <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    57da:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    57dc:	781b      	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    57de:	7022      	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    57e0:	bb1b      	cbnz	r3, 582a <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    57e2:	4b1f      	ldr	r3, [pc, #124]	; (5860 <yield+0x90>)
    57e4:	781b      	ldrb	r3, [r3, #0]
    57e6:	2b00      	cmp	r3, #0
    57e8:	d129      	bne.n	583e <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    57ea:	4b1e      	ldr	r3, [pc, #120]	; (5864 <yield+0x94>)

	running = 0;
    57ec:	2100      	movs	r1, #0
    57ee:	681a      	ldr	r2, [r3, #0]
    57f0:	7021      	strb	r1, [r4, #0]
    57f2:	b112      	cbz	r2, 57fa <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    57f4:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    57f8:	b102      	cbz	r2, 57fc <yield+0x2c>
    57fa:	bd70      	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    57fc:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    5800:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    5802:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    5804:	b1f2      	cbz	r2, 5844 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    5806:	4c18      	ldr	r4, [pc, #96]	; (5868 <yield+0x98>)
    5808:	7821      	ldrb	r1, [r4, #0]
    580a:	b9d9      	cbnz	r1, 5844 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    580c:	2601      	movs	r6, #1
		firstYield = first->_next;
    580e:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    5810:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    5812:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    5814:	b1d5      	cbz	r5, 584c <yield+0x7c>
			firstYield->_prev = nullptr;
    5816:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5818:	b900      	cbnz	r0, 581c <yield+0x4c>
    581a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    581c:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    581e:	6893      	ldr	r3, [r2, #8]
    5820:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    5822:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    5824:	4798      	blx	r3
		runningFromYield = false;
    5826:	7025      	strb	r5, [r4, #0]
    5828:	bd70      	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    582a:	f7ff fadf 	bl	4dec <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    582e:	2800      	cmp	r0, #0
    5830:	d0d7      	beq.n	57e2 <yield+0x12>
    5832:	f7ff ffc7 	bl	57c4 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    5836:	4b0a      	ldr	r3, [pc, #40]	; (5860 <yield+0x90>)
    5838:	781b      	ldrb	r3, [r3, #0]
    583a:	2b00      	cmp	r3, #0
    583c:	d0d5      	beq.n	57ea <yield+0x1a>
    583e:	f000 f83f 	bl	58c0 <HardwareSerial::processSerialEvents()>
    5842:	e7d2      	b.n	57ea <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5844:	2800      	cmp	r0, #0
    5846:	d1d8      	bne.n	57fa <yield+0x2a>
    5848:	b662      	cpsie	i
    584a:	bd70      	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    584c:	4b07      	ldr	r3, [pc, #28]	; (586c <yield+0x9c>)
    584e:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5850:	2800      	cmp	r0, #0
    5852:	d1e3      	bne.n	581c <yield+0x4c>
    5854:	e7e1      	b.n	581a <yield+0x4a>
    5856:	bf00      	nop
    5858:	200075e4 	.word	0x200075e4
    585c:	20004e16 	.word	0x20004e16
    5860:	20007604 	.word	0x20007604
    5864:	200075d8 	.word	0x200075d8
    5868:	200075dc 	.word	0x200075dc
    586c:	200075d4 	.word	0x200075d4

00005870 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    5870:	b4f0      	push	{r4, r5, r6, r7}
    5872:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    5874:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    5876:	4637      	mov	r7, r6
    5878:	e000      	b.n	587c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    587a:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    587c:	fbb0 f3f2 	udiv	r3, r0, r2
    5880:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5884:	f100 0437 	add.w	r4, r0, #55	; 0x37
    5888:	2809      	cmp	r0, #9
    588a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    588e:	b2e4      	uxtb	r4, r4
    5890:	bf98      	it	ls
    5892:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    5894:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5896:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    589a:	2b00      	cmp	r3, #0
    589c:	d1ed      	bne.n	587a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    589e:	194a      	adds	r2, r1, r5
    58a0:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    58a2:	b14d      	cbz	r5, 58b8 <ultoa+0x48>
    58a4:	3301      	adds	r3, #1
		t = buf[j];
    58a6:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    58aa:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    58ac:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    58ae:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    58b0:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    58b2:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    58b6:	dbf5      	blt.n	58a4 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    58b8:	4608      	mov	r0, r1
    58ba:	bcf0      	pop	{r4, r5, r6, r7}
    58bc:	4770      	bx	lr
    58be:	bf00      	nop

000058c0 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    58c0:	b538      	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    58c2:	4b07      	ldr	r3, [pc, #28]	; (58e0 <HardwareSerial::processSerialEvents()+0x20>)
    58c4:	781c      	ldrb	r4, [r3, #0]
    58c6:	b14c      	cbz	r4, 58dc <HardwareSerial::processSerialEvents()+0x1c>
    58c8:	4d06      	ldr	r5, [pc, #24]	; (58e4 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    58ca:	f855 3f04 	ldr.w	r3, [r5, #4]!
    58ce:	2b00      	cmp	r3, #0
    58d0:	d0fb      	beq.n	58ca <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    58d2:	4798      	blx	r3
			if (--handlers_still_to_process == 0) return;
    58d4:	1e63      	subs	r3, r4, #1
    58d6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    58da:	d1f6      	bne.n	58ca <HardwareSerial::processSerialEvents()+0xa>
    58dc:	bd38      	pop	{r3, r4, r5, pc}
    58de:	bf00      	nop
    58e0:	20007604 	.word	0x20007604
    58e4:	200075e4 	.word	0x200075e4

000058e8 <arm_radix4_butterfly_q15>:
    58e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58ec:	469b      	mov	fp, r3
    58ee:	b091      	sub	sp, #68	; 0x44
    58f0:	088b      	lsrs	r3, r1, #2
    58f2:	4606      	mov	r6, r0
    58f4:	900e      	str	r0, [sp, #56]	; 0x38
    58f6:	2500      	movs	r5, #0
    58f8:	4618      	mov	r0, r3
    58fa:	9103      	str	r1, [sp, #12]
    58fc:	930f      	str	r3, [sp, #60]	; 0x3c
    58fe:	4637      	mov	r7, r6
    5900:	0081      	lsls	r1, r0, #2
    5902:	4682      	mov	sl, r0
    5904:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    5908:	4696      	mov	lr, r2
    590a:	1870      	adds	r0, r6, r1
    590c:	9207      	str	r2, [sp, #28]
    590e:	009b      	lsls	r3, r3, #2
    5910:	462c      	mov	r4, r5
    5912:	1846      	adds	r6, r0, r1
    5914:	462a      	mov	r2, r5
    5916:	9304      	str	r3, [sp, #16]
    5918:	4431      	add	r1, r6
    591a:	9601      	str	r6, [sp, #4]
    591c:	f8cd b008 	str.w	fp, [sp, #8]
    5920:	683b      	ldr	r3, [r7, #0]
    5922:	fa93 fc22 	shadd16	ip, r3, r2
    5926:	fa9c fc22 	shadd16	ip, ip, r2
    592a:	9b01      	ldr	r3, [sp, #4]
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	fa93 f322 	shadd16	r3, r3, r2
    5932:	fa93 f322 	shadd16	r3, r3, r2
    5936:	fa9c f813 	qadd16	r8, ip, r3
    593a:	fadc fc13 	qsub16	ip, ip, r3
    593e:	6803      	ldr	r3, [r0, #0]
    5940:	fa93 f322 	shadd16	r3, r3, r2
    5944:	fa93 f922 	shadd16	r9, r3, r2
    5948:	680b      	ldr	r3, [r1, #0]
    594a:	fa93 f322 	shadd16	r3, r3, r2
    594e:	fa93 f322 	shadd16	r3, r3, r2
    5952:	fa99 f313 	qadd16	r3, r9, r3
    5956:	fa98 f923 	shadd16	r9, r8, r3
    595a:	f847 9b04 	str.w	r9, [r7], #4
    595e:	fad8 f313 	qsub16	r3, r8, r3
    5962:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    5966:	fb29 fb03 	smuad	fp, r9, r3
    596a:	fb49 f913 	smusdx	r9, r9, r3
    596e:	6803      	ldr	r3, [r0, #0]
    5970:	fa93 f322 	shadd16	r3, r3, r2
    5974:	fa93 f822 	shadd16	r8, r3, r2
    5978:	4b78      	ldr	r3, [pc, #480]	; (5b5c <arm_radix4_butterfly_q15+0x274>)
    597a:	ea09 0303 	and.w	r3, r9, r3
    597e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    5982:	f840 3b04 	str.w	r3, [r0], #4
    5986:	680b      	ldr	r3, [r1, #0]
    5988:	fa93 f322 	shadd16	r3, r3, r2
    598c:	fa93 f322 	shadd16	r3, r3, r2
    5990:	fad8 f313 	qsub16	r3, r8, r3
    5994:	faac f913 	qasx	r9, ip, r3
    5998:	faec fc13 	qsax	ip, ip, r3
    599c:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    59a0:	fb23 f80c 	smuad	r8, r3, ip
    59a4:	fb43 fc1c 	smusdx	ip, r3, ip
    59a8:	4b6c      	ldr	r3, [pc, #432]	; (5b5c <arm_radix4_butterfly_q15+0x274>)
    59aa:	9e01      	ldr	r6, [sp, #4]
    59ac:	ea0c 0303 	and.w	r3, ip, r3
    59b0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    59b4:	f846 3b04 	str.w	r3, [r6], #4
    59b8:	9601      	str	r6, [sp, #4]
    59ba:	462e      	mov	r6, r5
    59bc:	f85e 3005 	ldr.w	r3, [lr, r5]
    59c0:	fb23 fc09 	smuad	ip, r3, r9
    59c4:	fb43 f919 	smusdx	r9, r3, r9
    59c8:	4b64      	ldr	r3, [pc, #400]	; (5b5c <arm_radix4_butterfly_q15+0x274>)
    59ca:	f1ba 0a01 	subs.w	sl, sl, #1
    59ce:	9d02      	ldr	r5, [sp, #8]
    59d0:	ea09 0303 	and.w	r3, r9, r3
    59d4:	442c      	add	r4, r5
    59d6:	9d04      	ldr	r5, [sp, #16]
    59d8:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    59dc:	442e      	add	r6, r5
    59de:	f841 3b04 	str.w	r3, [r1], #4
    59e2:	4635      	mov	r5, r6
    59e4:	d19c      	bne.n	5920 <arm_radix4_butterfly_q15+0x38>
    59e6:	f8dd b008 	ldr.w	fp, [sp, #8]
    59ea:	ea4f 038b 	mov.w	r3, fp, lsl #2
    59ee:	9309      	str	r3, [sp, #36]	; 0x24
    59f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    59f2:	2b04      	cmp	r3, #4
    59f4:	f240 8086 	bls.w	5b04 <arm_radix4_butterfly_q15+0x21c>
    59f8:	f8cd a010 	str.w	sl, [sp, #16]
    59fc:	930c      	str	r3, [sp, #48]	; 0x30
    59fe:	9302      	str	r3, [sp, #8]
    5a00:	9a02      	ldr	r2, [sp, #8]
    5a02:	2100      	movs	r1, #0
    5a04:	0893      	lsrs	r3, r2, #2
    5a06:	9105      	str	r1, [sp, #20]
    5a08:	0097      	lsls	r7, r2, #2
    5a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5a0c:	930d      	str	r3, [sp, #52]	; 0x34
    5a0e:	9206      	str	r2, [sp, #24]
    5a10:	1e5a      	subs	r2, r3, #1
    5a12:	009b      	lsls	r3, r3, #2
    5a14:	9108      	str	r1, [sp, #32]
    5a16:	920a      	str	r2, [sp, #40]	; 0x28
    5a18:	930b      	str	r3, [sp, #44]	; 0x2c
    5a1a:	9907      	ldr	r1, [sp, #28]
    5a1c:	9a08      	ldr	r2, [sp, #32]
    5a1e:	460d      	mov	r5, r1
    5a20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5a22:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    5a26:	4611      	mov	r1, r2
    5a28:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    5a2c:	9a07      	ldr	r2, [sp, #28]
    5a2e:	9e06      	ldr	r6, [sp, #24]
    5a30:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    5a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a36:	1930      	adds	r0, r6, r4
    5a38:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    5a3c:	18cb      	adds	r3, r1, r3
    5a3e:	9a05      	ldr	r2, [sp, #20]
    5a40:	1825      	adds	r5, r4, r0
    5a42:	9308      	str	r3, [sp, #32]
    5a44:	9b03      	ldr	r3, [sp, #12]
    5a46:	442c      	add	r4, r5
    5a48:	4293      	cmp	r3, r2
    5a4a:	d946      	bls.n	5ada <arm_radix4_butterfly_q15+0x1f2>
    5a4c:	9b02      	ldr	r3, [sp, #8]
    5a4e:	9501      	str	r5, [sp, #4]
    5a50:	eb03 0e02 	add.w	lr, r3, r2
    5a54:	9a01      	ldr	r2, [sp, #4]
    5a56:	6833      	ldr	r3, [r6, #0]
    5a58:	6812      	ldr	r2, [r2, #0]
    5a5a:	fa93 fa12 	qadd16	sl, r3, r2
    5a5e:	fad3 f312 	qsub16	r3, r3, r2
    5a62:	6801      	ldr	r1, [r0, #0]
    5a64:	6822      	ldr	r2, [r4, #0]
    5a66:	fa91 f112 	qadd16	r1, r1, r2
    5a6a:	fa9a f221 	shadd16	r2, sl, r1
    5a6e:	9d04      	ldr	r5, [sp, #16]
    5a70:	fa92 f225 	shadd16	r2, r2, r5
    5a74:	6032      	str	r2, [r6, #0]
    5a76:	443e      	add	r6, r7
    5a78:	fada f121 	shsub16	r1, sl, r1
    5a7c:	fb28 fb01 	smuad	fp, r8, r1
    5a80:	fb48 f211 	smusdx	r2, r8, r1
    5a84:	4935      	ldr	r1, [pc, #212]	; (5b5c <arm_radix4_butterfly_q15+0x274>)
    5a86:	f8d0 a000 	ldr.w	sl, [r0]
    5a8a:	4011      	ands	r1, r2
    5a8c:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    5a90:	6001      	str	r1, [r0, #0]
    5a92:	4438      	add	r0, r7
    5a94:	6822      	ldr	r2, [r4, #0]
    5a96:	fada f212 	qsub16	r2, sl, r2
    5a9a:	faa3 f122 	shasx	r1, r3, r2
    5a9e:	fae3 f322 	shsax	r3, r3, r2
    5aa2:	fb2c fb03 	smuad	fp, ip, r3
    5aa6:	fb4c f313 	smusdx	r3, ip, r3
    5aaa:	4a2c      	ldr	r2, [pc, #176]	; (5b5c <arm_radix4_butterfly_q15+0x274>)
    5aac:	401a      	ands	r2, r3
    5aae:	9b01      	ldr	r3, [sp, #4]
    5ab0:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    5ab4:	601a      	str	r2, [r3, #0]
    5ab6:	443b      	add	r3, r7
    5ab8:	9301      	str	r3, [sp, #4]
    5aba:	fb29 f201 	smuad	r2, r9, r1
    5abe:	fb49 f111 	smusdx	r1, r9, r1
    5ac2:	4b26      	ldr	r3, [pc, #152]	; (5b5c <arm_radix4_butterfly_q15+0x274>)
    5ac4:	46f2      	mov	sl, lr
    5ac6:	9d02      	ldr	r5, [sp, #8]
    5ac8:	400b      	ands	r3, r1
    5aca:	44ae      	add	lr, r5
    5acc:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    5ad0:	6023      	str	r3, [r4, #0]
    5ad2:	443c      	add	r4, r7
    5ad4:	9b03      	ldr	r3, [sp, #12]
    5ad6:	4553      	cmp	r3, sl
    5ad8:	d8bc      	bhi.n	5a54 <arm_radix4_butterfly_q15+0x16c>
    5ada:	9a06      	ldr	r2, [sp, #24]
    5adc:	9b05      	ldr	r3, [sp, #20]
    5ade:	3204      	adds	r2, #4
    5ae0:	3301      	adds	r3, #1
    5ae2:	9206      	str	r2, [sp, #24]
    5ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5ae6:	9305      	str	r3, [sp, #20]
    5ae8:	4293      	cmp	r3, r2
    5aea:	d996      	bls.n	5a1a <arm_radix4_butterfly_q15+0x132>
    5aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5aee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5af0:	089b      	lsrs	r3, r3, #2
    5af2:	9202      	str	r2, [sp, #8]
    5af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5af6:	2b04      	cmp	r3, #4
    5af8:	930c      	str	r3, [sp, #48]	; 0x30
    5afa:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5afe:	9209      	str	r2, [sp, #36]	; 0x24
    5b00:	f63f af7e 	bhi.w	5a00 <arm_radix4_butterfly_q15+0x118>
    5b04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    5b06:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    5b08:	3410      	adds	r4, #16
    5b0a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5b0e:	f854 7c08 	ldr.w	r7, [r4, #-8]
    5b12:	fa93 f117 	qadd16	r1, r3, r7
    5b16:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    5b1a:	f854 0c04 	ldr.w	r0, [r4, #-4]
    5b1e:	fa92 f510 	qadd16	r5, r2, r0
    5b22:	fa91 f525 	shadd16	r5, r1, r5
    5b26:	f844 5c10 	str.w	r5, [r4, #-16]
    5b2a:	fa92 f510 	qadd16	r5, r2, r0
    5b2e:	fad1 f125 	shsub16	r1, r1, r5
    5b32:	f844 1c0c 	str.w	r1, [r4, #-12]
    5b36:	fad3 f317 	qsub16	r3, r3, r7
    5b3a:	fad2 f210 	qsub16	r2, r2, r0
    5b3e:	fae3 f122 	shsax	r1, r3, r2
    5b42:	f844 1c08 	str.w	r1, [r4, #-8]
    5b46:	faa3 f322 	shasx	r3, r3, r2
    5b4a:	3e01      	subs	r6, #1
    5b4c:	f844 3c04 	str.w	r3, [r4, #-4]
    5b50:	f104 0410 	add.w	r4, r4, #16
    5b54:	d1d9      	bne.n	5b0a <arm_radix4_butterfly_q15+0x222>
    5b56:	b011      	add	sp, #68	; 0x44
    5b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b5c:	ffff0000 	.word	0xffff0000

00005b60 <arm_radix4_butterfly_inverse_q15>:
    5b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b64:	469b      	mov	fp, r3
    5b66:	b091      	sub	sp, #68	; 0x44
    5b68:	088b      	lsrs	r3, r1, #2
    5b6a:	4606      	mov	r6, r0
    5b6c:	900e      	str	r0, [sp, #56]	; 0x38
    5b6e:	2500      	movs	r5, #0
    5b70:	4618      	mov	r0, r3
    5b72:	9103      	str	r1, [sp, #12]
    5b74:	930f      	str	r3, [sp, #60]	; 0x3c
    5b76:	4637      	mov	r7, r6
    5b78:	0081      	lsls	r1, r0, #2
    5b7a:	4682      	mov	sl, r0
    5b7c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    5b80:	4696      	mov	lr, r2
    5b82:	1870      	adds	r0, r6, r1
    5b84:	9207      	str	r2, [sp, #28]
    5b86:	009b      	lsls	r3, r3, #2
    5b88:	462c      	mov	r4, r5
    5b8a:	1846      	adds	r6, r0, r1
    5b8c:	462a      	mov	r2, r5
    5b8e:	9304      	str	r3, [sp, #16]
    5b90:	4431      	add	r1, r6
    5b92:	9601      	str	r6, [sp, #4]
    5b94:	f8cd b008 	str.w	fp, [sp, #8]
    5b98:	683b      	ldr	r3, [r7, #0]
    5b9a:	fa93 fc22 	shadd16	ip, r3, r2
    5b9e:	fa9c fc22 	shadd16	ip, ip, r2
    5ba2:	9b01      	ldr	r3, [sp, #4]
    5ba4:	681b      	ldr	r3, [r3, #0]
    5ba6:	fa93 f322 	shadd16	r3, r3, r2
    5baa:	fa93 f322 	shadd16	r3, r3, r2
    5bae:	fa9c f813 	qadd16	r8, ip, r3
    5bb2:	fadc fc13 	qsub16	ip, ip, r3
    5bb6:	6803      	ldr	r3, [r0, #0]
    5bb8:	fa93 f322 	shadd16	r3, r3, r2
    5bbc:	fa93 f922 	shadd16	r9, r3, r2
    5bc0:	680b      	ldr	r3, [r1, #0]
    5bc2:	fa93 f322 	shadd16	r3, r3, r2
    5bc6:	fa93 f322 	shadd16	r3, r3, r2
    5bca:	fa99 f313 	qadd16	r3, r9, r3
    5bce:	fa98 f923 	shadd16	r9, r8, r3
    5bd2:	f847 9b04 	str.w	r9, [r7], #4
    5bd6:	fad8 f313 	qsub16	r3, r8, r3
    5bda:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    5bde:	fb49 fb03 	smusd	fp, r9, r3
    5be2:	fb29 f913 	smuadx	r9, r9, r3
    5be6:	6803      	ldr	r3, [r0, #0]
    5be8:	fa93 f322 	shadd16	r3, r3, r2
    5bec:	fa93 f822 	shadd16	r8, r3, r2
    5bf0:	4b78      	ldr	r3, [pc, #480]	; (5dd4 <arm_radix4_butterfly_inverse_q15+0x274>)
    5bf2:	ea09 0303 	and.w	r3, r9, r3
    5bf6:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    5bfa:	f840 3b04 	str.w	r3, [r0], #4
    5bfe:	680b      	ldr	r3, [r1, #0]
    5c00:	fa93 f322 	shadd16	r3, r3, r2
    5c04:	fa93 f322 	shadd16	r3, r3, r2
    5c08:	fad8 f313 	qsub16	r3, r8, r3
    5c0c:	faec f913 	qsax	r9, ip, r3
    5c10:	faac fc13 	qasx	ip, ip, r3
    5c14:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    5c18:	fb43 f80c 	smusd	r8, r3, ip
    5c1c:	fb23 fc1c 	smuadx	ip, r3, ip
    5c20:	4b6c      	ldr	r3, [pc, #432]	; (5dd4 <arm_radix4_butterfly_inverse_q15+0x274>)
    5c22:	9e01      	ldr	r6, [sp, #4]
    5c24:	ea0c 0303 	and.w	r3, ip, r3
    5c28:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    5c2c:	f846 3b04 	str.w	r3, [r6], #4
    5c30:	9601      	str	r6, [sp, #4]
    5c32:	462e      	mov	r6, r5
    5c34:	f85e 3005 	ldr.w	r3, [lr, r5]
    5c38:	fb43 fc09 	smusd	ip, r3, r9
    5c3c:	fb23 f919 	smuadx	r9, r3, r9
    5c40:	4b64      	ldr	r3, [pc, #400]	; (5dd4 <arm_radix4_butterfly_inverse_q15+0x274>)
    5c42:	f1ba 0a01 	subs.w	sl, sl, #1
    5c46:	9d02      	ldr	r5, [sp, #8]
    5c48:	ea09 0303 	and.w	r3, r9, r3
    5c4c:	442c      	add	r4, r5
    5c4e:	9d04      	ldr	r5, [sp, #16]
    5c50:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    5c54:	442e      	add	r6, r5
    5c56:	f841 3b04 	str.w	r3, [r1], #4
    5c5a:	4635      	mov	r5, r6
    5c5c:	d19c      	bne.n	5b98 <arm_radix4_butterfly_inverse_q15+0x38>
    5c5e:	f8dd b008 	ldr.w	fp, [sp, #8]
    5c62:	ea4f 038b 	mov.w	r3, fp, lsl #2
    5c66:	9309      	str	r3, [sp, #36]	; 0x24
    5c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5c6a:	2b04      	cmp	r3, #4
    5c6c:	f240 8086 	bls.w	5d7c <arm_radix4_butterfly_inverse_q15+0x21c>
    5c70:	f8cd a010 	str.w	sl, [sp, #16]
    5c74:	930c      	str	r3, [sp, #48]	; 0x30
    5c76:	9302      	str	r3, [sp, #8]
    5c78:	9a02      	ldr	r2, [sp, #8]
    5c7a:	2100      	movs	r1, #0
    5c7c:	0893      	lsrs	r3, r2, #2
    5c7e:	9105      	str	r1, [sp, #20]
    5c80:	0097      	lsls	r7, r2, #2
    5c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5c84:	930d      	str	r3, [sp, #52]	; 0x34
    5c86:	9206      	str	r2, [sp, #24]
    5c88:	1e5a      	subs	r2, r3, #1
    5c8a:	009b      	lsls	r3, r3, #2
    5c8c:	9108      	str	r1, [sp, #32]
    5c8e:	920a      	str	r2, [sp, #40]	; 0x28
    5c90:	930b      	str	r3, [sp, #44]	; 0x2c
    5c92:	9907      	ldr	r1, [sp, #28]
    5c94:	9a08      	ldr	r2, [sp, #32]
    5c96:	460d      	mov	r5, r1
    5c98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5c9a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    5c9e:	4611      	mov	r1, r2
    5ca0:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    5ca4:	9a07      	ldr	r2, [sp, #28]
    5ca6:	9e06      	ldr	r6, [sp, #24]
    5ca8:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    5cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5cae:	1930      	adds	r0, r6, r4
    5cb0:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    5cb4:	18cb      	adds	r3, r1, r3
    5cb6:	9a05      	ldr	r2, [sp, #20]
    5cb8:	1825      	adds	r5, r4, r0
    5cba:	9308      	str	r3, [sp, #32]
    5cbc:	9b03      	ldr	r3, [sp, #12]
    5cbe:	442c      	add	r4, r5
    5cc0:	4293      	cmp	r3, r2
    5cc2:	d946      	bls.n	5d52 <arm_radix4_butterfly_inverse_q15+0x1f2>
    5cc4:	9b02      	ldr	r3, [sp, #8]
    5cc6:	9501      	str	r5, [sp, #4]
    5cc8:	eb03 0e02 	add.w	lr, r3, r2
    5ccc:	9a01      	ldr	r2, [sp, #4]
    5cce:	6833      	ldr	r3, [r6, #0]
    5cd0:	6812      	ldr	r2, [r2, #0]
    5cd2:	fa93 fa12 	qadd16	sl, r3, r2
    5cd6:	fad3 f312 	qsub16	r3, r3, r2
    5cda:	6801      	ldr	r1, [r0, #0]
    5cdc:	6822      	ldr	r2, [r4, #0]
    5cde:	fa91 f112 	qadd16	r1, r1, r2
    5ce2:	fa9a f221 	shadd16	r2, sl, r1
    5ce6:	9d04      	ldr	r5, [sp, #16]
    5ce8:	fa92 f225 	shadd16	r2, r2, r5
    5cec:	6032      	str	r2, [r6, #0]
    5cee:	443e      	add	r6, r7
    5cf0:	fada f121 	shsub16	r1, sl, r1
    5cf4:	fb48 fb01 	smusd	fp, r8, r1
    5cf8:	fb28 f211 	smuadx	r2, r8, r1
    5cfc:	4935      	ldr	r1, [pc, #212]	; (5dd4 <arm_radix4_butterfly_inverse_q15+0x274>)
    5cfe:	f8d0 a000 	ldr.w	sl, [r0]
    5d02:	4011      	ands	r1, r2
    5d04:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    5d08:	6001      	str	r1, [r0, #0]
    5d0a:	4438      	add	r0, r7
    5d0c:	6822      	ldr	r2, [r4, #0]
    5d0e:	fada f212 	qsub16	r2, sl, r2
    5d12:	fae3 f122 	shsax	r1, r3, r2
    5d16:	faa3 f322 	shasx	r3, r3, r2
    5d1a:	fb4c fb03 	smusd	fp, ip, r3
    5d1e:	fb2c f313 	smuadx	r3, ip, r3
    5d22:	4a2c      	ldr	r2, [pc, #176]	; (5dd4 <arm_radix4_butterfly_inverse_q15+0x274>)
    5d24:	401a      	ands	r2, r3
    5d26:	9b01      	ldr	r3, [sp, #4]
    5d28:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    5d2c:	601a      	str	r2, [r3, #0]
    5d2e:	443b      	add	r3, r7
    5d30:	9301      	str	r3, [sp, #4]
    5d32:	fb49 f201 	smusd	r2, r9, r1
    5d36:	fb29 f111 	smuadx	r1, r9, r1
    5d3a:	4b26      	ldr	r3, [pc, #152]	; (5dd4 <arm_radix4_butterfly_inverse_q15+0x274>)
    5d3c:	46f2      	mov	sl, lr
    5d3e:	9d02      	ldr	r5, [sp, #8]
    5d40:	400b      	ands	r3, r1
    5d42:	44ae      	add	lr, r5
    5d44:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    5d48:	6023      	str	r3, [r4, #0]
    5d4a:	443c      	add	r4, r7
    5d4c:	9b03      	ldr	r3, [sp, #12]
    5d4e:	4553      	cmp	r3, sl
    5d50:	d8bc      	bhi.n	5ccc <arm_radix4_butterfly_inverse_q15+0x16c>
    5d52:	9a06      	ldr	r2, [sp, #24]
    5d54:	9b05      	ldr	r3, [sp, #20]
    5d56:	3204      	adds	r2, #4
    5d58:	3301      	adds	r3, #1
    5d5a:	9206      	str	r2, [sp, #24]
    5d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5d5e:	9305      	str	r3, [sp, #20]
    5d60:	4293      	cmp	r3, r2
    5d62:	d996      	bls.n	5c92 <arm_radix4_butterfly_inverse_q15+0x132>
    5d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5d66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5d68:	089b      	lsrs	r3, r3, #2
    5d6a:	9202      	str	r2, [sp, #8]
    5d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5d6e:	2b04      	cmp	r3, #4
    5d70:	930c      	str	r3, [sp, #48]	; 0x30
    5d72:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5d76:	9209      	str	r2, [sp, #36]	; 0x24
    5d78:	f63f af7e 	bhi.w	5c78 <arm_radix4_butterfly_inverse_q15+0x118>
    5d7c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    5d7e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    5d80:	3410      	adds	r4, #16
    5d82:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5d86:	f854 7c08 	ldr.w	r7, [r4, #-8]
    5d8a:	fa93 f117 	qadd16	r1, r3, r7
    5d8e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    5d92:	f854 0c04 	ldr.w	r0, [r4, #-4]
    5d96:	fa92 f510 	qadd16	r5, r2, r0
    5d9a:	fa91 f525 	shadd16	r5, r1, r5
    5d9e:	f844 5c10 	str.w	r5, [r4, #-16]
    5da2:	fa92 f510 	qadd16	r5, r2, r0
    5da6:	fad1 f125 	shsub16	r1, r1, r5
    5daa:	f844 1c0c 	str.w	r1, [r4, #-12]
    5dae:	fad3 f317 	qsub16	r3, r3, r7
    5db2:	fad2 f210 	qsub16	r2, r2, r0
    5db6:	faa3 f122 	shasx	r1, r3, r2
    5dba:	f844 1c08 	str.w	r1, [r4, #-8]
    5dbe:	fae3 f322 	shsax	r3, r3, r2
    5dc2:	3e01      	subs	r6, #1
    5dc4:	f844 3c04 	str.w	r3, [r4, #-4]
    5dc8:	f104 0410 	add.w	r4, r4, #16
    5dcc:	d1d9      	bne.n	5d82 <arm_radix4_butterfly_inverse_q15+0x222>
    5dce:	b011      	add	sp, #68	; 0x44
    5dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5dd4:	ffff0000 	.word	0xffff0000

00005dd8 <arm_cfft_radix4_q15>:
    5dd8:	b570      	push	{r4, r5, r6, lr}
    5dda:	7883      	ldrb	r3, [r0, #2]
    5ddc:	4604      	mov	r4, r0
    5dde:	460d      	mov	r5, r1
    5de0:	2b01      	cmp	r3, #1
    5de2:	6862      	ldr	r2, [r4, #4]
    5de4:	8983      	ldrh	r3, [r0, #12]
    5de6:	4608      	mov	r0, r1
    5de8:	8821      	ldrh	r1, [r4, #0]
    5dea:	d005      	beq.n	5df8 <arm_cfft_radix4_q15+0x20>
    5dec:	f7ff fd7c 	bl	58e8 <arm_radix4_butterfly_q15>
    5df0:	78e3      	ldrb	r3, [r4, #3]
    5df2:	2b01      	cmp	r3, #1
    5df4:	d005      	beq.n	5e02 <arm_cfft_radix4_q15+0x2a>
    5df6:	bd70      	pop	{r4, r5, r6, pc}
    5df8:	f7ff feb2 	bl	5b60 <arm_radix4_butterfly_inverse_q15>
    5dfc:	78e3      	ldrb	r3, [r4, #3]
    5dfe:	2b01      	cmp	r3, #1
    5e00:	d1f9      	bne.n	5df6 <arm_cfft_radix4_q15+0x1e>
    5e02:	4628      	mov	r0, r5
    5e04:	68a3      	ldr	r3, [r4, #8]
    5e06:	89e2      	ldrh	r2, [r4, #14]
    5e08:	8821      	ldrh	r1, [r4, #0]
    5e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e0e:	f000 b855 	b.w	5ebc <arm_bitreversal_q15>
    5e12:	bf00      	nop

00005e14 <arm_cfft_radix4_init_q15>:
    5e14:	b410      	push	{r4}
    5e16:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5e1a:	4604      	mov	r4, r0
    5e1c:	4821      	ldr	r0, [pc, #132]	; (5ea4 <arm_cfft_radix4_init_q15+0x90>)
    5e1e:	70a2      	strb	r2, [r4, #2]
    5e20:	70e3      	strb	r3, [r4, #3]
    5e22:	8021      	strh	r1, [r4, #0]
    5e24:	6060      	str	r0, [r4, #4]
    5e26:	d033      	beq.n	5e90 <arm_cfft_radix4_init_q15+0x7c>
    5e28:	d80b      	bhi.n	5e42 <arm_cfft_radix4_init_q15+0x2e>
    5e2a:	2910      	cmp	r1, #16
    5e2c:	d026      	beq.n	5e7c <arm_cfft_radix4_init_q15+0x68>
    5e2e:	2940      	cmp	r1, #64	; 0x40
    5e30:	d116      	bne.n	5e60 <arm_cfft_radix4_init_q15+0x4c>
    5e32:	4b1d      	ldr	r3, [pc, #116]	; (5ea8 <arm_cfft_radix4_init_q15+0x94>)
    5e34:	2000      	movs	r0, #0
    5e36:	81a1      	strh	r1, [r4, #12]
    5e38:	81e1      	strh	r1, [r4, #14]
    5e3a:	60a3      	str	r3, [r4, #8]
    5e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5e40:	4770      	bx	lr
    5e42:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    5e46:	d010      	beq.n	5e6a <arm_cfft_radix4_init_q15+0x56>
    5e48:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    5e4c:	d108      	bne.n	5e60 <arm_cfft_radix4_init_q15+0x4c>
    5e4e:	2301      	movs	r3, #1
    5e50:	4a16      	ldr	r2, [pc, #88]	; (5eac <arm_cfft_radix4_init_q15+0x98>)
    5e52:	2000      	movs	r0, #0
    5e54:	81a3      	strh	r3, [r4, #12]
    5e56:	81e3      	strh	r3, [r4, #14]
    5e58:	60a2      	str	r2, [r4, #8]
    5e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    5e5e:	4770      	bx	lr
    5e60:	f04f 30ff 	mov.w	r0, #4294967295
    5e64:	f85d 4b04 	ldr.w	r4, [sp], #4
    5e68:	4770      	bx	lr
    5e6a:	2304      	movs	r3, #4
    5e6c:	4a10      	ldr	r2, [pc, #64]	; (5eb0 <arm_cfft_radix4_init_q15+0x9c>)
    5e6e:	2000      	movs	r0, #0
    5e70:	81a3      	strh	r3, [r4, #12]
    5e72:	81e3      	strh	r3, [r4, #14]
    5e74:	60a2      	str	r2, [r4, #8]
    5e76:	f85d 4b04 	ldr.w	r4, [sp], #4
    5e7a:	4770      	bx	lr
    5e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5e80:	4a0c      	ldr	r2, [pc, #48]	; (5eb4 <arm_cfft_radix4_init_q15+0xa0>)
    5e82:	2000      	movs	r0, #0
    5e84:	81a3      	strh	r3, [r4, #12]
    5e86:	81e3      	strh	r3, [r4, #14]
    5e88:	60a2      	str	r2, [r4, #8]
    5e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
    5e8e:	4770      	bx	lr
    5e90:	2310      	movs	r3, #16
    5e92:	4a09      	ldr	r2, [pc, #36]	; (5eb8 <arm_cfft_radix4_init_q15+0xa4>)
    5e94:	2000      	movs	r0, #0
    5e96:	81a3      	strh	r3, [r4, #12]
    5e98:	81e3      	strh	r3, [r4, #14]
    5e9a:	60a2      	str	r2, [r4, #8]
    5e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ea0:	4770      	bx	lr
    5ea2:	bf00      	nop
    5ea4:	20001510 	.word	0x20001510
    5ea8:	2000458e 	.word	0x2000458e
    5eac:	20004510 	.word	0x20004510
    5eb0:	20004516 	.word	0x20004516
    5eb4:	2000470e 	.word	0x2000470e
    5eb8:	2000452e 	.word	0x2000452e

00005ebc <arm_bitreversal_q15>:
    5ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ec0:	0849      	lsrs	r1, r1, #1
    5ec2:	2600      	movs	r6, #0
    5ec4:	ea4f 0a42 	mov.w	sl, r2, lsl #1
    5ec8:	4605      	mov	r5, r0
    5eca:	f101 0c01 	add.w	ip, r1, #1
    5ece:	f1a1 0e02 	sub.w	lr, r1, #2
    5ed2:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    5ed6:	4634      	mov	r4, r6
    5ed8:	e011      	b.n	5efe <arm_bitreversal_q15+0x42>
    5eda:	42b4      	cmp	r4, r6
    5edc:	d90d      	bls.n	5efa <arm_bitreversal_q15+0x3e>
    5ede:	f8d5 9008 	ldr.w	r9, [r5, #8]
    5ee2:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5ee6:	60aa      	str	r2, [r5, #8]
    5ee8:	f840 9024 	str.w	r9, [r0, r4, lsl #2]
    5eec:	f8d7 900c 	ldr.w	r9, [r7, #12]
    5ef0:	f850 2028 	ldr.w	r2, [r0, r8, lsl #2]
    5ef4:	60fa      	str	r2, [r7, #12]
    5ef6:	f840 9028 	str.w	r9, [r0, r8, lsl #2]
    5efa:	3508      	adds	r5, #8
    5efc:	3708      	adds	r7, #8
    5efe:	440c      	add	r4, r1
    5f00:	f8d5 8004 	ldr.w	r8, [r5, #4]
    5f04:	3602      	adds	r6, #2
    5f06:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5f0a:	4576      	cmp	r6, lr
    5f0c:	606a      	str	r2, [r5, #4]
    5f0e:	f840 8024 	str.w	r8, [r0, r4, lsl #2]
    5f12:	881c      	ldrh	r4, [r3, #0]
    5f14:	4453      	add	r3, sl
    5f16:	eb0c 0804 	add.w	r8, ip, r4
    5f1a:	d9de      	bls.n	5eda <arm_bitreversal_q15+0x1e>
    5f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005f20 <__aeabi_atexit>:
    5f20:	460b      	mov	r3, r1
    5f22:	4601      	mov	r1, r0
    5f24:	4618      	mov	r0, r3
    5f26:	f000 b801 	b.w	5f2c <__cxa_atexit>
    5f2a:	bf00      	nop

00005f2c <__cxa_atexit>:
    5f2c:	4613      	mov	r3, r2
    5f2e:	460a      	mov	r2, r1
    5f30:	4601      	mov	r1, r0
    5f32:	2002      	movs	r0, #2
    5f34:	f000 bb52 	b.w	65dc <__register_exitproc>

00005f38 <__errno>:
    5f38:	4b01      	ldr	r3, [pc, #4]	; (5f40 <__errno+0x8>)
    5f3a:	6818      	ldr	r0, [r3, #0]
    5f3c:	4770      	bx	lr
    5f3e:	bf00      	nop
    5f40:	20005250 	.word	0x20005250

00005f44 <__libc_init_array>:
    5f44:	b570      	push	{r4, r5, r6, lr}
    5f46:	4e0f      	ldr	r6, [pc, #60]	; (5f84 <__libc_init_array+0x40>)
    5f48:	4d0f      	ldr	r5, [pc, #60]	; (5f88 <__libc_init_array+0x44>)
    5f4a:	1b76      	subs	r6, r6, r5
    5f4c:	10b6      	asrs	r6, r6, #2
    5f4e:	bf18      	it	ne
    5f50:	2400      	movne	r4, #0
    5f52:	d005      	beq.n	5f60 <__libc_init_array+0x1c>
    5f54:	3401      	adds	r4, #1
    5f56:	f855 3b04 	ldr.w	r3, [r5], #4
    5f5a:	4798      	blx	r3
    5f5c:	42a6      	cmp	r6, r4
    5f5e:	d1f9      	bne.n	5f54 <__libc_init_array+0x10>
    5f60:	4e0a      	ldr	r6, [pc, #40]	; (5f8c <__libc_init_array+0x48>)
    5f62:	4d0b      	ldr	r5, [pc, #44]	; (5f90 <__libc_init_array+0x4c>)
    5f64:	1b76      	subs	r6, r6, r5
    5f66:	f000 fccb 	bl	6900 <___init_veneer>
    5f6a:	10b6      	asrs	r6, r6, #2
    5f6c:	bf18      	it	ne
    5f6e:	2400      	movne	r4, #0
    5f70:	d006      	beq.n	5f80 <__libc_init_array+0x3c>
    5f72:	3401      	adds	r4, #1
    5f74:	f855 3b04 	ldr.w	r3, [r5], #4
    5f78:	4798      	blx	r3
    5f7a:	42a6      	cmp	r6, r4
    5f7c:	d1f9      	bne.n	5f72 <__libc_init_array+0x2e>
    5f7e:	bd70      	pop	{r4, r5, r6, pc}
    5f80:	bd70      	pop	{r4, r5, r6, pc}
    5f82:	bf00      	nop
    5f84:	60001938 	.word	0x60001938
    5f88:	60001938 	.word	0x60001938
    5f8c:	600019ac 	.word	0x600019ac
    5f90:	60001938 	.word	0x60001938

00005f94 <malloc>:
    5f94:	4b02      	ldr	r3, [pc, #8]	; (5fa0 <malloc+0xc>)
    5f96:	4601      	mov	r1, r0
    5f98:	6818      	ldr	r0, [r3, #0]
    5f9a:	f000 b803 	b.w	5fa4 <_malloc_r>
    5f9e:	bf00      	nop
    5fa0:	20005250 	.word	0x20005250

00005fa4 <_malloc_r>:
    5fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fa8:	f101 050b 	add.w	r5, r1, #11
    5fac:	2d16      	cmp	r5, #22
    5fae:	b083      	sub	sp, #12
    5fb0:	4606      	mov	r6, r0
    5fb2:	f240 809f 	bls.w	60f4 <_malloc_r+0x150>
    5fb6:	f035 0507 	bics.w	r5, r5, #7
    5fba:	f100 80bf 	bmi.w	613c <_malloc_r+0x198>
    5fbe:	42a9      	cmp	r1, r5
    5fc0:	f200 80bc 	bhi.w	613c <_malloc_r+0x198>
    5fc4:	f000 faf4 	bl	65b0 <__malloc_lock>
    5fc8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    5fcc:	f0c0 829c 	bcc.w	6508 <_malloc_r+0x564>
    5fd0:	0a6b      	lsrs	r3, r5, #9
    5fd2:	f000 80ba 	beq.w	614a <_malloc_r+0x1a6>
    5fd6:	2b04      	cmp	r3, #4
    5fd8:	f200 8183 	bhi.w	62e2 <_malloc_r+0x33e>
    5fdc:	09a8      	lsrs	r0, r5, #6
    5fde:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    5fe2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5fe6:	3038      	adds	r0, #56	; 0x38
    5fe8:	4fc4      	ldr	r7, [pc, #784]	; (62fc <_malloc_r+0x358>)
    5fea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    5fee:	f1a3 0108 	sub.w	r1, r3, #8
    5ff2:	685c      	ldr	r4, [r3, #4]
    5ff4:	42a1      	cmp	r1, r4
    5ff6:	d107      	bne.n	6008 <_malloc_r+0x64>
    5ff8:	e0ac      	b.n	6154 <_malloc_r+0x1b0>
    5ffa:	2a00      	cmp	r2, #0
    5ffc:	f280 80ac 	bge.w	6158 <_malloc_r+0x1b4>
    6000:	68e4      	ldr	r4, [r4, #12]
    6002:	42a1      	cmp	r1, r4
    6004:	f000 80a6 	beq.w	6154 <_malloc_r+0x1b0>
    6008:	6863      	ldr	r3, [r4, #4]
    600a:	f023 0303 	bic.w	r3, r3, #3
    600e:	1b5a      	subs	r2, r3, r5
    6010:	2a0f      	cmp	r2, #15
    6012:	ddf2      	ble.n	5ffa <_malloc_r+0x56>
    6014:	49b9      	ldr	r1, [pc, #740]	; (62fc <_malloc_r+0x358>)
    6016:	693c      	ldr	r4, [r7, #16]
    6018:	f101 0e08 	add.w	lr, r1, #8
    601c:	4574      	cmp	r4, lr
    601e:	f000 81b3 	beq.w	6388 <_malloc_r+0x3e4>
    6022:	6863      	ldr	r3, [r4, #4]
    6024:	f023 0303 	bic.w	r3, r3, #3
    6028:	1b5a      	subs	r2, r3, r5
    602a:	2a0f      	cmp	r2, #15
    602c:	f300 8199 	bgt.w	6362 <_malloc_r+0x3be>
    6030:	2a00      	cmp	r2, #0
    6032:	f8c1 e014 	str.w	lr, [r1, #20]
    6036:	f8c1 e010 	str.w	lr, [r1, #16]
    603a:	f280 809e 	bge.w	617a <_malloc_r+0x1d6>
    603e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6042:	f080 8167 	bcs.w	6314 <_malloc_r+0x370>
    6046:	08db      	lsrs	r3, r3, #3
    6048:	f103 0c01 	add.w	ip, r3, #1
    604c:	2201      	movs	r2, #1
    604e:	109b      	asrs	r3, r3, #2
    6050:	fa02 f303 	lsl.w	r3, r2, r3
    6054:	684a      	ldr	r2, [r1, #4]
    6056:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    605a:	f8c4 8008 	str.w	r8, [r4, #8]
    605e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    6062:	431a      	orrs	r2, r3
    6064:	f1a9 0308 	sub.w	r3, r9, #8
    6068:	60e3      	str	r3, [r4, #12]
    606a:	604a      	str	r2, [r1, #4]
    606c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    6070:	f8c8 400c 	str.w	r4, [r8, #12]
    6074:	1083      	asrs	r3, r0, #2
    6076:	2401      	movs	r4, #1
    6078:	409c      	lsls	r4, r3
    607a:	4294      	cmp	r4, r2
    607c:	f200 808a 	bhi.w	6194 <_malloc_r+0x1f0>
    6080:	4214      	tst	r4, r2
    6082:	d106      	bne.n	6092 <_malloc_r+0xee>
    6084:	f020 0003 	bic.w	r0, r0, #3
    6088:	0064      	lsls	r4, r4, #1
    608a:	4214      	tst	r4, r2
    608c:	f100 0004 	add.w	r0, r0, #4
    6090:	d0fa      	beq.n	6088 <_malloc_r+0xe4>
    6092:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    6096:	46cc      	mov	ip, r9
    6098:	4680      	mov	r8, r0
    609a:	f8dc 100c 	ldr.w	r1, [ip, #12]
    609e:	458c      	cmp	ip, r1
    60a0:	d107      	bne.n	60b2 <_malloc_r+0x10e>
    60a2:	e173      	b.n	638c <_malloc_r+0x3e8>
    60a4:	2a00      	cmp	r2, #0
    60a6:	f280 8181 	bge.w	63ac <_malloc_r+0x408>
    60aa:	68c9      	ldr	r1, [r1, #12]
    60ac:	458c      	cmp	ip, r1
    60ae:	f000 816d 	beq.w	638c <_malloc_r+0x3e8>
    60b2:	684b      	ldr	r3, [r1, #4]
    60b4:	f023 0303 	bic.w	r3, r3, #3
    60b8:	1b5a      	subs	r2, r3, r5
    60ba:	2a0f      	cmp	r2, #15
    60bc:	ddf2      	ble.n	60a4 <_malloc_r+0x100>
    60be:	460c      	mov	r4, r1
    60c0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    60c4:	f854 8f08 	ldr.w	r8, [r4, #8]!
    60c8:	194b      	adds	r3, r1, r5
    60ca:	f045 0501 	orr.w	r5, r5, #1
    60ce:	604d      	str	r5, [r1, #4]
    60d0:	f042 0101 	orr.w	r1, r2, #1
    60d4:	f8c8 c00c 	str.w	ip, [r8, #12]
    60d8:	4630      	mov	r0, r6
    60da:	f8cc 8008 	str.w	r8, [ip, #8]
    60de:	617b      	str	r3, [r7, #20]
    60e0:	613b      	str	r3, [r7, #16]
    60e2:	f8c3 e00c 	str.w	lr, [r3, #12]
    60e6:	f8c3 e008 	str.w	lr, [r3, #8]
    60ea:	6059      	str	r1, [r3, #4]
    60ec:	509a      	str	r2, [r3, r2]
    60ee:	f000 fa61 	bl	65b4 <__malloc_unlock>
    60f2:	e01f      	b.n	6134 <_malloc_r+0x190>
    60f4:	2910      	cmp	r1, #16
    60f6:	d821      	bhi.n	613c <_malloc_r+0x198>
    60f8:	f000 fa5a 	bl	65b0 <__malloc_lock>
    60fc:	2510      	movs	r5, #16
    60fe:	2306      	movs	r3, #6
    6100:	2002      	movs	r0, #2
    6102:	4f7e      	ldr	r7, [pc, #504]	; (62fc <_malloc_r+0x358>)
    6104:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6108:	f1a3 0208 	sub.w	r2, r3, #8
    610c:	685c      	ldr	r4, [r3, #4]
    610e:	4294      	cmp	r4, r2
    6110:	f000 8145 	beq.w	639e <_malloc_r+0x3fa>
    6114:	6863      	ldr	r3, [r4, #4]
    6116:	68e1      	ldr	r1, [r4, #12]
    6118:	68a5      	ldr	r5, [r4, #8]
    611a:	f023 0303 	bic.w	r3, r3, #3
    611e:	4423      	add	r3, r4
    6120:	4630      	mov	r0, r6
    6122:	685a      	ldr	r2, [r3, #4]
    6124:	60e9      	str	r1, [r5, #12]
    6126:	f042 0201 	orr.w	r2, r2, #1
    612a:	608d      	str	r5, [r1, #8]
    612c:	605a      	str	r2, [r3, #4]
    612e:	f000 fa41 	bl	65b4 <__malloc_unlock>
    6132:	3408      	adds	r4, #8
    6134:	4620      	mov	r0, r4
    6136:	b003      	add	sp, #12
    6138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    613c:	2400      	movs	r4, #0
    613e:	230c      	movs	r3, #12
    6140:	4620      	mov	r0, r4
    6142:	6033      	str	r3, [r6, #0]
    6144:	b003      	add	sp, #12
    6146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    614a:	2380      	movs	r3, #128	; 0x80
    614c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    6150:	203f      	movs	r0, #63	; 0x3f
    6152:	e749      	b.n	5fe8 <_malloc_r+0x44>
    6154:	4670      	mov	r0, lr
    6156:	e75d      	b.n	6014 <_malloc_r+0x70>
    6158:	4423      	add	r3, r4
    615a:	68e1      	ldr	r1, [r4, #12]
    615c:	685a      	ldr	r2, [r3, #4]
    615e:	68a5      	ldr	r5, [r4, #8]
    6160:	f042 0201 	orr.w	r2, r2, #1
    6164:	60e9      	str	r1, [r5, #12]
    6166:	4630      	mov	r0, r6
    6168:	608d      	str	r5, [r1, #8]
    616a:	605a      	str	r2, [r3, #4]
    616c:	f000 fa22 	bl	65b4 <__malloc_unlock>
    6170:	3408      	adds	r4, #8
    6172:	4620      	mov	r0, r4
    6174:	b003      	add	sp, #12
    6176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    617a:	4423      	add	r3, r4
    617c:	4630      	mov	r0, r6
    617e:	685a      	ldr	r2, [r3, #4]
    6180:	f042 0201 	orr.w	r2, r2, #1
    6184:	605a      	str	r2, [r3, #4]
    6186:	f000 fa15 	bl	65b4 <__malloc_unlock>
    618a:	3408      	adds	r4, #8
    618c:	4620      	mov	r0, r4
    618e:	b003      	add	sp, #12
    6190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6194:	68bc      	ldr	r4, [r7, #8]
    6196:	6863      	ldr	r3, [r4, #4]
    6198:	f023 0803 	bic.w	r8, r3, #3
    619c:	45a8      	cmp	r8, r5
    619e:	d304      	bcc.n	61aa <_malloc_r+0x206>
    61a0:	ebc5 0308 	rsb	r3, r5, r8
    61a4:	2b0f      	cmp	r3, #15
    61a6:	f300 808c 	bgt.w	62c2 <_malloc_r+0x31e>
    61aa:	4b55      	ldr	r3, [pc, #340]	; (6300 <_malloc_r+0x35c>)
    61ac:	f8df 9160 	ldr.w	r9, [pc, #352]	; 6310 <_malloc_r+0x36c>
    61b0:	681a      	ldr	r2, [r3, #0]
    61b2:	f8d9 3000 	ldr.w	r3, [r9]
    61b6:	3301      	adds	r3, #1
    61b8:	442a      	add	r2, r5
    61ba:	eb04 0a08 	add.w	sl, r4, r8
    61be:	f000 8160 	beq.w	6482 <_malloc_r+0x4de>
    61c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    61c6:	320f      	adds	r2, #15
    61c8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    61cc:	f022 020f 	bic.w	r2, r2, #15
    61d0:	4611      	mov	r1, r2
    61d2:	4630      	mov	r0, r6
    61d4:	9201      	str	r2, [sp, #4]
    61d6:	f000 f9ef 	bl	65b8 <_sbrk_r>
    61da:	f1b0 3fff 	cmp.w	r0, #4294967295
    61de:	4683      	mov	fp, r0
    61e0:	9a01      	ldr	r2, [sp, #4]
    61e2:	f000 8158 	beq.w	6496 <_malloc_r+0x4f2>
    61e6:	4582      	cmp	sl, r0
    61e8:	f200 80fc 	bhi.w	63e4 <_malloc_r+0x440>
    61ec:	4b45      	ldr	r3, [pc, #276]	; (6304 <_malloc_r+0x360>)
    61ee:	6819      	ldr	r1, [r3, #0]
    61f0:	45da      	cmp	sl, fp
    61f2:	4411      	add	r1, r2
    61f4:	6019      	str	r1, [r3, #0]
    61f6:	f000 8153 	beq.w	64a0 <_malloc_r+0x4fc>
    61fa:	f8d9 0000 	ldr.w	r0, [r9]
    61fe:	f8df e110 	ldr.w	lr, [pc, #272]	; 6310 <_malloc_r+0x36c>
    6202:	3001      	adds	r0, #1
    6204:	bf1b      	ittet	ne
    6206:	ebca 0a0b 	rsbne	sl, sl, fp
    620a:	4451      	addne	r1, sl
    620c:	f8ce b000 	streq.w	fp, [lr]
    6210:	6019      	strne	r1, [r3, #0]
    6212:	f01b 0107 	ands.w	r1, fp, #7
    6216:	f000 8117 	beq.w	6448 <_malloc_r+0x4a4>
    621a:	f1c1 0008 	rsb	r0, r1, #8
    621e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    6222:	4483      	add	fp, r0
    6224:	3108      	adds	r1, #8
    6226:	445a      	add	r2, fp
    6228:	f3c2 020b 	ubfx	r2, r2, #0, #12
    622c:	ebc2 0901 	rsb	r9, r2, r1
    6230:	4649      	mov	r1, r9
    6232:	4630      	mov	r0, r6
    6234:	9301      	str	r3, [sp, #4]
    6236:	f000 f9bf 	bl	65b8 <_sbrk_r>
    623a:	1c43      	adds	r3, r0, #1
    623c:	9b01      	ldr	r3, [sp, #4]
    623e:	f000 813f 	beq.w	64c0 <_malloc_r+0x51c>
    6242:	ebcb 0200 	rsb	r2, fp, r0
    6246:	444a      	add	r2, r9
    6248:	f042 0201 	orr.w	r2, r2, #1
    624c:	6819      	ldr	r1, [r3, #0]
    624e:	f8c7 b008 	str.w	fp, [r7, #8]
    6252:	4449      	add	r1, r9
    6254:	42bc      	cmp	r4, r7
    6256:	f8cb 2004 	str.w	r2, [fp, #4]
    625a:	6019      	str	r1, [r3, #0]
    625c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 6304 <_malloc_r+0x360>
    6260:	d016      	beq.n	6290 <_malloc_r+0x2ec>
    6262:	f1b8 0f0f 	cmp.w	r8, #15
    6266:	f240 80fd 	bls.w	6464 <_malloc_r+0x4c0>
    626a:	6862      	ldr	r2, [r4, #4]
    626c:	f1a8 030c 	sub.w	r3, r8, #12
    6270:	f023 0307 	bic.w	r3, r3, #7
    6274:	18e0      	adds	r0, r4, r3
    6276:	f002 0201 	and.w	r2, r2, #1
    627a:	f04f 0e05 	mov.w	lr, #5
    627e:	431a      	orrs	r2, r3
    6280:	2b0f      	cmp	r3, #15
    6282:	6062      	str	r2, [r4, #4]
    6284:	f8c0 e004 	str.w	lr, [r0, #4]
    6288:	f8c0 e008 	str.w	lr, [r0, #8]
    628c:	f200 811c 	bhi.w	64c8 <_malloc_r+0x524>
    6290:	4b1d      	ldr	r3, [pc, #116]	; (6308 <_malloc_r+0x364>)
    6292:	68bc      	ldr	r4, [r7, #8]
    6294:	681a      	ldr	r2, [r3, #0]
    6296:	4291      	cmp	r1, r2
    6298:	bf88      	it	hi
    629a:	6019      	strhi	r1, [r3, #0]
    629c:	4b1b      	ldr	r3, [pc, #108]	; (630c <_malloc_r+0x368>)
    629e:	681a      	ldr	r2, [r3, #0]
    62a0:	4291      	cmp	r1, r2
    62a2:	6862      	ldr	r2, [r4, #4]
    62a4:	bf88      	it	hi
    62a6:	6019      	strhi	r1, [r3, #0]
    62a8:	f022 0203 	bic.w	r2, r2, #3
    62ac:	4295      	cmp	r5, r2
    62ae:	eba2 0305 	sub.w	r3, r2, r5
    62b2:	d801      	bhi.n	62b8 <_malloc_r+0x314>
    62b4:	2b0f      	cmp	r3, #15
    62b6:	dc04      	bgt.n	62c2 <_malloc_r+0x31e>
    62b8:	4630      	mov	r0, r6
    62ba:	f000 f97b 	bl	65b4 <__malloc_unlock>
    62be:	2400      	movs	r4, #0
    62c0:	e738      	b.n	6134 <_malloc_r+0x190>
    62c2:	1962      	adds	r2, r4, r5
    62c4:	f043 0301 	orr.w	r3, r3, #1
    62c8:	f045 0501 	orr.w	r5, r5, #1
    62cc:	6065      	str	r5, [r4, #4]
    62ce:	4630      	mov	r0, r6
    62d0:	60ba      	str	r2, [r7, #8]
    62d2:	6053      	str	r3, [r2, #4]
    62d4:	f000 f96e 	bl	65b4 <__malloc_unlock>
    62d8:	3408      	adds	r4, #8
    62da:	4620      	mov	r0, r4
    62dc:	b003      	add	sp, #12
    62de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62e2:	2b14      	cmp	r3, #20
    62e4:	d971      	bls.n	63ca <_malloc_r+0x426>
    62e6:	2b54      	cmp	r3, #84	; 0x54
    62e8:	f200 80a4 	bhi.w	6434 <_malloc_r+0x490>
    62ec:	0b28      	lsrs	r0, r5, #12
    62ee:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    62f2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    62f6:	306e      	adds	r0, #110	; 0x6e
    62f8:	e676      	b.n	5fe8 <_malloc_r+0x44>
    62fa:	bf00      	nop
    62fc:	20005254 	.word	0x20005254
    6300:	20007610 	.word	0x20007610
    6304:	20007614 	.word	0x20007614
    6308:	2000760c 	.word	0x2000760c
    630c:	20007608 	.word	0x20007608
    6310:	20005660 	.word	0x20005660
    6314:	0a5a      	lsrs	r2, r3, #9
    6316:	2a04      	cmp	r2, #4
    6318:	d95e      	bls.n	63d8 <_malloc_r+0x434>
    631a:	2a14      	cmp	r2, #20
    631c:	f200 80b3 	bhi.w	6486 <_malloc_r+0x4e2>
    6320:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    6324:	0049      	lsls	r1, r1, #1
    6326:	325b      	adds	r2, #91	; 0x5b
    6328:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    632c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    6330:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 6510 <_malloc_r+0x56c>
    6334:	f1ac 0c08 	sub.w	ip, ip, #8
    6338:	458c      	cmp	ip, r1
    633a:	f000 8088 	beq.w	644e <_malloc_r+0x4aa>
    633e:	684a      	ldr	r2, [r1, #4]
    6340:	f022 0203 	bic.w	r2, r2, #3
    6344:	4293      	cmp	r3, r2
    6346:	d202      	bcs.n	634e <_malloc_r+0x3aa>
    6348:	6889      	ldr	r1, [r1, #8]
    634a:	458c      	cmp	ip, r1
    634c:	d1f7      	bne.n	633e <_malloc_r+0x39a>
    634e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    6352:	687a      	ldr	r2, [r7, #4]
    6354:	f8c4 c00c 	str.w	ip, [r4, #12]
    6358:	60a1      	str	r1, [r4, #8]
    635a:	f8cc 4008 	str.w	r4, [ip, #8]
    635e:	60cc      	str	r4, [r1, #12]
    6360:	e688      	b.n	6074 <_malloc_r+0xd0>
    6362:	1963      	adds	r3, r4, r5
    6364:	f042 0701 	orr.w	r7, r2, #1
    6368:	f045 0501 	orr.w	r5, r5, #1
    636c:	6065      	str	r5, [r4, #4]
    636e:	4630      	mov	r0, r6
    6370:	614b      	str	r3, [r1, #20]
    6372:	610b      	str	r3, [r1, #16]
    6374:	f8c3 e00c 	str.w	lr, [r3, #12]
    6378:	f8c3 e008 	str.w	lr, [r3, #8]
    637c:	605f      	str	r7, [r3, #4]
    637e:	509a      	str	r2, [r3, r2]
    6380:	3408      	adds	r4, #8
    6382:	f000 f917 	bl	65b4 <__malloc_unlock>
    6386:	e6d5      	b.n	6134 <_malloc_r+0x190>
    6388:	684a      	ldr	r2, [r1, #4]
    638a:	e673      	b.n	6074 <_malloc_r+0xd0>
    638c:	f108 0801 	add.w	r8, r8, #1
    6390:	f018 0f03 	tst.w	r8, #3
    6394:	f10c 0c08 	add.w	ip, ip, #8
    6398:	f47f ae7f 	bne.w	609a <_malloc_r+0xf6>
    639c:	e030      	b.n	6400 <_malloc_r+0x45c>
    639e:	68dc      	ldr	r4, [r3, #12]
    63a0:	42a3      	cmp	r3, r4
    63a2:	bf08      	it	eq
    63a4:	3002      	addeq	r0, #2
    63a6:	f43f ae35 	beq.w	6014 <_malloc_r+0x70>
    63aa:	e6b3      	b.n	6114 <_malloc_r+0x170>
    63ac:	440b      	add	r3, r1
    63ae:	460c      	mov	r4, r1
    63b0:	685a      	ldr	r2, [r3, #4]
    63b2:	68c9      	ldr	r1, [r1, #12]
    63b4:	f854 5f08 	ldr.w	r5, [r4, #8]!
    63b8:	f042 0201 	orr.w	r2, r2, #1
    63bc:	605a      	str	r2, [r3, #4]
    63be:	4630      	mov	r0, r6
    63c0:	60e9      	str	r1, [r5, #12]
    63c2:	608d      	str	r5, [r1, #8]
    63c4:	f000 f8f6 	bl	65b4 <__malloc_unlock>
    63c8:	e6b4      	b.n	6134 <_malloc_r+0x190>
    63ca:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    63ce:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    63d2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    63d6:	e607      	b.n	5fe8 <_malloc_r+0x44>
    63d8:	099a      	lsrs	r2, r3, #6
    63da:	f102 0139 	add.w	r1, r2, #57	; 0x39
    63de:	0049      	lsls	r1, r1, #1
    63e0:	3238      	adds	r2, #56	; 0x38
    63e2:	e7a1      	b.n	6328 <_malloc_r+0x384>
    63e4:	42bc      	cmp	r4, r7
    63e6:	4b4a      	ldr	r3, [pc, #296]	; (6510 <_malloc_r+0x56c>)
    63e8:	f43f af00 	beq.w	61ec <_malloc_r+0x248>
    63ec:	689c      	ldr	r4, [r3, #8]
    63ee:	6862      	ldr	r2, [r4, #4]
    63f0:	f022 0203 	bic.w	r2, r2, #3
    63f4:	e75a      	b.n	62ac <_malloc_r+0x308>
    63f6:	f859 3908 	ldr.w	r3, [r9], #-8
    63fa:	4599      	cmp	r9, r3
    63fc:	f040 8082 	bne.w	6504 <_malloc_r+0x560>
    6400:	f010 0f03 	tst.w	r0, #3
    6404:	f100 30ff 	add.w	r0, r0, #4294967295
    6408:	d1f5      	bne.n	63f6 <_malloc_r+0x452>
    640a:	687b      	ldr	r3, [r7, #4]
    640c:	ea23 0304 	bic.w	r3, r3, r4
    6410:	607b      	str	r3, [r7, #4]
    6412:	0064      	lsls	r4, r4, #1
    6414:	429c      	cmp	r4, r3
    6416:	f63f aebd 	bhi.w	6194 <_malloc_r+0x1f0>
    641a:	2c00      	cmp	r4, #0
    641c:	f43f aeba 	beq.w	6194 <_malloc_r+0x1f0>
    6420:	421c      	tst	r4, r3
    6422:	4640      	mov	r0, r8
    6424:	f47f ae35 	bne.w	6092 <_malloc_r+0xee>
    6428:	0064      	lsls	r4, r4, #1
    642a:	421c      	tst	r4, r3
    642c:	f100 0004 	add.w	r0, r0, #4
    6430:	d0fa      	beq.n	6428 <_malloc_r+0x484>
    6432:	e62e      	b.n	6092 <_malloc_r+0xee>
    6434:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6438:	d818      	bhi.n	646c <_malloc_r+0x4c8>
    643a:	0be8      	lsrs	r0, r5, #15
    643c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    6440:	ea4f 034e 	mov.w	r3, lr, lsl #1
    6444:	3077      	adds	r0, #119	; 0x77
    6446:	e5cf      	b.n	5fe8 <_malloc_r+0x44>
    6448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    644c:	e6eb      	b.n	6226 <_malloc_r+0x282>
    644e:	2101      	movs	r1, #1
    6450:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6454:	1092      	asrs	r2, r2, #2
    6456:	fa01 f202 	lsl.w	r2, r1, r2
    645a:	431a      	orrs	r2, r3
    645c:	f8c8 2004 	str.w	r2, [r8, #4]
    6460:	4661      	mov	r1, ip
    6462:	e777      	b.n	6354 <_malloc_r+0x3b0>
    6464:	2301      	movs	r3, #1
    6466:	f8cb 3004 	str.w	r3, [fp, #4]
    646a:	e725      	b.n	62b8 <_malloc_r+0x314>
    646c:	f240 5254 	movw	r2, #1364	; 0x554
    6470:	4293      	cmp	r3, r2
    6472:	d820      	bhi.n	64b6 <_malloc_r+0x512>
    6474:	0ca8      	lsrs	r0, r5, #18
    6476:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    647a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    647e:	307c      	adds	r0, #124	; 0x7c
    6480:	e5b2      	b.n	5fe8 <_malloc_r+0x44>
    6482:	3210      	adds	r2, #16
    6484:	e6a4      	b.n	61d0 <_malloc_r+0x22c>
    6486:	2a54      	cmp	r2, #84	; 0x54
    6488:	d826      	bhi.n	64d8 <_malloc_r+0x534>
    648a:	0b1a      	lsrs	r2, r3, #12
    648c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    6490:	0049      	lsls	r1, r1, #1
    6492:	326e      	adds	r2, #110	; 0x6e
    6494:	e748      	b.n	6328 <_malloc_r+0x384>
    6496:	68bc      	ldr	r4, [r7, #8]
    6498:	6862      	ldr	r2, [r4, #4]
    649a:	f022 0203 	bic.w	r2, r2, #3
    649e:	e705      	b.n	62ac <_malloc_r+0x308>
    64a0:	f3ca 000b 	ubfx	r0, sl, #0, #12
    64a4:	2800      	cmp	r0, #0
    64a6:	f47f aea8 	bne.w	61fa <_malloc_r+0x256>
    64aa:	4442      	add	r2, r8
    64ac:	68bb      	ldr	r3, [r7, #8]
    64ae:	f042 0201 	orr.w	r2, r2, #1
    64b2:	605a      	str	r2, [r3, #4]
    64b4:	e6ec      	b.n	6290 <_malloc_r+0x2ec>
    64b6:	23fe      	movs	r3, #254	; 0xfe
    64b8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    64bc:	207e      	movs	r0, #126	; 0x7e
    64be:	e593      	b.n	5fe8 <_malloc_r+0x44>
    64c0:	2201      	movs	r2, #1
    64c2:	f04f 0900 	mov.w	r9, #0
    64c6:	e6c1      	b.n	624c <_malloc_r+0x2a8>
    64c8:	f104 0108 	add.w	r1, r4, #8
    64cc:	4630      	mov	r0, r6
    64ce:	f000 f925 	bl	671c <_free_r>
    64d2:	f8d9 1000 	ldr.w	r1, [r9]
    64d6:	e6db      	b.n	6290 <_malloc_r+0x2ec>
    64d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    64dc:	d805      	bhi.n	64ea <_malloc_r+0x546>
    64de:	0bda      	lsrs	r2, r3, #15
    64e0:	f102 0178 	add.w	r1, r2, #120	; 0x78
    64e4:	0049      	lsls	r1, r1, #1
    64e6:	3277      	adds	r2, #119	; 0x77
    64e8:	e71e      	b.n	6328 <_malloc_r+0x384>
    64ea:	f240 5154 	movw	r1, #1364	; 0x554
    64ee:	428a      	cmp	r2, r1
    64f0:	d805      	bhi.n	64fe <_malloc_r+0x55a>
    64f2:	0c9a      	lsrs	r2, r3, #18
    64f4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    64f8:	0049      	lsls	r1, r1, #1
    64fa:	327c      	adds	r2, #124	; 0x7c
    64fc:	e714      	b.n	6328 <_malloc_r+0x384>
    64fe:	21fe      	movs	r1, #254	; 0xfe
    6500:	227e      	movs	r2, #126	; 0x7e
    6502:	e711      	b.n	6328 <_malloc_r+0x384>
    6504:	687b      	ldr	r3, [r7, #4]
    6506:	e784      	b.n	6412 <_malloc_r+0x46e>
    6508:	08e8      	lsrs	r0, r5, #3
    650a:	1c43      	adds	r3, r0, #1
    650c:	005b      	lsls	r3, r3, #1
    650e:	e5f8      	b.n	6102 <_malloc_r+0x15e>
    6510:	20005254 	.word	0x20005254

00006514 <memset>:
    6514:	b470      	push	{r4, r5, r6}
    6516:	0784      	lsls	r4, r0, #30
    6518:	d046      	beq.n	65a8 <memset+0x94>
    651a:	1e54      	subs	r4, r2, #1
    651c:	2a00      	cmp	r2, #0
    651e:	d041      	beq.n	65a4 <memset+0x90>
    6520:	b2cd      	uxtb	r5, r1
    6522:	4603      	mov	r3, r0
    6524:	e002      	b.n	652c <memset+0x18>
    6526:	1e62      	subs	r2, r4, #1
    6528:	b3e4      	cbz	r4, 65a4 <memset+0x90>
    652a:	4614      	mov	r4, r2
    652c:	f803 5b01 	strb.w	r5, [r3], #1
    6530:	079a      	lsls	r2, r3, #30
    6532:	d1f8      	bne.n	6526 <memset+0x12>
    6534:	2c03      	cmp	r4, #3
    6536:	d92e      	bls.n	6596 <memset+0x82>
    6538:	b2cd      	uxtb	r5, r1
    653a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    653e:	2c0f      	cmp	r4, #15
    6540:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    6544:	d919      	bls.n	657a <memset+0x66>
    6546:	f103 0210 	add.w	r2, r3, #16
    654a:	4626      	mov	r6, r4
    654c:	3e10      	subs	r6, #16
    654e:	2e0f      	cmp	r6, #15
    6550:	f842 5c10 	str.w	r5, [r2, #-16]
    6554:	f842 5c0c 	str.w	r5, [r2, #-12]
    6558:	f842 5c08 	str.w	r5, [r2, #-8]
    655c:	f842 5c04 	str.w	r5, [r2, #-4]
    6560:	f102 0210 	add.w	r2, r2, #16
    6564:	d8f2      	bhi.n	654c <memset+0x38>
    6566:	f1a4 0210 	sub.w	r2, r4, #16
    656a:	f022 020f 	bic.w	r2, r2, #15
    656e:	f004 040f 	and.w	r4, r4, #15
    6572:	3210      	adds	r2, #16
    6574:	2c03      	cmp	r4, #3
    6576:	4413      	add	r3, r2
    6578:	d90d      	bls.n	6596 <memset+0x82>
    657a:	461e      	mov	r6, r3
    657c:	4622      	mov	r2, r4
    657e:	3a04      	subs	r2, #4
    6580:	2a03      	cmp	r2, #3
    6582:	f846 5b04 	str.w	r5, [r6], #4
    6586:	d8fa      	bhi.n	657e <memset+0x6a>
    6588:	1f22      	subs	r2, r4, #4
    658a:	f022 0203 	bic.w	r2, r2, #3
    658e:	3204      	adds	r2, #4
    6590:	4413      	add	r3, r2
    6592:	f004 0403 	and.w	r4, r4, #3
    6596:	b12c      	cbz	r4, 65a4 <memset+0x90>
    6598:	b2c9      	uxtb	r1, r1
    659a:	441c      	add	r4, r3
    659c:	f803 1b01 	strb.w	r1, [r3], #1
    65a0:	42a3      	cmp	r3, r4
    65a2:	d1fb      	bne.n	659c <memset+0x88>
    65a4:	bc70      	pop	{r4, r5, r6}
    65a6:	4770      	bx	lr
    65a8:	4614      	mov	r4, r2
    65aa:	4603      	mov	r3, r0
    65ac:	e7c2      	b.n	6534 <memset+0x20>
    65ae:	bf00      	nop

000065b0 <__malloc_lock>:
    65b0:	4770      	bx	lr
    65b2:	bf00      	nop

000065b4 <__malloc_unlock>:
    65b4:	4770      	bx	lr
    65b6:	bf00      	nop

000065b8 <_sbrk_r>:
    65b8:	b538      	push	{r3, r4, r5, lr}
    65ba:	4c07      	ldr	r4, [pc, #28]	; (65d8 <_sbrk_r+0x20>)
    65bc:	2300      	movs	r3, #0
    65be:	4605      	mov	r5, r0
    65c0:	4608      	mov	r0, r1
    65c2:	6023      	str	r3, [r4, #0]
    65c4:	f7fd fc82 	bl	3ecc <_sbrk>
    65c8:	1c43      	adds	r3, r0, #1
    65ca:	d000      	beq.n	65ce <_sbrk_r+0x16>
    65cc:	bd38      	pop	{r3, r4, r5, pc}
    65ce:	6823      	ldr	r3, [r4, #0]
    65d0:	2b00      	cmp	r3, #0
    65d2:	d0fb      	beq.n	65cc <_sbrk_r+0x14>
    65d4:	602b      	str	r3, [r5, #0]
    65d6:	bd38      	pop	{r3, r4, r5, pc}
    65d8:	2000928c 	.word	0x2000928c

000065dc <__register_exitproc>:
    65dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65e0:	4c25      	ldr	r4, [pc, #148]	; (6678 <__register_exitproc+0x9c>)
    65e2:	6825      	ldr	r5, [r4, #0]
    65e4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    65e8:	4606      	mov	r6, r0
    65ea:	4688      	mov	r8, r1
    65ec:	4692      	mov	sl, r2
    65ee:	4699      	mov	r9, r3
    65f0:	b3c4      	cbz	r4, 6664 <__register_exitproc+0x88>
    65f2:	6860      	ldr	r0, [r4, #4]
    65f4:	281f      	cmp	r0, #31
    65f6:	dc17      	bgt.n	6628 <__register_exitproc+0x4c>
    65f8:	1c43      	adds	r3, r0, #1
    65fa:	b176      	cbz	r6, 661a <__register_exitproc+0x3e>
    65fc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    6600:	2201      	movs	r2, #1
    6602:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    6606:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    660a:	4082      	lsls	r2, r0
    660c:	4311      	orrs	r1, r2
    660e:	2e02      	cmp	r6, #2
    6610:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    6614:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    6618:	d01e      	beq.n	6658 <__register_exitproc+0x7c>
    661a:	3002      	adds	r0, #2
    661c:	6063      	str	r3, [r4, #4]
    661e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    6622:	2000      	movs	r0, #0
    6624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6628:	4b14      	ldr	r3, [pc, #80]	; (667c <__register_exitproc+0xa0>)
    662a:	b303      	cbz	r3, 666e <__register_exitproc+0x92>
    662c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    6630:	f7ff fcb0 	bl	5f94 <malloc>
    6634:	4604      	mov	r4, r0
    6636:	b1d0      	cbz	r0, 666e <__register_exitproc+0x92>
    6638:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    663c:	2700      	movs	r7, #0
    663e:	e880 0088 	stmia.w	r0, {r3, r7}
    6642:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    6646:	4638      	mov	r0, r7
    6648:	2301      	movs	r3, #1
    664a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    664e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    6652:	2e00      	cmp	r6, #0
    6654:	d0e1      	beq.n	661a <__register_exitproc+0x3e>
    6656:	e7d1      	b.n	65fc <__register_exitproc+0x20>
    6658:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    665c:	430a      	orrs	r2, r1
    665e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    6662:	e7da      	b.n	661a <__register_exitproc+0x3e>
    6664:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    6668:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    666c:	e7c1      	b.n	65f2 <__register_exitproc+0x16>
    666e:	f04f 30ff 	mov.w	r0, #4294967295
    6672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6676:	bf00      	nop
    6678:	20004d10 	.word	0x20004d10
    667c:	00005f95 	.word	0x00005f95

00006680 <_malloc_trim_r>:
    6680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6682:	4f23      	ldr	r7, [pc, #140]	; (6710 <_malloc_trim_r+0x90>)
    6684:	460c      	mov	r4, r1
    6686:	4606      	mov	r6, r0
    6688:	f7ff ff92 	bl	65b0 <__malloc_lock>
    668c:	68bb      	ldr	r3, [r7, #8]
    668e:	685d      	ldr	r5, [r3, #4]
    6690:	f025 0503 	bic.w	r5, r5, #3
    6694:	1b29      	subs	r1, r5, r4
    6696:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    669a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    669e:	f021 010f 	bic.w	r1, r1, #15
    66a2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    66a6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    66aa:	db07      	blt.n	66bc <_malloc_trim_r+0x3c>
    66ac:	2100      	movs	r1, #0
    66ae:	4630      	mov	r0, r6
    66b0:	f7ff ff82 	bl	65b8 <_sbrk_r>
    66b4:	68bb      	ldr	r3, [r7, #8]
    66b6:	442b      	add	r3, r5
    66b8:	4298      	cmp	r0, r3
    66ba:	d004      	beq.n	66c6 <_malloc_trim_r+0x46>
    66bc:	4630      	mov	r0, r6
    66be:	f7ff ff79 	bl	65b4 <__malloc_unlock>
    66c2:	2000      	movs	r0, #0
    66c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66c6:	4261      	negs	r1, r4
    66c8:	4630      	mov	r0, r6
    66ca:	f7ff ff75 	bl	65b8 <_sbrk_r>
    66ce:	3001      	adds	r0, #1
    66d0:	d00d      	beq.n	66ee <_malloc_trim_r+0x6e>
    66d2:	4b10      	ldr	r3, [pc, #64]	; (6714 <_malloc_trim_r+0x94>)
    66d4:	68ba      	ldr	r2, [r7, #8]
    66d6:	6819      	ldr	r1, [r3, #0]
    66d8:	1b2d      	subs	r5, r5, r4
    66da:	f045 0501 	orr.w	r5, r5, #1
    66de:	4630      	mov	r0, r6
    66e0:	1b09      	subs	r1, r1, r4
    66e2:	6055      	str	r5, [r2, #4]
    66e4:	6019      	str	r1, [r3, #0]
    66e6:	f7ff ff65 	bl	65b4 <__malloc_unlock>
    66ea:	2001      	movs	r0, #1
    66ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66ee:	2100      	movs	r1, #0
    66f0:	4630      	mov	r0, r6
    66f2:	f7ff ff61 	bl	65b8 <_sbrk_r>
    66f6:	68ba      	ldr	r2, [r7, #8]
    66f8:	1a83      	subs	r3, r0, r2
    66fa:	2b0f      	cmp	r3, #15
    66fc:	ddde      	ble.n	66bc <_malloc_trim_r+0x3c>
    66fe:	4c06      	ldr	r4, [pc, #24]	; (6718 <_malloc_trim_r+0x98>)
    6700:	4904      	ldr	r1, [pc, #16]	; (6714 <_malloc_trim_r+0x94>)
    6702:	6824      	ldr	r4, [r4, #0]
    6704:	f043 0301 	orr.w	r3, r3, #1
    6708:	1b00      	subs	r0, r0, r4
    670a:	6053      	str	r3, [r2, #4]
    670c:	6008      	str	r0, [r1, #0]
    670e:	e7d5      	b.n	66bc <_malloc_trim_r+0x3c>
    6710:	20005254 	.word	0x20005254
    6714:	20007614 	.word	0x20007614
    6718:	20005660 	.word	0x20005660

0000671c <_free_r>:
    671c:	2900      	cmp	r1, #0
    671e:	d045      	beq.n	67ac <_free_r+0x90>
    6720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6724:	460d      	mov	r5, r1
    6726:	4680      	mov	r8, r0
    6728:	f7ff ff42 	bl	65b0 <__malloc_lock>
    672c:	f855 7c04 	ldr.w	r7, [r5, #-4]
    6730:	496a      	ldr	r1, [pc, #424]	; (68dc <_free_r+0x1c0>)
    6732:	f027 0301 	bic.w	r3, r7, #1
    6736:	f1a5 0408 	sub.w	r4, r5, #8
    673a:	18e2      	adds	r2, r4, r3
    673c:	688e      	ldr	r6, [r1, #8]
    673e:	6850      	ldr	r0, [r2, #4]
    6740:	42b2      	cmp	r2, r6
    6742:	f020 0003 	bic.w	r0, r0, #3
    6746:	d062      	beq.n	680e <_free_r+0xf2>
    6748:	07fe      	lsls	r6, r7, #31
    674a:	6050      	str	r0, [r2, #4]
    674c:	d40b      	bmi.n	6766 <_free_r+0x4a>
    674e:	f855 7c08 	ldr.w	r7, [r5, #-8]
    6752:	1be4      	subs	r4, r4, r7
    6754:	f101 0e08 	add.w	lr, r1, #8
    6758:	68a5      	ldr	r5, [r4, #8]
    675a:	4575      	cmp	r5, lr
    675c:	443b      	add	r3, r7
    675e:	d06f      	beq.n	6840 <_free_r+0x124>
    6760:	68e7      	ldr	r7, [r4, #12]
    6762:	60ef      	str	r7, [r5, #12]
    6764:	60bd      	str	r5, [r7, #8]
    6766:	1815      	adds	r5, r2, r0
    6768:	686d      	ldr	r5, [r5, #4]
    676a:	07ed      	lsls	r5, r5, #31
    676c:	d542      	bpl.n	67f4 <_free_r+0xd8>
    676e:	f043 0201 	orr.w	r2, r3, #1
    6772:	6062      	str	r2, [r4, #4]
    6774:	50e3      	str	r3, [r4, r3]
    6776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    677a:	d218      	bcs.n	67ae <_free_r+0x92>
    677c:	08db      	lsrs	r3, r3, #3
    677e:	1c5a      	adds	r2, r3, #1
    6780:	684d      	ldr	r5, [r1, #4]
    6782:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    6786:	60a7      	str	r7, [r4, #8]
    6788:	2001      	movs	r0, #1
    678a:	109b      	asrs	r3, r3, #2
    678c:	fa00 f303 	lsl.w	r3, r0, r3
    6790:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    6794:	431d      	orrs	r5, r3
    6796:	3808      	subs	r0, #8
    6798:	60e0      	str	r0, [r4, #12]
    679a:	604d      	str	r5, [r1, #4]
    679c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    67a0:	60fc      	str	r4, [r7, #12]
    67a2:	4640      	mov	r0, r8
    67a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67a8:	f7ff bf04 	b.w	65b4 <__malloc_unlock>
    67ac:	4770      	bx	lr
    67ae:	0a5a      	lsrs	r2, r3, #9
    67b0:	2a04      	cmp	r2, #4
    67b2:	d853      	bhi.n	685c <_free_r+0x140>
    67b4:	099a      	lsrs	r2, r3, #6
    67b6:	f102 0739 	add.w	r7, r2, #57	; 0x39
    67ba:	007f      	lsls	r7, r7, #1
    67bc:	f102 0538 	add.w	r5, r2, #56	; 0x38
    67c0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    67c4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    67c8:	4944      	ldr	r1, [pc, #272]	; (68dc <_free_r+0x1c0>)
    67ca:	3808      	subs	r0, #8
    67cc:	4290      	cmp	r0, r2
    67ce:	d04d      	beq.n	686c <_free_r+0x150>
    67d0:	6851      	ldr	r1, [r2, #4]
    67d2:	f021 0103 	bic.w	r1, r1, #3
    67d6:	428b      	cmp	r3, r1
    67d8:	d202      	bcs.n	67e0 <_free_r+0xc4>
    67da:	6892      	ldr	r2, [r2, #8]
    67dc:	4290      	cmp	r0, r2
    67de:	d1f7      	bne.n	67d0 <_free_r+0xb4>
    67e0:	68d0      	ldr	r0, [r2, #12]
    67e2:	60e0      	str	r0, [r4, #12]
    67e4:	60a2      	str	r2, [r4, #8]
    67e6:	6084      	str	r4, [r0, #8]
    67e8:	60d4      	str	r4, [r2, #12]
    67ea:	4640      	mov	r0, r8
    67ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67f0:	f7ff bee0 	b.w	65b4 <__malloc_unlock>
    67f4:	6895      	ldr	r5, [r2, #8]
    67f6:	4f3a      	ldr	r7, [pc, #232]	; (68e0 <_free_r+0x1c4>)
    67f8:	42bd      	cmp	r5, r7
    67fa:	4403      	add	r3, r0
    67fc:	d03f      	beq.n	687e <_free_r+0x162>
    67fe:	68d0      	ldr	r0, [r2, #12]
    6800:	60e8      	str	r0, [r5, #12]
    6802:	f043 0201 	orr.w	r2, r3, #1
    6806:	6085      	str	r5, [r0, #8]
    6808:	6062      	str	r2, [r4, #4]
    680a:	50e3      	str	r3, [r4, r3]
    680c:	e7b3      	b.n	6776 <_free_r+0x5a>
    680e:	07ff      	lsls	r7, r7, #31
    6810:	4403      	add	r3, r0
    6812:	d407      	bmi.n	6824 <_free_r+0x108>
    6814:	f855 2c08 	ldr.w	r2, [r5, #-8]
    6818:	1aa4      	subs	r4, r4, r2
    681a:	4413      	add	r3, r2
    681c:	68a0      	ldr	r0, [r4, #8]
    681e:	68e2      	ldr	r2, [r4, #12]
    6820:	60c2      	str	r2, [r0, #12]
    6822:	6090      	str	r0, [r2, #8]
    6824:	4a2f      	ldr	r2, [pc, #188]	; (68e4 <_free_r+0x1c8>)
    6826:	6812      	ldr	r2, [r2, #0]
    6828:	f043 0001 	orr.w	r0, r3, #1
    682c:	4293      	cmp	r3, r2
    682e:	6060      	str	r0, [r4, #4]
    6830:	608c      	str	r4, [r1, #8]
    6832:	d3b6      	bcc.n	67a2 <_free_r+0x86>
    6834:	4b2c      	ldr	r3, [pc, #176]	; (68e8 <_free_r+0x1cc>)
    6836:	4640      	mov	r0, r8
    6838:	6819      	ldr	r1, [r3, #0]
    683a:	f7ff ff21 	bl	6680 <_malloc_trim_r>
    683e:	e7b0      	b.n	67a2 <_free_r+0x86>
    6840:	1811      	adds	r1, r2, r0
    6842:	6849      	ldr	r1, [r1, #4]
    6844:	07c9      	lsls	r1, r1, #31
    6846:	d444      	bmi.n	68d2 <_free_r+0x1b6>
    6848:	6891      	ldr	r1, [r2, #8]
    684a:	68d2      	ldr	r2, [r2, #12]
    684c:	60ca      	str	r2, [r1, #12]
    684e:	4403      	add	r3, r0
    6850:	f043 0001 	orr.w	r0, r3, #1
    6854:	6091      	str	r1, [r2, #8]
    6856:	6060      	str	r0, [r4, #4]
    6858:	50e3      	str	r3, [r4, r3]
    685a:	e7a2      	b.n	67a2 <_free_r+0x86>
    685c:	2a14      	cmp	r2, #20
    685e:	d817      	bhi.n	6890 <_free_r+0x174>
    6860:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    6864:	007f      	lsls	r7, r7, #1
    6866:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    686a:	e7a9      	b.n	67c0 <_free_r+0xa4>
    686c:	10aa      	asrs	r2, r5, #2
    686e:	684b      	ldr	r3, [r1, #4]
    6870:	2501      	movs	r5, #1
    6872:	fa05 f202 	lsl.w	r2, r5, r2
    6876:	4313      	orrs	r3, r2
    6878:	604b      	str	r3, [r1, #4]
    687a:	4602      	mov	r2, r0
    687c:	e7b1      	b.n	67e2 <_free_r+0xc6>
    687e:	f043 0201 	orr.w	r2, r3, #1
    6882:	614c      	str	r4, [r1, #20]
    6884:	610c      	str	r4, [r1, #16]
    6886:	60e5      	str	r5, [r4, #12]
    6888:	60a5      	str	r5, [r4, #8]
    688a:	6062      	str	r2, [r4, #4]
    688c:	50e3      	str	r3, [r4, r3]
    688e:	e788      	b.n	67a2 <_free_r+0x86>
    6890:	2a54      	cmp	r2, #84	; 0x54
    6892:	d806      	bhi.n	68a2 <_free_r+0x186>
    6894:	0b1a      	lsrs	r2, r3, #12
    6896:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    689a:	007f      	lsls	r7, r7, #1
    689c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    68a0:	e78e      	b.n	67c0 <_free_r+0xa4>
    68a2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    68a6:	d806      	bhi.n	68b6 <_free_r+0x19a>
    68a8:	0bda      	lsrs	r2, r3, #15
    68aa:	f102 0778 	add.w	r7, r2, #120	; 0x78
    68ae:	007f      	lsls	r7, r7, #1
    68b0:	f102 0577 	add.w	r5, r2, #119	; 0x77
    68b4:	e784      	b.n	67c0 <_free_r+0xa4>
    68b6:	f240 5054 	movw	r0, #1364	; 0x554
    68ba:	4282      	cmp	r2, r0
    68bc:	d806      	bhi.n	68cc <_free_r+0x1b0>
    68be:	0c9a      	lsrs	r2, r3, #18
    68c0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    68c4:	007f      	lsls	r7, r7, #1
    68c6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    68ca:	e779      	b.n	67c0 <_free_r+0xa4>
    68cc:	27fe      	movs	r7, #254	; 0xfe
    68ce:	257e      	movs	r5, #126	; 0x7e
    68d0:	e776      	b.n	67c0 <_free_r+0xa4>
    68d2:	f043 0201 	orr.w	r2, r3, #1
    68d6:	6062      	str	r2, [r4, #4]
    68d8:	50e3      	str	r3, [r4, r3]
    68da:	e762      	b.n	67a2 <_free_r+0x86>
    68dc:	20005254 	.word	0x20005254
    68e0:	2000525c 	.word	0x2000525c
    68e4:	2000565c 	.word	0x2000565c
    68e8:	20007610 	.word	0x20007610
    68ec:	00000000 	.word	0x00000000

000068f0 <___Z14set_audioClockilmb_veneer>:
    68f0:	f85f f000 	ldr.w	pc, [pc]	; 68f4 <___Z14set_audioClockilmb_veneer+0x4>
    68f4:	600012a5 	.word	0x600012a5

000068f8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
    68f8:	f85f f000 	ldr.w	pc, [pc]	; 68fc <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
    68fc:	60001665 	.word	0x60001665

00006900 <___init_veneer>:
    6900:	f85f f000 	ldr.w	pc, [pc]	; 6904 <___init_veneer+0x4>
    6904:	600018e5 	.word	0x600018e5
	...

Disassembly of section .fini:

00006910 <_fini>:
    6910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6912:	bf00      	nop
