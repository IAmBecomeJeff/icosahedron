
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\FFT2\teensy40\Debug/FFT2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 10 dc 00 00 00 00 00 00                 ...`........

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8e1 	bl	60001300 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f93c 	bl	600013f8 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fbb1 	bl	600018f8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 fb82 	bl	600018e8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f9c5 	bl	60001578 <usb_init>
	analog_init();
600011ee:	f000 fa71 	bl	600016d4 <analog_init>
	pwm_init();
600011f2:	f000 fb7d 	bl	600018f0 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f931 	bl	6000145c <tempmon_init>

	startup_late_hook();
600011fa:	f000 fb81 	bl	60001900 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 fb7f 	bl	60001908 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 fb81 	bl	60001910 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	600019b0 	.word	0x600019b0
60001228:	00006bf0 	.word	0x00006bf0
6000122c:	20000000 	.word	0x20000000
60001230:	600085ac 	.word	0x600085ac
60001234:	20005670 	.word	0x20005670
60001238:	20005670 	.word	0x20005670
6000123c:	200092c0 	.word	0x200092c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	200077fc 	.word	0x200077fc
60001248:	00003db1 	.word	0x00003db1
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	000053fd 	.word	0x000053fd
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	00005501 	.word	0x00005501
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	20007280 	.word	0x20007280
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20007288 	.word	0x20007288
60001298:	20007800 	.word	0x20007800
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <set_audioClock(int, long, unsigned long, bool)>:
#if defined(__IMXRT1052__) || defined(__IMXRT1062__)
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
600012a4:	b410      	push	{r4}
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
600012a6:	b91b      	cbnz	r3, 600012b0 <set_audioClock(int, long, unsigned long, bool)+0xc>
600012a8:	4b13      	ldr	r3, [pc, #76]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
600012ac:	049b      	lsls	r3, r3, #18
600012ae:	d420      	bmi.n	600012f2 <set_audioClock(int, long, unsigned long, bool)+0x4e>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
600012b4:	4b10      	ldr	r3, [pc, #64]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012b6:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012ba:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012be:	f440 1089 	orr.w	r0, r0, #1122304	; 0x112000

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012c2:	461c      	mov	r4, r3
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600012c4:	6718      	str	r0, [r3, #112]	; 0x70

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600012c6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600012ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600012ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
600012d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
600012d4:	671a      	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600012d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
600012d8:	4a07      	ldr	r2, [pc, #28]	; (600012f8 <set_audioClock(int, long, unsigned long, bool)+0x54>)
600012da:	2b00      	cmp	r3, #0
600012dc:	dafb      	bge.n	600012d6 <set_audioClock(int, long, unsigned long, bool)+0x32>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600012de:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
600012e2:	4b06      	ldr	r3, [pc, #24]	; (600012fc <set_audioClock(int, long, unsigned long, bool)+0x58>)
600012e4:	400b      	ands	r3, r1
600012e6:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600012ea:	6f13      	ldr	r3, [r2, #112]	; 0x70
600012ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
600012f0:	6713      	str	r3, [r2, #112]	; 0x70
}
600012f2:	f85d 4b04 	ldr.w	r4, [sp], #4
600012f6:	4770      	bx	lr
600012f8:	400d8000 	.word	0x400d8000
600012fc:	ff7f7fff 	.word	0xff7f7fff

60001300 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001300:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001302:	4a28      	ldr	r2, [pc, #160]	; (600013a4 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001304:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001306:	4b28      	ldr	r3, [pc, #160]	; (600013a8 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001308:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000130c:	4c27      	ldr	r4, [pc, #156]	; (600013ac <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000130e:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001310:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 600013ec <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001314:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001316:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001318:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000131a:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000131e:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001322:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001324:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 600013f0 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001328:	4f21      	ldr	r7, [pc, #132]	; (600013b0 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000132a:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000132e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001330:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001332:	4e20      	ldr	r6, [pc, #128]	; (600013b4 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001334:	4f20      	ldr	r7, [pc, #128]	; (600013b8 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001336:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001338:	4920      	ldr	r1, [pc, #128]	; (600013bc <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000133a:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000133c:	4e20      	ldr	r6, [pc, #128]	; (600013c0 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000133e:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001342:	4f20      	ldr	r7, [pc, #128]	; (600013c4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001344:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001346:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001348:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000134c:	4e1e      	ldr	r6, [pc, #120]	; (600013c8 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000134e:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001350:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001352:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001354:	f8df e09c 	ldr.w	lr, [pc, #156]	; 600013f4 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001358:	4e1c      	ldr	r6, [pc, #112]	; (600013cc <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000135a:	491d      	ldr	r1, [pc, #116]	; (600013d0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000135c:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001360:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001362:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001364:	4f1b      	ldr	r7, [pc, #108]	; (600013d4 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001366:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001368:	4e1b      	ldr	r6, [pc, #108]	; (600013d8 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000136a:	491c      	ldr	r1, [pc, #112]	; (600013dc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000136c:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000136e:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001370:	4f1b      	ldr	r7, [pc, #108]	; (600013e0 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001372:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001374:	4e1b      	ldr	r6, [pc, #108]	; (600013e4 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001376:	491c      	ldr	r1, [pc, #112]	; (600013e8 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001378:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000137a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000137c:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000137e:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001380:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001384:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001388:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
6000138c:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001390:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001394:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001398:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
6000139c:	f842 3c88 	str.w	r3, [r2, #-136]
600013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
600013a2:	bf00      	nop
600013a4:	e000ed9c 	.word	0xe000ed9c
600013a8:	e000eda0 	.word	0xe000eda0
600013ac:	e000ed94 	.word	0xe000ed94
600013b0:	00100009 	.word	0x00100009
600013b4:	00200013 	.word	0x00200013
600013b8:	07020021 	.word	0x07020021
600013bc:	200092c0 	.word	0x200092c0
600013c0:	20000014 	.word	0x20000014
600013c4:	13080025 	.word	0x13080025
600013c8:	10000009 	.word	0x10000009
600013cc:	40000017 	.word	0x40000017
600013d0:	13100033 	.word	0x13100033
600013d4:	60000018 	.word	0x60000018
600013d8:	070b002f 	.word	0x070b002f
600013dc:	70000019 	.word	0x70000019
600013e0:	170b0037 	.word	0x170b0037
600013e4:	7000001a 	.word	0x7000001a
600013e8:	130b002f 	.word	0x130b002f
600013ec:	1000003f 	.word	0x1000003f
600013f0:	03080025 	.word	0x03080025
600013f4:	20200016 	.word	0x20200016

600013f8 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
600013f8:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013fa:	4a17      	ldr	r2, [pc, #92]	; (60001458 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013fc:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001402:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001406:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000140a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140e:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001412:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001414:	f013 0f02 	tst.w	r3, #2
60001418:	d006      	beq.n	60001428 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000141a:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000141c:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141e:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001420:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001422:	f013 0f02 	tst.w	r3, #2
60001426:	d1f8      	bne.n	6000141a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001428:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000142c:	d101      	bne.n	60001432 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142e:	6155      	str	r5, [r2, #20]
			continue;
60001430:	e7ef      	b.n	60001412 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001432:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001436:	d101      	bne.n	6000143c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001438:	6156      	str	r6, [r2, #20]
			continue;
6000143a:	e7ea      	b.n	60001412 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000143c:	2b00      	cmp	r3, #0
6000143e:	dae8      	bge.n	60001412 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001440:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001444:	d001      	beq.n	6000144a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001446:	6191      	str	r1, [r2, #24]
			continue;
60001448:	e7e3      	b.n	60001412 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000144a:	065b      	lsls	r3, r3, #25
6000144c:	d401      	bmi.n	60001452 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144e:	6157      	str	r7, [r2, #20]
			continue;
60001450:	e7df      	b.n	60001412 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001452:	bcf0      	pop	{r4, r5, r6, r7}
60001454:	4770      	bx	lr
60001456:	bf00      	nop
60001458:	400d8000 	.word	0x400d8000

6000145c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000145c:	4a3b      	ldr	r2, [pc, #236]	; (6000154c <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001462:	493b      	ldr	r1, [pc, #236]	; (60001550 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001464:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001466:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001468:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000146a:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000146e:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001470:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001574 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001474:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001476:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000147a:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000147e:	4f35      	ldr	r7, [pc, #212]	; (60001554 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001480:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001482:	f3c3 240b 	ubfx	r4, r3, #8, #12
60001486:	4e34      	ldr	r6, [pc, #208]	; (60001558 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001488:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000148c:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001490:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001494:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000149c:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014a0:	ee07 4a90 	vmov	s15, r4
600014a4:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014a8:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014aa:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ae:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b2:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014b6:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b8:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c0:	4d26      	ldr	r5, [pc, #152]	; (6000155c <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c2:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c6:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c8:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d0:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014d2:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600014d6:	4e22      	ldr	r6, [pc, #136]	; (60001560 <tempmon_init+0x104>)
600014d8:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014da:	4922      	ldr	r1, [pc, #136]	; (60001564 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014dc:	4c22      	ldr	r4, [pc, #136]	; (60001568 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014de:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014e2:	ee07 3a90 	vmov	s15, r3
600014e6:	4b21      	ldr	r3, [pc, #132]	; (6000156c <tempmon_init+0x110>)
600014e8:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
600014ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
600014f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f4:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014f8:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014fc:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001500:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001504:	ee15 3a90 	vmov	r3, s11
60001508:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000150c:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001510:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001514:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001516:	ea01 4105 	and.w	r1, r1, r5, lsl #16
6000151a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000151e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001522:	430b      	orrs	r3, r1
60001524:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001528:	ee17 3a90 	vmov	r3, s15
6000152c:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
60001530:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001534:	430b      	orrs	r3, r1
60001536:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000153a:	6813      	ldr	r3, [r2, #0]
6000153c:	f043 0302 	orr.w	r3, r3, #2
60001540:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001542:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001544:	4b0a      	ldr	r3, [pc, #40]	; (60001570 <tempmon_init+0x114>)
60001546:	2201      	movs	r2, #1
60001548:	601a      	str	r2, [r3, #0]
6000154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000154c:	400d8180 	.word	0x400d8180
60001550:	401f4400 	.word	0x401f4400
60001554:	20007294 	.word	0x20007294
60001558:	20007298 	.word	0x20007298
6000155c:	20007290 	.word	0x20007290
60001560:	20007800 	.word	0x20007800
60001564:	0fff0000 	.word	0x0fff0000
60001568:	e000e440 	.word	0xe000e440
6000156c:	00003e91 	.word	0x00003e91
60001570:	e000e108 	.word	0xe000e108
60001574:	2000728c 	.word	0x2000728c

60001578 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001578:	4b30      	ldr	r3, [pc, #192]	; (6000163c <usb_init+0xc4>)
6000157a:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000157e:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001580:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001584:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001588:	f000 f9ce 	bl	60001928 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000158c:	492c      	ldr	r1, [pc, #176]	; (60001640 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000158e:	482d      	ldr	r0, [pc, #180]	; (60001644 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001590:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001594:	4c2c      	ldr	r4, [pc, #176]	; (60001648 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001596:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000159a:	4b2c      	ldr	r3, [pc, #176]	; (6000164c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000159c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600015a0:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600015a4:	6822      	ldr	r2, [r4, #0]
600015a6:	4013      	ands	r3, r2
600015a8:	b91b      	cbnz	r3, 600015b2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600015aa:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600015ae:	079a      	lsls	r2, r3, #30
600015b0:	d01a      	beq.n	600015e8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015b2:	4b24      	ldr	r3, [pc, #144]	; (60001644 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600015b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600015b8:	4a23      	ldr	r2, [pc, #140]	; (60001648 <usb_init+0xd0>)
600015ba:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015bc:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015be:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600015c2:	f041 0102 	orr.w	r1, r1, #2
600015c6:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015ca:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600015ce:	079b      	lsls	r3, r3, #30
600015d0:	d4fb      	bmi.n	600015ca <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600015d6:	491e      	ldr	r1, [pc, #120]	; (60001650 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015d8:	4b1b      	ldr	r3, [pc, #108]	; (60001648 <usb_init+0xd0>)
600015da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015de:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015e0:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015e2:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015e4:	f000 f998 	bl	60001918 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015e8:	4d1a      	ldr	r5, [pc, #104]	; (60001654 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015ea:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015ec:	4b16      	ldr	r3, [pc, #88]	; (60001648 <usb_init+0xd0>)
600015ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015f2:	4c14      	ldr	r4, [pc, #80]	; (60001644 <usb_init+0xcc>)
600015f4:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015f6:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f8:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015fa:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015fc:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015fe:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001602:	f44f 7220 	mov.w	r2, #640	; 0x280
60001606:	f000 f98b 	bl	60001920 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000160a:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000160e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001612:	f240 1343 	movw	r3, #323	; 0x143
60001616:	4a10      	ldr	r2, [pc, #64]	; (60001658 <usb_init+0xe0>)
60001618:	4910      	ldr	r1, [pc, #64]	; (6000165c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000161a:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000161c:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000161e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
60001622:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001626:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000162a:	4a0d      	ldr	r2, [pc, #52]	; (60001660 <usb_init+0xe8>)
6000162c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001630:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001632:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001634:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001638:	bd70      	pop	{r4, r5, r6, pc}
6000163a:	bf00      	nop
6000163c:	400d8000 	.word	0x400d8000
60001640:	400fc000 	.word	0x400fc000
60001644:	402e0000 	.word	0x402e0000
60001648:	400d9000 	.word	0x400d9000
6000164c:	001e1c00 	.word	0x001e1c00
60001650:	e000e28c 	.word	0xe000e28c
60001654:	20009000 	.word	0x20009000
60001658:	20007800 	.word	0x20007800
6000165c:	00003ffd 	.word	0x00003ffd
60001660:	e000e10c 	.word	0xe000e10c

60001664 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
FLASHMEM void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
60001664:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
60001668:	b4f0      	push	{r4, r5, r6, r7}
6000166a:	bf28      	it	cs
6000166c:	f44f 7160 	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
60001670:	b672      	cpsid	i
	memory_pool = data;
	memory_pool_first_mask = 0;
60001672:	2500      	movs	r5, #0
60001674:	4b13      	ldr	r3, [pc, #76]	; (600016c4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
60001676:	4f14      	ldr	r7, [pc, #80]	; (600016c8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)
	memory_pool_first_mask = 0;
60001678:	4e14      	ldr	r6, [pc, #80]	; (600016cc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000167a:	462c      	mov	r4, r5
6000167c:	f103 0270 	add.w	r2, r3, #112	; 0x70

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
60001680:	6038      	str	r0, [r7, #0]
	memory_pool_first_mask = 0;
60001682:	8035      	strh	r5, [r6, #0]
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001684:	f843 4f04 	str.w	r4, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
60001688:	4293      	cmp	r3, r2
6000168a:	d1fb      	bne.n	60001684 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x20>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
6000168c:	b1b9      	cbz	r1, 600016be <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5a>
6000168e:	2300      	movs	r3, #0
60001690:	4e0f      	ldr	r6, [pc, #60]	; (600016d0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001692:	2701      	movs	r7, #1
60001694:	095d      	lsrs	r5, r3, #5
60001696:	f003 041f 	and.w	r4, r3, #31
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
6000169a:	3301      	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000169c:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
600016a0:	fa07 f404 	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600016a4:	428b      	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600016a6:	ea42 0204 	orr.w	r2, r2, r4
600016aa:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
600016ae:	d1f1      	bne.n	60001694 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x30>
600016b0:	2300      	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
600016b2:	8043      	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
600016b4:	3301      	adds	r3, #1
600016b6:	f500 7082 	add.w	r0, r0, #260	; 0x104
600016ba:	428b      	cmp	r3, r1
600016bc:	d1f9      	bne.n	600016b2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4e>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
600016be:	b662      	cpsie	i

}
600016c0:	bcf0      	pop	{r4, r5, r6, r7}
600016c2:	4770      	bx	lr
600016c4:	200074c4 	.word	0x200074c4
600016c8:	20007538 	.word	0x20007538
600016cc:	2000753e 	.word	0x2000753e
600016d0:	200074c8 	.word	0x200074c8

600016d4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016d4:	4b11      	ldr	r3, [pc, #68]	; (6000171c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016d6:	4912      	ldr	r1, [pc, #72]	; (60001720 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016d8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600016da:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016dc:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600016e0:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600016e2:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016e4:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600016e8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600016ea:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600016ec:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600016f0:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600016f2:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600016f4:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600016f6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016f8:	061b      	lsls	r3, r3, #24
600016fa:	d4fc      	bmi.n	600016f6 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600016fc:	4b09      	ldr	r3, [pc, #36]	; (60001724 <analog_init+0x50>)
600016fe:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001702:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001704:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001706:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001708:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000170a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000170c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001710:	d1fb      	bne.n	6000170a <analog_init+0x36>
	calibrating = 0;
60001712:	4a05      	ldr	r2, [pc, #20]	; (60001728 <analog_init+0x54>)
60001714:	7013      	strb	r3, [r2, #0]
}
60001716:	bc30      	pop	{r4, r5}
60001718:	4770      	bx	lr
6000171a:	bf00      	nop
6000171c:	400fc000 	.word	0x400fc000
60001720:	400c4000 	.word	0x400c4000
60001724:	400c8000 	.word	0x400c8000
60001728:	20007565 	.word	0x20007565

6000172c <TwoWire::i2c4_hardware>:
6000172c:	400fc080 03000000 00000019 00000010     ...@............
6000173c:	401f84e8 00000001 000000ff 000000ff     ...@............
	...
60001754:	00000018 00000010 401f84e4 00000001     ...........@....
60001764:	000000ff 000000ff 00000000 00000000     ................
60001774:	0000001f                                ....

60001778 <TwoWire::i2c3_hardware>:
60001778:	400fc070 00000c00 00000011 00000011     p..@............
60001788:	401f84e0 00000002 00000024 00000012     ...@....$.......
60001798:	401f84e0 00000001 00000010 00000011     ...@............
600017a8:	401f84dc 00000002 00000025 00000012     ...@....%.......
600017b8:	401f84dc 00000001 0000001e              ...@........

600017c4 <TwoWire::i2c1_hardware>:
600017c4:	400fc070 000000c0 00000012 00000013     p..@............
600017d4:	401f84d0 00000001 000000ff 000000ff     ...@............
	...
600017ec:	00000013 00000013 401f84cc 00000001     ...........@....
600017fc:	000000ff 000000ff 00000000 00000000     ................
6000180c:	0000001c                                ....

60001810 <usb_string_product_name_default>:
60001810:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001820:	00610069 0000006c                       i.a.l...

60001828 <usb_string_manufacturer_name_default>:
60001828:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001838:	00690075 006f006e                       u.i.n.o.

60001840 <string0>:
60001840:	04090304                                ....

60001844 <usb_config_descriptor_12>:
60001844:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001854:	24050001 05011000 01010124 06022404     ...$....$....$..
60001864:	00062405 82050701 10001003 00010409     .$..............
60001874:	00000a02 03050700 00004002 02840507     .........@......
60001884:	00000040                                @...

60001888 <usb_config_descriptor_480>:
60001888:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001898:	24050001 05011000 01010124 06022404     ...$....$....$..
600018a8:	00062405 82050701 05001003 00010409     .$..............
600018b8:	00000a02 03050700 00020002 02840507     ................
600018c8:	00000200                                ....

600018cc <qualifier_descriptor>:
600018cc:	0200060a 40000002 ffff0001              .......@....

600018d8 <_init>:
600018d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600018da:	bf00      	nop
600018dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
600018de:	bc08      	pop	{r3}
600018e0:	469e      	mov	lr, r3
600018e2:	4770      	bx	lr
600018e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

600018e8 <__startup_early_hook_veneer>:
600018e8:	f85f f000 	ldr.w	pc, [pc]	; 600018ec <__startup_early_hook_veneer+0x4>
600018ec:	00003dc9 	.word	0x00003dc9

600018f0 <__pwm_init_veneer>:
600018f0:	f85f f000 	ldr.w	pc, [pc]	; 600018f4 <__pwm_init_veneer+0x4>
600018f4:	00003af9 	.word	0x00003af9

600018f8 <__set_arm_clock_veneer>:
600018f8:	f85f f000 	ldr.w	pc, [pc]	; 600018fc <__set_arm_clock_veneer+0x4>
600018fc:	000036ad 	.word	0x000036ad

60001900 <__startup_late_hook_veneer>:
60001900:	f85f f000 	ldr.w	pc, [pc]	; 60001904 <__startup_late_hook_veneer+0x4>
60001904:	00003dcd 	.word	0x00003dcd

60001908 <____libc_init_array_veneer>:
60001908:	f85f f000 	ldr.w	pc, [pc]	; 6000190c <____libc_init_array_veneer+0x4>
6000190c:	00006229 	.word	0x00006229

60001910 <__main_veneer>:
60001910:	f85f f000 	ldr.w	pc, [pc]	; 60001914 <__main_veneer+0x4>
60001914:	00005521 	.word	0x00005521

60001918 <__delay_veneer>:
60001918:	f85f f000 	ldr.w	pc, [pc]	; 6000191c <__delay_veneer+0x4>
6000191c:	00003971 	.word	0x00003971

60001920 <__memset_veneer>:
60001920:	f85f f000 	ldr.w	pc, [pc]	; 60001924 <__memset_veneer+0x4>
60001924:	000067f9 	.word	0x000067f9

60001928 <__usb_init_serialnumber_veneer>:
60001928:	f85f f000 	ldr.w	pc, [pc]	; 6000192c <__usb_init_serialnumber_veneer+0x4>
6000192c:	000047b5 	.word	0x000047b5

60001930 <__init_array_start>:
60001930:	00000045 	.word	0x00000045
60001934:	00000bd5 	.word	0x00000bd5
60001938:	00000f85 	.word	0x00000f85
6000193c:	00001205 	.word	0x00001205
60001940:	000014cd 	.word	0x000014cd
60001944:	0000170d 	.word	0x0000170d
60001948:	00001725 	.word	0x00001725
6000194c:	0000173d 	.word	0x0000173d
60001950:	00001755 	.word	0x00001755
60001954:	0000176d 	.word	0x0000176d
60001958:	00001785 	.word	0x00001785
6000195c:	0000179d 	.word	0x0000179d
60001960:	000017b5 	.word	0x000017b5
60001964:	00001989 	.word	0x00001989
60001968:	000019a1 	.word	0x000019a1
6000196c:	000019b9 	.word	0x000019b9
60001970:	000019d1 	.word	0x000019d1
60001974:	000019e9 	.word	0x000019e9
60001978:	00001a01 	.word	0x00001a01
6000197c:	00001a19 	.word	0x00001a19
60001980:	00001a31 	.word	0x00001a31
60001984:	00001a49 	.word	0x00001a49
60001988:	00001a61 	.word	0x00001a61
6000198c:	00001a79 	.word	0x00001a79
60001990:	00001a91 	.word	0x00001a91
60001994:	00001aa9 	.word	0x00001aa9
60001998:	00001e49 	.word	0x00001e49
6000199c:	00002509 	.word	0x00002509
600019a0:	000032e5 	.word	0x000032e5

600019a4 <__init_array_end>:
600019a4:	ffffffff 	.word	0xffffffff
600019a8:	ffffffff 	.word	0xffffffff
600019ac:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	.short	0xbd10
      38:	5670      	ldrsb	r0, [r6, r1]
      3a:	2000      	.short	0x2000
      3c:	0000      	movs	r0, r0
      3e:	0000      	movs	r0, r0
}
      40:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
	...

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	2b00      	cmp	r3, #0
      5e:	d0fb      	.short	0xd0fb
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	bf004718 	.word	0xbf004718
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	20005674 	.word	0x20005674
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
  ADC2_CFG = mode1;
      72:	0000      	.short	0x0000
  
  if(num >= 4){
      74:	5670      	ldrsb	r0, [r6, r1]
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	00000000 	.word	0x00000000

0000007c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
      7c:	6940      	ldr	r0, [r0, #20]
      7e:	4770      	bx	lr

00000080 <CLEDController::getMaxRefreshRate() const>:
      80:	47702000 	.word	0x47702000

00000084 <Pin::select()>:
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      84:	6842      	ldr	r2, [r0, #4]
      86:	68c1      	.short	0x68c1
		if (binFirst > binLast) {
			unsigned int tmp = binLast;
			binLast = binFirst;
			binFirst = tmp;
		}
		if (binFirst > 511) return 0.0;
      88:	6813      	ldr	r3, [r2, #0]
      8a:	430b      	.short	0x430b
      8c:	6013      	str	r3, [r2, #0]
      8e:	4770      	bx	lr

00000090 <Pin::release()>:
      90:	68c16842 	.word	0x68c16842
      94:	6813      	ldr	r3, [r2, #0]
      96:	ea23      	.short	0xea23
      98:	0301      	lsls	r1, r0, #12
      9a:	6013      	str	r3, [r2, #0]
      9c:	4770      	bx	lr
      9e:	bf00      	nop

000000a0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::init()>:
      a0:	4801      	ldr	r0, [pc, #4]	; (a8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::init()+0x8>)
      a2:	f001 bdb1 	b.w	1c08 <SPIClass::begin()>

	// set the object representing the selectable -- ignore for now
	void setSelect(Selectable *pSelect) { /* TODO */ }

	// initialize the SPI subssytem
	void init() { _SPIObject.begin(); }
      a6:	bf00      	nop
      a8:	4d14      	ldr	r5, [pc, #80]	; (fc <CLEDController::clearLeds(int)+0x44>)
      aa:	2000      	movs	r0, #0

000000ac <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
      ac:	b510      	push	{r4, lr}
      ae:	4604      	.short	0x4604
		disconnect();
      b0:	f005 f87a 	bl	51a8 <AudioConnection::disconnect()>
	}
      b4:	4620      	mov	r0, r4
      b6:	bd10      	pop	{r4, pc}

000000b8 <CLEDController::clearLeds(int)>:
      b8:	2300b5f0 	.word	0x2300b5f0

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    br = 0;
      bc:	b08b      	sub	sp, #44	; 0x2c
    lastframe = millis();
      be:	6805      	.short	0x6805
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
      c0:	4a3b      	ldr	r2, [pc, #236]	; (1b0 <CLEDController::clearLeds(int)+0xf8>)
      c2:	f88d      	.short	0xf88d
      c4:	3004      	adds	r0, #4
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
      c6:	f88d 3005 	strb.w	r3, [sp, #5]
      ca:	f88d      	.short	0xf88d
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
      cc:	3006      	adds	r0, #6
      ce:	682e      	.short	0x682e
      d0:	f88d 3008 	strb.w	r3, [sp, #8]
      d4:	f88d4296 	.word	0xf88d4296
      d8:	3009      	adds	r0, #9
      da:	f88d      	.short	0xf88d
      dc:	300a      	adds	r0, #10
      de:	d160      	.short	0xd160
      e0:	4604      	mov	r4, r0
      e2:	a801      	add	r0, sp, #4
      e4:	9104      	str	r1, [sp, #16]
      e6:	7ca2      	ldrb	r2, [r4, #18]
      e8:	9105      	str	r1, [sp, #20]
      ea:	2a01      	cmp	r2, #1
      ec:	301ef88d 	.word	0x301ef88d

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
      f0:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
      f4:	3020f88d 	.word	0x3020f88d
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
      f8:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
      fa:	d015      	.short	0xd015
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
      fc:	f88d 301d 	strb.w	r3, [sp, #29]
     100:	301cf88d 	.word	0x301cf88d
     104:	f88d 301b 	strb.w	r3, [sp, #27]
     108:	301af88d 	.word	0x301af88d
     10c:	f88d 3019 	strb.w	r3, [sp, #25]
     110:	3018f88d 	.word	0x3018f88d
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     114:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     116:	69aa      	.short	0x69aa
     118:	4620      	mov	r0, r4
     11a:	a903      	add	r1, sp, #12
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     11c:	3021f88d 	.word	0x3021f88d
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     120:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     122:	4790      	.short	0x4790

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     124:	b00b      	add	sp, #44	; 0x2c
     126:	bdf0      	.short	0xbdf0
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     128:	4a22      	ldr	r2, [pc, #136]	; (1b4 <CLEDController::clearLeds(int)+0xfc>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     12a:	7813      	.short	0x7813
     12c:	3301      	adds	r3, #1
     12e:	f003      	.short	0xf003
     130:	0307      	lsls	r7, r0, #12

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     132:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     136:	7013      	.short	0x7013

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     138:	bf14      	ite	ne
     13a:	2180      	.short	0x2180
     13c:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     13e:	079a      	.short	0x079a
     140:	d502      	bpl.n	148 <CLEDController::clearLeds(int)+0x90>
     142:	f041      	.short	0xf041
     144:	0140      	lsls	r0, r0, #5
     146:	b2c9      	.short	0xb2c9
                if(R & 0x04) { Q |= 0x20; }
     148:	075b      	lsls	r3, r3, #29
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     14a:	f04f 0200 	mov.w	r2, #0
     14e:	f10d      	.short	0xf10d
     150:	031b      	lsls	r3, r3, #12
     152:	f10d      	.short	0xf10d
     154:	071e      	lsls	r6, r3, #28

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     156:	bf48      	it	mi
     158:	0120f041 	.word	0x0120f041
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     15c:	f44f 7e80 	mov.w	lr, #256	; 0x100
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     160:	b2c93110 	.word	0xb2c93110
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     164:	b1aa      	cbz	r2, 192 <CLEDController::clearLeds(int)+0xda>
     166:	fb9e      	.short	0xfb9e
     168:	f2f2 b2d2 	b.w	6f2710 <_flashimagelen+0x6e4b00>	; unpredictable branch in IT block

     16c:	b2c01c50 	.word	0xb2c01c50
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     170:	fb00 1501 	mla	r5, r0, r1, r1
     174:	122d7018 	.word	0x122d7018
     178:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     17a:	b105      	.short	0xb105
     17c:	3e01      	subs	r6, #1
     17e:	f803 6c03 	strbmi.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     182:	b100      	.short	0xb100
     184:	701a      	strb	r2, [r3, #0]
     186:	3301      	.short	0x3301
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     188:	429f      	cmp	r7, r3
     18a:	d008      	beq.n	19e <CLEDController::clearLeds(int)+0xe6>
     18c:	2a0078da 	.word	0x2a0078da
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     190:	d1e9      	bne.n	166 <CLEDController::clearLeds(int)+0xae>
     192:	701a      	.short	0x701a
     194:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
     196:	f803 2c04 	strb.w	r2, [r3, #-4]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     19a:	429f      	cmp	r7, r3
     19c:	d1f6      	bne.n	18c <CLEDController::clearLeds(int)+0xd4>
     19e:	6825      	.short	0x6825
     1a0:	e7b8      	b.n	114 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     1a2:	460a      	mov	r2, r1
     1a4:	a901ab02 	.word	0xa901ab02
     1a8:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     1aa:	b00b      	.short	0xb00b
     1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ae:	bf00      	.short	0xbf00
     1b0:	01b9      	lsls	r1, r7, #6
     1b2:	0000      	.short	0x0000
     1b4:	568c      	ldrsb	r4, [r1, r2]
     1b6:	2000      	movs	r0, #0

000001b8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     1b8:	b089b5f0 	.word	0xb089b5f0

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     1bc:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     1be:	789c      	ldrb	r4, [r3, #2]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     1c0:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     1c2:	7819      	.short	0x7819
     1c4:	7c83      	ldrb	r3, [r0, #18]
     1c6:	9202      	.short	0x9202
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1c8:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     1ca:	9203      	.short	0x9203
     1cc:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     1d0:	5017f88d 	.word	0x5017f88d
        b = rhs.b;
     1d4:	f88d 4018 	strb.w	r4, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1d8:	d016      	beq.n	208 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     1da:	2300      	movs	r3, #0
     1dc:	f88d 3015 	strb.w	r3, [sp, #21]
     1e0:	f88d 3014 	strb.w	r3, [sp, #20]
     1e4:	f88d 3013 	strb.w	r3, [sp, #19]
     1e8:	3012f88d 	.word	0x3012f88d
     1ec:	f88d 3011 	strb.w	r3, [sp, #17]
     1f0:	3010f88d 	.word	0x3010f88d
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     1f4:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     1f6:	6802      	.short	0x6802
     1f8:	a901      	add	r1, sp, #4
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     1fa:	f88d      	.short	0xf88d
     1fc:	3019      	adds	r0, #25
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     1fe:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     200:	6993      	ldr	r3, [r2, #24]
     202:	4798      	blx	r3
  }
     204:	b009      	add	sp, #36	; 0x24
     206:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     208:	4a1b      	ldr	r2, [pc, #108]	; (278 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     20a:	7813      	ldrb	r3, [r2, #0]
     20c:	f0033301 	.word	0xf0033301
     210:	0307      	lsls	r7, r0, #12

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     212:	f013      	.short	0xf013
     214:	0f01      	lsrs	r1, r0, #28
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     216:	7013      	.short	0x7013

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     218:	bf14      	ite	ne
     21a:	2280      	.short	0x2280
     21c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     21e:	079c      	lsls	r4, r3, #30
     220:	f042d502 	.word	0xf042d502
     224:	0240      	lsls	r0, r0, #9
     226:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     228:	075b      	lsls	r3, r3, #29
     22a:	f10d      	.short	0xf10d
     22c:	0716      	lsls	r6, r2, #28
     22e:	f10d      	.short	0xf10d
     230:	0313      	lsls	r3, r2, #12
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     232:	f44f      	.short	0xf44f
     234:	7e80      	ldrb	r0, [r0, #26]

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     236:	bf48      	.short	0xbf48
     238:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     23c:	b2d23210 	.word	0xb2d23210
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     240:	b1a9      	cbz	r1, 26e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     242:	fb9e      	.short	0xfb9e
     244:	f1f1 b2c9 	b.w	5f17da <_flashimagelen+0x5e3bca>
     248:	b2e41c4c 	.word	0xb2e41c4c
     24c:	fb04 2502 	mla	r5, r4, r2, r2
     250:	122d701c 	.word	0x122d701c
     254:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     256:	b105      	.short	0xb105
     258:	3e01      	subs	r6, #1
     25a:	f803      	.short	0xf803
     25c:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif
                    if(e[i]) e[i]--;
     25e:	b104      	.short	0xb104
     260:	7019      	strb	r1, [r3, #0]
     262:	3301      	.short	0x3301
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     264:	42bb      	cmp	r3, r7
     266:	d0c5      	.short	0xd0c5
     268:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     26a:	2900      	.short	0x2900
     26c:	d1e9      	bne.n	242 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     26e:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     270:	f803 1c03 	strb.w	r1, [r3, #-3]
     274:	e7f5      	b.n	262 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     276:	bf00      	.short	0xbf00
     278:	568c      	ldrsb	r4, [r1, r2]
     27a:	2000      	.short	0x2000

0000027c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     27c:	b5f0      	push	{r4, r5, r6, r7, lr}
     27e:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     280:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     282:	789c      	.short	0x789c
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     284:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     286:	7819      	.short	0x7819
     288:	7c83      	ldrb	r3, [r0, #18]
     28a:	9202      	.short	0x9202
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     28c:	2b01      	cmp	r3, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     28e:	9203      	.short	0x9203
     290:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     294:	5017f88d 	.word	0x5017f88d
        b = rhs.b;
     298:	f88d 4018 	strb.w	r4, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     29c:	2300d017 	.word	0x2300d017
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     2a0:	f88d 3015 	strb.w	r3, [sp, #21]
     2a4:	3014f88d 	.word	0x3014f88d
     2a8:	f88d 3013 	strb.w	r3, [sp, #19]
     2ac:	3012f88d 	.word	0x3012f88d
     2b0:	f88d 3011 	strb.w	r3, [sp, #17]
     2b4:	3010f88d 	.word	0x3010f88d
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     2b8:	6803      	ldr	r3, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     2ba:	2103      	.short	0x2103
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     2bc:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     2be:	f88d      	.short	0xf88d
     2c0:	1019      	asrs	r1, r3, #32
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     2c2:	a901      	.short	0xa901
     2c4:	699b      	ldr	r3, [r3, #24]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     2c6:	9207      	.short	0x9207
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     2c8:	4798      	blx	r3
  }
     2ca:	b009      	.short	0xb009
     2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     2ce:	4a1b      	ldr	r2, [pc, #108]	; (33c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     2d0:	33017813 	.word	0x33017813
     2d4:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     2d8:	0f01f013 	.word	0x0f01f013
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     2dc:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     2de:	bf14      	.short	0xbf14
     2e0:	2280      	movne	r2, #128	; 0x80
     2e2:	2200      	.short	0x2200

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     2e4:	079c      	lsls	r4, r3, #30
     2e6:	d502      	.short	0xd502
     2e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     2ec:	075bb2d2 	.word	0x075bb2d2
                if(R & 0x04) { Q |= 0x20; }
     2f0:	f10d 0716 	add.w	r7, sp, #22
     2f4:	0313f10d 	.word	0x0313f10d
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     2f8:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     2fc:	f042bf48 	.word	0xf042bf48
     300:	0220      	lsls	r0, r4, #8
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     302:	3210      	.short	0x3210
     304:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     306:	b1a9      	.short	0xb1a9
     308:	fb9e f1f1 	sdiv	r1, lr, r1
     30c:	1c4cb2c9 	.word	0x1c4cb2c9
     310:	b2e4      	uxtb	r4, r4
     312:	fb04      	.short	0xfb04
     314:	2502      	movs	r5, #2
     316:	701c      	.short	0x701c
     318:	122d      	asrs	r5, r5, #8
     31a:	b2ee      	uxtbeq	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     31c:	b105      	cbz	r5, 320 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     31e:	3e01      	.short	0x3e01
     320:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     324:	7019b104 	.word	0x7019b104
     328:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     32a:	42bb      	.short	0x42bb
     32c:	d0c4      	beq.n	2b8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     32e:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     330:	2900      	cmp	r1, #0
     332:	d1e9      	.short	0xd1e9
     334:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     336:	f803 1c03 	strb.w	r1, [r3, #-3]
     33a:	e7f5      	b.n	328 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     33c:	2000568c 	.word	0x2000568c

00000340 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     344:	9278f8df 	.word	0x9278f8df
     348:	b087      	sub	sp, #28
     34a:	4680      	.short	0x4680
     34c:	f899 3013 	ldrb.w	r3, [r9, #19]
     350:	d0352b00 	.word	0xd0352b00
			__disable_irq();
     354:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     356:	f899 2013 	ldrb.w	r2, [r9, #19]
     35a:	07d5      	.short	0x07d5
     35c:	4613      	mov	r3, r2
     35e:	d507      	.short	0xd507
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     360:	4c93      	ldr	r4, [pc, #588]	; (5b0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x270>)
     362:	f8d9      	.short	0xf8d9
     364:	0014      	movs	r4, r2
     366:	6825      	ldr	r5, [r4, #0]
     368:	4028      	ands	r0, r5
     36a:	f8c9      	.short	0xf8c9
     36c:	0028      	movs	r0, r5
				NVIC_ICER0 = interruptSave[0];
     36e:	6020      	.short	0x6020
			}
			if (interruptMasksUsed & 0x02) {
     370:	0794      	lsls	r4, r2, #30
     372:	d509      	.short	0xd509
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     374:	488f      	ldr	r0, [pc, #572]	; (5b4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x274>)
     376:	f8d9      	.short	0xf8d9
     378:	2018      	movs	r0, #24
     37a:	6804      	.short	0x6804
     37c:	f899 3013 	ldrb.w	r3, [r9, #19]
     380:	f8c94022 	.word	0xf8c94022
     384:	202c      	movs	r0, #44	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     386:	6002      	str	r2, [r0, #0]
			}
			if (interruptMasksUsed & 0x04) {
     388:	d5090758 	.word	0xd5090758
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     38c:	488a      	ldr	r0, [pc, #552]	; (5b8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x278>)
     38e:	f8d9      	.short	0xf8d9
     390:	201c      	movs	r0, #28
     392:	6804      	.short	0x6804
     394:	f899 3013 	ldrb.w	r3, [r9, #19]
     398:	f8c94022 	.word	0xf8c94022
     39c:	2030      	movs	r0, #48	; 0x30
				NVIC_ICER2 = interruptSave[2];
     39e:	6002      	str	r2, [r0, #0]
			}
			if (interruptMasksUsed & 0x08) {
     3a0:	071a      	lsls	r2, r3, #28
     3a2:	d509      	bpl.n	3b8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x78>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     3a4:	4885      	ldr	r0, [pc, #532]	; (5bc <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27c>)
     3a6:	f8d9 2020 	ldr.w	r2, [r9, #32]
     3aa:	6804      	ldr	r4, [r0, #0]
     3ac:	f899 3013 	ldrb.w	r3, [r9, #19]
     3b0:	4022      	ands	r2, r4
     3b2:	f8c9 2034 	str.w	r2, [r9, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     3b6:	6002      	str	r2, [r0, #0]
			}
			if (interruptMasksUsed & 0x10) {
     3b8:	06db      	lsls	r3, r3, #27
     3ba:	f100 80cd 	bmi.w	558 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x218>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
     3be:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     3c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
     3c4:	4a7e      	ldr	r2, [pc, #504]	; (5c0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x280>)
     3c6:	2b00      	cmp	r3, #0
     3c8:	f000 81ab 	beq.w	722 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3e2>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     3cc:	4b7d      	ldr	r3, [pc, #500]	; (5c4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x284>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     3ce:	2400      	movs	r4, #0

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     3d0:	487d      	ldr	r0, [pc, #500]	; (5c8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x288>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     3d2:	699b      	ldr	r3, [r3, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     3d4:	6094      	str	r4, [r2, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     3d6:	f3c3 6282 	ubfx	r2, r3, #26, #3
     3da:	f3c3 1401 	ubfx	r4, r3, #4, #2
     3de:	3201      	adds	r2, #1
     3e0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
     3e4:	fbb3 f3f2 	udiv	r3, r3, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
     3e8:	2b00      	cmp	r3, #0
     3ea:	f040 80ab 	bne.w	544 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>
     3ee:	461a      	mov	r2, r3
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     3f0:	f8c9 200c 	str.w	r2, [r9, #12]
     3f4:	f8d9 3000 	ldr.w	r3, [r9]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     3f8:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     3fa:	2003      	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
     3fc:	2507      	movs	r5, #7
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     3fe:	611c      	str	r4, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
     400:	2401      	movs	r4, #1
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     402:	6258      	str	r0, [r3, #36]	; 0x24

	// latch the CS select
	void inline select() __attribute__((always_inline)) {
    // begin the SPI transaction
    _SPIObject.beginTransaction(SPISettings(_SPI_CLOCK_RATE, MSBFIRST, SPI_MODE0));
    if(m_pSelect != NULL) { m_pSelect->select(); }
     404:	f8d8 0018 	ldr.w	r0, [r8, #24]
		port().CCR = _ccr;
     408:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     40a:	661d      	str	r5, [r3, #96]	; 0x60
     40c:	4d6c      	ldr	r5, [pc, #432]	; (5c0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x280>)
		port().CR = LPSPI_CR_MEN;
     40e:	611c      	str	r4, [r3, #16]
     410:	b150      	cbz	r0, 428 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe8>
     412:	6802      	ldr	r2, [r0, #0]
     414:	4c6d      	ldr	r4, [pc, #436]	; (5cc <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x28c>)
     416:	6812      	ldr	r2, [r2, #0]
     418:	42a2      	cmp	r2, r4
     41a:	f040 8184 	bne.w	726 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3e6>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     41e:	6844      	ldr	r4, [r0, #4]
     420:	68c0      	ldr	r0, [r0, #12]
     422:	6822      	ldr	r2, [r4, #0]
     424:	4302      	orrs	r2, r0
     426:	6022      	str	r2, [r4, #0]
	// wait until all queued up data has been written
	static void waitFully() { /* TODO */ }

	// write a byte out via SPI (returns immediately on writing register) -
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
     428:	f8d8 201c 	ldr.w	r2, [r8, #28]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     42c:	7d08      	ldrb	r0, [r1, #20]
     42e:	7ccc      	ldrb	r4, [r1, #19]
     430:	7c8d      	ldrb	r5, [r1, #18]
     432:	2a00      	cmp	r2, #0
     434:	f040 8154 	bne.w	6e0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3a0>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     438:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     43a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     43c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     440:	d0fb      	beq.n	43a <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xfa>
     442:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     444:	2200      	movs	r2, #0
     446:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     44a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     44e:	d0fb      	beq.n	448 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x108>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     450:	2200      	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     452:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     454:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     458:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     45c:	d0fb      	beq.n	456 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x116>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     45e:	2200      	movs	r2, #0
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     460:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     462:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     464:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     466:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     46a:	d0fb      	beq.n	464 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x124>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     46c:	f8d1 c008 	ldr.w	ip, [r1, #8]
     470:	6f5a      	ldr	r2, [r3, #116]	; 0x74
     472:	f1bc 0f00 	cmp.w	ip, #0
     476:	f340 815d 	ble.w	734 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3f4>
     47a:	1c6a      	adds	r2, r5, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     47c:	f8d1 b018 	ldr.w	fp, [r1, #24]
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     480:	4d53      	ldr	r5, [pc, #332]	; (5d0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x290>)
     482:	2700      	movs	r7, #0
     484:	9202      	str	r2, [sp, #8]
     486:	1c62      	adds	r2, r4, #1
     488:	680e      	ldr	r6, [r1, #0]
     48a:	9203      	str	r2, [sp, #12]
     48c:	1c42      	adds	r2, r0, #1
     48e:	9204      	str	r2, [sp, #16]
     490:	f10b 0202 	add.w	r2, fp, #2
     494:	9201      	str	r2, [sp, #4]
     496:	f10b 0201 	add.w	r2, fp, #1
     49a:	9200      	str	r2, [sp, #0]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
     49c:	9a01      	ldr	r2, [sp, #4]
     49e:	f816 e00b 	ldrb.w	lr, [r6, fp]
     4a2:	5cb4      	ldrb	r4, [r6, r2]
     4a4:	9a00      	ldr	r2, [sp, #0]
     4a6:	5cb0      	ldrb	r0, [r6, r2]
     4a8:	9a04      	ldr	r2, [sp, #16]
     4aa:	fb02 f404 	mul.w	r4, r2, r4
     4ae:	9a03      	ldr	r2, [sp, #12]
     4b0:	fb02 f000 	mul.w	r0, r2, r0
     4b4:	9a02      	ldr	r2, [sp, #8]
     4b6:	1224      	asrs	r4, r4, #8
     4b8:	fb02 f20e 	mul.w	r2, r2, lr
     4bc:	1200      	asrs	r0, r0, #8
     4be:	f064 04ff 	orn	r4, r4, #255	; 0xff
     4c2:	1212      	asrs	r2, r2, #8
	// wait until all queued up data has been written
	static void waitFully() { /* TODO */ }

	// write a byte out via SPI (returns immediately on writing register) -
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
     4c4:	2f00      	cmp	r7, #0
     4c6:	d150      	bne.n	56a <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x22a>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     4c8:	27ff      	movs	r7, #255	; 0xff
     4ca:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     4cc:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     4ce:	f417 1ff8 	tst.w	r7, #2031616	; 0x1f0000
     4d2:	d0fb      	beq.n	4cc <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x18c>
     4d4:	6f5f      	ldr	r7, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     4d6:	b2e4      	uxtb	r4, r4
     4d8:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     4da:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     4dc:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
     4e0:	d0fb      	beq.n	4da <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x19a>
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
     4e2:	0200      	lsls	r0, r0, #8
     4e4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
     4e6:	b280      	uxth	r0, r0
		w |= b2;
     4e8:	4310      	orrs	r0, r2
     4ea:	b282      	uxth	r2, r0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     4ec:	0a10      	lsrs	r0, r2, #8
     4ee:	6658      	str	r0, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     4f0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     4f2:	f410 1ff8 	tst.w	r0, #2031616	; 0x1f0000
     4f6:	d0fb      	beq.n	4f0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1b0>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     4f8:	b2d2      	uxtb	r2, r2
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     4fa:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     4fc:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     4fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     500:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     504:	d0fb      	beq.n	4fe <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1be>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     506:	7b0a      	ldrb	r2, [r1, #12]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     508:	f10c 3cff 	add.w	ip, ip, #4294967295
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     50c:	7c0f      	ldrb	r7, [r1, #16]
     50e:	7b48      	ldrb	r0, [r1, #13]
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     510:	f1bc 0f00 	cmp.w	ip, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     514:	7bcc      	ldrb	r4, [r1, #15]
                d[1] = e[1] - d[1];
     516:	eba7 0000 	sub.w	r0, r7, r0
                d[2] = e[2] - d[2];
     51a:	7b8f      	ldrb	r7, [r1, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     51c:	eba4 0402 	sub.w	r4, r4, r2
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     520:	7c4a      	ldrb	r2, [r1, #17]
     522:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
     526:	eba2 0207 	sub.w	r2, r2, r7

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     52a:	f991 7015 	ldrsb.w	r7, [r1, #21]
     52e:	f8c1 c008 	str.w	ip, [r1, #8]
     532:	443e      	add	r6, r7

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     534:	730c      	strb	r4, [r1, #12]
                d[1] = e[1] - d[1];
     536:	7348      	strb	r0, [r1, #13]
                d[2] = e[2] - d[2];
     538:	738a      	strb	r2, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     53a:	600e      	str	r6, [r1, #0]
     53c:	dd50      	ble.n	5e0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a0>
     53e:	f8d8 701c 	ldr.w	r7, [r8, #28]
     542:	e7ab      	b.n	49c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x15c>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
     544:	fbb3 f2f3 	udiv	r2, r3, r3
     548:	b102      	cbz	r2, 54c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x20c>
     54a:	3301      	adds	r3, #1
			if (d > 257) d= 257;  // max div
     54c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
     550:	f0c0 80f2 	bcc.w	738 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3f8>
     554:	4a1f      	ldr	r2, [pc, #124]	; (5d4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x294>)
     556:	e74b      	b.n	3f0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb0>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     558:	4a1f      	ldr	r2, [pc, #124]	; (5d8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x298>)
     55a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
     55e:	6810      	ldr	r0, [r2, #0]
     560:	4003      	ands	r3, r0
     562:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     566:	6013      	str	r3, [r2, #0]
     568:	e729      	b.n	3be <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x7e>
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     56a:	f107 0e07 	add.w	lr, r7, #7
     56e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 5dc <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x29c>
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     572:	6e2f      	ldr	r7, [r5, #96]	; 0x60
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     574:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
     578:	ea07 0a0a 	and.w	sl, r7, sl
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     57c:	f8d8 7020 	ldr.w	r7, [r8, #32]
     580:	023f      	lsls	r7, r7, #8
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     582:	ea4e 0e0a 	orr.w	lr, lr, sl
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     586:	f047 07ff 	orr.w	r7, r7, #255	; 0xff
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     58a:	f8c5 e060 	str.w	lr, [r5, #96]	; 0x60
      port().TDR = outData;		// output 9 bit data.
     58e:	666f      	str	r7, [r5, #100]	; 0x64
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     590:	6f2f      	ldr	r7, [r5, #112]	; 0x70
     592:	f017 0702 	ands.w	r7, r7, #2
     596:	d1fb      	bne.n	590 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x250>
     598:	9705      	str	r7, [sp, #20]
			port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8) - 1);  // turn back on 8 bit mode
     59a:	f04a 0a07 	orr.w	sl, sl, #7
     59e:	4f0c      	ldr	r7, [pc, #48]	; (5d0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x290>)
     5a0:	f8c7 a060 	str.w	sl, [r7, #96]	; 0x60
      port().RDR;
     5a4:	f8d7 e074 	ldr.w	lr, [r7, #116]	; 0x74
      m_bitCount = 0;
     5a8:	9f05      	ldr	r7, [sp, #20]
     5aa:	f8c8 701c 	str.w	r7, [r8, #28]
     5ae:	e792      	b.n	4d6 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
     5b0:	e000e180 	.word	0xe000e180
     5b4:	e000e184 	.word	0xe000e184
     5b8:	e000e188 	.word	0xe000e188
     5bc:	e000e18c 	.word	0xe000e18c
     5c0:	20004d14 	.word	0x20004d14
     5c4:	400fc000 	.word	0x400fc000
     5c8:	20000030 	.word	0x20000030
     5cc:	00000085 	.word	0x00000085
     5d0:	403a0000 	.word	0x403a0000
     5d4:	007f7fff 	.word	0x007f7fff
     5d8:	e000e190 	.word	0xe000e190
     5dc:	fffff000 	.word	0xfffff000
     5e0:	f8d8 201c 	ldr.w	r2, [r8, #28]
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     5e4:	6848      	ldr	r0, [r1, #4]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     5e6:	26ff      	movs	r6, #255	; 0xff
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     5e8:	495a      	ldr	r1, [pc, #360]	; (754 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x414>)
     5ea:	2400      	movs	r4, #0
     5ec:	2800      	cmp	r0, #0
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
      port().TDR = outData;		// output 9 bit data.
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     5ee:	460d      	mov	r5, r1
     5f0:	bfb8      	it	lt
     5f2:	301f      	addlt	r0, #31
     5f4:	1140      	asrs	r0, r0, #5
	// wait until all queued up data has been written
	static void waitFully() { /* TODO */ }

	// write a byte out via SPI (returns immediately on writing register) -
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
     5f6:	b9f2      	cbnz	r2, 636 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f6>
     5f8:	665e      	str	r6, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     5fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     5fc:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     600:	d0fb      	beq.n	5fa <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ba>
     602:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     604:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     606:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     608:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     60c:	d0fb      	beq.n	606 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2c6>
     60e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     610:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     612:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     614:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     618:	d0fb      	beq.n	612 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2d2>
     61a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     61c:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     61e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     620:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
     624:	d0fb      	beq.n	61e <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2de>
     626:	3801      	subs	r0, #1
     628:	6f5a      	ldr	r2, [r3, #116]	; 0x74
     62a:	1c47      	adds	r7, r0, #1
     62c:	d01f      	beq.n	66e <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x32e>
     62e:	f8d8 201c 	ldr.w	r2, [r8, #28]
     632:	2a00      	cmp	r2, #0
     634:	d0e0      	beq.n	5f8 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2b8>
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     636:	6e0f      	ldr	r7, [r1, #96]	; 0x60
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     638:	3207      	adds	r2, #7
     63a:	f8df e138 	ldr.w	lr, [pc, #312]	; 774 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x434>
     63e:	f3c2 020b 	ubfx	r2, r2, #0, #12
     642:	ea07 0e0e 	and.w	lr, r7, lr
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     646:	f8d8 7020 	ldr.w	r7, [r8, #32]
     64a:	023f      	lsls	r7, r7, #8
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     64c:	ea42 020e 	orr.w	r2, r2, lr
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     650:	f047 07ff 	orr.w	r7, r7, #255	; 0xff
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     654:	660a      	str	r2, [r1, #96]	; 0x60
      port().TDR = outData;		// output 9 bit data.
     656:	664f      	str	r7, [r1, #100]	; 0x64
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     658:	6f0a      	ldr	r2, [r1, #112]	; 0x70
     65a:	f012 0202 	ands.w	r2, r2, #2
     65e:	d1fb      	bne.n	658 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x318>
			port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8) - 1);  // turn back on 8 bit mode
     660:	f04e 0707 	orr.w	r7, lr, #7
     664:	662f      	str	r7, [r5, #96]	; 0x60
      port().RDR;
     666:	6f6f      	ldr	r7, [r5, #116]	; 0x74
      m_bitCount = 0;
     668:	f8c8 201c 	str.w	r2, [r8, #28]
     66c:	e7ca      	b.n	604 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2c4>
    if(m_pSelect != NULL) { m_pSelect->select(); }
  }

	// release the CS select
	void inline release() __attribute__((always_inline)) {
    if(m_pSelect != NULL) { m_pSelect->release(); }
     66e:	f8d8 0018 	ldr.w	r0, [r8, #24]
     672:	b150      	cbz	r0, 68a <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x34a>
     674:	6803      	ldr	r3, [r0, #0]
     676:	4a38      	ldr	r2, [pc, #224]	; (758 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x418>)
     678:	685b      	ldr	r3, [r3, #4]
     67a:	4293      	cmp	r3, r2
     67c:	d158      	bne.n	730 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3f0>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     67e:	6842      	ldr	r2, [r0, #4]
     680:	68c1      	ldr	r1, [r0, #12]
     682:	6813      	ldr	r3, [r2, #0]
     684:	ea23 0301 	bic.w	r3, r3, r1
     688:	6013      	str	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     68a:	f899 3013 	ldrb.w	r3, [r9, #19]
     68e:	4933      	ldr	r1, [pc, #204]	; (75c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x41c>)
     690:	461a      	mov	r2, r3
     692:	b313      	cbz	r3, 6da <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x39a>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     694:	07dd      	lsls	r5, r3, #31
     696:	d502      	bpl.n	69e <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x35e>
     698:	6a88      	ldr	r0, [r1, #40]	; 0x28
     69a:	4931      	ldr	r1, [pc, #196]	; (760 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x420>)
     69c:	6008      	str	r0, [r1, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     69e:	079c      	lsls	r4, r3, #30
     6a0:	d505      	bpl.n	6ae <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x36e>
     6a2:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
     6a6:	4b2f      	ldr	r3, [pc, #188]	; (764 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x424>)
     6a8:	f899 2013 	ldrb.w	r2, [r9, #19]
     6ac:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     6ae:	0750      	lsls	r0, r2, #29
     6b0:	d505      	bpl.n	6be <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x37e>
     6b2:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
     6b6:	4b2c      	ldr	r3, [pc, #176]	; (768 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x428>)
     6b8:	f899 2013 	ldrb.w	r2, [r9, #19]
     6bc:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     6be:	0711      	lsls	r1, r2, #28
     6c0:	d505      	bpl.n	6ce <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x38e>
     6c2:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
     6c6:	4b29      	ldr	r3, [pc, #164]	; (76c <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x42c>)
     6c8:	f899 2013 	ldrb.w	r2, [r9, #19]
     6cc:	6019      	str	r1, [r3, #0]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     6ce:	06d3      	lsls	r3, r2, #27
     6d0:	d503      	bpl.n	6da <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x39a>
     6d2:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
     6d6:	4b26      	ldr	r3, [pc, #152]	; (770 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x430>)
     6d8:	601a      	str	r2, [r3, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
     6da:	b007      	add	sp, #28
     6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     6e0:	f8df c070 	ldr.w	ip, [pc, #112]	; 754 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x414>
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     6e4:	1dd6      	adds	r6, r2, #7
     6e6:	f8df e08c 	ldr.w	lr, [pc, #140]	; 774 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x434>
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
      uint32_t tcr = port().TCR;
     6ea:	f8dc 7060 	ldr.w	r7, [ip, #96]	; 0x60
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     6ee:	f3c6 060b 	ubfx	r6, r6, #0, #12
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     6f2:	f8d8 2020 	ldr.w	r2, [r8, #32]
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     6f6:	ea07 0e0e 	and.w	lr, r7, lr
      port().TDR = outData;		// output 9 bit data.
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     6fa:	4667      	mov	r7, ip
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {
    if(m_bitCount == 0) {
      _SPIObject.transfer(b);
    } else {
      // There's been a bit of data written, add that to the output as well
      uint32_t outData = (m_bitData << 8) | b;
     6fc:	0212      	lsls	r2, r2, #8
      uint32_t tcr = port().TCR;
      port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8+m_bitCount) - 1);  // turn on 9 bit mode
     6fe:	ea46 060e 	orr.w	r6, r6, lr
     702:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
      port().TDR = outData;		// output 9 bit data.
     706:	f8cc 2064 	str.w	r2, [ip, #100]	; 0x64
      while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
     70a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
     70c:	4e11      	ldr	r6, [pc, #68]	; (754 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x414>)
     70e:	f012 0202 	ands.w	r2, r2, #2
     712:	d1fa      	bne.n	70a <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3ca>
			port().TCR = (tcr & 0xfffff000) | LPSPI_TCR_FRAMESZ((8) - 1);  // turn back on 8 bit mode
     714:	f04e 0707 	orr.w	r7, lr, #7
     718:	6637      	str	r7, [r6, #96]	; 0x60
      port().RDR;
     71a:	6f76      	ldr	r6, [r6, #116]	; 0x74
      m_bitCount = 0;
     71c:	f8c8 201c 	str.w	r2, [r8, #28]
     720:	e690      	b.n	444 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x104>
     722:	68d2      	ldr	r2, [r2, #12]
     724:	e666      	b.n	3f4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb4>
     726:	9100      	str	r1, [sp, #0]

	// latch the CS select
	void inline select() __attribute__((always_inline)) {
    // begin the SPI transaction
    _SPIObject.beginTransaction(SPISettings(_SPI_CLOCK_RATE, MSBFIRST, SPI_MODE0));
    if(m_pSelect != NULL) { m_pSelect->select(); }
     728:	4790      	blx	r2
     72a:	682b      	ldr	r3, [r5, #0]
     72c:	9900      	ldr	r1, [sp, #0]
     72e:	e67b      	b.n	428 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe8>
  }

	// release the CS select
	void inline release() __attribute__((always_inline)) {
    if(m_pSelect != NULL) { m_pSelect->release(); }
     730:	4798      	blx	r3
     732:	e7aa      	b.n	68a <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x34a>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     734:	2200      	movs	r2, #0
     736:	e755      	b.n	5e4 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a4>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     738:	2b02      	cmp	r3, #2
     73a:	d801      	bhi.n	740 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x400>
     73c:	2200      	movs	r2, #0
     73e:	e657      	b.n	3f0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb0>
     740:	3b02      	subs	r3, #2
     742:	0858      	lsrs	r0, r3, #1
     744:	0402      	lsls	r2, r0, #16
     746:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
     74a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
     74e:	431a      	orrs	r2, r3
     750:	e64e      	b.n	3f0 <APA102Controller<(unsigned char)11, (unsigned char)13, (EOrder)136, 0ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb0>
     752:	bf00      	nop
     754:	403a0000 	.word	0x403a0000
     758:	00000091 	.word	0x00000091
     75c:	20004d14 	.word	0x20004d14
     760:	e000e100 	.word	0xe000e100
     764:	e000e104 	.word	0xe000e104
     768:	e000e108 	.word	0xe000e108
     76c:	e000e10c 	.word	0xe000e10c
     770:	e000e110 	.word	0xe000e110
     774:	fffff000 	.word	0xfffff000

00000778 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
     778:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     77a:	2300      	movs	r3, #0
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
     77c:	4604      	mov	r4, r0
		num_inputs(ninput), inputQueue(iqueue) {
     77e:	4812      	ldr	r0, [pc, #72]	; (7c8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x50>)
     780:	7261      	strb	r1, [r4, #9]
     782:	6122      	str	r2, [r4, #16]
     784:	6020      	str	r0, [r4, #0]
			active = false;
     786:	7223      	strb	r3, [r4, #8]
			destination_list = NULL;
     788:	60e3      	str	r3, [r4, #12]
			for (int i=0; i < num_inputs; i++) {
     78a:	b141      	cbz	r1, 79e <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x26>
				inputQueue[i] = NULL;
     78c:	4619      	mov	r1, r3
     78e:	e000      	b.n	792 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x1a>
     790:	6922      	ldr	r2, [r4, #16]
     792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     796:	3301      	adds	r3, #1
     798:	7a62      	ldrb	r2, [r4, #9]
     79a:	429a      	cmp	r2, r3
     79c:	dcf8      	bgt.n	790 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     79e:	4b0b      	ldr	r3, [pc, #44]	; (7cc <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x54>)
     7a0:	681a      	ldr	r2, [r3, #0]
     7a2:	b90a      	cbnz	r2, 7a8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x30>
     7a4:	e00d      	b.n	7c2 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4a>
     7a6:	461a      	mov	r2, r3
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     7a8:	6953      	ldr	r3, [r2, #20]
     7aa:	2b00      	cmp	r3, #0
     7ac:	d1fb      	bne.n	7a6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
				p->next_update = this;
     7ae:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
     7b0:	2300      	movs	r3, #0
			cpu_cycles = 0;
			cpu_cycles_max = 0;
			numConnections = 0;
		}
     7b2:	4620      	mov	r0, r4
				p->next_update = this;
			}
			next_update = NULL;
			cpu_cycles = 0;
			cpu_cycles_max = 0;
			numConnections = 0;
     7b4:	72a3      	strb	r3, [r4, #10]
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     7b6:	6163      	str	r3, [r4, #20]
			cpu_cycles = 0;
     7b8:	80a3      	strh	r3, [r4, #4]
			cpu_cycles_max = 0;
     7ba:	80e3      	strh	r3, [r4, #6]
			numConnections = 0;
		}
     7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
     7c0:	4770      	bx	lr
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     7c2:	601c      	str	r4, [r3, #0]
     7c4:	e7f4      	b.n	7b0 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x38>
     7c6:	bf00      	nop
     7c8:	20000008 	.word	0x20000008
     7cc:	200074c4 	.word	0x200074c4

000007d0 <cVal(int, int)>:
	float read(unsigned int binNumber) {
		if (binNumber > 511) return 0.0;
		return (float)(output[binNumber]) * (1.0 / 16384.0);
	}
	float read(unsigned int binFirst, unsigned int binLast) {
		if (binFirst > binLast) {
     7d0:	4288      	cmp	r0, r1
     7d2:	d832      	bhi.n	83a <cVal(int, int)+0x6a>
     7d4:	4603      	mov	r3, r0
			unsigned int tmp = binLast;
			binLast = binFirst;
			binFirst = tmp;
		}
		if (binFirst > 511) return 0.0;
     7d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     7da:	d22b      	bcs.n	834 <cVal(int, int)+0x64>
     7dc:	481c      	ldr	r0, [pc, #112]	; (850 <cVal(int, int)+0x80>)
		if (binLast > 511) binLast = 511;
		uint32_t sum = 0;
     7de:	2200      	movs	r2, #0
//AudioConnection          patchCord4(i2s1, 0, i2s2, 0);
//AudioConnection          patchCord5(i2s1, 1, i2s2, 1);
AudioControlSGTL5000     sgtl5000;       //xy=335,609
// GUItool: end automatically generated code


     7e0:	b510      	push	{r4, lr}
     7e2:	f240 14ff 	movw	r4, #511	; 0x1ff
     7e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
     7ea:	42a1      	cmp	r1, r4
     7ec:	f100 0016 	add.w	r0, r0, #22
     7f0:	bf28      	it	cs
     7f2:	4621      	movcs	r1, r4
		do {
			sum += output[binFirst++];
     7f4:	3301      	adds	r3, #1
     7f6:	f830 4f02 	ldrh.w	r4, [r0, #2]!
		} while (binFirst <= binLast);
     7fa:	428b      	cmp	r3, r1
		}
		if (binFirst > 511) return 0.0;
		if (binLast > 511) binLast = 511;
		uint32_t sum = 0;
		do {
			sum += output[binFirst++];
     7fc:	4422      	add	r2, r4
		} while (binFirst <= binLast);
     7fe:	d9f9      	bls.n	7f4 <cVal(int, int)+0x24>
float cVal(int start, int end) {
    double val = 0;                         // starting value
    double res = 0;

     800:	ee00 2a10 	vmov	s0, r2
     804:	eebb 0ac9 	vcvt.f32.u32	s0, s0, #14
    val = fft.read(start, end);          // add 1 so that we get to the correct part of the log2 curve
     808:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 848 <cVal(int, int)+0x78>


float cVal(int start, int end) {
    double val = 0;                         // starting value
    double res = 0;

     80c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    val = fft.read(start, end);          // add 1 so that we get to the correct part of the log2 curve
     810:	eeb4 0bc7 	vcmpe.f64	d0, d7
     814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     818:	dd12      	ble.n	840 <cVal(int, int)+0x70>
    if (val > NoiseFloor) {
     81a:	f005 fab1 	bl	5d80 <log10>
        res = ((log10(val) + 2) / 2);   // 0(Noisefloor) is at a value of approx 0.3
     81e:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
     822:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     826:	ee30 0b07 	vadd.f64	d0, d0, d7
     82a:	ee20 7b06 	vmul.f64	d7, d0, d6
     82e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
     832:	bd10      	pop	{r4, pc}
        return(res);
    }
    else {
     834:	ed9f 0a07 	vldr	s0, [pc, #28]	; 854 <cVal(int, int)+0x84>
        return((float)0.0);
    }
     838:	4770      	bx	lr
	float read(unsigned int binNumber) {
		if (binNumber > 511) return 0.0;
		return (float)(output[binNumber]) * (1.0 / 16384.0);
	}
	float read(unsigned int binFirst, unsigned int binLast) {
		if (binFirst > binLast) {
     83a:	460b      	mov	r3, r1
     83c:	4601      	mov	r1, r0
     83e:	e7ca      	b.n	7d6 <cVal(int, int)+0x6>
    val = fft.read(start, end);          // add 1 so that we get to the correct part of the log2 curve
    if (val > NoiseFloor) {
        res = ((log10(val) + 2) / 2);   // 0(Noisefloor) is at a value of approx 0.3
        return(res);
    }
    else {
     840:	ed9f 0a04 	vldr	s0, [pc, #16]	; 854 <cVal(int, int)+0x84>
     844:	bd10      	pop	{r4, pc}
     846:	bf00      	nop
     848:	47ae147b 	.word	0x47ae147b
     84c:	3f747ae1 	.word	0x3f747ae1
     850:	200056b8 	.word	0x200056b8
     854:	00000000 	.word	0x00000000

00000858 <XY(unsigned char, unsigned char)>:
// That's up to you.  Don't pass it bogus values.
//
uint16_t XY(uint8_t x, uint8_t y)
{
    uint16_t i;

     858:	07cb      	lsls	r3, r1, #31
    if (y & 0x01) {
        // Odd rows run backwards
        uint8_t reverseX = (MatrixWidth - 1) - x;
     85a:	bf44      	itt	mi
     85c:	f1c0 000f 	rsbmi	r0, r0, #15
     860:	b2c0      	uxtbmi	r0, r0
        i = (y * MatrixWidth) + reverseX;
    }
    else {
        // Even rows run forwards
     862:	eb00 1001 	add.w	r0, r0, r1, lsl #4
        i = (y * MatrixWidth) + x;
    }

    return i;
     866:	4770      	bx	lr

00000868 <cLed(int, int, int)>:
{
    if (x >= MatrixWidth) return -1;
    if (y >= MatrixHeight) return -1;
    return XY(x, y);
}

     868:	460b      	mov	r3, r1
void cLed(int band, int start, int end) {
    int displayVal = 0;
     86a:	4611      	mov	r1, r2
{
    if (x >= MatrixWidth) return -1;
    if (y >= MatrixHeight) return -1;
    return XY(x, y);
}

     86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     870:	4681      	mov	r9, r0
     872:	b082      	sub	sp, #8
void cLed(int band, int start, int end) {
    int displayVal = 0;
     874:	4618      	mov	r0, r3
     876:	f7ff ffab 	bl	7d0 <cVal(int, int)>
    float val = cVal(start, end);
     87a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     87e:	eeb4 0ae7 	vcmpe.f32	s0, s15
     882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     886:	dd36      	ble.n	8f6 <cLed(int, int, int)+0x8e>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     888:	2610      	movs	r6, #16
     88a:	fa5f f989 	uxtb.w	r9, r9
{
    uint16_t i;

    if (y & 0x01) {
        // Odd rows run backwards
        uint8_t reverseX = (MatrixWidth - 1) - x;
     88e:	2464      	movs	r4, #100	; 0x64
     890:	2500      	movs	r5, #0
     892:	4f25      	ldr	r7, [pc, #148]	; (928 <cLed(int, int, int)+0xc0>)
     894:	f1b9 0f0f 	cmp.w	r9, #15
     898:	ea4f 1a09 	mov.w	sl, r9, lsl #4
// That's up to you.  Don't pass it bogus values.
//
uint16_t XY(uint8_t x, uint8_t y)
{
    uint16_t i;

     89c:	f009 0901 	and.w	r9, r9, #1
     8a0:	bf94      	ite	ls
     8a2:	f04f 0800 	movls.w	r8, #0
     8a6:	f04f 0801 	movhi.w	r8, #1
    int displayVal = 0;
    float val = cVal(start, end);
    if (val > 1) val = 1;
    val = val * 100;                  // bring into usable are
    displayVal = map((long)val, 39, 100, 0, MatrixHeight);  // Number of LEDs  
    for (int i = 0; i < displayVal; i++) {
     8aa:	b2eb      	uxtb	r3, r5
    return i;
}

uint16_t xySave(uint8_t x, uint8_t y)
{
    if (x >= MatrixWidth) return -1;
     8ac:	491f      	ldr	r1, [pc, #124]	; (92c <cLed(int, int, int)+0xc4>)
     8ae:	2b0f      	cmp	r3, #15
     8b0:	d80d      	bhi.n	8ce <cLed(int, int, int)+0x66>
     8b2:	f1b8 0f00 	cmp.w	r8, #0
     8b6:	d10a      	bne.n	8ce <cLed(int, int, int)+0x66>
     8b8:	f1c3 020f 	rsb	r2, r3, #15
     8bc:	eb0a 0103 	add.w	r1, sl, r3
// That's up to you.  Don't pass it bogus values.
//
uint16_t XY(uint8_t x, uint8_t y)
{
    uint16_t i;

     8c0:	f1b9 0f00 	cmp.w	r9, #0
     8c4:	d02c      	beq.n	920 <cLed(int, int, int)+0xb8>
     8c6:	fa5a f182 	uxtab	r1, sl, r2
     8ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     8ce:	22ff      	movs	r2, #255	; 0xff
     8d0:	23c8      	movs	r3, #200	; 0xc8
void cLed(int band, int start, int end) {
    int displayVal = 0;
    float val = cVal(start, end);
    if (val > 1) val = 1;
    val = val * 100;                  // bring into usable are
    displayVal = map((long)val, 39, 100, 0, MatrixHeight);  // Number of LEDs  
     8d2:	3501      	adds	r5, #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     8d4:	4439      	add	r1, r7
     8d6:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     8d8:	f88d 4004 	strb.w	r4, [sp, #4]
     8dc:	f88d 2005 	strb.w	r2, [sp, #5]
     8e0:	3c0a      	subs	r4, #10
     8e2:	f88d 3006 	strb.w	r3, [sp, #6]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     8e6:	f002 fd09 	bl	32fc <hsv2rgb_rainbow(CHSV const&, CRGB&)>
     8ea:	42b5      	cmp	r5, r6
     8ec:	b2e4      	uxtb	r4, r4
     8ee:	dbdc      	blt.n	8aa <cLed(int, int, int)+0x42>
    for (int i = 0; i < displayVal; i++) {
        int index = xySave(i, band);
        leds[index] = CHSV(100 - i * 10, 255, 200);
    }
     8f0:	b002      	add	sp, #8
     8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8f6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 930 <cLed(int, int, int)+0xc8>
     8fa:	4e0e      	ldr	r6, [pc, #56]	; (934 <cLed(int, int, int)+0xcc>)
     8fc:	ee20 0a27 	vmul.f32	s0, s0, s15
     900:	eebd 0ac0 	vcvt.s32.f32	s0, s0
     904:	ee10 3a10 	vmov	r3, s0
     908:	3b27      	subs	r3, #39	; 0x27
     90a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
     90e:	fb86 2603 	smull	r2, r6, r6, r3
     912:	17da      	asrs	r2, r3, #31
     914:	4433      	add	r3, r6
     916:	ebc2 1663 	rsb	r6, r2, r3, asr #5
void cLed(int band, int start, int end) {
    int displayVal = 0;
    float val = cVal(start, end);
    if (val > 1) val = 1;
    val = val * 100;                  // bring into usable are
    displayVal = map((long)val, 39, 100, 0, MatrixHeight);  // Number of LEDs  
     91a:	2e00      	cmp	r6, #0
     91c:	dcb5      	bgt.n	88a <cLed(int, int, int)+0x22>
     91e:	e7e7      	b.n	8f0 <cLed(int, int, int)+0x88>
     920:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     924:	e7d3      	b.n	8ce <cLed(int, int, int)+0x66>
     926:	bf00      	nop
     928:	20006b8f 	.word	0x20006b8f
     92c:	0002fffd 	.word	0x0002fffd
     930:	42c80000 	.word	0x42c80000
     934:	84210843 	.word	0x84210843

00000938 <setup>:
    leds[i] = CHSV(255 - displayVal, 200, displayVal);
}




     938:	b570      	push	{r4, r5, r6, lr}
     93a:	f640 31b8 	movw	r1, #3000	; 0xbb8
     93e:	4864      	ldr	r0, [pc, #400]	; (ad0 <setup+0x198>)
     940:	f000 fa64 	bl	e0c <VisualMicroDebug::init(unsigned long)>
     944:	f44f 5116 	mov.w	r1, #9600	; 0x2580
     948:	4861      	ldr	r0, [pc, #388]	; (ad0 <setup+0x198>)
     94a:	f000 fa5b 	bl	e04 <VisualMicroDebug::begin(unsigned long)>
     94e:	2101      	movs	r1, #1
     950:	485f      	ldr	r0, [pc, #380]	; (ad0 <setup+0x198>)
     952:	f000 fa39 	bl	dc8 <VisualMicroDebug::outPacketStart(bool)>
     956:	2800      	cmp	r0, #0
     958:	f040 80a4 	bne.w	aa4 <setup+0x16c>
     95c:	2100      	movs	r1, #0
     95e:	485c      	ldr	r0, [pc, #368]	; (ad0 <setup+0x198>)
     960:	2201      	movs	r2, #1
     962:	f000 faf1 	bl	f48 <VisualMicroDebug::start(bool, bool)>
     966:	2101      	movs	r1, #1
     968:	4859      	ldr	r0, [pc, #356]	; (ad0 <setup+0x198>)
     96a:	f000 fa2d 	bl	dc8 <VisualMicroDebug::outPacketStart(bool)>
     96e:	2800      	cmp	r0, #0
     970:	f040 80a4 	bne.w	abc <setup+0x184>
void setup() {
    Serial.begin(9600);
    //  while (!Serial);                    // wait for serial to start

    AudioMemory(10);
     974:	4c57      	ldr	r4, [pc, #348]	; (ad4 <setup+0x19c>)


void setup() {
    Serial.begin(9600);
    //  while (!Serial);                    // wait for serial to start

     976:	210a      	movs	r1, #10
     978:	4857      	ldr	r0, [pc, #348]	; (ad8 <setup+0x1a0>)
     97a:	f006 f92d 	bl	6bd8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
    AudioMemory(10);
     97e:	4620      	mov	r0, r4
     980:	f000 fcb6 	bl	12f0 <AudioControlSGTL5000::enable()>
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
     984:	2174      	movs	r1, #116	; 0x74
     986:	4620      	mov	r0, r4
     988:	f000 fd50 	bl	142c <AudioControlSGTL5000::volumeInteger(unsigned int)>
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
     98c:	4620      	mov	r0, r4
     98e:	f240 1273 	movw	r2, #371	; 0x173
     992:	212a      	movs	r1, #42	; 0x2a
     994:	f000 fc46 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     998:	2800      	cmp	r0, #0
     99a:	d174      	bne.n	a86 <setup+0x14e>
    sgtl5000.enable();
    sgtl5000.volume(0.9);
    sgtl5000.inputSelect(AUDIO_INPUT_MIC);
     99c:	2132      	movs	r1, #50	; 0x32
     99e:	484d      	ldr	r0, [pc, #308]	; (ad4 <setup+0x19c>)
     9a0:	f000 fc6e 	bl	1280 <AudioControlSGTL5000::micGain(unsigned int)>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     9a4:	494d      	ldr	r1, [pc, #308]	; (adc <setup+0x1a4>)
     9a6:	680b      	ldr	r3, [r1, #0]
     9a8:	f013 0201 	ands.w	r2, r3, #1
     9ac:	d04d      	beq.n	a4a <setup+0x112>
     9ae:	2300      	movs	r3, #0
     9b0:	f44f 7280 	mov.w	r2, #256	; 0x100
     9b4:	494a      	ldr	r1, [pc, #296]	; (ae0 <setup+0x1a8>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     9b6:	25ff      	movs	r5, #255	; 0xff
     9b8:	484a      	ldr	r0, [pc, #296]	; (ae4 <setup+0x1ac>)
     9ba:	f002 fbe1 	bl	3180 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     9be:	4c4a      	ldr	r4, [pc, #296]	; (ae8 <setup+0x1b0>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     9c0:	4603      	mov	r3, r0
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     9c2:	2280      	movs	r2, #128	; 0x80
        g = (colorcode >>  8) & 0xFF;
     9c4:	20b0      	movs	r0, #176	; 0xb0
        b = (colorcode >>  0) & 0xFF;
     9c6:	21f0      	movs	r1, #240	; 0xf0
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     9c8:	731d      	strb	r5, [r3, #12]
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     9ca:	f242 7510 	movw	r5, #10000	; 0x2710
        g = (colorcode >>  8) & 0xFF;
     9ce:	7358      	strb	r0, [r3, #13]
    sgtl5000.micGain(50);
    //sgtl5000.inputSelect(AUDIO_INPUT_LINEIN);
    //sgtl5000.lineInLevel(13);
    FastLED.addLeds<APA102, DATA_PIN, CLOCK_PIN, BGR, DATA_RATE_MHZ(UpdateFrequencyMHZ)>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
    FastLED.setBrightness(BRIGHTNESS);
     9d0:	4620      	mov	r0, r4
        b = (colorcode >>  0) & 0xFF;
     9d2:	7399      	strb	r1, [r3, #14]
     9d4:	2100      	movs	r1, #0
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     9d6:	7022      	strb	r2, [r4, #0]
     9d8:	f002 fc7a 	bl	32d0 <CFastLED::setDither(unsigned char)>
     9dc:	4b43      	ldr	r3, [pc, #268]	; (aec <setup+0x1b4>)
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     9de:	4844      	ldr	r0, [pc, #272]	; (af0 <setup+0x1b8>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     9e0:	2200      	movs	r2, #0
     9e2:	f503 7140 	add.w	r1, r3, #768	; 0x300
     9e6:	60a5      	str	r5, [r4, #8]
     9e8:	60e0      	str	r0, [r4, #12]
     9ea:	70da      	strb	r2, [r3, #3]
     9ec:	3303      	adds	r3, #3
        g = (colorcode >>  8) & 0xFF;
     9ee:	705a      	strb	r2, [r3, #1]
        b = (colorcode >>  0) & 0xFF;
     9f0:	709a      	strb	r2, [r3, #2]
    FastLED.setDither(0);
    FastLED.setMaxPowerInVoltsAndMilliamps(5, 2000);
     9f2:	4299      	cmp	r1, r3
     9f4:	d1f9      	bne.n	9ea <setup+0xb2>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     9f6:	7821      	ldrb	r1, [r4, #0]
     9f8:	483b      	ldr	r0, [pc, #236]	; (ae8 <setup+0x1b0>)
     9fa:	f002 fbef 	bl	31dc <CFastLED::show(unsigned char)>
    for (int i = 0; i < NUM_LEDS; i++)
        leds[i] = 0x000000;
    FastLED.show();
    fft.windowFunction(AudioWindowBartlett1024);
     9fe:	4a3d      	ldr	r2, [pc, #244]	; (af4 <setup+0x1bc>)
		for (int i=0; i<4; i++) multiplier[i] = 65536;
	}
	virtual void update(void);
	void gain(unsigned int channel, float gain) {
		if (channel >= 4) return;
		if (gain > 32767.0f) gain = 32767.0f;
     a00:	ed9f 7a3d 	vldr	s14, [pc, #244]	; af8 <setup+0x1c0>
     a04:	edd2 7a00 	vldr	s15, [r2]
	}
	void averageTogether(uint8_t n) {
		// not implemented yet (may never be, 86 Hz output rate is ok)
	}
	void windowFunction(const int16_t *w) {
		window = w;
     a08:	4b3c      	ldr	r3, [pc, #240]	; (afc <setup+0x1c4>)
     a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
     a0e:	4a3c      	ldr	r2, [pc, #240]	; (b00 <setup+0x1c8>)
     a10:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
     a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a18:	dc13      	bgt.n	a42 <setup+0x10a>
		else if (gain < -32767.0f) gain = -32767.0f;
     a1a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; b04 <setup+0x1cc>
     a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
     a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a26:	d503      	bpl.n	a30 <setup+0xf8>
     a28:	4b37      	ldr	r3, [pc, #220]	; (b08 <setup+0x1d0>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
     a2a:	4a38      	ldr	r2, [pc, #224]	; (b0c <setup+0x1d4>)
     a2c:	6193      	str	r3, [r2, #24]
     a2e:	bd70      	pop	{r4, r5, r6, pc}
     a30:	eeb0 7a67 	vmov.f32	s14, s15
     a34:	4a35      	ldr	r2, [pc, #212]	; (b0c <setup+0x1d4>)
     a36:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
     a3a:	ee17 3a10 	vmov	r3, s14
     a3e:	6193      	str	r3, [r2, #24]
     a40:	bd70      	pop	{r4, r5, r6, pc}
		for (int i=0; i<4; i++) multiplier[i] = 65536;
	}
	virtual void update(void);
	void gain(unsigned int channel, float gain) {
		if (channel >= 4) return;
		if (gain > 32767.0f) gain = 32767.0f;
     a42:	4b33      	ldr	r3, [pc, #204]	; (b10 <setup+0x1d8>)
		else if (gain < -32767.0f) gain = -32767.0f;
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
     a44:	4a31      	ldr	r2, [pc, #196]	; (b0c <setup+0x1d4>)
     a46:	6193      	str	r3, [r2, #24]
     a48:	bd70      	pop	{r4, r5, r6, pc}

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     a4a:	4c32      	ldr	r4, [pc, #200]	; (b14 <setup+0x1dc>)
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     a4c:	20ff      	movs	r0, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     a4e:	4b25      	ldr	r3, [pc, #148]	; (ae4 <setup+0x1ac>)
     a50:	2601      	movs	r6, #1
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     a52:	6825      	ldr	r5, [r4, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     a54:	605a      	str	r2, [r3, #4]
     a56:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     a58:	609a      	str	r2, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     a5a:	749e      	strb	r6, [r3, #18]
     a5c:	7318      	strb	r0, [r3, #12]
     a5e:	7358      	strb	r0, [r3, #13]
     a60:	7398      	strb	r0, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     a62:	73d8      	strb	r0, [r3, #15]
     a64:	7418      	strb	r0, [r3, #16]
     a66:	7458      	strb	r0, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     a68:	2d00      	cmp	r5, #0
     a6a:	d02f      	beq.n	acc <setup+0x194>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     a6c:	482a      	ldr	r0, [pc, #168]	; (b18 <setup+0x1e0>)
     a6e:	6802      	ldr	r2, [r0, #0]
     a70:	b102      	cbz	r2, a74 <setup+0x13c>
     a72:	6093      	str	r3, [r2, #8]
        return IMXRT_LPSPI1_S;
    }
  }

public:
	Teesy4HardwareSPIOutput() { m_pSelect = NULL; m_bitCount = 0;}
     a74:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
     a76:	4d29      	ldr	r5, [pc, #164]	; (b1c <setup+0x1e4>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_DATA_RATE> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     a78:	2401      	movs	r4, #1
        m_pTail = this;
     a7a:	6003      	str	r3, [r0, #0]
     a7c:	601d      	str	r5, [r3, #0]
     a7e:	619a      	str	r2, [r3, #24]
     a80:	61da      	str	r2, [r3, #28]
     a82:	600c      	str	r4, [r1, #0]
     a84:	e793      	b.n	9ae <setup+0x76>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
     a86:	2288      	movs	r2, #136	; 0x88
     a88:	2120      	movs	r1, #32
     a8a:	4620      	mov	r0, r4
     a8c:	f000 fbca 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
     a90:	2800      	cmp	r0, #0
     a92:	d083      	beq.n	99c <setup+0x64>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     a94:	88e2      	ldrh	r2, [r4, #6]
     a96:	4620      	mov	r0, r4
     a98:	2124      	movs	r1, #36	; 0x24
     a9a:	f022 0204 	bic.w	r2, r2, #4
     a9e:	f000 fbc1 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
     aa2:	e77b      	b.n	99c <setup+0x64>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     aa4:	2110      	movs	r1, #16
     aa6:	481e      	ldr	r0, [pc, #120]	; (b20 <setup+0x1e8>)
     aa8:	f004 f9ce 	bl	4e48 <usb_serial_write>
    leds[i] = CHSV(255 - displayVal, 200, displayVal);
}




     aac:	210a      	movs	r1, #10
     aae:	4808      	ldr	r0, [pc, #32]	; (ad0 <setup+0x198>)
     ab0:	f000 f97e 	bl	db0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     ab4:	4806      	ldr	r0, [pc, #24]	; (ad0 <setup+0x198>)
     ab6:	f000 f9a3 	bl	e00 <VisualMicroDebug::outPacketEnd()>
     aba:	e74f      	b.n	95c <setup+0x24>
     abc:	2106      	movs	r1, #6
     abe:	4819      	ldr	r0, [pc, #100]	; (b24 <setup+0x1ec>)
     ac0:	f004 f9c2 	bl	4e48 <usb_serial_write>
     ac4:	4802      	ldr	r0, [pc, #8]	; (ad0 <setup+0x198>)
     ac6:	f000 f99b 	bl	e00 <VisualMicroDebug::outPacketEnd()>
     aca:	e753      	b.n	974 <setup+0x3c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     acc:	6023      	str	r3, [r4, #0]
     ace:	e7cd      	b.n	a6c <setup+0x134>
     ad0:	20006ecc 	.word	0x20006ecc
     ad4:	20006b48 	.word	0x20006b48
     ad8:	20200000 	.word	0x20200000
     adc:	20005690 	.word	0x20005690
     ae0:	20006b8f 	.word	0x20006b8f
     ae4:	20005694 	.word	0x20005694
     ae8:	20007258 	.word	0x20007258
     aec:	20006b8c 	.word	0x20006b8c
     af0:	000034c9 	.word	0x000034c9
     af4:	20004d10 	.word	0x20004d10
     af8:	46fffe00 	.word	0x46fffe00
     afc:	200056b8 	.word	0x200056b8
     b00:	200000cc 	.word	0x200000cc
     b04:	c6fffe00 	.word	0xc6fffe00
     b08:	80010000 	.word	0x80010000
     b0c:	20006b54 	.word	0x20006b54
     b10:	7fff0000 	.word	0x7fff0000
     b14:	20007268 	.word	0x20007268
     b18:	20007278 	.word	0x20007278
     b1c:	20000014 	.word	0x20000014
     b20:	20000040 	.word	0x20000040
     b24:	20000054 	.word	0x20000054

00000b28 <loop>:
    fft.windowFunction(AudioWindowBartlett1024);
    mixer.gain(0, mgain1);

}


     b28:	b570      	push	{r4, r5, r6, lr}
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
	}
	bool available() {
		if (outputflag == true) {
     b2a:	4d27      	ldr	r5, [pc, #156]	; (bc8 <loop+0xa0>)
     b2c:	f241 443d 	movw	r4, #5181	; 0x143d
     b30:	5d2b      	ldrb	r3, [r5, r4]
     b32:	2b00      	cmp	r3, #0
     b34:	d041      	beq.n	bba <loop+0x92>
void loop() {
    if (fft.available()) {
     b36:	2210      	movs	r2, #16
			outputflag = false;
     b38:	2600      	movs	r6, #0
     b3a:	2303      	movs	r3, #3
     b3c:	4823      	ldr	r0, [pc, #140]	; (bcc <loop+0xa4>)
     b3e:	4611      	mov	r1, r2
     b40:	552e      	strb	r6, [r5, r4]
     b42:	f002 fafb 	bl	313c <blur2d(CRGB*, unsigned char, unsigned char, unsigned char)>
        blur2d(leds, MatrixWidth, MatrixHeight, 3);
     b46:	221e      	movs	r2, #30
     b48:	f44f 7180 	mov.w	r1, #256	; 0x100
     b4c:	481f      	ldr	r0, [pc, #124]	; (bcc <loop+0xa4>)
     b4e:	f002 f9cf 	bl	2ef0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
        fadeToBlackBy(leds, NUM_LEDS, 30);

     b52:	2201      	movs	r2, #1
     b54:	4630      	mov	r0, r6
     b56:	4611      	mov	r1, r2
     b58:	f7ff fe86 	bl	868 <cLed(int, int, int)>
        cLed(0, 1, 1);      // 43             
     b5c:	2203      	movs	r2, #3
     b5e:	2102      	movs	r1, #2
     b60:	2001      	movs	r0, #1
     b62:	f7ff fe81 	bl	868 <cLed(int, int, int)>
        cLed(1, 2, 3);      // 86
     b66:	2204      	movs	r2, #4
     b68:	2103      	movs	r1, #3
     b6a:	2002      	movs	r0, #2
     b6c:	f7ff fe7c 	bl	868 <cLed(int, int, int)>
        cLed(2, 3, 4);      // 172
     b70:	2208      	movs	r2, #8
     b72:	2105      	movs	r1, #5
     b74:	2003      	movs	r0, #3
     b76:	f7ff fe77 	bl	868 <cLed(int, int, int)>
        cLed(3, 5, 8);      // 344  
     b7a:	2210      	movs	r2, #16
     b7c:	2109      	movs	r1, #9
     b7e:	2004      	movs	r0, #4
     b80:	f7ff fe72 	bl	868 <cLed(int, int, int)>
        cLed(4, 9, 16);     // 688
     b84:	2220      	movs	r2, #32
     b86:	2111      	movs	r1, #17
     b88:	2005      	movs	r0, #5
     b8a:	f7ff fe6d 	bl	868 <cLed(int, int, int)>
        cLed(5, 17, 32);    // 1376
     b8e:	2240      	movs	r2, #64	; 0x40
     b90:	2121      	movs	r1, #33	; 0x21
     b92:	2006      	movs	r0, #6
     b94:	f7ff fe68 	bl	868 <cLed(int, int, int)>
        cLed(6, 33, 64);    // 2752
     b98:	2280      	movs	r2, #128	; 0x80
     b9a:	2141      	movs	r1, #65	; 0x41
     b9c:	2007      	movs	r0, #7
     b9e:	f7ff fe63 	bl	868 <cLed(int, int, int)>
        cLed(7, 65, 128);   // 5504
     ba2:	22ff      	movs	r2, #255	; 0xff
     ba4:	2181      	movs	r1, #129	; 0x81
     ba6:	2008      	movs	r0, #8
     ba8:	f7ff fe5e 	bl	868 <cLed(int, int, int)>
        cLed(8, 129, 255);  // 11008
     bac:	f240 12ff 	movw	r2, #511	; 0x1ff
     bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
     bb4:	2009      	movs	r0, #9
     bb6:	f7ff fe57 	bl	868 <cLed(int, int, int)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     bba:	4805      	ldr	r0, [pc, #20]	; (bd0 <loop+0xa8>)
        cLed(9, 256, 511);  // rest

    }
    FastLED.show();
     bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     bc0:	7801      	ldrb	r1, [r0, #0]
     bc2:	f002 bb0b 	b.w	31dc <CFastLED::show(unsigned char)>
     bc6:	bf00      	nop
     bc8:	200056b8 	.word	0x200056b8
     bcc:	20006b8f 	.word	0x20006b8f
     bd0:	20007258 	.word	0x20007258

00000bd4 <_GLOBAL__sub_I_leds_plus_safety_pixel>:
     bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     bd8:	4f62      	ldr	r7, [pc, #392]	; (d64 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x190>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     bda:	2300      	movs	r3, #0
     bdc:	4d62      	ldr	r5, [pc, #392]	; (d68 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x194>)
     bde:	f8df 81bc 	ldr.w	r8, [pc, #444]	; d9c <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1c8>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     be2:	683a      	ldr	r2, [r7, #0]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     be4:	726b      	strb	r3, [r5, #9]
     be6:	f8c5 8000 	str.w	r8, [r5]
     bea:	612b      	str	r3, [r5, #16]
			active = false;
     bec:	722b      	strb	r3, [r5, #8]
			destination_list = NULL;
     bee:	60eb      	str	r3, [r5, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     bf0:	b90a      	cbnz	r2, bf6 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x22>
     bf2:	e0b3      	b.n	d5c <_GLOBAL__sub_I_leds_plus_safety_pixel+0x188>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     bf4:	461a      	mov	r2, r3
     bf6:	6953      	ldr	r3, [r2, #20]
     bf8:	2b00      	cmp	r3, #0
     bfa:	d1fb      	bne.n	bf4 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x20>
				p->next_update = this;
     bfc:	6155      	str	r5, [r2, #20]
			}
			next_update = NULL;
     bfe:	f04f 0900 	mov.w	r9, #0

class AudioMixer4 : public AudioStream
{
#if defined(__ARM_ARCH_7EM__)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     c02:	4e5a      	ldr	r6, [pc, #360]	; (d6c <_GLOBAL__sub_I_leds_plus_safety_pixel+0x198>)
#include "DMAChannel.h"

class AudioInputI2S : public AudioStream
{
public:
	AudioInputI2S(void) : AudioStream(0, NULL) { begin(); }
     c04:	4b5a      	ldr	r3, [pc, #360]	; (d70 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x19c>)
     c06:	4858      	ldr	r0, [pc, #352]	; (d68 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x194>)
     c08:	f8c5 9014 	str.w	r9, [r5, #20]
			cpu_cycles = 0;
     c0c:	f8a5 9004 	strh.w	r9, [r5, #4]
			cpu_cycles_max = 0;
     c10:	f8a5 9006 	strh.w	r9, [r5, #6]
			numConnections = 0;
     c14:	f885 900a 	strb.w	r9, [r5, #10]
     c18:	602b      	str	r3, [r5, #0]
     c1a:	f000 fd11 	bl	1640 <AudioInputI2S::begin()>
     c1e:	f106 0228 	add.w	r2, r6, #40	; 0x28
     c22:	2104      	movs	r1, #4
     c24:	4630      	mov	r0, r6

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     c26:	4c53      	ldr	r4, [pc, #332]	; (d74 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1a0>)
     c28:	f7ff fda6 	bl	778 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     c2c:	2001      	movs	r0, #1
     c2e:	f504 5ca2 	add.w	ip, r4, #5184	; 0x1440
     c32:	4a51      	ldr	r2, [pc, #324]	; (d78 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1a4>)
     c34:	7260      	strb	r0, [r4, #9]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
     c36:	f44f 3080 	mov.w	r0, #65536	; 0x10000

class AudioMixer4 : public AudioStream
{
#if defined(__ARM_ARCH_7EM__)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     c3a:	6032      	str	r2, [r6, #0]
			active = false;
			destination_list = NULL;
     c3c:	464b      	mov	r3, r9
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     c3e:	4649      	mov	r1, r9

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     c40:	f8c4 8000 	str.w	r8, [r4]
			active = false;
			destination_list = NULL;
     c44:	4662      	mov	r2, ip
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     c46:	f884 9008 	strb.w	r9, [r4, #8]
			destination_list = NULL;
     c4a:	f8c4 900c 	str.w	r9, [r4, #12]
			for (int i=0; i < num_inputs; i++) {
     c4e:	46a6      	mov	lr, r4

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     c50:	f8c4 c010 	str.w	ip, [r4, #16]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
     c54:	61b0      	str	r0, [r6, #24]
     c56:	61f0      	str	r0, [r6, #28]
     c58:	6230      	str	r0, [r6, #32]
     c5a:	6270      	str	r0, [r6, #36]	; 0x24
     c5c:	e001      	b.n	c62 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x8e>
     c5e:	f8de 2010 	ldr.w	r2, [lr, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     c62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     c66:	3301      	adds	r3, #1
     c68:	7a62      	ldrb	r2, [r4, #9]
     c6a:	4842      	ldr	r0, [pc, #264]	; (d74 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1a0>)
     c6c:	429a      	cmp	r2, r3
     c6e:	dcf6      	bgt.n	c5e <_GLOBAL__sub_I_leds_plus_safety_pixel+0x8a>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     c70:	683a      	ldr	r2, [r7, #0]
     c72:	4b3c      	ldr	r3, [pc, #240]	; (d64 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x190>)
     c74:	b90a      	cbnz	r2, c7a <_GLOBAL__sub_I_leds_plus_safety_pixel+0xa6>
     c76:	e073      	b.n	d60 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x18c>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     c78:	461a      	mov	r2, r3
     c7a:	6953      	ldr	r3, [r2, #20]
     c7c:	2b00      	cmp	r3, #0
     c7e:	d1fb      	bne.n	c78 <_GLOBAL__sub_I_leds_plus_safety_pixel+0xa4>
				p->next_update = this;
     c80:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
     c82:	2700      	movs	r7, #0

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     c84:	f241 413c 	movw	r1, #5180	; 0x143c
     c88:	483c      	ldr	r0, [pc, #240]	; (d7c <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1a8>)
     c8a:	f241 4c3d 	movw	ip, #5181	; 0x143d
     c8e:	f8df e110 	ldr.w	lr, [pc, #272]	; da0 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1cc>
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     c92:	2301      	movs	r3, #1
#include "AudioStream.h"

class AudioAnalyzePeak : public AudioStream
{
public:
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
     c94:	f8df a10c 	ldr.w	sl, [pc, #268]	; da4 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1d0>
     c98:	463a      	mov	r2, r7

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     c9a:	5467      	strb	r7, [r4, r1]
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     ca0:	f8c4 0418 	str.w	r0, [r4, #1048]	; 0x418
     ca4:	6167      	str	r7, [r4, #20]
			cpu_cycles = 0;
     ca6:	80a7      	strh	r7, [r4, #4]
			cpu_cycles_max = 0;
     ca8:	80e7      	strh	r7, [r4, #6]
			numConnections = 0;
     caa:	72a7      	strb	r7, [r4, #10]
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     cac:	4834      	ldr	r0, [pc, #208]	; (d80 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1ac>)

class AudioAnalyzeFFT1024 : public AudioStream
{
public:
	AudioAnalyzeFFT1024() : AudioStream(1, inputQueueArray),
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
     cae:	f804 700c 	strb.w	r7, [r4, ip]
     cb2:	f8c4 e000 	str.w	lr, [r4]
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
     cb6:	f004 ffdd 	bl	5c74 <arm_cfft_radix4_init_q15>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     cba:	f8df 90ec 	ldr.w	r9, [pc, #236]	; da8 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1d4>
     cbe:	f10a 0218 	add.w	r2, sl, #24
     cc2:	2101      	movs	r1, #1
     cc4:	4650      	mov	r0, sl
     cc6:	f7ff fd57 	bl	778 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
		min_sample = 32767;
		max_sample = -32768;
     cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
#include "AudioStream.h"

class AudioAnalyzePeak : public AudioStream
{
public:
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
     cce:	492d      	ldr	r1, [pc, #180]	; (d84 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1b0>)
		min_sample = 32767;
     cd0:	f647 72ff 	movw	r2, #32767	; 0x7fff
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     cd4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; dac <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1d8>
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
     cd8:	4648      	mov	r0, r9
		max_sample = -32768;
     cda:	f8aa 3020 	strh.w	r3, [sl, #32]
#include "AudioStream.h"

class AudioAnalyzePeak : public AudioStream
{
public:
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
     cde:	f8ca 1000 	str.w	r1, [sl]
		min_sample = 32767;
     ce2:	f8aa 201e 	strh.w	r2, [sl, #30]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     ce6:	f889 7008 	strb.w	r7, [r9, #8]
     cea:	f889 7009 	strb.w	r7, [r9, #9]
     cee:	f8c9 700c 	str.w	r7, [r9, #12]
		{ isConnected = false;
     cf2:	f889 7010 	strb.w	r7, [r9, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     cf6:	e889 0060 	stmia.w	r9, {r5, r6}
		{ isConnected = false;
		  connect(); }
     cfa:	f004 fa21 	bl	5140 <AudioConnection::connect()>
AudioInputI2S            i2s1;           //xy=115,244
//AudioOutputI2S           i2s2;
AudioMixer4              mixer;          //xy=400,248
AudioAnalyzeFFT1024      fft;            //xy=649,152
AudioAnalyzePeak         peak;           //xy=653,380
AudioConnection          patchCord1(i2s1, 0, mixer, 0);
     cfe:	4a22      	ldr	r2, [pc, #136]	; (d88 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1b4>)
     d00:	4922      	ldr	r1, [pc, #136]	; (d8c <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1b8>)
     d02:	4648      	mov	r0, r9
     d04:	f005 fa7e 	bl	6204 <__aeabi_atexit>
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     d08:	4d21      	ldr	r5, [pc, #132]	; (d90 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1bc>)
		{ isConnected = false;
		  connect(); }
     d0a:	4640      	mov	r0, r8
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     d0c:	f888 7008 	strb.w	r7, [r8, #8]
     d10:	f8c8 6000 	str.w	r6, [r8]
     d14:	f8c8 4004 	str.w	r4, [r8, #4]
     d18:	f888 7009 	strb.w	r7, [r8, #9]
     d1c:	f8c8 700c 	str.w	r7, [r8, #12]
		{ isConnected = false;
     d20:	f888 7010 	strb.w	r7, [r8, #16]
		  connect(); }
     d24:	f004 fa0c 	bl	5140 <AudioConnection::connect()>
AudioConnection          patchCord2(mixer, fft);
     d28:	4a17      	ldr	r2, [pc, #92]	; (d88 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1b4>)
     d2a:	4640      	mov	r0, r8
     d2c:	4917      	ldr	r1, [pc, #92]	; (d8c <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1b8>)
     d2e:	f005 fa69 	bl	6204 <__aeabi_atexit>
     d32:	4628      	mov	r0, r5
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     d34:	722f      	strb	r7, [r5, #8]
     d36:	726f      	strb	r7, [r5, #9]
     d38:	60ef      	str	r7, [r5, #12]
		{ isConnected = false;
     d3a:	742f      	strb	r7, [r5, #16]
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     d3c:	e885 0440 	stmia.w	r5, {r6, sl}
		{ isConnected = false;
		  connect(); }
     d40:	f004 f9fe 	bl	5140 <AudioConnection::connect()>
AudioConnection          patchCord3(mixer, peak);
     d44:	4a10      	ldr	r2, [pc, #64]	; (d88 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1b4>)
     d46:	4911      	ldr	r1, [pc, #68]	; (d8c <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1b8>)
     d48:	4628      	mov	r0, r5
     d4a:	f005 fa5b 	bl	6204 <__aeabi_atexit>
#include "AudioControl.h"

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
     d4e:	4b11      	ldr	r3, [pc, #68]	; (d94 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1c0>)
     d50:	4911      	ldr	r1, [pc, #68]	; (d98 <_GLOBAL__sub_I_leds_plus_safety_pixel+0x1c4>)
     d52:	220a      	movs	r2, #10
     d54:	6019      	str	r1, [r3, #0]
     d56:	721a      	strb	r2, [r3, #8]
     d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     d5c:	603d      	str	r5, [r7, #0]
     d5e:	e74e      	b.n	bfe <_GLOBAL__sub_I_leds_plus_safety_pixel+0x2a>
     d60:	6018      	str	r0, [r3, #0]
     d62:	e78e      	b.n	c82 <_GLOBAL__sub_I_leds_plus_safety_pixel+0xae>
     d64:	200074c4 	.word	0x200074c4
     d68:	20006b0c 	.word	0x20006b0c
     d6c:	20006b54 	.word	0x20006b54
     d70:	20001108 	.word	0x20001108
     d74:	200056b8 	.word	0x200056b8
     d78:	20001114 	.word	0x20001114
     d7c:	200008cc 	.word	0x200008cc
     d80:	20006afc 	.word	0x20006afc
     d84:	200010e0 	.word	0x200010e0
     d88:	20004d0c 	.word	0x20004d0c
     d8c:	000000ad 	.word	0x000000ad
     d90:	20006eb8 	.word	0x20006eb8
     d94:	20006b48 	.word	0x20006b48
     d98:	200010ec 	.word	0x200010ec
     d9c:	20000008 	.word	0x20000008
     da0:	200010d4 	.word	0x200010d4
     da4:	20006b24 	.word	0x20006b24
     da8:	20006e90 	.word	0x20006e90
     dac:	20006ea4 	.word	0x20006ea4

00000db0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
     db0:	4804      	ldr	r0, [pc, #16]	; (dc4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
     db2:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     db4:	4411      	add	r1, r2
     db6:	e001      	b.n	dbc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     db8:	4299      	cmp	r1, r3
     dba:	d302      	bcc.n	dc2 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
     dbc:	6803      	ldr	r3, [r0, #0]
     dbe:	429a      	cmp	r2, r3
     dc0:	d9fa      	bls.n	db8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
     dc2:	4770      	bx	lr
     dc4:	20007288 	.word	0x20007288

00000dc8 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
     dc8:	b410      	push	{r4}
     dca:	4a0c      	ldr	r2, [pc, #48]	; (dfc <VisualMicroDebug::outPacketStart(bool)+0x34>)
     dcc:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DEBUGGER_TYPE != VM_DEBUGGER_TYPE_NET_UDP)
	if (!noWait)
     dce:	b971      	cbnz	r1, dee <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
     dd0:	6841      	ldr	r1, [r0, #4]
     dd2:	6813      	ldr	r3, [r2, #0]
     dd4:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
     dd6:	2931      	cmp	r1, #49	; 0x31
     dd8:	d809      	bhi.n	dee <VisualMicroDebug::outPacketStart(bool)+0x26>
     dda:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     ddc:	f100 0332 	add.w	r3, r0, #50	; 0x32
     de0:	1a59      	subs	r1, r3, r1
     de2:	e001      	b.n	de8 <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     de4:	4299      	cmp	r1, r3
     de6:	d302      	bcc.n	dee <VisualMicroDebug::outPacketStart(bool)+0x26>
     de8:	6813      	ldr	r3, [r2, #0]
     dea:	4298      	cmp	r0, r3
     dec:	d9fa      	bls.n	de4 <VisualMicroDebug::outPacketStart(bool)+0x1c>
     dee:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
     df0:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     df2:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
     df4:	f85d 4b04 	ldr.w	r4, [sp], #4
     df8:	4770      	bx	lr
     dfa:	bf00      	nop
     dfc:	20007288 	.word	0x20007288

00000e00 <VisualMicroDebug::outPacketEnd()>:
     e00:	4770      	bx	lr
     e02:	bf00      	nop

00000e04 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
     e04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     e08:	f002 bdb2 	b.w	3970 <delay>

00000e0c <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
     e0c:	2300      	movs	r3, #0
     e0e:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
     e10:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
     e12:	b141      	cbz	r1, e26 <VisualMicroDebug::init(unsigned long)+0x1a>
     e14:	4804      	ldr	r0, [pc, #16]	; (e28 <VisualMicroDebug::init(unsigned long)+0x1c>)
     e16:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     e18:	4411      	add	r1, r2
     e1a:	e001      	b.n	e20 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     e1c:	4299      	cmp	r1, r3
     e1e:	d302      	bcc.n	e26 <VisualMicroDebug::init(unsigned long)+0x1a>
     e20:	6803      	ldr	r3, [r0, #0]
     e22:	429a      	cmp	r2, r3
     e24:	d9fa      	bls.n	e1c <VisualMicroDebug::init(unsigned long)+0x10>
     e26:	4770      	bx	lr
     e28:	20007288 	.word	0x20007288

00000e2c <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
     e2c:	b538      	push	{r3, r4, r5, lr}
     e2e:	4c0f      	ldr	r4, [pc, #60]	; (e6c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
     e30:	460d      	mov	r5, r1
     e32:	2106      	movs	r1, #6
     e34:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     e36:	6043      	str	r3, [r0, #4]
     e38:	480d      	ldr	r0, [pc, #52]	; (e70 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
     e3a:	f004 f805 	bl	4e48 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e3e:	220a      	movs	r2, #10
     e40:	2300      	movs	r3, #0
     e42:	4629      	mov	r1, r5
     e44:	480b      	ldr	r0, [pc, #44]	; (e74 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     e46:	f004 fb99 	bl	557c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     e4a:	2106      	movs	r1, #6
     e4c:	480a      	ldr	r0, [pc, #40]	; (e78 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
     e4e:	f003 fffb 	bl	4e48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     e52:	4808      	ldr	r0, [pc, #32]	; (e74 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
     e54:	f004 fb82 	bl	555c <Print::println()>
     e58:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     e5a:	f102 0132 	add.w	r1, r2, #50	; 0x32
     e5e:	e001      	b.n	e64 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     e60:	4299      	cmp	r1, r3
     e62:	d302      	bcc.n	e6a <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
     e64:	6823      	ldr	r3, [r4, #0]
     e66:	429a      	cmp	r2, r3
     e68:	d9fa      	bls.n	e60 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
     e6a:	bd38      	pop	{r3, r4, r5, pc}
     e6c:	20007288 	.word	0x20007288
     e70:	20000074 	.word	0x20000074
     e74:	20004e10 	.word	0x20004e10
     e78:	2000007c 	.word	0x2000007c

00000e7c <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
     e7c:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
     e7e:	7e03      	ldrb	r3, [r0, #24]
     e80:	b90b      	cbnz	r3, e86 <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
     e82:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
     e84:	bd38      	pop	{r3, r4, r5, pc}
     e86:	460d      	mov	r5, r1
     e88:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     e8a:	f003 ff77 	bl	4d7c <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
     e8e:	f010 0fff 	tst.w	r0, #255	; 0xff
     e92:	d101      	bne.n	e98 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
     e94:	2065      	movs	r0, #101	; 0x65
     e96:	bd38      	pop	{r3, r4, r5, pc}
     e98:	f003 ff70 	bl	4d7c <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
     e9c:	f010 0fff 	tst.w	r0, #255	; 0xff
     ea0:	d0f8      	beq.n	e94 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
     ea2:	f003 ffab 	bl	4dfc <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
     ea6:	b2c0      	uxtb	r0, r0
     ea8:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
     eac:	2b1e      	cmp	r3, #30
     eae:	d8f3      	bhi.n	e98 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
     eb0:	a201      	add	r2, pc, #4	; (adr r2, eb8 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
     eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     eb6:	bf00      	nop
     eb8:	00000f41 	.word	0x00000f41
     ebc:	00000e99 	.word	0x00000e99
     ec0:	00000e99 	.word	0x00000e99
     ec4:	00000e99 	.word	0x00000e99
     ec8:	00000e99 	.word	0x00000e99
     ecc:	00000e99 	.word	0x00000e99
     ed0:	00000e99 	.word	0x00000e99
     ed4:	00000e99 	.word	0x00000e99
     ed8:	00000e99 	.word	0x00000e99
     edc:	00000e99 	.word	0x00000e99
     ee0:	00000e99 	.word	0x00000e99
     ee4:	00000f35 	.word	0x00000f35
     ee8:	00000e99 	.word	0x00000e99
     eec:	00000e99 	.word	0x00000e99
     ef0:	00000e99 	.word	0x00000e99
     ef4:	00000e99 	.word	0x00000e99
     ef8:	00000e83 	.word	0x00000e83
     efc:	00000e99 	.word	0x00000e99
     f00:	00000e99 	.word	0x00000e99
     f04:	00000e99 	.word	0x00000e99
     f08:	00000e99 	.word	0x00000e99
     f0c:	00000e99 	.word	0x00000e99
     f10:	00000e99 	.word	0x00000e99
     f14:	00000e99 	.word	0x00000e99
     f18:	00000e99 	.word	0x00000e99
     f1c:	00000e83 	.word	0x00000e83
     f20:	00000e99 	.word	0x00000e99
     f24:	00000e99 	.word	0x00000e99
     f28:	00000e99 	.word	0x00000e99
     f2c:	00000e99 	.word	0x00000e99
     f30:	00000e85 	.word	0x00000e85
		{

		case 'c':
			sendContinuedACK(breakPointId);
     f34:	4620      	mov	r0, r4
     f36:	4629      	mov	r1, r5
     f38:	f7ff ff78 	bl	e2c <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
     f3c:	2063      	movs	r0, #99	; 0x63
     f3e:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     f40:	2300      	movs	r3, #0
			return 'c';
     f42:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     f44:	7623      	strb	r3, [r4, #24]
     f46:	bd38      	pop	{r3, r4, r5, pc}

00000f48 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
     f48:	b570      	push	{r4, r5, r6, lr}
     f4a:	4605      	mov	r5, r0
     f4c:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
     f4e:	b1a9      	cbz	r1, f7c <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
     f50:	2301      	movs	r3, #1
     f52:	4c0b      	ldr	r4, [pc, #44]	; (f80 <VisualMicroDebug::start(bool, bool)+0x38>)
     f54:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     f56:	2100      	movs	r1, #0
     f58:	4628      	mov	r0, r5
     f5a:	f7ff ff8f 	bl	e7c <VisualMicroDebug::breakWait(unsigned char)>
     f5e:	2863      	cmp	r0, #99	; 0x63
     f60:	d00c      	beq.n	f7c <VisualMicroDebug::start(bool, bool)+0x34>
     f62:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     f64:	1c51      	adds	r1, r2, #1
     f66:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     f68:	429a      	cmp	r2, r3
     f6a:	d8f4      	bhi.n	f56 <VisualMicroDebug::start(bool, bool)+0xe>
     f6c:	4299      	cmp	r1, r3
     f6e:	d2fa      	bcs.n	f66 <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     f70:	2100      	movs	r1, #0
     f72:	4628      	mov	r0, r5
     f74:	f7ff ff82 	bl	e7c <VisualMicroDebug::breakWait(unsigned char)>
     f78:	2863      	cmp	r0, #99	; 0x63
     f7a:	d1f2      	bne.n	f62 <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
     f7c:	762e      	strb	r6, [r5, #24]
     f7e:	bd70      	pop	{r4, r5, r6, pc}
     f80:	20007288 	.word	0x20007288

00000f84 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
     f84:	4b03      	ldr	r3, [pc, #12]	; (f94 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
     f86:	2200      	movs	r2, #0
     f88:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
     f8a:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
     f8c:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
     f8e:	615a      	str	r2, [r3, #20]
     f90:	4770      	bx	lr
     f92:	bf00      	nop
     f94:	20006ecc 	.word	0x20006ecc

00000f98 <AudioAnalyzeFFT1024::update()>:
	}

}

void AudioAnalyzeFFT1024::update(void)
{
     f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	audio_block_t *block;

	block = receiveReadOnly();
     f9a:	2100      	movs	r1, #0
	}

}

void AudioAnalyzeFFT1024::update(void)
{
     f9c:	4605      	mov	r5, r0
	audio_block_t *block;

	block = receiveReadOnly();
     f9e:	f004 f8a1 	bl	50e4 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     fa2:	2800      	cmp	r0, #0
     fa4:	f000 80d3 	beq.w	114e <AudioAnalyzeFFT1024::update()+0x1b6>

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
     fa8:	f241 433c 	movw	r3, #5180	; 0x143c
     fac:	5ceb      	ldrb	r3, [r5, r3]
     fae:	2b07      	cmp	r3, #7
     fb0:	f200 80cd 	bhi.w	114e <AudioAnalyzeFFT1024::update()+0x1b6>
     fb4:	e8df f003 	tbb	[pc, r3]
     fb8:	e1dad3cc 	.word	0xe1dad3cc
     fbc:	04f6efe8 	.word	0x04f6efe8
		break;
	case 7:
		blocklist[7] = block;
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
     fc0:	f8d5 741c 	ldr.w	r7, [r5, #1052]	; 0x41c
     fc4:	f505 6487 	add.w	r4, r5, #1080	; 0x438
     fc8:	f205 413c 	addw	r1, r5, #1084	; 0x43c
	case 6:
		blocklist[6] = block;
		state = 7;
		break;
	case 7:
		blocklist[7] = block;
     fcc:	f8c5 0438 	str.w	r0, [r5, #1080]	; 0x438
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
     fd0:	1d3b      	adds	r3, r7, #4
     fd2:	4622      	mov	r2, r4
     fd4:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     fd8:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     fdc:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
     fde:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     fe2:	d1f9      	bne.n	fd8 <AudioAnalyzeFFT1024::update()+0x40>
	case 7:
		blocklist[7] = block;
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
     fe4:	f8d5 7420 	ldr.w	r7, [r5, #1056]	; 0x420
     fe8:	f505 62c7 	add.w	r2, r5, #1592	; 0x638
     fec:	1d3b      	adds	r3, r7, #4
     fee:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
     ff2:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     ff6:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
     ff8:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
     ffc:	d1f9      	bne.n	ff2 <AudioAnalyzeFFT1024::update()+0x5a>
		blocklist[7] = block;
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
     ffe:	f8d5 7424 	ldr.w	r7, [r5, #1060]	; 0x424
    1002:	f605 0238 	addw	r2, r5, #2104	; 0x838
    1006:	1d3b      	adds	r3, r7, #4
    1008:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    100c:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1010:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1012:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1016:	d1f9      	bne.n	100c <AudioAnalyzeFFT1024::update()+0x74>
		// TODO: perhaps distribute the work over multiple update() ??
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
    1018:	f8d5 7428 	ldr.w	r7, [r5, #1064]	; 0x428
    101c:	f605 2238 	addw	r2, r5, #2616	; 0xa38
    1020:	1d3b      	adds	r3, r7, #4
    1022:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1026:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    102a:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    102c:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1030:	d1f9      	bne.n	1026 <AudioAnalyzeFFT1024::update()+0x8e>
		//       github pull requsts welcome......
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
    1032:	f8d5 742c 	ldr.w	r7, [r5, #1068]	; 0x42c
    1036:	f605 4238 	addw	r2, r5, #3128	; 0xc38
    103a:	1d3b      	adds	r3, r7, #4
    103c:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1040:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1044:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1046:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    104a:	d1f9      	bne.n	1040 <AudioAnalyzeFFT1024::update()+0xa8>
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
    104c:	f8d5 7430 	ldr.w	r7, [r5, #1072]	; 0x430
    1050:	f605 6238 	addw	r2, r5, #3640	; 0xe38
    1054:	1d3b      	adds	r3, r7, #4
    1056:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    105a:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    105e:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1060:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1064:	d1f9      	bne.n	105a <AudioAnalyzeFFT1024::update()+0xc2>
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
    1066:	f8d5 7434 	ldr.w	r7, [r5, #1076]	; 0x434
    106a:	f241 0238 	movw	r2, #4152	; 0x1038
    106e:	1d3b      	adds	r3, r7, #4
    1070:	442a      	add	r2, r5
    1072:	f507 7782 	add.w	r7, r7, #260	; 0x104
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1076:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    107a:	429f      	cmp	r7, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    107c:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1080:	d1f9      	bne.n	1076 <AudioAnalyzeFFT1024::update()+0xde>
    1082:	f241 2238 	movw	r2, #4664	; 0x1238
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
    1086:	1d03      	adds	r3, r0, #4
    1088:	f500 7082 	add.w	r0, r0, #260	; 0x104
    108c:	442a      	add	r2, r5
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
		*dst++ = *src++;  // real sample plus a zero for imaginary
    108e:	f833 6b02 	ldrh.w	r6, [r3], #2
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1092:	4283      	cmp	r3, r0
		*dst++ = *src++;  // real sample plus a zero for imaginary
    1094:	f842 6f04 	str.w	r6, [r2, #4]!
static void copy_to_fft_buffer(void *destination, const void *source)
{
	const uint16_t *src = (const uint16_t *)source;
	uint32_t *dst = (uint32_t *)destination;

	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1098:	d1f9      	bne.n	108e <AudioAnalyzeFFT1024::update()+0xf6>
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
		if (window) apply_window_to_fft_buffer(buffer, window);
    109a:	f8d5 0418 	ldr.w	r0, [r5, #1048]	; 0x418
    109e:	b180      	cbz	r0, 10c2 <AudioAnalyzeFFT1024::update()+0x12a>
    10a0:	f505 6288 	add.w	r2, r5, #1088	; 0x440
    10a4:	f500 6700 	add.w	r7, r0, #2048	; 0x800
{
	int16_t *buf = (int16_t *)buffer;
	const int16_t *win = (int16_t *)window;;

	for (int i=0; i < 1024; i++) {
		int32_t val = *buf * *win++;
    10a8:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
    10ac:	3204      	adds	r2, #4
    10ae:	f930 6b02 	ldrsh.w	r6, [r0], #2
		//*buf = signed_saturate_rshift(val, 16, 15);
		*buf = val >> 15;
    10b2:	fb03 f306 	mul.w	r3, r3, r6
static void apply_window_to_fft_buffer(void *buffer, const void *window)
{
	int16_t *buf = (int16_t *)buffer;
	const int16_t *win = (int16_t *)window;;

	for (int i=0; i < 1024; i++) {
    10b6:	4287      	cmp	r7, r0
		int32_t val = *buf * *win++;
		//*buf = signed_saturate_rshift(val, 16, 15);
		*buf = val >> 15;
    10b8:	ea4f 33e3 	mov.w	r3, r3, asr #15
    10bc:	f822 3c08 	strh.w	r3, [r2, #-8]
static void apply_window_to_fft_buffer(void *buffer, const void *window)
{
	int16_t *buf = (int16_t *)buffer;
	const int16_t *win = (int16_t *)window;;

	for (int i=0; i < 1024; i++) {
    10c0:	d1f2      	bne.n	10a8 <AudioAnalyzeFFT1024::update()+0x110>
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
		if (window) apply_window_to_fft_buffer(buffer, window);
		arm_cfft_radix4_q15(&fft_inst, buffer);
    10c2:	f241 4044 	movw	r0, #5188	; 0x1444
    10c6:	f205 4716 	addw	r7, r5, #1046	; 0x416
    10ca:	4e3a      	ldr	r6, [pc, #232]	; (11b4 <AudioAnalyzeFFT1024::update()+0x21c>)
    10cc:	4428      	add	r0, r5
    10ce:	f004 fdb3 	bl	5c38 <arm_cfft_radix4_q15>
    10d2:	f105 0016 	add.w	r0, r5, #22
		// TODO: support averaging multiple copies
		for (int i=0; i < 512; i++) {
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
    10d6:	f854 1f04 	ldr.w	r1, [r4, #4]!
// computes ((a[15:0] * b[15:0]) + (a[31:16] * b[31:16]))
static inline int32_t multiply_16tx16t_add_16bx16b(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16tx16t_add_16bx16b(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smuad %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    10da:	fb21 f101 	smuad	r1, r1, r1
}

inline uint32_t sqrt_uint32_approx(uint32_t in) __attribute__((always_inline,unused));
inline uint32_t sqrt_uint32_approx(uint32_t in)
{
	uint32_t n = sqrt_integer_guess_table[__builtin_clz(in)];
    10de:	fab1 f381 	clz	r3, r1
    10e2:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
	n = ((in / n) + n) / 2;
    10e6:	fbb1 f3f2 	udiv	r3, r1, r2
    10ea:	441a      	add	r2, r3
    10ec:	0853      	lsrs	r3, r2, #1
	n = ((in / n) + n) / 2;
    10ee:	fbb1 f1f3 	udiv	r1, r1, r3
    10f2:	440b      	add	r3, r1
			uint32_t magsq = multiply_16tx16t_add_16bx16b(tmp, tmp);
			output[i] = sqrt_uint32_approx(magsq);
    10f4:	085b      	lsrs	r3, r3, #1
    10f6:	f820 3f02 	strh.w	r3, [r0, #2]!
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
		if (window) apply_window_to_fft_buffer(buffer, window);
		arm_cfft_radix4_q15(&fft_inst, buffer);
		// TODO: support averaging multiple copies
		for (int i=0; i < 512; i++) {
    10fa:	42b8      	cmp	r0, r7
    10fc:	d1eb      	bne.n	10d6 <AudioAnalyzeFFT1024::update()+0x13e>
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
			uint32_t magsq = multiply_16tx16t_add_16bx16b(tmp, tmp);
			output[i] = sqrt_uint32_approx(magsq);
		}
		outputflag = true;
    10fe:	f241 433d 	movw	r3, #5181	; 0x143d
    1102:	2201      	movs	r2, #1
		release(blocklist[0]);
    1104:	f8d5 041c 	ldr.w	r0, [r5, #1052]	; 0x41c
		for (int i=0; i < 512; i++) {
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
			uint32_t magsq = multiply_16tx16t_add_16bx16b(tmp, tmp);
			output[i] = sqrt_uint32_approx(magsq);
		}
		outputflag = true;
    1108:	54ea      	strb	r2, [r5, r3]
		release(blocklist[0]);
    110a:	f003 ffa7 	bl	505c <AudioStream::release(audio_block_struct*)>
		release(blocklist[1]);
    110e:	f8d5 0420 	ldr.w	r0, [r5, #1056]	; 0x420
    1112:	f003 ffa3 	bl	505c <AudioStream::release(audio_block_struct*)>
		release(blocklist[2]);
    1116:	f8d5 0424 	ldr.w	r0, [r5, #1060]	; 0x424
    111a:	f003 ff9f 	bl	505c <AudioStream::release(audio_block_struct*)>
		release(blocklist[3]);
    111e:	f8d5 0428 	ldr.w	r0, [r5, #1064]	; 0x428
    1122:	f003 ff9b 	bl	505c <AudioStream::release(audio_block_struct*)>
		blocklist[0] = blocklist[4];
    1126:	f8d5 642c 	ldr.w	r6, [r5, #1068]	; 0x42c
		blocklist[1] = blocklist[5];
    112a:	f8d5 4430 	ldr.w	r4, [r5, #1072]	; 0x430
		blocklist[2] = blocklist[6];
		blocklist[3] = blocklist[7];
		state = 4;
    112e:	f241 433c 	movw	r3, #5180	; 0x143c
		release(blocklist[1]);
		release(blocklist[2]);
		release(blocklist[3]);
		blocklist[0] = blocklist[4];
		blocklist[1] = blocklist[5];
		blocklist[2] = blocklist[6];
    1132:	f8d5 0434 	ldr.w	r0, [r5, #1076]	; 0x434
		blocklist[3] = blocklist[7];
		state = 4;
    1136:	2204      	movs	r2, #4
		release(blocklist[2]);
		release(blocklist[3]);
		blocklist[0] = blocklist[4];
		blocklist[1] = blocklist[5];
		blocklist[2] = blocklist[6];
		blocklist[3] = blocklist[7];
    1138:	f8d5 1438 	ldr.w	r1, [r5, #1080]	; 0x438
		outputflag = true;
		release(blocklist[0]);
		release(blocklist[1]);
		release(blocklist[2]);
		release(blocklist[3]);
		blocklist[0] = blocklist[4];
    113c:	f8c5 641c 	str.w	r6, [r5, #1052]	; 0x41c
		blocklist[1] = blocklist[5];
    1140:	f8c5 4420 	str.w	r4, [r5, #1056]	; 0x420
		blocklist[2] = blocklist[6];
    1144:	f8c5 0424 	str.w	r0, [r5, #1060]	; 0x424
		blocklist[3] = blocklist[7];
    1148:	f8c5 1428 	str.w	r1, [r5, #1064]	; 0x428
		state = 4;
    114c:	54ea      	strb	r2, [r5, r3]
    114e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
	case 0:
		blocklist[0] = block;
		state = 1;
    1150:	f241 433c 	movw	r3, #5180	; 0x143c
    1154:	2201      	movs	r2, #1
	if (!block) return;

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
	case 0:
		blocklist[0] = block;
    1156:	f8c5 041c 	str.w	r0, [r5, #1052]	; 0x41c
		state = 1;
    115a:	54ea      	strb	r2, [r5, r3]
		break;
    115c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 1:
		blocklist[1] = block;
		state = 2;
    115e:	f241 433c 	movw	r3, #5180	; 0x143c
    1162:	2202      	movs	r2, #2
	case 0:
		blocklist[0] = block;
		state = 1;
		break;
	case 1:
		blocklist[1] = block;
    1164:	f8c5 0420 	str.w	r0, [r5, #1056]	; 0x420
		state = 2;
    1168:	54ea      	strb	r2, [r5, r3]
		break;
    116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 2:
		blocklist[2] = block;
		state = 3;
    116c:	f241 433c 	movw	r3, #5180	; 0x143c
    1170:	2203      	movs	r2, #3
	case 1:
		blocklist[1] = block;
		state = 2;
		break;
	case 2:
		blocklist[2] = block;
    1172:	f8c5 0424 	str.w	r0, [r5, #1060]	; 0x424
		state = 3;
    1176:	54ea      	strb	r2, [r5, r3]
		break;
    1178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 3:
		blocklist[3] = block;
		state = 4;
    117a:	f241 433c 	movw	r3, #5180	; 0x143c
    117e:	2204      	movs	r2, #4
	case 2:
		blocklist[2] = block;
		state = 3;
		break;
	case 3:
		blocklist[3] = block;
    1180:	f8c5 0428 	str.w	r0, [r5, #1064]	; 0x428
		state = 4;
    1184:	54ea      	strb	r2, [r5, r3]
		break;
    1186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 4:
		blocklist[4] = block;
		state = 5;
    1188:	f241 433c 	movw	r3, #5180	; 0x143c
    118c:	2205      	movs	r2, #5
	case 3:
		blocklist[3] = block;
		state = 4;
		break;
	case 4:
		blocklist[4] = block;
    118e:	f8c5 042c 	str.w	r0, [r5, #1068]	; 0x42c
		state = 5;
    1192:	54ea      	strb	r2, [r5, r3]
		break;
    1194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 5:
		blocklist[5] = block;
		state = 6;
    1196:	f241 433c 	movw	r3, #5180	; 0x143c
    119a:	2206      	movs	r2, #6
	case 4:
		blocklist[4] = block;
		state = 5;
		break;
	case 5:
		blocklist[5] = block;
    119c:	f8c5 0430 	str.w	r0, [r5, #1072]	; 0x430
		state = 6;
    11a0:	54ea      	strb	r2, [r5, r3]
		break;
    11a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case 6:
		blocklist[6] = block;
		state = 7;
    11a4:	f241 433c 	movw	r3, #5180	; 0x143c
    11a8:	2207      	movs	r2, #7
	case 5:
		blocklist[5] = block;
		state = 6;
		break;
	case 6:
		blocklist[6] = block;
    11aa:	f8c5 0434 	str.w	r0, [r5, #1076]	; 0x434
		state = 7;
    11ae:	54ea      	strb	r2, [r5, r3]
		break;
    11b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11b2:	bf00      	nop
    11b4:	20001118 	.word	0x20001118

000011b8 <AudioAnalyzePeak::update()>:

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
    11b8:	b570      	push	{r4, r5, r6, lr}
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
    11ba:	2100      	movs	r1, #0

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
    11bc:	4606      	mov	r6, r0
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
    11be:	f003 ff91 	bl	50e4 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) {
    11c2:	b1c0      	cbz	r0, 11f6 <AudioAnalyzePeak::update()+0x3e>
		return;
	}
	p = block->data;
    11c4:	1d03      	adds	r3, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES;
    11c6:	f500 7582 	add.w	r5, r0, #260	; 0x104
	min = min_sample;
    11ca:	f9b6 401e 	ldrsh.w	r4, [r6, #30]
	max = max_sample;
    11ce:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
	do {
		int16_t d=*p++;
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
    11d2:	f933 2b02 	ldrsh.w	r2, [r3], #2
    11d6:	4294      	cmp	r4, r2
    11d8:	bfa8      	it	ge
    11da:	4614      	movge	r4, r2
    11dc:	4291      	cmp	r1, r2
    11de:	bfb8      	it	lt
    11e0:	4611      	movlt	r1, r2
		if (d>max) max=d;
	} while (p < end);
    11e2:	429d      	cmp	r5, r3
    11e4:	d8f5      	bhi.n	11d2 <AudioAnalyzePeak::update()+0x1a>
	min_sample = min;
	max_sample = max;
	new_output = true;
    11e6:	2301      	movs	r3, #1
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
		if (d>max) max=d;
	} while (p < end);
	min_sample = min;
    11e8:	83f4      	strh	r4, [r6, #30]
	max_sample = max;
    11ea:	8431      	strh	r1, [r6, #32]
	new_output = true;
    11ec:	7733      	strb	r3, [r6, #28]
	release(block);
}
    11ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (d>max) max=d;
	} while (p < end);
	min_sample = min;
	max_sample = max;
	new_output = true;
	release(block);
    11f2:	f003 bf33 	b.w	505c <AudioStream::release(audio_block_struct*)>
    11f6:	bd70      	pop	{r4, r5, r6, pc}

000011f8 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    11f8:	b510      	push	{r4, lr}
    11fa:	4604      	mov	r4, r0
		release();
    11fc:	f004 f882 	bl	5304 <DMAChannel::release()>
	}
    1200:	4620      	mov	r0, r4
    1202:	bd10      	pop	{r4, pc}

00001204 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE>:
volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

volatile bool AsyncAudioInputSPDIF3::lockChanged=false;
volatile bool AsyncAudioInputSPDIF3::locked=false;
DMAChannel AsyncAudioInputSPDIF3::dma(false);
    1204:	4a02      	ldr	r2, [pc, #8]	; (1210 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0xc>)
    1206:	4903      	ldr	r1, [pc, #12]	; (1214 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x10>)
    1208:	4803      	ldr	r0, [pc, #12]	; (1218 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF314resetResamplerE+0x14>)
    120a:	f004 bffb 	b.w	6204 <__aeabi_atexit>
    120e:	bf00      	nop
    1210:	20004d0c 	.word	0x20004d0c
    1214:	000011f9 	.word	0x000011f9
    1218:	20006f14 	.word	0x20006f14

0000121c <AudioControlSGTL5000::disable()>:
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
    121c:	2000      	movs	r0, #0
    121e:	4770      	bx	lr

00001220 <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
    1220:	2000      	movs	r0, #0
    1222:	4770      	bx	lr

00001224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    1224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    1226:	2501      	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1228:	7a03      	ldrb	r3, [r0, #8]
    122a:	4c14      	ldr	r4, [pc, #80]	; (127c <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x58>)
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    122c:	2924      	cmp	r1, #36	; 0x24
    122e:	fa03 f305 	lsl.w	r3, r3, r5
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    1232:	460e      	mov	r6, r1
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    1234:	bf08      	it	eq
    1236:	80c2      	strheq	r2, [r0, #6]
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    1238:	4617      	mov	r7, r2
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    123a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    123e:	4620      	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1240:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		transmitting = 1;
    1244:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		txBufferLength = 1;
    1248:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    124c:	f001 fc6e 	bl	2b2c <TwoWire::write(unsigned char)>
    1250:	b2f1      	uxtb	r1, r6
    1252:	4620      	mov	r0, r4
    1254:	f001 fc6a 	bl	2b2c <TwoWire::write(unsigned char)>
    1258:	f3c7 2107 	ubfx	r1, r7, #8, #8
    125c:	4620      	mov	r0, r4
    125e:	f001 fc65 	bl	2b2c <TwoWire::write(unsigned char)>
    1262:	4620      	mov	r0, r4
    1264:	b2f9      	uxtb	r1, r7
    1266:	f001 fc61 	bl	2b2c <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    126a:	4629      	mov	r1, r5
    126c:	4620      	mov	r0, r4
    126e:	f001 fda7 	bl	2dc0 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    1272:	fab0 f080 	clz	r0, r0
    1276:	0940      	lsrs	r0, r0, #5
    1278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    127a:	bf00      	nop
    127c:	20004d68 	.word	0x20004d68

00001280 <AudioControlSGTL5000::micGain(unsigned int)>:

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    1280:	2927      	cmp	r1, #39	; 0x27
	unsigned short m=((0x7F-calcVol(right,0x7F))<<8)|(0x7F-calcVol(left,0x7F));
	return write(CHIP_ANA_HP_CTRL, m);
}

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
    1282:	b538      	push	{r3, r4, r5, lr}
    1284:	460c      	mov	r4, r1
    1286:	4605      	mov	r5, r0
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    1288:	d909      	bls.n	129e <AudioControlSGTL5000::micGain(unsigned int)+0x1e>
		preamp_gain = 3;
		dB -= 40;
    128a:	f1a1 0428 	sub.w	r4, r1, #40	; 0x28
    128e:	f240 1273 	movw	r2, #371	; 0x173
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    1292:	212a      	movs	r1, #42	; 0x2a
    1294:	4628      	mov	r0, r5
    1296:	f7ff ffc5 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    129a:	b960      	cbnz	r0, 12b6 <AudioControlSGTL5000::micGain(unsigned int)+0x36>
}
    129c:	bd38      	pop	{r3, r4, r5, pc}
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
    129e:	291d      	cmp	r1, #29
    12a0:	d919      	bls.n	12d6 <AudioControlSGTL5000::micGain(unsigned int)+0x56>
		preamp_gain = 2;
		dB -= 30;
    12a2:	f1a1 041e 	sub.w	r4, r1, #30
    12a6:	f44f 72b9 	mov.w	r2, #370	; 0x172
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    12aa:	212a      	movs	r1, #42	; 0x2a
    12ac:	4628      	mov	r0, r5
    12ae:	f7ff ffb9 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    12b2:	2800      	cmp	r0, #0
    12b4:	d0f2      	beq.n	129c <AudioControlSGTL5000::micGain(unsigned int)+0x1c>
		preamp_gain = 1;
		dB -= 20;
	} else {
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
    12b6:	0064      	lsls	r4, r4, #1
    12b8:	4a0c      	ldr	r2, [pc, #48]	; (12ec <AudioControlSGTL5000::micGain(unsigned int)+0x6c>)
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    12ba:	4628      	mov	r0, r5
    12bc:	2120      	movs	r1, #32
		preamp_gain = 1;
		dB -= 20;
	} else {
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
    12be:	fba2 3204 	umull	r3, r2, r2, r4
    12c2:	0852      	lsrs	r2, r2, #1
    12c4:	2a0f      	cmp	r2, #15
    12c6:	bf28      	it	cs
    12c8:	220f      	movcs	r2, #15
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
}
    12ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    12ce:	ea42 1202 	orr.w	r2, r2, r2, lsl #4
    12d2:	f7ff bfa7 	b.w	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
		preamp_gain = 2;
		dB -= 30;
	} else if (dB >= 20) {
    12d6:	2913      	cmp	r1, #19
    12d8:	d904      	bls.n	12e4 <AudioControlSGTL5000::micGain(unsigned int)+0x64>
		preamp_gain = 1;
		dB -= 20;
    12da:	f1a1 0414 	sub.w	r4, r1, #20
    12de:	f240 1271 	movw	r2, #369	; 0x171
    12e2:	e7d6      	b.n	1292 <AudioControlSGTL5000::micGain(unsigned int)+0x12>
    12e4:	f44f 72b8 	mov.w	r2, #368	; 0x170
    12e8:	e7d3      	b.n	1292 <AudioControlSGTL5000::micGain(unsigned int)+0x12>
    12ea:	bf00      	nop
    12ec:	aaaaaaab 	.word	0xaaaaaaab

000012f0 <AudioControlSGTL5000::enable()>:
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
    12f0:	b570      	push	{r4, r5, r6, lr}
    12f2:	4604      	mov	r4, r0
	muted = true;
    12f4:	2601      	movs	r6, #1
	Wire.begin();
    12f6:	4835      	ldr	r0, [pc, #212]	; (13cc <AudioControlSGTL5000::enable()+0xdc>)
	}
}

bool AudioControlSGTL5000::enable(void)
{
	muted = true;
    12f8:	7126      	strb	r6, [r4, #4]
	Wire.begin();
    12fa:	f001 fc4d 	bl	2b98 <TwoWire::begin()>
	delay(5);
    12fe:	2005      	movs	r0, #5
    1300:	f002 fb36 	bl	3970 <delay>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    1304:	4620      	mov	r0, r4
    1306:	f244 0260 	movw	r2, #16480	; 0x4060
    130a:	2130      	movs	r1, #48	; 0x30
    130c:	f7ff ff8a 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    1310:	4605      	mov	r5, r0
    1312:	2800      	cmp	r0, #0
    1314:	d057      	beq.n	13c6 <AudioControlSGTL5000::enable()+0xd6>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    1316:	226c      	movs	r2, #108	; 0x6c
    1318:	2126      	movs	r1, #38	; 0x26
    131a:	4620      	mov	r0, r4
    131c:	f7ff ff82 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    1320:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
    1324:	2128      	movs	r1, #40	; 0x28
    1326:	4620      	mov	r0, r4
    1328:	f7ff ff7c 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    132c:	f640 7222 	movw	r2, #3874	; 0xf22
    1330:	212c      	movs	r1, #44	; 0x2c
    1332:	4620      	mov	r0, r4
    1334:	f7ff ff76 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    1338:	f244 4246 	movw	r2, #17478	; 0x4446
    133c:	213c      	movs	r1, #60	; 0x3c
    133e:	4620      	mov	r0, r4
    1340:	f7ff ff70 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    1344:	f240 1237 	movw	r2, #311	; 0x137
    1348:	2124      	movs	r1, #36	; 0x24
    134a:	4620      	mov	r0, r4
    134c:	f7ff ff6a 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    1350:	f244 02ff 	movw	r2, #16639	; 0x40ff
    1354:	2130      	movs	r1, #48	; 0x30
    1356:	4620      	mov	r0, r4
    1358:	f7ff ff64 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    135c:	2273      	movs	r2, #115	; 0x73
    135e:	2102      	movs	r1, #2
    1360:	4620      	mov	r0, r4
    1362:	f7ff ff5f 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    1366:	f44f 70c8 	mov.w	r0, #400	; 0x190
    136a:	f002 fb01 	bl	3970 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    136e:	f641 521d 	movw	r2, #7453	; 0x1d1d
    1372:	212e      	movs	r1, #46	; 0x2e
    1374:	4620      	mov	r0, r4
    1376:	f7ff ff55 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    137a:	2204      	movs	r2, #4
    137c:	4620      	mov	r0, r4
    137e:	4611      	mov	r1, r2
    1380:	f7ff ff50 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    1384:	2230      	movs	r2, #48	; 0x30
    1386:	2106      	movs	r1, #6
    1388:	4620      	mov	r0, r4
    138a:	f7ff ff4b 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    138e:	2210      	movs	r2, #16
    1390:	210a      	movs	r1, #10
    1392:	4620      	mov	r0, r4
    1394:	f7ff ff46 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    1398:	2200      	movs	r2, #0
    139a:	210e      	movs	r1, #14
    139c:	4620      	mov	r0, r4
    139e:	f7ff ff41 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    13a2:	f643 423c 	movw	r2, #15420	; 0x3c3c
    13a6:	2110      	movs	r1, #16
    13a8:	4620      	mov	r0, r4
    13aa:	f7ff ff3b 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    13ae:	f647 727f 	movw	r2, #32639	; 0x7f7f
    13b2:	2122      	movs	r1, #34	; 0x22
    13b4:	4620      	mov	r0, r4
    13b6:	f7ff ff35 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    13ba:	2236      	movs	r2, #54	; 0x36
    13bc:	2124      	movs	r1, #36	; 0x24
    13be:	4620      	mov	r0, r4
    13c0:	f7ff ff30 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	//mute = false;
	semi_automated = true;
    13c4:	7266      	strb	r6, [r4, #9]
	return true;
}
    13c6:	4628      	mov	r0, r5
    13c8:	bd70      	pop	{r4, r5, r6, pc}
    13ca:	bf00      	nop
    13cc:	20004d68 	.word	0x20004d68

000013d0 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    13d0:	b510      	push	{r4, lr}
    13d2:	4604      	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    13d4:	b119      	cbz	r1, 13de <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    13d6:	2901      	cmp	r1, #1
    13d8:	d011      	beq.n	13fe <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    13da:	2000      	movs	r0, #0
    13dc:	bd10      	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    13de:	2255      	movs	r2, #85	; 0x55
    13e0:	2120      	movs	r1, #32
    13e2:	f7ff ff1f 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    13e6:	2800      	cmp	r0, #0
    13e8:	d0f7      	beq.n	13da <AudioControlSGTL5000::inputSelect(int)+0xa>
    13ea:	88e2      	ldrh	r2, [r4, #6]
    13ec:	4620      	mov	r0, r4
    13ee:	2124      	movs	r1, #36	; 0x24
    13f0:	f042 0204 	orr.w	r2, r2, #4
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    13f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    13f8:	b292      	uxth	r2, r2
    13fa:	f7ff bf13 	b.w	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    13fe:	f240 1273 	movw	r2, #371	; 0x173
    1402:	212a      	movs	r1, #42	; 0x2a
    1404:	f7ff ff0e 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1408:	2800      	cmp	r0, #0
    140a:	d0e6      	beq.n	13da <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    140c:	2288      	movs	r2, #136	; 0x88
    140e:	2120      	movs	r1, #32
    1410:	4620      	mov	r0, r4
    1412:	f7ff ff07 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1416:	2800      	cmp	r0, #0
    1418:	d0df      	beq.n	13da <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    141a:	88e2      	ldrh	r2, [r4, #6]
    141c:	4620      	mov	r0, r4
    141e:	2124      	movs	r1, #36	; 0x24
    1420:	f022 0204 	bic.w	r2, r2, #4
		} else {
			return false;
		}
	}
    1424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1428:	f7ff befc 	b.w	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

0000142c <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    142c:	b538      	push	{r3, r4, r5, lr}
    142e:	4605      	mov	r5, r0
	if (n == 0) {
    1430:	b311      	cbz	r1, 1478 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x4c>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    1432:	2980      	cmp	r1, #128	; 0x80
    1434:	d909      	bls.n	144a <AudioControlSGTL5000::volumeInteger(unsigned int)+0x1e>
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    1436:	792b      	ldrb	r3, [r5, #4]
    1438:	2400      	movs	r4, #0
    143a:	b96b      	cbnz	r3, 1458 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x2c>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    143c:	4622      	mov	r2, r4
    143e:	4628      	mov	r0, r5
    1440:	2122      	movs	r1, #34	; 0x22
}
    1442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1446:	f7ff beed 	b.w	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    144a:	f1c1 0480 	rsb	r4, r1, #128	; 0x80
	}
	if (muted) {
    144e:	792b      	ldrb	r3, [r5, #4]
    1450:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
    1454:	2b00      	cmp	r3, #0
    1456:	d0f1      	beq.n	143c <AudioControlSGTL5000::volumeInteger(unsigned int)+0x10>
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    1458:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    145a:	2300      	movs	r3, #0
    145c:	2124      	movs	r1, #36	; 0x24
    145e:	4628      	mov	r0, r5
    1460:	f022 0210 	bic.w	r2, r2, #16
    1464:	712b      	strb	r3, [r5, #4]
    1466:	f7ff fedd 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    146a:	4622      	mov	r2, r4
    146c:	4628      	mov	r0, r5
    146e:	2122      	movs	r1, #34	; 0x22
}
    1470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1474:	f7ff bed6 	b.w	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    1478:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    147a:	f647 727f 	movw	r2, #32639	; 0x7f7f
    147e:	2122      	movs	r1, #34	; 0x22
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    1480:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    1482:	f7ff fecf 	bl	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    1486:	88ea      	ldrh	r2, [r5, #6]
    1488:	4628      	mov	r0, r5
    148a:	2124      	movs	r1, #36	; 0x24
    148c:	f042 0210 	orr.w	r2, r2, #16
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    1490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1494:	b292      	uxth	r2, r2
    1496:	f7ff bec5 	b.w	1224 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    149a:	bf00      	nop
    149c:	0000      	movs	r0, r0
	...

000014a0 <AudioControlSGTL5000::volume(float)>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
    14a0:	eddf 7a09 	vldr	s15, [pc, #36]	; 14c8 <AudioControlSGTL5000::volume(float)+0x28>
    14a4:	ee20 0a27 	vmul.f32	s0, s0, s15
    14a8:	ed9f 7b05 	vldr	d7, [pc, #20]	; 14c0 <AudioControlSGTL5000::volume(float)+0x20>
    14ac:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    14b0:	ee30 0b07 	vadd.f64	d0, d0, d7
    14b4:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    14b8:	ee17 1a90 	vmov	r1, s15
    14bc:	f7ff bfb6 	b.w	142c <AudioControlSGTL5000::volumeInteger(unsigned int)>
    14c0:	b22d0e56 	.word	0xb22d0e56
    14c4:	3fdfef9d 	.word	0x3fdfef9d
    14c8:	43010000 	.word	0x43010000

000014cc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:

extern "C" void xbar_connect(unsigned int input, unsigned int output);

#define FILTERLEN 15

DMAChannel AudioInputAnalog::dma(false);
    14cc:	4a02      	ldr	r2, [pc, #8]	; (14d8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    14ce:	4903      	ldr	r1, [pc, #12]	; (14dc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    14d0:	4803      	ldr	r0, [pc, #12]	; (14e0 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    14d2:	f004 be97 	b.w	6204 <__aeabi_atexit>
    14d6:	bf00      	nop
    14d8:	20004d0c 	.word	0x20004d0c
    14dc:	000011f9 	.word	0x000011f9
    14e0:	20006f1c 	.word	0x20006f1c

000014e4 <AudioInputI2S::isr()>:
	const int16_t *src, *end;
	int16_t *dest_left, *dest_right;
	audio_block_t *left, *right;

#if defined(KINETISK) || defined(__IMXRT1062__)
	daddr = (uint32_t)(dma.TCD->DADDR);
    14e4:	4b24      	ldr	r3, [pc, #144]	; (1578 <AudioInputI2S::isr()+0x94>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    14e6:	4925      	ldr	r1, [pc, #148]	; (157c <AudioInputI2S::isr()+0x98>)
    14e8:	681a      	ldr	r2, [r3, #0]
	dma.enable();
	dma.attachInterrupt(isr);
}

void AudioInputI2S::isr(void)
{
    14ea:	b4f0      	push	{r4, r5, r6, r7}
	const int16_t *src, *end;
	int16_t *dest_left, *dest_right;
	audio_block_t *left, *right;

#if defined(KINETISK) || defined(__IMXRT1062__)
	daddr = (uint32_t)(dma.TCD->DADDR);
    14ec:	6912      	ldr	r2, [r2, #16]
    14ee:	7918      	ldrb	r0, [r3, #4]
	dma.clearInterrupt();
	//Serial.println("isr");

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
    14f0:	4b23      	ldr	r3, [pc, #140]	; (1580 <AudioInputI2S::isr()+0x9c>)
    14f2:	77c8      	strb	r0, [r1, #31]
    14f4:	429a      	cmp	r2, r3
    14f6:	d209      	bcs.n	150c <AudioInputI2S::isr()+0x28>
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
    14f8:	4a22      	ldr	r2, [pc, #136]	; (1584 <AudioInputI2S::isr()+0xa0>)
    14fa:	7812      	ldrb	r2, [r2, #0]
    14fc:	2a00      	cmp	r2, #0
    14fe:	d037      	beq.n	1570 <AudioInputI2S::isr()+0x8c>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    1500:	4a21      	ldr	r2, [pc, #132]	; (1588 <AudioInputI2S::isr()+0xa4>)
    1502:	2140      	movs	r1, #64	; 0x40

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
    1504:	f503 7480 	add.w	r4, r3, #256	; 0x100
    1508:	6011      	str	r1, [r2, #0]
    150a:	e002      	b.n	1512 <AudioInputI2S::isr()+0x2e>
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
    150c:	461c      	mov	r4, r3
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
    150e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = AudioInputI2S::block_left;
    1512:	491e      	ldr	r1, [pc, #120]	; (158c <AudioInputI2S::isr()+0xa8>)
	right = AudioInputI2S::block_right;
    1514:	4a1e      	ldr	r2, [pc, #120]	; (1590 <AudioInputI2S::isr()+0xac>)
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = AudioInputI2S::block_left;
    1516:	6809      	ldr	r1, [r1, #0]
	right = AudioInputI2S::block_right;
    1518:	6816      	ldr	r6, [r2, #0]
	if (left != NULL && right != NULL) {
    151a:	b339      	cbz	r1, 156c <AudioInputI2S::isr()+0x88>
    151c:	b336      	cbz	r6, 156c <AudioInputI2S::isr()+0x88>
		offset = AudioInputI2S::block_offset;
    151e:	4f1d      	ldr	r7, [pc, #116]	; (1594 <AudioInputI2S::isr()+0xb0>)
    1520:	883a      	ldrh	r2, [r7, #0]
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
    1522:	2a40      	cmp	r2, #64	; 0x40
    1524:	d822      	bhi.n	156c <AudioInputI2S::isr()+0x88>
			dest_left = &(left->data[offset]);
    1526:	0050      	lsls	r0, r2, #1
			dest_right = &(right->data[offset]);
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    1528:	f102 0540 	add.w	r5, r2, #64	; 0x40
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    152c:	f023 021f 	bic.w	r2, r3, #31
	left = AudioInputI2S::block_left;
	right = AudioInputI2S::block_right;
	if (left != NULL && right != NULL) {
		offset = AudioInputI2S::block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			dest_left = &(left->data[offset]);
    1530:	4401      	add	r1, r0
			dest_right = &(right->data[offset]);
    1532:	4430      	add	r0, r6
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    1534:	803d      	strh	r5, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    1536:	f503 7680 	add.w	r6, r3, #256	; 0x100
	left = AudioInputI2S::block_left;
	right = AudioInputI2S::block_right;
	if (left != NULL && right != NULL) {
		offset = AudioInputI2S::block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			dest_left = &(left->data[offset]);
    153a:	3104      	adds	r1, #4
			dest_right = &(right->data[offset]);
    153c:	3004      	adds	r0, #4
	asm volatile("": : :"memory");
	asm("dsb");
    153e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    1542:	4d15      	ldr	r5, [pc, #84]	; (1598 <AudioInputI2S::isr()+0xb4>)
    1544:	602a      	str	r2, [r5, #0]
		location += 32;
    1546:	3220      	adds	r2, #32
	} while (location < end_addr);
    1548:	4296      	cmp	r6, r2
    154a:	d8fb      	bhi.n	1544 <AudioInputI2S::isr()+0x60>
	asm("dsb");
    154c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1550:	f3bf 8f6f 	isb	sy
    1554:	1e8a      	subs	r2, r1, #2
    1556:	1e81      	subs	r1, r0, #2
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			do {
				*dest_left++ = *src++;
    1558:	f933 0b04 	ldrsh.w	r0, [r3], #4
    155c:	f822 0f02 	strh.w	r0, [r2, #2]!
				*dest_right++ = *src++;
			} while (src < end);
    1560:	429c      	cmp	r4, r3
			dest_right = &(right->data[offset]);
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			do {
				*dest_left++ = *src++;
				*dest_right++ = *src++;
    1562:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
    1566:	f821 0f02 	strh.w	r0, [r1, #2]!
			} while (src < end);
    156a:	d8f5      	bhi.n	1558 <AudioInputI2S::isr()+0x74>
		}
	}
#endif
}
    156c:	bcf0      	pop	{r4, r5, r6, r7}
    156e:	4770      	bx	lr

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
    1570:	f503 7480 	add.w	r4, r3, #256	; 0x100
    1574:	e7cd      	b.n	1512 <AudioInputI2S::isr()+0x2e>
    1576:	bf00      	nop
    1578:	20006f2c 	.word	0x20006f2c
    157c:	400e8000 	.word	0x400e8000
    1580:	20200b40 	.word	0x20200b40
    1584:	20006f26 	.word	0x20006f26
    1588:	e000e208 	.word	0xe000e208
    158c:	20006f34 	.word	0x20006f34
    1590:	20006f28 	.word	0x20006f28
    1594:	20006f24 	.word	0x20006f24
    1598:	e000ef5c 	.word	0xe000ef5c

0000159c <AudioInputI2S::update()>:
}



void AudioInputI2S::update(void)
{
    159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    159e:	4606      	mov	r6, r0
	audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

	// allocate 2 new blocks, but if one fails, allocate neither
	new_left = allocate();
    15a0:	f003 fd08 	bl	4fb4 <AudioStream::allocate()>
	if (new_left != NULL) {
    15a4:	4604      	mov	r4, r0
    15a6:	b1e8      	cbz	r0, 15e4 <AudioInputI2S::update()+0x48>
		new_right = allocate();
    15a8:	f003 fd04 	bl	4fb4 <AudioStream::allocate()>
		if (new_right == NULL) {
    15ac:	4605      	mov	r5, r0
    15ae:	2800      	cmp	r0, #0
    15b0:	d03a      	beq.n	1628 <AudioInputI2S::update()+0x8c>
			release(new_left);
			new_left = NULL;
		}
	}
	__disable_irq();
    15b2:	b672      	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    15b4:	4b1f      	ldr	r3, [pc, #124]	; (1634 <AudioInputI2S::update()+0x98>)
    15b6:	881a      	ldrh	r2, [r3, #0]
    15b8:	2a7f      	cmp	r2, #127	; 0x7f
    15ba:	d819      	bhi.n	15f0 <AudioInputI2S::update()+0x54>
		transmit(out_left, 0);
		release(out_left);
		transmit(out_right, 1);
		release(out_right);
		//Serial.print(".");
	} else if (new_left != NULL) {
    15bc:	2c00      	cmp	r4, #0
    15be:	d031      	beq.n	1624 <AudioInputI2S::update()+0x88>
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
    15c0:	491d      	ldr	r1, [pc, #116]	; (1638 <AudioInputI2S::update()+0x9c>)
    15c2:	680a      	ldr	r2, [r1, #0]
    15c4:	b142      	cbz	r2, 15d8 <AudioInputI2S::update()+0x3c>
			block_right = new_right;
			block_offset = 0;
			__enable_irq();
		} else {
			// the DMA already has blocks, doesn't need these
			__enable_irq();
    15c6:	b662      	cpsie	i
			release(new_left);
    15c8:	4620      	mov	r0, r4
    15ca:	f003 fd47 	bl	505c <AudioStream::release(audio_block_struct*)>
			release(new_right);
    15ce:	4628      	mov	r0, r5
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    15d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			__enable_irq();
		} else {
			// the DMA already has blocks, doesn't need these
			__enable_irq();
			release(new_left);
			release(new_right);
    15d4:	f003 bd42 	b.w	505c <AudioStream::release(audio_block_struct*)>
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_left = new_left;
			block_right = new_right;
    15d8:	4818      	ldr	r0, [pc, #96]	; (163c <AudioInputI2S::update()+0xa0>)
	} else if (new_left != NULL) {
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_left = new_left;
    15da:	600c      	str	r4, [r1, #0]
			block_right = new_right;
			block_offset = 0;
    15dc:	801a      	strh	r2, [r3, #0]
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_left = new_left;
			block_right = new_right;
    15de:	6005      	str	r5, [r0, #0]
			block_offset = 0;
			__enable_irq();
    15e0:	b662      	cpsie	i
    15e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}



void AudioInputI2S::update(void)
{
	audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
    15e4:	4605      	mov	r5, r0
		if (new_right == NULL) {
			release(new_left);
			new_left = NULL;
		}
	}
	__disable_irq();
    15e6:	b672      	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    15e8:	4b12      	ldr	r3, [pc, #72]	; (1634 <AudioInputI2S::update()+0x98>)
    15ea:	881a      	ldrh	r2, [r3, #0]
    15ec:	2a7f      	cmp	r2, #127	; 0x7f
    15ee:	d9e5      	bls.n	15bc <AudioInputI2S::update()+0x20>
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
    15f0:	4811      	ldr	r0, [pc, #68]	; (1638 <AudioInputI2S::update()+0x9c>)
		block_left = new_left;
		out_right = block_right;
		block_right = new_right;
		block_offset = 0;
    15f2:	2200      	movs	r2, #0
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
		block_left = new_left;
		out_right = block_right;
    15f4:	4911      	ldr	r1, [pc, #68]	; (163c <AudioInputI2S::update()+0xa0>)
	}
	__disable_irq();
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
    15f6:	6807      	ldr	r7, [r0, #0]
		block_left = new_left;
		out_right = block_right;
		block_right = new_right;
		block_offset = 0;
    15f8:	801a      	strh	r2, [r3, #0]
	__disable_irq();
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
		block_left = new_left;
    15fa:	6004      	str	r4, [r0, #0]
		out_right = block_right;
    15fc:	680c      	ldr	r4, [r1, #0]
		block_right = new_right;
    15fe:	600d      	str	r5, [r1, #0]
		block_offset = 0;
		__enable_irq();
    1600:	b662      	cpsie	i
		// then transmit the DMA's former blocks
		transmit(out_left, 0);
    1602:	4639      	mov	r1, r7
    1604:	4630      	mov	r0, r6
    1606:	f003 fd53 	bl	50b0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out_left);
    160a:	4638      	mov	r0, r7
    160c:	f003 fd26 	bl	505c <AudioStream::release(audio_block_struct*)>
		transmit(out_right, 1);
    1610:	4630      	mov	r0, r6
    1612:	4621      	mov	r1, r4
    1614:	2201      	movs	r2, #1
    1616:	f003 fd4b 	bl	50b0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out_right);
    161a:	4620      	mov	r0, r4
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    161c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		__enable_irq();
		// then transmit the DMA's former blocks
		transmit(out_left, 0);
		release(out_left);
		transmit(out_right, 1);
		release(out_right);
    1620:	f003 bd1c 	b.w	505c <AudioStream::release(audio_block_struct*)>
		}
	} else {
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
    1624:	b662      	cpsie	i
    1626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// allocate 2 new blocks, but if one fails, allocate neither
	new_left = allocate();
	if (new_left != NULL) {
		new_right = allocate();
		if (new_right == NULL) {
			release(new_left);
    1628:	4620      	mov	r0, r4
			new_left = NULL;
    162a:	462c      	mov	r4, r5
	// allocate 2 new blocks, but if one fails, allocate neither
	new_left = allocate();
	if (new_left != NULL) {
		new_right = allocate();
		if (new_right == NULL) {
			release(new_left);
    162c:	f003 fd16 	bl	505c <AudioStream::release(audio_block_struct*)>
    1630:	e7bf      	b.n	15b2 <AudioInputI2S::update()+0x16>
    1632:	bf00      	nop
    1634:	20006f24 	.word	0x20006f24
    1638:	20006f34 	.word	0x20006f34
    163c:	20006f28 	.word	0x20006f28

00001640 <AudioInputI2S::begin()>:
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);


void AudioInputI2S::begin(void)
{
    1640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    1642:	4c23      	ldr	r4, [pc, #140]	; (16d0 <AudioInputI2S::begin()+0x90>)
    1644:	2101      	movs	r1, #1

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
    1646:	4e23      	ldr	r6, [pc, #140]	; (16d4 <AudioInputI2S::begin()+0x94>)
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    1648:	f44f 7580 	mov.w	r5, #256	; 0x100
DMAChannel AudioInputI2S::dma(false);


void AudioInputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    164c:	4620      	mov	r0, r4
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    164e:	f240 1701 	movw	r7, #257	; 0x101
DMAChannel AudioInputI2S::dma(false);


void AudioInputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    1652:	f003 fe07 	bl	5264 <DMAChannel::begin(bool)>

	//block_left_1st = NULL;
	//block_right_1st = NULL;

	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2S::config_i2s();
    1656:	f000 f931 	bl	18bc <AudioOutputI2S::config_i2s()>
	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    165a:	2102      	movs	r1, #2

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
    165c:	4a1e      	ldr	r2, [pc, #120]	; (16d8 <AudioInputI2S::begin()+0x98>)
    165e:	2003      	movs	r0, #3
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    1660:	4b1e      	ldr	r3, [pc, #120]	; (16dc <AudioInputI2S::begin()+0x9c>)
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1662:	f04f 0e06 	mov.w	lr, #6

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
    1666:	f8c2 017c 	str.w	r0, [r2, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
    166a:	2200      	movs	r2, #0
	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    166c:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
    1670:	6823      	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    1672:	481b      	ldr	r0, [pc, #108]	; (16e0 <AudioInputI2S::begin()+0xa0>)

#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
    1674:	601e      	str	r6, [r3, #0]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    1676:	4e1b      	ldr	r6, [pc, #108]	; (16e4 <AudioInputI2S::begin()+0xa4>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    1678:	6118      	str	r0, [r3, #16]
#elif defined(__IMXRT1062__)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
    167a:	809a      	strh	r2, [r3, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    167c:	82dd      	strh	r5, [r3, #22]
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    167e:	6099      	str	r1, [r3, #8]
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    1680:	83dd      	strh	r5, [r3, #30]
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
    1682:	8299      	strh	r1, [r3, #20]
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    1684:	80df      	strh	r7, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    1686:	619e      	str	r6, [r3, #24]

	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
    1688:	60da      	str	r2, [r3, #12]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    168a:	7920      	ldrb	r0, [r4, #4]
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    168c:	f8a3 e01c 	strh.w	lr, [r3, #28]
    1690:	4915      	ldr	r1, [pc, #84]	; (16e8 <AudioInputI2S::begin()+0xa8>)
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_RX);

	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    1692:	4b16      	ldr	r3, [pc, #88]	; (16ec <AudioInputI2S::begin()+0xac>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    1694:	4f16      	ldr	r7, [pc, #88]	; (16f0 <AudioInputI2S::begin()+0xb0>)
    1696:	4e17      	ldr	r6, [pc, #92]	; (16f4 <AudioInputI2S::begin()+0xb4>)

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    1698:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    169c:	f841 7020 	str.w	r7, [r1, r0, lsl #2]
    16a0:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
#endif
	update_responsibility = update_setup();
    16a4:	f003 fdbe 	bl	5224 <AudioStream::update_setup()>
    16a8:	7923      	ldrb	r3, [r4, #4]
    16aa:	4913      	ldr	r1, [pc, #76]	; (16f8 <AudioInputI2S::begin()+0xb8>)
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    16ac:	2201      	movs	r2, #1
    16ae:	f003 051f 	and.w	r5, r3, #31
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    16b2:	4f12      	ldr	r7, [pc, #72]	; (16fc <AudioInputI2S::begin()+0xbc>)
    16b4:	7008      	strb	r0, [r1, #0]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    16b6:	f103 0610 	add.w	r6, r3, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    16ba:	40aa      	lsls	r2, r5
    16bc:	115c      	asrs	r4, r3, #5

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    16be:	4d10      	ldr	r5, [pc, #64]	; (1700 <AudioInputI2S::begin()+0xc0>)
    16c0:	4810      	ldr	r0, [pc, #64]	; (1704 <AudioInputI2S::begin()+0xc4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    16c2:	4911      	ldr	r1, [pc, #68]	; (1708 <AudioInputI2S::begin()+0xc8>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    16c4:	76fb      	strb	r3, [r7, #27]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    16c6:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    16ca:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    16ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16d0:	20006f2c 	.word	0x20006f2c
    16d4:	403840a2 	.word	0x403840a2
    16d8:	401f8000 	.word	0x401f8000
    16dc:	401f8400 	.word	0x401f8400
    16e0:	20200a40 	.word	0x20200a40
    16e4:	fffffe00 	.word	0xfffffe00
    16e8:	400ec000 	.word	0x400ec000
    16ec:	92000001 	.word	0x92000001
    16f0:	80000013 	.word	0x80000013
    16f4:	40384000 	.word	0x40384000
    16f8:	20006f26 	.word	0x20006f26
    16fc:	400e8000 	.word	0x400e8000
    1700:	20007800 	.word	0x20007800
    1704:	000014e5 	.word	0x000014e5
    1708:	e000e100 	.word	0xe000e100

0000170c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    170c:	4a02      	ldr	r2, [pc, #8]	; (1718 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    170e:	4903      	ldr	r1, [pc, #12]	; (171c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1710:	4803      	ldr	r0, [pc, #12]	; (1720 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    1712:	f004 bd77 	b.w	6204 <__aeabi_atexit>
    1716:	bf00      	nop
    1718:	20004d0c 	.word	0x20004d0c
    171c:	000011f9 	.word	0x000011f9
    1720:	20006f2c 	.word	0x20006f2c

00001724 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    1724:	4a02      	ldr	r2, [pc, #8]	; (1730 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    1726:	4903      	ldr	r1, [pc, #12]	; (1734 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    1728:	4803      	ldr	r0, [pc, #12]	; (1738 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    172a:	f004 bd6b 	b.w	6204 <__aeabi_atexit>
    172e:	bf00      	nop
    1730:	20004d0c 	.word	0x20004d0c
    1734:	000011f9 	.word	0x000011f9
    1738:	20006f38 	.word	0x20006f38

0000173c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    173c:	4a02      	ldr	r2, [pc, #8]	; (1748 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    173e:	4903      	ldr	r1, [pc, #12]	; (174c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    1740:	4803      	ldr	r0, [pc, #12]	; (1750 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    1742:	f004 bd5f 	b.w	6204 <__aeabi_atexit>
    1746:	bf00      	nop
    1748:	20004d0c 	.word	0x20004d0c
    174c:	000011f9 	.word	0x000011f9
    1750:	20006f40 	.word	0x20006f40

00001754 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    1754:	4a02      	ldr	r2, [pc, #8]	; (1760 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    1756:	4903      	ldr	r1, [pc, #12]	; (1764 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    1758:	4803      	ldr	r0, [pc, #12]	; (1768 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    175a:	f004 bd53 	b.w	6204 <__aeabi_atexit>
    175e:	bf00      	nop
    1760:	20004d0c 	.word	0x20004d0c
    1764:	000011f9 	.word	0x000011f9
    1768:	20006f48 	.word	0x20006f48

0000176c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    176c:	4a02      	ldr	r2, [pc, #8]	; (1778 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    176e:	4903      	ldr	r1, [pc, #12]	; (177c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    1770:	4803      	ldr	r0, [pc, #12]	; (1780 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    1772:	f004 bd47 	b.w	6204 <__aeabi_atexit>
    1776:	bf00      	nop
    1778:	20004d0c 	.word	0x20004d0c
    177c:	000011f9 	.word	0x000011f9
    1780:	20006f50 	.word	0x20006f50

00001784 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    1784:	4a02      	ldr	r2, [pc, #8]	; (1790 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    1786:	4903      	ldr	r1, [pc, #12]	; (1794 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    1788:	4803      	ldr	r0, [pc, #12]	; (1798 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    178a:	f004 bd3b 	b.w	6204 <__aeabi_atexit>
    178e:	bf00      	nop
    1790:	20004d0c 	.word	0x20004d0c
    1794:	000011f9 	.word	0x000011f9
    1798:	20006f58 	.word	0x20006f58

0000179c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    179c:	4a02      	ldr	r2, [pc, #8]	; (17a8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    179e:	4903      	ldr	r1, [pc, #12]	; (17ac <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    17a0:	4803      	ldr	r0, [pc, #12]	; (17b0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    17a2:	f004 bd2f 	b.w	6204 <__aeabi_atexit>
    17a6:	bf00      	nop
    17a8:	20004d0c 	.word	0x20004d0c
    17ac:	000011f9 	.word	0x000011f9
    17b0:	20006f60 	.word	0x20006f60

000017b4 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    17b4:	4a02      	ldr	r2, [pc, #8]	; (17c0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    17b6:	4903      	ldr	r1, [pc, #12]	; (17c4 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    17b8:	4803      	ldr	r0, [pc, #12]	; (17c8 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    17ba:	f004 bd23 	b.w	6204 <__aeabi_atexit>
    17be:	bf00      	nop
    17c0:	20004d0c 	.word	0x20004d0c
    17c4:	000011f9 	.word	0x000011f9
    17c8:	20006f68 	.word	0x20006f68

000017cc <AudioMixer4::update()>:
}

#endif

void AudioMixer4::update(void)
{
    17cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    17d0:	f04f 0800 	mov.w	r8, #0
}

#endif

void AudioMixer4::update(void)
{
    17d4:	4606      	mov	r6, r0
    17d6:	f100 0518 	add.w	r5, r0, #24
	audio_block_t *in, *out=NULL;
    17da:	4647      	mov	r7, r8
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
    17dc:	4641      	mov	r1, r8
    17de:	4630      	mov	r0, r6
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
    17e0:	2f00      	cmp	r7, #0
    17e2:	d04d      	beq.n	1880 <AudioMixer4::update()+0xb4>
			if (out) {
				int32_t mult = multiplier[channel];
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
    17e4:	f003 fc7e 	bl	50e4 <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
    17e8:	b1e8      	cbz	r0, 1826 <AudioMixer4::update()+0x5a>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    17ea:	682c      	ldr	r4, [r5, #0]
    17ec:	1d39      	adds	r1, r7, #4
    17ee:	f100 0e04 	add.w	lr, r0, #4

static void applyGainThenAdd(int16_t *data, const int16_t *in, int32_t mult)
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    17f2:	f507 7c82 	add.w	ip, r7, #260	; 0x104

	if (mult == MULTI_UNITYGAIN) {
    17f6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    17fa:	d026      	beq.n	184a <AudioMixer4::update()+0x7e>
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
	} else {
		do {
			uint32_t tmp32 = *src++; // read 2 samples from *data
    17fc:	f85e 2b04 	ldr.w	r2, [lr], #4
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1800:	fb34 f302 	smulwb	r3, r4, r2
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1804:	fb34 f912 	smulwt	r9, r4, r2
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    1808:	f303 020f 	ssat	r2, #16, r3
    180c:	f309 030f 	ssat	r3, #16, r9
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    1810:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
			int32_t val1 = signed_multiply_32x16b(mult, tmp32);
			int32_t val2 = signed_multiply_32x16t(mult, tmp32);
			val1 = signed_saturate_rshift(val1, 16, 0);
			val2 = signed_saturate_rshift(val2, 16, 0);
			tmp32 = pack_16b_16b(val2, val1);
			uint32_t tmp32b = *dst;
    1814:	680a      	ldr	r2, [r1, #0]
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1816:	fa93 f312 	qadd16	r3, r3, r2
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
    181a:	f841 3b04 	str.w	r3, [r1], #4
		} while (dst < end);
    181e:	458c      	cmp	ip, r1
    1820:	d8ec      	bhi.n	17fc <AudioMixer4::update()+0x30>
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
    1822:	f003 fc1b 	bl	505c <AudioStream::release(audio_block_struct*)>
void AudioMixer4::update(void)
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    1826:	f108 0801 	add.w	r8, r8, #1
    182a:	3504      	adds	r5, #4
    182c:	f1b8 0f04 	cmp.w	r8, #4
    1830:	d1d4      	bne.n	17dc <AudioMixer4::update()+0x10>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
			}
		}
	}
	if (out) {
    1832:	2f00      	cmp	r7, #0
    1834:	d040      	beq.n	18b8 <AudioMixer4::update()+0xec>
		transmit(out);
    1836:	4630      	mov	r0, r6
    1838:	4639      	mov	r1, r7
    183a:	2200      	movs	r2, #0
    183c:	f003 fc38 	bl	50b0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
    1840:	4638      	mov	r0, r7
	}
}
    1842:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			}
		}
	}
	if (out) {
		transmit(out);
		release(out);
    1846:	f003 bc09 	b.w	505c <AudioStream::release(audio_block_struct*)>
    184a:	f107 010c 	add.w	r1, r7, #12
    184e:	f100 040c 	add.w	r4, r0, #12
    1852:	f851 3c08 	ldr.w	r3, [r1, #-8]
    1856:	f854 2c08 	ldr.w	r2, [r4, #-8]
    185a:	fa93 f312 	qadd16	r3, r3, r2
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    185e:	f841 3c08 	str.w	r3, [r1, #-8]
    1862:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1866:	f854 2c04 	ldr.w	r2, [r4, #-4]
    186a:	fa93 f312 	qadd16	r3, r3, r2
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
    186e:	458c      	cmp	ip, r1
	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    1870:	f841 3c04 	str.w	r3, [r1, #-4]
    1874:	f104 0408 	add.w	r4, r4, #8
		} while (dst < end);
    1878:	f101 0108 	add.w	r1, r1, #8
    187c:	d8e9      	bhi.n	1852 <AudioMixer4::update()+0x86>
    187e:	e7d0      	b.n	1822 <AudioMixer4::update()+0x56>
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
    1880:	f003 fc3c 	bl	50fc <AudioStream::receiveWritable(unsigned int)>
			if (out) {
    1884:	4607      	mov	r7, r0
    1886:	2800      	cmp	r0, #0
    1888:	d0cd      	beq.n	1826 <AudioMixer4::update()+0x5a>
				int32_t mult = multiplier[channel];
    188a:	6828      	ldr	r0, [r5, #0]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
    188c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    1890:	d0c9      	beq.n	1826 <AudioMixer4::update()+0x5a>
    1892:	1d39      	adds	r1, r7, #4
#define MULTI_UNITYGAIN 65536

static void applyGain(int16_t *data, int32_t mult)
{
	uint32_t *p = (uint32_t *)data;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    1894:	f507 7482 	add.w	r4, r7, #260	; 0x104

	do {
		uint32_t tmp32 = *p; // read 2 samples from *data
    1898:	680b      	ldr	r3, [r1, #0]
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    189a:	fb30 f203 	smulwb	r2, r0, r3
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    189e:	fb30 f313 	smulwt	r3, r0, r3
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    18a2:	f302 020f 	ssat	r2, #16, r2
    18a6:	f303 030f 	ssat	r3, #16, r3
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    18aa:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
		int32_t val1 = signed_multiply_32x16b(mult, tmp32);
		int32_t val2 = signed_multiply_32x16t(mult, tmp32);
		val1 = signed_saturate_rshift(val1, 16, 0);
		val2 = signed_saturate_rshift(val2, 16, 0);
		*p++ = pack_16b_16b(val2, val1);
    18ae:	f841 3b04 	str.w	r3, [r1], #4
	} while (p < end);
    18b2:	428c      	cmp	r4, r1
    18b4:	d8f0      	bhi.n	1898 <AudioMixer4::update()+0xcc>
    18b6:	e7b6      	b.n	1826 <AudioMixer4::update()+0x5a>
    18b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000018bc <AudioOutputI2S::config_i2s()>:
#endif
#endif


void AudioOutputI2S::config_i2s(void)
{
    18bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    18be:	4d28      	ldr	r5, [pc, #160]	; (1960 <AudioOutputI2S::config_i2s()+0xa4>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
    18c0:	4c28      	ldr	r4, [pc, #160]	; (1964 <AudioOutputI2S::config_i2s()+0xa8>)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    18c2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    18c4:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    18c8:	67eb      	str	r3, [r5, #124]	; 0x7c

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
    18ca:	68a3      	ldr	r3, [r4, #8]
    18cc:	2b00      	cmp	r3, #0
    18ce:	db45      	blt.n	195c <AudioOutputI2S::config_i2s()+0xa0>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
    18d0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    18d4:	2b00      	cmp	r3, #0
    18d6:	db41      	blt.n	195c <AudioOutputI2S::config_i2s()+0xa0>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
    18d8:	2300      	movs	r3, #0
    18da:	f242 7210 	movw	r2, #10000	; 0x2710
    18de:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
    18e2:	201c      	movs	r0, #28
    18e4:	f005 f974 	bl	6bd0 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    18e8:	69e9      	ldr	r1, [r5, #28]
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    18ea:	4a1f      	ldr	r2, [pc, #124]	; (1968 <AudioOutputI2S::config_i2s()+0xac>)
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    18ec:	2603      	movs	r6, #3
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    18ee:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    18f2:	f8df e090 	ldr.w	lr, [pc, #144]	; 1984 <AudioOutputI2S::config_i2s()+0xc8>
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    18f6:	4b1d      	ldr	r3, [pc, #116]	; (196c <AudioOutputI2S::config_i2s()+0xb0>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    18f8:	2700      	movs	r7, #0
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    18fa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    18fe:	481c      	ldr	r0, [pc, #112]	; (1970 <AudioOutputI2S::config_i2s()+0xb4>)
	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    1900:	f04f 0c01 	mov.w	ip, #1
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    1904:	61e9      	str	r1, [r5, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    1906:	6aa9      	ldr	r1, [r5, #40]	; 0x28
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    1908:	400a      	ands	r2, r1
	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
    190a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    190e:	f042 02ce 	orr.w	r2, r2, #206	; 0xce
    1912:	62aa      	str	r2, [r5, #40]	; 0x28

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    1914:	f8de 2004 	ldr.w	r2, [lr, #4]

	I2S1_TMR = 0;
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
    1918:	4d16      	ldr	r5, [pc, #88]	; (1974 <AudioOutputI2S::config_i2s()+0xb8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    191a:	4013      	ands	r3, r2
	I2S1_TCR1 = I2S_TCR1_RFW(1);
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
    191c:	4a16      	ldr	r2, [pc, #88]	; (1978 <AudioOutputI2S::config_i2s()+0xbc>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    191e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1922:	f8ce 3004 	str.w	r3, [lr, #4]

	CORE_PIN23_CONFIG = 3;  //1:MCLK
    1926:	f8c0 6120 	str.w	r6, [r0, #288]	; 0x120
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    192a:	4b14      	ldr	r3, [pc, #80]	; (197c <AudioOutputI2S::config_i2s()+0xc0>)
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

	CORE_PIN23_CONFIG = 3;  //1:MCLK
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    192c:	f8c0 6128 	str.w	r6, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
    1930:	f8c0 6124 	str.w	r6, [r0, #292]	; 0x124

	I2S1_RMR = 0;
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    1934:	4812      	ldr	r0, [pc, #72]	; (1980 <AudioOutputI2S::config_i2s()+0xc4>)
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    1936:	6627      	str	r7, [r4, #96]	; 0x60
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    1938:	f8c4 c00c 	str.w	ip, [r4, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
    193c:	6125      	str	r5, [r4, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
    193e:	6161      	str	r1, [r4, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
    1940:	61a2      	str	r2, [r4, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    1942:	61e3      	str	r3, [r4, #28]

	I2S1_RMR = 0;
    1944:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
    1948:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    194c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	I2S1_RCR3 = I2S_RCR3_RCE;
    1950:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    1954:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
    1958:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    195e:	bf00      	nop
    1960:	400fc000 	.word	0x400fc000
    1964:	40384000 	.word	0x40384000
    1968:	fffffe00 	.word	0xfffffe00
    196c:	fff7fff8 	.word	0xfff7fff8
    1970:	401f8000 	.word	0x401f8000
    1974:	47000001 	.word	0x47000001
    1978:	00011f1b 	.word	0x00011f1b
    197c:	1f1f1f00 	.word	0x1f1f1f00
    1980:	07000001 	.word	0x07000001
    1984:	400ac000 	.word	0x400ac000

00001988 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    1988:	4a02      	ldr	r2, [pc, #8]	; (1994 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    198a:	4903      	ldr	r1, [pc, #12]	; (1998 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    198c:	4803      	ldr	r0, [pc, #12]	; (199c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    198e:	f004 bc39 	b.w	6204 <__aeabi_atexit>
    1992:	bf00      	nop
    1994:	20004d0c 	.word	0x20004d0c
    1998:	000011f9 	.word	0x000011f9
    199c:	20006f70 	.word	0x20006f70

000019a0 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    19a0:	4a02      	ldr	r2, [pc, #8]	; (19ac <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    19a2:	4903      	ldr	r1, [pc, #12]	; (19b0 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    19a4:	4803      	ldr	r0, [pc, #12]	; (19b4 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    19a6:	f004 bc2d 	b.w	6204 <__aeabi_atexit>
    19aa:	bf00      	nop
    19ac:	20004d0c 	.word	0x20004d0c
    19b0:	000011f9 	.word	0x000011f9
    19b4:	20006f78 	.word	0x20006f78

000019b8 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    19b8:	4a02      	ldr	r2, [pc, #8]	; (19c4 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    19ba:	4903      	ldr	r1, [pc, #12]	; (19c8 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    19bc:	4803      	ldr	r0, [pc, #12]	; (19cc <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    19be:	f004 bc21 	b.w	6204 <__aeabi_atexit>
    19c2:	bf00      	nop
    19c4:	20004d0c 	.word	0x20004d0c
    19c8:	000011f9 	.word	0x000011f9
    19cc:	20006f80 	.word	0x20006f80

000019d0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    19d0:	4a02      	ldr	r2, [pc, #8]	; (19dc <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    19d2:	4903      	ldr	r1, [pc, #12]	; (19e0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    19d4:	4803      	ldr	r0, [pc, #12]	; (19e4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    19d6:	f004 bc15 	b.w	6204 <__aeabi_atexit>
    19da:	bf00      	nop
    19dc:	20004d0c 	.word	0x20004d0c
    19e0:	000011f9 	.word	0x000011f9
    19e4:	20006f88 	.word	0x20006f88

000019e8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    19e8:	4a02      	ldr	r2, [pc, #8]	; (19f4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    19ea:	4903      	ldr	r1, [pc, #12]	; (19f8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    19ec:	4803      	ldr	r0, [pc, #12]	; (19fc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    19ee:	f004 bc09 	b.w	6204 <__aeabi_atexit>
    19f2:	bf00      	nop
    19f4:	20004d0c 	.word	0x20004d0c
    19f8:	000011f9 	.word	0x000011f9
    19fc:	20006f90 	.word	0x20006f90

00001a00 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    1a00:	4a02      	ldr	r2, [pc, #8]	; (1a0c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    1a02:	4903      	ldr	r1, [pc, #12]	; (1a10 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    1a04:	4803      	ldr	r0, [pc, #12]	; (1a14 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    1a06:	f004 bbfd 	b.w	6204 <__aeabi_atexit>
    1a0a:	bf00      	nop
    1a0c:	20004d0c 	.word	0x20004d0c
    1a10:	000011f9 	.word	0x000011f9
    1a14:	20006f98 	.word	0x20006f98

00001a18 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    1a18:	4a02      	ldr	r2, [pc, #8]	; (1a24 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    1a1a:	4903      	ldr	r1, [pc, #12]	; (1a28 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    1a1c:	4803      	ldr	r0, [pc, #12]	; (1a2c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    1a1e:	f004 bbf1 	b.w	6204 <__aeabi_atexit>
    1a22:	bf00      	nop
    1a24:	20004d0c 	.word	0x20004d0c
    1a28:	000011f9 	.word	0x000011f9
    1a2c:	20006fa0 	.word	0x20006fa0

00001a30 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    1a30:	4a02      	ldr	r2, [pc, #8]	; (1a3c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    1a32:	4903      	ldr	r1, [pc, #12]	; (1a40 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    1a34:	4803      	ldr	r0, [pc, #12]	; (1a44 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    1a36:	f004 bbe5 	b.w	6204 <__aeabi_atexit>
    1a3a:	bf00      	nop
    1a3c:	20004d0c 	.word	0x20004d0c
    1a40:	000011f9 	.word	0x000011f9
    1a44:	20006fa8 	.word	0x20006fa8

00001a48 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    1a48:	4a02      	ldr	r2, [pc, #8]	; (1a54 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    1a4a:	4903      	ldr	r1, [pc, #12]	; (1a58 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    1a4c:	4803      	ldr	r0, [pc, #12]	; (1a5c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    1a4e:	f004 bbd9 	b.w	6204 <__aeabi_atexit>
    1a52:	bf00      	nop
    1a54:	20004d0c 	.word	0x20004d0c
    1a58:	000011f9 	.word	0x000011f9
    1a5c:	20006fb0 	.word	0x20006fb0

00001a60 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    1a60:	4a02      	ldr	r2, [pc, #8]	; (1a6c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    1a62:	4903      	ldr	r1, [pc, #12]	; (1a70 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    1a64:	4803      	ldr	r0, [pc, #12]	; (1a74 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    1a66:	f004 bbcd 	b.w	6204 <__aeabi_atexit>
    1a6a:	bf00      	nop
    1a6c:	20004d0c 	.word	0x20004d0c
    1a70:	000011f9 	.word	0x000011f9
    1a74:	20006fb8 	.word	0x20006fb8

00001a78 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    1a78:	4a02      	ldr	r2, [pc, #8]	; (1a84 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    1a7a:	4903      	ldr	r1, [pc, #12]	; (1a88 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    1a7c:	4803      	ldr	r0, [pc, #12]	; (1a8c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    1a7e:	f004 bbc1 	b.w	6204 <__aeabi_atexit>
    1a82:	bf00      	nop
    1a84:	20004d0c 	.word	0x20004d0c
    1a88:	000011f9 	.word	0x000011f9
    1a8c:	20006fc0 	.word	0x20006fc0

00001a90 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    1a90:	4a02      	ldr	r2, [pc, #8]	; (1a9c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    1a92:	4903      	ldr	r1, [pc, #12]	; (1aa0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    1a94:	4803      	ldr	r0, [pc, #12]	; (1aa4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    1a96:	f004 bbb5 	b.w	6204 <__aeabi_atexit>
    1a9a:	bf00      	nop
    1a9c:	20004d0c 	.word	0x20004d0c
    1aa0:	000011f9 	.word	0x000011f9
    1aa4:	20006fc8 	.word	0x20006fc8

00001aa8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    1aa8:	4a02      	ldr	r2, [pc, #8]	; (1ab4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    1aaa:	4903      	ldr	r1, [pc, #12]	; (1ab8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    1aac:	4803      	ldr	r0, [pc, #12]	; (1abc <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    1aae:	f004 bba9 	b.w	6204 <__aeabi_atexit>
    1ab2:	bf00      	nop
    1ab4:	20004d0c 	.word	0x20004d0c
    1ab8:	000011f9 	.word	0x000011f9
    1abc:	20006fd0 	.word	0x20006fd0

00001ac0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1ac0:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1ac2:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1ac4:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1ac6:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1ac8:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1aca:	d003      	beq.n	1ad4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1acc:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1ad0:	f003 bc32 	b.w	5338 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1ad4:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1ada:	4718      	bx	r3

00001adc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    1adc:	b470      	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1ade:	f240 2501 	movw	r5, #513	; 0x201
    1ae2:	6804      	ldr	r4, [r0, #0]
    1ae4:	6125      	str	r5, [r4, #16]

	while (count > 0) {
    1ae6:	b31b      	cbz	r3, 1b30 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    1ae8:	461e      	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1aea:	b1f1      	cbz	r1, 1b2a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    1aec:	780d      	ldrb	r5, [r1, #0]
    1aee:	3101      	adds	r1, #1
		count--; // how many bytes left to output.
    1af0:	3b01      	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1af2:	6665      	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1af4:	6f25      	ldr	r5, [r4, #112]	; 0x70
    1af6:	07ad      	lsls	r5, r5, #30
    1af8:	d406      	bmi.n	1b08 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1afa:	6f65      	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    1afc:	3e01      	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1afe:	b2ed      	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    1b00:	b112      	cbz	r2, 1b08 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    1b02:	7015      	strb	r5, [r2, #0]
    1b04:	3201      	adds	r2, #1
    1b06:	6804      	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    1b08:	6965      	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    1b0a:	07ed      	lsls	r5, r5, #31
    1b0c:	d5f2      	bpl.n	1af4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d1eb      	bne.n	1aea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    1b12:	b16e      	cbz	r6, 1b30 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1b14:	6801      	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1b16:	6f0b      	ldr	r3, [r1, #112]	; 0x70
    1b18:	079b      	lsls	r3, r3, #30
    1b1a:	d4fc      	bmi.n	1b16 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1b1c:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    1b1e:	b2db      	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    1b20:	b10a      	cbz	r2, 1b26 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    1b22:	7013      	strb	r3, [r2, #0]
    1b24:	3201      	adds	r2, #1
			count_read--;
    1b26:	3e01      	subs	r6, #1
    1b28:	e7f3      	b.n	1b12 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1b2a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    1b2e:	e7df      	b.n	1af0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    1b30:	bc70      	pop	{r4, r5, r6}
    1b32:	4770      	bx	lr

00001b34 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1b34:	b5f0      	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    1b36:	4c30      	ldr	r4, [pc, #192]	; (1bf8 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1b38:	4b30      	ldr	r3, [pc, #192]	; (1bfc <_spi_dma_rxISR0()+0xc8>)
    1b3a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    1b3c:	6c65      	ldr	r5, [r4, #68]	; 0x44
    1b3e:	7901      	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    1b40:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1b42:	77d9      	strb	r1, [r3, #31]
    1b44:	7929      	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1b46:	7719      	strb	r1, [r3, #28]
    1b48:	7901      	ldrb	r1, [r0, #4]
    1b4a:	7719      	strb	r1, [r3, #28]
    1b4c:	b1fa      	cbz	r2, 1b8e <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    1b4e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    1b52:	d218      	bcs.n	1b86 <_spi_dma_rxISR0()+0x52>
    1b54:	682b      	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    1b56:	b292      	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1b58:	8bd9      	ldrh	r1, [r3, #30]
    1b5a:	040e      	lsls	r6, r1, #16
    1b5c:	d43b      	bmi.n	1bd6 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    1b5e:	83da      	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1b60:	8bd9      	ldrh	r1, [r3, #30]
    1b62:	b289      	uxth	r1, r1
    1b64:	82d9      	strh	r1, [r3, #22]
    1b66:	6803      	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1b68:	8bd9      	ldrh	r1, [r3, #30]
    1b6a:	0409      	lsls	r1, r1, #16
    1b6c:	d42c      	bmi.n	1bc8 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1b6e:	83da      	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    1b70:	2100      	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1b72:	8bda      	ldrh	r2, [r3, #30]
    1b74:	b292      	uxth	r2, r2
    1b76:	82da      	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    1b78:	6421      	str	r1, [r4, #64]	; 0x40
    1b7a:	7902      	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1b7c:	4b1f      	ldr	r3, [pc, #124]	; (1bfc <_spi_dma_rxISR0()+0xc8>)
    1b7e:	76da      	strb	r2, [r3, #27]
    1b80:	792a      	ldrb	r2, [r5, #4]
    1b82:	76da      	strb	r2, [r3, #27]
    1b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    1b86:	4b1e      	ldr	r3, [pc, #120]	; (1c00 <_spi_dma_rxISR0()+0xcc>)
    1b88:	4413      	add	r3, r2
    1b8a:	6423      	str	r3, [r4, #64]	; 0x40
    1b8c:	e7f5      	b.n	1b7a <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1b8e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1b90:	250f      	movs	r5, #15
    1b92:	6823      	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1b94:	f240 3e01 	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1b98:	6801      	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    1b9a:	f44f 577c 	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1b9e:	659d      	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1ba0:	2603      	movs	r6, #3
		_dma_event_responder->triggerEvent();
    1ba2:	680d      	ldr	r5, [r1, #0]
    1ba4:	4917      	ldr	r1, [pc, #92]	; (1c04 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    1ba6:	61da      	str	r2, [r3, #28]
    1ba8:	428d      	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1baa:	f8c3 e010 	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1bae:	615f      	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1bb0:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    1bb4:	d117      	bne.n	1be6 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1bb6:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1bb8:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1bba:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1bbc:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1bbe:	d017      	beq.n	1bf0 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1bc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1bc4:	f003 bbb8 	b.w	5338 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1bc8:	8bd9      	ldrh	r1, [r3, #30]
    1bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1bce:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    1bd2:	430a      	orrs	r2, r1
    1bd4:	e7cb      	b.n	1b6e <_spi_dma_rxISR0()+0x3a>
    1bd6:	8bd9      	ldrh	r1, [r3, #30]
    1bd8:	f3c2 0608 	ubfx	r6, r2, #0, #9
    1bdc:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    1be0:	4331      	orrs	r1, r6
    1be2:	83d9      	strh	r1, [r3, #30]
    1be4:	e7bc      	b.n	1b60 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1be6:	462b      	mov	r3, r5
    1be8:	4611      	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1bea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1bee:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1bf0:	6883      	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1bf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1bf6:	4718      	bx	r3
    1bf8:	20004d14 	.word	0x20004d14
    1bfc:	400e8000 	.word	0x400e8000
    1c00:	ffff8001 	.word	0xffff8001
    1c04:	00001ac1 	.word	0x00001ac1

00001c08 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    1c08:	6843      	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    1c0a:	b5f0      	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1c0c:	e893 0082 	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1c10:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 1e10 <SPIClass::begin()+0x208>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1c14:	26b8      	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1c16:	680a      	ldr	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    1c18:	2502      	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1c1a:	4c75      	ldr	r4, [pc, #468]	; (1df0 <SPIClass::begin()+0x1e8>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1c1c:	ea22 0207 	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1c20:	4f74      	ldr	r7, [pc, #464]	; (1df4 <SPIClass::begin()+0x1ec>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1c22:	600a      	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1c24:	f8de 2018 	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1c28:	4014      	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1c2a:	4a73      	ldr	r2, [pc, #460]	; (1df8 <SPIClass::begin()+0x1f0>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1c2c:	4327      	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    1c2e:	240f      	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1c30:	f8ce 7018 	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1c34:	7c07      	ldrb	r7, [r0, #16]
    1c36:	441f      	add	r7, r3
    1c38:	7c3f      	ldrb	r7, [r7, #16]
    1c3a:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    1c3e:	68bf      	ldr	r7, [r7, #8]
    1c40:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    1c42:	7c47      	ldrb	r7, [r0, #17]
    1c44:	441f      	add	r7, r3
    1c46:	f897 7020 	ldrb.w	r7, [r7, #32]
    1c4a:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    1c4e:	68bf      	ldr	r7, [r7, #8]
    1c50:	603e      	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    1c52:	7c87      	ldrb	r7, [r0, #18]
    1c54:	441f      	add	r7, r3
    1c56:	f897 7030 	ldrb.w	r7, [r7, #48]	; 0x30
    1c5a:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    1c5e:	68bf      	ldr	r7, [r7, #8]
    1c60:	603e      	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    1c62:	680f      	ldr	r7, [r1, #0]
    1c64:	685e      	ldr	r6, [r3, #4]
    1c66:	433e      	orrs	r6, r7
    1c68:	600e      	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    1c6a:	7c01      	ldrb	r1, [r0, #16]
    1c6c:	185e      	adds	r6, r3, r1
    1c6e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1c72:	7c36      	ldrb	r6, [r6, #16]
    1c74:	694f      	ldr	r7, [r1, #20]
    1c76:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    1c7a:	6849      	ldr	r1, [r1, #4]
    1c7c:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    1c7e:	7c41      	ldrb	r1, [r0, #17]
    1c80:	185e      	adds	r6, r3, r1
    1c82:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1c86:	f896 6020 	ldrb.w	r6, [r6, #32]
    1c8a:	6a4f      	ldr	r7, [r1, #36]	; 0x24
    1c8c:	eb02 1106 	add.w	r1, r2, r6, lsl #4
    1c90:	6849      	ldr	r1, [r1, #4]
    1c92:	600f      	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1c94:	7c81      	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    1c96:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1c9a:	185e      	adds	r6, r3, r1
    1c9c:	eb03 0181 	add.w	r1, r3, r1, lsl #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    1ca0:	69df      	ldr	r7, [r3, #28]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1ca2:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
    1ca6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    1ca8:	eb02 1206 	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    1cac:	6ade      	ldr	r6, [r3, #44]	; 0x2c

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1cae:	6852      	ldr	r2, [r2, #4]
    1cb0:	6011      	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    1cb2:	7c81      	ldrb	r1, [r0, #18]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1cb4:	6802      	ldr	r2, [r0, #0]
    1cb6:	4419      	add	r1, r3
    1cb8:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
    1cbc:	f8ce 1000 	str.w	r1, [lr]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    1cc0:	7c01      	ldrb	r1, [r0, #16]
    1cc2:	4419      	add	r1, r3
    1cc4:	7e09      	ldrb	r1, [r1, #24]
    1cc6:	6039      	str	r1, [r7, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    1cc8:	7c41      	ldrb	r1, [r0, #17]
    1cca:	440b      	add	r3, r1
    1ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    1cd0:	6033      	str	r3, [r6, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    1cd2:	6115      	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    1cd4:	6594      	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1cd6:	7cc3      	ldrb	r3, [r0, #19]
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d029      	beq.n	1d30 <SPIClass::begin()+0x128>
			__disable_irq();
    1cdc:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1cde:	7cc3      	ldrb	r3, [r0, #19]
    1ce0:	07dc      	lsls	r4, r3, #31
    1ce2:	d506      	bpl.n	1cf2 <SPIClass::begin()+0xea>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1ce4:	4a45      	ldr	r2, [pc, #276]	; (1dfc <SPIClass::begin()+0x1f4>)
    1ce6:	6943      	ldr	r3, [r0, #20]
    1ce8:	6811      	ldr	r1, [r2, #0]
    1cea:	400b      	ands	r3, r1
    1cec:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1cee:	6013      	str	r3, [r2, #0]
    1cf0:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    1cf2:	0799      	lsls	r1, r3, #30
    1cf4:	d506      	bpl.n	1d04 <SPIClass::begin()+0xfc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1cf6:	4a42      	ldr	r2, [pc, #264]	; (1e00 <SPIClass::begin()+0x1f8>)
    1cf8:	6983      	ldr	r3, [r0, #24]
    1cfa:	6811      	ldr	r1, [r2, #0]
    1cfc:	400b      	ands	r3, r1
    1cfe:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1d00:	6013      	str	r3, [r2, #0]
    1d02:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    1d04:	075a      	lsls	r2, r3, #29
    1d06:	d506      	bpl.n	1d16 <SPIClass::begin()+0x10e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1d08:	4a3e      	ldr	r2, [pc, #248]	; (1e04 <SPIClass::begin()+0x1fc>)
    1d0a:	69c3      	ldr	r3, [r0, #28]
    1d0c:	6811      	ldr	r1, [r2, #0]
    1d0e:	400b      	ands	r3, r1
    1d10:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1d12:	6013      	str	r3, [r2, #0]
    1d14:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    1d16:	071f      	lsls	r7, r3, #28
    1d18:	d506      	bpl.n	1d28 <SPIClass::begin()+0x120>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1d1a:	4a3b      	ldr	r2, [pc, #236]	; (1e08 <SPIClass::begin()+0x200>)
    1d1c:	6a03      	ldr	r3, [r0, #32]
    1d1e:	6811      	ldr	r1, [r2, #0]
    1d20:	400b      	ands	r3, r1
    1d22:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1d24:	6013      	str	r3, [r2, #0]
    1d26:	7cc3      	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    1d28:	06de      	lsls	r6, r3, #27
    1d2a:	d44b      	bmi.n	1dc4 <SPIClass::begin()+0x1bc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1d2c:	b662      	cpsie	i
    1d2e:	6802      	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1d30:	4d36      	ldr	r5, [pc, #216]	; (1e0c <SPIClass::begin()+0x204>)
    1d32:	6883      	ldr	r3, [r0, #8]
    1d34:	42ab      	cmp	r3, r5
    1d36:	d04c      	beq.n	1dd2 <SPIClass::begin()+0x1ca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1d38:	4b35      	ldr	r3, [pc, #212]	; (1e10 <SPIClass::begin()+0x208>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    1d3a:	6085      	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    1d3c:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1d3e:	4c35      	ldr	r4, [pc, #212]	; (1e14 <SPIClass::begin()+0x20c>)
    1d40:	f3c3 1601 	ubfx	r6, r3, #4, #2
    1d44:	f3c3 6182 	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1d48:	4b33      	ldr	r3, [pc, #204]	; (1e18 <SPIClass::begin()+0x210>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1d4a:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    1d4e:	3101      	adds	r1, #1
    1d50:	fbb4 f1f1 	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1d54:	fba3 4301 	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    1d58:	0d1b      	lsrs	r3, r3, #20
    1d5a:	d129      	bne.n	1db0 <SPIClass::begin()+0x1a8>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1d5c:	60c3      	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    1d5e:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1d60:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    1d62:	2407      	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    1d64:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    1d66:	6116      	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1d68:	6255      	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    1d6a:	6413      	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    1d6c:	6614      	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1d6e:	6111      	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1d70:	7cc3      	ldrb	r3, [r0, #19]
    1d72:	b1e3      	cbz	r3, 1dae <SPIClass::begin()+0x1a6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1d74:	07dd      	lsls	r5, r3, #31
    1d76:	d503      	bpl.n	1d80 <SPIClass::begin()+0x178>
    1d78:	4b28      	ldr	r3, [pc, #160]	; (1e1c <SPIClass::begin()+0x214>)
    1d7a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    1d7c:	601a      	str	r2, [r3, #0]
    1d7e:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1d80:	079c      	lsls	r4, r3, #30
    1d82:	d503      	bpl.n	1d8c <SPIClass::begin()+0x184>
    1d84:	4b26      	ldr	r3, [pc, #152]	; (1e20 <SPIClass::begin()+0x218>)
    1d86:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1d88:	601a      	str	r2, [r3, #0]
    1d8a:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1d8c:	0759      	lsls	r1, r3, #29
    1d8e:	d503      	bpl.n	1d98 <SPIClass::begin()+0x190>
    1d90:	4b24      	ldr	r3, [pc, #144]	; (1e24 <SPIClass::begin()+0x21c>)
    1d92:	6b02      	ldr	r2, [r0, #48]	; 0x30
    1d94:	601a      	str	r2, [r3, #0]
    1d96:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1d98:	071a      	lsls	r2, r3, #28
    1d9a:	d503      	bpl.n	1da4 <SPIClass::begin()+0x19c>
    1d9c:	4b22      	ldr	r3, [pc, #136]	; (1e28 <SPIClass::begin()+0x220>)
    1d9e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1da0:	601a      	str	r2, [r3, #0]
    1da2:	7cc3      	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1da4:	06db      	lsls	r3, r3, #27
    1da6:	d502      	bpl.n	1dae <SPIClass::begin()+0x1a6>
    1da8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    1daa:	4b20      	ldr	r3, [pc, #128]	; (1e2c <SPIClass::begin()+0x224>)
    1dac:	601a      	str	r2, [r3, #0]
    1dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    1db0:	fbb1 f1f3 	udiv	r1, r1, r3
    1db4:	42a9      	cmp	r1, r5
    1db6:	bf88      	it	hi
    1db8:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    1dba:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1dbe:	d30a      	bcc.n	1dd6 <SPIClass::begin()+0x1ce>
    1dc0:	4b1b      	ldr	r3, [pc, #108]	; (1e30 <SPIClass::begin()+0x228>)
    1dc2:	e7cb      	b.n	1d5c <SPIClass::begin()+0x154>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1dc4:	4a1b      	ldr	r2, [pc, #108]	; (1e34 <SPIClass::begin()+0x22c>)
    1dc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1dc8:	6811      	ldr	r1, [r2, #0]
    1dca:	400b      	ands	r3, r1
    1dcc:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1dce:	6013      	str	r3, [r2, #0]
    1dd0:	e7ac      	b.n	1d2c <SPIClass::begin()+0x124>
    1dd2:	68c3      	ldr	r3, [r0, #12]
    1dd4:	e7c3      	b.n	1d5e <SPIClass::begin()+0x156>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    1dd6:	2b02      	cmp	r3, #2
    1dd8:	bf98      	it	ls
    1dda:	2300      	movls	r3, #0
    1ddc:	d9be      	bls.n	1d5c <SPIClass::begin()+0x154>
    1dde:	3b02      	subs	r3, #2
    1de0:	085c      	lsrs	r4, r3, #1
    1de2:	0421      	lsls	r1, r4, #16
    1de4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    1de8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    1dec:	430b      	orrs	r3, r1
    1dee:	e7b5      	b.n	1d5c <SPIClass::begin()+0x154>
    1df0:	e3ffffcf 	.word	0xe3ffffcf
    1df4:	08000010 	.word	0x08000010
    1df8:	200011e8 	.word	0x200011e8
    1dfc:	e000e180 	.word	0xe000e180
    1e00:	e000e184 	.word	0xe000e184
    1e04:	e000e188 	.word	0xe000e188
    1e08:	e000e18c 	.word	0xe000e18c
    1e0c:	003d0900 	.word	0x003d0900
    1e10:	400fc000 	.word	0x400fc000
    1e14:	20000030 	.word	0x20000030
    1e18:	431bde83 	.word	0x431bde83
    1e1c:	e000e100 	.word	0xe000e100
    1e20:	e000e104 	.word	0xe000e104
    1e24:	e000e108 	.word	0xe000e108
    1e28:	e000e10c 	.word	0xe000e10c
    1e2c:	e000e110 	.word	0xe000e110
    1e30:	007f7fff 	.word	0x007f7fff
    1e34:	e000e190 	.word	0xe000e190

00001e38 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    1e38:	b10b      	cbz	r3, 1e3e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    1e3a:	f7ff be4f 	b.w	1adc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    1e3e:	4770      	bx	lr

00001e40 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    1e40:	2000      	movs	r0, #0
    1e42:	4770      	bx	lr

00001e44 <Print::flush()>:
	virtual void flush()				{ }
    1e44:	4770      	bx	lr
    1e46:	bf00      	nop

00001e48 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    1e48:	4b06      	ldr	r3, [pc, #24]	; (1e64 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
    1e4a:	2200      	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1e4c:	2002      	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1e4e:	4906      	ldr	r1, [pc, #24]	; (1e68 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    1e50:	709a      	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1e52:	6058      	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1e54:	62d9      	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1e5e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    1e62:	4770      	bx	lr
    1e64:	20006fd8 	.word	0x20006fd8
    1e68:	200011b4 	.word	0x200011b4

00001e6c <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1e6c:	4b20      	ldr	r3, [pc, #128]	; (1ef0 <SDHC_CMD_Do(unsigned long)+0x84>)
    1e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1e70:	4619      	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    1e72:	b410      	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1e74:	f042 0280 	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1e78:	461c      	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1e7a:	631a      	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1e7c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    1e7e:	4b1c      	ldr	r3, [pc, #112]	; (1ef0 <SDHC_CMD_Do(unsigned long)+0x84>)
    1e80:	07d2      	lsls	r2, r2, #31
    1e82:	d4fb      	bmi.n	1e7c <SDHC_CMD_Do(unsigned long)+0x10>
    1e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1e86:	0792      	lsls	r2, r2, #30
    1e88:	d4f8      	bmi.n	1e7c <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    1e8a:	60d8      	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    1e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    1e90:	4618      	mov	r0, r3
    1e92:	e000      	b.n	1e96 <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    1e94:	b1aa      	cbz	r2, 1ec2 <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    1e96:	6b01      	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    1e98:	3a01      	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    1e9a:	4b16      	ldr	r3, [pc, #88]	; (1ef4 <SDHC_CMD_Do(unsigned long)+0x88>)
    1e9c:	4c14      	ldr	r4, [pc, #80]	; (1ef0 <SDHC_CMD_Do(unsigned long)+0x84>)
    1e9e:	400b      	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d0f7      	beq.n	1e94 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    1ea4:	b16a      	cbz	r2, 1ec2 <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    1ea6:	2b01      	cmp	r3, #1
    1ea8:	d10b      	bne.n	1ec2 <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    1eaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1eac:	f013 0f80 	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1eb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    1eb2:	d00f      	beq.n	1ed4 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1eb4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    1eb8:	2003      	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1eba:	6323      	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    1ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ec0:	4770      	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    1ec2:	4a0b      	ldr	r2, [pc, #44]	; (1ef0 <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    1ec4:	2001      	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    1ec6:	4b0c      	ldr	r3, [pc, #48]	; (1ef8 <SDHC_CMD_Do(unsigned long)+0x8c>)
    1ec8:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1eca:	430b      	orrs	r3, r1
    1ecc:	6313      	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    1ece:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ed2:	4770      	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    1ed4:	f413 3080 	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1ed8:	6b23      	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    1eda:	d004      	beq.n	1ee6 <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1edc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    1ee0:	2005      	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1ee2:	6323      	str	r3, [r4, #48]	; 0x30
    1ee4:	e7f3      	b.n	1ece <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    1ee6:	f043 0301 	orr.w	r3, r3, #1
    1eea:	6323      	str	r3, [r4, #48]	; 0x30
    1eec:	e7ef      	b.n	1ece <SDHC_CMD_Do(unsigned long)+0x62>
    1eee:	bf00      	nop
    1ef0:	402c0000 	.word	0x402c0000
    1ef4:	000e0001 	.word	0x000e0001
    1ef8:	000f0001 	.word	0x000f0001

00001efc <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    1efc:	b570      	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1efe:	4d0d      	ldr	r5, [pc, #52]	; (1f34 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    1f00:	2600      	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1f02:	480d      	ldr	r0, [pc, #52]	; (1f38 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    1f04:	f240 34e7 	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1f08:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1f0a:	f7ff ffaf 	bl	1e6c <SDHC_CMD_Do(unsigned long)>
    1f0e:	4603      	mov	r3, r0
    1f10:	e006      	b.n	1f20 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1f12:	b94b      	cbnz	r3, 1f28 <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1f14:	60ae      	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1f16:	f7ff ffa9 	bl	1e6c <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1f1a:	3c01      	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1f1c:	4603      	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1f1e:	d005      	beq.n	1f2c <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    1f20:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1f22:	4805      	ldr	r0, [pc, #20]	; (1f38 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1f24:	0752      	lsls	r2, r2, #29
    1f26:	d4f4      	bmi.n	1f12 <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    1f28:	4618      	mov	r0, r3
    1f2a:	bd70      	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1f2c:	2800      	cmp	r0, #0
    1f2e:	bf08      	it	eq
    1f30:	2005      	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    1f32:	bd70      	pop	{r4, r5, r6, pc}
    1f34:	402c0000 	.word	0x402c0000
    1f38:	0cdb0000 	.word	0x0cdb0000

00001f3c <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    1f3c:	4b38      	ldr	r3, [pc, #224]	; (2020 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    1f3e:	781a      	ldrb	r2, [r3, #0]
    1f40:	b10a      	cbz	r2, 1f46 <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    1f42:	2003      	movs	r0, #3
    1f44:	4770      	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    1f46:	b570      	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    1f48:	785b      	ldrb	r3, [r3, #1]
    1f4a:	4606      	mov	r6, r0
    1f4c:	b903      	cbnz	r3, 1f50 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    1f4e:	0249      	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    1f50:	4d34      	ldr	r5, [pc, #208]	; (2024 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    1f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    1f56:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    1f5a:	4833      	ldr	r0, [pc, #204]	; (2028 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    1f5c:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    1f5e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1f60:	f043 0310 	orr.w	r3, r3, #16
    1f64:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    1f66:	60a9      	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    1f68:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    1f6a:	f7ff ff7f 	bl	1e6c <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    1f6e:	2800      	cmp	r0, #0
    1f70:	d14d      	bne.n	200e <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    1f72:	462c      	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    1f74:	692b      	ldr	r3, [r5, #16]
    1f76:	f106 0240 	add.w	r2, r6, #64	; 0x40
    1f7a:	f506 7010 	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    1f7e:	4629      	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    1f80:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1f82:	4e28      	ldr	r6, [pc, #160]	; (2024 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    1f84:	f043 0520 	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    1f88:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    1f8c:	6325      	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    1f8e:	d13f      	bne.n	2010 <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    1f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f92:	051d      	lsls	r5, r3, #20
    1f94:	d5fc      	bpl.n	1f90 <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    1f96:	6a0b      	ldr	r3, [r1, #32]
    1f98:	3240      	adds	r2, #64	; 0x40
    1f9a:	f842 3c80 	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    1f9e:	6a0b      	ldr	r3, [r1, #32]
    1fa0:	f842 3c7c 	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    1fa4:	6a0b      	ldr	r3, [r1, #32]
    1fa6:	f842 3c78 	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    1faa:	6a0b      	ldr	r3, [r1, #32]
    1fac:	f842 3c74 	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    1fb0:	6a0b      	ldr	r3, [r1, #32]
    1fb2:	f842 3c70 	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    1fb6:	6a0b      	ldr	r3, [r1, #32]
    1fb8:	f842 3c6c 	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    1fbc:	6a0b      	ldr	r3, [r1, #32]
    1fbe:	f842 3c68 	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    1fc2:	6a0b      	ldr	r3, [r1, #32]
    1fc4:	f842 3c64 	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    1fc8:	6a0b      	ldr	r3, [r1, #32]
    1fca:	f842 3c60 	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    1fce:	6a0b      	ldr	r3, [r1, #32]
    1fd0:	f842 3c5c 	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    1fd4:	6a0b      	ldr	r3, [r1, #32]
    1fd6:	f842 3c58 	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    1fda:	6a0b      	ldr	r3, [r1, #32]
    1fdc:	f842 3c54 	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    1fe0:	6a0b      	ldr	r3, [r1, #32]
    1fe2:	f842 3c50 	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    1fe6:	6a0b      	ldr	r3, [r1, #32]
    1fe8:	f842 3c4c 	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    1fec:	6a0b      	ldr	r3, [r1, #32]
    1fee:	f842 3c48 	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    1ff2:	6a0b      	ldr	r3, [r1, #32]
    1ff4:	f842 3c44 	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    1ff8:	4282      	cmp	r2, r0
    1ffa:	d1c1      	bne.n	1f80 <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    1ffc:	2000      	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    1ffe:	4909      	ldr	r1, [pc, #36]	; (2024 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    2000:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2002:	4a08      	ldr	r2, [pc, #32]	; (2024 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    2004:	079b      	lsls	r3, r3, #30
    2006:	d5fb      	bpl.n	2000 <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    2008:	4b08      	ldr	r3, [pc, #32]	; (202c <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    200a:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    200c:	bd70      	pop	{r4, r5, r6, pc}
}
    200e:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    2010:	4a07      	ldr	r2, [pc, #28]	; (2030 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    2012:	431a      	orrs	r2, r3
    2014:	6332      	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    2016:	f7ff ff71 	bl	1efc <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    201a:	2001      	movs	r0, #1
    201c:	e7ef      	b.n	1ffe <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    201e:	bf00      	nop
    2020:	2000702c 	.word	0x2000702c
    2024:	402c0000 	.word	0x402c0000
    2028:	113a0010 	.word	0x113a0010
    202c:	01000022 	.word	0x01000022
    2030:	00700020 	.word	0x00700020

00002034 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    2034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    2036:	4b28      	ldr	r3, [pc, #160]	; (20d8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    2038:	781a      	ldrb	r2, [r3, #0]
    203a:	b10a      	cbz	r2, 2040 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    203c:	2003      	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    203e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    2040:	785b      	ldrb	r3, [r3, #1]
    2042:	4604      	mov	r4, r0
    2044:	b903      	cbnz	r3, 2048 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    2046:	0249      	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    2048:	4d24      	ldr	r5, [pc, #144]	; (20dc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    204a:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    204e:	4824      	ldr	r0, [pc, #144]	; (20e0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    2050:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    2052:	632b      	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    2054:	6cab      	ldr	r3, [r5, #72]	; 0x48
    2056:	f023 0310 	bic.w	r3, r3, #16
    205a:	64ab      	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    205c:	60a9      	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    205e:	606a      	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2060:	f7ff ff04 	bl	1e6c <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2064:	2800      	cmp	r0, #0
    2066:	d1ea      	bne.n	203e <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    2068:	462a      	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    206a:	692b      	ldr	r3, [r5, #16]
    206c:	f504 7700 	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    2070:	462e      	mov	r6, r5
    2072:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2074:	4919      	ldr	r1, [pc, #100]	; (20dc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    2076:	06d8      	lsls	r0, r3, #27
    2078:	d5fb      	bpl.n	2072 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    207a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    207c:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
    2080:	d119      	bne.n	20b6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    2082:	f104 0140 	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    2086:	f854 3b04 	ldr.w	r3, [r4], #4
    208a:	4d14      	ldr	r5, [pc, #80]	; (20dc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    208c:	42a1      	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    208e:	6213      	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    2090:	d1f9      	bne.n	2086 <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    2092:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2094:	f043 0310 	orr.w	r3, r3, #16
    2098:	6333      	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    209a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    209c:	f413 00e0 	ands.w	r0, r3, #7340032	; 0x700000
    20a0:	d111      	bne.n	20c6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    20a2:	428f      	cmp	r7, r1
    20a4:	d1e5      	bne.n	2072 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    20a6:	490d      	ldr	r1, [pc, #52]	; (20dc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    20a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    20aa:	4a0c      	ldr	r2, [pc, #48]	; (20dc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    20ac:	079b      	lsls	r3, r3, #30
    20ae:	d5fb      	bpl.n	20a8 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    20b0:	4b0c      	ldr	r3, [pc, #48]	; (20e4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    20b2:	6313      	str	r3, [r2, #48]	; 0x30

  return result;
    20b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    20b6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    20b8:	4b0b      	ldr	r3, [pc, #44]	; (20e8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    20ba:	4313      	orrs	r3, r2
    20bc:	630b      	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    20be:	f7ff ff1d 	bl	1efc <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    20c2:	2001      	movs	r0, #1
    20c4:	e7ef      	b.n	20a6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    20c6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    20c8:	4b07      	ldr	r3, [pc, #28]	; (20e8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    20ca:	4313      	orrs	r3, r2
    20cc:	632b      	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    20ce:	f7ff ff15 	bl	1efc <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    20d2:	2001      	movs	r0, #1
    20d4:	e7e7      	b.n	20a6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    20d6:	bf00      	nop
    20d8:	2000702c 	.word	0x2000702c
    20dc:	402c0000 	.word	0x402c0000
    20e0:	183a0000 	.word	0x183a0000
    20e4:	01000012 	.word	0x01000012
    20e8:	00700010 	.word	0x00700010

000020ec <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    20ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ee:	4e27      	ldr	r6, [pc, #156]	; (218c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    20f0:	27ff      	movs	r7, #255	; 0xff
    20f2:	4d27      	ldr	r5, [pc, #156]	; (2190 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    20f4:	f8d6 e000 	ldr.w	lr, [r6]
    20f8:	682b      	ldr	r3, [r5, #0]
    20fa:	665f      	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    20fc:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    20fe:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    2102:	d0fb      	beq.n	20fc <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    2104:	6f5c      	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    2106:	b2e4      	uxtb	r4, r4
    2108:	2cff      	cmp	r4, #255	; 0xff
    210a:	d005      	beq.n	2118 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    210c:	6834      	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    210e:	ebce 0404 	rsb	r4, lr, r4
    2112:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    2116:	d3f0      	bcc.n	20fa <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2118:	f041 0440 	orr.w	r4, r1, #64	; 0x40
    211c:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    211e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2120:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    2124:	d0fb      	beq.n	211e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    2126:	6f5c      	ldr	r4, [r3, #116]	; 0x74
    2128:	2618      	movs	r6, #24
    212a:	fa22 f406 	lsr.w	r4, r2, r6
    212e:	b2e4      	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2130:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2132:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2134:	f414 1ff8 	tst.w	r4, #2031616	; 0x1f0000
    2138:	d0fb      	beq.n	2132 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    213a:	3e08      	subs	r6, #8
    213c:	6f5c      	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    213e:	f116 0f08 	cmn.w	r6, #8
    2142:	d1f2      	bne.n	212a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    2144:	b1f9      	cbz	r1, 2186 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    2146:	2908      	cmp	r1, #8
    2148:	bf0c      	ite	eq
    214a:	2287      	moveq	r2, #135	; 0x87
    214c:	22ff      	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    214e:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2150:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2152:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    2156:	d0fb      	beq.n	2150 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    2158:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    215a:	2100      	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    215c:	24ff      	movs	r4, #255	; 0xff
    215e:	665c      	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2160:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2162:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    2166:	d0fb      	beq.n	2160 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    2168:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    216a:	b2cb      	uxtb	r3, r1
    216c:	3101      	adds	r1, #1
    216e:	3bff      	subs	r3, #255	; 0xff
    2170:	b2d2      	uxtb	r2, r2
    2172:	bf18      	it	ne
    2174:	2301      	movne	r3, #1
    2176:	7042      	strb	r2, [r0, #1]
    2178:	ea13 13d2 	ands.w	r3, r3, r2, lsr #7
    217c:	d001      	beq.n	2182 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    217e:	682b      	ldr	r3, [r5, #0]
    2180:	e7ed      	b.n	215e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    2182:	4610      	mov	r0, r2
    2184:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2186:	2295      	movs	r2, #149	; 0x95
    2188:	e7e1      	b.n	214e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    218a:	bf00      	nop
    218c:	20007288 	.word	0x20007288
    2190:	20004d14 	.word	0x20004d14

00002194 <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    2194:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    2196:	2101      	movs	r1, #1
    2198:	7800      	ldrb	r0, [r0, #0]
    219a:	f001 fca7 	bl	3aec <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    219e:	4913      	ldr	r1, [pc, #76]	; (21ec <Sd2Card::chipSelectHigh()+0x58>)
    21a0:	780b      	ldrb	r3, [r1, #0]
    21a2:	b1eb      	cbz	r3, 21e0 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    21a4:	4a12      	ldr	r2, [pc, #72]	; (21f0 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    21a6:	2000      	movs	r0, #0
    21a8:	7cd3      	ldrb	r3, [r2, #19]
    21aa:	7008      	strb	r0, [r1, #0]
    21ac:	4619      	mov	r1, r3
    21ae:	b1bb      	cbz	r3, 21e0 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    21b0:	07d8      	lsls	r0, r3, #31
    21b2:	d502      	bpl.n	21ba <Sd2Card::chipSelectHigh()+0x26>
    21b4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    21b6:	480f      	ldr	r0, [pc, #60]	; (21f4 <Sd2Card::chipSelectHigh()+0x60>)
    21b8:	6004      	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    21ba:	079b      	lsls	r3, r3, #30
    21bc:	d503      	bpl.n	21c6 <Sd2Card::chipSelectHigh()+0x32>
    21be:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    21c0:	4b0d      	ldr	r3, [pc, #52]	; (21f8 <Sd2Card::chipSelectHigh()+0x64>)
    21c2:	7cd1      	ldrb	r1, [r2, #19]
    21c4:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    21c6:	074c      	lsls	r4, r1, #29
    21c8:	d503      	bpl.n	21d2 <Sd2Card::chipSelectHigh()+0x3e>
    21ca:	6b10      	ldr	r0, [r2, #48]	; 0x30
    21cc:	4b0b      	ldr	r3, [pc, #44]	; (21fc <Sd2Card::chipSelectHigh()+0x68>)
    21ce:	7cd1      	ldrb	r1, [r2, #19]
    21d0:	6018      	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    21d2:	0708      	lsls	r0, r1, #28
    21d4:	d405      	bmi.n	21e2 <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    21d6:	06cb      	lsls	r3, r1, #27
    21d8:	d502      	bpl.n	21e0 <Sd2Card::chipSelectHigh()+0x4c>
    21da:	6b92      	ldr	r2, [r2, #56]	; 0x38
    21dc:	4b08      	ldr	r3, [pc, #32]	; (2200 <Sd2Card::chipSelectHigh()+0x6c>)
    21de:	601a      	str	r2, [r3, #0]
    21e0:	bd10      	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    21e2:	6b50      	ldr	r0, [r2, #52]	; 0x34
    21e4:	4b07      	ldr	r3, [pc, #28]	; (2204 <Sd2Card::chipSelectHigh()+0x70>)
    21e6:	7cd1      	ldrb	r1, [r2, #19]
    21e8:	6018      	str	r0, [r3, #0]
    21ea:	e7f4      	b.n	21d6 <Sd2Card::chipSelectHigh()+0x42>
    21ec:	20007044 	.word	0x20007044
    21f0:	20004d14 	.word	0x20004d14
    21f4:	e000e100 	.word	0xe000e100
    21f8:	e000e104 	.word	0xe000e104
    21fc:	e000e108 	.word	0xe000e108
    2200:	e000e110 	.word	0xe000e110
    2204:	e000e10c 	.word	0xe000e10c

00002208 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    2208:	4a40      	ldr	r2, [pc, #256]	; (230c <Sd2Card::chipSelectLow()+0x104>)
    220a:	7813      	ldrb	r3, [r2, #0]
    220c:	b11b      	cbz	r3, 2216 <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    220e:	7800      	ldrb	r0, [r0, #0]
    2210:	2100      	movs	r1, #0
    2212:	f001 bc6b 	b.w	3aec <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2216:	4b3e      	ldr	r3, [pc, #248]	; (2310 <Sd2Card::chipSelectLow()+0x108>)
    2218:	493e      	ldr	r1, [pc, #248]	; (2314 <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    221a:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    221c:	2401      	movs	r4, #1
    221e:	7cde      	ldrb	r6, [r3, #19]
    2220:	680d      	ldr	r5, [r1, #0]
    2222:	7014      	strb	r4, [r2, #0]
    2224:	684c      	ldr	r4, [r1, #4]
    2226:	2e00      	cmp	r6, #0
    2228:	d031      	beq.n	228e <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
    222a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    222c:	7cd9      	ldrb	r1, [r3, #19]
    222e:	07ce      	lsls	r6, r1, #31
    2230:	460a      	mov	r2, r1
    2232:	d508      	bpl.n	2246 <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2234:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 2334 <Sd2Card::chipSelectLow()+0x12c>
    2238:	695f      	ldr	r7, [r3, #20]
    223a:	f8de 6000 	ldr.w	r6, [lr]
    223e:	403e      	ands	r6, r7
    2240:	629e      	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    2242:	f8ce 6000 	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    2246:	078f      	lsls	r7, r1, #30
    2248:	d506      	bpl.n	2258 <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    224a:	4e33      	ldr	r6, [pc, #204]	; (2318 <Sd2Card::chipSelectLow()+0x110>)
    224c:	6999      	ldr	r1, [r3, #24]
    224e:	6837      	ldr	r7, [r6, #0]
    2250:	7cda      	ldrb	r2, [r3, #19]
    2252:	4039      	ands	r1, r7
    2254:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2256:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    2258:	0756      	lsls	r6, r2, #29
    225a:	d506      	bpl.n	226a <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    225c:	4e2f      	ldr	r6, [pc, #188]	; (231c <Sd2Card::chipSelectLow()+0x114>)
    225e:	69d9      	ldr	r1, [r3, #28]
    2260:	6837      	ldr	r7, [r6, #0]
    2262:	7cda      	ldrb	r2, [r3, #19]
    2264:	4039      	ands	r1, r7
    2266:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2268:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    226a:	0711      	lsls	r1, r2, #28
    226c:	d506      	bpl.n	227c <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    226e:	4e2c      	ldr	r6, [pc, #176]	; (2320 <Sd2Card::chipSelectLow()+0x118>)
    2270:	6a19      	ldr	r1, [r3, #32]
    2272:	6837      	ldr	r7, [r6, #0]
    2274:	7cda      	ldrb	r2, [r3, #19]
    2276:	4039      	ands	r1, r7
    2278:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    227a:	6031      	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    227c:	06d2      	lsls	r2, r2, #27
    227e:	d505      	bpl.n	228c <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2280:	4928      	ldr	r1, [pc, #160]	; (2324 <Sd2Card::chipSelectLow()+0x11c>)
    2282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2284:	680e      	ldr	r6, [r1, #0]
    2286:	4032      	ands	r2, r6
    2288:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    228a:	600a      	str	r2, [r1, #0]
			}
			__enable_irq();
    228c:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    228e:	689a      	ldr	r2, [r3, #8]
    2290:	491f      	ldr	r1, [pc, #124]	; (2310 <Sd2Card::chipSelectLow()+0x108>)
    2292:	42aa      	cmp	r2, r5
    2294:	d02b      	beq.n	22ee <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    2296:	4a24      	ldr	r2, [pc, #144]	; (2328 <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2298:	4e24      	ldr	r6, [pc, #144]	; (232c <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    229a:	6992      	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    229c:	608d      	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    229e:	f3c2 1101 	ubfx	r1, r2, #4, #2
    22a2:	f3c2 6282 	ubfx	r2, r2, #26, #3
    22a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    22aa:	3201      	adds	r2, #1
    22ac:	fbb1 f1f2 	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    22b0:	b1dd      	cbz	r5, 22ea <Sd2Card::chipSelectLow()+0xe2>
    22b2:	fbb1 f2f5 	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
    22b6:	b142      	cbz	r2, 22ca <Sd2Card::chipSelectLow()+0xc2>
    22b8:	fbb1 f1f2 	udiv	r1, r1, r2
    22bc:	42a9      	cmp	r1, r5
    22be:	bf88      	it	hi
    22c0:	3201      	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    22c2:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    22c6:	d314      	bcc.n	22f2 <Sd2Card::chipSelectLow()+0xea>
    22c8:	4a19      	ldr	r2, [pc, #100]	; (2330 <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    22ca:	60da      	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    22cc:	681b      	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    22ce:	2600      	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    22d0:	2503      	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    22d2:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    22d4:	611e      	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    22d6:	625d      	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
    22d8:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    22da:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    22dc:	6119      	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    22de:	2100      	movs	r1, #0
    22e0:	7800      	ldrb	r0, [r0, #0]
}
    22e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    22e6:	f001 bc01 	b.w	3aec <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    22ea:	460a      	mov	r2, r1
    22ec:	e7e3      	b.n	22b6 <Sd2Card::chipSelectLow()+0xae>
    22ee:	68ca      	ldr	r2, [r1, #12]
    22f0:	e7ec      	b.n	22cc <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    22f2:	2a02      	cmp	r2, #2
    22f4:	bf98      	it	ls
    22f6:	2200      	movls	r2, #0
    22f8:	d9e7      	bls.n	22ca <Sd2Card::chipSelectLow()+0xc2>
    22fa:	3a02      	subs	r2, #2
    22fc:	0855      	lsrs	r5, r2, #1
    22fe:	0429      	lsls	r1, r5, #16
    2300:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    2304:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    2308:	430a      	orrs	r2, r1
    230a:	e7de      	b.n	22ca <Sd2Card::chipSelectLow()+0xc2>
    230c:	20007044 	.word	0x20007044
    2310:	20004d14 	.word	0x20004d14
    2314:	2000703c 	.word	0x2000703c
    2318:	e000e184 	.word	0xe000e184
    231c:	e000e188 	.word	0xe000e188
    2320:	e000e18c 	.word	0xe000e18c
    2324:	e000e190 	.word	0xe000e190
    2328:	400fc000 	.word	0x400fc000
    232c:	20000030 	.word	0x20000030
    2330:	007f7fff 	.word	0x007f7fff
    2334:	e000e180 	.word	0xe000e180

00002338 <Sd2Card::waitStartBlock()>:
    2338:	490f      	ldr	r1, [pc, #60]	; (2378 <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    233a:	b470      	push	{r4, r5, r6}
    233c:	4d0f      	ldr	r5, [pc, #60]	; (237c <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    233e:	24ff      	movs	r4, #255	; 0xff
    2340:	680e      	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2342:	682a      	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2344:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2346:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2348:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    234c:	d0fb      	beq.n	2346 <Sd2Card::waitStartBlock()+0xe>
    234e:	6f53      	ldr	r3, [r2, #116]	; 0x74
    2350:	b2db      	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    2352:	2bff      	cmp	r3, #255	; 0xff
    2354:	7043      	strb	r3, [r0, #1]
    2356:	d107      	bne.n	2368 <Sd2Card::waitStartBlock()+0x30>
    2358:	680b      	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    235a:	1b9b      	subs	r3, r3, r6
    235c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2360:	d9ef      	bls.n	2342 <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2362:	2000      	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    2364:	bc70      	pop	{r4, r5, r6}
    2366:	4770      	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2368:	f1a3 00fe 	sub.w	r0, r3, #254	; 0xfe
    236c:	fab0 f080 	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    2370:	bc70      	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2372:	0940      	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    2374:	4770      	bx	lr
    2376:	bf00      	nop
    2378:	20007288 	.word	0x20007288
    237c:	20004d14 	.word	0x20004d14

00002380 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2380:	b570      	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    2382:	7883      	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2384:	460d      	mov	r5, r1
    2386:	4604      	mov	r4, r0
    2388:	4616      	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    238a:	2b03      	cmp	r3, #3
    238c:	bf18      	it	ne
    238e:	024d      	lslne	r5, r1, #9
  chipSelectLow();
    2390:	f7ff ff3a 	bl	2208 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    2394:	2111      	movs	r1, #17
    2396:	462a      	mov	r2, r5
    2398:	4620      	mov	r0, r4
    239a:	f7ff fea7 	bl	20ec <Sd2Card::cardCommand(unsigned char, unsigned long)>
    239e:	b918      	cbnz	r0, 23a8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    23a0:	4620      	mov	r0, r4
    23a2:	f7ff ffc9 	bl	2338 <Sd2Card::waitStartBlock()>
    23a6:	b920      	cbnz	r0, 23b2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    23a8:	4620      	mov	r0, r4
    23aa:	f7ff fef3 	bl	2194 <Sd2Card::chipSelectHigh()>
  return false;
    23ae:	2000      	movs	r0, #0
}
    23b0:	bd70      	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    23b2:	4d11      	ldr	r5, [pc, #68]	; (23f8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
    23b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    23b8:	21ff      	movs	r1, #255	; 0xff
    23ba:	4630      	mov	r0, r6
    23bc:	f004 fa1c 	bl	67f8 <memset>
    23c0:	f44f 7300 	mov.w	r3, #512	; 0x200
    23c4:	4632      	mov	r2, r6
    23c6:	4628      	mov	r0, r5
    23c8:	4631      	mov	r1, r6
    23ca:	f7ff fd35 	bl	1e38 <SPIClass::transfer(void const*, void*, unsigned int)>
    23ce:	682b      	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    23d0:	22ff      	movs	r2, #255	; 0xff
    23d2:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    23d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    23d6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    23da:	d0fb      	beq.n	23d4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    23dc:	22ff      	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    23de:	6f59      	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    23e0:	665a      	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    23e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    23e4:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    23e8:	d0fb      	beq.n	23e2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    23ea:	4620      	mov	r0, r4
    23ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    23ee:	f7ff fed1 	bl	2194 <Sd2Card::chipSelectHigh()>
  return true;
    23f2:	2001      	movs	r0, #1
    23f4:	bd70      	pop	{r4, r5, r6, pc}
    23f6:	bf00      	nop
    23f8:	20004d14 	.word	0x20004d14

000023fc <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    23fc:	4b1b      	ldr	r3, [pc, #108]	; (246c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
    23fe:	b410      	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2400:	681c      	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2402:	6661      	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2404:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    2406:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    240a:	d0fb      	beq.n	2404 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
    240c:	1e51      	subs	r1, r2, #1
    240e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    2410:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2414:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    2418:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    241a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    241c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2420:	d0fb      	beq.n	241a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    2422:	4291      	cmp	r1, r2
    2424:	6f63      	ldr	r3, [r4, #116]	; 0x74
    2426:	d1f5      	bne.n	2414 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2428:	23ff      	movs	r3, #255	; 0xff
    242a:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    242c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    242e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2432:	d0fb      	beq.n	242c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2434:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    2436:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2438:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    243a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    243c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    2440:	d0fb      	beq.n	243a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2442:	23ff      	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    2444:	6f62      	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    2446:	6663      	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    2448:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    244a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    244e:	d0fb      	beq.n	2448 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
    2450:	6f63      	ldr	r3, [r4, #116]	; 0x74
    2452:	b2db      	uxtb	r3, r3
    2454:	f003 021f 	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    2458:	7043      	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    245a:	f85d 4b04 	ldr.w	r4, [sp], #4
    245e:	f1a2 0005 	sub.w	r0, r2, #5
    2462:	fab0 f080 	clz	r0, r0
    2466:	0940      	lsrs	r0, r0, #5
    2468:	4770      	bx	lr
    246a:	bf00      	nop
    246c:	20004d14 	.word	0x20004d14

00002470 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    2470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2472:	4605      	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    2474:	b169      	cbz	r1, 2492 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    2476:	7883      	ldrb	r3, [r0, #2]
    2478:	460c      	mov	r4, r1
    247a:	4616      	mov	r6, r2
    247c:	2b03      	cmp	r3, #3
    247e:	bf18      	it	ne
    2480:	024c      	lslne	r4, r1, #9
  chipSelectLow();
    2482:	f7ff fec1 	bl	2208 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    2486:	2118      	movs	r1, #24
    2488:	4622      	mov	r2, r4
    248a:	4628      	mov	r0, r5
    248c:	f7ff fe2e 	bl	20ec <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2490:	b120      	cbz	r0, 249c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    2492:	4628      	mov	r0, r5
    2494:	f7ff fe7e 	bl	2194 <Sd2Card::chipSelectHigh()>
  return false;
    2498:	2000      	movs	r0, #0
}
    249a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    249c:	4632      	mov	r2, r6
    249e:	21fe      	movs	r1, #254	; 0xfe
    24a0:	4628      	mov	r0, r5
    24a2:	f7ff ffab 	bl	23fc <Sd2Card::writeData(unsigned char, unsigned char const*)>
    24a6:	2800      	cmp	r0, #0
    24a8:	d0f3      	beq.n	2492 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    24aa:	4915      	ldr	r1, [pc, #84]	; (2500 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    24ac:	20ff      	movs	r0, #255	; 0xff
    24ae:	4e15      	ldr	r6, [pc, #84]	; (2504 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
    24b0:	680f      	ldr	r7, [r1, #0]
    24b2:	6832      	ldr	r2, [r6, #0]
    24b4:	6650      	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    24b6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    24b8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    24bc:	d0fb      	beq.n	24b6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
    24be:	6f54      	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    24c0:	b2e4      	uxtb	r4, r4
    24c2:	2cff      	cmp	r4, #255	; 0xff
    24c4:	d005      	beq.n	24d2 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
    24c6:	680b      	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    24c8:	1bdb      	subs	r3, r3, r7
    24ca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    24ce:	d3f1      	bcc.n	24b4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
    24d0:	e7df      	b.n	2492 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    24d2:	2200      	movs	r2, #0
    24d4:	210d      	movs	r1, #13
    24d6:	4628      	mov	r0, r5
    24d8:	f7ff fe08 	bl	20ec <Sd2Card::cardCommand(unsigned char, unsigned long)>
    24dc:	2800      	cmp	r0, #0
    24de:	d1d8      	bne.n	2492 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    24e0:	6832      	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    24e2:	6654      	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    24e4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    24e6:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    24ea:	d0fb      	beq.n	24e4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
    24ec:	6f53      	ldr	r3, [r2, #116]	; 0x74
    24ee:	f013 0fff 	tst.w	r3, #255	; 0xff
    24f2:	d1ce      	bne.n	2492 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    24f4:	4628      	mov	r0, r5
    24f6:	f7ff fe4d 	bl	2194 <Sd2Card::chipSelectHigh()>
  return true;
    24fa:	2001      	movs	r0, #1
    24fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24fe:	bf00      	nop
    2500:	20007288 	.word	0x20007288
    2504:	20004d14 	.word	0x20004d14

00002508 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    2508:	4b02      	ldr	r3, [pc, #8]	; (2514 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    250a:	2207      	movs	r2, #7
    250c:	4902      	ldr	r1, [pc, #8]	; (2518 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    250e:	e883 0006 	stmia.w	r3, {r1, r2}
    2512:	4770      	bx	lr
    2514:	2000703c 	.word	0x2000703c
    2518:	003d0900 	.word	0x003d0900

0000251c <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    251c:	b538      	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    251e:	f990 3005 	ldrsb.w	r3, [r0, #5]
    2522:	2b00      	cmp	r3, #0
    2524:	db03      	blt.n	252e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    2526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    252a:	f000 b977 	b.w	281c <SdVolume::cacheFlush()>
    252e:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    2530:	2101      	movs	r1, #1
    2532:	6900      	ldr	r0, [r0, #16]
    2534:	f000 f9b2 	bl	289c <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2538:	b300      	cbz	r0, 257c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    253a:	7d25      	ldrb	r5, [r4, #20]
    253c:	4b10      	ldr	r3, [pc, #64]	; (2580 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    253e:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    2542:	d01b      	beq.n	257c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    2544:	79a3      	ldrb	r3, [r4, #6]
    2546:	2b01      	cmp	r3, #1
    2548:	d915      	bls.n	2576 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    254a:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    254c:	490d      	ldr	r1, [pc, #52]	; (2584 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    254e:	0c1a      	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2550:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2552:	680b      	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    2554:	82aa      	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2556:	b133      	cbz	r3, 2566 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    2558:	f105 0116 	add.w	r1, r5, #22
    255c:	f105 0018 	add.w	r0, r5, #24
    2560:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    2562:	8b2b      	ldrh	r3, [r5, #24]
    2564:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    2566:	7963      	ldrb	r3, [r4, #5]
    2568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    256c:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    256e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    2572:	f000 b953 	b.w	281c <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    2576:	69a3      	ldr	r3, [r4, #24]
    2578:	61eb      	str	r3, [r5, #28]
    257a:	e7e6      	b.n	254a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    257c:	2000      	movs	r0, #0
    257e:	bd38      	pop	{r3, r4, r5, pc}
    2580:	20007054 	.word	0x20007054
    2584:	20007048 	.word	0x20007048

00002588 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    2588:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    258a:	f100 0208 	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    258e:	4604      	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    2590:	2101      	movs	r1, #1
    2592:	6a00      	ldr	r0, [r0, #32]
    2594:	f000 fa2c 	bl	29f0 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    2598:	b150      	cbz	r0, 25b0 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    259a:	69e3      	ldr	r3, [r4, #28]
    259c:	b93b      	cbnz	r3, 25ae <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    259e:	7963      	ldrb	r3, [r4, #5]
    25a0:	2001      	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    25a2:	68a2      	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    25a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    25a8:	61e2      	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    25aa:	7163      	strb	r3, [r4, #5]
    25ac:	bd10      	pop	{r4, pc}
  }
  return true;
    25ae:	2001      	movs	r0, #1
}
    25b0:	bd10      	pop	{r4, pc}
    25b2:	bf00      	nop

000025b4 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    25b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25b6:	7983      	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    25b8:	b113      	cbz	r3, 25c0 <SdFile::seekSet(unsigned long)+0xc>
    25ba:	6982      	ldr	r2, [r0, #24]
    25bc:	428a      	cmp	r2, r1
    25be:	d201      	bcs.n	25c4 <SdFile::seekSet(unsigned long)+0x10>
    25c0:	2000      	movs	r0, #0
    25c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    25c4:	2b02      	cmp	r3, #2
    25c6:	460f      	mov	r7, r1
    25c8:	4605      	mov	r5, r0
    25ca:	d01c      	beq.n	2606 <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    25cc:	b1f7      	cbz	r7, 260c <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    25ce:	6a2b      	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    25d0:	1e7c      	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    25d2:	68e9      	ldr	r1, [r5, #12]
    25d4:	7c1b      	ldrb	r3, [r3, #16]
    25d6:	1e4a      	subs	r2, r1, #1
    25d8:	3309      	adds	r3, #9
    25da:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    25dc:	40dc      	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    25de:	42a2      	cmp	r2, r4
    25e0:	d802      	bhi.n	25e8 <SdFile::seekSet(unsigned long)+0x34>
    25e2:	b109      	cbz	r1, 25e8 <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    25e4:	1aa4      	subs	r4, r4, r2
    25e6:	e001      	b.n	25ec <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    25e8:	69eb      	ldr	r3, [r5, #28]
    25ea:	60ab      	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    25ec:	f105 0608 	add.w	r6, r5, #8
    25f0:	e006      	b.n	2600 <SdFile::seekSet(unsigned long)+0x4c>
    25f2:	68a9      	ldr	r1, [r5, #8]
    25f4:	3c01      	subs	r4, #1
    25f6:	6a28      	ldr	r0, [r5, #32]
    25f8:	f000 f9c0 	bl	297c <SdVolume::fatGet(unsigned long, unsigned long*) const>
    25fc:	2800      	cmp	r0, #0
    25fe:	d0df      	beq.n	25c0 <SdFile::seekSet(unsigned long)+0xc>
    2600:	4632      	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    2602:	2c00      	cmp	r4, #0
    2604:	d1f5      	bne.n	25f2 <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    2606:	60ef      	str	r7, [r5, #12]
    return true;
    2608:	2001      	movs	r0, #1
    260a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    260c:	60af      	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    260e:	2001      	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    2610:	60ef      	str	r7, [r5, #12]
    return true;
    2612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002614 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    2614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2618:	b085      	sub	sp, #20
    261a:	4607      	mov	r7, r0
    261c:	9201      	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    261e:	7982      	ldrb	r2, [r0, #6]
    2620:	2a01      	cmp	r2, #1
    2622:	d005      	beq.n	2630 <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    2624:	2301      	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2626:	2000      	movs	r0, #0
    2628:	713b      	strb	r3, [r7, #4]
}
    262a:	b005      	add	sp, #20
    262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2630:	7942      	ldrb	r2, [r0, #5]
    2632:	0794      	lsls	r4, r2, #30
    2634:	d5f6      	bpl.n	2624 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2636:	0753      	lsls	r3, r2, #29
    2638:	468b      	mov	fp, r1
    263a:	d508      	bpl.n	264e <SdFile::write(void const*, unsigned int)+0x3a>
    263c:	69b9      	ldr	r1, [r7, #24]
    263e:	68fb      	ldr	r3, [r7, #12]
    2640:	428b      	cmp	r3, r1
    2642:	f000 80c0 	beq.w	27c6 <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    2646:	f7ff ffb5 	bl	25b4 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    264a:	2800      	cmp	r0, #0
    264c:	d0ea      	beq.n	2624 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    264e:	9b01      	ldr	r3, [sp, #4]
    2650:	68f9      	ldr	r1, [r7, #12]
    2652:	2b00      	cmp	r3, #0
    2654:	f000 80c5 	beq.w	27e2 <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    2658:	f8dd 8004 	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    265c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 27fc <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    2660:	f8df a19c 	ldr.w	sl, [pc, #412]	; 2800 <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2664:	6a38      	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2666:	f3c1 0608 	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    266a:	7902      	ldrb	r2, [r0, #4]
    266c:	3a01      	subs	r2, #1
    266e:	ea02 2551 	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    2672:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    2676:	d153      	bne.n	2720 <SdFile::write(void const*, unsigned int)+0x10c>
    2678:	2e00      	cmp	r6, #0
    267a:	d151      	bne.n	2720 <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    267c:	68b9      	ldr	r1, [r7, #8]
    267e:	2900      	cmp	r1, #0
    2680:	d179      	bne.n	2776 <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    2682:	69fa      	ldr	r2, [r7, #28]
    2684:	2a00      	cmp	r2, #0
    2686:	f000 8089 	beq.w	279c <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    268a:	60ba      	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    268c:	f5c6 7400 	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2690:	3a02      	subs	r2, #2
    2692:	f890 e010 	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2696:	b2a4      	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2698:	6941      	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    269a:	4544      	cmp	r4, r8
    269c:	d942      	bls.n	2724 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    269e:	fa02 f20e 	lsl.w	r2, r2, lr
    26a2:	440d      	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    26a4:	fa1f f488 	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    26a8:	4415      	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    26aa:	b91e      	cbnz	r6, 26b4 <SdFile::write(void const*, unsigned int)+0xa0>
    26ac:	68f8      	ldr	r0, [r7, #12]
    26ae:	69ba      	ldr	r2, [r7, #24]
    26b0:	4290      	cmp	r0, r2
    26b2:	d253      	bcs.n	275c <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    26b4:	4628      	mov	r0, r5
    26b6:	2101      	movs	r1, #1
    26b8:	f000 f8f0 	bl	289c <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    26bc:	2800      	cmp	r0, #0
    26be:	d0b1      	beq.n	2624 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    26c0:	444e      	add	r6, r9
      uint8_t* end = dst + n;
    26c2:	eb06 0e04 	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    26c6:	4576      	cmp	r6, lr
    26c8:	d00d      	beq.n	26e6 <SdFile::write(void const*, unsigned int)+0xd2>
    26ca:	f10b 31ff 	add.w	r1, fp, #4294967295
    26ce:	1e72      	subs	r2, r6, #1
    26d0:	f10e 35ff 	add.w	r5, lr, #4294967295
    26d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    26d8:	f802 0f01 	strb.w	r0, [r2, #1]!
    26dc:	4295      	cmp	r5, r2
    26de:	d1f9      	bne.n	26d4 <SdFile::write(void const*, unsigned int)+0xc0>
    26e0:	ebc6 060e 	rsb	r6, r6, lr
    26e4:	44b3      	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    26e6:	68fd      	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    26e8:	ebb8 0804 	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    26ec:	eb04 0105 	add.w	r1, r4, r5
    26f0:	60f9      	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    26f2:	d1b7      	bne.n	2664 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    26f4:	69bb      	ldr	r3, [r7, #24]
    26f6:	4299      	cmp	r1, r3
    26f8:	d96a      	bls.n	27d0 <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    26fa:	797a      	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    26fc:	61b9      	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    26fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2702:	717a      	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    2704:	0712      	lsls	r2, r2, #28
    2706:	d507      	bpl.n	2718 <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    2708:	79bb      	ldrb	r3, [r7, #6]
    270a:	2b00      	cmp	r3, #0
    270c:	d08a      	beq.n	2624 <SdFile::write(void const*, unsigned int)+0x10>
    270e:	4638      	mov	r0, r7
    2710:	f7ff ff04 	bl	251c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2714:	2800      	cmp	r0, #0
    2716:	d085      	beq.n	2624 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2718:	9801      	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    271a:	b005      	add	sp, #20
    271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2720:	68ba      	ldr	r2, [r7, #8]
    2722:	e7b3      	b.n	268c <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2724:	fa02 f20e 	lsl.w	r2, r2, lr
    2728:	440d      	add	r5, r1
    if (n == 512) {
    272a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    272e:	4415      	add	r5, r2
    if (n == 512) {
    2730:	d1bb      	bne.n	26aa <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2732:	f8da 2000 	ldr.w	r2, [sl]
    2736:	4295      	cmp	r5, r2
    2738:	d039      	beq.n	27ae <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    273a:	4a2c      	ldr	r2, [pc, #176]	; (27ec <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    273c:	4629      	mov	r1, r5
    273e:	6810      	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2740:	7802      	ldrb	r2, [r0, #0]
    2742:	2afe      	cmp	r2, #254	; 0xfe
    2744:	d038      	beq.n	27b8 <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    2746:	465a      	mov	r2, fp
    2748:	f7ff fe92 	bl	2470 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    274c:	2800      	cmp	r0, #0
    274e:	f43f af69 	beq.w	2624 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    2752:	f50b 7b00 	add.w	fp, fp, #512	; 0x200
    2756:	f44f 7400 	mov.w	r4, #512	; 0x200
    275a:	e7c4      	b.n	26e6 <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    275c:	f000 f85e 	bl	281c <SdVolume::cacheFlush()>
    2760:	2800      	cmp	r0, #0
    2762:	f43f af5f 	beq.w	2624 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2766:	4922      	ldr	r1, [pc, #136]	; (27f0 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    2768:	f8ca 5000 	str.w	r5, [sl]
    276c:	780a      	ldrb	r2, [r1, #0]
    276e:	f042 0201 	orr.w	r2, r2, #1
    2772:	700a      	strb	r2, [r1, #0]
    2774:	e7a4      	b.n	26c0 <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2776:	aa03      	add	r2, sp, #12
    2778:	f000 f900 	bl	297c <SdVolume::fatGet(unsigned long, unsigned long*) const>
    277c:	2800      	cmp	r0, #0
    277e:	f43f af54 	beq.w	262a <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    2782:	6a38      	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2784:	f64f 71f8 	movw	r1, #65528	; 0xfff8
    2788:	4b1a      	ldr	r3, [pc, #104]	; (27f4 <SdFile::write(void const*, unsigned int)+0x1e0>)
    278a:	f890 4020 	ldrb.w	r4, [r0, #32]
    278e:	9a03      	ldr	r2, [sp, #12]
    2790:	2c10      	cmp	r4, #16
    2792:	bf18      	it	ne
    2794:	4619      	movne	r1, r3
    2796:	428a      	cmp	r2, r1
    2798:	f4ff af77 	bcc.w	268a <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    279c:	4638      	mov	r0, r7
    279e:	f7ff fef3 	bl	2588 <SdFile::addCluster()>
    27a2:	2800      	cmp	r0, #0
    27a4:	f43f af3e 	beq.w	2624 <SdFile::write(void const*, unsigned int)+0x10>
    27a8:	6a38      	ldr	r0, [r7, #32]
    27aa:	68ba      	ldr	r2, [r7, #8]
    27ac:	e76e      	b.n	268c <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    27ae:	f04f 32ff 	mov.w	r2, #4294967295
    27b2:	f8ca 2000 	str.w	r2, [sl]
    27b6:	e7c0      	b.n	273a <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    27b8:	4658      	mov	r0, fp
    27ba:	f7ff fc3b 	bl	2034 <SDHC_CardWriteBlock(void const*, unsigned long)>
    27be:	fab0 f080 	clz	r0, r0
    27c2:	0940      	lsrs	r0, r0, #5
    27c4:	e7c2      	b.n	274c <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    27c6:	9b01      	ldr	r3, [sp, #4]
    27c8:	2b00      	cmp	r3, #0
    27ca:	f47f af45 	bne.w	2658 <SdFile::write(void const*, unsigned int)+0x44>
    27ce:	e799      	b.n	2704 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    27d0:	4b09      	ldr	r3, [pc, #36]	; (27f8 <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    27d2:	797a      	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	2b00      	cmp	r3, #0
    27d8:	d094      	beq.n	2704 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    27da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    27de:	717a      	strb	r2, [r7, #5]
    27e0:	e790      	b.n	2704 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    27e2:	69bb      	ldr	r3, [r7, #24]
    27e4:	428b      	cmp	r3, r1
    27e6:	d388      	bcc.n	26fa <SdFile::write(void const*, unsigned int)+0xe6>
    27e8:	797a      	ldrb	r2, [r7, #5]
    27ea:	e78b      	b.n	2704 <SdFile::write(void const*, unsigned int)+0xf0>
    27ec:	20007050 	.word	0x20007050
    27f0:	20007254 	.word	0x20007254
    27f4:	0ffffff8 	.word	0x0ffffff8
    27f8:	20007048 	.word	0x20007048
    27fc:	20007054 	.word	0x20007054
    2800:	20004d64 	.word	0x20004d64

00002804 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2804:	b500      	push	{lr}
    2806:	b083      	sub	sp, #12
  return write(&b, 1);
    2808:	2201      	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    280a:	ab02      	add	r3, sp, #8
    280c:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    2810:	4619      	mov	r1, r3
    2812:	f7ff feff 	bl	2614 <SdFile::write(void const*, unsigned int)>
}
    2816:	b003      	add	sp, #12
    2818:	f85d fb04 	ldr.w	pc, [sp], #4

0000281c <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    281c:	b570      	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    281e:	4c1a      	ldr	r4, [pc, #104]	; (2888 <SdVolume::cacheFlush()+0x6c>)
    2820:	7823      	ldrb	r3, [r4, #0]
    2822:	b90b      	cbnz	r3, 2828 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    2824:	2001      	movs	r0, #1
}
    2826:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2828:	4d18      	ldr	r5, [pc, #96]	; (288c <SdVolume::cacheFlush()+0x70>)
    282a:	4b19      	ldr	r3, [pc, #100]	; (2890 <SdVolume::cacheFlush()+0x74>)
    282c:	6828      	ldr	r0, [r5, #0]
    282e:	6819      	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2830:	7803      	ldrb	r3, [r0, #0]
    2832:	2bfe      	cmp	r3, #254	; 0xfe
    2834:	d017      	beq.n	2866 <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    2836:	4a17      	ldr	r2, [pc, #92]	; (2894 <SdVolume::cacheFlush()+0x78>)
    2838:	f7ff fe1a 	bl	2470 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    283c:	b188      	cbz	r0, 2862 <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    283e:	4e16      	ldr	r6, [pc, #88]	; (2898 <SdVolume::cacheFlush()+0x7c>)
    2840:	6831      	ldr	r1, [r6, #0]
    2842:	b919      	cbnz	r1, 284c <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    2844:	2300      	movs	r3, #0
  }
  return true;
    2846:	2001      	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    2848:	7023      	strb	r3, [r4, #0]
    284a:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    284c:	6828      	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    284e:	7803      	ldrb	r3, [r0, #0]
    2850:	2bfe      	cmp	r3, #254	; 0xfe
    2852:	d00f      	beq.n	2874 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    2854:	4a0f      	ldr	r2, [pc, #60]	; (2894 <SdVolume::cacheFlush()+0x78>)
    2856:	f7ff fe0b 	bl	2470 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    285a:	b110      	cbz	r0, 2862 <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    285c:	2300      	movs	r3, #0
    285e:	6033      	str	r3, [r6, #0]
    2860:	e7f0      	b.n	2844 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    2862:	2000      	movs	r0, #0
    2864:	bd70      	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    2866:	480b      	ldr	r0, [pc, #44]	; (2894 <SdVolume::cacheFlush()+0x78>)
    2868:	f7ff fbe4 	bl	2034 <SDHC_CardWriteBlock(void const*, unsigned long)>
    286c:	fab0 f080 	clz	r0, r0
    2870:	0940      	lsrs	r0, r0, #5
    2872:	e7e3      	b.n	283c <SdVolume::cacheFlush()+0x20>
    2874:	4807      	ldr	r0, [pc, #28]	; (2894 <SdVolume::cacheFlush()+0x78>)
    2876:	f7ff fbdd 	bl	2034 <SDHC_CardWriteBlock(void const*, unsigned long)>
    287a:	fab0 f080 	clz	r0, r0
    287e:	0940      	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2880:	2800      	cmp	r0, #0
    2882:	d1eb      	bne.n	285c <SdVolume::cacheFlush()+0x40>
    2884:	e7ed      	b.n	2862 <SdVolume::cacheFlush()+0x46>
    2886:	bf00      	nop
    2888:	20007254 	.word	0x20007254
    288c:	20007050 	.word	0x20007050
    2890:	20004d64 	.word	0x20004d64
    2894:	20007054 	.word	0x20007054
    2898:	2000704c 	.word	0x2000704c

0000289c <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    289c:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    289e:	4d12      	ldr	r5, [pc, #72]	; (28e8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    28a0:	460e      	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    28a2:	682b      	ldr	r3, [r5, #0]
    28a4:	4283      	cmp	r3, r0
    28a6:	d011      	beq.n	28cc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    28a8:	4604      	mov	r4, r0
    if (!cacheFlush()) return false;
    28aa:	f7ff ffb7 	bl	281c <SdVolume::cacheFlush()>
    28ae:	b908      	cbnz	r0, 28b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    28b0:	2000      	movs	r0, #0
    28b2:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    28b4:	4b0d      	ldr	r3, [pc, #52]	; (28ec <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    28b6:	6818      	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    28b8:	7803      	ldrb	r3, [r0, #0]
    28ba:	2bfe      	cmp	r3, #254	; 0xfe
    28bc:	d00c      	beq.n	28d8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    28be:	4a0c      	ldr	r2, [pc, #48]	; (28f0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    28c0:	4621      	mov	r1, r4
    28c2:	f7ff fd5d 	bl	2380 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    28c6:	2800      	cmp	r0, #0
    28c8:	d0f2      	beq.n	28b0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    28ca:	602c      	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    28cc:	4b09      	ldr	r3, [pc, #36]	; (28f4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
    28ce:	2001      	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    28d0:	7819      	ldrb	r1, [r3, #0]
    28d2:	4331      	orrs	r1, r6
    28d4:	7019      	strb	r1, [r3, #0]
  return true;
}
    28d6:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    28d8:	4621      	mov	r1, r4
    28da:	4805      	ldr	r0, [pc, #20]	; (28f0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    28dc:	f7ff fb2e 	bl	1f3c <SDHC_CardReadBlock(void*, unsigned long)>
    28e0:	fab0 f080 	clz	r0, r0
    28e4:	0940      	lsrs	r0, r0, #5
    28e6:	e7ee      	b.n	28c6 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    28e8:	20004d64 	.word	0x20004d64
    28ec:	20007050 	.word	0x20007050
    28f0:	20007054 	.word	0x20007054
    28f4:	20007254 	.word	0x20007254

000028f8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    28f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    28fa:	f890 3020 	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    28fe:	4605      	mov	r5, r0
    2900:	460e      	mov	r6, r1
    2902:	4617      	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2904:	2b10      	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2906:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    2908:	4b18      	ldr	r3, [pc, #96]	; (296c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    290a:	d017      	beq.n	293c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    290c:	eb04 14d1 	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    2910:	681b      	ldr	r3, [r3, #0]
    2912:	429c      	cmp	r4, r3
    2914:	d117      	bne.n	2946 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2916:	f006 017f 	and.w	r1, r6, #127	; 0x7f
    291a:	4a15      	ldr	r2, [pc, #84]	; (2970 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    291c:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2920:	4914      	ldr	r1, [pc, #80]	; (2974 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2922:	7e28      	ldrb	r0, [r5, #24]
    2924:	780a      	ldrb	r2, [r1, #0]
    2926:	2801      	cmp	r0, #1
    2928:	f042 0201 	orr.w	r2, r2, #1
    292c:	700a      	strb	r2, [r1, #0]
    292e:	d919      	bls.n	2964 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
    2930:	68a9      	ldr	r1, [r5, #8]
  return true;
    2932:	2001      	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2934:	4a10      	ldr	r2, [pc, #64]	; (2978 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    2936:	440b      	add	r3, r1
    2938:	6013      	str	r3, [r2, #0]
    293a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    293c:	eb04 2411 	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    2940:	681b      	ldr	r3, [r3, #0]
    2942:	429c      	cmp	r4, r3
    2944:	d008      	beq.n	2958 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2946:	2100      	movs	r1, #0
    2948:	4620      	mov	r0, r4
    294a:	f7ff ffa7 	bl	289c <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    294e:	b150      	cbz	r0, 2966 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
    2950:	f895 3020 	ldrb.w	r3, [r5, #32]
    2954:	2b10      	cmp	r3, #16
    2956:	d107      	bne.n	2968 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2958:	b2f1      	uxtb	r1, r6
    295a:	4a05      	ldr	r2, [pc, #20]	; (2970 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    295c:	4623      	mov	r3, r4
    295e:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
    2962:	e7dd      	b.n	2920 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    2964:	2001      	movs	r0, #1
}
    2966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2968:	4623      	mov	r3, r4
    296a:	e7d4      	b.n	2916 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    296c:	20004d64 	.word	0x20004d64
    2970:	20007054 	.word	0x20007054
    2974:	20007254 	.word	0x20007254
    2978:	2000704c 	.word	0x2000704c

0000297c <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    297c:	68c3      	ldr	r3, [r0, #12]
    297e:	3301      	adds	r3, #1
    2980:	428b      	cmp	r3, r1
    2982:	d318      	bcc.n	29b6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2984:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2986:	f890 3020 	ldrb.w	r3, [r0, #32]
    298a:	4604      	mov	r4, r0
    298c:	4616      	mov	r6, r2
    298e:	460d      	mov	r5, r1
    2990:	2b10      	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    2992:	69c0      	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    2994:	4b14      	ldr	r3, [pc, #80]	; (29e8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2996:	d010      	beq.n	29ba <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    2998:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	4298      	cmp	r0, r3
    29a0:	d110      	bne.n	29c4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    29a2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    29a6:	4b11      	ldr	r3, [pc, #68]	; (29ec <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    29a8:	2001      	movs	r0, #1
    29aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    29ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    29b2:	6033      	str	r3, [r6, #0]
  }
  return true;
}
    29b4:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    29b6:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    29b8:	4770      	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    29ba:	eb00 2011 	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	4298      	cmp	r0, r3
    29c2:	d007      	beq.n	29d4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    29c4:	2100      	movs	r1, #0
    29c6:	f7ff ff69 	bl	289c <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    29ca:	b150      	cbz	r0, 29e2 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
    29cc:	f894 3020 	ldrb.w	r3, [r4, #32]
    29d0:	2b10      	cmp	r3, #16
    29d2:	d1e6      	bne.n	29a2 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    29d4:	b2e9      	uxtb	r1, r5
    29d6:	4b05      	ldr	r3, [pc, #20]	; (29ec <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
    29d8:	2001      	movs	r0, #1
    29da:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    29de:	6033      	str	r3, [r6, #0]
    29e0:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    29e2:	2000      	movs	r0, #0
    29e4:	bd70      	pop	{r4, r5, r6, pc}
    29e6:	bf00      	nop
    29e8:	20004d64 	.word	0x20004d64
    29ec:	20007054 	.word	0x20007054

000029f0 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    29f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    29f4:	6817      	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    29f6:	b083      	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    29f8:	b367      	cbz	r7, 2a54 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    29fa:	3701      	adds	r7, #1

    // don't save new start location
    setStart = false;
    29fc:	f04f 0a00 	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2a00:	68c3      	ldr	r3, [r0, #12]
    2a02:	f103 0801 	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2a06:	b30b      	cbz	r3, 2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    2a08:	468b      	mov	fp, r1
    2a0a:	4606      	mov	r6, r0
    2a0c:	4691      	mov	r9, r2
    2a0e:	463c      	mov	r4, r7
    2a10:	2500      	movs	r5, #0
    2a12:	e005      	b.n	2a20 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2a14:	461c      	mov	r4, r3
    2a16:	461f      	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2a18:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2a1a:	68f3      	ldr	r3, [r6, #12]
    2a1c:	42ab      	cmp	r3, r5
    2a1e:	d915      	bls.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2a20:	45a0      	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2a22:	aa01      	add	r2, sp, #4
    2a24:	4630      	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2a26:	d201      	bcs.n	2a2c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
    2a28:	2402      	movs	r4, #2
    2a2a:	4627      	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2a2c:	4621      	mov	r1, r4
    2a2e:	f7ff ffa5 	bl	297c <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2a32:	1c63      	adds	r3, r4, #1
    2a34:	b150      	cbz	r0, 2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
    2a36:	9a01      	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    2a38:	1bd9      	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    2a3a:	2a00      	cmp	r2, #0
    2a3c:	d1ea      	bne.n	2a14 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    2a3e:	458b      	cmp	fp, r1
    2a40:	d010      	beq.n	2a64 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
    2a42:	461c      	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2a44:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2a46:	68f3      	ldr	r3, [r6, #12]
    2a48:	42ab      	cmp	r3, r5
    2a4a:	d8e9      	bhi.n	2a20 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2a4c:	2000      	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    2a4e:	b003      	add	sp, #12
    2a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    2a54:	f1a1 0a01 	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2a58:	6807      	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    2a5a:	faba fa8a 	clz	sl, sl
    2a5e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    2a62:	e7cd      	b.n	2a00 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2a64:	2c01      	cmp	r4, #1
    2a66:	d9f1      	bls.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2a68:	68f3      	ldr	r3, [r6, #12]
    2a6a:	3301      	adds	r3, #1
    2a6c:	429c      	cmp	r4, r3
    2a6e:	d8ed      	bhi.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    2a70:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    2a74:	4621      	mov	r1, r4
    2a76:	4630      	mov	r0, r6
    2a78:	f7ff ff3e 	bl	28f8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2a7c:	2800      	cmp	r0, #0
    2a7e:	d0e5      	beq.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    2a80:	42a7      	cmp	r7, r4
    2a82:	d214      	bcs.n	2aae <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2a84:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2a86:	2c01      	cmp	r4, #1
    2a88:	d9e0      	bls.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2a8a:	68f3      	ldr	r3, [r6, #12]
    2a8c:	3301      	adds	r3, #1
    2a8e:	429c      	cmp	r4, r3
    2a90:	d8dc      	bhi.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    2a92:	1c62      	adds	r2, r4, #1
    2a94:	4621      	mov	r1, r4
    2a96:	4630      	mov	r0, r6
    2a98:	f7ff ff2e 	bl	28f8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2a9c:	2800      	cmp	r0, #0
    2a9e:	d0d5      	beq.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2aa0:	42a7      	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2aa2:	f104 34ff 	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2aa6:	d002      	beq.n	2aae <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2aa8:	2c01      	cmp	r4, #1
    2aaa:	d1ee      	bne.n	2a8a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    2aac:	e7ce      	b.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2aae:	f8d9 1000 	ldr.w	r1, [r9]
    2ab2:	b159      	cbz	r1, 2acc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2ab4:	2901      	cmp	r1, #1
    2ab6:	d9c9      	bls.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2ab8:	68f3      	ldr	r3, [r6, #12]
    2aba:	3301      	adds	r3, #1
    2abc:	4299      	cmp	r1, r3
    2abe:	d8c5      	bhi.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    2ac0:	463a      	mov	r2, r7
    2ac2:	4630      	mov	r0, r6
    2ac4:	f7ff ff18 	bl	28f8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2ac8:	2800      	cmp	r0, #0
    2aca:	d0bf      	beq.n	2a4c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2acc:	f8c9 7000 	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2ad0:	f1ba 0f00 	cmp.w	sl, #0
    2ad4:	d003      	beq.n	2ade <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    2ad6:	3701      	adds	r7, #1

  return true;
    2ad8:	2001      	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2ada:	6037      	str	r7, [r6, #0]
    2adc:	e7b7      	b.n	2a4e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    2ade:	2001      	movs	r0, #1
    2ae0:	e7b5      	b.n	2a4e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    2ae2:	bf00      	nop

00002ae4 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2ae4:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    2ae8:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
	}
    2aec:	1a10      	subs	r0, r2, r0
    2aee:	4770      	bx	lr

00002af0 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2af0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    2af4:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    2af8:	429a      	cmp	r2, r3
    2afa:	d905      	bls.n	2b08 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    2afc:	1c5a      	adds	r2, r3, #1
    2afe:	4403      	add	r3, r0
    2b00:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    2b04:	7e98      	ldrb	r0, [r3, #26]
    2b06:	4770      	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2b08:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    2b0c:	4770      	bx	lr
    2b0e:	bf00      	nop

00002b10 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2b10:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    2b14:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    2b18:	429a      	cmp	r2, r3
    2b1a:	d902      	bls.n	2b22 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    2b1c:	4403      	add	r3, r0
    2b1e:	7e98      	ldrb	r0, [r3, #26]
    2b20:	4770      	bx	lr
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2b22:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    2b26:	4770      	bx	lr

00002b28 <TwoWire::flush()>:
	virtual void flush(void) {
    2b28:	4770      	bx	lr
    2b2a:	bf00      	nop

00002b2c <TwoWire::write(unsigned char)>:
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    2b2c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    2b30:	b193      	cbz	r3, 2b58 <TwoWire::write(unsigned char)+0x2c>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2b32:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
    2b36:	2b20      	cmp	r3, #32
    2b38:	d80b      	bhi.n	2b52 <TwoWire::write(unsigned char)+0x26>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2b3a:	18c2      	adds	r2, r0, r3
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
    2b3c:	b410      	push	{r4}
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2b3e:	1c5c      	adds	r4, r3, #1
		return 1;
    2b40:	2301      	movs	r3, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2b42:	f880 405f 	strb.w	r4, [r0, #95]	; 0x5f
		return 1;
	}
	return 0;
}
    2b46:	4618      	mov	r0, r3
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    2b48:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
		return 1;
	}
	return 0;
}
    2b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2b50:	4770      	bx	lr
    2b52:	2201      	movs	r2, #1
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    2b54:	2300      	movs	r3, #0
    2b56:	7102      	strb	r2, [r0, #4]
		}
		txBuffer[txBufferLength++] = data;
		return 1;
	}
	return 0;
}
    2b58:	4618      	mov	r0, r3
    2b5a:	4770      	bx	lr

00002b5c <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2b5c:	b538      	push	{r3, r4, r5, lr}
    2b5e:	4605      	mov	r5, r0
	if (transmitting || slave_mode) {
    2b60:	f8b0 0060 	ldrh.w	r0, [r0, #96]	; 0x60
    2b64:	b190      	cbz	r0, 2b8c <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    2b66:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
    2b6a:	4614      	mov	r4, r2
    2b6c:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    2b70:	4294      	cmp	r4, r2
    2b72:	d80c      	bhi.n	2b8e <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    2b74:	f105 003d 	add.w	r0, r5, #61	; 0x3d
    2b78:	4622      	mov	r2, r4
    2b7a:	4418      	add	r0, r3
    2b7c:	f000 fcfc 	bl	3578 <memcpy>
		txBufferLength += quantity;
    2b80:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
    2b84:	4620      	mov	r0, r4
    2b86:	441c      	add	r4, r3
    2b88:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
		return quantity;
	}
	return 0;
}
    2b8c:	bd38      	pop	{r3, r4, r5, pc}
    2b8e:	4614      	mov	r4, r2
    2b90:	2201      	movs	r2, #1
    2b92:	712a      	strb	r2, [r5, #4]
    2b94:	e7ee      	b.n	2b74 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    2b96:	bf00      	nop

00002b98 <TwoWire::begin()>:
//#include "debug/printf.h"

#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
    2b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    2b9c:	4f2f      	ldr	r7, [pc, #188]	; (2c5c <TwoWire::begin()+0xc4>)
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    2b9e:	2500      	movs	r5, #0

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    2ba0:	6942      	ldr	r2, [r0, #20]
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    2ba2:	2401      	movs	r4, #1
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    2ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    2ba6:	f04f 0e02 	mov.w	lr, #2

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    2baa:	6816      	ldr	r6, [r2, #0]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    2bac:	f44f 3830 	mov.w	r8, #180224	; 0x2c000
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    2bb0:	f421 017c 	bic.w	r1, r1, #16515072	; 0xfc0000
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    2bb4:	6903      	ldr	r3, [r0, #16]
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    2bb6:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 2c68 <TwoWire::begin()+0xd0>
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    2bba:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    2bbe:	63b9      	str	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    2bc0:	6831      	ldr	r1, [r6, #0]
    2bc2:	6857      	ldr	r7, [r2, #4]
    2bc4:	4339      	orrs	r1, r7
    2bc6:	6031      	str	r1, [r6, #0]
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    2bc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    2bcc:	4e24      	ldr	r6, [pc, #144]	; (2c60 <TwoWire::begin()+0xc8>)
void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    2bce:	f8c3 e010 	str.w	lr, [r3, #16]
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    2bd2:	611d      	str	r5, [r3, #16]
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    2bd4:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    2bd8:	625c      	str	r4, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    2bda:	629e      	str	r6, [r3, #40]	; 0x28
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    2bdc:	f64f 0661 	movw	r6, #63585	; 0xf861
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    2be0:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    2be4:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    2be6:	651f      	str	r7, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    2be8:	621d      	str	r5, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    2bea:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    2bec:	611c      	str	r4, [r3, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    2bee:	7e01      	ldrb	r1, [r0, #24]
    2bf0:	4b1c      	ldr	r3, [pc, #112]	; (2c64 <TwoWire::begin()+0xcc>)
    2bf2:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2bf6:	7a09      	ldrb	r1, [r1, #8]
    2bf8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2bfc:	6889      	ldr	r1, [r1, #8]
    2bfe:	600e      	str	r6, [r1, #0]
	*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    2c00:	7e01      	ldrb	r1, [r0, #24]
    2c02:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2c06:	7a0c      	ldrb	r4, [r1, #8]
    2c08:	68cd      	ldr	r5, [r1, #12]
    2c0a:	eb03 1104 	add.w	r1, r3, r4, lsl #4
    2c0e:	6849      	ldr	r1, [r1, #4]
    2c10:	600d      	str	r5, [r1, #0]
    2c12:	7e01      	ldrb	r1, [r0, #24]
    2c14:	eb02 1101 	add.w	r1, r2, r1, lsl #4
	if (hardware.sda_pins[sda_pin_index_].select_input_register) {
    2c18:	690c      	ldr	r4, [r1, #16]
    2c1a:	b10c      	cbz	r4, 2c20 <TwoWire::begin()+0x88>
		*(hardware.sda_pins[sda_pin_index_].select_input_register) =  hardware.sda_pins[sda_pin_index_].select_val;
    2c1c:	6949      	ldr	r1, [r1, #20]
    2c1e:	6021      	str	r1, [r4, #0]
	}

	// setup SCL register
	*(portControlRegister(hardware.scl_pins[scl_pin_index_].pin)) = PINCONFIG;
    2c20:	7e41      	ldrb	r1, [r0, #25]
    2c22:	f64f 0461 	movw	r4, #63585	; 0xf861
    2c26:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2c2a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    2c2e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2c32:	6889      	ldr	r1, [r1, #8]
    2c34:	600c      	str	r4, [r1, #0]
	*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    2c36:	7e41      	ldrb	r1, [r0, #25]
    2c38:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2c3c:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    2c40:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2c42:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2c46:	685b      	ldr	r3, [r3, #4]
    2c48:	6019      	str	r1, [r3, #0]
    2c4a:	7e43      	ldrb	r3, [r0, #25]
    2c4c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (hardware.scl_pins[scl_pin_index_].select_input_register) {
    2c50:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2c52:	b10b      	cbz	r3, 2c58 <TwoWire::begin()+0xc0>
		*(hardware.scl_pins[scl_pin_index_].select_input_register) =  hardware.scl_pins[scl_pin_index_].select_val;
    2c54:	6b52      	ldr	r2, [r2, #52]	; 0x34
    2c56:	601a      	str	r2, [r3, #0]
    2c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c5c:	400fc000 	.word	0x400fc000
    2c60:	05050bb8 	.word	0x05050bb8
    2c64:	200011e8 	.word	0x200011e8
    2c68:	1928373b 	.word	0x1928373b

00002c6c <TwoWire::force_clock()>:
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    2c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c70:	4683      	mov	fp, r0
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2c72:	4840      	ldr	r0, [pc, #256]	; (2d74 <TwoWire::force_clock()+0x108>)
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    2c74:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2c76:	2515      	movs	r5, #21
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2c78:	f8db a014 	ldr.w	sl, [fp, #20]
    2c7c:	f89b 6018 	ldrb.w	r6, [fp, #24]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2c80:	f89b 3019 	ldrb.w	r3, [fp, #25]
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2c84:	eb0a 1606 	add.w	r6, sl, r6, lsl #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2c88:	493b      	ldr	r1, [pc, #236]	; (2d78 <TwoWire::force_clock()+0x10c>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2c8a:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2c8e:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 2d7c <TwoWire::force_clock()+0x110>
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    2c92:	7a36      	ldrb	r6, [r6, #8]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2c94:	460c      	mov	r4, r1
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    2c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2c9a:	0136      	lsls	r6, r6, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2c9c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 2d80 <TwoWire::force_clock()+0x114>
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2ca0:	011b      	lsls	r3, r3, #4
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2ca2:	1987      	adds	r7, r0, r6
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
    2ca4:	f850 8006 	ldr.w	r8, [r0, r6]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2ca8:	eb00 0c03 	add.w	ip, r0, r3
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
    2cac:	58c6      	ldr	r6, [r0, r3]
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2cae:	68f8      	ldr	r0, [r7, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2cb0:	687b      	ldr	r3, [r7, #4]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2cb2:	f8dc 700c 	ldr.w	r7, [ip, #12]
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2cb6:	9300      	str	r3, [sp, #0]
    2cb8:	601d      	str	r5, [r3, #0]
	*portSetRegister(sda_pin) = sda_mask;
    2cba:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    2cbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2cc2:	f8dc 2004 	ldr.w	r2, [ip, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    2cc6:	4303      	orrs	r3, r0
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2cc8:	9201      	str	r2, [sp, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    2cca:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2cce:	6015      	str	r5, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    2cd0:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    2cd4:	6873      	ldr	r3, [r6, #4]
    2cd6:	433b      	orrs	r3, r7
    2cd8:	6073      	str	r3, [r6, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2cda:	6809      	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2cdc:	f8de 3000 	ldr.w	r3, [lr]
    2ce0:	fba9 3203 	umull	r3, r2, r9, r3
    2ce4:	0c92      	lsrs	r2, r2, #18
    2ce6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2cea:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2cec:	6823      	ldr	r3, [r4, #0]
    2cee:	1a5b      	subs	r3, r3, r1
    2cf0:	429a      	cmp	r2, r3
    2cf2:	d8fb      	bhi.n	2cec <TwoWire::force_clock()+0x80>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2cf4:	4a20      	ldr	r2, [pc, #128]	; (2d78 <TwoWire::force_clock()+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2cf6:	2509      	movs	r5, #9

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2cf8:	f8df c084 	ldr.w	ip, [pc, #132]	; 2d80 <TwoWire::force_clock()+0x114>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2cfc:	4691      	mov	r9, r2
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
    2cfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    2d02:	4218      	tst	r0, r3
    2d04:	d002      	beq.n	2d0c <TwoWire::force_clock()+0xa0>
    2d06:	68b3      	ldr	r3, [r6, #8]
    2d08:	421f      	tst	r7, r3
    2d0a:	d131      	bne.n	2d70 <TwoWire::force_clock()+0x104>
			// success, both pins are high
			ret = true;
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
    2d0c:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2d10:	6814      	ldr	r4, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2d12:	f8de 1000 	ldr.w	r1, [lr]
    2d16:	fbac 3101 	umull	r3, r1, ip, r1
    2d1a:	0c89      	lsrs	r1, r1, #18
    2d1c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2d20:	6813      	ldr	r3, [r2, #0]
    2d22:	1b1b      	subs	r3, r3, r4
    2d24:	4299      	cmp	r1, r3
    2d26:	d8fb      	bhi.n	2d20 <TwoWire::force_clock()+0xb4>
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
    2d28:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2d2c:	f8d9 4000 	ldr.w	r4, [r9]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2d30:	f8de 1000 	ldr.w	r1, [lr]
    2d34:	fbac 3101 	umull	r3, r1, ip, r1
    2d38:	0c89      	lsrs	r1, r1, #18
    2d3a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2d3e:	6813      	ldr	r3, [r2, #0]
    2d40:	1b1b      	subs	r3, r3, r4
    2d42:	4299      	cmp	r1, r3
    2d44:	d8fb      	bhi.n	2d3e <TwoWire::force_clock()+0xd2>
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
	*portModeRegister(scl_pin) |= scl_mask;
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
    2d46:	3d01      	subs	r5, #1
    2d48:	d1d9      	bne.n	2cfe <TwoWire::force_clock()+0x92>
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
	bool ret = false;
    2d4a:	4628      	mov	r0, r5
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    2d4c:	f89b 3018 	ldrb.w	r3, [fp, #24]
    2d50:	9a00      	ldr	r2, [sp, #0]
    2d52:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    2d56:	68db      	ldr	r3, [r3, #12]
    2d58:	6013      	str	r3, [r2, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    2d5a:	f89b 3019 	ldrb.w	r3, [fp, #25]
    2d5e:	9a01      	ldr	r2, [sp, #4]
    2d60:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    2d64:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    2d68:	6013      	str	r3, [r2, #0]
	return ret;
}
    2d6a:	b003      	add	sp, #12
    2d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
		  && (*portInputRegister(scl_pin) & scl_mask)) {
			// success, both pins are high
			ret = true;
    2d70:	2001      	movs	r0, #1
    2d72:	e7eb      	b.n	2d4c <TwoWire::force_clock()+0xe0>
    2d74:	200011e8 	.word	0x200011e8
    2d78:	e0001004 	.word	0xe0001004
    2d7c:	20004ddc 	.word	0x20004ddc
    2d80:	431bde83 	.word	0x431bde83

00002d84 <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    2d84:	490d      	ldr	r1, [pc, #52]	; (2dbc <TwoWire::wait_idle()+0x38>)
    2d86:	6902      	ldr	r2, [r0, #16]
//   01   EPF = End Packet Flag
//      2 RDF = Receive Data Flag
//      1 TDF = Transmit Data Flag

bool TwoWire::wait_idle()
{
    2d88:	b510      	push	{r4, lr}
    2d8a:	680c      	ldr	r4, [r1, #0]
    2d8c:	e005      	b.n	2d9a <TwoWire::wait_idle()+0x16>
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    2d8e:	01db      	lsls	r3, r3, #7
    2d90:	d407      	bmi.n	2da2 <TwoWire::wait_idle()+0x1e>
    2d92:	680b      	ldr	r3, [r1, #0]
		if (timeout > 16) {
    2d94:	1b1b      	subs	r3, r3, r4
    2d96:	2b10      	cmp	r3, #16
    2d98:	d808      	bhi.n	2dac <TwoWire::wait_idle()+0x28>

bool TwoWire::wait_idle()
{
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
    2d9a:	6953      	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    2d9c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    2da0:	d1f5      	bne.n	2d8e <TwoWire::wait_idle()+0xa>
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    2da2:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    2da6:	2001      	movs	r0, #1
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    2da8:	6153      	str	r3, [r2, #20]
	return true;
}
    2daa:	bd10      	pop	{r4, pc}
    2dac:	4604      	mov	r4, r0
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
		if (timeout > 16) {
			//Serial.printf("timeout waiting for idle, MSR = %x\n", status);
			if (force_clock()) break;
    2dae:	f7ff ff5d 	bl	2c6c <TwoWire::force_clock()>
    2db2:	2800      	cmp	r0, #0
    2db4:	d0f9      	beq.n	2daa <TwoWire::wait_idle()+0x26>
    2db6:	6922      	ldr	r2, [r4, #16]
    2db8:	e7f3      	b.n	2da2 <TwoWire::wait_idle()+0x1e>
    2dba:	bf00      	nop
    2dbc:	20007288 	.word	0x20007288

00002dc0 <TwoWire::endTransmission(unsigned char)>:
	return true;
}


uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    2dc4:	f890 a05f 	ldrb.w	sl, [r0, #95]	; 0x5f
	if (!tx_len) return 4; // no address for transmit
    2dc8:	f1ba 0f00 	cmp.w	sl, #0
    2dcc:	d102      	bne.n	2dd4 <TwoWire::endTransmission(unsigned char)+0x14>
    2dce:	2004      	movs	r0, #4
    2dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dd4:	4605      	mov	r5, r0
    2dd6:	460e      	mov	r6, r1
	if (!wait_idle()) return 4;
    2dd8:	f7ff ffd4 	bl	2d84 <TwoWire::wait_idle()>
    2ddc:	2800      	cmp	r0, #0
    2dde:	d0f6      	beq.n	2dce <TwoWire::endTransmission(unsigned char)+0xe>
    2de0:	4f2e      	ldr	r7, [pc, #184]	; (2e9c <TwoWire::endTransmission(unsigned char)+0xdc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    2de2:	2400      	movs	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2de4:	f44f 7900 	mov.w	r9, #512	; 0x200
    2de8:	f8d7 8000 	ldr.w	r8, [r7]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    2dec:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    2dee:	6929      	ldr	r1, [r5, #16]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    2df0:	d81a      	bhi.n	2e28 <TwoWire::endTransmission(unsigned char)+0x68>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    2df2:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
    2df4:	f003 0307 	and.w	r3, r3, #7
			while (fifo_used < 4) {
    2df8:	2b03      	cmp	r3, #3
    2dfa:	d909      	bls.n	2e10 <TwoWire::endTransmission(unsigned char)+0x50>
    2dfc:	e014      	b.n	2e28 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    2dfe:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    2e02:	3301      	adds	r3, #1
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
    2e04:	2401      	movs	r4, #1
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    2e06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    2e0a:	2b04      	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    2e0c:	660a      	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    2e0e:	d00b      	beq.n	2e28 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2e10:	192a      	adds	r2, r5, r4
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
    2e12:	2c00      	cmp	r4, #0
    2e14:	d0f3      	beq.n	2dfe <TwoWire::endTransmission(unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
    2e16:	45a2      	cmp	sl, r4
    2e18:	d927      	bls.n	2e6a <TwoWire::endTransmission(unsigned char)+0xaa>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    2e1a:	3301      	adds	r3, #1
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2e1c:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
    2e20:	3401      	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    2e22:	2b04      	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2e24:	660a      	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    2e26:	d1f3      	bne.n	2e10 <TwoWire::endTransmission(unsigned char)+0x50>
				}
				fifo_used++;
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
    2e28:	694b      	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    2e2a:	0518      	lsls	r0, r3, #20
    2e2c:	d422      	bmi.n	2e74 <TwoWire::endTransmission(unsigned char)+0xb4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
    2e2e:	055a      	lsls	r2, r3, #21
    2e30:	d427      	bmi.n	2e82 <TwoWire::endTransmission(unsigned char)+0xc2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    2e32:	0498      	lsls	r0, r3, #18
    2e34:	d404      	bmi.n	2e40 <TwoWire::endTransmission(unsigned char)+0x80>
    2e36:	683a      	ldr	r2, [r7, #0]
    2e38:	ebc8 0202 	rsb	r2, r8, r2
    2e3c:	2a32      	cmp	r2, #50	; 0x32
    2e3e:	d909      	bls.n	2e54 <TwoWire::endTransmission(unsigned char)+0x94>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2e40:	690b      	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    2e42:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    2e46:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2e48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2e4c:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    2e4e:	660a      	str	r2, [r1, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    2e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
    2e54:	4554      	cmp	r4, sl
    2e56:	d905      	bls.n	2e64 <TwoWire::endTransmission(unsigned char)+0xa4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    2e58:	6dca      	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    2e5a:	0752      	lsls	r2, r2, #29
    2e5c:	d102      	bne.n	2e64 <TwoWire::endTransmission(unsigned char)+0xa4>
    2e5e:	059b      	lsls	r3, r3, #22
    2e60:	d419      	bmi.n	2e96 <TwoWire::endTransmission(unsigned char)+0xd6>
    2e62:	b1c6      	cbz	r6, 2e96 <TwoWire::endTransmission(unsigned char)+0xd6>
				return 0;
			}
		}
		yield();
    2e64:	f002 fbe4 	bl	5630 <yield>
	uint32_t tx_len = txBufferLength;
	if (!tx_len) return 4; // no address for transmit
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
    2e68:	e7c0      	b.n	2dec <TwoWire::endTransmission(unsigned char)+0x2c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2e6a:	b10e      	cbz	r6, 2e70 <TwoWire::endTransmission(unsigned char)+0xb0>
    2e6c:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
					tx_index++;
    2e70:	3401      	adds	r4, #1
					break;
    2e72:	e7d9      	b.n	2e28 <TwoWire::endTransmission(unsigned char)+0x68>
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2e74:	690b      	ldr	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    2e76:	2004      	movs	r0, #4
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2e78:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2e7c:	610b      	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    2e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2e82:	690b      	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    2e84:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    2e88:	2002      	movs	r0, #2
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2e8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2e8e:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    2e90:	660a      	str	r2, [r1, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    2e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
				return 0;
    2e96:	2000      	movs	r0, #0
    2e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e9c:	20007288 	.word	0x20007288

00002ea0 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    2ea0:	b321      	cbz	r1, 2eec <fade_raw(CRGB*, unsigned short, unsigned char)+0x4c>
    2ea2:	43d2      	mvns	r2, r2
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    2ea4:	b430      	push	{r4, r5}
    2ea6:	1e4d      	subs	r5, r1, #1
    2ea8:	b2d2      	uxtb	r2, r2
    2eaa:	1c44      	adds	r4, r0, #1
    2eac:	b2ad      	uxth	r5, r5
    2eae:	3201      	adds	r2, #1
    2eb0:	3501      	adds	r5, #1
    2eb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2eb6:	4405      	add	r5, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2eb8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    2ebc:	3003      	adds	r0, #3
    2ebe:	3403      	adds	r4, #3
    2ec0:	fb02 f303 	mul.w	r3, r2, r3
    2ec4:	121b      	asrs	r3, r3, #8
    2ec6:	f804 3c04 	strb.w	r3, [r4, #-4]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2eca:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2ece:	f810 3c01 	ldrb.w	r3, [r0, #-1]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2ed2:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2ed6:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2eda:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2edc:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2ede:	f800 1c02 	strb.w	r1, [r0, #-2]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2ee2:	f800 3c01 	strb.w	r3, [r0, #-1]
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    2ee6:	4285      	cmp	r5, r0
    2ee8:	d1e6      	bne.n	2eb8 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    2eea:	bc30      	pop	{r4, r5}
    2eec:	4770      	bx	lr
    2eee:	bf00      	nop

00002ef0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    2ef0:	f7ff bfd6 	b.w	2ea0 <fade_raw(CRGB*, unsigned short, unsigned char)>

00002ef4 <blur1d(CRGB*, unsigned short, unsigned char)>:
//         Total light is NOT entirely conserved, so many repeated
//         calls to 'blur' will also result in the light fading,
//         eventually all the way to black; this is by design so that
//         it can be used to (slowly) clear the LEDs to black.
void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)
{
    2ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    CRGB carryover = CRGB::Black;
    for( uint16_t i = 0; i < numLeds; i++) {
    2ef8:	460c      	mov	r4, r1
//         Total light is NOT entirely conserved, so many repeated
//         calls to 'blur' will also result in the light fading,
//         eventually all the way to black; this is by design so that
//         it can be used to (slowly) clear the LEDs to black.
void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)
{
    2efa:	b085      	sub	sp, #20
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    2efc:	1053      	asrs	r3, r2, #1
    CRGB carryover = CRGB::Black;
    for( uint16_t i = 0; i < numLeds; i++) {
    2efe:	9103      	str	r1, [sp, #12]
//         calls to 'blur' will also result in the light fading,
//         eventually all the way to black; this is by design so that
//         it can be used to (slowly) clear the LEDs to black.
void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)
{
    uint8_t keep = 255 - blur_amount;
    2f00:	43d1      	mvns	r1, r2
    uint8_t seep = blur_amount >> 1;
    CRGB carryover = CRGB::Black;
    for( uint16_t i = 0; i < numLeds; i++) {
    2f02:	2c00      	cmp	r4, #0
    2f04:	d06a      	beq.n	2fdc <blur1d(CRGB*, unsigned short, unsigned char)+0xe8>
    2f06:	2200      	movs	r2, #0
    2f08:	b2c9      	uxtb	r1, r1
    2f0a:	f103 0a01 	add.w	sl, r3, #1
    2f0e:	f100 0901 	add.w	r9, r0, #1
    2f12:	f101 0b01 	add.w	fp, r1, #1
    2f16:	4615      	mov	r5, r2
    2f18:	4611      	mov	r1, r2
    2f1a:	4694      	mov	ip, r2
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2f1c:	f819 8c01 	ldrb.w	r8, [r9, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2f20:	7844      	ldrb	r4, [r0, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2f22:	fb0a fe08 	mul.w	lr, sl, r8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2f26:	7883      	ldrb	r3, [r0, #2]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    2f28:	fb0b f808 	mul.w	r8, fp, r8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2f2c:	fb0a f704 	mul.w	r7, sl, r4
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2f30:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    2f34:	eb02 2228 	add.w	r2, r2, r8, asr #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2f38:	fb0a f603 	mul.w	r6, sl, r3
    2f3c:	fb0b f803 	mul.w	r8, fp, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2f40:	123f      	asrs	r7, r7, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2f42:	fa5f f38e 	uxtb.w	r3, lr
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2f46:	fb0b f404 	mul.w	r4, fp, r4
    if( t > 255) t = 255;
    2f4a:	2aff      	cmp	r2, #255	; 0xff
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2f4c:	ea4f 2626 	mov.w	r6, r6, asr #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2f50:	9301      	str	r3, [sp, #4]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2f52:	ea4f 2424 	mov.w	r4, r4, asr #8
    2f56:	b2fb      	uxtb	r3, r7
    2f58:	bfc8      	it	gt
    2f5a:	22ff      	movgt	r2, #255	; 0xff
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    2f5c:	442c      	add	r4, r5
    2f5e:	bfd8      	it	le
    2f60:	b2d2      	uxtble	r2, r2
    2f62:	9302      	str	r3, [sp, #8]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2f64:	ea4f 2328 	mov.w	r3, r8, asr #8
    if( t > 255) t = 255;
    2f68:	2cff      	cmp	r4, #255	; 0xff
    2f6a:	fa5f f886 	uxtb.w	r8, r6
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    2f6e:	4463      	add	r3, ip
    2f70:	bfd4      	ite	le
    2f72:	b2e4      	uxtble	r4, r4
    if( t > 255) t = 255;
    2f74:	24ff      	movgt	r4, #255	; 0xff
    2f76:	2bff      	cmp	r3, #255	; 0xff
    2f78:	bfd4      	ite	le
    2f7a:	b2db      	uxtble	r3, r3
    2f7c:	23ff      	movgt	r3, #255	; 0xff
        CRGB cur = leds[i];
        CRGB part = cur;
        part.nscale8( seep);
        cur.nscale8( keep);
        cur += carryover;
        if( i) leds[i-1] += part;
    2f7e:	b1e9      	cbz	r1, 2fbc <blur1d(CRGB*, unsigned short, unsigned char)+0xc8>
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    2f80:	f810 5c03 	ldrb.w	r5, [r0, #-3]
    2f84:	44ae      	add	lr, r5
    2f86:	f810 5c02 	ldrb.w	r5, [r0, #-2]
    if( t > 255) t = 255;
    2f8a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    2f8e:	442f      	add	r7, r5
    2f90:	f810 5c01 	ldrb.w	r5, [r0, #-1]
    2f94:	bfd4      	ite	le
    2f96:	fa5f fe8e 	uxtble.w	lr, lr
    if( t > 255) t = 255;
    2f9a:	f04f 0eff 	movgt.w	lr, #255	; 0xff
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    2f9e:	442e      	add	r6, r5
    if( t > 255) t = 255;
    2fa0:	2fff      	cmp	r7, #255	; 0xff


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2fa2:	f800 ec03 	strb.w	lr, [r0, #-3]
    2fa6:	bfd4      	ite	le
    2fa8:	b2ff      	uxtble	r7, r7
    2faa:	27ff      	movgt	r7, #255	; 0xff
    2fac:	2eff      	cmp	r6, #255	; 0xff
        g = qadd8( g, rhs.g);
    2fae:	f800 7c02 	strb.w	r7, [r0, #-2]
    2fb2:	bfd4      	ite	le
    2fb4:	b2f6      	uxtble	r6, r6
    2fb6:	26ff      	movgt	r6, #255	; 0xff
        b = qadd8( b, rhs.b);
    2fb8:	f800 6c01 	strb.w	r6, [r0, #-1]
void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)
{
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    CRGB carryover = CRGB::Black;
    for( uint16_t i = 0; i < numLeds; i++) {
    2fbc:	3101      	adds	r1, #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2fbe:	f809 2c01 	strb.w	r2, [r9, #-1]
        g = rhs.g;
        b = rhs.b;
    2fc2:	7083      	strb	r3, [r0, #2]
    2fc4:	46c4      	mov	ip, r8
    2fc6:	b289      	uxth	r1, r1
    2fc8:	9b03      	ldr	r3, [sp, #12]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2fca:	7044      	strb	r4, [r0, #1]
    2fcc:	f109 0903 	add.w	r9, r9, #3
    2fd0:	428b      	cmp	r3, r1
    2fd2:	f100 0003 	add.w	r0, r0, #3
    2fd6:	9d02      	ldr	r5, [sp, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2fd8:	9a01      	ldr	r2, [sp, #4]
    2fda:	d19f      	bne.n	2f1c <blur1d(CRGB*, unsigned short, unsigned char)+0x28>
        cur += carryover;
        if( i) leds[i-1] += part;
        leds[i] = cur;
        carryover = part;
    }
}
    2fdc:	b005      	add	sp, #20
    2fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fe2:	bf00      	nop

00002fe4 <blurColumns(CRGB*, unsigned char, unsigned char, unsigned char)>:
void blurColumns(CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)
{
    // blur columns
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    for( uint8_t col = 0; col < width; col++) {
    2fe4:	2900      	cmp	r1, #0
    2fe6:	f000 80a8 	beq.w	313a <blurColumns(CRGB*, unsigned char, unsigned char, unsigned char)+0x156>
    }
}

// blurColumns: perform a blur1d on each column of a rectangular matrix
void blurColumns(CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)
{
    2fea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fee:	43dc      	mvns	r4, r3
    2ff0:	b08d      	sub	sp, #52	; 0x34
    2ff2:	105b      	asrs	r3, r3, #1
    // blur columns
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    for( uint8_t col = 0; col < width; col++) {
    2ff4:	f04f 0a00 	mov.w	sl, #0
    2ff8:	b2e4      	uxtb	r4, r4
    2ffa:	9208      	str	r2, [sp, #32]
    2ffc:	3301      	adds	r3, #1
    2ffe:	4683      	mov	fp, r0
    3000:	1c62      	adds	r2, r4, #1
    3002:	910a      	str	r1, [sp, #40]	; 0x28
    3004:	930b      	str	r3, [sp, #44]	; 0x2c
    3006:	9203      	str	r2, [sp, #12]
    3008:	f8cd a004 	str.w	sl, [sp, #4]
        CRGB carryover = CRGB::Black;
        for( uint8_t i = 0; i < height; i++) {
    300c:	9b08      	ldr	r3, [sp, #32]
    300e:	2b00      	cmp	r3, #0
    3010:	f000 8088 	beq.w	3124 <blurColumns(CRGB*, unsigned char, unsigned char, unsigned char)+0x140>
    3014:	2500      	movs	r5, #0
    3016:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    301a:	46da      	mov	sl, fp
    301c:	462f      	mov	r7, r5
    301e:	46ab      	mov	fp, r5
    3020:	9309      	str	r3, [sp, #36]	; 0x24
    3022:	9502      	str	r5, [sp, #8]
            CRGB cur = leds[XY(col,i)];
    3024:	4629      	mov	r1, r5
    3026:	9801      	ldr	r0, [sp, #4]
    3028:	f7fd fc16 	bl	858 <XY(unsigned char, unsigned char)>
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    302c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    302e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    3032:	9b03      	ldr	r3, [sp, #12]
    3034:	eb0a 0400 	add.w	r4, sl, r0
    3038:	f81a 1000 	ldrb.w	r1, [sl, r0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    303c:	7866      	ldrb	r6, [r4, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    303e:	fb02 f901 	mul.w	r9, r2, r1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3042:	78a4      	ldrb	r4, [r4, #2]
    3044:	fb03 f101 	mul.w	r1, r3, r1
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3048:	fb02 f806 	mul.w	r8, r2, r6
    304c:	9b03      	ldr	r3, [sp, #12]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    304e:	fb02 f004 	mul.w	r0, r2, r4
    3052:	eb07 2121 	add.w	r1, r7, r1, asr #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3056:	ea4f 2828 	mov.w	r8, r8, asr #8
    305a:	fb03 f606 	mul.w	r6, r3, r6
    b = (((uint16_t)b) * scale_fixed) >> 8;
    305e:	fb03 f404 	mul.w	r4, r3, r4
    3062:	1207      	asrs	r7, r0, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3064:	fa5f f388 	uxtb.w	r3, r8
    if( t > 255) t = 255;
    3068:	29ff      	cmp	r1, #255	; 0xff
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    306a:	ea4f 2929 	mov.w	r9, r9, asr #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    306e:	9306      	str	r3, [sp, #24]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3070:	b2fb      	uxtb	r3, r7
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3072:	ea4f 2626 	mov.w	r6, r6, asr #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3076:	9307      	str	r3, [sp, #28]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    3078:	fa5f f389 	uxtb.w	r3, r9
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    307c:	ea4f 2424 	mov.w	r4, r4, asr #8
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    3080:	445e      	add	r6, fp
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    3082:	9305      	str	r3, [sp, #20]
    3084:	bfd4      	ite	le
    3086:	b2cb      	uxtble	r3, r1
    if( t > 255) t = 255;
    3088:	23ff      	movgt	r3, #255	; 0xff
    308a:	2eff      	cmp	r6, #255	; 0xff
    308c:	9304      	str	r3, [sp, #16]
    308e:	bfd8      	it	le
    3090:	b2f6      	uxtble	r6, r6
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    3092:	9b02      	ldr	r3, [sp, #8]
    if( t > 255) t = 255;
    3094:	bfc8      	it	gt
    3096:	26ff      	movgt	r6, #255	; 0xff
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    3098:	4423      	add	r3, r4
    if( t > 255) t = 255;
    309a:	2bff      	cmp	r3, #255	; 0xff
    309c:	bfd4      	ite	le
    309e:	b2dc      	uxtble	r4, r3
    30a0:	24ff      	movgt	r4, #255	; 0xff
            CRGB part = cur;
            part.nscale8( seep);
            cur.nscale8( keep);
            cur += carryover;
            if( i) leds[XY(col,i-1)] += part;
    30a2:	b335      	cbz	r5, 30f2 <blurColumns(CRGB*, unsigned char, unsigned char, unsigned char)+0x10e>
    30a4:	1e69      	subs	r1, r5, #1
    30a6:	9801      	ldr	r0, [sp, #4]
    30a8:	b2c9      	uxtb	r1, r1
    30aa:	f7fd fbd5 	bl	858 <XY(unsigned char, unsigned char)>
    30ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    30b2:	f81a 1000 	ldrb.w	r1, [sl, r0]
    30b6:	eb0a 0200 	add.w	r2, sl, r0
    30ba:	4489      	add	r9, r1
    if( t > 255) t = 255;
    30bc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    30c0:	bfd4      	ite	le
    30c2:	fa5f f989 	uxtble.w	r9, r9
    30c6:	f04f 09ff 	movgt.w	r9, #255	; 0xff


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    30ca:	f80a 9000 	strb.w	r9, [sl, r0]
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    30ce:	7851      	ldrb	r1, [r2, #1]
    30d0:	4488      	add	r8, r1
    30d2:	7891      	ldrb	r1, [r2, #2]
    if( t > 255) t = 255;
    30d4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
/// @param j - second byte to add
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    30d8:	440f      	add	r7, r1
    30da:	bfd4      	ite	le
    30dc:	fa5f f888 	uxtble.w	r8, r8
    if( t > 255) t = 255;
    30e0:	f04f 08ff 	movgt.w	r8, #255	; 0xff
    30e4:	2fff      	cmp	r7, #255	; 0xff
        g = qadd8( g, rhs.g);
    30e6:	f882 8001 	strb.w	r8, [r2, #1]
    30ea:	bfd4      	ite	le
    30ec:	b2ff      	uxtble	r7, r7
    30ee:	27ff      	movgt	r7, #255	; 0xff
        b = qadd8( b, rhs.b);
    30f0:	7097      	strb	r7, [r2, #2]
            leds[XY(col,i)] = cur;
    30f2:	4629      	mov	r1, r5
    30f4:	9801      	ldr	r0, [sp, #4]
    30f6:	f7fd fbaf 	bl	858 <XY(unsigned char, unsigned char)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    30fa:	9b07      	ldr	r3, [sp, #28]
    30fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    // blur columns
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    for( uint8_t col = 0; col < width; col++) {
        CRGB carryover = CRGB::Black;
        for( uint8_t i = 0; i < height; i++) {
    3100:	3501      	adds	r5, #1
    3102:	9302      	str	r3, [sp, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3104:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3108:	b2ed      	uxtb	r5, r5
            CRGB part = cur;
            part.nscale8( seep);
            cur.nscale8( keep);
            cur += carryover;
            if( i) leds[XY(col,i-1)] += part;
            leds[XY(col,i)] = cur;
    310a:	eb0a 0100 	add.w	r1, sl, r0
        g = rhs.g;
    310e:	f8dd b018 	ldr.w	fp, [sp, #24]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3112:	f80a 3000 	strb.w	r3, [sl, r0]
    // blur columns
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    for( uint8_t col = 0; col < width; col++) {
        CRGB carryover = CRGB::Black;
        for( uint8_t i = 0; i < height; i++) {
    3116:	9b08      	ldr	r3, [sp, #32]
    3118:	9f05      	ldr	r7, [sp, #20]
    311a:	42ab      	cmp	r3, r5
        g = rhs.g;
    311c:	704e      	strb	r6, [r1, #1]
        b = rhs.b;
    311e:	708c      	strb	r4, [r1, #2]
    3120:	d180      	bne.n	3024 <blurColumns(CRGB*, unsigned char, unsigned char, unsigned char)+0x40>
    3122:	46d3      	mov	fp, sl
void blurColumns(CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)
{
    // blur columns
    uint8_t keep = 255 - blur_amount;
    uint8_t seep = blur_amount >> 1;
    for( uint8_t col = 0; col < width; col++) {
    3124:	9b01      	ldr	r3, [sp, #4]
    3126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3128:	3301      	adds	r3, #1
    312a:	b2db      	uxtb	r3, r3
    312c:	429a      	cmp	r2, r3
    312e:	9301      	str	r3, [sp, #4]
    3130:	f47f af6c 	bne.w	300c <blurColumns(CRGB*, unsigned char, unsigned char, unsigned char)+0x28>
            if( i) leds[XY(col,i-1)] += part;
            leds[XY(col,i)] = cur;
            carryover = part;
        }
    }
}
    3134:	b00d      	add	sp, #52	; 0x34
    3136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    313a:	4770      	bx	lr

0000313c <blur2d(CRGB*, unsigned char, unsigned char, unsigned char)>:
        carryover = part;
    }
}

void blur2d( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)
{
    313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3140:	4682      	mov	sl, r0
    3142:	b081      	sub	sp, #4
    3144:	460e      	mov	r6, r1
    3146:	461f      	mov	r7, r3
}

// blurRows: perform a blur1d on every row of a rectangular matrix
void blurRows( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)
{
    for( uint8_t row = 0; row < height; row++) {
    3148:	4615      	mov	r5, r2
    314a:	b182      	cbz	r2, 316e <blur2d(CRGB*, unsigned char, unsigned char, unsigned char)+0x32>
    314c:	fa1f f981 	uxth.w	r9, r1
    3150:	f04f 0803 	mov.w	r8, #3
    3154:	4683      	mov	fp, r0
    3156:	2400      	movs	r4, #0
    3158:	3401      	adds	r4, #1
        CRGB* rowbase = leds + (row * width);
        blur1d( rowbase, width, blur_amount);
    315a:	4658      	mov	r0, fp
    315c:	463a      	mov	r2, r7
    315e:	4649      	mov	r1, r9
}

// blurRows: perform a blur1d on every row of a rectangular matrix
void blurRows( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)
{
    for( uint8_t row = 0; row < height; row++) {
    3160:	b2e4      	uxtb	r4, r4
        CRGB* rowbase = leds + (row * width);
        blur1d( rowbase, width, blur_amount);
    3162:	f7ff fec7 	bl	2ef4 <blur1d(CRGB*, unsigned short, unsigned char)>
    3166:	fb18 bb06 	smlabb	fp, r8, r6, fp
}

// blurRows: perform a blur1d on every row of a rectangular matrix
void blurRows( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)
{
    for( uint8_t row = 0; row < height; row++) {
    316a:	42a5      	cmp	r5, r4
    316c:	d1f4      	bne.n	3158 <blur2d(CRGB*, unsigned char, unsigned char, unsigned char)+0x1c>
}

void blur2d( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)
{
    blurRows(leds, width, height, blur_amount);
    blurColumns(leds, width, height, blur_amount);
    316e:	463b      	mov	r3, r7
    3170:	462a      	mov	r2, r5
    3172:	4631      	mov	r1, r6
    3174:	4650      	mov	r0, sl
}
    3176:	b001      	add	sp, #4
    3178:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

void blur2d( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)
{
    blurRows(leds, width, height, blur_amount);
    blurColumns(leds, width, height, blur_amount);
    317c:	f7ff bf32 	b.w	2fe4 <blurColumns(CRGB*, unsigned char, unsigned char, unsigned char)>

00003180 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    3180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    3182:	1e1e      	subs	r6, r3, #0
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    3184:	4604      	mov	r4, r0
    3186:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    3188:	dd0f      	ble.n	31aa <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
    318a:	eb02 0542 	add.w	r5, r2, r2, lsl #1
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    318e:	6823      	ldr	r3, [r4, #0]
    3190:	4620      	mov	r0, r4
    3192:	689b      	ldr	r3, [r3, #8]
    3194:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    3196:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    3198:	6823      	ldr	r3, [r4, #0]
    319a:	6062      	str	r2, [r4, #4]
    319c:	4a0c      	ldr	r2, [pc, #48]	; (31d0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    319e:	695b      	ldr	r3, [r3, #20]
        m_nLeds = nLeds;
    31a0:	6166      	str	r6, [r4, #20]
    31a2:	4293      	cmp	r3, r2
    31a4:	d104      	bne.n	31b0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x30>
	return *pLed;
}
    31a6:	4620      	mov	r0, r4
    31a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    31aa:	4616      	mov	r6, r2
    31ac:	2500      	movs	r5, #0
    31ae:	e7ee      	b.n	318e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    31b0:	4620      	mov	r0, r4
    31b2:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    31b4:	2800      	cmp	r0, #0
    31b6:	d0f6      	beq.n	31a6 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    31b8:	4b06      	ldr	r3, [pc, #24]	; (31d4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    31ba:	4a07      	ldr	r2, [pc, #28]	; (31d8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x58>)
    31bc:	fb93 f0f0 	sdiv	r0, r3, r0
    31c0:	6853      	ldr	r3, [r2, #4]
    31c2:	4298      	cmp	r0, r3
    31c4:	bf38      	it	cc
    31c6:	4618      	movcc	r0, r3
    31c8:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    31ca:	4620      	mov	r0, r4
    31cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31ce:	bf00      	nop
    31d0:	00000081 	.word	0x00000081
    31d4:	000f4240 	.word	0x000f4240
    31d8:	20007258 	.word	0x20007258

000031dc <CFastLED::show(unsigned char)>:

void CFastLED::show(uint8_t scale) {
    31dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31e0:	6843      	ldr	r3, [r0, #4]
    31e2:	b083      	sub	sp, #12
    31e4:	4606      	mov	r6, r0
    31e6:	460f      	mov	r7, r1
    31e8:	4c34      	ldr	r4, [pc, #208]	; (32bc <CFastLED::show(unsigned char)+0xe0>)
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    31ea:	2b00      	cmp	r3, #0
    31ec:	d15d      	bne.n	32aa <CFastLED::show(unsigned char)+0xce>
	lastshow = micros();
    31ee:	f000 fc25 	bl	3a3c <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    31f2:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    31f4:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    31f6:	b11b      	cbz	r3, 3200 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    31f8:	4638      	mov	r0, r7
    31fa:	68b1      	ldr	r1, [r6, #8]
    31fc:	4798      	blx	r3
    31fe:	4607      	mov	r7, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    3200:	4b2f      	ldr	r3, [pc, #188]	; (32c0 <CFastLED::show(unsigned char)+0xe4>)
    3202:	681c      	ldr	r4, [r3, #0]
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3204:	2c00      	cmp	r4, #0
    3206:	d037      	beq.n	3278 <CFastLED::show(unsigned char)+0x9c>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3208:	2500      	movs	r5, #0
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    320a:	8873      	ldrh	r3, [r6, #2]
    320c:	f894 8012 	ldrb.w	r8, [r4, #18]
    3210:	2b63      	cmp	r3, #99	; 0x63
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3212:	6823      	ldr	r3, [r4, #0]
    3214:	6861      	ldr	r1, [r4, #4]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3216:	bf98      	it	ls
    3218:	74a5      	strbls	r5, [r4, #18]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    321a:	f88d 5004 	strb.w	r5, [sp, #4]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    321e:	f8d3 9004 	ldr.w	r9, [r3, #4]
    3222:	f88d 5005 	strb.w	r5, [sp, #5]
    3226:	f88d 5006 	strb.w	r5, [sp, #6]
    322a:	6962      	ldr	r2, [r4, #20]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    322c:	b1e7      	cbz	r7, 3268 <CFastLED::show(unsigned char)+0x8c>
    322e:	f104 000b 	add.w	r0, r4, #11
    3232:	f10d 0e04 	add.w	lr, sp, #4
    3236:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    323a:	f810 af01 	ldrb.w	sl, [r0, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    323e:	f890 b003 	ldrb.w	fp, [r0, #3]
                      if(cc > 0 && ct > 0) {
    3242:	f1ba 0f00 	cmp.w	sl, #0
    3246:	d00b      	beq.n	3260 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3248:	f10b 0301 	add.w	r3, fp, #1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    324c:	f1bb 0f00 	cmp.w	fp, #0
    3250:	d006      	beq.n	3260 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3252:	fb0a 3303 	mla	r3, sl, r3, r3
    3256:	fb07 f303 	mul.w	r3, r7, r3
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    325a:	0c1b      	lsrs	r3, r3, #16
    325c:	f88e 3000 	strb.w	r3, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    3260:	4584      	cmp	ip, r0
    3262:	f10e 0e01 	add.w	lr, lr, #1
    3266:	d1e8      	bne.n	323a <CFastLED::show(unsigned char)+0x5e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3268:	4620      	mov	r0, r4
    326a:	ab01      	add	r3, sp, #4
    326c:	47c8      	blx	r9

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    326e:	f884 8012 	strb.w	r8, [r4, #18]
    3272:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3274:	2c00      	cmp	r4, #0
    3276:	d1c8      	bne.n	320a <CFastLED::show(unsigned char)+0x2e>

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    3278:	4912      	ldr	r1, [pc, #72]	; (32c4 <CFastLED::show(unsigned char)+0xe8>)
    327a:	6808      	ldr	r0, [r1, #0]
    327c:	1c43      	adds	r3, r0, #1
    327e:	2818      	cmp	r0, #24
    3280:	600b      	str	r3, [r1, #0]
    3282:	dd0f      	ble.n	32a4 <CFastLED::show(unsigned char)+0xc8>
    3284:	4d10      	ldr	r5, [pc, #64]	; (32c8 <CFastLED::show(unsigned char)+0xec>)
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3286:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
    328a:	4c10      	ldr	r4, [pc, #64]	; (32cc <CFastLED::show(unsigned char)+0xf0>)
		m_nFPS = (br * 1000) / now;
    br = 0;
    328c:	2700      	movs	r7, #0
    328e:	6828      	ldr	r0, [r5, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3290:	fb02 f203 	mul.w	r2, r2, r3
    3294:	6823      	ldr	r3, [r4, #0]
    3296:	682d      	ldr	r5, [r5, #0]
    3298:	1ac3      	subs	r3, r0, r3
    br = 0;
    329a:	600f      	str	r7, [r1, #0]
    lastframe = millis();
    329c:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    329e:	fbb2 f3f3 	udiv	r3, r2, r3
    32a2:	8073      	strh	r3, [r6, #2]
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
    32a4:	b003      	add	sp, #12
    32a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    32aa:	f000 fbc7 	bl	3a3c <micros>
    32ae:	6822      	ldr	r2, [r4, #0]
    32b0:	6873      	ldr	r3, [r6, #4]
    32b2:	1a80      	subs	r0, r0, r2
    32b4:	4298      	cmp	r0, r3
    32b6:	d398      	bcc.n	31ea <CFastLED::show(unsigned char)+0xe>
    32b8:	e799      	b.n	31ee <CFastLED::show(unsigned char)+0x12>
    32ba:	bf00      	nop
    32bc:	20007270 	.word	0x20007270
    32c0:	20007268 	.word	0x20007268
    32c4:	2000726c 	.word	0x2000726c
    32c8:	20007288 	.word	0x20007288
    32cc:	20007274 	.word	0x20007274

000032d0 <CFastLED::setDither(unsigned char)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    32d0:	4b03      	ldr	r3, [pc, #12]	; (32e0 <CFastLED::setDither(unsigned char)+0x10>)
    32d2:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setDither(uint8_t ditherMode)  {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    32d4:	b11b      	cbz	r3, 32de <CFastLED::setDither(unsigned char)+0xe>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    32d6:	7499      	strb	r1, [r3, #18]
    32d8:	689b      	ldr	r3, [r3, #8]
    32da:	2b00      	cmp	r3, #0
    32dc:	d1fb      	bne.n	32d6 <CFastLED::setDither(unsigned char)+0x6>
    32de:	4770      	bx	lr
    32e0:	20007268 	.word	0x20007268

000032e4 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    32e4:	4b04      	ldr	r3, [pc, #16]	; (32f8 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    32e6:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    32e8:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    32ea:	f04f 31ff 	mov.w	r1, #4294967295

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    32ee:	805a      	strh	r2, [r3, #2]
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    32f0:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    32f2:	6099      	str	r1, [r3, #8]
CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
	m_pPowerFunc = NULL;
    32f4:	60da      	str	r2, [r3, #12]
    32f6:	4770      	bx	lr
    32f8:	20007258 	.word	0x20007258

000032fc <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    32fc:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    32fe:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    3300:	7846      	ldrb	r6, [r0, #1]
    3302:	00e3      	lsls	r3, r4, #3
    uint8_t val = hsv.val;
    3304:	7882      	ldrb	r2, [r0, #2]
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    3306:	0625      	lsls	r5, r4, #24
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3308:	f003 00f8 	and.w	r0, r3, #248	; 0xf8
    330c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    3310:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    3314:	4403      	add	r3, r0
    3316:	f3c3 2307 	ubfx	r3, r3, #8, #8
    331a:	d45f      	bmi.n	33dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    331c:	f004 0540 	and.w	r5, r4, #64	; 0x40
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    3320:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    3324:	f005 07ff 	and.w	r7, r5, #255	; 0xff
    3328:	2d00      	cmp	r5, #0
    332a:	d146      	bne.n	33ba <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    332c:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    3330:	2c00      	cmp	r4, #0
    3332:	d06c      	beq.n	340e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    3334:	3355      	adds	r3, #85	; 0x55
    3336:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    3338:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    333a:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    333c:	2eff      	cmp	r6, #255	; 0xff
    333e:	d01c      	beq.n	337a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    3340:	2e00      	cmp	r6, #0
    3342:	d079      	beq.n	3438 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    3344:	b11c      	cbz	r4, 334e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3346:	fb06 4404 	mla	r4, r6, r4, r4
    334a:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    334e:	b11d      	cbz	r5, 3358 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    3350:	fb06 5505 	mla	r5, r6, r5, r5
    3354:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    3358:	b11b      	cbz	r3, 3362 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    335a:	fb06 3303 	mla	r3, r6, r3, r3
    335e:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3362:	43f0      	mvns	r0, r6
    3364:	b2c0      	uxtb	r0, r0
    3366:	fb00 0000 	mla	r0, r0, r0, r0
    336a:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    336e:	4404      	add	r4, r0
            g += brightness_floor;
    3370:	4405      	add	r5, r0
            b += brightness_floor;
    3372:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    3374:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    3376:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    3378:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    337a:	2aff      	cmp	r2, #255	; 0xff
    337c:	d018      	beq.n	33b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    337e:	fb12 f002 	smulbb	r0, r2, r2
    3382:	3200      	adds	r2, #0
    3384:	bf18      	it	ne
    3386:	2201      	movne	r2, #1
    3388:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    338c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    3390:	d056      	beq.n	3440 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    3392:	b11c      	cbz	r4, 339c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3394:	fb02 4404 	mla	r4, r2, r4, r4
    3398:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    339c:	b11d      	cbz	r5, 33a6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    339e:	fb02 5505 	mla	r5, r2, r5, r5
    33a2:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    33a6:	b11b      	cbz	r3, 33b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    33a8:	fb02 3303 	mla	r3, r2, r3, r3
    33ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    33b0:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    33b2:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    33b4:	708b      	strb	r3, [r1, #2]
}
    33b6:	bcf0      	pop	{r4, r5, r6, r7}
    33b8:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    33ba:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    33be:	bb5c      	cbnz	r4, 3418 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    33c0:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
                    g = K170 + third;
    33c4:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    33c6:	eb00 0044 	add.w	r0, r0, r4, lsl #1
                    g = K170 + third;
    33ca:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    33cc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    33d0:	1204      	asrs	r4, r0, #8
    33d2:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
    33d6:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    33d8:	463b      	mov	r3, r7
    33da:	e7af      	b.n	333c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    33dc:	f004 0740 	and.w	r7, r4, #64	; 0x40
    33e0:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    33e4:	b9e7      	cbnz	r7, 3420 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    33e6:	f004 0720 	and.w	r7, r4, #32
    33ea:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    33ee:	2f00      	cmp	r7, #0
    33f0:	d136      	bne.n	3460 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    33f2:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    33f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    33fa:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    33fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    3402:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    3406:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    3408:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    340a:	b2c3      	uxtb	r3, r0
    340c:	e796      	b.n	333c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    340e:	43dc      	mvns	r4, r3
    3410:	b2e4      	uxtb	r4, r4
                g = third;
    3412:	461d      	mov	r5, r3
                b = 0;
    3414:	4603      	mov	r3, r0
    3416:	e791      	b.n	333c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    3418:	2400      	movs	r4, #0
                g = K255 - third;
    341a:	43dd      	mvns	r5, r3
    341c:	b2ed      	uxtb	r5, r5
    341e:	e78d      	b.n	333c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    3420:	f004 0420 	and.w	r4, r4, #32
    3424:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    3428:	b994      	cbnz	r4, 3450 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    342a:	f103 0455 	add.w	r4, r3, #85	; 0x55
    342e:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    3430:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    3434:	b2db      	uxtb	r3, r3
    3436:	e781      	b.n	333c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    3438:	23ff      	movs	r3, #255	; 0xff
    343a:	461d      	mov	r5, r3
    343c:	461c      	mov	r4, r3
    343e:	e79c      	b.n	337a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    3440:	4615      	mov	r5, r2
    3442:	4614      	mov	r4, r2
    3444:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    3446:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    3448:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    344a:	708b      	strb	r3, [r1, #2]
}
    344c:	bcf0      	pop	{r4, r5, r6, r7}
    344e:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    3450:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
                g = 0;
                FORCE_REFERENCE(g);
    3454:	2500      	movs	r5, #0
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    3456:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    3458:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    345c:	b2db      	uxtb	r3, r3
    345e:	e76d      	b.n	333c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    3460:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    3462:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    3464:	b2c3      	uxtb	r3, r0
    3466:	e769      	b.n	333c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00003468 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    346a:	b349      	cbz	r1, 34c0 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x58>
    346c:	1e4f      	subs	r7, r1, #1
    346e:	2200      	movs	r2, #0
    3470:	1cc3      	adds	r3, r0, #3
    3472:	b2bf      	uxth	r7, r7
    3474:	4615      	mov	r5, r2
    3476:	4614      	mov	r4, r2
    3478:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    347c:	3706      	adds	r7, #6
    347e:	19c6      	adds	r6, r0, r7
        red32   += *p++;
    3480:	f813 ec03 	ldrb.w	lr, [r3, #-3]
    3484:	3303      	adds	r3, #3
        green32 += *p++;
    3486:	f813 7c05 	ldrb.w	r7, [r3, #-5]
        blue32  += *p++;
    348a:	f813 0c04 	ldrb.w	r0, [r3, #-4]
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    348e:	42b3      	cmp	r3, r6
        red32   += *p++;
    3490:	4474      	add	r4, lr
        green32 += *p++;
    3492:	443d      	add	r5, r7
        blue32  += *p++;
    3494:	4402      	add	r2, r0
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3496:	d1f3      	bne.n	3480 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x18>
    3498:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    349c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    34a0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    34a4:	f3c4 1317 	ubfx	r3, r4, #4, #24
    34a8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    34ac:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    34b0:	0a12      	lsrs	r2, r2, #8
    34b2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    34b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    34ba:	1910      	adds	r0, r2, r4
}
    34bc:	4408      	add	r0, r1
    34be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    34c0:	460c      	mov	r4, r1
    34c2:	460a      	mov	r2, r1
    34c4:	e7f7      	b.n	34b6 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x4e>
    34c6:	bf00      	nop

000034c8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    34c8:	4b27      	ldr	r3, [pc, #156]	; (3568 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    34ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    34ce:	681c      	ldr	r4, [r3, #0]
    34d0:	b087      	sub	sp, #28
    34d2:	4680      	mov	r8, r0
    34d4:	460f      	mov	r7, r1
    uint32_t total_mW = gMCU_mW;
    34d6:	257d      	movs	r5, #125	; 0x7d

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    34d8:	b19c      	cbz	r4, 3502 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    34da:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3574 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xac>
    34de:	e007      	b.n	34f0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    34e0:	6961      	ldr	r1, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    34e2:	4630      	mov	r0, r6
    34e4:	b289      	uxth	r1, r1
    34e6:	f7ff ffbf 	bl	3468 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    34ea:	68a4      	ldr	r4, [r4, #8]
    34ec:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    34ee:	b144      	cbz	r4, 3502 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    34f0:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    34f4:	691b      	ldr	r3, [r3, #16]
    34f6:	454b      	cmp	r3, r9
    34f8:	d0f2      	beq.n	34e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    34fa:	4620      	mov	r0, r4
    34fc:	4798      	blx	r3
    34fe:	4601      	mov	r1, r0
    3500:	e7ef      	b.n	34e2 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    3502:	fb05 f508 	mul.w	r5, r5, r8
    3506:	0a2d      	lsrs	r5, r5, #8
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    3508:	42bd      	cmp	r5, r7
    350a:	d211      	bcs.n	3530 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x68>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    350c:	4b17      	ldr	r3, [pc, #92]	; (356c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
    350e:	781b      	ldrb	r3, [r3, #0]
    3510:	b32b      	cbz	r3, 355e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x96>
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    3512:	011b      	lsls	r3, r3, #4
    3514:	4a16      	ldr	r2, [pc, #88]	; (3570 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>)
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    3516:	4640      	mov	r0, r8
    3518:	18d1      	adds	r1, r2, r3
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    351a:	58d2      	ldr	r2, [r2, r3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    351c:	68cb      	ldr	r3, [r1, #12]
    351e:	9304      	str	r3, [sp, #16]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    3520:	9904      	ldr	r1, [sp, #16]
    3522:	6813      	ldr	r3, [r2, #0]
    3524:	ea23 0301 	bic.w	r3, r3, r1
    3528:	6013      	str	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    352a:	b007      	add	sp, #28
    352c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    3530:	fb07 f708 	mul.w	r7, r7, r8

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    3534:	4b0d      	ldr	r3, [pc, #52]	; (356c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    3536:	fbb7 f5f5 	udiv	r5, r7, r5

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    353a:	781b      	ldrb	r3, [r3, #0]
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    353c:	fa5f f885 	uxtb.w	r8, r5

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    3540:	b16b      	cbz	r3, 355e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x96>
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    3542:	011b      	lsls	r3, r3, #4
    3544:	4a0a      	ldr	r2, [pc, #40]	; (3570 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>)
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    3546:	4640      	mov	r0, r8
    3548:	18d1      	adds	r1, r2, r3
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    354a:	58d2      	ldr	r2, [r2, r3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    354c:	68cb      	ldr	r3, [r1, #12]
    354e:	9304      	str	r3, [sp, #16]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    3550:	9904      	ldr	r1, [sp, #16]
    3552:	6813      	ldr	r3, [r2, #0]
    3554:	430b      	orrs	r3, r1
    3556:	6013      	str	r3, [r2, #0]
}
    3558:	b007      	add	sp, #28
    355a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    355e:	4640      	mov	r0, r8
}
    3560:	b007      	add	sp, #28
    3562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3566:	bf00      	nop
    3568:	20007268 	.word	0x20007268
    356c:	2000727c 	.word	0x2000727c
    3570:	200011e8 	.word	0x200011e8
    3574:	0000007d 	.word	0x0000007d

00003578 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    3578:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    357a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    357e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    3582:	d16d      	bne.n	3660 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3584:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    3586:	d341      	bcc.n	360c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3588:	f851 3b04 	ldr.w	r3, [r1], #4
    358c:	f840 3b04 	str.w	r3, [r0], #4
    3590:	f851 3b04 	ldr.w	r3, [r1], #4
    3594:	f840 3b04 	str.w	r3, [r0], #4
    3598:	f851 3b04 	ldr.w	r3, [r1], #4
    359c:	f840 3b04 	str.w	r3, [r0], #4
    35a0:	f851 3b04 	ldr.w	r3, [r1], #4
    35a4:	f840 3b04 	str.w	r3, [r0], #4
    35a8:	f851 3b04 	ldr.w	r3, [r1], #4
    35ac:	f840 3b04 	str.w	r3, [r0], #4
    35b0:	f851 3b04 	ldr.w	r3, [r1], #4
    35b4:	f840 3b04 	str.w	r3, [r0], #4
    35b8:	f851 3b04 	ldr.w	r3, [r1], #4
    35bc:	f840 3b04 	str.w	r3, [r0], #4
    35c0:	f851 3b04 	ldr.w	r3, [r1], #4
    35c4:	f840 3b04 	str.w	r3, [r0], #4
    35c8:	f851 3b04 	ldr.w	r3, [r1], #4
    35cc:	f840 3b04 	str.w	r3, [r0], #4
    35d0:	f851 3b04 	ldr.w	r3, [r1], #4
    35d4:	f840 3b04 	str.w	r3, [r0], #4
    35d8:	f851 3b04 	ldr.w	r3, [r1], #4
    35dc:	f840 3b04 	str.w	r3, [r0], #4
    35e0:	f851 3b04 	ldr.w	r3, [r1], #4
    35e4:	f840 3b04 	str.w	r3, [r0], #4
    35e8:	f851 3b04 	ldr.w	r3, [r1], #4
    35ec:	f840 3b04 	str.w	r3, [r0], #4
    35f0:	f851 3b04 	ldr.w	r3, [r1], #4
    35f4:	f840 3b04 	str.w	r3, [r0], #4
    35f8:	f851 3b04 	ldr.w	r3, [r1], #4
    35fc:	f840 3b04 	str.w	r3, [r0], #4
    3600:	f851 3b04 	ldr.w	r3, [r1], #4
    3604:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3608:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    360a:	d2bd      	bcs.n	3588 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    360c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    360e:	d311      	bcc.n	3634 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3610:	f851 3b04 	ldr.w	r3, [r1], #4
    3614:	f840 3b04 	str.w	r3, [r0], #4
    3618:	f851 3b04 	ldr.w	r3, [r1], #4
    361c:	f840 3b04 	str.w	r3, [r0], #4
    3620:	f851 3b04 	ldr.w	r3, [r1], #4
    3624:	f840 3b04 	str.w	r3, [r0], #4
    3628:	f851 3b04 	ldr.w	r3, [r1], #4
    362c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3630:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3632:	d2ed      	bcs.n	3610 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3634:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3636:	d305      	bcc.n	3644 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3638:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    363c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3640:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3642:	d2f9      	bcs.n	3638 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3644:	3204      	adds	r2, #4
	beq	.Ldone
    3646:	d008      	beq.n	365a <memcpy+0xe2>

	lsls	r2, r2, #31
    3648:	07d2      	lsls	r2, r2, #31
	itt ne
    364a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    364c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3650:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3654:	d301      	bcc.n	365a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3656:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3658:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    365a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    365c:	4770      	bx	lr
    365e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3660:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3662:	d313      	bcc.n	368c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3664:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    3666:	d08d      	beq.n	3584 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3668:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    366c:	d08a      	beq.n	3584 <memcpy+0xc>

	rsb	r3, #4
    366e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3672:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3674:	07db      	lsls	r3, r3, #31
	itt ne
    3676:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3678:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    367c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3680:	d380      	bcc.n	3584 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3682:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    3686:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    368a:	e77b      	b.n	3584 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    368c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    368e:	d3d9      	bcc.n	3644 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3690:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3692:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    3696:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    369a:	d2f9      	bcs.n	3690 <memcpy+0x118>

	ldrb	r3, [r1]
    369c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    369e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    36a0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    36a2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    36a4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    36a6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    36a8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    36aa:	4770      	bx	lr

000036ac <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    36ac:	4a96      	ldr	r2, [pc, #600]	; (3908 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    36ae:	4b97      	ldr	r3, [pc, #604]	; (390c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    36b0:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    36b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    36b6:	4c96      	ldr	r4, [pc, #600]	; (3910 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    36b8:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    36bc:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    36be:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    36c0:	d91c      	bls.n	36fc <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    36c2:	4b94      	ldr	r3, [pc, #592]	; (3914 <set_arm_clock+0x268>)
    36c4:	4298      	cmp	r0, r3
    36c6:	f240 8115 	bls.w	38f4 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    36ca:	4b93      	ldr	r3, [pc, #588]	; (3918 <set_arm_clock+0x26c>)
    36cc:	f240 6527 	movw	r5, #1575	; 0x627
    36d0:	4f92      	ldr	r7, [pc, #584]	; (391c <set_arm_clock+0x270>)
    36d2:	4403      	add	r3, r0
    36d4:	4c92      	ldr	r4, [pc, #584]	; (3920 <set_arm_clock+0x274>)
    36d6:	0a1a      	lsrs	r2, r3, #8
    36d8:	fba7 3202 	umull	r3, r2, r7, r2
    36dc:	09d3      	lsrs	r3, r2, #7
    36de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    36e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    36e6:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    36ea:	42ab      	cmp	r3, r5
    36ec:	bf28      	it	cs
    36ee:	462b      	movcs	r3, r5
    36f0:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    36f4:	fba4 3503 	umull	r3, r5, r4, r3
    36f8:	08ed      	lsrs	r5, r5, #3
    36fa:	e004      	b.n	3706 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    36fc:	4d89      	ldr	r5, [pc, #548]	; (3924 <set_arm_clock+0x278>)
    36fe:	42a8      	cmp	r0, r5
    3700:	bf94      	ite	ls
    3702:	2506      	movls	r5, #6
    3704:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3706:	4a81      	ldr	r2, [pc, #516]	; (390c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3708:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    370c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3710:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3712:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3716:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    371a:	d20a      	bcs.n	3732 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    371c:	4b7c      	ldr	r3, [pc, #496]	; (3910 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    371e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3722:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3724:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    3726:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3728:	6813      	ldr	r3, [r2, #0]
    372a:	2b00      	cmp	r3, #0
    372c:	dafc      	bge.n	3728 <set_arm_clock+0x7c>
    372e:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3732:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    3736:	d131      	bne.n	379c <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    3738:	4c7b      	ldr	r4, [pc, #492]	; (3928 <set_arm_clock+0x27c>)
    373a:	4a7c      	ldr	r2, [pc, #496]	; (392c <set_arm_clock+0x280>)
    373c:	f8d4 c010 	ldr.w	ip, [r4, #16]
    3740:	4614      	mov	r4, r2
    3742:	ea0c 0202 	and.w	r2, ip, r2
    3746:	42a2      	cmp	r2, r4
    3748:	bf0a      	itet	eq
    374a:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    374e:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    3752:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3754:	ea8e 0403 	eor.w	r4, lr, r3
    3758:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    375c:	d008      	beq.n	3770 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    375e:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3762:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    3766:	4c69      	ldr	r4, [pc, #420]	; (390c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3768:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    376c:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3770:	ea81 0302 	eor.w	r3, r1, r2
    3774:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    3778:	d008      	beq.n	378c <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    377a:	4b64      	ldr	r3, [pc, #400]	; (390c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    377c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3780:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3782:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    3784:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3786:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3788:	071c      	lsls	r4, r3, #28
    378a:	d4fc      	bmi.n	3786 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    378c:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3790:	4a5e      	ldr	r2, [pc, #376]	; (390c <set_arm_clock+0x260>)
    3792:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3796:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3798:	0699      	lsls	r1, r3, #26
    379a:	d4fc      	bmi.n	3796 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    379c:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    379e:	4c64      	ldr	r4, [pc, #400]	; (3930 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    37a0:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    37a2:	fb01 f302 	mul.w	r3, r1, r2
    37a6:	fb00 f303 	mul.w	r3, r0, r3
    37aa:	42a3      	cmp	r3, r4
    37ac:	d809      	bhi.n	37c2 <set_arm_clock+0x116>
		if (div_arm < 8) {
    37ae:	2a07      	cmp	r2, #7
    37b0:	f200 8095 	bhi.w	38de <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    37b4:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    37b6:	fb01 f302 	mul.w	r3, r1, r2
    37ba:	fb00 f303 	mul.w	r3, r0, r3
    37be:	42a3      	cmp	r3, r4
    37c0:	d9f5      	bls.n	37ae <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    37c2:	485c      	ldr	r0, [pc, #368]	; (3934 <set_arm_clock+0x288>)
    37c4:	4c5c      	ldr	r4, [pc, #368]	; (3938 <set_arm_clock+0x28c>)
    37c6:	4418      	add	r0, r3
    37c8:	fba4 0300 	umull	r0, r3, r4, r0
    37cc:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    37ce:	2b6c      	cmp	r3, #108	; 0x6c
    37d0:	f200 808b 	bhi.w	38ea <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    37d4:	2b35      	cmp	r3, #53	; 0x35
    37d6:	f200 808f 	bhi.w	38f8 <set_arm_clock+0x24c>
    37da:	f8df 8188 	ldr.w	r8, [pc, #392]	; 3964 <set_arm_clock+0x2b8>
    37de:	2336      	movs	r3, #54	; 0x36
    37e0:	4856      	ldr	r0, [pc, #344]	; (393c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    37e2:	f8df c144 	ldr.w	ip, [pc, #324]	; 3928 <set_arm_clock+0x27c>
    37e6:	4c56      	ldr	r4, [pc, #344]	; (3940 <set_arm_clock+0x294>)
    37e8:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    37ec:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    37f0:	ea09 0404 	and.w	r4, r9, r4
    37f4:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    37f6:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    37fa:	d00b      	beq.n	3814 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    37fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3800:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3804:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3806:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    380a:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    380e:	6823      	ldr	r3, [r4, #0]
    3810:	2b00      	cmp	r3, #0
    3812:	dafc      	bge.n	380e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3814:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 390c <set_arm_clock+0x260>
    3818:	3a01      	subs	r2, #1
    381a:	f8dc 3010 	ldr.w	r3, [ip, #16]
    381e:	f003 0307 	and.w	r3, r3, #7
    3822:	4293      	cmp	r3, r2
    3824:	d007      	beq.n	3836 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3826:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    382a:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    382c:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    3830:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3832:	03db      	lsls	r3, r3, #15
    3834:	d4fc      	bmi.n	3830 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3836:	3901      	subs	r1, #1
    3838:	0289      	lsls	r1, r1, #10
    383a:	ea8e 0301 	eor.w	r3, lr, r1
    383e:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    3842:	d00c      	beq.n	385e <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    3844:	4b31      	ldr	r3, [pc, #196]	; (390c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    3846:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    384a:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    384e:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3850:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    3854:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3858:	6c93      	ldr	r3, [r2, #72]	; 0x48
    385a:	0799      	lsls	r1, r3, #30
    385c:	d4fc      	bmi.n	3858 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    385e:	4b39      	ldr	r3, [pc, #228]	; (3944 <set_arm_clock+0x298>)
    3860:	4939      	ldr	r1, [pc, #228]	; (3948 <set_arm_clock+0x29c>)
    3862:	4403      	add	r3, r0
    3864:	09db      	lsrs	r3, r3, #7
    3866:	fba1 3103 	umull	r3, r1, r1, r3
    386a:	0b09      	lsrs	r1, r1, #12
    386c:	2904      	cmp	r1, #4
    386e:	bf28      	it	cs
    3870:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3872:	1e4b      	subs	r3, r1, #1
    3874:	021b      	lsls	r3, r3, #8
    3876:	ea8e 0203 	eor.w	r2, lr, r3
    387a:	f412 7f40 	tst.w	r2, #768	; 0x300
    387e:	d007      	beq.n	3890 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3880:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3884:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    3888:	4a20      	ldr	r2, [pc, #128]	; (390c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    388a:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    388e:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3890:	4b1e      	ldr	r3, [pc, #120]	; (390c <set_arm_clock+0x260>)
    3892:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3894:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3896:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    389a:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    389c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    389e:	069b      	lsls	r3, r3, #26
    38a0:	d4fc      	bmi.n	389c <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38a2:	4b2a      	ldr	r3, [pc, #168]	; (394c <set_arm_clock+0x2a0>)
    38a4:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    38a8:	4c29      	ldr	r4, [pc, #164]	; (3950 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    38aa:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38ac:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    38b0:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38b2:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    38b6:	4c27      	ldr	r4, [pc, #156]	; (3954 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38b8:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    38bc:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38c0:	4a25      	ldr	r2, [pc, #148]	; (3958 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    38c2:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    38c4:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    38c6:	d208      	bcs.n	38da <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    38c8:	4b11      	ldr	r3, [pc, #68]	; (3910 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    38ca:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    38ce:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    38d0:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    38d2:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    38d4:	6813      	ldr	r3, [r2, #0]
    38d6:	2b00      	cmp	r3, #0
    38d8:	dafc      	bge.n	38d4 <set_arm_clock+0x228>
	}

	return frequency;
}
    38da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    38de:	2904      	cmp	r1, #4
    38e0:	f63f af6f 	bhi.w	37c2 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    38e4:	3101      	adds	r1, #1
				div_arm = 1;
    38e6:	2201      	movs	r2, #1
    38e8:	e75b      	b.n	37a2 <set_arm_clock+0xf6>
    38ea:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3968 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    38ee:	236c      	movs	r3, #108	; 0x6c
    38f0:	481a      	ldr	r0, [pc, #104]	; (395c <set_arm_clock+0x2b0>)
    38f2:	e776      	b.n	37e2 <set_arm_clock+0x136>
    38f4:	2512      	movs	r5, #18
    38f6:	e706      	b.n	3706 <set_arm_clock+0x5a>
    38f8:	4819      	ldr	r0, [pc, #100]	; (3960 <set_arm_clock+0x2b4>)
    38fa:	f8df 8070 	ldr.w	r8, [pc, #112]	; 396c <set_arm_clock+0x2c0>
    38fe:	fb00 f003 	mul.w	r0, r0, r3
    3902:	ea43 0808 	orr.w	r8, r3, r8
    3906:	e76c      	b.n	37e2 <set_arm_clock+0x136>
    3908:	1f78a400 	.word	0x1f78a400
    390c:	400fc000 	.word	0x400fc000
    3910:	40080000 	.word	0x40080000
    3914:	23c34600 	.word	0x23c34600
    3918:	dc3cba00 	.word	0xdc3cba00
    391c:	004cb223 	.word	0x004cb223
    3920:	51eb851f 	.word	0x51eb851f
    3924:	016e3600 	.word	0x016e3600
    3928:	400d8000 	.word	0x400d8000
    392c:	80003040 	.word	0x80003040
    3930:	269fb1ff 	.word	0x269fb1ff
    3934:	005b8d80 	.word	0x005b8d80
    3938:	165e9f81 	.word	0x165e9f81
    393c:	269fb200 	.word	0x269fb200
    3940:	8001307f 	.word	0x8001307f
    3944:	08f0d17f 	.word	0x08f0d17f
    3948:	00e5109f 	.word	0x00e5109f
    394c:	431bde83 	.word	0x431bde83
    3950:	20004ddc 	.word	0x20004ddc
    3954:	20004dd8 	.word	0x20004dd8
    3958:	20007284 	.word	0x20007284
    395c:	4d3f6400 	.word	0x4d3f6400
    3960:	00b71b00 	.word	0x00b71b00
    3964:	80002036 	.word	0x80002036
    3968:	8000206c 	.word	0x8000206c
    396c:	80002000 	.word	0x80002000

00003970 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    3970:	2800      	cmp	r0, #0
    3972:	d057      	beq.n	3a24 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3974:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    3976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    397a:	b085      	sub	sp, #20
    397c:	4683      	mov	fp, r0
    397e:	4c2a      	ldr	r4, [pc, #168]	; (3a28 <delay+0xb8>)
    3980:	4d2a      	ldr	r5, [pc, #168]	; (3a2c <delay+0xbc>)
    3982:	4e2b      	ldr	r6, [pc, #172]	; (3a30 <delay+0xc0>)
    3984:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3988:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    398c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    398e:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3990:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3994:	2900      	cmp	r1, #0
    3996:	d1f7      	bne.n	3988 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3998:	4f26      	ldr	r7, [pc, #152]	; (3a34 <delay+0xc4>)
    399a:	e9cd 8902 	strd	r8, r9, [sp, #8]
    399e:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    39a0:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39a2:	4a25      	ldr	r2, [pc, #148]	; (3a38 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    39a4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    39a8:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39aa:	6812      	ldr	r2, [r2, #0]
    39ac:	2701      	movs	r7, #1
    39ae:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    39b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39b6:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    39b8:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39ba:	428b      	cmp	r3, r1
    39bc:	bf08      	it	eq
    39be:	4542      	cmpeq	r2, r8
    39c0:	bf2c      	ite	cs
    39c2:	46c2      	movcs	sl, r8
    39c4:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    39c6:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    39ca:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    39ce:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    39d0:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    39d2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    39d6:	2b00      	cmp	r3, #0
    39d8:	d1f7      	bne.n	39ca <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    39da:	9801      	ldr	r0, [sp, #4]
    39dc:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    39de:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39e0:	4815      	ldr	r0, [pc, #84]	; (3a38 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    39e2:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39e6:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    39e8:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39ec:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    39f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    39f4:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39f8:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    39fa:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    39fc:	4299      	cmp	r1, r3
    39fe:	bf08      	it	eq
    3a00:	4540      	cmpeq	r0, r8
    3a02:	bf2c      	ite	cs
    3a04:	4643      	movcs	r3, r8
    3a06:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3a08:	441a      	add	r2, r3
    3a0a:	4572      	cmp	r2, lr
    3a0c:	d307      	bcc.n	3a1e <delay+0xae>
			if (--msec == 0) return;
    3a0e:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    3a12:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    3a16:	d1d8      	bne.n	39ca <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    3a18:	b005      	add	sp, #20
    3a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    3a1e:	f001 fe07 	bl	5630 <yield>
	}
    3a22:	e7d2      	b.n	39ca <delay+0x5a>
    3a24:	4770      	bx	lr
    3a26:	bf00      	nop
    3a28:	200075bc 	.word	0x200075bc
    3a2c:	20007288 	.word	0x20007288
    3a30:	20007280 	.word	0x20007280
    3a34:	e0001004 	.word	0xe0001004
    3a38:	20007284 	.word	0x20007284

00003a3c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    3a3c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    3a40:	4a12      	ldr	r2, [pc, #72]	; (3a8c <micros+0x50>)
    3a42:	2601      	movs	r6, #1
    3a44:	4d12      	ldr	r5, [pc, #72]	; (3a90 <micros+0x54>)
    3a46:	4c13      	ldr	r4, [pc, #76]	; (3a94 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3a48:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3a4c:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    3a4e:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3a50:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    3a54:	2b00      	cmp	r3, #0
    3a56:	d1f7      	bne.n	3a48 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3a58:	4a0f      	ldr	r2, [pc, #60]	; (3a98 <micros+0x5c>)
    3a5a:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a5c:	4f0f      	ldr	r7, [pc, #60]	; (3a9c <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    3a5e:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    3a60:	f04f 0900 	mov.w	r9, #0
    3a64:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a68:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    3a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3a6e:	4599      	cmp	r9, r3
    3a70:	fba2 6706 	umull	r6, r7, r2, r6
    3a74:	bf08      	it	eq
    3a76:	45b8      	cmpeq	r8, r7
    3a78:	463c      	mov	r4, r7
    3a7a:	bf2c      	ite	cs
    3a7c:	463c      	movcs	r4, r7
    3a7e:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    3a80:	fb00 4001 	mla	r0, r0, r1, r4
    3a84:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    3a88:	4770      	bx	lr
    3a8a:	bf00      	nop
    3a8c:	200075bc 	.word	0x200075bc
    3a90:	20007288 	.word	0x20007288
    3a94:	20007280 	.word	0x20007280
    3a98:	e0001004 	.word	0xe0001004
    3a9c:	20007284 	.word	0x20007284

00003aa0 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    3aa0:	0100      	lsls	r0, r0, #4
    3aa2:	4b0f      	ldr	r3, [pc, #60]	; (3ae0 <digitalWrite.part.0+0x40>)
    3aa4:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    3aa6:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    3aa8:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    3aaa:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    3aac:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    3aae:	4204      	tst	r4, r0
    3ab0:	d005      	beq.n	3abe <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    3ab2:	b159      	cbz	r1, 3acc <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    3ab4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
    3abc:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3abe:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    3ac0:	b949      	cbnz	r1, 3ad6 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3ac2:	4a08      	ldr	r2, [pc, #32]	; (3ae4 <digitalWrite.part.0+0x44>)
		}
	}
}
    3ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3ac8:	601a      	str	r2, [r3, #0]
		}
	}
}
    3aca:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    3acc:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
    3ad4:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3ad6:	4a04      	ldr	r2, [pc, #16]	; (3ae8 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3adc:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3ade:	4770      	bx	lr
    3ae0:	200011e8 	.word	0x200011e8
    3ae4:	00013038 	.word	0x00013038
    3ae8:	0001f038 	.word	0x0001f038

00003aec <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    3aec:	2827      	cmp	r0, #39	; 0x27
    3aee:	d801      	bhi.n	3af4 <digitalWrite+0x8>
    3af0:	f7ff bfd6 	b.w	3aa0 <digitalWrite.part.0>
    3af4:	4770      	bx	lr
    3af6:	bf00      	nop

00003af8 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3af8:	48a4      	ldr	r0, [pc, #656]	; (3d8c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3afa:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3afe:	4ba4      	ldr	r3, [pc, #656]	; (3d90 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3b00:	6f82      	ldr	r2, [r0, #120]	; 0x78
    3b02:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    3b06:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3b08:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    3b0a:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b0c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3b10:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b14:	4c9f      	ldr	r4, [pc, #636]	; (3d94 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3b16:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3b1a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3b1c:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b20:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3b22:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b24:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3b28:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3b2c:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3b30:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3b34:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3b38:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3b3c:	b280      	uxth	r0, r0
    3b3e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3b42:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3b46:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3b4a:	4b91      	ldr	r3, [pc, #580]	; (3d90 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    3b4c:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3b4e:	2500      	movs	r5, #0
    3b50:	0140      	lsls	r0, r0, #5
    3b52:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3b54:	2904      	cmp	r1, #4
    3b56:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3b58:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3b5c:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    3b5e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3b60:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3b62:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3b64:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3b66:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3b68:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3b6a:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3b6c:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3b6e:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3b70:	d1e9      	bne.n	3b46 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3b72:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3b76:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3b7a:	4b87      	ldr	r3, [pc, #540]	; (3d98 <pwm_init+0x2a0>)
    3b7c:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3b80:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3b82:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3b84:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3b88:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3b8a:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3b8e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3b92:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3b96:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    3b9a:	b280      	uxth	r0, r0
    3b9c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3ba0:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3ba4:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3ba8:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3bac:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3bb0:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3bb4:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3bb8:	b280      	uxth	r0, r0
    3bba:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3bbe:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3bc2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3bc6:	4b74      	ldr	r3, [pc, #464]	; (3d98 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    3bc8:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3bca:	2500      	movs	r5, #0
    3bcc:	0140      	lsls	r0, r0, #5
    3bce:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3bd0:	2904      	cmp	r1, #4
    3bd2:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3bd4:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3bd6:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3bda:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3bdc:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3bde:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3be0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3be2:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3be4:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3be6:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3be8:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3bea:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3bec:	d1e9      	bne.n	3bc2 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3bee:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3bf2:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3bf6:	4b69      	ldr	r3, [pc, #420]	; (3d9c <pwm_init+0x2a4>)
    3bf8:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3bfc:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3bfe:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3c00:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3c04:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c06:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3c0a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c0e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3c12:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    3c16:	b280      	uxth	r0, r0
    3c18:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3c1c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3c20:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3c24:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3c28:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3c2c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3c30:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3c34:	b280      	uxth	r0, r0
    3c36:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3c3a:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3c3e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3c42:	4b56      	ldr	r3, [pc, #344]	; (3d9c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    3c44:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3c46:	2500      	movs	r5, #0
    3c48:	0140      	lsls	r0, r0, #5
    3c4a:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3c4c:	2904      	cmp	r1, #4
    3c4e:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3c50:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3c52:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3c56:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3c58:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3c5a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3c5c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3c5e:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3c60:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3c62:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3c64:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3c66:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3c68:	d1e9      	bne.n	3c3e <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c6a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3c6e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3c72:	4b4b      	ldr	r3, [pc, #300]	; (3da0 <pwm_init+0x2a8>)
    3c74:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c78:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3c7a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3c7c:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3c80:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c82:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3c86:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3c8a:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3c8e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    3c92:	b280      	uxth	r0, r0
    3c94:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3c98:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3c9c:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3ca0:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3ca4:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3ca8:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3cac:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3cb0:	b280      	uxth	r0, r0
    3cb2:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3cb6:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    3cba:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    3cbe:	4b38      	ldr	r3, [pc, #224]	; (3da0 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    3cc0:	3101      	adds	r1, #1
    3cc2:	0140      	lsls	r0, r0, #5
    3cc4:	461c      	mov	r4, r3
    3cc6:	2904      	cmp	r1, #4
    3cc8:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3cca:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3ccc:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3cd0:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3cd2:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3cd4:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3cd6:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3cd8:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    3cda:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3cdc:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3cde:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3ce0:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3ce2:	d1ea      	bne.n	3cba <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3ce4:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3ce8:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3cea:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3cec:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3cf0:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3cf2:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3cf6:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3cf8:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3cfc:	433b      	orrs	r3, r7
    3cfe:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3d02:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    3d06:	b29b      	uxth	r3, r3
    3d08:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    3d0c:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3d10:	0150      	lsls	r0, r2, #5
    3d12:	4b24      	ldr	r3, [pc, #144]	; (3da4 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d14:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3d16:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d18:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3d1a:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3d1c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3d1e:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3d20:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3d22:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3d26:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3d28:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3d2a:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d2c:	d1f0      	bne.n	3d10 <pwm_init+0x218>
    3d2e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3d30:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3d32:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3d36:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3d3a:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3d3c:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3d40:	0150      	lsls	r0, r2, #5
    3d42:	4b19      	ldr	r3, [pc, #100]	; (3da8 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d44:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3d46:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d48:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3d4a:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3d4c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3d4e:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3d50:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3d52:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3d54:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3d56:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3d58:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d5a:	d1f1      	bne.n	3d40 <pwm_init+0x248>
    3d5c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3d5e:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3d60:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3d64:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3d68:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3d6a:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3d6e:	0150      	lsls	r0, r2, #5
    3d70:	4b0e      	ldr	r3, [pc, #56]	; (3dac <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d72:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3d74:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d76:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3d78:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3d7a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3d7c:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3d7e:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3d80:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3d82:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3d84:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3d86:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3d88:	d1f1      	bne.n	3d6e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    3d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d8c:	400fc000 	.word	0x400fc000
    3d90:	403dc000 	.word	0x403dc000
    3d94:	fc030000 	.word	0xfc030000
    3d98:	403e0000 	.word	0x403e0000
    3d9c:	403e4000 	.word	0x403e4000
    3da0:	403e8000 	.word	0x403e8000
    3da4:	401dc000 	.word	0x401dc000
    3da8:	401e0000 	.word	0x401e0000
    3dac:	401e4000 	.word	0x401e4000

00003db0 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    3db0:	2004      	movs	r0, #4
    3db2:	4671      	mov	r1, lr
    3db4:	4208      	tst	r0, r1
    3db6:	d003      	beq.n	3dc0 <_MSP>
    3db8:	f3ef 8009 	mrs	r0, PSP
    3dbc:	f000 b808 	b.w	3dd0 <HardFault_HandlerC>

00003dc0 <_MSP>:
    3dc0:	f3ef 8008 	mrs	r0, MSP
    3dc4:	f000 b804 	b.w	3dd0 <HardFault_HandlerC>

00003dc8 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop

00003dcc <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    3dcc:	4770      	bx	lr
    3dce:	bf00      	nop

00003dd0 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3dd0:	4b1b      	ldr	r3, [pc, #108]	; (3e40 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    3dd2:	2105      	movs	r1, #5
    3dd4:	4a1b      	ldr	r2, [pc, #108]	; (3e44 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    3dd6:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    3dd8:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    3dda:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    3dde:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    3de0:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    3de4:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3de6:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3de8:	4c17      	ldr	r4, [pc, #92]	; (3e48 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3dea:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3dec:	4817      	ldr	r0, [pc, #92]	; (3e4c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3dee:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    3df0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3df4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    3df8:	6823      	ldr	r3, [r4, #0]
    3dfa:	4283      	cmp	r3, r0
    3dfc:	d902      	bls.n	3e04 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    3dfe:	4814      	ldr	r0, [pc, #80]	; (3e50 <HardFault_HandlerC+0x80>)
    3e00:	f7ff fc54 	bl	36ac <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    3e04:	4d0e      	ldr	r5, [pc, #56]	; (3e40 <HardFault_HandlerC+0x70>)
    3e06:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    3e08:	2000      	movs	r0, #0
    3e0a:	4a12      	ldr	r2, [pc, #72]	; (3e54 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3e0c:	4912      	ldr	r1, [pc, #72]	; (3e58 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    3e0e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    3e12:	9001      	str	r0, [sp, #4]
    3e14:	9b01      	ldr	r3, [sp, #4]
    3e16:	4293      	cmp	r3, r2
    3e18:	d805      	bhi.n	3e26 <HardFault_HandlerC+0x56>
    3e1a:	9b01      	ldr	r3, [sp, #4]
    3e1c:	3301      	adds	r3, #1
    3e1e:	9301      	str	r3, [sp, #4]
    3e20:	9b01      	ldr	r3, [sp, #4]
    3e22:	4293      	cmp	r3, r2
    3e24:	d9f9      	bls.n	3e1a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3e26:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3e2a:	9001      	str	r0, [sp, #4]
    3e2c:	9b01      	ldr	r3, [sp, #4]
    3e2e:	428b      	cmp	r3, r1
    3e30:	d8ed      	bhi.n	3e0e <HardFault_HandlerC+0x3e>
    3e32:	9b01      	ldr	r3, [sp, #4]
    3e34:	3301      	adds	r3, #1
    3e36:	9301      	str	r3, [sp, #4]
    3e38:	9b01      	ldr	r3, [sp, #4]
    3e3a:	428b      	cmp	r3, r1
    3e3c:	d9f9      	bls.n	3e32 <HardFault_HandlerC+0x62>
    3e3e:	e7e6      	b.n	3e0e <HardFault_HandlerC+0x3e>
    3e40:	401bc000 	.word	0x401bc000
    3e44:	401f8000 	.word	0x401f8000
    3e48:	20004ddc 	.word	0x20004ddc
    3e4c:	23c345ff 	.word	0x23c345ff
    3e50:	11e1a300 	.word	0x11e1a300
    3e54:	000f423f 	.word	0x000f423f
    3e58:	0089543f 	.word	0x0089543f

00003e5c <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    3e5c:	4a09      	ldr	r2, [pc, #36]	; (3e84 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    3e5e:	b508      	push	{r3, lr}
        char *prev = __brkval;
    3e60:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    3e62:	b120      	cbz	r0, 3e6e <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    3e64:	4418      	add	r0, r3
    3e66:	4908      	ldr	r1, [pc, #32]	; (3e88 <_sbrk+0x2c>)
    3e68:	4288      	cmp	r0, r1
    3e6a:	d802      	bhi.n	3e72 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    3e6c:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    3e6e:	4618      	mov	r0, r3
    3e70:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    3e72:	f002 f9d3 	bl	621c <__errno>
    3e76:	220c      	movs	r2, #12
                        return (void *)-1;
    3e78:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    3e7c:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    3e7e:	4618      	mov	r0, r3
    3e80:	bd08      	pop	{r3, pc}
    3e82:	bf00      	nop
    3e84:	20004de0 	.word	0x20004de0
    3e88:	20280000 	.word	0x20280000

00003e8c <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    3e8c:	bf30      	wfi
    3e8e:	e7fd      	b.n	3e8c <__cxa_pure_virtual>

00003e90 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    3e90:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    3e92:	4a06      	ldr	r2, [pc, #24]	; (3eac <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    3e94:	2107      	movs	r1, #7
    3e96:	4b06      	ldr	r3, [pc, #24]	; (3eb0 <Panic_Temp_isr+0x20>)
    3e98:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    3e9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    3e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3ea0:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    3ea2:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    3ea6:	bf30      	wfi
    3ea8:	e7fd      	b.n	3ea6 <Panic_Temp_isr+0x16>
    3eaa:	bf00      	nop
    3eac:	400d4000 	.word	0x400d4000
    3eb0:	400ac000 	.word	0x400ac000

00003eb4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3eb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    3eb6:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3eb8:	b11b      	cbz	r3, 3ec2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    3eba:	6853      	ldr	r3, [r2, #4]
    3ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3ec0:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    3ec2:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    3ec4:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    3ec6:	b1dc      	cbz	r4, 3f00 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    3ec8:	4b14      	ldr	r3, [pc, #80]	; (3f1c <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    3eca:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    3ecc:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    3ed0:	420c      	tst	r4, r1
    3ed2:	d11f      	bne.n	3f14 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    3ed4:	4d12      	ldr	r5, [pc, #72]	; (3f20 <schedule_transfer+0x6c>)
    3ed6:	682f      	ldr	r7, [r5, #0]
    3ed8:	e004      	b.n	3ee4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3eda:	682c      	ldr	r4, [r5, #0]
    3edc:	1be4      	subs	r4, r4, r7
    3ede:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    3ee2:	d20b      	bcs.n	3efc <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    3ee4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3ee8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    3eec:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    3ef0:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3ef4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3ef8:	0464      	lsls	r4, r4, #17
    3efa:	d5ee      	bpl.n	3eda <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    3efc:	4231      	tst	r1, r6
    3efe:	d109      	bne.n	3f14 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    3f00:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    3f02:	4c06      	ldr	r4, [pc, #24]	; (3f1c <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    3f04:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    3f06:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    3f08:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3f0c:	4319      	orrs	r1, r3
    3f0e:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    3f12:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    3f14:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3f16:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    3f18:	bcf0      	pop	{r4, r5, r6, r7}
    3f1a:	4770      	bx	lr
    3f1c:	402e0000 	.word	0x402e0000
    3f20:	e0001004 	.word	0xe0001004

00003f24 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    3f24:	b570      	push	{r4, r5, r6, lr}
    3f26:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3f28:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    3f2a:	b190      	cbz	r0, 3f52 <run_callbacks+0x2e>
    3f2c:	4602      	mov	r2, r0
    3f2e:	2400      	movs	r4, #0
    3f30:	e003      	b.n	3f3a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3f32:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    3f34:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    3f36:	2a01      	cmp	r2, #1
    3f38:	d00c      	beq.n	3f54 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    3f3a:	6853      	ldr	r3, [r2, #4]
    3f3c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3f40:	d0f7      	beq.n	3f32 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    3f42:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3f44:	b12c      	cbz	r4, 3f52 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    3f46:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    3f48:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    3f4a:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3f4c:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    3f4e:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3f50:	d1f9      	bne.n	3f46 <run_callbacks+0x22>
    3f52:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    3f54:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    3f56:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    3f58:	e7f4      	b.n	3f44 <run_callbacks+0x20>
    3f5a:	bf00      	nop

00003f5c <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    3f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    3f5e:	b9e1      	cbnz	r1, 3f9a <endpoint0_transmit.constprop.1+0x3e>
    3f60:	4c21      	ldr	r4, [pc, #132]	; (3fe8 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f62:	4922      	ldr	r1, [pc, #136]	; (3fec <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3f64:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f66:	4b22      	ldr	r3, [pc, #136]	; (3ff0 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f68:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f6a:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f6e:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3f70:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    3f72:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3f74:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f76:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3f78:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f7a:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3f7e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3f82:	4d1c      	ldr	r5, [pc, #112]	; (3ff4 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3f84:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3f88:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    3f8a:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3f8e:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    3f90:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3f94:	2b00      	cmp	r3, #0
    3f96:	d1fb      	bne.n	3f90 <endpoint0_transmit.constprop.1+0x34>
}
    3f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f9a:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3f9c:	4b16      	ldr	r3, [pc, #88]	; (3ff8 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3f9e:	4d14      	ldr	r5, [pc, #80]	; (3ff0 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3fa0:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3fa2:	4c11      	ldr	r4, [pc, #68]	; (3fe8 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3fa4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3fa8:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3faa:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3fac:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3fae:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    3fb2:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3fb4:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3fb8:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3fba:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3fbe:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3fc2:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    3fc6:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3fc8:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3fca:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3fce:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3fd2:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3fd6:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3fd8:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    3fda:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    3fde:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	d1fb      	bne.n	3fde <endpoint0_transmit.constprop.1+0x82>
    3fe6:	e7bc      	b.n	3f62 <endpoint0_transmit.constprop.1+0x6>
    3fe8:	20009000 	.word	0x20009000
    3fec:	20008020 	.word	0x20008020
    3ff0:	402e0000 	.word	0x402e0000
    3ff4:	200072b0 	.word	0x200072b0
    3ff8:	20008000 	.word	0x20008000

00003ffc <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    3ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    4000:	4cac      	ldr	r4, [pc, #688]	; (42b4 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    4002:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    4004:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    4008:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    400c:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    4010:	d05e      	beq.n	40d0 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    4012:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4016:	2b00      	cmp	r3, #0
    4018:	d055      	beq.n	40c6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    401a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    401e:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 42dc <isr+0x2e0>
    4022:	4ea5      	ldr	r6, [pc, #660]	; (42b8 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    4024:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4026:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    4028:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    402c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    402e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    4030:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4038:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    403c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4040:	049f      	lsls	r7, r3, #18
    4042:	d5f5      	bpl.n	4030 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    4044:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    4048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    404c:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4050:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    4054:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    4058:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    405c:	d1fa      	bne.n	4054 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    405e:	b281      	uxth	r1, r0
    4060:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    4064:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    4068:	42b9      	cmp	r1, r7
    406a:	f200 80b4 	bhi.w	41d6 <isr+0x1da>
    406e:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    4072:	f080 81e9 	bcs.w	4448 <isr+0x44c>
    4076:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    407a:	f000 816b 	beq.w	4354 <isr+0x358>
    407e:	f200 80f0 	bhi.w	4262 <isr+0x266>
    4082:	2980      	cmp	r1, #128	; 0x80
    4084:	f000 8159 	beq.w	433a <isr+0x33e>
    4088:	2982      	cmp	r1, #130	; 0x82
    408a:	f040 80e2 	bne.w	4252 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    408e:	b292      	uxth	r2, r2
    4090:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    4094:	2907      	cmp	r1, #7
    4096:	f200 80dc 	bhi.w	4252 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    409a:	0089      	lsls	r1, r1, #2
    409c:	4887      	ldr	r0, [pc, #540]	; (42bc <isr+0x2c0>)
		reply_buffer[0] = 0;
    409e:	4f88      	ldr	r7, [pc, #544]	; (42c0 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    40a0:	4408      	add	r0, r1
    40a2:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    40a4:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    40a6:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    40a8:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    40aa:	f140 820c 	bpl.w	44c6 <isr+0x4ca>
    40ae:	03ca      	lsls	r2, r1, #15
    40b0:	d501      	bpl.n	40b6 <isr+0xba>
			reply_buffer[0] = 1;
    40b2:	2301      	movs	r3, #1
    40b4:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    40b6:	2102      	movs	r1, #2
    40b8:	4881      	ldr	r0, [pc, #516]	; (42c0 <isr+0x2c4>)
    40ba:	f7ff ff4f 	bl	3f5c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    40be:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    40c2:	2b00      	cmp	r3, #0
    40c4:	d1b0      	bne.n	4028 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    40c6:	4a7b      	ldr	r2, [pc, #492]	; (42b4 <isr+0x2b8>)
    40c8:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    40cc:	2b00      	cmp	r3, #0
    40ce:	d150      	bne.n	4172 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    40d0:	f018 0f40 	tst.w	r8, #64	; 0x40
    40d4:	d018      	beq.n	4108 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    40d6:	4b77      	ldr	r3, [pc, #476]	; (42b4 <isr+0x2b8>)
    40d8:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    40dc:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    40de:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    40e2:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    40e6:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    40ea:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    40ee:	4b71      	ldr	r3, [pc, #452]	; (42b4 <isr+0x2b8>)
    40f0:	2c00      	cmp	r4, #0
    40f2:	d1fa      	bne.n	40ea <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    40f4:	f04f 32ff 	mov.w	r2, #4294967295
    40f8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    40fc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    4100:	f000 fd1e 	bl	4b40 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    4104:	4b6f      	ldr	r3, [pc, #444]	; (42c4 <isr+0x2c8>)
    4106:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    4108:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    410c:	d003      	beq.n	4116 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    410e:	4b6e      	ldr	r3, [pc, #440]	; (42c8 <isr+0x2cc>)
    4110:	681b      	ldr	r3, [r3, #0]
    4112:	b103      	cbz	r3, 4116 <isr+0x11a>
    4114:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    4116:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    411a:	d003      	beq.n	4124 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    411c:	4b6b      	ldr	r3, [pc, #428]	; (42cc <isr+0x2d0>)
    411e:	681b      	ldr	r3, [r3, #0]
    4120:	b103      	cbz	r3, 4124 <isr+0x128>
    4122:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    4124:	f018 0f04 	tst.w	r8, #4
    4128:	d008      	beq.n	413c <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    412a:	4b62      	ldr	r3, [pc, #392]	; (42b4 <isr+0x2b8>)
    412c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    4130:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    4134:	d04c      	beq.n	41d0 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    4136:	4b66      	ldr	r3, [pc, #408]	; (42d0 <isr+0x2d4>)
    4138:	2201      	movs	r2, #1
    413a:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    413c:	4b5d      	ldr	r3, [pc, #372]	; (42b4 <isr+0x2b8>)
    413e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    4142:	0612      	lsls	r2, r2, #24
    4144:	d512      	bpl.n	416c <isr+0x170>
    4146:	f018 0f80 	tst.w	r8, #128	; 0x80
    414a:	d00f      	beq.n	416c <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    414c:	4961      	ldr	r1, [pc, #388]	; (42d4 <isr+0x2d8>)
    414e:	780a      	ldrb	r2, [r1, #0]
    4150:	b162      	cbz	r2, 416c <isr+0x170>
			if (--usb_reboot_timer == 0) {
    4152:	3a01      	subs	r2, #1
    4154:	b2d2      	uxtb	r2, r2
    4156:	700a      	strb	r2, [r1, #0]
    4158:	b942      	cbnz	r2, 416c <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    415a:	495f      	ldr	r1, [pc, #380]	; (42d8 <isr+0x2dc>)
    415c:	780a      	ldrb	r2, [r1, #0]
    415e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4162:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    4164:	2a00      	cmp	r2, #0
    4166:	f000 8232 	beq.w	45ce <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    416a:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    416c:	b003      	add	sp, #12
    416e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    4172:	495a      	ldr	r1, [pc, #360]	; (42dc <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    4174:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    4178:	6808      	ldr	r0, [r1, #0]
    417a:	4203      	tst	r3, r0
    417c:	f040 81e6 	bne.w	454c <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    4180:	4a50      	ldr	r2, [pc, #320]	; (42c4 <isr+0x2c8>)
    4182:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    4184:	401d      	ands	r5, r3
    4186:	d0a3      	beq.n	40d0 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    4188:	0c2f      	lsrs	r7, r5, #16
    418a:	d00f      	beq.n	41ac <isr+0x1b0>
    418c:	4e4a      	ldr	r6, [pc, #296]	; (42b8 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    418e:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    4192:	fa97 f4a7 	rbit	r4, r7
    4196:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    419a:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    419e:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    41a2:	3040      	adds	r0, #64	; 0x40
    41a4:	f7ff febe 	bl	3f24 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    41a8:	43a7      	bics	r7, r4
    41aa:	d1f2      	bne.n	4192 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    41ac:	b2ad      	uxth	r5, r5
				while(rx) {
    41ae:	2d00      	cmp	r5, #0
    41b0:	d08e      	beq.n	40d0 <isr+0xd4>
    41b2:	4e41      	ldr	r6, [pc, #260]	; (42b8 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    41b4:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    41b6:	fa95 f4a5 	rbit	r4, r5
    41ba:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    41be:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    41c2:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    41c6:	f7ff fead 	bl	3f24 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    41ca:	43a5      	bics	r5, r4
    41cc:	d1f3      	bne.n	41b6 <isr+0x1ba>
    41ce:	e77f      	b.n	40d0 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    41d0:	4a3f      	ldr	r2, [pc, #252]	; (42d0 <isr+0x2d4>)
    41d2:	7013      	strb	r3, [r2, #0]
    41d4:	e7b2      	b.n	413c <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    41d6:	f242 0721 	movw	r7, #8225	; 0x2021
    41da:	42b9      	cmp	r1, r7
    41dc:	d035      	beq.n	424a <isr+0x24e>
    41de:	f200 8089 	bhi.w	42f4 <isr+0x2f8>
    41e2:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    41e6:	f000 8121 	beq.w	442c <isr+0x430>
    41ea:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    41ee:	d130      	bne.n	4252 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    41f0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    41f4:	4a3a      	ldr	r2, [pc, #232]	; (42e0 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    41f6:	493b      	ldr	r1, [pc, #236]	; (42e4 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    41f8:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    41fa:	4f3b      	ldr	r7, [pc, #236]	; (42e8 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    41fc:	4a3b      	ldr	r2, [pc, #236]	; (42ec <isr+0x2f0>)
    41fe:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    4200:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    4204:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    4208:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    420c:	f000 fc9a 	bl	4b44 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4210:	4a37      	ldr	r2, [pc, #220]	; (42f0 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4212:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4214:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4216:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4218:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    421a:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    421c:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    421e:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4220:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4224:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4228:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    422a:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    422e:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4232:	4a2a      	ldr	r2, [pc, #168]	; (42dc <isr+0x2e0>)
    4234:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    4236:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    423a:	2b00      	cmp	r3, #0
    423c:	d1fb      	bne.n	4236 <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    423e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4242:	2b00      	cmp	r3, #0
    4244:	f47f aef0 	bne.w	4028 <isr+0x2c>
    4248:	e73d      	b.n	40c6 <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    424a:	0c11      	lsrs	r1, r2, #16
    424c:	2907      	cmp	r1, #7
    424e:	f000 813e 	beq.w	44ce <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    4252:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4256:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    425a:	2b00      	cmp	r3, #0
    425c:	f47f aee4 	bne.w	4028 <isr+0x2c>
    4260:	e731      	b.n	40c6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    4262:	f240 3702 	movw	r7, #770	; 0x302
    4266:	42b9      	cmp	r1, r7
    4268:	f000 80b0 	beq.w	43cc <isr+0x3d0>
    426c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    4270:	d1ef      	bne.n	4252 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4272:	4a1f      	ldr	r2, [pc, #124]	; (42f0 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4274:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4276:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4278:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    427a:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    427c:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    427e:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4280:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4284:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4288:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    428a:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    428e:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    4292:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4296:	2b00      	cmp	r3, #0
    4298:	d1fb      	bne.n	4292 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    429a:	0c03      	lsrs	r3, r0, #16
    429c:	065b      	lsls	r3, r3, #25
    429e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    42a2:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    42a6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    42aa:	2b00      	cmp	r3, #0
    42ac:	f47f aebc 	bne.w	4028 <isr+0x2c>
    42b0:	e709      	b.n	40c6 <isr+0xca>
    42b2:	bf00      	nop
    42b4:	402e0000 	.word	0x402e0000
    42b8:	20009000 	.word	0x20009000
    42bc:	402e01c0 	.word	0x402e01c0
    42c0:	200072c0 	.word	0x200072c0
    42c4:	200072a0 	.word	0x200072a0
    42c8:	2000729c 	.word	0x2000729c
    42cc:	200072a8 	.word	0x200072a8
    42d0:	200072ac 	.word	0x200072ac
    42d4:	200072b4 	.word	0x200072b4
    42d8:	200072a4 	.word	0x200072a4
    42dc:	200072b0 	.word	0x200072b0
    42e0:	200072d0 	.word	0x200072d0
    42e4:	000200c8 	.word	0x000200c8
    42e8:	00cc0002 	.word	0x00cc0002
    42ec:	00c80002 	.word	0x00c80002
    42f0:	20008020 	.word	0x20008020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    42f4:	f242 2321 	movw	r3, #8737	; 0x2221
    42f8:	4299      	cmp	r1, r3
    42fa:	d05b      	beq.n	43b4 <isr+0x3b8>
    42fc:	f242 3321 	movw	r3, #8993	; 0x2321
    4300:	4299      	cmp	r1, r3
    4302:	d1a6      	bne.n	4252 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4304:	4bb5      	ldr	r3, [pc, #724]	; (45dc <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4306:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    4308:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    430a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    430c:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    430e:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4310:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4312:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4314:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4318:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    431c:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    431e:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    4322:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    4326:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    432a:	2b00      	cmp	r3, #0
    432c:	d1fb      	bne.n	4326 <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    432e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4332:	2b00      	cmp	r3, #0
    4334:	f47f ae78 	bne.w	4028 <isr+0x2c>
    4338:	e6c5      	b.n	40c6 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    433a:	4aa9      	ldr	r2, [pc, #676]	; (45e0 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    433c:	2102      	movs	r1, #2
    433e:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    4340:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    4342:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    4344:	f7ff fe0a 	bl	3f5c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4348:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    434c:	2b00      	cmp	r3, #0
    434e:	f47f ae6b 	bne.w	4028 <isr+0x2c>
    4352:	e6b8      	b.n	40c6 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    4354:	b292      	uxth	r2, r2
    4356:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    435a:	2b07      	cmp	r3, #7
    435c:	f63f af79 	bhi.w	4252 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    4360:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    4364:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4368:	4a9e      	ldr	r2, [pc, #632]	; (45e4 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    436a:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    436e:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    4372:	441a      	add	r2, r3
    4374:	6813      	ldr	r3, [r2, #0]
    4376:	bf14      	ite	ne
    4378:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    437c:	f023 0301 	biceq.w	r3, r3, #1
    4380:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4382:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4384:	4b95      	ldr	r3, [pc, #596]	; (45dc <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4386:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4388:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    438a:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    438c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    438e:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4392:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4396:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    4398:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    439c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    43a0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    43a4:	2b00      	cmp	r3, #0
    43a6:	d1fb      	bne.n	43a0 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    43a8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    43ac:	2b00      	cmp	r3, #0
    43ae:	f47f ae3b 	bne.w	4028 <isr+0x2c>
    43b2:	e688      	b.n	40c6 <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    43b4:	b292      	uxth	r2, r2
    43b6:	2a00      	cmp	r2, #0
    43b8:	d1a4      	bne.n	4304 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    43ba:	4b8b      	ldr	r3, [pc, #556]	; (45e8 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    43bc:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    43c0:	4a8a      	ldr	r2, [pc, #552]	; (45ec <isr+0x5f0>)
    43c2:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    43c4:	4b8a      	ldr	r3, [pc, #552]	; (45f0 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    43c6:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    43c8:	7018      	strb	r0, [r3, #0]
    43ca:	e79b      	b.n	4304 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    43cc:	b292      	uxth	r2, r2
    43ce:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    43d2:	2b07      	cmp	r3, #7
    43d4:	f63f af3d 	bhi.w	4252 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    43d8:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    43dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43e0:	4a80      	ldr	r2, [pc, #512]	; (45e4 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    43e2:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    43e6:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    43ea:	441a      	add	r2, r3
    43ec:	6813      	ldr	r3, [r2, #0]
    43ee:	bf14      	ite	ne
    43f0:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    43f4:	f043 0301 	orreq.w	r3, r3, #1
    43f8:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    43fa:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    43fc:	4b77      	ldr	r3, [pc, #476]	; (45dc <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    43fe:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4400:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4402:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4404:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4406:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    440a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    440e:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    4410:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    4414:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    4418:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    441c:	2b00      	cmp	r3, #0
    441e:	d1fb      	bne.n	4418 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4420:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4424:	2b00      	cmp	r3, #0
    4426:	f47f adff 	bne.w	4028 <isr+0x2c>
    442a:	e64c      	b.n	40c6 <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    442c:	4a71      	ldr	r2, [pc, #452]	; (45f4 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    442e:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    4430:	4b6b      	ldr	r3, [pc, #428]	; (45e0 <isr+0x5e4>)
    4432:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    4434:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    4436:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    4438:	f7ff fd90 	bl	3f5c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    443c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    4440:	2b00      	cmp	r3, #0
    4442:	f47f adf1 	bne.w	4028 <isr+0x2c>
    4446:	e63e      	b.n	40c6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4448:	4b6b      	ldr	r3, [pc, #428]	; (45f8 <isr+0x5fc>)
    444a:	6859      	ldr	r1, [r3, #4]
    444c:	2900      	cmp	r1, #0
    444e:	f43f af00 	beq.w	4252 <isr+0x256>
    4452:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4454:	fa1f fe82 	uxth.w	lr, r2
    4458:	e004      	b.n	4464 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    445a:	330c      	adds	r3, #12
    445c:	6859      	ldr	r1, [r3, #4]
    445e:	2900      	cmp	r1, #0
    4460:	f43f aef7 	beq.w	4252 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4464:	881f      	ldrh	r7, [r3, #0]
    4466:	4287      	cmp	r7, r0
    4468:	d1f7      	bne.n	445a <isr+0x45e>
    446a:	885f      	ldrh	r7, [r3, #2]
    446c:	4577      	cmp	r7, lr
    446e:	d1f4      	bne.n	445a <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    4470:	0a07      	lsrs	r7, r0, #8
    4472:	2f03      	cmp	r7, #3
    4474:	f000 80e9 	beq.w	464a <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    4478:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    447a:	0c12      	lsrs	r2, r2, #16
    447c:	4293      	cmp	r3, r2
    447e:	bf28      	it	cs
    4480:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    4482:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    4486:	f000 80d1 	beq.w	462c <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    448a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    448e:	f000 808b 	beq.w	45a8 <isr+0x5ac>
    4492:	4f5a      	ldr	r7, [pc, #360]	; (45fc <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    4494:	461a      	mov	r2, r3
    4496:	9301      	str	r3, [sp, #4]
    4498:	4638      	mov	r0, r7
    449a:	f7ff f86d 	bl	3578 <memcpy>
    449e:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    44a0:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    44a4:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    44a6:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    44aa:	4955      	ldr	r1, [pc, #340]	; (4600 <isr+0x604>)
    44ac:	600a      	str	r2, [r1, #0]
		location += 32;
    44ae:	3220      	adds	r2, #32
	} while (location < end_addr);
    44b0:	4297      	cmp	r7, r2
    44b2:	d8fa      	bhi.n	44aa <isr+0x4ae>
	asm("dsb");
    44b4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    44b8:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    44bc:	484f      	ldr	r0, [pc, #316]	; (45fc <isr+0x600>)
    44be:	4619      	mov	r1, r3
    44c0:	f7ff fd4c 	bl	3f5c <endpoint0_transmit.constprop.1>
    44c4:	e5fb      	b.n	40be <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    44c6:	07cb      	lsls	r3, r1, #31
    44c8:	f57f adf5 	bpl.w	40b6 <isr+0xba>
    44cc:	e5f1      	b.n	40b2 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    44ce:	4f4d      	ldr	r7, [pc, #308]	; (4604 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    44d0:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    44d4:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    44d6:	494c      	ldr	r1, [pc, #304]	; (4608 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    44d8:	4b4c      	ldr	r3, [pc, #304]	; (460c <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    44da:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    44dc:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    44e0:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    44e2:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    44e4:	494a      	ldr	r1, [pc, #296]	; (4610 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    44e6:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    44ea:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    44ec:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    44f0:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    44f4:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    44f6:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    44fa:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    44fe:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    4502:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4506:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4508:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    450c:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    450e:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    4510:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4514:	2b00      	cmp	r3, #0
    4516:	d1fb      	bne.n	4510 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    4518:	4a30      	ldr	r2, [pc, #192]	; (45dc <isr+0x5e0>)
    451a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    451c:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    4520:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    4522:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4524:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4528:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    452a:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    452c:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4530:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    4534:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    4536:	ea41 0300 	orr.w	r3, r1, r0
    453a:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    453e:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    4542:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4546:	2b00      	cmp	r3, #0
    4548:	d1fb      	bne.n	4542 <isr+0x546>
    454a:	e5b8      	b.n	40be <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    454c:	482d      	ldr	r0, [pc, #180]	; (4604 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    454e:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    4552:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4554:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    4556:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4558:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    455a:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    455c:	f47f ae10 	bne.w	4180 <isr+0x184>
    4560:	b281      	uxth	r1, r0
    4562:	2900      	cmp	r1, #0
    4564:	f47f ae0c 	bne.w	4180 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    4568:	4929      	ldr	r1, [pc, #164]	; (4610 <isr+0x614>)
    456a:	4c2a      	ldr	r4, [pc, #168]	; (4614 <isr+0x618>)
    456c:	c903      	ldmia	r1, {r0, r1}
    456e:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    4570:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    4572:	6020      	str	r0, [r4, #0]
    4574:	80a1      	strh	r1, [r4, #4]
    4576:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    4578:	f47f ae02 	bne.w	4180 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    457c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    457e:	4826      	ldr	r0, [pc, #152]	; (4618 <isr+0x61c>)
    4580:	7801      	ldrb	r1, [r0, #0]
    4582:	f041 0104 	orr.w	r1, r1, #4
    4586:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    4588:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    458c:	0608      	lsls	r0, r1, #24
    458e:	d406      	bmi.n	459e <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4590:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4594:	2080      	movs	r0, #128	; 0x80
    4596:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    459a:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    459e:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    45a0:	4a1e      	ldr	r2, [pc, #120]	; (461c <isr+0x620>)
    45a2:	2150      	movs	r1, #80	; 0x50
    45a4:	7011      	strb	r1, [r2, #0]
    45a6:	e5eb      	b.n	4180 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    45a8:	481d      	ldr	r0, [pc, #116]	; (4620 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    45aa:	461a      	mov	r2, r3
    45ac:	4f13      	ldr	r7, [pc, #76]	; (45fc <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    45ae:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    45b2:	491c      	ldr	r1, [pc, #112]	; (4624 <isr+0x628>)
    45b4:	481c      	ldr	r0, [pc, #112]	; (4628 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    45b6:	9301      	str	r3, [sp, #4]
    45b8:	f1be 0f00 	cmp.w	lr, #0
    45bc:	bf08      	it	eq
    45be:	4601      	moveq	r1, r0
    45c0:	4638      	mov	r0, r7
    45c2:	f7fe ffd9 	bl	3578 <memcpy>
					usb_descriptor_buffer[1] = 7;
    45c6:	2207      	movs	r2, #7
    45c8:	9b01      	ldr	r3, [sp, #4]
    45ca:	707a      	strb	r2, [r7, #1]
    45cc:	e768      	b.n	44a0 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    45ce:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    45d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    45d6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    45da:	e5c6      	b.n	416a <isr+0x16e>
    45dc:	20008020 	.word	0x20008020
    45e0:	200072c0 	.word	0x200072c0
    45e4:	402e01c0 	.word	0x402e01c0
    45e8:	20007288 	.word	0x20007288
    45ec:	20009288 	.word	0x20009288
    45f0:	20007428 	.word	0x20007428
    45f4:	200072d0 	.word	0x200072d0
    45f8:	20001468 	.word	0x20001468
    45fc:	20200c40 	.word	0x20200c40
    4600:	e000ef70 	.word	0xe000ef70
    4604:	200072b8 	.word	0x200072b8
    4608:	00070080 	.word	0x00070080
    460c:	20008000 	.word	0x20008000
    4610:	200072c8 	.word	0x200072c8
    4614:	20009280 	.word	0x20009280
    4618:	200072a4 	.word	0x200072a4
    461c:	200072b4 	.word	0x200072b4
    4620:	200072ac 	.word	0x200072ac
    4624:	60001844 	.word	0x60001844
    4628:	60001888 	.word	0x60001888

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    462c:	480a      	ldr	r0, [pc, #40]	; (4658 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    462e:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    4630:	490a      	ldr	r1, [pc, #40]	; (465c <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    4632:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    4634:	480a      	ldr	r0, [pc, #40]	; (4660 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    4636:	9301      	str	r3, [sp, #4]
    4638:	2f00      	cmp	r7, #0
    463a:	bf08      	it	eq
    463c:	4601      	moveq	r1, r0
    463e:	4809      	ldr	r0, [pc, #36]	; (4664 <isr+0x668>)
    4640:	f7fe ff9a 	bl	3578 <memcpy>
    4644:	4f07      	ldr	r7, [pc, #28]	; (4664 <isr+0x668>)
    4646:	9b01      	ldr	r3, [sp, #4]
    4648:	e72a      	b.n	44a0 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    464a:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    464c:	780b      	ldrb	r3, [r1, #0]
    464e:	4293      	cmp	r3, r2
    4650:	bf28      	it	cs
    4652:	4613      	movcs	r3, r2
    4654:	e719      	b.n	448a <isr+0x48e>
    4656:	bf00      	nop
    4658:	200072ac 	.word	0x200072ac
    465c:	60001888 	.word	0x60001888
    4660:	60001844 	.word	0x60001844
    4664:	20200c40 	.word	0x20200c40

00004668 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4668:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    466a:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    466e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4672:	bf14      	ite	ne
    4674:	2700      	movne	r7, #0
    4676:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    467a:	2a02      	cmp	r2, #2
    467c:	d901      	bls.n	4682 <usb_config_rx+0x1a>
    467e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    4682:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    4686:	f8df 9040 	ldr.w	r9, [pc, #64]	; 46c8 <usb_config_rx+0x60>
    468a:	460d      	mov	r5, r1
    468c:	4604      	mov	r4, r0
    468e:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    4692:	2100      	movs	r1, #0
    4694:	2240      	movs	r2, #64	; 0x40
    4696:	4698      	mov	r8, r3
    4698:	4630      	mov	r0, r6
    469a:	f002 f8ad 	bl	67f8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    469e:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    46a0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    46a4:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    46a8:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    46ac:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    46ae:	f1b8 0f00 	cmp.w	r8, #0
    46b2:	d0e4      	beq.n	467e <usb_config_rx+0x16>
    46b4:	4b03      	ldr	r3, [pc, #12]	; (46c4 <usb_config_rx+0x5c>)
    46b6:	40a0      	lsls	r0, r4
    46b8:	681c      	ldr	r4, [r3, #0]
    46ba:	4320      	orrs	r0, r4
    46bc:	6018      	str	r0, [r3, #0]
    46be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46c2:	bf00      	nop
    46c4:	200072a0 	.word	0x200072a0
    46c8:	20009000 	.word	0x20009000

000046cc <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    46cc:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    46ce:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    46d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    46d6:	bf14      	ite	ne
    46d8:	2700      	movne	r7, #0
    46da:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    46de:	2a02      	cmp	r2, #2
    46e0:	d901      	bls.n	46e6 <usb_config_tx+0x1a>
    46e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    46e6:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    46e8:	01c5      	lsls	r5, r0, #7
    46ea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 4730 <usb_config_tx+0x64>
    46ee:	4688      	mov	r8, r1
    46f0:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    46f2:	2100      	movs	r1, #0
    46f4:	4604      	mov	r4, r0
    46f6:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    46f8:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    46fc:	4650      	mov	r0, sl
    46fe:	f002 f87b 	bl	67f8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    4702:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    4704:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    4708:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    470c:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    4710:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    4714:	2e00      	cmp	r6, #0
    4716:	d0e4      	beq.n	46e2 <usb_config_tx+0x16>
    4718:	f104 0010 	add.w	r0, r4, #16
    471c:	4b03      	ldr	r3, [pc, #12]	; (472c <usb_config_tx+0x60>)
    471e:	4082      	lsls	r2, r0
    4720:	6818      	ldr	r0, [r3, #0]
    4722:	4302      	orrs	r2, r0
    4724:	601a      	str	r2, [r3, #0]
    4726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    472a:	bf00      	nop
    472c:	200072a0 	.word	0x200072a0
    4730:	20009000 	.word	0x20009000

00004734 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    4734:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    4736:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    4738:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    473a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    473e:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    4740:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    4742:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    4744:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    4748:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    474c:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    4750:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    4754:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    4756:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    4758:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    475a:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    475c:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    475e:	bcf0      	pop	{r4, r5, r6, r7}
    4760:	4770      	bx	lr
    4762:	bf00      	nop

00004764 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    4764:	1e83      	subs	r3, r0, #2
    4766:	2b02      	cmp	r3, #2
    4768:	d900      	bls.n	476c <usb_transmit+0x8>
    476a:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    476c:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    476e:	4b06      	ldr	r3, [pc, #24]	; (4788 <usb_transmit+0x24>)
    4770:	f100 0410 	add.w	r4, r0, #16
    4774:	2501      	movs	r5, #1
    4776:	460a      	mov	r2, r1
    4778:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    477c:	fa05 f104 	lsl.w	r1, r5, r4
}
    4780:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    4782:	f7ff bb97 	b.w	3eb4 <schedule_transfer>
    4786:	bf00      	nop
    4788:	20009040 	.word	0x20009040

0000478c <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    478c:	1e83      	subs	r3, r0, #2
    478e:	2b02      	cmp	r3, #2
    4790:	d900      	bls.n	4794 <usb_receive+0x8>
    4792:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    4794:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    4796:	4b05      	ldr	r3, [pc, #20]	; (47ac <usb_receive+0x20>)
    4798:	2401      	movs	r4, #1
    479a:	460a      	mov	r2, r1
    479c:	fa04 f100 	lsl.w	r1, r4, r0
    47a0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    47a4:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    47a8:	f7ff bb84 	b.w	3eb4 <schedule_transfer>
    47ac:	20009000 	.word	0x20009000

000047b0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    47b0:	6840      	ldr	r0, [r0, #4]
#endif
}
    47b2:	4770      	bx	lr

000047b4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    47b4:	4a12      	ldr	r2, [pc, #72]	; (4800 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    47b6:	4b13      	ldr	r3, [pc, #76]	; (4804 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    47b8:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    47bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    47c0:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    47c2:	b510      	push	{r4, lr}
    47c4:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    47c6:	d802      	bhi.n	47ce <usb_init_serialnumber+0x1a>
    47c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    47cc:	0040      	lsls	r0, r0, #1
    47ce:	4c0e      	ldr	r4, [pc, #56]	; (4808 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    47d0:	a901      	add	r1, sp, #4
    47d2:	220a      	movs	r2, #10
    47d4:	f000 ff7c 	bl	56d0 <ultoa>
    47d8:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    47da:	2300      	movs	r3, #0
    47dc:	4620      	mov	r0, r4
		char c = buf[i];
    47de:	f811 2b01 	ldrb.w	r2, [r1], #1
    47e2:	3301      	adds	r3, #1
		if (!c) break;
    47e4:	b13a      	cbz	r2, 47f6 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    47e6:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    47e8:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    47ec:	d1f7      	bne.n	47de <usb_init_serialnumber+0x2a>
    47ee:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    47f0:	7023      	strb	r3, [r4, #0]
}
    47f2:	b004      	add	sp, #16
    47f4:	bd10      	pop	{r4, pc}
    47f6:	005b      	lsls	r3, r3, #1
    47f8:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    47fa:	7023      	strb	r3, [r4, #0]
}
    47fc:	b004      	add	sp, #16
    47fe:	bd10      	pop	{r4, pc}
    4800:	401f4400 	.word	0x401f4400
    4804:	0098967f 	.word	0x0098967f
    4808:	20004df8 	.word	0x20004df8

0000480c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    480e:	4914      	ldr	r1, [pc, #80]	; (4860 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4810:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4814:	4d13      	ldr	r5, [pc, #76]	; (4864 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    4816:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4818:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    481c:	4e12      	ldr	r6, [pc, #72]	; (4868 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    481e:	4a13      	ldr	r2, [pc, #76]	; (486c <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4820:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    4824:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4826:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4828:	4628      	mov	r0, r5
    482a:	8832      	ldrh	r2, [r6, #0]
    482c:	f7ff ff82 	bl	4734 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    4830:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4832:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4836:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    4838:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    483c:	4a0c      	ldr	r2, [pc, #48]	; (4870 <rx_queue_transfer+0x64>)
    483e:	6013      	str	r3, [r2, #0]
		location += 32;
    4840:	3320      	adds	r3, #32
	} while (location < end_addr);
    4842:	4299      	cmp	r1, r3
    4844:	d8fb      	bhi.n	483e <rx_queue_transfer+0x32>
	asm("dsb");
    4846:	f3bf 8f4f 	dsb	sy
	asm("isb");
    484a:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    484e:	2003      	movs	r0, #3
    4850:	4629      	mov	r1, r5
    4852:	f7ff ff9b 	bl	478c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4856:	4b07      	ldr	r3, [pc, #28]	; (4874 <rx_queue_transfer+0x68>)
    4858:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    485c:	601a      	str	r2, [r3, #0]
    485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4860:	20200ca0 	.word	0x20200ca0
    4864:	20007300 	.word	0x20007300
    4868:	2000740e 	.word	0x2000740e
    486c:	e000e18c 	.word	0xe000e18c
    4870:	e000ef5c 	.word	0xe000ef5c
    4874:	e000e10c 	.word	0xe000e10c

00004878 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4878:	4a24      	ldr	r2, [pc, #144]	; (490c <rx_event+0x94>)
    487a:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    487c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4880:	f3c3 430e 	ubfx	r3, r3, #16, #15
    4884:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    4886:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4888:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    488a:	2c00      	cmp	r4, #0
    488c:	dd38      	ble.n	4900 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    488e:	4920      	ldr	r1, [pc, #128]	; (4910 <rx_event+0x98>)
		if (head != rx_tail) {
    4890:	4a20      	ldr	r2, [pc, #128]	; (4914 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    4892:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    4894:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    4896:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    4898:	481f      	ldr	r0, [pc, #124]	; (4918 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    489a:	4e20      	ldr	r6, [pc, #128]	; (491c <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    489c:	4293      	cmp	r3, r2
    489e:	d007      	beq.n	48b0 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    48a0:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    48a4:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    48a8:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    48ac:	4294      	cmp	r4, r2
    48ae:	d912      	bls.n	48d6 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    48b0:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    48b2:	2200      	movs	r2, #0
    48b4:	4f1a      	ldr	r7, [pc, #104]	; (4920 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    48b6:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    48b8:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    48bc:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    48c0:	4e18      	ldr	r6, [pc, #96]	; (4924 <rx_event+0xac>)
    48c2:	bf94      	ite	ls
    48c4:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    48c6:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    48c8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    48ca:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    48cc:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    48ce:	4414      	add	r4, r2
    48d0:	6034      	str	r4, [r6, #0]
    48d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    48d6:	4b14      	ldr	r3, [pc, #80]	; (4928 <rx_event+0xb0>)
    48d8:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    48dc:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    48de:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    48e0:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    48e4:	4418      	add	r0, r3
    48e6:	f7fe fe47 	bl	3578 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    48ea:	4a0e      	ldr	r2, [pc, #56]	; (4924 <rx_event+0xac>)
				rx_queue_transfer(i);
    48ec:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    48ee:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    48f2:	6813      	ldr	r3, [r2, #0]
    48f4:	441c      	add	r4, r3
    48f6:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    48f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    48fc:	f7ff bf86 	b.w	480c <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    4900:	4628      	mov	r0, r5
	}
}
    4902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    4906:	f7ff bf81 	b.w	480c <rx_queue_transfer>
    490a:	bf00      	nop
    490c:	2000740e 	.word	0x2000740e
    4910:	20007424 	.word	0x20007424
    4914:	20007400 	.word	0x20007400
    4918:	20007404 	.word	0x20007404
    491c:	20007410 	.word	0x20007410
    4920:	200072d4 	.word	0x200072d4
    4924:	20007420 	.word	0x20007420
    4928:	20200ca0 	.word	0x20200ca0

0000492c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    492c:	4b1e      	ldr	r3, [pc, #120]	; (49a8 <usb_serial_flush_callback+0x7c>)
    492e:	781a      	ldrb	r2, [r3, #0]
    4930:	b95a      	cbnz	r2, 494a <usb_serial_flush_callback+0x1e>
    4932:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    4936:	4a1d      	ldr	r2, [pc, #116]	; (49ac <usb_serial_flush_callback+0x80>)
    4938:	7812      	ldrb	r2, [r2, #0]
    493a:	b132      	cbz	r2, 494a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    4940:	4d1b      	ldr	r5, [pc, #108]	; (49b0 <usb_serial_flush_callback+0x84>)
    4942:	882a      	ldrh	r2, [r5, #0]
    4944:	b912      	cbnz	r2, 494c <usb_serial_flush_callback+0x20>
    4946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    494a:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    494c:	4e19      	ldr	r6, [pc, #100]	; (49b4 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    494e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    4952:	4f19      	ldr	r7, [pc, #100]	; (49b8 <usb_serial_flush_callback+0x8c>)
    4954:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4956:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4958:	4c18      	ldr	r4, [pc, #96]	; (49bc <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    495a:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    495e:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4962:	4638      	mov	r0, r7
    4964:	4621      	mov	r1, r4
    4966:	f7ff fee5 	bl	4734 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    496a:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    496e:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    4972:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4976:	4b12      	ldr	r3, [pc, #72]	; (49c0 <usb_serial_flush_callback+0x94>)
    4978:	6019      	str	r1, [r3, #0]
		location += 32;
    497a:	3120      	adds	r1, #32
	} while (location < end_addr);
    497c:	428a      	cmp	r2, r1
    497e:	d8fb      	bhi.n	4978 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    4980:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4984:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4988:	2004      	movs	r0, #4
    498a:	4639      	mov	r1, r7
    498c:	f7ff feea 	bl	4764 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4990:	7833      	ldrb	r3, [r6, #0]
    4992:	4a08      	ldr	r2, [pc, #32]	; (49b4 <usb_serial_flush_callback+0x88>)
    4994:	3301      	adds	r3, #1
    4996:	b2db      	uxtb	r3, r3
    4998:	2b03      	cmp	r3, #3
    499a:	bf88      	it	hi
    499c:	2300      	movhi	r3, #0
    499e:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    49a0:	2300      	movs	r3, #0
    49a2:	802b      	strh	r3, [r5, #0]
    49a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49a8:	200072e6 	.word	0x200072e6
    49ac:	200072d0 	.word	0x200072d0
    49b0:	20007426 	.word	0x20007426
    49b4:	200072e7 	.word	0x200072e7
    49b8:	20007440 	.word	0x20007440
    49bc:	20201ca0 	.word	0x20201ca0
    49c0:	e000ef70 	.word	0xe000ef70

000049c4 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    49c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49c8:	b085      	sub	sp, #20
    49ca:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    49cc:	9101      	str	r1, [sp, #4]
    49ce:	2900      	cmp	r1, #0
    49d0:	f000 80a2 	beq.w	4b18 <usb_serial_write.part.1+0x154>
    49d4:	2300      	movs	r3, #0
    49d6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 4b34 <usb_serial_write.part.1+0x170>
    49da:	f8df 914c 	ldr.w	r9, [pc, #332]	; 4b28 <usb_serial_write.part.1+0x164>
    49de:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    49e0:	4e4e      	ldr	r6, [pc, #312]	; (4b1c <usb_serial_write.part.1+0x158>)
    49e2:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    49e6:	f8df a150 	ldr.w	sl, [pc, #336]	; 4b38 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    49ea:	f8df b150 	ldr.w	fp, [pc, #336]	; 4b3c <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    49ee:	4a4c      	ldr	r2, [pc, #304]	; (4b20 <usb_serial_write.part.1+0x15c>)
    49f0:	7814      	ldrb	r4, [r2, #0]
    49f2:	4a4c      	ldr	r2, [pc, #304]	; (4b24 <usb_serial_write.part.1+0x160>)
    49f4:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    49f8:	2b00      	cmp	r3, #0
    49fa:	d16e      	bne.n	4ada <usb_serial_write.part.1+0x116>
    49fc:	461d      	mov	r5, r3
    49fe:	461c      	mov	r4, r3
    4a00:	e014      	b.n	4a2c <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    4a02:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    4a06:	b904      	cbnz	r4, 4a0a <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    4a08:	6835      	ldr	r5, [r6, #0]
    4a0a:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    4a0c:	2b00      	cmp	r3, #0
    4a0e:	d15e      	bne.n	4ace <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    4a10:	6833      	ldr	r3, [r6, #0]
    4a12:	1b5b      	subs	r3, r3, r5
    4a14:	2b78      	cmp	r3, #120	; 0x78
    4a16:	d879      	bhi.n	4b0c <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    4a18:	f89a 3000 	ldrb.w	r3, [sl]
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d056      	beq.n	4ace <usb_serial_write.part.1+0x10a>
			yield();
    4a20:	f000 fe06 	bl	5630 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    4a24:	f8b8 3000 	ldrh.w	r3, [r8]
    4a28:	2b00      	cmp	r3, #0
    4a2a:	d154      	bne.n	4ad6 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    4a2c:	4638      	mov	r0, r7
    4a2e:	f7ff febf 	bl	47b0 <usb_transfer_status>
			if (!(status & 0x80)) {
    4a32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    4a36:	4a3c      	ldr	r2, [pc, #240]	; (4b28 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    4a38:	d1e3      	bne.n	4a02 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    4a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    4a3e:	4a38      	ldr	r2, [pc, #224]	; (4b20 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    4a40:	f889 0000 	strb.w	r0, [r9]
    4a44:	7814      	ldrb	r4, [r2, #0]
    4a46:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    4a48:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4a4c:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    4a4e:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4a50:	4936      	ldr	r1, [pc, #216]	; (4b2c <usb_serial_write.part.1+0x168>)
    4a52:	4420      	add	r0, r4
		if (size >= tx_available) {
    4a54:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4a56:	4408      	add	r0, r1
		if (size >= tx_available) {
    4a58:	d343      	bcc.n	4ae2 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4a5a:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    4a5c:	9902      	ldr	r1, [sp, #8]
    4a5e:	f7fe fd8b 	bl	3578 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    4a62:	2300      	movs	r3, #0
    4a64:	4621      	mov	r1, r4
    4a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
    4a6a:	4638      	mov	r0, r7
    4a6c:	f7ff fe62 	bl	4734 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4a70:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4a74:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    4a78:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4a7c:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    4a80:	3320      	adds	r3, #32
	} while (location < end_addr);
    4a82:	429c      	cmp	r4, r3
    4a84:	d8fa      	bhi.n	4a7c <usb_serial_write.part.1+0xb8>
	asm("dsb");
    4a86:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4a8a:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    4a8e:	2004      	movs	r0, #4
    4a90:	4639      	mov	r1, r7
    4a92:	f7ff fe67 	bl	4764 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    4a96:	4b22      	ldr	r3, [pc, #136]	; (4b20 <usb_serial_write.part.1+0x15c>)
    4a98:	4a21      	ldr	r2, [pc, #132]	; (4b20 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    4a9a:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    4a9c:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    4a9e:	4824      	ldr	r0, [pc, #144]	; (4b30 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    4aa0:	3301      	adds	r3, #1
    4aa2:	b2db      	uxtb	r3, r3
    4aa4:	2b03      	cmp	r3, #3
    4aa6:	bf88      	it	hi
    4aa8:	2300      	movhi	r3, #0
    4aaa:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    4aac:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    4ab0:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    4ab2:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    4ab6:	4413      	add	r3, r2
    4ab8:	9300      	str	r3, [sp, #0]
			data += tx_available;
    4aba:	9b02      	ldr	r3, [sp, #8]
    4abc:	4413      	add	r3, r2
    4abe:	9302      	str	r3, [sp, #8]
    4ac0:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    4ac2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    4ac6:	9901      	ldr	r1, [sp, #4]
    4ac8:	1a8a      	subs	r2, r1, r2
    4aca:	9201      	str	r2, [sp, #4]
    4acc:	d18f      	bne.n	49ee <usb_serial_write.part.1+0x2a>
    4ace:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    4ad0:	b005      	add	sp, #20
    4ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ad6:	4a12      	ldr	r2, [pc, #72]	; (4b20 <usb_serial_write.part.1+0x15c>)
    4ad8:	7814      	ldrb	r4, [r2, #0]
    4ada:	461a      	mov	r2, r3
    4adc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    4ae0:	e7b4      	b.n	4a4c <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    4ae2:	9c01      	ldr	r4, [sp, #4]
    4ae4:	9902      	ldr	r1, [sp, #8]
    4ae6:	4622      	mov	r2, r4
    4ae8:	9303      	str	r3, [sp, #12]
    4aea:	f7fe fd45 	bl	3578 <memcpy>
			tx_available -= size;
    4aee:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    4af0:	4a0f      	ldr	r2, [pc, #60]	; (4b30 <usb_serial_write.part.1+0x16c>)
    4af2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    4af6:	1b1b      	subs	r3, r3, r4
    4af8:	f8a8 3000 	strh.w	r3, [r8]
    4afc:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    4afe:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    4b02:	4618      	mov	r0, r3
    4b04:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    4b06:	b005      	add	sp, #20
    4b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    4b0c:	2301      	movs	r3, #1
				return sent;
    4b0e:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    4b10:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    4b12:	b005      	add	sp, #20
    4b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    4b18:	9801      	ldr	r0, [sp, #4]
    4b1a:	e7d9      	b.n	4ad0 <usb_serial_write.part.1+0x10c>
    4b1c:	20007288 	.word	0x20007288
    4b20:	200072e7 	.word	0x200072e7
    4b24:	20007440 	.word	0x20007440
    4b28:	20007425 	.word	0x20007425
    4b2c:	20201ca0 	.word	0x20201ca0
    4b30:	402e0000 	.word	0x402e0000
    4b34:	20007426 	.word	0x20007426
    4b38:	200072d0 	.word	0x200072d0
    4b3c:	e000ef70 	.word	0xe000ef70

00004b40 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    4b40:	4770      	bx	lr
    4b42:	bf00      	nop

00004b44 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    4b44:	4b31      	ldr	r3, [pc, #196]	; (4c0c <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    4b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    4b4a:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    4b4c:	4f30      	ldr	r7, [pc, #192]	; (4c10 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d054      	beq.n	4bfc <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    4b52:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    4b56:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4c44 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    4b5a:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    4b5c:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4b60:	2100      	movs	r1, #0
    4b62:	2280      	movs	r2, #128	; 0x80
    4b64:	482b      	ldr	r0, [pc, #172]	; (4c14 <usb_serial_configure+0xd0>)
	tx_head = 0;
    4b66:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    4b68:	4e2b      	ldr	r6, [pc, #172]	; (4c18 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4b6a:	f001 fe45 	bl	67f8 <memset>
	tx_head = 0;
    4b6e:	4c2b      	ldr	r4, [pc, #172]	; (4c1c <usb_serial_configure+0xd8>)
	tx_available = 0;
    4b70:	4b2b      	ldr	r3, [pc, #172]	; (4c20 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4b72:	4629      	mov	r1, r5
    4b74:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b78:	482a      	ldr	r0, [pc, #168]	; (4c24 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    4b7a:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4b7c:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    4b7e:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4b80:	f001 fe3a 	bl	67f8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    4b84:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b86:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    4b88:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b8a:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    4b8c:	60b5      	str	r5, [r6, #8]
    4b8e:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    4b90:	4925      	ldr	r1, [pc, #148]	; (4c28 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    4b92:	4e26      	ldr	r6, [pc, #152]	; (4c2c <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    4b94:	4826      	ldr	r0, [pc, #152]	; (4c30 <usb_serial_configure+0xec>)
	rx_available = 0;
    4b96:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 4c48 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    4b9a:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b9c:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    4b9e:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4ba0:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    4ba2:	6035      	str	r5, [r6, #0]
    4ba4:	6075      	str	r5, [r6, #4]
    4ba6:	60b5      	str	r5, [r6, #8]
    4ba8:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    4baa:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4bae:	f7ff fd8d 	bl	46cc <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    4bb2:	f8b8 1000 	ldrh.w	r1, [r8]
    4bb6:	462a      	mov	r2, r5
    4bb8:	4b1e      	ldr	r3, [pc, #120]	; (4c34 <usb_serial_configure+0xf0>)
    4bba:	2003      	movs	r0, #3
    4bbc:	f7ff fd54 	bl	4668 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4bc0:	462b      	mov	r3, r5
    4bc2:	8839      	ldrh	r1, [r7, #0]
    4bc4:	2201      	movs	r2, #1
    4bc6:	2004      	movs	r0, #4
    4bc8:	f7ff fd80 	bl	46cc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4bcc:	4620      	mov	r0, r4
    4bce:	3401      	adds	r4, #1
    4bd0:	f7ff fe1c 	bl	480c <rx_queue_transfer>
    4bd4:	2c08      	cmp	r4, #8
    4bd6:	d1f9      	bne.n	4bcc <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    4bd8:	4b17      	ldr	r3, [pc, #92]	; (4c38 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    4bda:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    4bdc:	4817      	ldr	r0, [pc, #92]	; (4c3c <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    4bde:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    4be0:	4c17      	ldr	r4, [pc, #92]	; (4c40 <usb_serial_configure+0xfc>)
    4be2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    4be4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    4be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    4bec:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    4bf0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4bf4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    4bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    4bfc:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    4bfe:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4c44 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    4c02:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    4c04:	f8a8 3000 	strh.w	r3, [r8]
    4c08:	e7aa      	b.n	4b60 <usb_serial_configure+0x1c>
    4c0a:	bf00      	nop
    4c0c:	200072ac 	.word	0x200072ac
    4c10:	200072e4 	.word	0x200072e4
    4c14:	20007440 	.word	0x20007440
    4c18:	20007410 	.word	0x20007410
    4c1c:	200072e7 	.word	0x200072e7
    4c20:	20007426 	.word	0x20007426
    4c24:	20007300 	.word	0x20007300
    4c28:	20007424 	.word	0x20007424
    4c2c:	200072d4 	.word	0x200072d4
    4c30:	20007400 	.word	0x20007400
    4c34:	00004879 	.word	0x00004879
    4c38:	402e0000 	.word	0x402e0000
    4c3c:	2000729c 	.word	0x2000729c
    4c40:	0000492d 	.word	0x0000492d
    4c44:	2000740e 	.word	0x2000740e
    4c48:	20007420 	.word	0x20007420

00004c4c <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    4c4c:	4b31      	ldr	r3, [pc, #196]	; (4d14 <usb_serial_read+0xc8>)
    4c4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    4c52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    4c56:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    4c58:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    4c5a:	4b2f      	ldr	r3, [pc, #188]	; (4d18 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4c5c:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    4c5e:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4c60:	2900      	cmp	r1, #0
    4c62:	d053      	beq.n	4d0c <usb_serial_read+0xc0>
    4c64:	4b2d      	ldr	r3, [pc, #180]	; (4d1c <usb_serial_read+0xd0>)
    4c66:	b2e4      	uxtb	r4, r4
    4c68:	781b      	ldrb	r3, [r3, #0]
    4c6a:	429c      	cmp	r4, r3
    4c6c:	d050      	beq.n	4d10 <usb_serial_read+0xc4>
    4c6e:	4682      	mov	sl, r0
    4c70:	2700      	movs	r7, #0
    4c72:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 4d34 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    4c76:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4c78:	4b29      	ldr	r3, [pc, #164]	; (4d20 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    4c7a:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c7e:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    4c80:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4c82:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    4c84:	4b27      	ldr	r3, [pc, #156]	; (4d24 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    4c86:	bf28      	it	cs
    4c88:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    4c8a:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4c8c:	4b24      	ldr	r3, [pc, #144]	; (4d20 <usb_serial_read+0xd4>)
    4c8e:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    4c92:	4b25      	ldr	r3, [pc, #148]	; (4d28 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c94:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4c98:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c9c:	4b23      	ldr	r3, [pc, #140]	; (4d2c <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    4c9e:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4ca2:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    4ca4:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4ca6:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    4ca8:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    4caa:	d219      	bcs.n	4ce0 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4cac:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    4cb0:	4642      	mov	r2, r8
    4cb2:	4419      	add	r1, r3
    4cb4:	f7fe fc60 	bl	3578 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    4cb8:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    4cba:	f8db 1000 	ldr.w	r1, [fp]
    4cbe:	4648      	mov	r0, r9
			rx_index[i] += len;
    4cc0:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    4cc4:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    4cc8:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    4cca:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    4cce:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4cd2:	4b17      	ldr	r3, [pc, #92]	; (4d30 <usb_serial_read+0xe4>)
    4cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4cd8:	601a      	str	r2, [r3, #0]
	return count;
}
    4cda:	b003      	add	sp, #12
    4cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4ce0:	f7fe fc4a 	bl	3578 <memcpy>
			p += avail;
			rx_available -= avail;
    4ce4:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    4ce8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    4cea:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    4cec:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    4cee:	44b2      	add	sl, r6
			rx_available -= avail;
    4cf0:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    4cf4:	4a08      	ldr	r2, [pc, #32]	; (4d18 <usb_serial_read+0xcc>)
    4cf6:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    4cf8:	f7ff fd88 	bl	480c <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    4cfc:	45b9      	cmp	r9, r7
    4cfe:	d903      	bls.n	4d08 <usb_serial_read+0xbc>
    4d00:	4b06      	ldr	r3, [pc, #24]	; (4d1c <usb_serial_read+0xd0>)
    4d02:	781b      	ldrb	r3, [r3, #0]
    4d04:	429c      	cmp	r4, r3
    4d06:	d1b6      	bne.n	4c76 <usb_serial_read+0x2a>
    4d08:	4638      	mov	r0, r7
    4d0a:	e7e2      	b.n	4cd2 <usb_serial_read+0x86>
    4d0c:	4608      	mov	r0, r1
    4d0e:	e7e0      	b.n	4cd2 <usb_serial_read+0x86>
    4d10:	2000      	movs	r0, #0
    4d12:	e7de      	b.n	4cd2 <usb_serial_read+0x86>
    4d14:	e000e18c 	.word	0xe000e18c
    4d18:	20007400 	.word	0x20007400
    4d1c:	20007424 	.word	0x20007424
    4d20:	200072d4 	.word	0x200072d4
    4d24:	20007404 	.word	0x20007404
    4d28:	20007410 	.word	0x20007410
    4d2c:	20200ca0 	.word	0x20200ca0
    4d30:	e000e10c 	.word	0xe000e10c
    4d34:	20007420 	.word	0x20007420

00004d38 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    4d38:	4b0b      	ldr	r3, [pc, #44]	; (4d68 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    4d3a:	4a0c      	ldr	r2, [pc, #48]	; (4d6c <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    4d3c:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    4d3e:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    4d40:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    4d42:	4293      	cmp	r3, r2
    4d44:	d00d      	beq.n	4d62 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    4d46:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    4d48:	4809      	ldr	r0, [pc, #36]	; (4d70 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4d4a:	4a0a      	ldr	r2, [pc, #40]	; (4d74 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    4d4c:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4d4e:	490a      	ldr	r1, [pc, #40]	; (4d78 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    4d50:	bf28      	it	cs
    4d52:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    4d54:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4d56:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    4d5a:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    4d5e:	5c58      	ldrb	r0, [r3, r1]
    4d60:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    4d62:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    4d66:	4770      	bx	lr
    4d68:	20007400 	.word	0x20007400
    4d6c:	20007424 	.word	0x20007424
    4d70:	20007404 	.word	0x20007404
    4d74:	20200ca0 	.word	0x20200ca0
    4d78:	200072d4 	.word	0x200072d4

00004d7c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    4d7c:	4b01      	ldr	r3, [pc, #4]	; (4d84 <usb_serial_available+0x8>)
    4d7e:	6818      	ldr	r0, [r3, #0]
}
    4d80:	4770      	bx	lr
    4d82:	bf00      	nop
    4d84:	20007420 	.word	0x20007420

00004d88 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    4d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    4d8c:	4e15      	ldr	r6, [pc, #84]	; (4de4 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    4d8e:	4d16      	ldr	r5, [pc, #88]	; (4de8 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    4d90:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    4d92:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    4d94:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    4d96:	429c      	cmp	r4, r3
    4d98:	d021      	beq.n	4dde <usb_serial_flush_input+0x56>
    4d9a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 4df0 <usb_serial_flush_input+0x68>
    4d9e:	f8df b054 	ldr.w	fp, [pc, #84]	; 4df4 <usb_serial_flush_input+0x6c>
    4da2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4df8 <usb_serial_flush_input+0x70>
    4da6:	4f11      	ldr	r7, [pc, #68]	; (4dec <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    4da8:	3401      	adds	r4, #1
    4daa:	2c08      	cmp	r4, #8
    4dac:	fa5f fa84 	uxtb.w	sl, r4
    4db0:	d901      	bls.n	4db6 <usb_serial_flush_input+0x2e>
    4db2:	2400      	movs	r4, #0
    4db4:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    4db6:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    4dba:	f8db 2000 	ldr.w	r2, [fp]
    4dbe:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    4dc2:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    4dc4:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    4dc8:	1a5b      	subs	r3, r3, r1
    4dca:	1ad3      	subs	r3, r2, r3
    4dcc:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    4dd0:	f7ff fd1c 	bl	480c <rx_queue_transfer>
		rx_tail = tail;
    4dd4:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    4dd8:	782b      	ldrb	r3, [r5, #0]
    4dda:	429c      	cmp	r4, r3
    4ddc:	d1e4      	bne.n	4da8 <usb_serial_flush_input+0x20>
    4dde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4de2:	bf00      	nop
    4de4:	20007400 	.word	0x20007400
    4de8:	20007424 	.word	0x20007424
    4dec:	200072d4 	.word	0x200072d4
    4df0:	20007404 	.word	0x20007404
    4df4:	20007420 	.word	0x20007420
    4df8:	20007410 	.word	0x20007410

00004dfc <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    4dfc:	b500      	push	{lr}
    4dfe:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    4e00:	2101      	movs	r1, #1
    4e02:	f10d 0007 	add.w	r0, sp, #7
    4e06:	f7ff ff21 	bl	4c4c <usb_serial_read>
    4e0a:	b120      	cbz	r0, 4e16 <usb_serial_getchar+0x1a>
    4e0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    4e10:	b003      	add	sp, #12
    4e12:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    4e16:	f04f 30ff 	mov.w	r0, #4294967295
    4e1a:	e7f9      	b.n	4e10 <usb_serial_getchar+0x14>

00004e1c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4e1c:	4b09      	ldr	r3, [pc, #36]	; (4e44 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4e1e:	b500      	push	{lr}
    4e20:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4e22:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4e24:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4e28:	b923      	cbnz	r3, 4e34 <usb_serial_putchar+0x18>
    4e2a:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    4e2e:	b003      	add	sp, #12
    4e30:	f85d fb04 	ldr.w	pc, [sp], #4
    4e34:	2101      	movs	r1, #1
    4e36:	f10d 0007 	add.w	r0, sp, #7
    4e3a:	f7ff fdc3 	bl	49c4 <usb_serial_write.part.1>
    4e3e:	b003      	add	sp, #12
    4e40:	f85d fb04 	ldr.w	pc, [sp], #4
    4e44:	200072d0 	.word	0x200072d0

00004e48 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    4e48:	4b04      	ldr	r3, [pc, #16]	; (4e5c <usb_serial_write+0x14>)
    4e4a:	781b      	ldrb	r3, [r3, #0]
    4e4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4e50:	b10b      	cbz	r3, 4e56 <usb_serial_write+0xe>
    4e52:	f7ff bdb7 	b.w	49c4 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    4e56:	4610      	mov	r0, r2
    4e58:	4770      	bx	lr
    4e5a:	bf00      	nop
    4e5c:	200072d0 	.word	0x200072d0

00004e60 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    4e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    4e64:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    4e66:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4ea8 <usb_serial_write_buffer_free+0x48>
    4e6a:	2301      	movs	r3, #1
    4e6c:	4d0c      	ldr	r5, [pc, #48]	; (4ea0 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    4e6e:	4627      	mov	r7, r4
    4e70:	4e0c      	ldr	r6, [pc, #48]	; (4ea4 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    4e72:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    4e76:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4e78:	4628      	mov	r0, r5
    4e7a:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    4e7c:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    4e7e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    4e82:	d005      	beq.n	4e90 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4e84:	f7ff fc94 	bl	47b0 <usb_transfer_status>
    4e88:	0603      	lsls	r3, r0, #24
    4e8a:	bf58      	it	pl
    4e8c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    4e90:	2c04      	cmp	r4, #4
    4e92:	d1f0      	bne.n	4e76 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    4e94:	2300      	movs	r3, #0
	return sum;
}
    4e96:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    4e98:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    4e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ea0:	20007440 	.word	0x20007440
    4ea4:	200072e7 	.word	0x200072e7
    4ea8:	200072e6 	.word	0x200072e6

00004eac <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    4eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    4eb0:	4b1f      	ldr	r3, [pc, #124]	; (4f30 <usb_serial_flush_output+0x84>)
    4eb2:	781b      	ldrb	r3, [r3, #0]
    4eb4:	b113      	cbz	r3, 4ebc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    4eb6:	4d1f      	ldr	r5, [pc, #124]	; (4f34 <usb_serial_flush_output+0x88>)
    4eb8:	882a      	ldrh	r2, [r5, #0]
    4eba:	b90a      	cbnz	r2, 4ec0 <usb_serial_flush_output+0x14>
    4ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    4ec0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4f48 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    4ec4:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    4ec8:	4e1b      	ldr	r6, [pc, #108]	; (4f38 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    4eca:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    4ece:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4ed2:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4ed4:	4c19      	ldr	r4, [pc, #100]	; (4f3c <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4ed6:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    4ed8:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    4edc:	4f18      	ldr	r7, [pc, #96]	; (4f40 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4ede:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4ee2:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    4ee4:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4ee8:	4621      	mov	r1, r4
    4eea:	f7ff fc23 	bl	4734 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    4eee:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4ef2:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    4ef6:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4efa:	4b12      	ldr	r3, [pc, #72]	; (4f44 <usb_serial_flush_output+0x98>)
    4efc:	6019      	str	r1, [r3, #0]
		location += 32;
    4efe:	3120      	adds	r1, #32
	} while (location < end_addr);
    4f00:	428a      	cmp	r2, r1
    4f02:	d8fb      	bhi.n	4efc <usb_serial_flush_output+0x50>
	asm("dsb");
    4f04:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4f08:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4f0c:	2004      	movs	r0, #4
    4f0e:	4631      	mov	r1, r6
    4f10:	f7ff fc28 	bl	4764 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4f14:	f898 3000 	ldrb.w	r3, [r8]
    4f18:	4a0b      	ldr	r2, [pc, #44]	; (4f48 <usb_serial_flush_output+0x9c>)
    4f1a:	3301      	adds	r3, #1
    4f1c:	b2db      	uxtb	r3, r3
    4f1e:	2b03      	cmp	r3, #3
    4f20:	bf88      	it	hi
    4f22:	2300      	movhi	r3, #0
    4f24:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    4f26:	2300      	movs	r3, #0
    4f28:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    4f2a:	703b      	strb	r3, [r7, #0]
    4f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4f30:	200072d0 	.word	0x200072d0
    4f34:	20007426 	.word	0x20007426
    4f38:	20007440 	.word	0x20007440
    4f3c:	20201ca0 	.word	0x20201ca0
    4f40:	200072e6 	.word	0x200072e6
    4f44:	e000ef70 	.word	0xe000ef70
    4f48:	200072e7 	.word	0x200072e7

00004f4c <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    4f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4f4e:	4b15      	ldr	r3, [pc, #84]	; (4fa4 <software_isr()+0x58>)

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
    4f50:	4d15      	ldr	r5, [pc, #84]	; (4fa8 <software_isr()+0x5c>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4f52:	681c      	ldr	r4, [r3, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
    4f54:	682e      	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4f56:	b914      	cbnz	r4, 4f5e <software_isr()+0x12>
    4f58:	e015      	b.n	4f86 <software_isr()+0x3a>
    4f5a:	6964      	ldr	r4, [r4, #20]
    4f5c:	b19c      	cbz	r4, 4f86 <software_isr()+0x3a>
		if (p->active) {
    4f5e:	7a23      	ldrb	r3, [r4, #8]
    4f60:	2b00      	cmp	r3, #0
    4f62:	d0fa      	beq.n	4f5a <software_isr()+0xe>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    4f64:	6823      	ldr	r3, [r4, #0]
    4f66:	4620      	mov	r0, r4

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    4f68:	682f      	ldr	r7, [r5, #0]
			p->update();
    4f6a:	681b      	ldr	r3, [r3, #0]
    4f6c:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    4f6e:	682b      	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    4f70:	88e1      	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    4f72:	1bdb      	subs	r3, r3, r7
    4f74:	091b      	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    4f76:	b29a      	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    4f78:	428b      	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    4f7a:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    4f7c:	bf88      	it	hi
    4f7e:	80e2      	strhhi	r2, [r4, #6]
{
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4f80:	6964      	ldr	r4, [r4, #20]
    4f82:	2c00      	cmp	r4, #0
    4f84:	d1eb      	bne.n	4f5e <software_isr()+0x12>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    4f86:	4b08      	ldr	r3, [pc, #32]	; (4fa8 <software_isr()+0x5c>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    4f88:	4a08      	ldr	r2, [pc, #32]	; (4fac <software_isr()+0x60>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    4f8a:	681b      	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    4f8c:	8810      	ldrh	r0, [r2, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    4f8e:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    4f90:	4c07      	ldr	r4, [pc, #28]	; (4fb0 <software_isr()+0x64>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    4f92:	091b      	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    4f94:	b299      	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    4f96:	4283      	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    4f98:	8021      	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    4f9a:	d900      	bls.n	4f9e <software_isr()+0x52>
		AudioStream::cpu_cycles_total_max = totalcycles;
    4f9c:	8011      	strh	r1, [r2, #0]

	asm("DSB");
    4f9e:	f3bf 8f4f 	dsb	sy
    4fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fa4:	200074c4 	.word	0x200074c4
    4fa8:	e0001004 	.word	0xe0001004
    4fac:	200074c2 	.word	0x200074c2
    4fb0:	20007542 	.word	0x20007542

00004fb4 <AudioStream::allocate()>:
}

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    4fb4:	b4f0      	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    4fb6:	b672      	cpsid	i
	index = memory_pool_first_mask;
    4fb8:	4f23      	ldr	r7, [pc, #140]	; (5048 <AudioStream::allocate()+0x94>)
	p += index;
    4fba:	4e24      	ldr	r6, [pc, #144]	; (504c <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    4fbc:	883c      	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    4fbe:	f106 0370 	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    4fc2:	eb06 0084 	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    4fc6:	4298      	cmp	r0, r3
    4fc8:	d213      	bcs.n	4ff2 <AudioStream::allocate()+0x3e>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    4fca:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    4fce:	b9a1      	cbnz	r1, 4ffa <AudioStream::allocate()+0x46>
    4fd0:	1d02      	adds	r2, r0, #4
    4fd2:	f106 0573 	add.w	r5, r6, #115	; 0x73
    4fd6:	1c63      	adds	r3, r4, #1
    4fd8:	1aad      	subs	r5, r5, r2
    4fda:	eb03 0595 	add.w	r5, r3, r5, lsr #2
    4fde:	e002      	b.n	4fe6 <AudioStream::allocate()+0x32>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    4fe0:	f852 1b04 	ldr.w	r1, [r2], #4
		if (avail) break;
    4fe4:	b949      	cbnz	r1, 4ffa <AudioStream::allocate()+0x46>
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    4fe6:	42ab      	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    4fe8:	461c      	mov	r4, r3
		p++;
    4fea:	4610      	mov	r0, r2
    4fec:	f103 0301 	add.w	r3, r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    4ff0:	d1f6      	bne.n	4fe0 <AudioStream::allocate()+0x2c>
			__enable_irq();
    4ff2:	b662      	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    4ff4:	2000      	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    4ff6:	bcf0      	pop	{r4, r5, r6, r7}
    4ff8:	4770      	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    4ffa:	fab1 f281 	clz	r2, r1
	avail &= ~(0x80000000 >> n);
    4ffe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    5002:	40d3      	lsrs	r3, r2
    5004:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
    5008:	6001      	str	r1, [r0, #0]
	if (!avail) index++;
    500a:	b901      	cbnz	r1, 500e <AudioStream::allocate()+0x5a>
    500c:	3401      	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    500e:	4b10      	ldr	r3, [pc, #64]	; (5050 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    5010:	803c      	strh	r4, [r7, #0]
	used = memory_used + 1;
    5012:	8819      	ldrh	r1, [r3, #0]
    5014:	3101      	adds	r1, #1
	memory_used = used;
    5016:	b28d      	uxth	r5, r1
    5018:	801d      	strh	r5, [r3, #0]
	__enable_irq();
    501a:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    501c:	1b80      	subs	r0, r0, r6
    501e:	f641 737c 	movw	r3, #8060	; 0x1f7c
    5022:	4c0c      	ldr	r4, [pc, #48]	; (5054 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
    5024:	2701      	movs	r7, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    5026:	1080      	asrs	r0, r0, #2
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    5028:	4e0b      	ldr	r6, [pc, #44]	; (5058 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    502a:	6824      	ldr	r4, [r4, #0]
    502c:	ebc2 1240 	rsb	r2, r2, r0, lsl #5
    5030:	eb02 1282 	add.w	r2, r2, r2, lsl #6
    5034:	0092      	lsls	r2, r2, #2
    5036:	4413      	add	r3, r2
	block->ref_count = 1;
    5038:	54e7      	strb	r7, [r4, r3]
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    503a:	18e0      	adds	r0, r4, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    503c:	8833      	ldrh	r3, [r6, #0]
    503e:	4299      	cmp	r1, r3
    5040:	bf88      	it	hi
    5042:	8035      	strhhi	r5, [r6, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    5044:	bcf0      	pop	{r4, r5, r6, r7}
    5046:	4770      	bx	lr
    5048:	2000753e 	.word	0x2000753e
    504c:	200074c8 	.word	0x200074c8
    5050:	20007540 	.word	0x20007540
    5054:	20007538 	.word	0x20007538
    5058:	200074c0 	.word	0x200074c0

0000505c <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    505c:	8842      	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    505e:	b672      	cpsid	i
	if (block->ref_count > 1) {
    5060:	7803      	ldrb	r3, [r0, #0]
    5062:	2b01      	cmp	r3, #1
    5064:	d903      	bls.n	506e <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    5066:	3b01      	subs	r3, #1
    5068:	7003      	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    506a:	b662      	cpsie	i
    506c:	4770      	bx	lr
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    506e:	43d1      	mvns	r1, r2
    5070:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    5074:	1152      	asrs	r2, r2, #5
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    5076:	f001 011f 	and.w	r1, r1, #31

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    507a:	b430      	push	{r4, r5}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    507c:	4c09      	ldr	r4, [pc, #36]	; (50a4 <AudioStream::release(audio_block_struct*)+0x48>)
    507e:	fa20 f101 	lsr.w	r1, r0, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    5082:	4d09      	ldr	r5, [pc, #36]	; (50a8 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    5084:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    5088:	8828      	ldrh	r0, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    508a:	430b      	orrs	r3, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    508c:	4282      	cmp	r2, r0
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    508e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    5092:	bf38      	it	cc
    5094:	802a      	strhcc	r2, [r5, #0]
		memory_used--;
    5096:	4a05      	ldr	r2, [pc, #20]	; (50ac <AudioStream::release(audio_block_struct*)+0x50>)
    5098:	8813      	ldrh	r3, [r2, #0]
    509a:	3b01      	subs	r3, #1
    509c:	8013      	strh	r3, [r2, #0]
	}
	__enable_irq();
    509e:	b662      	cpsie	i
}
    50a0:	bc30      	pop	{r4, r5}
    50a2:	4770      	bx	lr
    50a4:	200074c8 	.word	0x200074c8
    50a8:	2000753e 	.word	0x2000753e
    50ac:	20007540 	.word	0x20007540

000050b0 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    50b0:	68c3      	ldr	r3, [r0, #12]
    50b2:	b1b3      	cbz	r3, 50e2 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    50b4:	b430      	push	{r4, r5}
    50b6:	e001      	b.n	50bc <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    50b8:	68db      	ldr	r3, [r3, #12]
    50ba:	b18b      	cbz	r3, 50e0 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    50bc:	7a18      	ldrb	r0, [r3, #8]
    50be:	4290      	cmp	r0, r2
    50c0:	d1fa      	bne.n	50b8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    50c2:	6858      	ldr	r0, [r3, #4]
    50c4:	7a5c      	ldrb	r4, [r3, #9]
    50c6:	6900      	ldr	r0, [r0, #16]
    50c8:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    50cc:	2d00      	cmp	r5, #0
    50ce:	d1f3      	bne.n	50b8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    50d0:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    50d4:	7808      	ldrb	r0, [r1, #0]
    50d6:	3001      	adds	r0, #1
    50d8:	7008      	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    50da:	68db      	ldr	r3, [r3, #12]
    50dc:	2b00      	cmp	r3, #0
    50de:	d1ed      	bne.n	50bc <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    50e0:	bc30      	pop	{r4, r5}
    50e2:	4770      	bx	lr

000050e4 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    50e4:	7a43      	ldrb	r3, [r0, #9]
    50e6:	428b      	cmp	r3, r1
    50e8:	d906      	bls.n	50f8 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    50ea:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    50ec:	2200      	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    50ee:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    50f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
    50f6:	4770      	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    50f8:	2000      	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    50fa:	4770      	bx	lr

000050fc <AudioStream::receiveWritable(unsigned int)>:

// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
    50fc:	b538      	push	{r3, r4, r5, lr}
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    50fe:	7a43      	ldrb	r3, [r0, #9]
    5100:	428b      	cmp	r3, r1
    5102:	d91a      	bls.n	513a <AudioStream::receiveWritable(unsigned int)+0x3e>
	in = inputQueue[index];
    5104:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    5106:	2200      	movs	r2, #0
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    5108:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    510c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    5110:	b19c      	cbz	r4, 513a <AudioStream::receiveWritable(unsigned int)+0x3e>
    5112:	7823      	ldrb	r3, [r4, #0]
    5114:	2b01      	cmp	r3, #1
    5116:	d90e      	bls.n	5136 <AudioStream::receiveWritable(unsigned int)+0x3a>
		p = allocate();
    5118:	f7ff ff4c 	bl	4fb4 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    511c:	4605      	mov	r5, r0
    511e:	b128      	cbz	r0, 512c <AudioStream::receiveWritable(unsigned int)+0x30>
    5120:	f44f 7280 	mov.w	r2, #256	; 0x100
    5124:	1d21      	adds	r1, r4, #4
    5126:	3004      	adds	r0, #4
    5128:	f7fe fa26 	bl	3578 <memcpy>
		in->ref_count--;
    512c:	7823      	ldrb	r3, [r4, #0]

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
    512e:	4628      	mov	r0, r5
		if (p) memcpy(p->data, in->data, sizeof(p->data));
		in->ref_count--;
    5130:	3b01      	subs	r3, #1
    5132:	7023      	strb	r3, [r4, #0]
    5134:	bd38      	pop	{r3, r4, r5, pc}
    5136:	4620      	mov	r0, r4
		in = p;
	}
	return in;
}
    5138:	bd38      	pop	{r3, r4, r5, pc}
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    513a:	2000      	movs	r0, #0
    513c:	bd38      	pop	{r3, r4, r5, pc}
    513e:	bf00      	nop

00005140 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    5140:	7c03      	ldrb	r3, [r0, #16]
    5142:	bb23      	cbnz	r3, 518e <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    5144:	6843      	ldr	r3, [r0, #4]
    5146:	7a42      	ldrb	r2, [r0, #9]
    5148:	7a5b      	ldrb	r3, [r3, #9]
    514a:	429a      	cmp	r2, r3
    514c:	d81f      	bhi.n	518e <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    514e:	b430      	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    5150:	b672      	cpsid	i
	p = src.destination_list;
    5152:	6804      	ldr	r4, [r0, #0]
    5154:	68e3      	ldr	r3, [r4, #12]
	if (p == NULL) {
    5156:	b32b      	cbz	r3, 51a4 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    5158:	68da      	ldr	r2, [r3, #12]
    515a:	b132      	cbz	r2, 516a <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    515c:	6819      	ldr	r1, [r3, #0]
    515e:	428c      	cmp	r4, r1
    5160:	d016      	beq.n	5190 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    5162:	4613      	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    5164:	68da      	ldr	r2, [r3, #12]
    5166:	2a00      	cmp	r2, #0
    5168:	d1f8      	bne.n	515c <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    516a:	60d8      	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    516c:	2200      	movs	r2, #0
	src.numConnections++;
	src.active = true;
    516e:	2301      	movs	r3, #1
			}
			p = p->next_dest;
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
    5170:	60c2      	str	r2, [r0, #12]
	src.numConnections++;
    5172:	7aa2      	ldrb	r2, [r4, #10]
    5174:	441a      	add	r2, r3
    5176:	72a2      	strb	r2, [r4, #10]
	src.active = true;
    5178:	6802      	ldr	r2, [r0, #0]

	dst.numConnections++;
    517a:	6841      	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    517c:	7213      	strb	r3, [r2, #8]

	dst.numConnections++;
    517e:	7a8a      	ldrb	r2, [r1, #10]
    5180:	441a      	add	r2, r3
    5182:	728a      	strb	r2, [r1, #10]
	dst.active = true;
    5184:	6842      	ldr	r2, [r0, #4]
    5186:	7213      	strb	r3, [r2, #8]

	isConnected = true;
    5188:	7403      	strb	r3, [r0, #16]

	__enable_irq();
    518a:	b662      	cpsie	i
}
    518c:	bc30      	pop	{r4, r5}
    518e:	4770      	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    5190:	685d      	ldr	r5, [r3, #4]
    5192:	6841      	ldr	r1, [r0, #4]
    5194:	428d      	cmp	r5, r1
    5196:	d1e4      	bne.n	5162 <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    5198:	8919      	ldrh	r1, [r3, #8]
    519a:	8903      	ldrh	r3, [r0, #8]
    519c:	4299      	cmp	r1, r3
    519e:	d0f4      	beq.n	518a <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    51a0:	4613      	mov	r3, r2
    51a2:	e7df      	b.n	5164 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    51a4:	60e0      	str	r0, [r4, #12]
    51a6:	e7e1      	b.n	516c <AudioConnection::connect()+0x2c>

000051a8 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    51a8:	7c03      	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    51aa:	b510      	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    51ac:	2b00      	cmp	r3, #0
    51ae:	d032      	beq.n	5216 <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    51b0:	6843      	ldr	r3, [r0, #4]
    51b2:	7a42      	ldrb	r2, [r0, #9]
    51b4:	7a5b      	ldrb	r3, [r3, #9]
    51b6:	429a      	cmp	r2, r3
    51b8:	d82d      	bhi.n	5216 <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    51ba:	b672      	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    51bc:	6802      	ldr	r2, [r0, #0]
    51be:	68d3      	ldr	r3, [r2, #12]
	if (p == NULL) {
    51c0:	b343      	cbz	r3, 5214 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    51c2:	4298      	cmp	r0, r3
    51c4:	d102      	bne.n	51cc <AudioConnection::disconnect()+0x24>
    51c6:	e029      	b.n	521c <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    51c8:	4298      	cmp	r0, r3
    51ca:	d002      	beq.n	51d2 <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    51cc:	68db      	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    51ce:	2b00      	cmp	r3, #0
    51d0:	d1fa      	bne.n	51c8 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    51d2:	6843      	ldr	r3, [r0, #4]
    51d4:	4604      	mov	r4, r0
    51d6:	7a41      	ldrb	r1, [r0, #9]
    51d8:	691b      	ldr	r3, [r3, #16]
    51da:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    51de:	b148      	cbz	r0, 51f4 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    51e0:	f7ff ff3c 	bl	505c <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    51e4:	b672      	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    51e6:	6863      	ldr	r3, [r4, #4]
    51e8:	2100      	movs	r1, #0
    51ea:	7a62      	ldrb	r2, [r4, #9]
    51ec:	691b      	ldr	r3, [r3, #16]
    51ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    51f2:	6822      	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    51f4:	7a93      	ldrb	r3, [r2, #10]
    51f6:	3b01      	subs	r3, #1
    51f8:	7293      	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    51fa:	6823      	ldr	r3, [r4, #0]
    51fc:	7a9a      	ldrb	r2, [r3, #10]
    51fe:	b902      	cbnz	r2, 5202 <AudioConnection::disconnect()+0x5a>
		src.active = false;
    5200:	721a      	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    5202:	6862      	ldr	r2, [r4, #4]
    5204:	7a93      	ldrb	r3, [r2, #10]
    5206:	3b01      	subs	r3, #1
    5208:	7293      	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    520a:	6863      	ldr	r3, [r4, #4]
    520c:	7a9a      	ldrb	r2, [r3, #10]
    520e:	b11a      	cbz	r2, 5218 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    5210:	2300      	movs	r3, #0
    5212:	7423      	strb	r3, [r4, #16]

	__enable_irq();
    5214:	b662      	cpsie	i
    5216:	bd10      	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    5218:	721a      	strb	r2, [r3, #8]
    521a:	e7f9      	b.n	5210 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    521c:	68c3      	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    521e:	60d3      	str	r3, [r2, #12]
    5220:	e7d7      	b.n	51d2 <AudioConnection::disconnect()+0x2a>
    5222:	bf00      	nop

00005224 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    5224:	4b0a      	ldr	r3, [pc, #40]	; (5250 <AudioStream::update_setup()+0x2c>)
    5226:	781a      	ldrb	r2, [r3, #0]
    5228:	b97a      	cbnz	r2, 524a <AudioStream::update_setup()+0x26>
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    522a:	4a0a      	ldr	r2, [pc, #40]	; (5254 <AudioStream::update_setup()+0x30>)
    522c:	490a      	ldr	r1, [pc, #40]	; (5258 <AudioStream::update_setup()+0x34>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    522e:	b430      	push	{r4, r5}
    5230:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    5234:	4c09      	ldr	r4, [pc, #36]	; (525c <AudioStream::update_setup()+0x38>)
    5236:	25d0      	movs	r5, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    5238:	2040      	movs	r0, #64	; 0x40
	update_scheduled = true;
    523a:	2201      	movs	r2, #1
bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    523c:	4908      	ldr	r1, [pc, #32]	; (5260 <AudioStream::update_setup()+0x3c>)

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    523e:	7025      	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    5240:	6008      	str	r0, [r1, #0]
	update_scheduled = true;
	return true;
    5242:	4610      	mov	r0, r2
{
	if (update_scheduled) return false;
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
	update_scheduled = true;
    5244:	701a      	strb	r2, [r3, #0]
	return true;
}
    5246:	bc30      	pop	{r4, r5}
    5248:	4770      	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    524a:	2000      	movs	r0, #0
    524c:	4770      	bx	lr
    524e:	bf00      	nop
    5250:	2000753c 	.word	0x2000753c
    5254:	20007800 	.word	0x20007800
    5258:	00004f4d 	.word	0x00004f4d
    525c:	e000e446 	.word	0xe000e446
    5260:	e000e108 	.word	0xe000e108

00005264 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    5264:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    5266:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    5268:	b989      	cbnz	r1, 528e <DMAChannel::begin(bool)+0x2a>
    526a:	6802      	ldr	r2, [r0, #0]
    526c:	b17a      	cbz	r2, 528e <DMAChannel::begin(bool)+0x2a>
    526e:	7903      	ldrb	r3, [r0, #4]
    5270:	2b0f      	cmp	r3, #15
    5272:	d80c      	bhi.n	528e <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    5274:	4c1f      	ldr	r4, [pc, #124]	; (52f4 <DMAChannel::begin(bool)+0x90>)
    5276:	8821      	ldrh	r1, [r4, #0]
    5278:	fa41 f503 	asr.w	r5, r1, r3
    527c:	07ed      	lsls	r5, r5, #31
    527e:	d508      	bpl.n	5292 <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    5280:	4d1d      	ldr	r5, [pc, #116]	; (52f8 <DMAChannel::begin(bool)+0x94>)
    5282:	441d      	add	r5, r3
    5284:	ebb2 1f45 	cmp.w	r2, r5, lsl #5
    5288:	d103      	bne.n	5292 <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    528a:	b662      	cpsie	i
		return;
    528c:	e00e      	b.n	52ac <DMAChannel::begin(bool)+0x48>
    528e:	4c19      	ldr	r4, [pc, #100]	; (52f4 <DMAChannel::begin(bool)+0x90>)
    5290:	8821      	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    5292:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    5294:	fa41 f203 	asr.w	r2, r1, r3
    5298:	f012 0201 	ands.w	r2, r2, #1
    529c:	d008      	beq.n	52b0 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    529e:	3301      	adds	r3, #1
    52a0:	2b10      	cmp	r3, #16
    52a2:	d1f7      	bne.n	5294 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    52a4:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    52a6:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    52a8:	7103      	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    52aa:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    52ac:	bcf0      	pop	{r4, r5, r6, r7}
    52ae:	4770      	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    52b0:	2501      	movs	r5, #1
    52b2:	409d      	lsls	r5, r3
    52b4:	4329      	orrs	r1, r5
    52b6:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    52b8:	b662      	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    52ba:	4e10      	ldr	r6, [pc, #64]	; (52fc <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    52bc:	b2dc      	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    52be:	490e      	ldr	r1, [pc, #56]	; (52f8 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    52c0:	f240 4782 	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    52c4:	7104      	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    52c6:	4419      	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    52c8:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    52ca:	014b      	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    52cc:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    52d0:	490b      	ldr	r1, [pc, #44]	; (5300 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    52d2:	67f5      	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    52d4:	600f      	str	r7, [r1, #0]
	DMA_CERQ = ch;
    52d6:	768c      	strb	r4, [r1, #26]
	DMA_CERR = ch;
    52d8:	778c      	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    52da:	760c      	strb	r4, [r1, #24]
	DMA_CINT = ch;
    52dc:	77cc      	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    52de:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    52e0:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    52e2:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    52e4:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    52e6:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    52e8:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    52ea:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    52ec:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    52ee:	61da      	str	r2, [r3, #28]
}
    52f0:	bcf0      	pop	{r4, r5, r6, r7}
    52f2:	4770      	bx	lr
    52f4:	20007544 	.word	0x20007544
    52f8:	02007480 	.word	0x02007480
    52fc:	400fc000 	.word	0x400fc000
    5300:	400e8000 	.word	0x400e8000

00005304 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    5304:	7903      	ldrb	r3, [r0, #4]
    5306:	2b0f      	cmp	r3, #15
    5308:	d810      	bhi.n	532c <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    530a:	4a09      	ldr	r2, [pc, #36]	; (5330 <DMAChannel::release()+0x2c>)
    530c:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    530e:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    5310:	4908      	ldr	r1, [pc, #32]	; (5334 <DMAChannel::release()+0x30>)
    5312:	2301      	movs	r3, #1
    5314:	7902      	ldrb	r2, [r0, #4]
    5316:	fa03 f202 	lsl.w	r2, r3, r2
    531a:	880b      	ldrh	r3, [r1, #0]
    531c:	ea23 0302 	bic.w	r3, r3, r2
    5320:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    5322:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    5324:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    5326:	2300      	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    5328:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    532a:	6003      	str	r3, [r0, #0]
    532c:	4770      	bx	lr
    532e:	bf00      	nop
    5330:	400e8000 	.word	0x400e8000
    5334:	20007544 	.word	0x20007544

00005338 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    5338:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    533a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    533e:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    5340:	7f43      	ldrb	r3, [r0, #29]
    5342:	b933      	cbnz	r3, 5352 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    5344:	7f01      	ldrb	r1, [r0, #28]
    5346:	2901      	cmp	r1, #1
    5348:	d008      	beq.n	535c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    534a:	2903      	cmp	r1, #3
    534c:	d010      	beq.n	5370 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    534e:	2301      	movs	r3, #1
    5350:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5352:	b902      	cbnz	r2, 5356 <EventResponder::triggerEventNotImmediate()+0x1e>
    5354:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    5356:	f85d 4b04 	ldr.w	r4, [sp], #4
    535a:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    535c:	4c11      	ldr	r4, [pc, #68]	; (53a4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    535e:	6821      	ldr	r1, [r4, #0]
    5360:	b1a1      	cbz	r1, 538c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    5362:	4911      	ldr	r1, [pc, #68]	; (53a8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    5364:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    5366:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    5368:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    536a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    536c:	6158      	str	r0, [r3, #20]
    536e:	e7ee      	b.n	534e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    5370:	4c0e      	ldr	r4, [pc, #56]	; (53ac <EventResponder::triggerEventNotImmediate()+0x74>)
    5372:	6821      	ldr	r1, [r4, #0]
    5374:	b181      	cbz	r1, 5398 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    5376:	490e      	ldr	r1, [pc, #56]	; (53b0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    5378:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    537a:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    537c:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    537e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    5380:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    5382:	4b0c      	ldr	r3, [pc, #48]	; (53b4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    5384:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5388:	6019      	str	r1, [r3, #0]
    538a:	e7e0      	b.n	534e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    538c:	4b06      	ldr	r3, [pc, #24]	; (53a8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    538e:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5390:	6181      	str	r1, [r0, #24]
				firstYield = this;
    5392:	6020      	str	r0, [r4, #0]
				lastYield = this;
    5394:	6018      	str	r0, [r3, #0]
    5396:	e7da      	b.n	534e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    5398:	4b05      	ldr	r3, [pc, #20]	; (53b0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    539a:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    539c:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    539e:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    53a0:	6018      	str	r0, [r3, #0]
    53a2:	e7ee      	b.n	5382 <EventResponder::triggerEventNotImmediate()+0x4a>
    53a4:	20007558 	.word	0x20007558
    53a8:	20007554 	.word	0x20007554
    53ac:	20007548 	.word	0x20007548
    53b0:	2000754c 	.word	0x2000754c
    53b4:	e000ed04 	.word	0xe000ed04

000053b8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    53b8:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    53ba:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    53be:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    53c0:	4c0c      	ldr	r4, [pc, #48]	; (53f4 <EventResponder::runFromInterrupt()+0x3c>)
    53c2:	6823      	ldr	r3, [r4, #0]
		if (first) {
    53c4:	b18b      	cbz	r3, 53ea <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    53c6:	4e0c      	ldr	r6, [pc, #48]	; (53f8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    53c8:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    53ca:	695a      	ldr	r2, [r3, #20]
    53cc:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    53ce:	b17a      	cbz	r2, 53f0 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    53d0:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    53d2:	b901      	cbnz	r1, 53d6 <EventResponder::runFromInterrupt()+0x1e>
    53d4:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    53d6:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    53d8:	4618      	mov	r0, r3
    53da:	689b      	ldr	r3, [r3, #8]
    53dc:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    53de:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    53e2:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    53e4:	6823      	ldr	r3, [r4, #0]
		if (first) {
    53e6:	2b00      	cmp	r3, #0
    53e8:	d1ef      	bne.n	53ca <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    53ea:	b901      	cbnz	r1, 53ee <EventResponder::runFromInterrupt()+0x36>
    53ec:	b662      	cpsie	i
    53ee:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    53f0:	6032      	str	r2, [r6, #0]
    53f2:	e7ee      	b.n	53d2 <EventResponder::runFromInterrupt()+0x1a>
    53f4:	20007548 	.word	0x20007548
    53f8:	2000754c 	.word	0x2000754c

000053fc <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    53fc:	f7ff bfdc 	b.w	53b8 <EventResponder::runFromInterrupt()>

00005400 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    5400:	4a18      	ldr	r2, [pc, #96]	; (5464 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    5402:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    5404:	6814      	ldr	r4, [r2, #0]
    5406:	2c00      	cmp	r4, #0
    5408:	d028      	beq.n	545c <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    540a:	6803      	ldr	r3, [r0, #0]
    540c:	6821      	ldr	r1, [r4, #0]
    540e:	428b      	cmp	r3, r1
    5410:	d20f      	bcs.n	5432 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    5412:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    5414:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    5416:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5418:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    541a:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    541c:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    541e:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    5420:	2302      	movs	r3, #2
}
    5422:	bc30      	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    5424:	7503      	strb	r3, [r0, #20]
}
    5426:	4770      	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    5428:	6003      	str	r3, [r0, #0]
    542a:	4614      	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    542c:	6811      	ldr	r1, [r2, #0]
    542e:	428b      	cmp	r3, r1
    5430:	d308      	bcc.n	5444 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5432:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    5434:	1a5b      	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5436:	2a00      	cmp	r2, #0
    5438:	d1f6      	bne.n	5428 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    543a:	6082      	str	r2, [r0, #8]
		_prev = timer;
    543c:	60c4      	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    543e:	6003      	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    5440:	60a0      	str	r0, [r4, #8]
    5442:	e7ed      	b.n	5420 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    5444:	68d5      	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    5446:	1acb      	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    5448:	6082      	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    544a:	2202      	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    544c:	60c5      	str	r5, [r0, #12]
				timer->_prev = this;
    544e:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    5450:	68c1      	ldr	r1, [r0, #12]
    5452:	6088      	str	r0, [r1, #8]
				timer->_ms -= _ms;
    5454:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    5456:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    5458:	bc30      	pop	{r4, r5}
    545a:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    545c:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    545e:	60c4      	str	r4, [r0, #12]
		listActive = this;
    5460:	6010      	str	r0, [r2, #0]
    5462:	e7dd      	b.n	5420 <MillisTimer::addToActiveList()+0x20>
    5464:	20007550 	.word	0x20007550

00005468 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    5468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    546a:	4e22      	ldr	r6, [pc, #136]	; (54f4 <MillisTimer::runFromTimer()+0x8c>)
    546c:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    546e:	b32c      	cbz	r4, 54bc <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    5470:	6823      	ldr	r3, [r4, #0]
    5472:	2b00      	cmp	r3, #0
    5474:	d13a      	bne.n	54ec <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    5476:	461d      	mov	r5, r3
    5478:	4f1f      	ldr	r7, [pc, #124]	; (54f8 <MillisTimer::runFromTimer()+0x90>)
    547a:	e004      	b.n	5486 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    547c:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    547e:	b1ec      	cbz	r4, 54bc <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    5480:	6823      	ldr	r3, [r4, #0]
    5482:	2b00      	cmp	r3, #0
    5484:	d132      	bne.n	54ec <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    5486:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    5488:	b103      	cbz	r3, 548c <MillisTimer::runFromTimer()+0x24>
    548a:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    548c:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    548e:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5490:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    5492:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	42bb      	cmp	r3, r7
    5498:	d121      	bne.n	54de <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    549a:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    549c:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    549e:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    54a0:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    54a2:	d020      	beq.n	54e6 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    54a4:	f7ff ff48 	bl	5338 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    54a8:	6863      	ldr	r3, [r4, #4]
    54aa:	2b00      	cmp	r3, #0
    54ac:	d0e6      	beq.n	547c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    54ae:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    54b0:	4620      	mov	r0, r4
    54b2:	f7ff ffa5 	bl	5400 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    54b6:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    54b8:	2c00      	cmp	r4, #0
    54ba:	d1e1      	bne.n	5480 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    54bc:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    54c0:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    54c2:	4a0e      	ldr	r2, [pc, #56]	; (54fc <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    54c4:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    54c6:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    54c8:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    54ca:	b903      	cbnz	r3, 54ce <MillisTimer::runFromTimer()+0x66>
    54cc:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    54ce:	b128      	cbz	r0, 54dc <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    54d0:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    54d2:	f7ff ff95 	bl	5400 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    54d6:	4620      	mov	r0, r4
    54d8:	2800      	cmp	r0, #0
    54da:	d1f9      	bne.n	54d0 <MillisTimer::runFromTimer()+0x68>
    54dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    54de:	4622      	mov	r2, r4
    54e0:	2100      	movs	r1, #0
    54e2:	4798      	blx	r3
    54e4:	e7e0      	b.n	54a8 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    54e6:	6883      	ldr	r3, [r0, #8]
    54e8:	4798      	blx	r3
    54ea:	e7dd      	b.n	54a8 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    54ec:	3b01      	subs	r3, #1
    54ee:	6023      	str	r3, [r4, #0]
			break;
    54f0:	e7e4      	b.n	54bc <MillisTimer::runFromTimer()+0x54>
    54f2:	bf00      	nop
    54f4:	20007550 	.word	0x20007550
    54f8:	00001ac1 	.word	0x00001ac1
    54fc:	20007560 	.word	0x20007560

00005500 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    5500:	4a04      	ldr	r2, [pc, #16]	; (5514 <systick_isr+0x14>)
    5502:	4b05      	ldr	r3, [pc, #20]	; (5518 <systick_isr+0x18>)
    5504:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    5506:	4a05      	ldr	r2, [pc, #20]	; (551c <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    5508:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    550a:	6813      	ldr	r3, [r2, #0]
    550c:	3301      	adds	r3, #1
    550e:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    5510:	f7ff bfaa 	b.w	5468 <MillisTimer::runFromTimer()>
    5514:	e0001004 	.word	0xe0001004
    5518:	20007280 	.word	0x20007280
    551c:	20007288 	.word	0x20007288

00005520 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    5520:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    5522:	f7fb fa09 	bl	938 <setup>
	while (1) {
		loop();
    5526:	f7fb faff 	bl	b28 <loop>
		yield();
    552a:	f000 f881 	bl	5630 <yield>
    552e:	e7fa      	b.n	5526 <main+0x6>

00005530 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    5530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    5532:	460e      	mov	r6, r1
    5534:	b171      	cbz	r1, 5554 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    5536:	b17a      	cbz	r2, 5558 <Print::write(unsigned char const*, unsigned int)+0x28>
    5538:	4607      	mov	r7, r0
    553a:	4614      	mov	r4, r2
    553c:	2500      	movs	r5, #0
    553e:	683b      	ldr	r3, [r7, #0]
    5540:	4638      	mov	r0, r7
    5542:	f816 1b01 	ldrb.w	r1, [r6], #1
    5546:	681b      	ldr	r3, [r3, #0]
    5548:	4798      	blx	r3
    554a:	3c01      	subs	r4, #1
    554c:	4405      	add	r5, r0
    554e:	d1f6      	bne.n	553e <Print::write(unsigned char const*, unsigned int)+0xe>
    5550:	4628      	mov	r0, r5
    5552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    5554:	4608      	mov	r0, r1
    5556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5558:	4610      	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000555c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    555c:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    555e:	4c06      	ldr	r4, [pc, #24]	; (5578 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    5560:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    5562:	6803      	ldr	r3, [r0, #0]
    5564:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    5566:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    5568:	a901      	add	r1, sp, #4
    556a:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    556c:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    5570:	4798      	blx	r3
}
    5572:	b002      	add	sp, #8
    5574:	bd10      	pop	{r4, pc}
    5576:	bf00      	nop
    5578:	200014d4 	.word	0x200014d4

0000557c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    557c:	b5f0      	push	{r4, r5, r6, r7, lr}
    557e:	4606      	mov	r6, r0
    5580:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    5582:	2a00      	cmp	r2, #0
    5584:	d033      	beq.n	55ee <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    5586:	2a01      	cmp	r2, #1
    5588:	bf08      	it	eq
    558a:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    558c:	b351      	cbz	r1, 55e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    558e:	2521      	movs	r5, #33	; 0x21
    5590:	e000      	b.n	5594 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    5592:	b2fd      	uxtb	r5, r7
    5594:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    5596:	fbb1 f4f2 	udiv	r4, r1, r2
    559a:	fb02 1114 	mls	r1, r2, r4, r1
    559e:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    55a0:	2909      	cmp	r1, #9
    55a2:	f100 0137 	add.w	r1, r0, #55	; 0x37
    55a6:	f100 0030 	add.w	r0, r0, #48	; 0x30
    55aa:	bf88      	it	hi
    55ac:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    55ae:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    55b0:	ac0a      	add	r4, sp, #40	; 0x28
    55b2:	bf98      	it	ls
    55b4:	b2c0      	uxtbls	r0, r0
    55b6:	442c      	add	r4, r5
    55b8:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    55bc:	2900      	cmp	r1, #0
    55be:	d1e8      	bne.n	5592 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    55c0:	b133      	cbz	r3, 55d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    55c2:	3d01      	subs	r5, #1
		buf[i] = '-';
    55c4:	ab0a      	add	r3, sp, #40	; 0x28
    55c6:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    55c8:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    55ca:	442b      	add	r3, r5
    55cc:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    55d0:	6833      	ldr	r3, [r6, #0]
    55d2:	a901      	add	r1, sp, #4
    55d4:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    55d8:	4630      	mov	r0, r6
    55da:	4429      	add	r1, r5
    55dc:	685b      	ldr	r3, [r3, #4]
    55de:	4798      	blx	r3
}
    55e0:	b00b      	add	sp, #44	; 0x2c
    55e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    55e4:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    55e6:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    55e8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    55ec:	e7e8      	b.n	55c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    55ee:	6803      	ldr	r3, [r0, #0]
    55f0:	b2c9      	uxtb	r1, r1
    55f2:	681b      	ldr	r3, [r3, #0]
    55f4:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    55f6:	b00b      	add	sp, #44	; 0x2c
    55f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55fa:	bf00      	nop

000055fc <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    55fc:	f7ff bbc4 	b.w	4d88 <usb_serial_flush_input>

00005600 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    5600:	f7ff bb9a 	b.w	4d38 <usb_serial_peekchar>

00005604 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    5604:	f7ff bbfa 	b.w	4dfc <usb_serial_getchar>

00005608 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5608:	f7ff bbb8 	b.w	4d7c <usb_serial_available>

0000560c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    560c:	f7ff bc4e 	b.w	4eac <usb_serial_flush_output>

00005610 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    5610:	f7ff bc26 	b.w	4e60 <usb_serial_write_buffer_free>

00005614 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5614:	4608      	mov	r0, r1
    5616:	4611      	mov	r1, r2
    5618:	f7ff bc16 	b.w	4e48 <usb_serial_write>

0000561c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    561c:	4608      	mov	r0, r1
    561e:	f7ff bbfd 	b.w	4e1c <usb_serial_putchar>
    5622:	bf00      	nop

00005624 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    5624:	4b01      	ldr	r3, [pc, #4]	; (562c <serialEvent()+0x8>)
    5626:	2200      	movs	r2, #0
    5628:	701a      	strb	r2, [r3, #0]
    562a:	4770      	bx	lr
    562c:	20004e0e 	.word	0x20004e0e

00005630 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5630:	b570      	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    5632:	4c21      	ldr	r4, [pc, #132]	; (56b8 <yield+0x88>)
    5634:	7823      	ldrb	r3, [r4, #0]
    5636:	b983      	cbnz	r3, 565a <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    5638:	4b20      	ldr	r3, [pc, #128]	; (56bc <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    563a:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    563c:	781b      	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    563e:	7022      	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    5640:	bb1b      	cbnz	r3, 568a <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    5642:	4b1f      	ldr	r3, [pc, #124]	; (56c0 <yield+0x90>)
    5644:	781b      	ldrb	r3, [r3, #0]
    5646:	2b00      	cmp	r3, #0
    5648:	d129      	bne.n	569e <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    564a:	4b1e      	ldr	r3, [pc, #120]	; (56c4 <yield+0x94>)

	running = 0;
    564c:	2100      	movs	r1, #0
    564e:	681a      	ldr	r2, [r3, #0]
    5650:	7021      	strb	r1, [r4, #0]
    5652:	b112      	cbz	r2, 565a <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5654:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    5658:	b102      	cbz	r2, 565c <yield+0x2c>
    565a:	bd70      	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    565c:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    5660:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    5662:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    5664:	b1f2      	cbz	r2, 56a4 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    5666:	4c18      	ldr	r4, [pc, #96]	; (56c8 <yield+0x98>)
    5668:	7821      	ldrb	r1, [r4, #0]
    566a:	b9d9      	cbnz	r1, 56a4 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    566c:	2601      	movs	r6, #1
		firstYield = first->_next;
    566e:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    5670:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    5672:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    5674:	b1d5      	cbz	r5, 56ac <yield+0x7c>
			firstYield->_prev = nullptr;
    5676:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5678:	b900      	cbnz	r0, 567c <yield+0x4c>
    567a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    567c:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    567e:	6893      	ldr	r3, [r2, #8]
    5680:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    5682:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    5684:	4798      	blx	r3
		runningFromYield = false;
    5686:	7025      	strb	r5, [r4, #0]
    5688:	bd70      	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    568a:	f7ff fb77 	bl	4d7c <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    568e:	2800      	cmp	r0, #0
    5690:	d0d7      	beq.n	5642 <yield+0x12>
    5692:	f7ff ffc7 	bl	5624 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    5696:	4b0a      	ldr	r3, [pc, #40]	; (56c0 <yield+0x90>)
    5698:	781b      	ldrb	r3, [r3, #0]
    569a:	2b00      	cmp	r3, #0
    569c:	d0d5      	beq.n	564a <yield+0x1a>
    569e:	f000 f83f 	bl	5720 <HardwareSerial::processSerialEvents()>
    56a2:	e7d2      	b.n	564a <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    56a4:	2800      	cmp	r0, #0
    56a6:	d1d8      	bne.n	565a <yield+0x2a>
    56a8:	b662      	cpsie	i
    56aa:	bd70      	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    56ac:	4b07      	ldr	r3, [pc, #28]	; (56cc <yield+0x9c>)
    56ae:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    56b0:	2800      	cmp	r0, #0
    56b2:	d1e3      	bne.n	567c <yield+0x4c>
    56b4:	e7e1      	b.n	567a <yield+0x4a>
    56b6:	bf00      	nop
    56b8:	20007564 	.word	0x20007564
    56bc:	20004e0e 	.word	0x20004e0e
    56c0:	20007584 	.word	0x20007584
    56c4:	20007558 	.word	0x20007558
    56c8:	2000755c 	.word	0x2000755c
    56cc:	20007554 	.word	0x20007554

000056d0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    56d0:	b4f0      	push	{r4, r5, r6, r7}
    56d2:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    56d4:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    56d6:	4637      	mov	r7, r6
    56d8:	e000      	b.n	56dc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    56da:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    56dc:	fbb0 f3f2 	udiv	r3, r0, r2
    56e0:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    56e4:	f100 0437 	add.w	r4, r0, #55	; 0x37
    56e8:	2809      	cmp	r0, #9
    56ea:	f100 0030 	add.w	r0, r0, #48	; 0x30
    56ee:	b2e4      	uxtb	r4, r4
    56f0:	bf98      	it	ls
    56f2:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    56f4:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    56f6:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    56fa:	2b00      	cmp	r3, #0
    56fc:	d1ed      	bne.n	56da <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    56fe:	194a      	adds	r2, r1, r5
    5700:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    5702:	b14d      	cbz	r5, 5718 <ultoa+0x48>
    5704:	3301      	adds	r3, #1
		t = buf[j];
    5706:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    570a:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    570c:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    570e:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5710:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    5712:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5716:	dbf5      	blt.n	5704 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    5718:	4608      	mov	r0, r1
    571a:	bcf0      	pop	{r4, r5, r6, r7}
    571c:	4770      	bx	lr
    571e:	bf00      	nop

00005720 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    5720:	b538      	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    5722:	4b07      	ldr	r3, [pc, #28]	; (5740 <HardwareSerial::processSerialEvents()+0x20>)
    5724:	781c      	ldrb	r4, [r3, #0]
    5726:	b14c      	cbz	r4, 573c <HardwareSerial::processSerialEvents()+0x1c>
    5728:	4d06      	ldr	r5, [pc, #24]	; (5744 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    572a:	f855 3f04 	ldr.w	r3, [r5, #4]!
    572e:	2b00      	cmp	r3, #0
    5730:	d0fb      	beq.n	572a <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    5732:	4798      	blx	r3
			if (--handlers_still_to_process == 0) return;
    5734:	1e63      	subs	r3, r4, #1
    5736:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    573a:	d1f6      	bne.n	572a <HardwareSerial::processSerialEvents()+0xa>
    573c:	bd38      	pop	{r3, r4, r5, pc}
    573e:	bf00      	nop
    5740:	20007584 	.word	0x20007584
    5744:	20007564 	.word	0x20007564

00005748 <arm_radix4_butterfly_q15>:
    5748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    574c:	469b      	mov	fp, r3
    574e:	b091      	sub	sp, #68	; 0x44
    5750:	088b      	lsrs	r3, r1, #2
    5752:	4606      	mov	r6, r0
    5754:	900e      	str	r0, [sp, #56]	; 0x38
    5756:	2500      	movs	r5, #0
    5758:	4618      	mov	r0, r3
    575a:	9103      	str	r1, [sp, #12]
    575c:	930f      	str	r3, [sp, #60]	; 0x3c
    575e:	4637      	mov	r7, r6
    5760:	0081      	lsls	r1, r0, #2
    5762:	4682      	mov	sl, r0
    5764:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    5768:	4696      	mov	lr, r2
    576a:	1870      	adds	r0, r6, r1
    576c:	9207      	str	r2, [sp, #28]
    576e:	009b      	lsls	r3, r3, #2
    5770:	462c      	mov	r4, r5
    5772:	1846      	adds	r6, r0, r1
    5774:	462a      	mov	r2, r5
    5776:	9304      	str	r3, [sp, #16]
    5778:	4431      	add	r1, r6
    577a:	9601      	str	r6, [sp, #4]
    577c:	f8cd b008 	str.w	fp, [sp, #8]
    5780:	683b      	ldr	r3, [r7, #0]
    5782:	fa93 fc22 	shadd16	ip, r3, r2
    5786:	fa9c fc22 	shadd16	ip, ip, r2
    578a:	9b01      	ldr	r3, [sp, #4]
    578c:	681b      	ldr	r3, [r3, #0]
    578e:	fa93 f322 	shadd16	r3, r3, r2
    5792:	fa93 f322 	shadd16	r3, r3, r2
    5796:	fa9c f813 	qadd16	r8, ip, r3
    579a:	fadc fc13 	qsub16	ip, ip, r3
    579e:	6803      	ldr	r3, [r0, #0]
    57a0:	fa93 f322 	shadd16	r3, r3, r2
    57a4:	fa93 f922 	shadd16	r9, r3, r2
    57a8:	680b      	ldr	r3, [r1, #0]
    57aa:	fa93 f322 	shadd16	r3, r3, r2
    57ae:	fa93 f322 	shadd16	r3, r3, r2
    57b2:	fa99 f313 	qadd16	r3, r9, r3
    57b6:	fa98 f923 	shadd16	r9, r8, r3
    57ba:	f847 9b04 	str.w	r9, [r7], #4
    57be:	fad8 f313 	qsub16	r3, r8, r3
    57c2:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    57c6:	fb29 fb03 	smuad	fp, r9, r3
    57ca:	fb49 f913 	smusdx	r9, r9, r3
    57ce:	6803      	ldr	r3, [r0, #0]
    57d0:	fa93 f322 	shadd16	r3, r3, r2
    57d4:	fa93 f822 	shadd16	r8, r3, r2
    57d8:	4b78      	ldr	r3, [pc, #480]	; (59bc <arm_radix4_butterfly_q15+0x274>)
    57da:	ea09 0303 	and.w	r3, r9, r3
    57de:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    57e2:	f840 3b04 	str.w	r3, [r0], #4
    57e6:	680b      	ldr	r3, [r1, #0]
    57e8:	fa93 f322 	shadd16	r3, r3, r2
    57ec:	fa93 f322 	shadd16	r3, r3, r2
    57f0:	fad8 f313 	qsub16	r3, r8, r3
    57f4:	faac f913 	qasx	r9, ip, r3
    57f8:	faec fc13 	qsax	ip, ip, r3
    57fc:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    5800:	fb23 f80c 	smuad	r8, r3, ip
    5804:	fb43 fc1c 	smusdx	ip, r3, ip
    5808:	4b6c      	ldr	r3, [pc, #432]	; (59bc <arm_radix4_butterfly_q15+0x274>)
    580a:	9e01      	ldr	r6, [sp, #4]
    580c:	ea0c 0303 	and.w	r3, ip, r3
    5810:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    5814:	f846 3b04 	str.w	r3, [r6], #4
    5818:	9601      	str	r6, [sp, #4]
    581a:	462e      	mov	r6, r5
    581c:	f85e 3005 	ldr.w	r3, [lr, r5]
    5820:	fb23 fc09 	smuad	ip, r3, r9
    5824:	fb43 f919 	smusdx	r9, r3, r9
    5828:	4b64      	ldr	r3, [pc, #400]	; (59bc <arm_radix4_butterfly_q15+0x274>)
    582a:	f1ba 0a01 	subs.w	sl, sl, #1
    582e:	9d02      	ldr	r5, [sp, #8]
    5830:	ea09 0303 	and.w	r3, r9, r3
    5834:	442c      	add	r4, r5
    5836:	9d04      	ldr	r5, [sp, #16]
    5838:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    583c:	442e      	add	r6, r5
    583e:	f841 3b04 	str.w	r3, [r1], #4
    5842:	4635      	mov	r5, r6
    5844:	d19c      	bne.n	5780 <arm_radix4_butterfly_q15+0x38>
    5846:	f8dd b008 	ldr.w	fp, [sp, #8]
    584a:	ea4f 038b 	mov.w	r3, fp, lsl #2
    584e:	9309      	str	r3, [sp, #36]	; 0x24
    5850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5852:	2b04      	cmp	r3, #4
    5854:	f240 8086 	bls.w	5964 <arm_radix4_butterfly_q15+0x21c>
    5858:	f8cd a010 	str.w	sl, [sp, #16]
    585c:	930c      	str	r3, [sp, #48]	; 0x30
    585e:	9302      	str	r3, [sp, #8]
    5860:	9a02      	ldr	r2, [sp, #8]
    5862:	2100      	movs	r1, #0
    5864:	0893      	lsrs	r3, r2, #2
    5866:	9105      	str	r1, [sp, #20]
    5868:	0097      	lsls	r7, r2, #2
    586a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    586c:	930d      	str	r3, [sp, #52]	; 0x34
    586e:	9206      	str	r2, [sp, #24]
    5870:	1e5a      	subs	r2, r3, #1
    5872:	009b      	lsls	r3, r3, #2
    5874:	9108      	str	r1, [sp, #32]
    5876:	920a      	str	r2, [sp, #40]	; 0x28
    5878:	930b      	str	r3, [sp, #44]	; 0x2c
    587a:	9907      	ldr	r1, [sp, #28]
    587c:	9a08      	ldr	r2, [sp, #32]
    587e:	460d      	mov	r5, r1
    5880:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5882:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    5886:	4611      	mov	r1, r2
    5888:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    588c:	9a07      	ldr	r2, [sp, #28]
    588e:	9e06      	ldr	r6, [sp, #24]
    5890:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    5894:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5896:	1930      	adds	r0, r6, r4
    5898:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    589c:	18cb      	adds	r3, r1, r3
    589e:	9a05      	ldr	r2, [sp, #20]
    58a0:	1825      	adds	r5, r4, r0
    58a2:	9308      	str	r3, [sp, #32]
    58a4:	9b03      	ldr	r3, [sp, #12]
    58a6:	442c      	add	r4, r5
    58a8:	4293      	cmp	r3, r2
    58aa:	d946      	bls.n	593a <arm_radix4_butterfly_q15+0x1f2>
    58ac:	9b02      	ldr	r3, [sp, #8]
    58ae:	9501      	str	r5, [sp, #4]
    58b0:	eb03 0e02 	add.w	lr, r3, r2
    58b4:	9a01      	ldr	r2, [sp, #4]
    58b6:	6833      	ldr	r3, [r6, #0]
    58b8:	6812      	ldr	r2, [r2, #0]
    58ba:	fa93 fa12 	qadd16	sl, r3, r2
    58be:	fad3 f312 	qsub16	r3, r3, r2
    58c2:	6801      	ldr	r1, [r0, #0]
    58c4:	6822      	ldr	r2, [r4, #0]
    58c6:	fa91 f112 	qadd16	r1, r1, r2
    58ca:	fa9a f221 	shadd16	r2, sl, r1
    58ce:	9d04      	ldr	r5, [sp, #16]
    58d0:	fa92 f225 	shadd16	r2, r2, r5
    58d4:	6032      	str	r2, [r6, #0]
    58d6:	443e      	add	r6, r7
    58d8:	fada f121 	shsub16	r1, sl, r1
    58dc:	fb28 fb01 	smuad	fp, r8, r1
    58e0:	fb48 f211 	smusdx	r2, r8, r1
    58e4:	4935      	ldr	r1, [pc, #212]	; (59bc <arm_radix4_butterfly_q15+0x274>)
    58e6:	f8d0 a000 	ldr.w	sl, [r0]
    58ea:	4011      	ands	r1, r2
    58ec:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    58f0:	6001      	str	r1, [r0, #0]
    58f2:	4438      	add	r0, r7
    58f4:	6822      	ldr	r2, [r4, #0]
    58f6:	fada f212 	qsub16	r2, sl, r2
    58fa:	faa3 f122 	shasx	r1, r3, r2
    58fe:	fae3 f322 	shsax	r3, r3, r2
    5902:	fb2c fb03 	smuad	fp, ip, r3
    5906:	fb4c f313 	smusdx	r3, ip, r3
    590a:	4a2c      	ldr	r2, [pc, #176]	; (59bc <arm_radix4_butterfly_q15+0x274>)
    590c:	401a      	ands	r2, r3
    590e:	9b01      	ldr	r3, [sp, #4]
    5910:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    5914:	601a      	str	r2, [r3, #0]
    5916:	443b      	add	r3, r7
    5918:	9301      	str	r3, [sp, #4]
    591a:	fb29 f201 	smuad	r2, r9, r1
    591e:	fb49 f111 	smusdx	r1, r9, r1
    5922:	4b26      	ldr	r3, [pc, #152]	; (59bc <arm_radix4_butterfly_q15+0x274>)
    5924:	46f2      	mov	sl, lr
    5926:	9d02      	ldr	r5, [sp, #8]
    5928:	400b      	ands	r3, r1
    592a:	44ae      	add	lr, r5
    592c:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    5930:	6023      	str	r3, [r4, #0]
    5932:	443c      	add	r4, r7
    5934:	9b03      	ldr	r3, [sp, #12]
    5936:	4553      	cmp	r3, sl
    5938:	d8bc      	bhi.n	58b4 <arm_radix4_butterfly_q15+0x16c>
    593a:	9a06      	ldr	r2, [sp, #24]
    593c:	9b05      	ldr	r3, [sp, #20]
    593e:	3204      	adds	r2, #4
    5940:	3301      	adds	r3, #1
    5942:	9206      	str	r2, [sp, #24]
    5944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5946:	9305      	str	r3, [sp, #20]
    5948:	4293      	cmp	r3, r2
    594a:	d996      	bls.n	587a <arm_radix4_butterfly_q15+0x132>
    594c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    594e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5950:	089b      	lsrs	r3, r3, #2
    5952:	9202      	str	r2, [sp, #8]
    5954:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5956:	2b04      	cmp	r3, #4
    5958:	930c      	str	r3, [sp, #48]	; 0x30
    595a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    595e:	9209      	str	r2, [sp, #36]	; 0x24
    5960:	f63f af7e 	bhi.w	5860 <arm_radix4_butterfly_q15+0x118>
    5964:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    5966:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    5968:	3410      	adds	r4, #16
    596a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    596e:	f854 7c08 	ldr.w	r7, [r4, #-8]
    5972:	fa93 f117 	qadd16	r1, r3, r7
    5976:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    597a:	f854 0c04 	ldr.w	r0, [r4, #-4]
    597e:	fa92 f510 	qadd16	r5, r2, r0
    5982:	fa91 f525 	shadd16	r5, r1, r5
    5986:	f844 5c10 	str.w	r5, [r4, #-16]
    598a:	fa92 f510 	qadd16	r5, r2, r0
    598e:	fad1 f125 	shsub16	r1, r1, r5
    5992:	f844 1c0c 	str.w	r1, [r4, #-12]
    5996:	fad3 f317 	qsub16	r3, r3, r7
    599a:	fad2 f210 	qsub16	r2, r2, r0
    599e:	fae3 f122 	shsax	r1, r3, r2
    59a2:	f844 1c08 	str.w	r1, [r4, #-8]
    59a6:	faa3 f322 	shasx	r3, r3, r2
    59aa:	3e01      	subs	r6, #1
    59ac:	f844 3c04 	str.w	r3, [r4, #-4]
    59b0:	f104 0410 	add.w	r4, r4, #16
    59b4:	d1d9      	bne.n	596a <arm_radix4_butterfly_q15+0x222>
    59b6:	b011      	add	sp, #68	; 0x44
    59b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59bc:	ffff0000 	.word	0xffff0000

000059c0 <arm_radix4_butterfly_inverse_q15>:
    59c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59c4:	469b      	mov	fp, r3
    59c6:	b091      	sub	sp, #68	; 0x44
    59c8:	088b      	lsrs	r3, r1, #2
    59ca:	4606      	mov	r6, r0
    59cc:	900e      	str	r0, [sp, #56]	; 0x38
    59ce:	2500      	movs	r5, #0
    59d0:	4618      	mov	r0, r3
    59d2:	9103      	str	r1, [sp, #12]
    59d4:	930f      	str	r3, [sp, #60]	; 0x3c
    59d6:	4637      	mov	r7, r6
    59d8:	0081      	lsls	r1, r0, #2
    59da:	4682      	mov	sl, r0
    59dc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    59e0:	4696      	mov	lr, r2
    59e2:	1870      	adds	r0, r6, r1
    59e4:	9207      	str	r2, [sp, #28]
    59e6:	009b      	lsls	r3, r3, #2
    59e8:	462c      	mov	r4, r5
    59ea:	1846      	adds	r6, r0, r1
    59ec:	462a      	mov	r2, r5
    59ee:	9304      	str	r3, [sp, #16]
    59f0:	4431      	add	r1, r6
    59f2:	9601      	str	r6, [sp, #4]
    59f4:	f8cd b008 	str.w	fp, [sp, #8]
    59f8:	683b      	ldr	r3, [r7, #0]
    59fa:	fa93 fc22 	shadd16	ip, r3, r2
    59fe:	fa9c fc22 	shadd16	ip, ip, r2
    5a02:	9b01      	ldr	r3, [sp, #4]
    5a04:	681b      	ldr	r3, [r3, #0]
    5a06:	fa93 f322 	shadd16	r3, r3, r2
    5a0a:	fa93 f322 	shadd16	r3, r3, r2
    5a0e:	fa9c f813 	qadd16	r8, ip, r3
    5a12:	fadc fc13 	qsub16	ip, ip, r3
    5a16:	6803      	ldr	r3, [r0, #0]
    5a18:	fa93 f322 	shadd16	r3, r3, r2
    5a1c:	fa93 f922 	shadd16	r9, r3, r2
    5a20:	680b      	ldr	r3, [r1, #0]
    5a22:	fa93 f322 	shadd16	r3, r3, r2
    5a26:	fa93 f322 	shadd16	r3, r3, r2
    5a2a:	fa99 f313 	qadd16	r3, r9, r3
    5a2e:	fa98 f923 	shadd16	r9, r8, r3
    5a32:	f847 9b04 	str.w	r9, [r7], #4
    5a36:	fad8 f313 	qsub16	r3, r8, r3
    5a3a:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
    5a3e:	fb49 fb03 	smusd	fp, r9, r3
    5a42:	fb29 f913 	smuadx	r9, r9, r3
    5a46:	6803      	ldr	r3, [r0, #0]
    5a48:	fa93 f322 	shadd16	r3, r3, r2
    5a4c:	fa93 f822 	shadd16	r8, r3, r2
    5a50:	4b78      	ldr	r3, [pc, #480]	; (5c34 <arm_radix4_butterfly_inverse_q15+0x274>)
    5a52:	ea09 0303 	and.w	r3, r9, r3
    5a56:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
    5a5a:	f840 3b04 	str.w	r3, [r0], #4
    5a5e:	680b      	ldr	r3, [r1, #0]
    5a60:	fa93 f322 	shadd16	r3, r3, r2
    5a64:	fa93 f322 	shadd16	r3, r3, r2
    5a68:	fad8 f313 	qsub16	r3, r8, r3
    5a6c:	faec f913 	qsax	r9, ip, r3
    5a70:	faac fc13 	qasx	ip, ip, r3
    5a74:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
    5a78:	fb43 f80c 	smusd	r8, r3, ip
    5a7c:	fb23 fc1c 	smuadx	ip, r3, ip
    5a80:	4b6c      	ldr	r3, [pc, #432]	; (5c34 <arm_radix4_butterfly_inverse_q15+0x274>)
    5a82:	9e01      	ldr	r6, [sp, #4]
    5a84:	ea0c 0303 	and.w	r3, ip, r3
    5a88:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
    5a8c:	f846 3b04 	str.w	r3, [r6], #4
    5a90:	9601      	str	r6, [sp, #4]
    5a92:	462e      	mov	r6, r5
    5a94:	f85e 3005 	ldr.w	r3, [lr, r5]
    5a98:	fb43 fc09 	smusd	ip, r3, r9
    5a9c:	fb23 f919 	smuadx	r9, r3, r9
    5aa0:	4b64      	ldr	r3, [pc, #400]	; (5c34 <arm_radix4_butterfly_inverse_q15+0x274>)
    5aa2:	f1ba 0a01 	subs.w	sl, sl, #1
    5aa6:	9d02      	ldr	r5, [sp, #8]
    5aa8:	ea09 0303 	and.w	r3, r9, r3
    5aac:	442c      	add	r4, r5
    5aae:	9d04      	ldr	r5, [sp, #16]
    5ab0:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
    5ab4:	442e      	add	r6, r5
    5ab6:	f841 3b04 	str.w	r3, [r1], #4
    5aba:	4635      	mov	r5, r6
    5abc:	d19c      	bne.n	59f8 <arm_radix4_butterfly_inverse_q15+0x38>
    5abe:	f8dd b008 	ldr.w	fp, [sp, #8]
    5ac2:	ea4f 038b 	mov.w	r3, fp, lsl #2
    5ac6:	9309      	str	r3, [sp, #36]	; 0x24
    5ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5aca:	2b04      	cmp	r3, #4
    5acc:	f240 8086 	bls.w	5bdc <arm_radix4_butterfly_inverse_q15+0x21c>
    5ad0:	f8cd a010 	str.w	sl, [sp, #16]
    5ad4:	930c      	str	r3, [sp, #48]	; 0x30
    5ad6:	9302      	str	r3, [sp, #8]
    5ad8:	9a02      	ldr	r2, [sp, #8]
    5ada:	2100      	movs	r1, #0
    5adc:	0893      	lsrs	r3, r2, #2
    5ade:	9105      	str	r1, [sp, #20]
    5ae0:	0097      	lsls	r7, r2, #2
    5ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5ae4:	930d      	str	r3, [sp, #52]	; 0x34
    5ae6:	9206      	str	r2, [sp, #24]
    5ae8:	1e5a      	subs	r2, r3, #1
    5aea:	009b      	lsls	r3, r3, #2
    5aec:	9108      	str	r1, [sp, #32]
    5aee:	920a      	str	r2, [sp, #40]	; 0x28
    5af0:	930b      	str	r3, [sp, #44]	; 0x2c
    5af2:	9907      	ldr	r1, [sp, #28]
    5af4:	9a08      	ldr	r2, [sp, #32]
    5af6:	460d      	mov	r5, r1
    5af8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5afa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    5afe:	4611      	mov	r1, r2
    5b00:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
    5b04:	9a07      	ldr	r2, [sp, #28]
    5b06:	9e06      	ldr	r6, [sp, #24]
    5b08:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
    5b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b0e:	1930      	adds	r0, r6, r4
    5b10:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
    5b14:	18cb      	adds	r3, r1, r3
    5b16:	9a05      	ldr	r2, [sp, #20]
    5b18:	1825      	adds	r5, r4, r0
    5b1a:	9308      	str	r3, [sp, #32]
    5b1c:	9b03      	ldr	r3, [sp, #12]
    5b1e:	442c      	add	r4, r5
    5b20:	4293      	cmp	r3, r2
    5b22:	d946      	bls.n	5bb2 <arm_radix4_butterfly_inverse_q15+0x1f2>
    5b24:	9b02      	ldr	r3, [sp, #8]
    5b26:	9501      	str	r5, [sp, #4]
    5b28:	eb03 0e02 	add.w	lr, r3, r2
    5b2c:	9a01      	ldr	r2, [sp, #4]
    5b2e:	6833      	ldr	r3, [r6, #0]
    5b30:	6812      	ldr	r2, [r2, #0]
    5b32:	fa93 fa12 	qadd16	sl, r3, r2
    5b36:	fad3 f312 	qsub16	r3, r3, r2
    5b3a:	6801      	ldr	r1, [r0, #0]
    5b3c:	6822      	ldr	r2, [r4, #0]
    5b3e:	fa91 f112 	qadd16	r1, r1, r2
    5b42:	fa9a f221 	shadd16	r2, sl, r1
    5b46:	9d04      	ldr	r5, [sp, #16]
    5b48:	fa92 f225 	shadd16	r2, r2, r5
    5b4c:	6032      	str	r2, [r6, #0]
    5b4e:	443e      	add	r6, r7
    5b50:	fada f121 	shsub16	r1, sl, r1
    5b54:	fb48 fb01 	smusd	fp, r8, r1
    5b58:	fb28 f211 	smuadx	r2, r8, r1
    5b5c:	4935      	ldr	r1, [pc, #212]	; (5c34 <arm_radix4_butterfly_inverse_q15+0x274>)
    5b5e:	f8d0 a000 	ldr.w	sl, [r0]
    5b62:	4011      	ands	r1, r2
    5b64:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
    5b68:	6001      	str	r1, [r0, #0]
    5b6a:	4438      	add	r0, r7
    5b6c:	6822      	ldr	r2, [r4, #0]
    5b6e:	fada f212 	qsub16	r2, sl, r2
    5b72:	fae3 f122 	shsax	r1, r3, r2
    5b76:	faa3 f322 	shasx	r3, r3, r2
    5b7a:	fb4c fb03 	smusd	fp, ip, r3
    5b7e:	fb2c f313 	smuadx	r3, ip, r3
    5b82:	4a2c      	ldr	r2, [pc, #176]	; (5c34 <arm_radix4_butterfly_inverse_q15+0x274>)
    5b84:	401a      	ands	r2, r3
    5b86:	9b01      	ldr	r3, [sp, #4]
    5b88:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    5b8c:	601a      	str	r2, [r3, #0]
    5b8e:	443b      	add	r3, r7
    5b90:	9301      	str	r3, [sp, #4]
    5b92:	fb49 f201 	smusd	r2, r9, r1
    5b96:	fb29 f111 	smuadx	r1, r9, r1
    5b9a:	4b26      	ldr	r3, [pc, #152]	; (5c34 <arm_radix4_butterfly_inverse_q15+0x274>)
    5b9c:	46f2      	mov	sl, lr
    5b9e:	9d02      	ldr	r5, [sp, #8]
    5ba0:	400b      	ands	r3, r1
    5ba2:	44ae      	add	lr, r5
    5ba4:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
    5ba8:	6023      	str	r3, [r4, #0]
    5baa:	443c      	add	r4, r7
    5bac:	9b03      	ldr	r3, [sp, #12]
    5bae:	4553      	cmp	r3, sl
    5bb0:	d8bc      	bhi.n	5b2c <arm_radix4_butterfly_inverse_q15+0x16c>
    5bb2:	9a06      	ldr	r2, [sp, #24]
    5bb4:	9b05      	ldr	r3, [sp, #20]
    5bb6:	3204      	adds	r2, #4
    5bb8:	3301      	adds	r3, #1
    5bba:	9206      	str	r2, [sp, #24]
    5bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5bbe:	9305      	str	r3, [sp, #20]
    5bc0:	4293      	cmp	r3, r2
    5bc2:	d996      	bls.n	5af2 <arm_radix4_butterfly_inverse_q15+0x132>
    5bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5bc8:	089b      	lsrs	r3, r3, #2
    5bca:	9202      	str	r2, [sp, #8]
    5bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5bce:	2b04      	cmp	r3, #4
    5bd0:	930c      	str	r3, [sp, #48]	; 0x30
    5bd2:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5bd6:	9209      	str	r2, [sp, #36]	; 0x24
    5bd8:	f63f af7e 	bhi.w	5ad8 <arm_radix4_butterfly_inverse_q15+0x118>
    5bdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    5bde:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    5be0:	3410      	adds	r4, #16
    5be2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5be6:	f854 7c08 	ldr.w	r7, [r4, #-8]
    5bea:	fa93 f117 	qadd16	r1, r3, r7
    5bee:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    5bf2:	f854 0c04 	ldr.w	r0, [r4, #-4]
    5bf6:	fa92 f510 	qadd16	r5, r2, r0
    5bfa:	fa91 f525 	shadd16	r5, r1, r5
    5bfe:	f844 5c10 	str.w	r5, [r4, #-16]
    5c02:	fa92 f510 	qadd16	r5, r2, r0
    5c06:	fad1 f125 	shsub16	r1, r1, r5
    5c0a:	f844 1c0c 	str.w	r1, [r4, #-12]
    5c0e:	fad3 f317 	qsub16	r3, r3, r7
    5c12:	fad2 f210 	qsub16	r2, r2, r0
    5c16:	faa3 f122 	shasx	r1, r3, r2
    5c1a:	f844 1c08 	str.w	r1, [r4, #-8]
    5c1e:	fae3 f322 	shsax	r3, r3, r2
    5c22:	3e01      	subs	r6, #1
    5c24:	f844 3c04 	str.w	r3, [r4, #-4]
    5c28:	f104 0410 	add.w	r4, r4, #16
    5c2c:	d1d9      	bne.n	5be2 <arm_radix4_butterfly_inverse_q15+0x222>
    5c2e:	b011      	add	sp, #68	; 0x44
    5c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c34:	ffff0000 	.word	0xffff0000

00005c38 <arm_cfft_radix4_q15>:
    5c38:	b570      	push	{r4, r5, r6, lr}
    5c3a:	7883      	ldrb	r3, [r0, #2]
    5c3c:	4604      	mov	r4, r0
    5c3e:	460d      	mov	r5, r1
    5c40:	2b01      	cmp	r3, #1
    5c42:	6862      	ldr	r2, [r4, #4]
    5c44:	8983      	ldrh	r3, [r0, #12]
    5c46:	4608      	mov	r0, r1
    5c48:	8821      	ldrh	r1, [r4, #0]
    5c4a:	d005      	beq.n	5c58 <arm_cfft_radix4_q15+0x20>
    5c4c:	f7ff fd7c 	bl	5748 <arm_radix4_butterfly_q15>
    5c50:	78e3      	ldrb	r3, [r4, #3]
    5c52:	2b01      	cmp	r3, #1
    5c54:	d005      	beq.n	5c62 <arm_cfft_radix4_q15+0x2a>
    5c56:	bd70      	pop	{r4, r5, r6, pc}
    5c58:	f7ff feb2 	bl	59c0 <arm_radix4_butterfly_inverse_q15>
    5c5c:	78e3      	ldrb	r3, [r4, #3]
    5c5e:	2b01      	cmp	r3, #1
    5c60:	d1f9      	bne.n	5c56 <arm_cfft_radix4_q15+0x1e>
    5c62:	4628      	mov	r0, r5
    5c64:	68a3      	ldr	r3, [r4, #8]
    5c66:	89e2      	ldrh	r2, [r4, #14]
    5c68:	8821      	ldrh	r1, [r4, #0]
    5c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c6e:	f000 b855 	b.w	5d1c <arm_bitreversal_q15>
    5c72:	bf00      	nop

00005c74 <arm_cfft_radix4_init_q15>:
    5c74:	b410      	push	{r4}
    5c76:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    5c7a:	4604      	mov	r4, r0
    5c7c:	4821      	ldr	r0, [pc, #132]	; (5d04 <arm_cfft_radix4_init_q15+0x90>)
    5c7e:	70a2      	strb	r2, [r4, #2]
    5c80:	70e3      	strb	r3, [r4, #3]
    5c82:	8021      	strh	r1, [r4, #0]
    5c84:	6060      	str	r0, [r4, #4]
    5c86:	d033      	beq.n	5cf0 <arm_cfft_radix4_init_q15+0x7c>
    5c88:	d80b      	bhi.n	5ca2 <arm_cfft_radix4_init_q15+0x2e>
    5c8a:	2910      	cmp	r1, #16
    5c8c:	d026      	beq.n	5cdc <arm_cfft_radix4_init_q15+0x68>
    5c8e:	2940      	cmp	r1, #64	; 0x40
    5c90:	d116      	bne.n	5cc0 <arm_cfft_radix4_init_q15+0x4c>
    5c92:	4b1d      	ldr	r3, [pc, #116]	; (5d08 <arm_cfft_radix4_init_q15+0x94>)
    5c94:	2000      	movs	r0, #0
    5c96:	81a1      	strh	r1, [r4, #12]
    5c98:	81e1      	strh	r1, [r4, #14]
    5c9a:	60a3      	str	r3, [r4, #8]
    5c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ca0:	4770      	bx	lr
    5ca2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    5ca6:	d010      	beq.n	5cca <arm_cfft_radix4_init_q15+0x56>
    5ca8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    5cac:	d108      	bne.n	5cc0 <arm_cfft_radix4_init_q15+0x4c>
    5cae:	2301      	movs	r3, #1
    5cb0:	4a16      	ldr	r2, [pc, #88]	; (5d0c <arm_cfft_radix4_init_q15+0x98>)
    5cb2:	2000      	movs	r0, #0
    5cb4:	81a3      	strh	r3, [r4, #12]
    5cb6:	81e3      	strh	r3, [r4, #14]
    5cb8:	60a2      	str	r2, [r4, #8]
    5cba:	f85d 4b04 	ldr.w	r4, [sp], #4
    5cbe:	4770      	bx	lr
    5cc0:	f04f 30ff 	mov.w	r0, #4294967295
    5cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    5cc8:	4770      	bx	lr
    5cca:	2304      	movs	r3, #4
    5ccc:	4a10      	ldr	r2, [pc, #64]	; (5d10 <arm_cfft_radix4_init_q15+0x9c>)
    5cce:	2000      	movs	r0, #0
    5cd0:	81a3      	strh	r3, [r4, #12]
    5cd2:	81e3      	strh	r3, [r4, #14]
    5cd4:	60a2      	str	r2, [r4, #8]
    5cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
    5cda:	4770      	bx	lr
    5cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
    5ce0:	4a0c      	ldr	r2, [pc, #48]	; (5d14 <arm_cfft_radix4_init_q15+0xa0>)
    5ce2:	2000      	movs	r0, #0
    5ce4:	81a3      	strh	r3, [r4, #12]
    5ce6:	81e3      	strh	r3, [r4, #14]
    5ce8:	60a2      	str	r2, [r4, #8]
    5cea:	f85d 4b04 	ldr.w	r4, [sp], #4
    5cee:	4770      	bx	lr
    5cf0:	2310      	movs	r3, #16
    5cf2:	4a09      	ldr	r2, [pc, #36]	; (5d18 <arm_cfft_radix4_init_q15+0xa4>)
    5cf4:	2000      	movs	r0, #0
    5cf6:	81a3      	strh	r3, [r4, #12]
    5cf8:	81e3      	strh	r3, [r4, #14]
    5cfa:	60a2      	str	r2, [r4, #8]
    5cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    5d00:	4770      	bx	lr
    5d02:	bf00      	nop
    5d04:	20001500 	.word	0x20001500
    5d08:	2000457e 	.word	0x2000457e
    5d0c:	20004500 	.word	0x20004500
    5d10:	20004506 	.word	0x20004506
    5d14:	200046fe 	.word	0x200046fe
    5d18:	2000451e 	.word	0x2000451e

00005d1c <arm_bitreversal_q15>:
    5d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d20:	0849      	lsrs	r1, r1, #1
    5d22:	2600      	movs	r6, #0
    5d24:	ea4f 0a42 	mov.w	sl, r2, lsl #1
    5d28:	4605      	mov	r5, r0
    5d2a:	f101 0c01 	add.w	ip, r1, #1
    5d2e:	f1a1 0e02 	sub.w	lr, r1, #2
    5d32:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    5d36:	4634      	mov	r4, r6
    5d38:	e011      	b.n	5d5e <arm_bitreversal_q15+0x42>
    5d3a:	42b4      	cmp	r4, r6
    5d3c:	d90d      	bls.n	5d5a <arm_bitreversal_q15+0x3e>
    5d3e:	f8d5 9008 	ldr.w	r9, [r5, #8]
    5d42:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5d46:	60aa      	str	r2, [r5, #8]
    5d48:	f840 9024 	str.w	r9, [r0, r4, lsl #2]
    5d4c:	f8d7 900c 	ldr.w	r9, [r7, #12]
    5d50:	f850 2028 	ldr.w	r2, [r0, r8, lsl #2]
    5d54:	60fa      	str	r2, [r7, #12]
    5d56:	f840 9028 	str.w	r9, [r0, r8, lsl #2]
    5d5a:	3508      	adds	r5, #8
    5d5c:	3708      	adds	r7, #8
    5d5e:	440c      	add	r4, r1
    5d60:	f8d5 8004 	ldr.w	r8, [r5, #4]
    5d64:	3602      	adds	r6, #2
    5d66:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5d6a:	4576      	cmp	r6, lr
    5d6c:	606a      	str	r2, [r5, #4]
    5d6e:	f840 8024 	str.w	r8, [r0, r4, lsl #2]
    5d72:	881c      	ldrh	r4, [r3, #0]
    5d74:	4453      	add	r3, sl
    5d76:	eb0c 0804 	add.w	r8, ip, r4
    5d7a:	d9de      	bls.n	5d3a <arm_bitreversal_q15+0x1e>
    5d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005d80 <log10>:
    5d80:	b500      	push	{lr}
    5d82:	ed2d 8b02 	vpush	{d8}
    5d86:	eeb0 8b40 	vmov.f64	d8, d0
    5d8a:	b08b      	sub	sp, #44	; 0x2c
    5d8c:	f000 f870 	bl	5e70 <__ieee754_log10>
    5d90:	4b31      	ldr	r3, [pc, #196]	; (5e58 <log10+0xd8>)
    5d92:	f993 3000 	ldrsb.w	r3, [r3]
    5d96:	1c5a      	adds	r2, r3, #1
    5d98:	d009      	beq.n	5dae <log10+0x2e>
    5d9a:	eeb4 8b48 	vcmp.f64	d8, d8
    5d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5da2:	d604      	bvs.n	5dae <log10+0x2e>
    5da4:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    5da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5dac:	d904      	bls.n	5db8 <log10+0x38>
    5dae:	b00b      	add	sp, #44	; 0x2c
    5db0:	ecbd 8b02 	vpop	{d8}
    5db4:	f85d fb04 	ldr.w	pc, [sp], #4
    5db8:	4a28      	ldr	r2, [pc, #160]	; (5e5c <log10+0xdc>)
    5dba:	9201      	str	r2, [sp, #4]
    5dbc:	2200      	movs	r2, #0
    5dbe:	ed8d 8b02 	vstr	d8, [sp, #8]
    5dc2:	ed8d 8b04 	vstr	d8, [sp, #16]
    5dc6:	9208      	str	r2, [sp, #32]
    5dc8:	b9c3      	cbnz	r3, 5dfc <log10+0x7c>
    5dca:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5dce:	4b24      	ldr	r3, [pc, #144]	; (5e60 <log10+0xe0>)
    5dd0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    5dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5dd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5ddc:	d133      	bne.n	5e46 <log10+0xc6>
    5dde:	2302      	movs	r3, #2
    5de0:	9300      	str	r3, [sp, #0]
    5de2:	4668      	mov	r0, sp
    5de4:	f000 f8c6 	bl	5f74 <matherr>
    5de8:	b1a8      	cbz	r0, 5e16 <log10+0x96>
    5dea:	9b08      	ldr	r3, [sp, #32]
    5dec:	b9c3      	cbnz	r3, 5e20 <log10+0xa0>
    5dee:	ed9d 0b06 	vldr	d0, [sp, #24]
    5df2:	b00b      	add	sp, #44	; 0x2c
    5df4:	ecbd 8b02 	vpop	{d8}
    5df8:	f85d fb04 	ldr.w	pc, [sp], #4
    5dfc:	4919      	ldr	r1, [pc, #100]	; (5e64 <log10+0xe4>)
    5dfe:	eeb5 8b40 	vcmp.f64	d8, #0.0
    5e02:	2000      	movs	r0, #0
    5e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5e08:	e9cd 0106 	strd	r0, r1, [sp, #24]
    5e0c:	d10d      	bne.n	5e2a <log10+0xaa>
    5e0e:	2202      	movs	r2, #2
    5e10:	4293      	cmp	r3, r2
    5e12:	9200      	str	r2, [sp, #0]
    5e14:	d1e5      	bne.n	5de2 <log10+0x62>
    5e16:	f000 fa01 	bl	621c <__errno>
    5e1a:	2322      	movs	r3, #34	; 0x22
    5e1c:	6003      	str	r3, [r0, #0]
    5e1e:	e7e4      	b.n	5dea <log10+0x6a>
    5e20:	f000 f9fc 	bl	621c <__errno>
    5e24:	9b08      	ldr	r3, [sp, #32]
    5e26:	6003      	str	r3, [r0, #0]
    5e28:	e7e1      	b.n	5dee <log10+0x6e>
    5e2a:	2201      	movs	r2, #1
    5e2c:	2b02      	cmp	r3, #2
    5e2e:	9200      	str	r2, [sp, #0]
    5e30:	d10b      	bne.n	5e4a <log10+0xca>
    5e32:	f000 f9f3 	bl	621c <__errno>
    5e36:	2321      	movs	r3, #33	; 0x21
    5e38:	6003      	str	r3, [r0, #0]
    5e3a:	480b      	ldr	r0, [pc, #44]	; (5e68 <log10+0xe8>)
    5e3c:	f000 f89c 	bl	5f78 <nan>
    5e40:	ed8d 0b06 	vstr	d0, [sp, #24]
    5e44:	e7d1      	b.n	5dea <log10+0x6a>
    5e46:	2301      	movs	r3, #1
    5e48:	9300      	str	r3, [sp, #0]
    5e4a:	4668      	mov	r0, sp
    5e4c:	f000 f892 	bl	5f74 <matherr>
    5e50:	2800      	cmp	r0, #0
    5e52:	d1f2      	bne.n	5e3a <log10+0xba>
    5e54:	e7ed      	b.n	5e32 <log10+0xb2>
    5e56:	bf00      	nop
    5e58:	20004e20 	.word	0x20004e20
    5e5c:	20004d00 	.word	0x20004d00
    5e60:	c7efffff 	.word	0xc7efffff
    5e64:	fff00000 	.word	0xfff00000
    5e68:	20000050 	.word	0x20000050
    5e6c:	00000000 	.word	0x00000000

00005e70 <__ieee754_log10>:
    5e70:	b530      	push	{r4, r5, lr}
    5e72:	ed2d 8b02 	vpush	{d8}
    5e76:	b083      	sub	sp, #12
    5e78:	ed8d 0b00 	vstr	d0, [sp]
    5e7c:	e89d 000c 	ldmia.w	sp, {r2, r3}
    5e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5e84:	da1b      	bge.n	5ebe <__ieee754_log10+0x4e>
    5e86:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    5e8a:	430a      	orrs	r2, r1
    5e8c:	d043      	beq.n	5f16 <__ieee754_log10+0xa6>
    5e8e:	2b00      	cmp	r3, #0
    5e90:	db4b      	blt.n	5f2a <__ieee754_log10+0xba>
    5e92:	ed9d 6b00 	vldr	d6, [sp]
    5e96:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 5f40 <__ieee754_log10+0xd0>
    5e9a:	ee26 7b07 	vmul.f64	d7, d6, d7
    5e9e:	ed8d 7b00 	vstr	d7, [sp]
    5ea2:	9b01      	ldr	r3, [sp, #4]
    5ea4:	4932      	ldr	r1, [pc, #200]	; (5f70 <__ieee754_log10+0x100>)
    5ea6:	428b      	cmp	r3, r1
    5ea8:	f06f 0235 	mvn.w	r2, #53	; 0x35
    5eac:	dd0c      	ble.n	5ec8 <__ieee754_log10+0x58>
    5eae:	ed9d 7b00 	vldr	d7, [sp]
    5eb2:	ee37 0b07 	vadd.f64	d0, d7, d7
    5eb6:	b003      	add	sp, #12
    5eb8:	ecbd 8b02 	vpop	{d8}
    5ebc:	bd30      	pop	{r4, r5, pc}
    5ebe:	492c      	ldr	r1, [pc, #176]	; (5f70 <__ieee754_log10+0x100>)
    5ec0:	428b      	cmp	r3, r1
    5ec2:	f04f 0200 	mov.w	r2, #0
    5ec6:	dcf2      	bgt.n	5eae <__ieee754_log10+0x3e>
    5ec8:	1518      	asrs	r0, r3, #20
    5eca:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
    5ece:	1884      	adds	r4, r0, r2
    5ed0:	0fe0      	lsrs	r0, r4, #31
    5ed2:	f3c3 0113 	ubfx	r1, r3, #0, #20
    5ed6:	f5c0 757f 	rsb	r5, r0, #1020	; 0x3fc
    5eda:	e9dd 2300 	ldrd	r2, r3, [sp]
    5ede:	4420      	add	r0, r4
    5ee0:	3503      	adds	r5, #3
    5ee2:	ee07 0a90 	vmov	s15, r0
    5ee6:	ea41 5305 	orr.w	r3, r1, r5, lsl #20
    5eea:	ec43 2b10 	vmov	d0, r2, r3
    5eee:	eeb8 8be7 	vcvt.f64.s32	d8, s15
    5ef2:	f000 f849 	bl	5f88 <__ieee754_log>
    5ef6:	ed9f 7b14 	vldr	d7, [pc, #80]	; 5f48 <__ieee754_log10+0xd8>
    5efa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 5f50 <__ieee754_log10+0xe0>
    5efe:	ee20 0b07 	vmul.f64	d0, d0, d7
    5f02:	ed9f 7b15 	vldr	d7, [pc, #84]	; 5f58 <__ieee754_log10+0xe8>
    5f06:	eea8 0b06 	vfma.f64	d0, d8, d6
    5f0a:	eea8 0b07 	vfma.f64	d0, d8, d7
    5f0e:	b003      	add	sp, #12
    5f10:	ecbd 8b02 	vpop	{d8}
    5f14:	bd30      	pop	{r4, r5, pc}
    5f16:	ed9f 6b12 	vldr	d6, [pc, #72]	; 5f60 <__ieee754_log10+0xf0>
    5f1a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 5f68 <__ieee754_log10+0xf8>
    5f1e:	ee86 0b07 	vdiv.f64	d0, d6, d7
    5f22:	b003      	add	sp, #12
    5f24:	ecbd 8b02 	vpop	{d8}
    5f28:	bd30      	pop	{r4, r5, pc}
    5f2a:	ed9d 7b00 	vldr	d7, [sp]
    5f2e:	ee37 6b47 	vsub.f64	d6, d7, d7
    5f32:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 5f68 <__ieee754_log10+0xf8>
    5f36:	ee86 0b07 	vdiv.f64	d0, d6, d7
    5f3a:	e7bc      	b.n	5eb6 <__ieee754_log10+0x46>
    5f3c:	f3af 8000 	nop.w
    5f40:	00000000 	.word	0x00000000
    5f44:	43500000 	.word	0x43500000
    5f48:	1526e50e 	.word	0x1526e50e
    5f4c:	3fdbcb7b 	.word	0x3fdbcb7b
    5f50:	11f12b36 	.word	0x11f12b36
    5f54:	3d59fef3 	.word	0x3d59fef3
    5f58:	509f6000 	.word	0x509f6000
    5f5c:	3fd34413 	.word	0x3fd34413
    5f60:	00000000 	.word	0x00000000
    5f64:	c3500000 	.word	0xc3500000
	...
    5f70:	7fefffff 	.word	0x7fefffff

00005f74 <matherr>:
    5f74:	2000      	movs	r0, #0
    5f76:	4770      	bx	lr

00005f78 <nan>:
    5f78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 5f80 <nan+0x8>
    5f7c:	4770      	bx	lr
    5f7e:	bf00      	nop
    5f80:	00000000 	.word	0x00000000
    5f84:	7ff80000 	.word	0x7ff80000

00005f88 <__ieee754_log>:
    5f88:	b470      	push	{r4, r5, r6}
    5f8a:	b083      	sub	sp, #12
    5f8c:	ed8d 0b00 	vstr	d0, [sp]
    5f90:	9901      	ldr	r1, [sp, #4]
    5f92:	9b00      	ldr	r3, [sp, #0]
    5f94:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    5f98:	da4d      	bge.n	6036 <__ieee754_log+0xae>
    5f9a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    5f9e:	4313      	orrs	r3, r2
    5fa0:	f000 809a 	beq.w	60d8 <__ieee754_log+0x150>
    5fa4:	2900      	cmp	r1, #0
    5fa6:	f2c0 80e2 	blt.w	616e <__ieee754_log+0x1e6>
    5faa:	ed9d 6b00 	vldr	d6, [sp]
    5fae:	ed9f 7b7a 	vldr	d7, [pc, #488]	; 6198 <__ieee754_log+0x210>
    5fb2:	ee26 7b07 	vmul.f64	d7, d6, d7
    5fb6:	ed8d 7b00 	vstr	d7, [sp]
    5fba:	9901      	ldr	r1, [sp, #4]
    5fbc:	4b90      	ldr	r3, [pc, #576]	; (6200 <__ieee754_log+0x278>)
    5fbe:	4299      	cmp	r1, r3
    5fc0:	f06f 0035 	mvn.w	r0, #53	; 0x35
    5fc4:	dc3c      	bgt.n	6040 <__ieee754_log+0xb8>
    5fc6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    5fca:	f3c1 0513 	ubfx	r5, r1, #0, #20
    5fce:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
    5fd2:	f603 7364 	addw	r3, r3, #3940	; 0xf64
    5fd6:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
    5fda:	f084 567f 	eor.w	r6, r4, #1069547520	; 0x3fc00000
    5fde:	e9dd 2300 	ldrd	r2, r3, [sp]
    5fe2:	f486 1640 	eor.w	r6, r6, #3145728	; 0x300000
    5fe6:	ea46 0305 	orr.w	r3, r6, r5
    5fea:	ec43 2b17 	vmov	d7, r2, r3
    5fee:	1509      	asrs	r1, r1, #20
    5ff0:	1cab      	adds	r3, r5, #2
    5ff2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    5ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5ffa:	4401      	add	r1, r0
    5ffc:	2b02      	cmp	r3, #2
    5ffe:	eb01 5114 	add.w	r1, r1, r4, lsr #20
    6002:	ee37 7b40 	vsub.f64	d7, d7, d0
    6006:	dc22      	bgt.n	604e <__ieee754_log+0xc6>
    6008:	eeb5 7b40 	vcmp.f64	d7, #0.0
    600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6010:	d16b      	bne.n	60ea <__ieee754_log+0x162>
    6012:	2900      	cmp	r1, #0
    6014:	f000 80b4 	beq.w	6180 <__ieee754_log+0x1f8>
    6018:	ed9f 0b61 	vldr	d0, [pc, #388]	; 61a0 <__ieee754_log+0x218>
    601c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 61a8 <__ieee754_log+0x220>
    6020:	ee07 1a90 	vmov	s15, r1
    6024:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    6028:	ee26 7b00 	vmul.f64	d7, d6, d0
    602c:	eea6 7b05 	vfma.f64	d7, d6, d5
    6030:	eeb0 0b47 	vmov.f64	d0, d7
    6034:	e008      	b.n	6048 <__ieee754_log+0xc0>
    6036:	4b72      	ldr	r3, [pc, #456]	; (6200 <__ieee754_log+0x278>)
    6038:	4299      	cmp	r1, r3
    603a:	f04f 0000 	mov.w	r0, #0
    603e:	ddc2      	ble.n	5fc6 <__ieee754_log+0x3e>
    6040:	ed9d 7b00 	vldr	d7, [sp]
    6044:	ee37 0b07 	vadd.f64	d0, d7, d7
    6048:	b003      	add	sp, #12
    604a:	bc70      	pop	{r4, r5, r6}
    604c:	4770      	bx	lr
    604e:	ed9f 0b58 	vldr	d0, [pc, #352]	; 61b0 <__ieee754_log+0x228>
    6052:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
    6056:	ee37 6b06 	vadd.f64	d6, d7, d6
    605a:	ed9f 1b57 	vldr	d1, [pc, #348]	; 61b8 <__ieee754_log+0x230>
    605e:	ee87 4b06 	vdiv.f64	d4, d7, d6
    6062:	ee24 3b04 	vmul.f64	d3, d4, d4
    6066:	ed9f 2b56 	vldr	d2, [pc, #344]	; 61c0 <__ieee754_log+0x238>
    606a:	ee23 5b03 	vmul.f64	d5, d3, d3
    606e:	eea5 1b00 	vfma.f64	d1, d5, d0
    6072:	ed9f 6b55 	vldr	d6, [pc, #340]	; 61c8 <__ieee754_log+0x240>
    6076:	eea5 2b01 	vfma.f64	d2, d5, d1
    607a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 61d0 <__ieee754_log+0x248>
    607e:	eea5 6b02 	vfma.f64	d6, d5, d2
    6082:	ee26 6b03 	vmul.f64	d6, d6, d3
    6086:	ed9f 2b54 	vldr	d2, [pc, #336]	; 61d8 <__ieee754_log+0x250>
    608a:	ed9f 3b55 	vldr	d3, [pc, #340]	; 61e0 <__ieee754_log+0x258>
    608e:	f5a5 22c2 	sub.w	r2, r5, #397312	; 0x61000
    6092:	f5c5 23d7 	rsb	r3, r5, #440320	; 0x6b800
    6096:	f2a2 427a 	subw	r2, r2, #1146	; 0x47a
    609a:	3351      	adds	r3, #81	; 0x51
    609c:	eea5 3b01 	vfma.f64	d3, d5, d1
    60a0:	4313      	orrs	r3, r2
    60a2:	eea5 2b03 	vfma.f64	d2, d5, d3
    60a6:	ee03 1a90 	vmov	s7, r1
    60aa:	eea5 6b02 	vfma.f64	d6, d5, d2
    60ae:	2b00      	cmp	r3, #0
    60b0:	eeb8 3be3 	vcvt.f64.s32	d3, s7
    60b4:	dd36      	ble.n	6124 <__ieee754_log+0x19c>
    60b6:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
    60ba:	ee27 0b00 	vmul.f64	d0, d7, d0
    60be:	ee20 0b07 	vmul.f64	d0, d0, d7
    60c2:	2900      	cmp	r1, #0
    60c4:	d140      	bne.n	6148 <__ieee754_log+0x1c0>
    60c6:	ee36 6b00 	vadd.f64	d6, d6, d0
    60ca:	eea4 0b46 	vfms.f64	d0, d4, d6
    60ce:	ee37 0b40 	vsub.f64	d0, d7, d0
    60d2:	b003      	add	sp, #12
    60d4:	bc70      	pop	{r4, r5, r6}
    60d6:	4770      	bx	lr
    60d8:	ed9f 6b43 	vldr	d6, [pc, #268]	; 61e8 <__ieee754_log+0x260>
    60dc:	ed9f 7b44 	vldr	d7, [pc, #272]	; 61f0 <__ieee754_log+0x268>
    60e0:	ee86 0b07 	vdiv.f64	d0, d6, d7
    60e4:	b003      	add	sp, #12
    60e6:	bc70      	pop	{r4, r5, r6}
    60e8:	4770      	bx	lr
    60ea:	ed9f 5b43 	vldr	d5, [pc, #268]	; 61f8 <__ieee754_log+0x270>
    60ee:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    60f2:	ee27 0b07 	vmul.f64	d0, d7, d7
    60f6:	eea7 6b45 	vfms.f64	d6, d7, d5
    60fa:	ee26 0b00 	vmul.f64	d0, d6, d0
    60fe:	2900      	cmp	r1, #0
    6100:	d0e5      	beq.n	60ce <__ieee754_log+0x146>
    6102:	ed9f 4b27 	vldr	d4, [pc, #156]	; 61a0 <__ieee754_log+0x218>
    6106:	ed9f 5b28 	vldr	d5, [pc, #160]	; 61a8 <__ieee754_log+0x220>
    610a:	ee06 1a90 	vmov	s13, r1
    610e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    6112:	eea6 0b44 	vfms.f64	d0, d6, d4
    6116:	ee30 7b47 	vsub.f64	d7, d0, d7
    611a:	ee96 7b05 	vfnms.f64	d7, d6, d5
    611e:	eeb0 0b47 	vmov.f64	d0, d7
    6122:	e791      	b.n	6048 <__ieee754_log+0xc0>
    6124:	b379      	cbz	r1, 6186 <__ieee754_log+0x1fe>
    6126:	ee37 6b46 	vsub.f64	d6, d7, d6
    612a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 61a0 <__ieee754_log+0x218>
    612e:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 61a8 <__ieee754_log+0x220>
    6132:	ee20 0b43 	vnmul.f64	d0, d0, d3
    6136:	eea4 0b06 	vfma.f64	d0, d4, d6
    613a:	ee30 7b47 	vsub.f64	d7, d0, d7
    613e:	ee93 7b05 	vfnms.f64	d7, d3, d5
    6142:	eeb0 0b47 	vmov.f64	d0, d7
    6146:	e77f      	b.n	6048 <__ieee754_log+0xc0>
    6148:	ed9f 5b15 	vldr	d5, [pc, #84]	; 61a0 <__ieee754_log+0x218>
    614c:	ee36 6b00 	vadd.f64	d6, d6, d0
    6150:	ed9f 2b15 	vldr	d2, [pc, #84]	; 61a8 <__ieee754_log+0x220>
    6154:	ee23 5b05 	vmul.f64	d5, d3, d5
    6158:	eea4 5b06 	vfma.f64	d5, d4, d6
    615c:	ee30 0b45 	vsub.f64	d0, d0, d5
    6160:	ee30 7b47 	vsub.f64	d7, d0, d7
    6164:	ee93 7b02 	vfnms.f64	d7, d3, d2
    6168:	eeb0 0b47 	vmov.f64	d0, d7
    616c:	e76c      	b.n	6048 <__ieee754_log+0xc0>
    616e:	ed9d 7b00 	vldr	d7, [sp]
    6172:	ee37 6b47 	vsub.f64	d6, d7, d7
    6176:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 61f0 <__ieee754_log+0x268>
    617a:	ee86 0b07 	vdiv.f64	d0, d6, d7
    617e:	e763      	b.n	6048 <__ieee754_log+0xc0>
    6180:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 61f0 <__ieee754_log+0x268>
    6184:	e760      	b.n	6048 <__ieee754_log+0xc0>
    6186:	ee37 6b46 	vsub.f64	d6, d7, d6
    618a:	eea4 7b46 	vfms.f64	d7, d4, d6
    618e:	eeb0 0b47 	vmov.f64	d0, d7
    6192:	e759      	b.n	6048 <__ieee754_log+0xc0>
    6194:	f3af 8000 	nop.w
    6198:	00000000 	.word	0x00000000
    619c:	43500000 	.word	0x43500000
    61a0:	35793c76 	.word	0x35793c76
    61a4:	3dea39ef 	.word	0x3dea39ef
    61a8:	fee00000 	.word	0xfee00000
    61ac:	3fe62e42 	.word	0x3fe62e42
    61b0:	df3e5244 	.word	0xdf3e5244
    61b4:	3fc2f112 	.word	0x3fc2f112
    61b8:	96cb03de 	.word	0x96cb03de
    61bc:	3fc74664 	.word	0x3fc74664
    61c0:	94229359 	.word	0x94229359
    61c4:	3fd24924 	.word	0x3fd24924
    61c8:	55555593 	.word	0x55555593
    61cc:	3fe55555 	.word	0x3fe55555
    61d0:	d078c69f 	.word	0xd078c69f
    61d4:	3fc39a09 	.word	0x3fc39a09
    61d8:	9997fa04 	.word	0x9997fa04
    61dc:	3fd99999 	.word	0x3fd99999
    61e0:	1d8e78af 	.word	0x1d8e78af
    61e4:	3fcc71c5 	.word	0x3fcc71c5
    61e8:	00000000 	.word	0x00000000
    61ec:	c3500000 	.word	0xc3500000
	...
    61f8:	55555555 	.word	0x55555555
    61fc:	3fd55555 	.word	0x3fd55555
    6200:	7fefffff 	.word	0x7fefffff

00006204 <__aeabi_atexit>:
    6204:	460b      	mov	r3, r1
    6206:	4601      	mov	r1, r0
    6208:	4618      	mov	r0, r3
    620a:	f000 b801 	b.w	6210 <__cxa_atexit>
    620e:	bf00      	nop

00006210 <__cxa_atexit>:
    6210:	4613      	mov	r3, r2
    6212:	460a      	mov	r2, r1
    6214:	4601      	mov	r1, r0
    6216:	2002      	movs	r0, #2
    6218:	f000 bb52 	b.w	68c0 <__register_exitproc>

0000621c <__errno>:
    621c:	4b01      	ldr	r3, [pc, #4]	; (6224 <__errno+0x8>)
    621e:	6818      	ldr	r0, [r3, #0]
    6220:	4770      	bx	lr
    6222:	bf00      	nop
    6224:	20005250 	.word	0x20005250

00006228 <__libc_init_array>:
    6228:	b570      	push	{r4, r5, r6, lr}
    622a:	4e0f      	ldr	r6, [pc, #60]	; (6268 <__libc_init_array+0x40>)
    622c:	4d0f      	ldr	r5, [pc, #60]	; (626c <__libc_init_array+0x44>)
    622e:	1b76      	subs	r6, r6, r5
    6230:	10b6      	asrs	r6, r6, #2
    6232:	bf18      	it	ne
    6234:	2400      	movne	r4, #0
    6236:	d005      	beq.n	6244 <__libc_init_array+0x1c>
    6238:	3401      	adds	r4, #1
    623a:	f855 3b04 	ldr.w	r3, [r5], #4
    623e:	4798      	blx	r3
    6240:	42a6      	cmp	r6, r4
    6242:	d1f9      	bne.n	6238 <__libc_init_array+0x10>
    6244:	4e0a      	ldr	r6, [pc, #40]	; (6270 <__libc_init_array+0x48>)
    6246:	4d0b      	ldr	r5, [pc, #44]	; (6274 <__libc_init_array+0x4c>)
    6248:	1b76      	subs	r6, r6, r5
    624a:	f000 fcc9 	bl	6be0 <___init_veneer>
    624e:	10b6      	asrs	r6, r6, #2
    6250:	bf18      	it	ne
    6252:	2400      	movne	r4, #0
    6254:	d006      	beq.n	6264 <__libc_init_array+0x3c>
    6256:	3401      	adds	r4, #1
    6258:	f855 3b04 	ldr.w	r3, [r5], #4
    625c:	4798      	blx	r3
    625e:	42a6      	cmp	r6, r4
    6260:	d1f9      	bne.n	6256 <__libc_init_array+0x2e>
    6262:	bd70      	pop	{r4, r5, r6, pc}
    6264:	bd70      	pop	{r4, r5, r6, pc}
    6266:	bf00      	nop
    6268:	60001930 	.word	0x60001930
    626c:	60001930 	.word	0x60001930
    6270:	600019a4 	.word	0x600019a4
    6274:	60001930 	.word	0x60001930

00006278 <malloc>:
    6278:	4b02      	ldr	r3, [pc, #8]	; (6284 <malloc+0xc>)
    627a:	4601      	mov	r1, r0
    627c:	6818      	ldr	r0, [r3, #0]
    627e:	f000 b803 	b.w	6288 <_malloc_r>
    6282:	bf00      	nop
    6284:	20005250 	.word	0x20005250

00006288 <_malloc_r>:
    6288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    628c:	f101 050b 	add.w	r5, r1, #11
    6290:	2d16      	cmp	r5, #22
    6292:	b083      	sub	sp, #12
    6294:	4606      	mov	r6, r0
    6296:	f240 809f 	bls.w	63d8 <_malloc_r+0x150>
    629a:	f035 0507 	bics.w	r5, r5, #7
    629e:	f100 80bf 	bmi.w	6420 <_malloc_r+0x198>
    62a2:	42a9      	cmp	r1, r5
    62a4:	f200 80bc 	bhi.w	6420 <_malloc_r+0x198>
    62a8:	f000 faf4 	bl	6894 <__malloc_lock>
    62ac:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    62b0:	f0c0 829c 	bcc.w	67ec <_malloc_r+0x564>
    62b4:	0a6b      	lsrs	r3, r5, #9
    62b6:	f000 80ba 	beq.w	642e <_malloc_r+0x1a6>
    62ba:	2b04      	cmp	r3, #4
    62bc:	f200 8183 	bhi.w	65c6 <_malloc_r+0x33e>
    62c0:	09a8      	lsrs	r0, r5, #6
    62c2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    62c6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    62ca:	3038      	adds	r0, #56	; 0x38
    62cc:	4fc4      	ldr	r7, [pc, #784]	; (65e0 <_malloc_r+0x358>)
    62ce:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    62d2:	f1a3 0108 	sub.w	r1, r3, #8
    62d6:	685c      	ldr	r4, [r3, #4]
    62d8:	42a1      	cmp	r1, r4
    62da:	d107      	bne.n	62ec <_malloc_r+0x64>
    62dc:	e0ac      	b.n	6438 <_malloc_r+0x1b0>
    62de:	2a00      	cmp	r2, #0
    62e0:	f280 80ac 	bge.w	643c <_malloc_r+0x1b4>
    62e4:	68e4      	ldr	r4, [r4, #12]
    62e6:	42a1      	cmp	r1, r4
    62e8:	f000 80a6 	beq.w	6438 <_malloc_r+0x1b0>
    62ec:	6863      	ldr	r3, [r4, #4]
    62ee:	f023 0303 	bic.w	r3, r3, #3
    62f2:	1b5a      	subs	r2, r3, r5
    62f4:	2a0f      	cmp	r2, #15
    62f6:	ddf2      	ble.n	62de <_malloc_r+0x56>
    62f8:	49b9      	ldr	r1, [pc, #740]	; (65e0 <_malloc_r+0x358>)
    62fa:	693c      	ldr	r4, [r7, #16]
    62fc:	f101 0e08 	add.w	lr, r1, #8
    6300:	4574      	cmp	r4, lr
    6302:	f000 81b3 	beq.w	666c <_malloc_r+0x3e4>
    6306:	6863      	ldr	r3, [r4, #4]
    6308:	f023 0303 	bic.w	r3, r3, #3
    630c:	1b5a      	subs	r2, r3, r5
    630e:	2a0f      	cmp	r2, #15
    6310:	f300 8199 	bgt.w	6646 <_malloc_r+0x3be>
    6314:	2a00      	cmp	r2, #0
    6316:	f8c1 e014 	str.w	lr, [r1, #20]
    631a:	f8c1 e010 	str.w	lr, [r1, #16]
    631e:	f280 809e 	bge.w	645e <_malloc_r+0x1d6>
    6322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6326:	f080 8167 	bcs.w	65f8 <_malloc_r+0x370>
    632a:	08db      	lsrs	r3, r3, #3
    632c:	f103 0c01 	add.w	ip, r3, #1
    6330:	2201      	movs	r2, #1
    6332:	109b      	asrs	r3, r3, #2
    6334:	fa02 f303 	lsl.w	r3, r2, r3
    6338:	684a      	ldr	r2, [r1, #4]
    633a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    633e:	f8c4 8008 	str.w	r8, [r4, #8]
    6342:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    6346:	431a      	orrs	r2, r3
    6348:	f1a9 0308 	sub.w	r3, r9, #8
    634c:	60e3      	str	r3, [r4, #12]
    634e:	604a      	str	r2, [r1, #4]
    6350:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    6354:	f8c8 400c 	str.w	r4, [r8, #12]
    6358:	1083      	asrs	r3, r0, #2
    635a:	2401      	movs	r4, #1
    635c:	409c      	lsls	r4, r3
    635e:	4294      	cmp	r4, r2
    6360:	f200 808a 	bhi.w	6478 <_malloc_r+0x1f0>
    6364:	4214      	tst	r4, r2
    6366:	d106      	bne.n	6376 <_malloc_r+0xee>
    6368:	f020 0003 	bic.w	r0, r0, #3
    636c:	0064      	lsls	r4, r4, #1
    636e:	4214      	tst	r4, r2
    6370:	f100 0004 	add.w	r0, r0, #4
    6374:	d0fa      	beq.n	636c <_malloc_r+0xe4>
    6376:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    637a:	46cc      	mov	ip, r9
    637c:	4680      	mov	r8, r0
    637e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    6382:	458c      	cmp	ip, r1
    6384:	d107      	bne.n	6396 <_malloc_r+0x10e>
    6386:	e173      	b.n	6670 <_malloc_r+0x3e8>
    6388:	2a00      	cmp	r2, #0
    638a:	f280 8181 	bge.w	6690 <_malloc_r+0x408>
    638e:	68c9      	ldr	r1, [r1, #12]
    6390:	458c      	cmp	ip, r1
    6392:	f000 816d 	beq.w	6670 <_malloc_r+0x3e8>
    6396:	684b      	ldr	r3, [r1, #4]
    6398:	f023 0303 	bic.w	r3, r3, #3
    639c:	1b5a      	subs	r2, r3, r5
    639e:	2a0f      	cmp	r2, #15
    63a0:	ddf2      	ble.n	6388 <_malloc_r+0x100>
    63a2:	460c      	mov	r4, r1
    63a4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    63a8:	f854 8f08 	ldr.w	r8, [r4, #8]!
    63ac:	194b      	adds	r3, r1, r5
    63ae:	f045 0501 	orr.w	r5, r5, #1
    63b2:	604d      	str	r5, [r1, #4]
    63b4:	f042 0101 	orr.w	r1, r2, #1
    63b8:	f8c8 c00c 	str.w	ip, [r8, #12]
    63bc:	4630      	mov	r0, r6
    63be:	f8cc 8008 	str.w	r8, [ip, #8]
    63c2:	617b      	str	r3, [r7, #20]
    63c4:	613b      	str	r3, [r7, #16]
    63c6:	f8c3 e00c 	str.w	lr, [r3, #12]
    63ca:	f8c3 e008 	str.w	lr, [r3, #8]
    63ce:	6059      	str	r1, [r3, #4]
    63d0:	509a      	str	r2, [r3, r2]
    63d2:	f000 fa61 	bl	6898 <__malloc_unlock>
    63d6:	e01f      	b.n	6418 <_malloc_r+0x190>
    63d8:	2910      	cmp	r1, #16
    63da:	d821      	bhi.n	6420 <_malloc_r+0x198>
    63dc:	f000 fa5a 	bl	6894 <__malloc_lock>
    63e0:	2510      	movs	r5, #16
    63e2:	2306      	movs	r3, #6
    63e4:	2002      	movs	r0, #2
    63e6:	4f7e      	ldr	r7, [pc, #504]	; (65e0 <_malloc_r+0x358>)
    63e8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    63ec:	f1a3 0208 	sub.w	r2, r3, #8
    63f0:	685c      	ldr	r4, [r3, #4]
    63f2:	4294      	cmp	r4, r2
    63f4:	f000 8145 	beq.w	6682 <_malloc_r+0x3fa>
    63f8:	6863      	ldr	r3, [r4, #4]
    63fa:	68e1      	ldr	r1, [r4, #12]
    63fc:	68a5      	ldr	r5, [r4, #8]
    63fe:	f023 0303 	bic.w	r3, r3, #3
    6402:	4423      	add	r3, r4
    6404:	4630      	mov	r0, r6
    6406:	685a      	ldr	r2, [r3, #4]
    6408:	60e9      	str	r1, [r5, #12]
    640a:	f042 0201 	orr.w	r2, r2, #1
    640e:	608d      	str	r5, [r1, #8]
    6410:	605a      	str	r2, [r3, #4]
    6412:	f000 fa41 	bl	6898 <__malloc_unlock>
    6416:	3408      	adds	r4, #8
    6418:	4620      	mov	r0, r4
    641a:	b003      	add	sp, #12
    641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6420:	2400      	movs	r4, #0
    6422:	230c      	movs	r3, #12
    6424:	4620      	mov	r0, r4
    6426:	6033      	str	r3, [r6, #0]
    6428:	b003      	add	sp, #12
    642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    642e:	2380      	movs	r3, #128	; 0x80
    6430:	f04f 0e40 	mov.w	lr, #64	; 0x40
    6434:	203f      	movs	r0, #63	; 0x3f
    6436:	e749      	b.n	62cc <_malloc_r+0x44>
    6438:	4670      	mov	r0, lr
    643a:	e75d      	b.n	62f8 <_malloc_r+0x70>
    643c:	4423      	add	r3, r4
    643e:	68e1      	ldr	r1, [r4, #12]
    6440:	685a      	ldr	r2, [r3, #4]
    6442:	68a5      	ldr	r5, [r4, #8]
    6444:	f042 0201 	orr.w	r2, r2, #1
    6448:	60e9      	str	r1, [r5, #12]
    644a:	4630      	mov	r0, r6
    644c:	608d      	str	r5, [r1, #8]
    644e:	605a      	str	r2, [r3, #4]
    6450:	f000 fa22 	bl	6898 <__malloc_unlock>
    6454:	3408      	adds	r4, #8
    6456:	4620      	mov	r0, r4
    6458:	b003      	add	sp, #12
    645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    645e:	4423      	add	r3, r4
    6460:	4630      	mov	r0, r6
    6462:	685a      	ldr	r2, [r3, #4]
    6464:	f042 0201 	orr.w	r2, r2, #1
    6468:	605a      	str	r2, [r3, #4]
    646a:	f000 fa15 	bl	6898 <__malloc_unlock>
    646e:	3408      	adds	r4, #8
    6470:	4620      	mov	r0, r4
    6472:	b003      	add	sp, #12
    6474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6478:	68bc      	ldr	r4, [r7, #8]
    647a:	6863      	ldr	r3, [r4, #4]
    647c:	f023 0803 	bic.w	r8, r3, #3
    6480:	45a8      	cmp	r8, r5
    6482:	d304      	bcc.n	648e <_malloc_r+0x206>
    6484:	ebc5 0308 	rsb	r3, r5, r8
    6488:	2b0f      	cmp	r3, #15
    648a:	f300 808c 	bgt.w	65a6 <_malloc_r+0x31e>
    648e:	4b55      	ldr	r3, [pc, #340]	; (65e4 <_malloc_r+0x35c>)
    6490:	f8df 9160 	ldr.w	r9, [pc, #352]	; 65f4 <_malloc_r+0x36c>
    6494:	681a      	ldr	r2, [r3, #0]
    6496:	f8d9 3000 	ldr.w	r3, [r9]
    649a:	3301      	adds	r3, #1
    649c:	442a      	add	r2, r5
    649e:	eb04 0a08 	add.w	sl, r4, r8
    64a2:	f000 8160 	beq.w	6766 <_malloc_r+0x4de>
    64a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    64aa:	320f      	adds	r2, #15
    64ac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    64b0:	f022 020f 	bic.w	r2, r2, #15
    64b4:	4611      	mov	r1, r2
    64b6:	4630      	mov	r0, r6
    64b8:	9201      	str	r2, [sp, #4]
    64ba:	f000 f9ef 	bl	689c <_sbrk_r>
    64be:	f1b0 3fff 	cmp.w	r0, #4294967295
    64c2:	4683      	mov	fp, r0
    64c4:	9a01      	ldr	r2, [sp, #4]
    64c6:	f000 8158 	beq.w	677a <_malloc_r+0x4f2>
    64ca:	4582      	cmp	sl, r0
    64cc:	f200 80fc 	bhi.w	66c8 <_malloc_r+0x440>
    64d0:	4b45      	ldr	r3, [pc, #276]	; (65e8 <_malloc_r+0x360>)
    64d2:	6819      	ldr	r1, [r3, #0]
    64d4:	45da      	cmp	sl, fp
    64d6:	4411      	add	r1, r2
    64d8:	6019      	str	r1, [r3, #0]
    64da:	f000 8153 	beq.w	6784 <_malloc_r+0x4fc>
    64de:	f8d9 0000 	ldr.w	r0, [r9]
    64e2:	f8df e110 	ldr.w	lr, [pc, #272]	; 65f4 <_malloc_r+0x36c>
    64e6:	3001      	adds	r0, #1
    64e8:	bf1b      	ittet	ne
    64ea:	ebca 0a0b 	rsbne	sl, sl, fp
    64ee:	4451      	addne	r1, sl
    64f0:	f8ce b000 	streq.w	fp, [lr]
    64f4:	6019      	strne	r1, [r3, #0]
    64f6:	f01b 0107 	ands.w	r1, fp, #7
    64fa:	f000 8117 	beq.w	672c <_malloc_r+0x4a4>
    64fe:	f1c1 0008 	rsb	r0, r1, #8
    6502:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    6506:	4483      	add	fp, r0
    6508:	3108      	adds	r1, #8
    650a:	445a      	add	r2, fp
    650c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    6510:	ebc2 0901 	rsb	r9, r2, r1
    6514:	4649      	mov	r1, r9
    6516:	4630      	mov	r0, r6
    6518:	9301      	str	r3, [sp, #4]
    651a:	f000 f9bf 	bl	689c <_sbrk_r>
    651e:	1c43      	adds	r3, r0, #1
    6520:	9b01      	ldr	r3, [sp, #4]
    6522:	f000 813f 	beq.w	67a4 <_malloc_r+0x51c>
    6526:	ebcb 0200 	rsb	r2, fp, r0
    652a:	444a      	add	r2, r9
    652c:	f042 0201 	orr.w	r2, r2, #1
    6530:	6819      	ldr	r1, [r3, #0]
    6532:	f8c7 b008 	str.w	fp, [r7, #8]
    6536:	4449      	add	r1, r9
    6538:	42bc      	cmp	r4, r7
    653a:	f8cb 2004 	str.w	r2, [fp, #4]
    653e:	6019      	str	r1, [r3, #0]
    6540:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 65e8 <_malloc_r+0x360>
    6544:	d016      	beq.n	6574 <_malloc_r+0x2ec>
    6546:	f1b8 0f0f 	cmp.w	r8, #15
    654a:	f240 80fd 	bls.w	6748 <_malloc_r+0x4c0>
    654e:	6862      	ldr	r2, [r4, #4]
    6550:	f1a8 030c 	sub.w	r3, r8, #12
    6554:	f023 0307 	bic.w	r3, r3, #7
    6558:	18e0      	adds	r0, r4, r3
    655a:	f002 0201 	and.w	r2, r2, #1
    655e:	f04f 0e05 	mov.w	lr, #5
    6562:	431a      	orrs	r2, r3
    6564:	2b0f      	cmp	r3, #15
    6566:	6062      	str	r2, [r4, #4]
    6568:	f8c0 e004 	str.w	lr, [r0, #4]
    656c:	f8c0 e008 	str.w	lr, [r0, #8]
    6570:	f200 811c 	bhi.w	67ac <_malloc_r+0x524>
    6574:	4b1d      	ldr	r3, [pc, #116]	; (65ec <_malloc_r+0x364>)
    6576:	68bc      	ldr	r4, [r7, #8]
    6578:	681a      	ldr	r2, [r3, #0]
    657a:	4291      	cmp	r1, r2
    657c:	bf88      	it	hi
    657e:	6019      	strhi	r1, [r3, #0]
    6580:	4b1b      	ldr	r3, [pc, #108]	; (65f0 <_malloc_r+0x368>)
    6582:	681a      	ldr	r2, [r3, #0]
    6584:	4291      	cmp	r1, r2
    6586:	6862      	ldr	r2, [r4, #4]
    6588:	bf88      	it	hi
    658a:	6019      	strhi	r1, [r3, #0]
    658c:	f022 0203 	bic.w	r2, r2, #3
    6590:	4295      	cmp	r5, r2
    6592:	eba2 0305 	sub.w	r3, r2, r5
    6596:	d801      	bhi.n	659c <_malloc_r+0x314>
    6598:	2b0f      	cmp	r3, #15
    659a:	dc04      	bgt.n	65a6 <_malloc_r+0x31e>
    659c:	4630      	mov	r0, r6
    659e:	f000 f97b 	bl	6898 <__malloc_unlock>
    65a2:	2400      	movs	r4, #0
    65a4:	e738      	b.n	6418 <_malloc_r+0x190>
    65a6:	1962      	adds	r2, r4, r5
    65a8:	f043 0301 	orr.w	r3, r3, #1
    65ac:	f045 0501 	orr.w	r5, r5, #1
    65b0:	6065      	str	r5, [r4, #4]
    65b2:	4630      	mov	r0, r6
    65b4:	60ba      	str	r2, [r7, #8]
    65b6:	6053      	str	r3, [r2, #4]
    65b8:	f000 f96e 	bl	6898 <__malloc_unlock>
    65bc:	3408      	adds	r4, #8
    65be:	4620      	mov	r0, r4
    65c0:	b003      	add	sp, #12
    65c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65c6:	2b14      	cmp	r3, #20
    65c8:	d971      	bls.n	66ae <_malloc_r+0x426>
    65ca:	2b54      	cmp	r3, #84	; 0x54
    65cc:	f200 80a4 	bhi.w	6718 <_malloc_r+0x490>
    65d0:	0b28      	lsrs	r0, r5, #12
    65d2:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    65d6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    65da:	306e      	adds	r0, #110	; 0x6e
    65dc:	e676      	b.n	62cc <_malloc_r+0x44>
    65de:	bf00      	nop
    65e0:	20005254 	.word	0x20005254
    65e4:	20007590 	.word	0x20007590
    65e8:	20007594 	.word	0x20007594
    65ec:	2000758c 	.word	0x2000758c
    65f0:	20007588 	.word	0x20007588
    65f4:	20005660 	.word	0x20005660
    65f8:	0a5a      	lsrs	r2, r3, #9
    65fa:	2a04      	cmp	r2, #4
    65fc:	d95e      	bls.n	66bc <_malloc_r+0x434>
    65fe:	2a14      	cmp	r2, #20
    6600:	f200 80b3 	bhi.w	676a <_malloc_r+0x4e2>
    6604:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    6608:	0049      	lsls	r1, r1, #1
    660a:	325b      	adds	r2, #91	; 0x5b
    660c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    6610:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    6614:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 67f4 <_malloc_r+0x56c>
    6618:	f1ac 0c08 	sub.w	ip, ip, #8
    661c:	458c      	cmp	ip, r1
    661e:	f000 8088 	beq.w	6732 <_malloc_r+0x4aa>
    6622:	684a      	ldr	r2, [r1, #4]
    6624:	f022 0203 	bic.w	r2, r2, #3
    6628:	4293      	cmp	r3, r2
    662a:	d202      	bcs.n	6632 <_malloc_r+0x3aa>
    662c:	6889      	ldr	r1, [r1, #8]
    662e:	458c      	cmp	ip, r1
    6630:	d1f7      	bne.n	6622 <_malloc_r+0x39a>
    6632:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    6636:	687a      	ldr	r2, [r7, #4]
    6638:	f8c4 c00c 	str.w	ip, [r4, #12]
    663c:	60a1      	str	r1, [r4, #8]
    663e:	f8cc 4008 	str.w	r4, [ip, #8]
    6642:	60cc      	str	r4, [r1, #12]
    6644:	e688      	b.n	6358 <_malloc_r+0xd0>
    6646:	1963      	adds	r3, r4, r5
    6648:	f042 0701 	orr.w	r7, r2, #1
    664c:	f045 0501 	orr.w	r5, r5, #1
    6650:	6065      	str	r5, [r4, #4]
    6652:	4630      	mov	r0, r6
    6654:	614b      	str	r3, [r1, #20]
    6656:	610b      	str	r3, [r1, #16]
    6658:	f8c3 e00c 	str.w	lr, [r3, #12]
    665c:	f8c3 e008 	str.w	lr, [r3, #8]
    6660:	605f      	str	r7, [r3, #4]
    6662:	509a      	str	r2, [r3, r2]
    6664:	3408      	adds	r4, #8
    6666:	f000 f917 	bl	6898 <__malloc_unlock>
    666a:	e6d5      	b.n	6418 <_malloc_r+0x190>
    666c:	684a      	ldr	r2, [r1, #4]
    666e:	e673      	b.n	6358 <_malloc_r+0xd0>
    6670:	f108 0801 	add.w	r8, r8, #1
    6674:	f018 0f03 	tst.w	r8, #3
    6678:	f10c 0c08 	add.w	ip, ip, #8
    667c:	f47f ae7f 	bne.w	637e <_malloc_r+0xf6>
    6680:	e030      	b.n	66e4 <_malloc_r+0x45c>
    6682:	68dc      	ldr	r4, [r3, #12]
    6684:	42a3      	cmp	r3, r4
    6686:	bf08      	it	eq
    6688:	3002      	addeq	r0, #2
    668a:	f43f ae35 	beq.w	62f8 <_malloc_r+0x70>
    668e:	e6b3      	b.n	63f8 <_malloc_r+0x170>
    6690:	440b      	add	r3, r1
    6692:	460c      	mov	r4, r1
    6694:	685a      	ldr	r2, [r3, #4]
    6696:	68c9      	ldr	r1, [r1, #12]
    6698:	f854 5f08 	ldr.w	r5, [r4, #8]!
    669c:	f042 0201 	orr.w	r2, r2, #1
    66a0:	605a      	str	r2, [r3, #4]
    66a2:	4630      	mov	r0, r6
    66a4:	60e9      	str	r1, [r5, #12]
    66a6:	608d      	str	r5, [r1, #8]
    66a8:	f000 f8f6 	bl	6898 <__malloc_unlock>
    66ac:	e6b4      	b.n	6418 <_malloc_r+0x190>
    66ae:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    66b2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    66b6:	ea4f 034e 	mov.w	r3, lr, lsl #1
    66ba:	e607      	b.n	62cc <_malloc_r+0x44>
    66bc:	099a      	lsrs	r2, r3, #6
    66be:	f102 0139 	add.w	r1, r2, #57	; 0x39
    66c2:	0049      	lsls	r1, r1, #1
    66c4:	3238      	adds	r2, #56	; 0x38
    66c6:	e7a1      	b.n	660c <_malloc_r+0x384>
    66c8:	42bc      	cmp	r4, r7
    66ca:	4b4a      	ldr	r3, [pc, #296]	; (67f4 <_malloc_r+0x56c>)
    66cc:	f43f af00 	beq.w	64d0 <_malloc_r+0x248>
    66d0:	689c      	ldr	r4, [r3, #8]
    66d2:	6862      	ldr	r2, [r4, #4]
    66d4:	f022 0203 	bic.w	r2, r2, #3
    66d8:	e75a      	b.n	6590 <_malloc_r+0x308>
    66da:	f859 3908 	ldr.w	r3, [r9], #-8
    66de:	4599      	cmp	r9, r3
    66e0:	f040 8082 	bne.w	67e8 <_malloc_r+0x560>
    66e4:	f010 0f03 	tst.w	r0, #3
    66e8:	f100 30ff 	add.w	r0, r0, #4294967295
    66ec:	d1f5      	bne.n	66da <_malloc_r+0x452>
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	ea23 0304 	bic.w	r3, r3, r4
    66f4:	607b      	str	r3, [r7, #4]
    66f6:	0064      	lsls	r4, r4, #1
    66f8:	429c      	cmp	r4, r3
    66fa:	f63f aebd 	bhi.w	6478 <_malloc_r+0x1f0>
    66fe:	2c00      	cmp	r4, #0
    6700:	f43f aeba 	beq.w	6478 <_malloc_r+0x1f0>
    6704:	421c      	tst	r4, r3
    6706:	4640      	mov	r0, r8
    6708:	f47f ae35 	bne.w	6376 <_malloc_r+0xee>
    670c:	0064      	lsls	r4, r4, #1
    670e:	421c      	tst	r4, r3
    6710:	f100 0004 	add.w	r0, r0, #4
    6714:	d0fa      	beq.n	670c <_malloc_r+0x484>
    6716:	e62e      	b.n	6376 <_malloc_r+0xee>
    6718:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    671c:	d818      	bhi.n	6750 <_malloc_r+0x4c8>
    671e:	0be8      	lsrs	r0, r5, #15
    6720:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    6724:	ea4f 034e 	mov.w	r3, lr, lsl #1
    6728:	3077      	adds	r0, #119	; 0x77
    672a:	e5cf      	b.n	62cc <_malloc_r+0x44>
    672c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    6730:	e6eb      	b.n	650a <_malloc_r+0x282>
    6732:	2101      	movs	r1, #1
    6734:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6738:	1092      	asrs	r2, r2, #2
    673a:	fa01 f202 	lsl.w	r2, r1, r2
    673e:	431a      	orrs	r2, r3
    6740:	f8c8 2004 	str.w	r2, [r8, #4]
    6744:	4661      	mov	r1, ip
    6746:	e777      	b.n	6638 <_malloc_r+0x3b0>
    6748:	2301      	movs	r3, #1
    674a:	f8cb 3004 	str.w	r3, [fp, #4]
    674e:	e725      	b.n	659c <_malloc_r+0x314>
    6750:	f240 5254 	movw	r2, #1364	; 0x554
    6754:	4293      	cmp	r3, r2
    6756:	d820      	bhi.n	679a <_malloc_r+0x512>
    6758:	0ca8      	lsrs	r0, r5, #18
    675a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    675e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    6762:	307c      	adds	r0, #124	; 0x7c
    6764:	e5b2      	b.n	62cc <_malloc_r+0x44>
    6766:	3210      	adds	r2, #16
    6768:	e6a4      	b.n	64b4 <_malloc_r+0x22c>
    676a:	2a54      	cmp	r2, #84	; 0x54
    676c:	d826      	bhi.n	67bc <_malloc_r+0x534>
    676e:	0b1a      	lsrs	r2, r3, #12
    6770:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    6774:	0049      	lsls	r1, r1, #1
    6776:	326e      	adds	r2, #110	; 0x6e
    6778:	e748      	b.n	660c <_malloc_r+0x384>
    677a:	68bc      	ldr	r4, [r7, #8]
    677c:	6862      	ldr	r2, [r4, #4]
    677e:	f022 0203 	bic.w	r2, r2, #3
    6782:	e705      	b.n	6590 <_malloc_r+0x308>
    6784:	f3ca 000b 	ubfx	r0, sl, #0, #12
    6788:	2800      	cmp	r0, #0
    678a:	f47f aea8 	bne.w	64de <_malloc_r+0x256>
    678e:	4442      	add	r2, r8
    6790:	68bb      	ldr	r3, [r7, #8]
    6792:	f042 0201 	orr.w	r2, r2, #1
    6796:	605a      	str	r2, [r3, #4]
    6798:	e6ec      	b.n	6574 <_malloc_r+0x2ec>
    679a:	23fe      	movs	r3, #254	; 0xfe
    679c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    67a0:	207e      	movs	r0, #126	; 0x7e
    67a2:	e593      	b.n	62cc <_malloc_r+0x44>
    67a4:	2201      	movs	r2, #1
    67a6:	f04f 0900 	mov.w	r9, #0
    67aa:	e6c1      	b.n	6530 <_malloc_r+0x2a8>
    67ac:	f104 0108 	add.w	r1, r4, #8
    67b0:	4630      	mov	r0, r6
    67b2:	f000 f925 	bl	6a00 <_free_r>
    67b6:	f8d9 1000 	ldr.w	r1, [r9]
    67ba:	e6db      	b.n	6574 <_malloc_r+0x2ec>
    67bc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    67c0:	d805      	bhi.n	67ce <_malloc_r+0x546>
    67c2:	0bda      	lsrs	r2, r3, #15
    67c4:	f102 0178 	add.w	r1, r2, #120	; 0x78
    67c8:	0049      	lsls	r1, r1, #1
    67ca:	3277      	adds	r2, #119	; 0x77
    67cc:	e71e      	b.n	660c <_malloc_r+0x384>
    67ce:	f240 5154 	movw	r1, #1364	; 0x554
    67d2:	428a      	cmp	r2, r1
    67d4:	d805      	bhi.n	67e2 <_malloc_r+0x55a>
    67d6:	0c9a      	lsrs	r2, r3, #18
    67d8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    67dc:	0049      	lsls	r1, r1, #1
    67de:	327c      	adds	r2, #124	; 0x7c
    67e0:	e714      	b.n	660c <_malloc_r+0x384>
    67e2:	21fe      	movs	r1, #254	; 0xfe
    67e4:	227e      	movs	r2, #126	; 0x7e
    67e6:	e711      	b.n	660c <_malloc_r+0x384>
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	e784      	b.n	66f6 <_malloc_r+0x46e>
    67ec:	08e8      	lsrs	r0, r5, #3
    67ee:	1c43      	adds	r3, r0, #1
    67f0:	005b      	lsls	r3, r3, #1
    67f2:	e5f8      	b.n	63e6 <_malloc_r+0x15e>
    67f4:	20005254 	.word	0x20005254

000067f8 <memset>:
    67f8:	b470      	push	{r4, r5, r6}
    67fa:	0784      	lsls	r4, r0, #30
    67fc:	d046      	beq.n	688c <memset+0x94>
    67fe:	1e54      	subs	r4, r2, #1
    6800:	2a00      	cmp	r2, #0
    6802:	d041      	beq.n	6888 <memset+0x90>
    6804:	b2cd      	uxtb	r5, r1
    6806:	4603      	mov	r3, r0
    6808:	e002      	b.n	6810 <memset+0x18>
    680a:	1e62      	subs	r2, r4, #1
    680c:	b3e4      	cbz	r4, 6888 <memset+0x90>
    680e:	4614      	mov	r4, r2
    6810:	f803 5b01 	strb.w	r5, [r3], #1
    6814:	079a      	lsls	r2, r3, #30
    6816:	d1f8      	bne.n	680a <memset+0x12>
    6818:	2c03      	cmp	r4, #3
    681a:	d92e      	bls.n	687a <memset+0x82>
    681c:	b2cd      	uxtb	r5, r1
    681e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    6822:	2c0f      	cmp	r4, #15
    6824:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    6828:	d919      	bls.n	685e <memset+0x66>
    682a:	f103 0210 	add.w	r2, r3, #16
    682e:	4626      	mov	r6, r4
    6830:	3e10      	subs	r6, #16
    6832:	2e0f      	cmp	r6, #15
    6834:	f842 5c10 	str.w	r5, [r2, #-16]
    6838:	f842 5c0c 	str.w	r5, [r2, #-12]
    683c:	f842 5c08 	str.w	r5, [r2, #-8]
    6840:	f842 5c04 	str.w	r5, [r2, #-4]
    6844:	f102 0210 	add.w	r2, r2, #16
    6848:	d8f2      	bhi.n	6830 <memset+0x38>
    684a:	f1a4 0210 	sub.w	r2, r4, #16
    684e:	f022 020f 	bic.w	r2, r2, #15
    6852:	f004 040f 	and.w	r4, r4, #15
    6856:	3210      	adds	r2, #16
    6858:	2c03      	cmp	r4, #3
    685a:	4413      	add	r3, r2
    685c:	d90d      	bls.n	687a <memset+0x82>
    685e:	461e      	mov	r6, r3
    6860:	4622      	mov	r2, r4
    6862:	3a04      	subs	r2, #4
    6864:	2a03      	cmp	r2, #3
    6866:	f846 5b04 	str.w	r5, [r6], #4
    686a:	d8fa      	bhi.n	6862 <memset+0x6a>
    686c:	1f22      	subs	r2, r4, #4
    686e:	f022 0203 	bic.w	r2, r2, #3
    6872:	3204      	adds	r2, #4
    6874:	4413      	add	r3, r2
    6876:	f004 0403 	and.w	r4, r4, #3
    687a:	b12c      	cbz	r4, 6888 <memset+0x90>
    687c:	b2c9      	uxtb	r1, r1
    687e:	441c      	add	r4, r3
    6880:	f803 1b01 	strb.w	r1, [r3], #1
    6884:	42a3      	cmp	r3, r4
    6886:	d1fb      	bne.n	6880 <memset+0x88>
    6888:	bc70      	pop	{r4, r5, r6}
    688a:	4770      	bx	lr
    688c:	4614      	mov	r4, r2
    688e:	4603      	mov	r3, r0
    6890:	e7c2      	b.n	6818 <memset+0x20>
    6892:	bf00      	nop

00006894 <__malloc_lock>:
    6894:	4770      	bx	lr
    6896:	bf00      	nop

00006898 <__malloc_unlock>:
    6898:	4770      	bx	lr
    689a:	bf00      	nop

0000689c <_sbrk_r>:
    689c:	b538      	push	{r3, r4, r5, lr}
    689e:	4c07      	ldr	r4, [pc, #28]	; (68bc <_sbrk_r+0x20>)
    68a0:	2300      	movs	r3, #0
    68a2:	4605      	mov	r5, r0
    68a4:	4608      	mov	r0, r1
    68a6:	6023      	str	r3, [r4, #0]
    68a8:	f7fd fad8 	bl	3e5c <_sbrk>
    68ac:	1c43      	adds	r3, r0, #1
    68ae:	d000      	beq.n	68b2 <_sbrk_r+0x16>
    68b0:	bd38      	pop	{r3, r4, r5, pc}
    68b2:	6823      	ldr	r3, [r4, #0]
    68b4:	2b00      	cmp	r3, #0
    68b6:	d0fb      	beq.n	68b0 <_sbrk_r+0x14>
    68b8:	602b      	str	r3, [r5, #0]
    68ba:	bd38      	pop	{r3, r4, r5, pc}
    68bc:	2000928c 	.word	0x2000928c

000068c0 <__register_exitproc>:
    68c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68c4:	4c25      	ldr	r4, [pc, #148]	; (695c <__register_exitproc+0x9c>)
    68c6:	6825      	ldr	r5, [r4, #0]
    68c8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    68cc:	4606      	mov	r6, r0
    68ce:	4688      	mov	r8, r1
    68d0:	4692      	mov	sl, r2
    68d2:	4699      	mov	r9, r3
    68d4:	b3c4      	cbz	r4, 6948 <__register_exitproc+0x88>
    68d6:	6860      	ldr	r0, [r4, #4]
    68d8:	281f      	cmp	r0, #31
    68da:	dc17      	bgt.n	690c <__register_exitproc+0x4c>
    68dc:	1c43      	adds	r3, r0, #1
    68de:	b176      	cbz	r6, 68fe <__register_exitproc+0x3e>
    68e0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    68e4:	2201      	movs	r2, #1
    68e6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    68ea:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    68ee:	4082      	lsls	r2, r0
    68f0:	4311      	orrs	r1, r2
    68f2:	2e02      	cmp	r6, #2
    68f4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    68f8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    68fc:	d01e      	beq.n	693c <__register_exitproc+0x7c>
    68fe:	3002      	adds	r0, #2
    6900:	6063      	str	r3, [r4, #4]
    6902:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    6906:	2000      	movs	r0, #0
    6908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    690c:	4b14      	ldr	r3, [pc, #80]	; (6960 <__register_exitproc+0xa0>)
    690e:	b303      	cbz	r3, 6952 <__register_exitproc+0x92>
    6910:	f44f 70c8 	mov.w	r0, #400	; 0x190
    6914:	f7ff fcb0 	bl	6278 <malloc>
    6918:	4604      	mov	r4, r0
    691a:	b1d0      	cbz	r0, 6952 <__register_exitproc+0x92>
    691c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    6920:	2700      	movs	r7, #0
    6922:	e880 0088 	stmia.w	r0, {r3, r7}
    6926:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    692a:	4638      	mov	r0, r7
    692c:	2301      	movs	r3, #1
    692e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    6932:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    6936:	2e00      	cmp	r6, #0
    6938:	d0e1      	beq.n	68fe <__register_exitproc+0x3e>
    693a:	e7d1      	b.n	68e0 <__register_exitproc+0x20>
    693c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    6940:	430a      	orrs	r2, r1
    6942:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    6946:	e7da      	b.n	68fe <__register_exitproc+0x3e>
    6948:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    694c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    6950:	e7c1      	b.n	68d6 <__register_exitproc+0x16>
    6952:	f04f 30ff 	mov.w	r0, #4294967295
    6956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    695a:	bf00      	nop
    695c:	20004d08 	.word	0x20004d08
    6960:	00006279 	.word	0x00006279

00006964 <_malloc_trim_r>:
    6964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6966:	4f23      	ldr	r7, [pc, #140]	; (69f4 <_malloc_trim_r+0x90>)
    6968:	460c      	mov	r4, r1
    696a:	4606      	mov	r6, r0
    696c:	f7ff ff92 	bl	6894 <__malloc_lock>
    6970:	68bb      	ldr	r3, [r7, #8]
    6972:	685d      	ldr	r5, [r3, #4]
    6974:	f025 0503 	bic.w	r5, r5, #3
    6978:	1b29      	subs	r1, r5, r4
    697a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    697e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    6982:	f021 010f 	bic.w	r1, r1, #15
    6986:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    698a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    698e:	db07      	blt.n	69a0 <_malloc_trim_r+0x3c>
    6990:	2100      	movs	r1, #0
    6992:	4630      	mov	r0, r6
    6994:	f7ff ff82 	bl	689c <_sbrk_r>
    6998:	68bb      	ldr	r3, [r7, #8]
    699a:	442b      	add	r3, r5
    699c:	4298      	cmp	r0, r3
    699e:	d004      	beq.n	69aa <_malloc_trim_r+0x46>
    69a0:	4630      	mov	r0, r6
    69a2:	f7ff ff79 	bl	6898 <__malloc_unlock>
    69a6:	2000      	movs	r0, #0
    69a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69aa:	4261      	negs	r1, r4
    69ac:	4630      	mov	r0, r6
    69ae:	f7ff ff75 	bl	689c <_sbrk_r>
    69b2:	3001      	adds	r0, #1
    69b4:	d00d      	beq.n	69d2 <_malloc_trim_r+0x6e>
    69b6:	4b10      	ldr	r3, [pc, #64]	; (69f8 <_malloc_trim_r+0x94>)
    69b8:	68ba      	ldr	r2, [r7, #8]
    69ba:	6819      	ldr	r1, [r3, #0]
    69bc:	1b2d      	subs	r5, r5, r4
    69be:	f045 0501 	orr.w	r5, r5, #1
    69c2:	4630      	mov	r0, r6
    69c4:	1b09      	subs	r1, r1, r4
    69c6:	6055      	str	r5, [r2, #4]
    69c8:	6019      	str	r1, [r3, #0]
    69ca:	f7ff ff65 	bl	6898 <__malloc_unlock>
    69ce:	2001      	movs	r0, #1
    69d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69d2:	2100      	movs	r1, #0
    69d4:	4630      	mov	r0, r6
    69d6:	f7ff ff61 	bl	689c <_sbrk_r>
    69da:	68ba      	ldr	r2, [r7, #8]
    69dc:	1a83      	subs	r3, r0, r2
    69de:	2b0f      	cmp	r3, #15
    69e0:	ddde      	ble.n	69a0 <_malloc_trim_r+0x3c>
    69e2:	4c06      	ldr	r4, [pc, #24]	; (69fc <_malloc_trim_r+0x98>)
    69e4:	4904      	ldr	r1, [pc, #16]	; (69f8 <_malloc_trim_r+0x94>)
    69e6:	6824      	ldr	r4, [r4, #0]
    69e8:	f043 0301 	orr.w	r3, r3, #1
    69ec:	1b00      	subs	r0, r0, r4
    69ee:	6053      	str	r3, [r2, #4]
    69f0:	6008      	str	r0, [r1, #0]
    69f2:	e7d5      	b.n	69a0 <_malloc_trim_r+0x3c>
    69f4:	20005254 	.word	0x20005254
    69f8:	20007594 	.word	0x20007594
    69fc:	20005660 	.word	0x20005660

00006a00 <_free_r>:
    6a00:	2900      	cmp	r1, #0
    6a02:	d045      	beq.n	6a90 <_free_r+0x90>
    6a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a08:	460d      	mov	r5, r1
    6a0a:	4680      	mov	r8, r0
    6a0c:	f7ff ff42 	bl	6894 <__malloc_lock>
    6a10:	f855 7c04 	ldr.w	r7, [r5, #-4]
    6a14:	496a      	ldr	r1, [pc, #424]	; (6bc0 <_free_r+0x1c0>)
    6a16:	f027 0301 	bic.w	r3, r7, #1
    6a1a:	f1a5 0408 	sub.w	r4, r5, #8
    6a1e:	18e2      	adds	r2, r4, r3
    6a20:	688e      	ldr	r6, [r1, #8]
    6a22:	6850      	ldr	r0, [r2, #4]
    6a24:	42b2      	cmp	r2, r6
    6a26:	f020 0003 	bic.w	r0, r0, #3
    6a2a:	d062      	beq.n	6af2 <_free_r+0xf2>
    6a2c:	07fe      	lsls	r6, r7, #31
    6a2e:	6050      	str	r0, [r2, #4]
    6a30:	d40b      	bmi.n	6a4a <_free_r+0x4a>
    6a32:	f855 7c08 	ldr.w	r7, [r5, #-8]
    6a36:	1be4      	subs	r4, r4, r7
    6a38:	f101 0e08 	add.w	lr, r1, #8
    6a3c:	68a5      	ldr	r5, [r4, #8]
    6a3e:	4575      	cmp	r5, lr
    6a40:	443b      	add	r3, r7
    6a42:	d06f      	beq.n	6b24 <_free_r+0x124>
    6a44:	68e7      	ldr	r7, [r4, #12]
    6a46:	60ef      	str	r7, [r5, #12]
    6a48:	60bd      	str	r5, [r7, #8]
    6a4a:	1815      	adds	r5, r2, r0
    6a4c:	686d      	ldr	r5, [r5, #4]
    6a4e:	07ed      	lsls	r5, r5, #31
    6a50:	d542      	bpl.n	6ad8 <_free_r+0xd8>
    6a52:	f043 0201 	orr.w	r2, r3, #1
    6a56:	6062      	str	r2, [r4, #4]
    6a58:	50e3      	str	r3, [r4, r3]
    6a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6a5e:	d218      	bcs.n	6a92 <_free_r+0x92>
    6a60:	08db      	lsrs	r3, r3, #3
    6a62:	1c5a      	adds	r2, r3, #1
    6a64:	684d      	ldr	r5, [r1, #4]
    6a66:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    6a6a:	60a7      	str	r7, [r4, #8]
    6a6c:	2001      	movs	r0, #1
    6a6e:	109b      	asrs	r3, r3, #2
    6a70:	fa00 f303 	lsl.w	r3, r0, r3
    6a74:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    6a78:	431d      	orrs	r5, r3
    6a7a:	3808      	subs	r0, #8
    6a7c:	60e0      	str	r0, [r4, #12]
    6a7e:	604d      	str	r5, [r1, #4]
    6a80:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    6a84:	60fc      	str	r4, [r7, #12]
    6a86:	4640      	mov	r0, r8
    6a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a8c:	f7ff bf04 	b.w	6898 <__malloc_unlock>
    6a90:	4770      	bx	lr
    6a92:	0a5a      	lsrs	r2, r3, #9
    6a94:	2a04      	cmp	r2, #4
    6a96:	d853      	bhi.n	6b40 <_free_r+0x140>
    6a98:	099a      	lsrs	r2, r3, #6
    6a9a:	f102 0739 	add.w	r7, r2, #57	; 0x39
    6a9e:	007f      	lsls	r7, r7, #1
    6aa0:	f102 0538 	add.w	r5, r2, #56	; 0x38
    6aa4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    6aa8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    6aac:	4944      	ldr	r1, [pc, #272]	; (6bc0 <_free_r+0x1c0>)
    6aae:	3808      	subs	r0, #8
    6ab0:	4290      	cmp	r0, r2
    6ab2:	d04d      	beq.n	6b50 <_free_r+0x150>
    6ab4:	6851      	ldr	r1, [r2, #4]
    6ab6:	f021 0103 	bic.w	r1, r1, #3
    6aba:	428b      	cmp	r3, r1
    6abc:	d202      	bcs.n	6ac4 <_free_r+0xc4>
    6abe:	6892      	ldr	r2, [r2, #8]
    6ac0:	4290      	cmp	r0, r2
    6ac2:	d1f7      	bne.n	6ab4 <_free_r+0xb4>
    6ac4:	68d0      	ldr	r0, [r2, #12]
    6ac6:	60e0      	str	r0, [r4, #12]
    6ac8:	60a2      	str	r2, [r4, #8]
    6aca:	6084      	str	r4, [r0, #8]
    6acc:	60d4      	str	r4, [r2, #12]
    6ace:	4640      	mov	r0, r8
    6ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ad4:	f7ff bee0 	b.w	6898 <__malloc_unlock>
    6ad8:	6895      	ldr	r5, [r2, #8]
    6ada:	4f3a      	ldr	r7, [pc, #232]	; (6bc4 <_free_r+0x1c4>)
    6adc:	42bd      	cmp	r5, r7
    6ade:	4403      	add	r3, r0
    6ae0:	d03f      	beq.n	6b62 <_free_r+0x162>
    6ae2:	68d0      	ldr	r0, [r2, #12]
    6ae4:	60e8      	str	r0, [r5, #12]
    6ae6:	f043 0201 	orr.w	r2, r3, #1
    6aea:	6085      	str	r5, [r0, #8]
    6aec:	6062      	str	r2, [r4, #4]
    6aee:	50e3      	str	r3, [r4, r3]
    6af0:	e7b3      	b.n	6a5a <_free_r+0x5a>
    6af2:	07ff      	lsls	r7, r7, #31
    6af4:	4403      	add	r3, r0
    6af6:	d407      	bmi.n	6b08 <_free_r+0x108>
    6af8:	f855 2c08 	ldr.w	r2, [r5, #-8]
    6afc:	1aa4      	subs	r4, r4, r2
    6afe:	4413      	add	r3, r2
    6b00:	68a0      	ldr	r0, [r4, #8]
    6b02:	68e2      	ldr	r2, [r4, #12]
    6b04:	60c2      	str	r2, [r0, #12]
    6b06:	6090      	str	r0, [r2, #8]
    6b08:	4a2f      	ldr	r2, [pc, #188]	; (6bc8 <_free_r+0x1c8>)
    6b0a:	6812      	ldr	r2, [r2, #0]
    6b0c:	f043 0001 	orr.w	r0, r3, #1
    6b10:	4293      	cmp	r3, r2
    6b12:	6060      	str	r0, [r4, #4]
    6b14:	608c      	str	r4, [r1, #8]
    6b16:	d3b6      	bcc.n	6a86 <_free_r+0x86>
    6b18:	4b2c      	ldr	r3, [pc, #176]	; (6bcc <_free_r+0x1cc>)
    6b1a:	4640      	mov	r0, r8
    6b1c:	6819      	ldr	r1, [r3, #0]
    6b1e:	f7ff ff21 	bl	6964 <_malloc_trim_r>
    6b22:	e7b0      	b.n	6a86 <_free_r+0x86>
    6b24:	1811      	adds	r1, r2, r0
    6b26:	6849      	ldr	r1, [r1, #4]
    6b28:	07c9      	lsls	r1, r1, #31
    6b2a:	d444      	bmi.n	6bb6 <_free_r+0x1b6>
    6b2c:	6891      	ldr	r1, [r2, #8]
    6b2e:	68d2      	ldr	r2, [r2, #12]
    6b30:	60ca      	str	r2, [r1, #12]
    6b32:	4403      	add	r3, r0
    6b34:	f043 0001 	orr.w	r0, r3, #1
    6b38:	6091      	str	r1, [r2, #8]
    6b3a:	6060      	str	r0, [r4, #4]
    6b3c:	50e3      	str	r3, [r4, r3]
    6b3e:	e7a2      	b.n	6a86 <_free_r+0x86>
    6b40:	2a14      	cmp	r2, #20
    6b42:	d817      	bhi.n	6b74 <_free_r+0x174>
    6b44:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    6b48:	007f      	lsls	r7, r7, #1
    6b4a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    6b4e:	e7a9      	b.n	6aa4 <_free_r+0xa4>
    6b50:	10aa      	asrs	r2, r5, #2
    6b52:	684b      	ldr	r3, [r1, #4]
    6b54:	2501      	movs	r5, #1
    6b56:	fa05 f202 	lsl.w	r2, r5, r2
    6b5a:	4313      	orrs	r3, r2
    6b5c:	604b      	str	r3, [r1, #4]
    6b5e:	4602      	mov	r2, r0
    6b60:	e7b1      	b.n	6ac6 <_free_r+0xc6>
    6b62:	f043 0201 	orr.w	r2, r3, #1
    6b66:	614c      	str	r4, [r1, #20]
    6b68:	610c      	str	r4, [r1, #16]
    6b6a:	60e5      	str	r5, [r4, #12]
    6b6c:	60a5      	str	r5, [r4, #8]
    6b6e:	6062      	str	r2, [r4, #4]
    6b70:	50e3      	str	r3, [r4, r3]
    6b72:	e788      	b.n	6a86 <_free_r+0x86>
    6b74:	2a54      	cmp	r2, #84	; 0x54
    6b76:	d806      	bhi.n	6b86 <_free_r+0x186>
    6b78:	0b1a      	lsrs	r2, r3, #12
    6b7a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    6b7e:	007f      	lsls	r7, r7, #1
    6b80:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    6b84:	e78e      	b.n	6aa4 <_free_r+0xa4>
    6b86:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    6b8a:	d806      	bhi.n	6b9a <_free_r+0x19a>
    6b8c:	0bda      	lsrs	r2, r3, #15
    6b8e:	f102 0778 	add.w	r7, r2, #120	; 0x78
    6b92:	007f      	lsls	r7, r7, #1
    6b94:	f102 0577 	add.w	r5, r2, #119	; 0x77
    6b98:	e784      	b.n	6aa4 <_free_r+0xa4>
    6b9a:	f240 5054 	movw	r0, #1364	; 0x554
    6b9e:	4282      	cmp	r2, r0
    6ba0:	d806      	bhi.n	6bb0 <_free_r+0x1b0>
    6ba2:	0c9a      	lsrs	r2, r3, #18
    6ba4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    6ba8:	007f      	lsls	r7, r7, #1
    6baa:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    6bae:	e779      	b.n	6aa4 <_free_r+0xa4>
    6bb0:	27fe      	movs	r7, #254	; 0xfe
    6bb2:	257e      	movs	r5, #126	; 0x7e
    6bb4:	e776      	b.n	6aa4 <_free_r+0xa4>
    6bb6:	f043 0201 	orr.w	r2, r3, #1
    6bba:	6062      	str	r2, [r4, #4]
    6bbc:	50e3      	str	r3, [r4, r3]
    6bbe:	e762      	b.n	6a86 <_free_r+0x86>
    6bc0:	20005254 	.word	0x20005254
    6bc4:	2000525c 	.word	0x2000525c
    6bc8:	2000565c 	.word	0x2000565c
    6bcc:	20007590 	.word	0x20007590

00006bd0 <___Z14set_audioClockilmb_veneer>:
    6bd0:	f85f f000 	ldr.w	pc, [pc]	; 6bd4 <___Z14set_audioClockilmb_veneer+0x4>
    6bd4:	600012a5 	.word	0x600012a5

00006bd8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
    6bd8:	f85f f000 	ldr.w	pc, [pc]	; 6bdc <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
    6bdc:	60001665 	.word	0x60001665

00006be0 <___init_veneer>:
    6be0:	f85f f000 	ldr.w	pc, [pc]	; 6be4 <___init_veneer+0x4>
    6be4:	600018d9 	.word	0x600018d9
	...

Disassembly of section .fini:

00006bf0 <_fini>:
    6bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bf2:	bf00      	nop
